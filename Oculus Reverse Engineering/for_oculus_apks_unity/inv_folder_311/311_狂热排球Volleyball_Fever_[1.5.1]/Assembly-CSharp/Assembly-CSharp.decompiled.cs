using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ExitGames.Client.Photon;
using HTC.UnityPlugin.StereoRendering;
using Il2CppDummyDll;
using Neuston;
using Oculus.Platform;
using Oculus.Spatializer.Propagation;
using Photon.Chat;
using Photon.Pun;
using Photon.Realtime;
using RootMotion.FinalIK;
using TMPro;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.XR;
using Valve.VR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[ExecuteInEditMode]
public class CurvedUIInputModule : StandaloneInputModule
{
	[Token(Token = "0x2000223")]
	public enum CUIControlMethod
	{
		[Token(Token = "0x4000E93")]
		MOUSE = 0,
		[Token(Token = "0x4000E94")]
		GAZE = 1,
		[Token(Token = "0x4000E95")]
		WORLD_MOUSE = 2,
		[Token(Token = "0x4000E96")]
		CUSTOM_RAY = 3,
		[Token(Token = "0x4000E97")]
		STEAMVR_LEGACY = 4,
		[Token(Token = "0x4000E98")]
		OCULUSVR = 5,
		[Token(Token = "0x4000E99")]
		GOOGLEVR = 7,
		[Token(Token = "0x4000E9A")]
		STEAMVR_2 = 8
	}

	[Token(Token = "0x2000224")]
	public enum Hand
	{
		[Token(Token = "0x4000E9C")]
		Both,
		[Token(Token = "0x4000E9D")]
		Right,
		[Token(Token = "0x4000E9E")]
		Left
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private CUIControlMethod controlMethod;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private string submitButtonName;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private bool gazeUseTimedClick;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float gazeClickTimer;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float gazeClickTimerDelay;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Image gazeTimedClickProgressImage;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private float worldSpaceMouseSensitivity;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[SerializeField]
	private Hand usedHand;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Transform controllerTransformOverride;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool disableOtherInputModulesOnStart;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static CurvedUIInputModule instance;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject currentDragging;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject currentPointedAt;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject m_rightController;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private GameObject m_leftController;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float gazeTimerProgress;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Ray customControllerRay;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private float dragThreshold;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool pressedDown;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	private bool pressedLastFrame;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private Vector3 lastMouseOnScreenPos;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Vector2 worldSpaceMouseInCanvasSpace;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Vector2 lastWorldSpaceMouseOnCanvas;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector2 worldSpaceMouseOnCanvasDelta;

	[Token(Token = "0x17000001")]
	public static CurvedUIInputModule Instance
	{
		[Token(Token = "0x600000C")]
		[Address(RVA = "0x934A50", Offset = "0x934A50", VA = "0x934A50")]
		get
		{
			return null;
		}
		[Token(Token = "0x600000D")]
		[Address(RVA = "0x93B85C", Offset = "0x93B85C", VA = "0x93B85C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public static CUIControlMethod ControlMethod
	{
		[Token(Token = "0x600000E")]
		[Address(RVA = "0x934530", Offset = "0x934530", VA = "0x934530")]
		get
		{
			return default(CUIControlMethod);
		}
		[Token(Token = "0x600000F")]
		[Address(RVA = "0x934600", Offset = "0x934600", VA = "0x934600")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public Hand UsedHand
	{
		[Token(Token = "0x6000010")]
		[Address(RVA = "0x93B8C8", Offset = "0x93B8C8", VA = "0x93B8C8")]
		get
		{
			return default(Hand);
		}
		[Token(Token = "0x6000011")]
		[Address(RVA = "0x93B8D0", Offset = "0x93B8D0", VA = "0x93B8D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public Transform ControllerTransform
	{
		[Token(Token = "0x6000012")]
		[Address(RVA = "0x93B8D8", Offset = "0x93B8D8", VA = "0x93B8D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000005")]
	public Vector3 ControllerPointingDirection
	{
		[Token(Token = "0x6000013")]
		[Address(RVA = "0x93BA0C", Offset = "0x93BA0C", VA = "0x93BA0C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000006")]
	public Vector3 ControllerPointingOrigin
	{
		[Token(Token = "0x6000014")]
		[Address(RVA = "0x93BAA0", Offset = "0x93BAA0", VA = "0x93BAA0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000007")]
	public Transform ControllerTransformOverride
	{
		[Token(Token = "0x6000015")]
		[Address(RVA = "0x93B998", Offset = "0x93B998", VA = "0x93B998")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000016")]
		[Address(RVA = "0x93BB34", Offset = "0x93BB34", VA = "0x93BB34")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public GameObject CurrentPointedAt
	{
		[Token(Token = "0x6000017")]
		[Address(RVA = "0x93BBAC", Offset = "0x93BBAC", VA = "0x93BBAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000009")]
	public static Ray CustomControllerRay
	{
		[Token(Token = "0x6000018")]
		[Address(RVA = "0x93BBB4", Offset = "0x93BBB4", VA = "0x93BBB4")]
		get
		{
			return default(Ray);
		}
		[Token(Token = "0x6000019")]
		[Address(RVA = "0x93BC38", Offset = "0x93BC38", VA = "0x93BC38")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public static bool CustomControllerButtonState
	{
		[Token(Token = "0x600001A")]
		[Address(RVA = "0x93BCD4", Offset = "0x93BCD4", VA = "0x93BCD4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600001B")]
		[Address(RVA = "0x93BD40", Offset = "0x93BD40", VA = "0x93BD40")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x747B00", Offset = "0x747B00")]
	public static bool CustomControllerButtonDown
	{
		[Token(Token = "0x600001C")]
		[Address(RVA = "0x93BDB4", Offset = "0x93BDB4", VA = "0x93BDB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600001D")]
		[Address(RVA = "0x93BE20", Offset = "0x93BE20", VA = "0x93BE20")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public Vector2 WorldSpaceMouseInCanvasSpace
	{
		[Token(Token = "0x600001E")]
		[Address(RVA = "0x93BE94", Offset = "0x93BE94", VA = "0x93BE94")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x93BEA0", Offset = "0x93BEA0", VA = "0x93BEA0")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public Vector2 WorldSpaceMouseInCanvasSpaceDelta
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x93BEB4", Offset = "0x93BEB4", VA = "0x93BEB4")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700000E")]
	public float WorldSpaceMouseSensitivity
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0x93BF48", Offset = "0x93BF48", VA = "0x93BF48")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x93BF50", Offset = "0x93BF50", VA = "0x93BF50")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public bool GazeUseTimedClick
	{
		[Token(Token = "0x6000023")]
		[Address(RVA = "0x93BF58", Offset = "0x93BF58", VA = "0x93BF58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000024")]
		[Address(RVA = "0x93BF60", Offset = "0x93BF60", VA = "0x93BF60")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public float GazeClickTimer
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0x93BF6C", Offset = "0x93BF6C", VA = "0x93BF6C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000026")]
		[Address(RVA = "0x934CA4", Offset = "0x934CA4", VA = "0x934CA4")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public float GazeClickTimerDelay
	{
		[Token(Token = "0x6000027")]
		[Address(RVA = "0x93BF74", Offset = "0x93BF74", VA = "0x93BF74")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000028")]
		[Address(RVA = "0x934E08", Offset = "0x934E08", VA = "0x934E08")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public float GazeTimerProgress
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0x93BF7C", Offset = "0x93BF7C", VA = "0x93BF7C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000013")]
	public Image GazeTimedClickProgressImage
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0x93BF84", Offset = "0x93BF84", VA = "0x93BF84")]
		get
		{
			return null;
		}
		[Token(Token = "0x600002B")]
		[Address(RVA = "0x93BF8C", Offset = "0x93BF8C", VA = "0x93BF8C")]
		set
		{
		}
	}

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x93A900", Offset = "0x93A900", VA = "0x93A900", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x93AA24", Offset = "0x93AA24", VA = "0x93AA24", Slot = "31")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x93ABEC", Offset = "0x93ABEC", VA = "0x93ABEC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x93AC28", Offset = "0x93AC28", VA = "0x93AC28", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x93AEE0", Offset = "0x93AEE0", VA = "0x93AEE0", Slot = "32")]
	protected virtual void ProcessGaze()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x93AF48", Offset = "0x93AF48", VA = "0x93AF48", Slot = "33")]
	protected virtual void ProcessCustomRayController()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x93B164", Offset = "0x93B164", VA = "0x93B164", Slot = "34")]
	protected virtual void ProcessDownRelease(PointerEventData eventData, bool down, bool released)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x93B854", Offset = "0x93B854", VA = "0x93B854", Slot = "35")]
	protected virtual void ProcessViveControllers()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x93B858", Offset = "0x93B858", VA = "0x93B858", Slot = "36")]
	protected virtual void ProcessOculusVRController()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x93AEDC", Offset = "0x93AEDC", VA = "0x93AEDC")]
	private void ProcessSteamVR2Controllers()
	{
	}

	[Token(Token = "0x600000B")]
	private static T EnableInputModule<T>() where T : BaseInputModule
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x93BF94", Offset = "0x93BF94", VA = "0x93BF94")]
	public CurvedUIInputModule()
	{
	}
}
[Token(Token = "0x2000003")]
public enum ButtonTypes
{
	[Token(Token = "0x400001A")]
	NotDefined,
	[Token(Token = "0x400001B")]
	Previous,
	[Token(Token = "0x400001C")]
	Next
}
[Token(Token = "0x2000004")]
public class PEButtonScript : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button myButton;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ButtonTypes ButtonType;

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x989020", Offset = "0x989020", VA = "0x989020")]
	private void Start()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x989088", Offset = "0x989088", VA = "0x989088", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x989100", Offset = "0x989100", VA = "0x989100", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x98916C", Offset = "0x98916C", VA = "0x98916C")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x9891D0", Offset = "0x9891D0", VA = "0x9891D0")]
	public PEButtonScript()
	{
	}
}
[Token(Token = "0x2000005")]
public class PEDestoryTimed : MonoBehaviour
{
	[Token(Token = "0x6000033")]
	[Address(RVA = "0x9891D8", Offset = "0x9891D8", VA = "0x9891D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x9891DC", Offset = "0x9891DC", VA = "0x9891DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x9891E0", Offset = "0x9891E0", VA = "0x9891E0")]
	public PEDestoryTimed()
	{
	}
}
[Token(Token = "0x2000006")]
public class ParticleEffectsLibrary : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ParticleEffectsLibrary GlobalAccess;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalEffects;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int CurrentParticleEffectIndex;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentParticleEffectNum;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3[] ParticleEffectSpawnOffsets;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float[] ParticleEffectLifetimes;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] ParticleEffectPrefabs;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string effectNameString;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Transform> currentActivePEList;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 spawnPosition;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x989BA8", Offset = "0x989BA8", VA = "0x989BA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x989E90", Offset = "0x989E90", VA = "0x989E90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x989E94", Offset = "0x989E94", VA = "0x989E94")]
	public string GetCurrentPENameString()
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x98A07C", Offset = "0x98A07C", VA = "0x98A07C")]
	public void PreviousParticleEffect()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x98A3B4", Offset = "0x98A3B4", VA = "0x98A3B4")]
	public void NextParticleEffect()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x98A6EC", Offset = "0x98A6EC", VA = "0x98A6EC")]
	public void SpawnParticleEffect(Vector3 positionInWorldToSpawn)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x98A9C0", Offset = "0x98A9C0", VA = "0x98A9C0")]
	public ParticleEffectsLibrary()
	{
	}
}
[Token(Token = "0x2000007")]
public class UICanvasManager : MonoBehaviour
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UICanvasManager GlobalAccess;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool MouseOverButton;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text PENameText;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text ToolTipText;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit rayHit;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x9CB67C", Offset = "0x9CB67C", VA = "0x9CB67C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x9CB6D0", Offset = "0x9CB6D0", VA = "0x9CB6D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x9CB794", Offset = "0x9CB794", VA = "0x9CB794")]
	private void Update()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x9CBAA4", Offset = "0x9CBAA4", VA = "0x9CBAA4")]
	public void UpdateToolTip(ButtonTypes toolTipType)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x9CBB84", Offset = "0x9CBB84", VA = "0x9CBB84")]
	public void ClearToolTip()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x9CB8D4", Offset = "0x9CB8D4", VA = "0x9CB8D4")]
	private void SelectPreviousPE()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x9CB9BC", Offset = "0x9CB9BC", VA = "0x9CB9BC")]
	private void SelectNextPE()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x9CB808", Offset = "0x9CB808", VA = "0x9CB808")]
	private void SpawnCurrentParticleEffect()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x9CBC2C", Offset = "0x9CBC2C", VA = "0x9CBC2C")]
	public void UIButtonClick(ButtonTypes buttonTypeClicked)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x9CBC48", Offset = "0x9CBC48", VA = "0x9CBC48")]
	public UICanvasManager()
	{
	}
}
[Token(Token = "0x2000008")]
public class ETFXProjectileScript : MonoBehaviour
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzleParticle;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x741DE4", Offset = "0x741DE4")]
	public float colliderRadius;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x741E1C", Offset = "0x741E1C")]
	public float collideOffset;

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x93CE98", Offset = "0x93CE98", VA = "0x93CE98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x93D0A4", Offset = "0x93D0A4", VA = "0x93D0A4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x93D6D0", Offset = "0x93D6D0", VA = "0x93D6D0")]
	public ETFXProjectileScript()
	{
	}
}
[Token(Token = "0x2000009")]
public class ETFXSceneManager : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool GUIHide;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool GUIHide2;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool GUIHide3;

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x93D6E4", Offset = "0x93D6E4", VA = "0x93D6E4")]
	public void LoadScene1()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x93D730", Offset = "0x93D730", VA = "0x93D730")]
	public void LoadScene2()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x93D77C", Offset = "0x93D77C", VA = "0x93D77C")]
	public void LoadScene3()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x93D7C8", Offset = "0x93D7C8", VA = "0x93D7C8")]
	public void LoadScene4()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x93D814", Offset = "0x93D814", VA = "0x93D814")]
	public void LoadScene5()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x93D860", Offset = "0x93D860", VA = "0x93D860")]
	public void LoadScene6()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x93D8AC", Offset = "0x93D8AC", VA = "0x93D8AC")]
	public void LoadScene7()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x93D8F8", Offset = "0x93D8F8", VA = "0x93D8F8")]
	public void LoadScene8()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x93D944", Offset = "0x93D944", VA = "0x93D944")]
	public void LoadScene9()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x93D990", Offset = "0x93D990", VA = "0x93D990")]
	public void LoadScene10()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x93D9DC", Offset = "0x93D9DC", VA = "0x93D9DC")]
	public void LoadScene11()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x93DA28", Offset = "0x93DA28", VA = "0x93DA28")]
	public void LoadScene12()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x93DA74", Offset = "0x93DA74", VA = "0x93DA74")]
	public void LoadScene13()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x93DAC0", Offset = "0x93DAC0", VA = "0x93DAC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x93DC2C", Offset = "0x93DC2C", VA = "0x93DC2C")]
	public ETFXSceneManager()
	{
	}
}
[Token(Token = "0x200000A")]
public class ActiveOnPlatform : MonoBehaviour
{
	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool activeOnWindows;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool activeOnAndroid;

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x94ACA4", Offset = "0x94ACA4", VA = "0x94ACA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x94ACD8", Offset = "0x94ACD8", VA = "0x94ACD8")]
	private bool ShouldBeActive()
	{
		return default(bool);
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x94ACE0", Offset = "0x94ACE0", VA = "0x94ACE0")]
	public ActiveOnPlatform()
	{
	}
}
[Token(Token = "0x200000B")]
public class AdaptiveGraphics : MonoBehaviour
{
	[Token(Token = "0x600005C")]
	[Address(RVA = "0x94ACE8", Offset = "0x94ACE8", VA = "0x94ACE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x94ADB0", Offset = "0x94ADB0", VA = "0x94ADB0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x94ADAC", Offset = "0x94ADAC", VA = "0x94ADAC")]
	private void ApplyResolutionScale()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x94AE74", Offset = "0x94AE74", VA = "0x94AE74")]
	public static float GetResolutionScale()
	{
		return default(float);
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x94AEB0", Offset = "0x94AEB0", VA = "0x94AEB0")]
	public AdaptiveGraphics()
	{
	}
}
[Token(Token = "0x200000C")]
public class Analytics
{
	[Token(Token = "0x6000061")]
	[Address(RVA = "0x94B8D0", Offset = "0x94B8D0", VA = "0x94B8D0")]
	public static void BallLandedInsidePlayerField(Volleyball.Context context)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x94BA3C", Offset = "0x94BA3C", VA = "0x94BA3C")]
	public static void PlayerHitBall(Volleyball.Context context)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x94BA9C", Offset = "0x94BA9C", VA = "0x94BA9C")]
	public static void MatchStarted(string type, string environment)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x94BB90", Offset = "0x94BB90", VA = "0x94BB90")]
	internal static void ReportUnexpectedDisconnect(string reason)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x94BC7C", Offset = "0x94BC7C", VA = "0x94BC7C")]
	internal static void OnlinePageEntered()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x94BCC8", Offset = "0x94BCC8", VA = "0x94BCC8")]
	internal static void OnlineConnected()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x94BD14", Offset = "0x94BD14", VA = "0x94BD14")]
	internal static void OnlineInRoom()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x94BD60", Offset = "0x94BD60", VA = "0x94BD60")]
	internal static void OnlineRoomReady()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x94BDAC", Offset = "0x94BDAC", VA = "0x94BDAC")]
	public static void MatchEnded(bool playerTeamWon, int wonSets, int lostSets, string type, string environment)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x94B930", Offset = "0x94B930", VA = "0x94B930")]
	private static void LogEvent(string eventName, [Optional] IDictionary<string, object> eventData)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x94BF88", Offset = "0x94BF88", VA = "0x94BF88")]
	public Analytics()
	{
	}
}
[Token(Token = "0x200000D")]
public class BallPredictor : MonoBehaviour
{
	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] heights;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x953CC0", Offset = "0x953CC0", VA = "0x953CC0")]
	public BallPredictor()
	{
	}
}
[Token(Token = "0x200000E")]
public class Bot : TeamMember
{
	[Token(Token = "0x2000225")]
	private enum Tactic
	{
		[Token(Token = "0x4000EA0")]
		None,
		[Token(Token = "0x4000EA1")]
		High,
		[Token(Token = "0x4000EA2")]
		Low
	}

	[Token(Token = "0x2000226")]
	private class Target
	{
		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 point;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float score;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float apexAdd;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool toPlayer;

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x9560A8", Offset = "0x9560A8", VA = "0x9560A8")]
		public Target()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000227")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74015C", Offset = "0x74015C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<Target> <>9__54_1;

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x9571D8", Offset = "0x9571D8", VA = "0x9571D8")]
		public <>c()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x9571E0", Offset = "0x9571E0", VA = "0x9571E0")]
		internal int <SelectPassTarget>b__54_1(Target a, Target b)
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float randomPassDegrees;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float randomOverDegrees;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool allowBlock;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float moveSpeed;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float rotateSpeed;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float defaultApexAdd;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float smackApexAdd;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float chanceOfPass;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float chanceOfExtremeFailure;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform characterParent;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Bot> all;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float chanceOfSet;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float chanceOfAimingForOpponentPlayerInBackRow;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float chanceOfAimingForOpponentPlayerInFrontRow;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float ballHitSpin;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E34", Offset = "0x741E34")]
	private bool <isClosestMemberToBall>k__BackingField;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Collider collider;

	[NonSerialized]
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool jumping;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float jumpTimer;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 jumpStartPosition;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 jumpStartVelocity;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float jumpAirTime;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Tactic tactic;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 desiredPosition;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ReachForBall reachForBall;

	[Token(Token = "0x17000014")]
	public bool isClosestMemberToBall
	{
		[Token(Token = "0x600006D")]
		[Address(RVA = "0x954474", Offset = "0x954474", VA = "0x954474")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449E0", Offset = "0x7449E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600006E")]
		[Address(RVA = "0x95447C", Offset = "0x95447C", VA = "0x95447C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449F0", Offset = "0x7449F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public float distanceToDesiredPosition
	{
		[Token(Token = "0x600006F")]
		[Address(RVA = "0x954488", Offset = "0x954488", VA = "0x954488")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000016")]
	private List<Bot> mates
	{
		[Token(Token = "0x6000070")]
		[Address(RVA = "0x95454C", Offset = "0x95454C", VA = "0x95454C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public bool allowHighTactic
	{
		[Token(Token = "0x6000071")]
		[Address(RVA = "0x954618", Offset = "0x954618", VA = "0x954618")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000018")]
	private Volleyball ball
	{
		[Token(Token = "0x6000072")]
		[Address(RVA = "0x954694", Offset = "0x954694", VA = "0x954694")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x9546E4", Offset = "0x9546E4", VA = "0x9546E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x95479C", Offset = "0x95479C", VA = "0x95479C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x954820", Offset = "0x954820", VA = "0x954820")]
	private void Update()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x954D38", Offset = "0x954D38", VA = "0x954D38")]
	private void UpdateBody()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x95489C", Offset = "0x95489C", VA = "0x95489C")]
	private void UpdateJumping()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x955064", Offset = "0x955064", VA = "0x955064")]
	private void Jump()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x95500C", Offset = "0x95500C", VA = "0x95500C")]
	private bool ShouldJump()
	{
		return default(bool);
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x95530C", Offset = "0x95530C", VA = "0x95530C")]
	private float DistanceToBall()
	{
		return default(float);
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x954A24", Offset = "0x954A24", VA = "0x954A24")]
	private void AssessSituation()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x9554C8", Offset = "0x9554C8", VA = "0x9554C8")]
	public void LoadCharacter(int characterIndex)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x955628", Offset = "0x955628", VA = "0x955628")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x95576C", Offset = "0x95576C", VA = "0x95576C")]
	private void HitBall(Volleyball ball)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x955FAC", Offset = "0x955FAC", VA = "0x955FAC")]
	public void ResetIKFreeze()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x955DB0", Offset = "0x955DB0", VA = "0x955DB0")]
	private Target PositionOnOtherSide()
	{
		return null;
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x9560B0", Offset = "0x9560B0", VA = "0x9560B0")]
	private Vector3 RandomPointNearPlayer(NetworkPlayer player)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x95629C", Offset = "0x95629C", VA = "0x95629C")]
	private Vector3 RandomPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x955B2C", Offset = "0x955B2C", VA = "0x955B2C")]
	private Target SelectPassTarget()
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x9567FC", Offset = "0x9567FC", VA = "0x9567FC")]
	private void AddPassTargetsForPlayer(List<Target> targets, NetworkPlayer randomPlayerInTeam)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x956408", Offset = "0x956408", VA = "0x956408")]
	private void AddPassTargetsForBotsInSameTeam(List<Target> targets)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x955FC8", Offset = "0x955FC8", VA = "0x955FC8")]
	private NetworkPlayer GetRandomPlayer(Func<NetworkPlayer, bool> predicate)
	{
		return null;
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x956AA8", Offset = "0x956AA8", VA = "0x956AA8")]
	private float CalculateScore(Vector3 to)
	{
		return default(float);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x955140", Offset = "0x955140", VA = "0x955140")]
	private Vector3 KeepOutOfPlayerComfortZone(Vector3 botPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x956E44", Offset = "0x956E44", VA = "0x956E44")]
	public Bot()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x956EF4", Offset = "0x956EF4", VA = "0x956EF4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744A00", Offset = "0x744A00")]
	private bool <get_mates>b__22_0(Bot other)
	{
		return default(bool);
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x956F94", Offset = "0x956F94", VA = "0x956F94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744A10", Offset = "0x744A10")]
	private bool <PositionOnOtherSide>b__51_0(NetworkPlayer p)
	{
		return default(bool);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x957060", Offset = "0x957060", VA = "0x957060")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744A20", Offset = "0x744A20")]
	private bool <PositionOnOtherSide>b__51_1(NetworkPlayer p)
	{
		return default(bool);
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x95712C", Offset = "0x95712C", VA = "0x95712C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744A30", Offset = "0x744A30")]
	private bool <SelectPassTarget>b__54_0(NetworkPlayer p)
	{
		return default(bool);
	}
}
[Token(Token = "0x200000F")]
public static class ClosestPlayerFinder
{
	[Token(Token = "0x600008F")]
	[Address(RVA = "0x956CC0", Offset = "0x956CC0", VA = "0x956CC0")]
	public static NetworkPlayer FindClosestPlayer(Vector3 position)
	{
		return null;
	}
}
[Token(Token = "0x2000010")]
public class BotArea : MonoBehaviour
{
	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 size;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BotArea next;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform defaultPoint;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isServeArea;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool isInBackRow;

	[Token(Token = "0x17000019")]
	public bool isInFrontRow
	{
		[Token(Token = "0x6000090")]
		[Address(RVA = "0x956CB0", Offset = "0x956CB0", VA = "0x956CB0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001A")]
	public Vector3 DefaultPosition
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0x955418", Offset = "0x955418", VA = "0x955418")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700001B")]
	public PlayAreaPlacement PlayAreaPlacement
	{
		[Token(Token = "0x6000093")]
		[Address(RVA = "0x9563B8", Offset = "0x9563B8", VA = "0x9563B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x957208", Offset = "0x957208", VA = "0x957208")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x95725C", Offset = "0x95725C", VA = "0x95725C")]
	public BotArea()
	{
	}
}
[Token(Token = "0x2000011")]
public class CharacterDatabase : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000228")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74016C", Offset = "0x74016C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<GameObject, string> <>9__3_0;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x958308", Offset = "0x958308", VA = "0x958308")]
		public <>c()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x958310", Offset = "0x958310", VA = "0x958310")]
		internal string <get_characterIds>b__3_0(GameObject cp)
		{
			return null;
		}
	}

	[Token(Token = "0x2000229")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74017C", Offset = "0x74017C")]
	private sealed class <>c__DisplayClass11_0
	{
		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string characterId;

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x95828C", Offset = "0x95828C", VA = "0x95828C")]
		public <>c__DisplayClass11_0()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x95833C", Offset = "0x95833C", VA = "0x95833C")]
		internal bool <GetCharacterPrefab>b__0(GameObject cp)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> characterPrefabs;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CharacterDatabase instance;

	[Token(Token = "0x1700001C")]
	public IEnumerable<string> characterIds
	{
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x957C14", Offset = "0x957C14", VA = "0x957C14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x957D04", Offset = "0x957D04", VA = "0x957D04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x957D58", Offset = "0x957D58", VA = "0x957D58")]
	public GameObject LoadAsChild(string characterId, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x9555A8", Offset = "0x9555A8", VA = "0x9555A8")]
	public GameObject LoadAsChild(Transform parent, int characterIndex)
	{
		return null;
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x957E3C", Offset = "0x957E3C", VA = "0x957E3C")]
	private static GameObject LoadAsChild(GameObject prefab, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x957FE0", Offset = "0x957FE0", VA = "0x957FE0")]
	private static void SetupLookAtIK(GameObject character)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x957F28", Offset = "0x957F28", VA = "0x957F28")]
	private static void SetupFullBodyBipedIK(GameObject character)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x958154", Offset = "0x958154", VA = "0x958154")]
	private static Transform FindFirstChild(string name, Transform t)
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x957D7C", Offset = "0x957D7C", VA = "0x957D7C")]
	private GameObject GetCharacterPrefab(string characterId)
	{
		return null;
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x958294", Offset = "0x958294", VA = "0x958294")]
	public int GetCharacterPrice(string characterId)
	{
		return default(int);
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x95829C", Offset = "0x95829C", VA = "0x95829C")]
	public CharacterDatabase()
	{
	}
}
[Token(Token = "0x2000012")]
public class CustomArmIK : MonoBehaviour
{
	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform head;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform hand;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform otherHand;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float armLength;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 shoulderOffset;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 neckRootOffset;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform shoulderIndicator;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform elbowIndicator;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform neckRootIndicator;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform upperArmCollider;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform lowerArmCollider;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float headRollPushPower;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 shoulderPosition;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 handPosition;

	[Token(Token = "0x1700001D")]
	public bool isRight
	{
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x93C0CC", Offset = "0x93C0CC", VA = "0x93C0CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x93C0DC", Offset = "0x93C0DC", VA = "0x93C0DC")]
	public CustomArmIK()
	{
	}
}
[Token(Token = "0x2000013")]
public class DebugCanReach : MonoBehaviour
{
	[Token(Token = "0x200022A")]
	private struct Point
	{
		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject gameObject;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Renderer renderer;
	}

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material materialReachable;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material materialNotReachable;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float resolution;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float extentX;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float extentY;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float extentZ;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float pointScale;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Point> points;

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x93C0FC", Offset = "0x93C0FC", VA = "0x93C0FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x93C3F8", Offset = "0x93C3F8", VA = "0x93C3F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x93C5E4", Offset = "0x93C5E4", VA = "0x93C5E4")]
	public DebugCanReach()
	{
	}
}
[Token(Token = "0x2000014")]
public class PeriodicRigidbodyThrower : MonoBehaviour
{
	[Token(Token = "0x200022B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74018C", Offset = "0x74018C")]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PeriodicRigidbodyThrower <>4__this;

		[Token(Token = "0x1700011A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0x98ACC0", Offset = "0x98ACC0", VA = "0x98ACC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0x98AD28", Offset = "0x98AD28", VA = "0x98AD28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x98AAB8", Offset = "0x98AAB8", VA = "0x98AAB8")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x98AC14", Offset = "0x98AC14", VA = "0x98AC14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x98AC18", Offset = "0x98AC18", VA = "0x98AC18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x98ACC8", Offset = "0x98ACC8", VA = "0x98ACC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 throwVelocity;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float delay;

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x98AA48", Offset = "0x98AA48", VA = "0x98AA48")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744A40", Offset = "0x744A40")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x98AAE4", Offset = "0x98AAE4", VA = "0x98AAE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x98AB20", Offset = "0x98AB20", VA = "0x98AB20")]
	private void Throw()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x98AB94", Offset = "0x98AB94", VA = "0x98AB94")]
	public PeriodicRigidbodyThrower()
	{
	}
}
[Token(Token = "0x2000015")]
public class DebugController : MonoBehaviour
{
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugController instance;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float slowMotionTimeScale;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform debugHand1;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform debugHand2;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform debugBall;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 throwBallUpVelocity;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 throwBallUpOffset;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<GameObject> spawnedObjects;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject spherePrefab;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject gizmoPrefab;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject directionPrefab;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool debugGraphicsEnabled;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool debugInputEnabled;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x93C66C", Offset = "0x93C66C", VA = "0x93C66C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x93C6C0", Offset = "0x93C6C0", VA = "0x93C6C0")]
	public void ClearDebugGraphics()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x93C7F0", Offset = "0x93C7F0", VA = "0x93C7F0")]
	private void ThrowBallToRandomPosition()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x93C940", Offset = "0x93C940", VA = "0x93C940")]
	public void DrawSphere(Vector3 position, [Optional] Quaternion rotation, bool drawGizmo = false)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x93CAF0", Offset = "0x93CAF0", VA = "0x93CAF0")]
	public void DrawDirection(Vector3 origin, Vector3 direction, [Optional] Color color)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x93CDA0", Offset = "0x93CDA0", VA = "0x93CDA0")]
	public DebugController()
	{
	}
}
[Token(Token = "0x2000016")]
public class DebugMenu : MonoBehaviour
{
	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PhysicalBody physicalBody;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mirror;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool render;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool editBody;

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x93CE88", Offset = "0x93CE88", VA = "0x93CE88")]
	public DebugMenu()
	{
	}
}
[Token(Token = "0x2000017")]
public class EffectSystem : MonoBehaviour
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ballHitEffectPrefab;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ballGroundEffectBluePrefab;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ballGroundEffectRedPrefab;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject explosionPrefab;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EffectSystem instance;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x93DC34", Offset = "0x93DC34", VA = "0x93DC34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x93DC88", Offset = "0x93DC88", VA = "0x93DC88")]
	public void PlayBallHitEffect(Vector3 position)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x93DE44", Offset = "0x93DE44", VA = "0x93DE44")]
	public void PlayBallGroundEffect(Vector3 position, bool localPlayerTeamWon)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x93DF44", Offset = "0x93DF44", VA = "0x93DF44")]
	public void PlayExplosionEffect(Vector3 position)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x93DC90", Offset = "0x93DC90", VA = "0x93DC90")]
	private void SpawnEffect(GameObject prefab, Vector3 position)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x93E010", Offset = "0x93E010", VA = "0x93E010")]
	public EffectSystem()
	{
	}
}
[Token(Token = "0x2000018")]
public class EnvironmentSystem : MonoBehaviour
{
	[Token(Token = "0x200022C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74019C", Offset = "0x74019C")]
	private sealed class <SwitchEnvironment>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnvironmentSystem <>4__this;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string environment;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onFinished;

		[Token(Token = "0x1700011C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x93E358", Offset = "0x93E358", VA = "0x93E358", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x93E3C0", Offset = "0x93E3C0", VA = "0x93E3C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x93E108", Offset = "0x93E108", VA = "0x93E108")]
		[DebuggerHidden]
		public <SwitchEnvironment>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x93E1D8", Offset = "0x93E1D8", VA = "0x93E1D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x93E1DC", Offset = "0x93E1DC", VA = "0x93E1DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x93E360", Offset = "0x93E360", VA = "0x93E360", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401AC", Offset = "0x7401AC")]
	private sealed class <UnloadPreviousEnvironment>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnvironmentSystem <>4__this;

		[Token(Token = "0x1700011E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0x93E48C", Offset = "0x93E48C", VA = "0x93E48C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x93E4F4", Offset = "0x93E4F4", VA = "0x93E4F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x93E1A4", Offset = "0x93E1A4", VA = "0x93E1A4")]
		[DebuggerHidden]
		public <UnloadPreviousEnvironment>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x93E3C8", Offset = "0x93E3C8", VA = "0x93E3C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x93E3CC", Offset = "0x93E3CC", VA = "0x93E3CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x93E494", Offset = "0x93E494", VA = "0x93E494", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnvironmentSystem instance;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E44", Offset = "0x741E44")]
	private string <loadedEnvironment>k__BackingField;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool switchingEnvironment;

	[Token(Token = "0x1700001E")]
	public string loadedEnvironment
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x93E020", Offset = "0x93E020", VA = "0x93E020")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744AA4", Offset = "0x744AA4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x93E028", Offset = "0x93E028", VA = "0x93E028")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744AB4", Offset = "0x744AB4")]
		private set
		{
		}
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x93E030", Offset = "0x93E030", VA = "0x93E030")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x93E084", Offset = "0x93E084", VA = "0x93E084")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744AC4", Offset = "0x744AC4")]
	public IEnumerator SwitchEnvironment(string environment, [Optional] Action onFinished)
	{
		return null;
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x93E134", Offset = "0x93E134", VA = "0x93E134")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744B28", Offset = "0x744B28")]
	private IEnumerator UnloadPreviousEnvironment()
	{
		return null;
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x93E1D0", Offset = "0x93E1D0", VA = "0x93E1D0")]
	public EnvironmentSystem()
	{
	}
}
[Token(Token = "0x2000019")]
public class GameRules : MonoBehaviourPun
{
	[Token(Token = "0x200022E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401BC", Offset = "0x7401BC")]
	private sealed class <StartNewMatchRoutine>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x17000120")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x944160", Offset = "0x944160", VA = "0x944160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x9441C8", Offset = "0x9441C8", VA = "0x9441C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x941660", Offset = "0x941660", VA = "0x941660")]
		[DebuggerHidden]
		public <StartNewMatchRoutine>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x943F20", Offset = "0x943F20", VA = "0x943F20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x943F24", Offset = "0x943F24", VA = "0x943F24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x944168", Offset = "0x944168", VA = "0x944168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401CC", Offset = "0x7401CC")]
	private sealed class <EndRallyRoutine>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int scoringTeam;

		[Token(Token = "0x17000122")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0x9432F8", Offset = "0x9432F8", VA = "0x9432F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x943360", Offset = "0x943360", VA = "0x943360", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x941D48", Offset = "0x941D48", VA = "0x941D48")]
		[DebuggerHidden]
		public <EndRallyRoutine>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x942FE8", Offset = "0x942FE8", VA = "0x942FE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x942FEC", Offset = "0x942FEC", VA = "0x942FEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x943300", Offset = "0x943300", VA = "0x943300", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000230")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401DC", Offset = "0x7401DC")]
	private sealed class <StartNewRallyRoutine>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int servingTeam;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Volleyball <ball>5__2;

		[Token(Token = "0x17000124")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0x944708", Offset = "0x944708", VA = "0x944708", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x944770", Offset = "0x944770", VA = "0x944770", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9420A8", Offset = "0x9420A8", VA = "0x9420A8")]
		[DebuggerHidden]
		public <StartNewRallyRoutine>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x9441D0", Offset = "0x9441D0", VA = "0x9441D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x9441D4", Offset = "0x9441D4", VA = "0x9441D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x944710", Offset = "0x944710", VA = "0x944710", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000231")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401EC", Offset = "0x7401EC")]
	private sealed class <>c__DisplayClass64_0
	{
		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int servingTeam;

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x942C0C", Offset = "0x942C0C", VA = "0x942C0C")]
		public <>c__DisplayClass64_0()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x942C14", Offset = "0x942C14", VA = "0x942C14")]
		internal bool <PauseAfterRotation>b__0(NetworkPlayer p)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000232")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7401FC", Offset = "0x7401FC")]
	private sealed class <PauseAfterRotation>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int servingTeam;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameRules <>4__this;

		[Token(Token = "0x17000126")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x943EB0", Offset = "0x943EB0", VA = "0x943EB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x943F18", Offset = "0x943F18", VA = "0x943F18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x9422CC", Offset = "0x9422CC", VA = "0x9422CC")]
		[DebuggerHidden]
		public <PauseAfterRotation>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x943D10", Offset = "0x943D10", VA = "0x943D10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x943D14", Offset = "0x943D14", VA = "0x943D14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x943EB8", Offset = "0x943EB8", VA = "0x943EB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000233")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74020C", Offset = "0x74020C")]
	private sealed class <>c__DisplayClass66_0
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int servingTeam;

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x942478", Offset = "0x942478", VA = "0x942478")]
		public <>c__DisplayClass66_0()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x942C38", Offset = "0x942C38", VA = "0x942C38")]
		internal bool <GetServingPlayer>b__0(NetworkPlayer player)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000234")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74021C", Offset = "0x74021C")]
	private sealed class <>c__DisplayClass69_0
	{
		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Volleyball ball;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action <>9__4;

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x942CF0", Offset = "0x942CF0", VA = "0x942CF0")]
		public <>c__DisplayClass69_0()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x942CF8", Offset = "0x942CF8", VA = "0x942CF8")]
		internal void <LocalPlayerServe>b__4()
		{
		}
	}

	[Token(Token = "0x2000235")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74022C", Offset = "0x74022C")]
	private sealed class <>c__DisplayClass69_1
	{
		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool playerHasReleasedBall;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool collidedWithGround;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool collidedWithPlayer;

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x942D34", Offset = "0x942D34", VA = "0x942D34")]
		public <>c__DisplayClass69_1()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x942D3C", Offset = "0x942D3C", VA = "0x942D3C")]
		internal void <LocalPlayerServe>b__5()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x942DA8", Offset = "0x942DA8", VA = "0x942DA8")]
		internal bool <LocalPlayerServe>b__0()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x942DB0", Offset = "0x942DB0", VA = "0x942DB0")]
		internal void <LocalPlayerServe>b__1()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x942DBC", Offset = "0x942DBC", VA = "0x942DBC")]
		internal void <LocalPlayerServe>b__2()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x942DC8", Offset = "0x942DC8", VA = "0x942DC8")]
		internal bool <LocalPlayerServe>b__3()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000236")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74023C", Offset = "0x74023C")]
	private sealed class <LocalPlayerServe>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass69_0 <>8__1;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass69_1 <>8__2;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action <groundCollisionHandler>5__2;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Action <playerCollisionHandler>5__3;

		[Token(Token = "0x17000128")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x943CA0", Offset = "0x943CA0", VA = "0x943CA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x943D08", Offset = "0x943D08", VA = "0x943D08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x942524", Offset = "0x942524", VA = "0x942524")]
		[DebuggerHidden]
		public <LocalPlayerServe>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x943644", Offset = "0x943644", VA = "0x943644", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x943648", Offset = "0x943648", VA = "0x943648", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x943CA8", Offset = "0x943CA8", VA = "0x943CA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000237")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74024C", Offset = "0x74024C")]
	private sealed class <EndSet>d__73 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int winningTeam;

		[Token(Token = "0x1700012A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x9435D4", Offset = "0x9435D4", VA = "0x9435D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x94363C", Offset = "0x94363C", VA = "0x94363C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x942850", Offset = "0x942850", VA = "0x942850")]
		[DebuggerHidden]
		public <EndSet>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x943368", Offset = "0x943368", VA = "0x943368", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x94336C", Offset = "0x94336C", VA = "0x94336C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x9435DC", Offset = "0x9435DC", VA = "0x9435DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000238")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74025C", Offset = "0x74025C")]
	private sealed class <EndMatchRoutine>d__75 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameRules <>4__this;

		[Token(Token = "0x1700012C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x942F78", Offset = "0x942F78", VA = "0x942F78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x942FE0", Offset = "0x942FE0", VA = "0x942FE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x942988", Offset = "0x942988", VA = "0x942988")]
		[DebuggerHidden]
		public <EndMatchRoutine>d__75(int <>1__state)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x942DD8", Offset = "0x942DD8", VA = "0x942DD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x942DDC", Offset = "0x942DDC", VA = "0x942DDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x942F80", Offset = "0x942F80", VA = "0x942F80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400008B")]
	public const int HumanPlayerTeam = 0;

	[Token(Token = "0x400008C")]
	private const int MaxTouches = 3;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] servePoints;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI uiText;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI scoreText;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI setText;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float durationScore;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float durationServe;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float durationSetWon;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float durationMatchWon;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float durationNewMatch;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float pauseAfterRotationPlayer;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float pauseAfterRotationBot;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Team[] teams;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool isBombMode;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject courtGraphics;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameRules instance;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E54", Offset = "0x741E54")]
	private bool <ballInPlay>k__BackingField;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E64", Offset = "0x741E64")]
	private bool <serveInProgress>k__BackingField;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E74", Offset = "0x741E74")]
	private bool <isLocalPlayerServing>k__BackingField;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E84", Offset = "0x741E84")]
	private int <lastTouchTeam>k__BackingField;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int lastTeamServing;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool servingPlayerHasControl;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int lastTouchId;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int teamTouches;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int set;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int[] score;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int[] wonSets;

	[Token(Token = "0x1700001F")]
	public bool ballInPlay
	{
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x940314", Offset = "0x940314", VA = "0x940314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744B9C", Offset = "0x744B9C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x940308", Offset = "0x940308", VA = "0x940308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744B8C", Offset = "0x744B8C")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public bool serveInProgress
	{
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x94031C", Offset = "0x94031C", VA = "0x94031C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BAC", Offset = "0x744BAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x940324", Offset = "0x940324", VA = "0x940324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BBC", Offset = "0x744BBC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public bool isLocalPlayerServing
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x940330", Offset = "0x940330", VA = "0x940330")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BCC", Offset = "0x744BCC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x940338", Offset = "0x940338", VA = "0x940338")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BDC", Offset = "0x744BDC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public int lastTouchTeam
	{
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x94034C", Offset = "0x94034C", VA = "0x94034C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BFC", Offset = "0x744BFC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x940344", Offset = "0x940344", VA = "0x940344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744BEC", Offset = "0x744BEC")]
		private set
		{
		}
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x940354", Offset = "0x940354", VA = "0x940354")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x9403C4", Offset = "0x9403C4", VA = "0x9403C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x940414", Offset = "0x940414", VA = "0x940414")]
	public void Go()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x940460", Offset = "0x940460", VA = "0x940460")]
	private void ClearTeams()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x940564", Offset = "0x940564", VA = "0x940564")]
	private void SetUpTeamA()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x940F00", Offset = "0x940F00", VA = "0x940F00")]
	private void SetUpTeamB()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x940FFC", Offset = "0x940FFC", VA = "0x940FFC")]
	private void SetUpCourtGraphics()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x941104", Offset = "0x941104", VA = "0x941104")]
	private void SpawnBot(string prefabName, int team, int slot, float yawDeg)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x94145C", Offset = "0x94145C", VA = "0x94145C")]
	[PunRPC]
	public void Client_ClearTeams()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x9414C8", Offset = "0x9414C8", VA = "0x9414C8")]
	[PunRPC]
	public void Client_AssignBotToTeam(int botViewID, int team, int slot, int characterIndex)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x9415A0", Offset = "0x9415A0", VA = "0x9415A0")]
	[PunRPC]
	public void Client_AssignPlayerToTeam(int playerViewID, int team, int slot)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x941094", Offset = "0x941094", VA = "0x941094")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744C3C", Offset = "0x744C3C")]
	private IEnumerator StartNewMatchRoutine()
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x94168C", Offset = "0x94168C", VA = "0x94168C")]
	[PunRPC]
	public void Client_NewMatch()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x9419A8", Offset = "0x9419A8", VA = "0x9419A8")]
	public void BallGrounded(Volleyball volleyball)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x941B70", Offset = "0x941B70", VA = "0x941B70")]
	public void PlayerTouchedBall(int player, int team)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x941C68", Offset = "0x941C68", VA = "0x941C68")]
	public bool AllowedToHitBall(int touchId, int playerTeam, Vector3 ballPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x941CA8", Offset = "0x941CA8", VA = "0x941CA8")]
	public int GetRemainingTouchesForTeam(int team)
	{
		return default(int);
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x941AD0", Offset = "0x941AD0", VA = "0x941AD0")]
	private void EndRally(int scoringTeam)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x941CC8", Offset = "0x941CC8", VA = "0x941CC8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744CB0", Offset = "0x744CB0")]
	private IEnumerator EndRallyRoutine(int scoringTeam)
	{
		return null;
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x941D74", Offset = "0x941D74", VA = "0x941D74")]
	private void InvokeRpc_UpdateStats()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x941ED0", Offset = "0x941ED0", VA = "0x941ED0")]
	[PunRPC]
	public void Client_UpdateStats(int set, int[] score, int[] wonSets)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x941EDC", Offset = "0x941EDC", VA = "0x941EDC")]
	[PunRPC]
	public void Client_EndRally(int scoringTeam, Vector3 ballPosition)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x942028", Offset = "0x942028", VA = "0x942028")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744D34", Offset = "0x744D34")]
	private IEnumerator StartNewRallyRoutine(int servingTeam)
	{
		return null;
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x9420D4", Offset = "0x9420D4", VA = "0x9420D4")]
	private int CalculateRotationCount()
	{
		return default(int);
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x94224C", Offset = "0x94224C", VA = "0x94224C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744D98", Offset = "0x744D98")]
	private IEnumerator PauseAfterRotation(int servingTeam)
	{
		return null;
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x9422F8", Offset = "0x9422F8", VA = "0x9422F8")]
	[PunRPC]
	public void Client_NewRally(int servingTeam)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x942394", Offset = "0x942394", VA = "0x942394")]
	private NetworkPlayer GetServingPlayer(int servingTeam)
	{
		return null;
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x942480", Offset = "0x942480", VA = "0x942480")]
	[PunRPC]
	public void Client_RunLocalServeFlow()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x94251C", Offset = "0x94251C", VA = "0x94251C")]
	[PunRPC]
	public void Master_GiveBackControlAfterServe()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x9424AC", Offset = "0x9424AC", VA = "0x9424AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744E2C", Offset = "0x744E2C")]
	private IEnumerator LocalPlayerServe()
	{
		return null;
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x942550", Offset = "0x942550", VA = "0x942550")]
	private void InvokeRpc_RotateTeam(int startingTeam, int rotations)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x942694", Offset = "0x942694", VA = "0x942694")]
	[PunRPC]
	public void Client_RotateTeam(int team, int rotations)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x941790", Offset = "0x941790", VA = "0x941790")]
	private void RefreshUI()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x9427D0", Offset = "0x9427D0", VA = "0x9427D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744EA0", Offset = "0x744EA0")]
	private IEnumerator EndSet(int winningTeam)
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x94287C", Offset = "0x94287C", VA = "0x94287C")]
	[PunRPC]
	public void Client_EndSet(int winningTeam)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x942918", Offset = "0x942918", VA = "0x942918")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x744F14", Offset = "0x744F14")]
	private IEnumerator EndMatchRoutine()
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x9429B4", Offset = "0x9429B4", VA = "0x9429B4")]
	[PunRPC]
	public void Client_EndMatch()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x941908", Offset = "0x941908", VA = "0x941908")]
	private string GetMatchType()
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x942B64", Offset = "0x942B64", VA = "0x942B64")]
	public GameRules()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x942C04", Offset = "0x942C04", VA = "0x942C04")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744F88", Offset = "0x744F88")]
	private bool <StartNewRallyRoutine>b__62_0()
	{
		return default(bool);
	}
}
[Token(Token = "0x200001A")]
public class HUD : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PIDConfig positionPidConfig;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PIDConfig rotationPidConfig;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PIDControllerVector3 positionPidController;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PIDController rotationPidController;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HUD instance;

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xA077D4", Offset = "0xA077D4", VA = "0xA077D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xA07868", Offset = "0xA07868", VA = "0xA07868")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xA0786C", Offset = "0xA0786C", VA = "0xA0786C")]
	private void SnapToCenter()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xA07A1C", Offset = "0xA07A1C", VA = "0xA07A1C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xA07BD8", Offset = "0xA07BD8", VA = "0xA07BD8")]
	public HUD()
	{
	}
}
[Token(Token = "0x200001B")]
public class Hand : MonoBehaviour
{
	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform center;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float grabRadius;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isRight;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private VelocityEstimator velocityEstimator;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Interactable interactableInUse;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xA07BE0", Offset = "0xA07BE0", VA = "0xA07BE0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xA07C90", Offset = "0xA07C90", VA = "0xA07C90")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xA07DF4", Offset = "0xA07DF4", VA = "0xA07DF4")]
	private bool WantsToGrab()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xA07DD8", Offset = "0xA07DD8", VA = "0xA07DD8")]
	private bool WantsToRelease()
	{
		return default(bool);
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xA07FF4", Offset = "0xA07FF4", VA = "0xA07FF4")]
	private Interactable FindClosestInteractable()
	{
		return null;
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xA081FC", Offset = "0xA081FC", VA = "0xA081FC")]
	public Vector3 GetVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xA083DC", Offset = "0xA083DC", VA = "0xA083DC")]
	public Hand()
	{
	}
}
[Token(Token = "0x200001C")]
public class Head : MonoBehaviour
{
	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VelocityEstimator velocityEstimator;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ballVelocityBounceCoefficient;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float headVelocityBounceCoefficient;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxBallSpeed;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float headMovementLowerVelocity;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float headMovementUpperVelocity;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float perfectReflectionFactor;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float minCarryFactor;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxCarryFactor;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xA083E4", Offset = "0xA083E4", VA = "0xA083E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xA08444", Offset = "0xA08444", VA = "0xA08444")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xA08518", Offset = "0xA08518", VA = "0xA08518")]
	private void HandleVolleyballCollision(Volleyball volleyball)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xA089B8", Offset = "0xA089B8", VA = "0xA089B8")]
	private static float RewindToTimeOfImpact(Vector3 headVelocity, Vector3 ballVelocity, float headRadius, float ballRadius, ref Vector3 headPosition, ref Vector3 ballPosition)
	{
		return default(float);
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xA089A0", Offset = "0xA089A0", VA = "0xA089A0")]
	public Vector3 GetVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xA08B78", Offset = "0xA08B78", VA = "0xA08B78")]
	public Head()
	{
	}
}
[Token(Token = "0x200001D")]
public class GamepadDroneController : MonoBehaviour
{
	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float turnSpeed;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yaw;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tilt;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve curve;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x944778", Offset = "0x944778", VA = "0x944778")]
	private float Axis(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x9447D4", Offset = "0x9447D4", VA = "0x9447D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x944BA0", Offset = "0x944BA0", VA = "0x944BA0")]
	public GamepadDroneController()
	{
	}
}
[Token(Token = "0x200001E")]
internal class HollywoodStarter
{
	[StructLayout(3)]
	[Token(Token = "0x2000239")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74026C", Offset = "0x74026C")]
	private struct <Start>d__4 : IAsyncStateMachine
	{
		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder <>t__builder;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool <bombMode>5__2;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetworkManager <networkManager>5__3;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<bool> <>u__1;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TaskAwaiter <>u__2;

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x7C6928", Offset = "0x7C6928", VA = "0x7C6928", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x7C6930", Offset = "0x7C6930", VA = "0x7C6930", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741E94", Offset = "0x741E94")]
	private static bool <isRunning>k__BackingField;

	[Token(Token = "0x17000023")]
	public static bool isRunning
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0xA08BA4", Offset = "0xA08BA4", VA = "0xA08BA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744F98", Offset = "0x744F98")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xA08BF4", Offset = "0xA08BF4", VA = "0xA08BF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744FA8", Offset = "0x744FA8")]
		set
		{
		}
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xA08C4C", Offset = "0xA08C4C", VA = "0xA08C4C")]
	[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x744FB8", Offset = "0x744FB8")]
	public static Task Start()
	{
		return null;
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xA08D34", Offset = "0xA08D34", VA = "0xA08D34")]
	private static void SetResolution()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xA08D48", Offset = "0xA08D48", VA = "0xA08D48")]
	private static void CleanUpScene()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xA08DA0", Offset = "0xA08DA0", VA = "0xA08DA0")]
	private static void HideVisualsUnderGameObject(string v)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xA08EFC", Offset = "0xA08EFC", VA = "0xA08EFC")]
	public HollywoodStarter()
	{
	}
}
[Token(Token = "0x200001F")]
public class AdjustRootBasedOnSystem : MonoBehaviour
{
	[Token(Token = "0x6000108")]
	[Address(RVA = "0x94AEB8", Offset = "0x94AEB8", VA = "0x94AEB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x94B060", Offset = "0x94B060", VA = "0x94B060")]
	public AdjustRootBasedOnSystem()
	{
	}
}
[Token(Token = "0x2000020")]
public enum HandType
{
	[Token(Token = "0x40000C1")]
	Left,
	[Token(Token = "0x40000C2")]
	Right
}
[Token(Token = "0x2000021")]
public enum HapticEffect
{
	[Token(Token = "0x40000C4")]
	Indication,
	[Token(Token = "0x40000C5")]
	FireGun
}
[Token(Token = "0x2000022")]
public interface IVRSystem
{
	[Token(Token = "0x17000024")]
	Vector3 headPosition
	{
		[Token(Token = "0x600010A")]
		get;
	}

	[Token(Token = "0x17000025")]
	Quaternion headRotation
	{
		[Token(Token = "0x600010B")]
		get;
	}

	[Token(Token = "0x17000026")]
	bool has360tracking
	{
		[Token(Token = "0x600010C")]
		get;
	}

	[Token(Token = "0x17000027")]
	bool isUserPresent
	{
		[Token(Token = "0x600010D")]
		get;
	}

	[Token(Token = "0x600010E")]
	void Update();

	[Token(Token = "0x600010F")]
	IVRController GetLeftController();

	[Token(Token = "0x6000110")]
	IVRController GetRightController();

	[Token(Token = "0x6000111")]
	Bounds GetPlayArea();
}
[Token(Token = "0x2000023")]
public interface IVRController
{
	[Token(Token = "0x17000028")]
	Vector3 position
	{
		[Token(Token = "0x600011F")]
		get;
	}

	[Token(Token = "0x17000029")]
	Vector3 localPosition
	{
		[Token(Token = "0x6000120")]
		get;
	}

	[Token(Token = "0x1700002A")]
	Quaternion rotation
	{
		[Token(Token = "0x6000121")]
		get;
	}

	[Token(Token = "0x1700002B")]
	Quaternion localRotation
	{
		[Token(Token = "0x6000122")]
		get;
	}

	[Token(Token = "0x6000112")]
	string GetAdjustTargetName();

	[Token(Token = "0x6000113")]
	bool GetGrip();

	[Token(Token = "0x6000114")]
	bool GetGripDown();

	[Token(Token = "0x6000115")]
	bool GetGripUp();

	[Token(Token = "0x6000116")]
	bool GetTrigger();

	[Token(Token = "0x6000117")]
	float GetTriggerAnalog();

	[Token(Token = "0x6000118")]
	bool GetTriggerDown();

	[Token(Token = "0x6000119")]
	bool GetTriggerUp();

	[Token(Token = "0x600011A")]
	bool GetMenuButton();

	[Token(Token = "0x600011B")]
	bool GetThumbstickButton();

	[Token(Token = "0x600011C")]
	Vector3 GetLinearVelocity();

	[Token(Token = "0x600011D")]
	Vector3 GetAngularVelocity();

	[Token(Token = "0x600011E")]
	Vector2 GetThumbstickAxis();

	[Token(Token = "0x6000123")]
	void TriggerHapticEffect(HapticEffect effect);
}
[Token(Token = "0x2000024")]
public class InputSystem : MonoBehaviour
{
	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform trackedHead;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform trackedLeftHand;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform trackedRightHand;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform adjustedLeftHand;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform adjustedRightHand;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741EA4", Offset = "0x741EA4")]
	private IVRSystem <vrSystem>k__BackingField;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static InputSystem instance;

	[Token(Token = "0x1700002C")]
	public Transform trackingSpace
	{
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xA0AF10", Offset = "0xA0AF10", VA = "0xA0AF10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002D")]
	public IVRSystem vrSystem
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xA0AF20", Offset = "0xA0AF20", VA = "0xA0AF20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74502C", Offset = "0x74502C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xA0AF18", Offset = "0xA0AF18", VA = "0xA0AF18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74501C", Offset = "0x74501C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xA0AF28", Offset = "0xA0AF28", VA = "0xA0AF28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xA0AF80", Offset = "0xA0AF80", VA = "0xA0AF80")]
	private void SetupVR()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xA0B298", Offset = "0xA0B298", VA = "0xA0B298")]
	private void Update()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xA0B354", Offset = "0xA0B354", VA = "0xA0B354")]
	private void UpdateTrackedObjects()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xA0B924", Offset = "0xA0B924", VA = "0xA0B924")]
	public InputSystem()
	{
	}
}
[Token(Token = "0x2000025")]
public class NullVRController : IVRController
{
	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isLeft;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform trackingSpace;

	[Token(Token = "0x1700002E")]
	public Vector3 position
	{
		[Token(Token = "0x600012D")]
		[Address(RVA = "0xA12D40", Offset = "0xA12D40", VA = "0xA12D40", Slot = "17")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700002F")]
	public Vector3 localPosition
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0xA12DBC", Offset = "0xA12DBC", VA = "0xA12DBC", Slot = "18")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000030")]
	public Quaternion rotation
	{
		[Token(Token = "0x600012F")]
		[Address(RVA = "0xA12E1C", Offset = "0xA12E1C", VA = "0xA12E1C", Slot = "19")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000031")]
	public Quaternion localRotation
	{
		[Token(Token = "0x6000130")]
		[Address(RVA = "0xA12EF8", Offset = "0xA12EF8", VA = "0xA12EF8", Slot = "20")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xA12D00", Offset = "0xA12D00", VA = "0xA12D00")]
	public NullVRController(bool isLeft, Transform trackingSpace)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xA12F58", Offset = "0xA12F58", VA = "0xA12F58", Slot = "5")]
	public bool GetGrip()
	{
		return default(bool);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xA12F60", Offset = "0xA12F60", VA = "0xA12F60", Slot = "6")]
	public bool GetGripDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xA12F68", Offset = "0xA12F68", VA = "0xA12F68", Slot = "4")]
	public string GetAdjustTargetName()
	{
		return null;
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xA12FB0", Offset = "0xA12FB0", VA = "0xA12FB0", Slot = "8")]
	public bool GetTrigger()
	{
		return default(bool);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xA12FB8", Offset = "0xA12FB8", VA = "0xA12FB8", Slot = "9")]
	public float GetTriggerAnalog()
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xA12FC0", Offset = "0xA12FC0", VA = "0xA12FC0", Slot = "10")]
	public bool GetTriggerDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xA12FC8", Offset = "0xA12FC8", VA = "0xA12FC8", Slot = "11")]
	public bool GetTriggerUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xA12FD0", Offset = "0xA12FD0", VA = "0xA12FD0", Slot = "7")]
	public bool GetGripUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xA12FD8", Offset = "0xA12FD8", VA = "0xA12FD8", Slot = "14")]
	public Vector3 GetLinearVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xA13038", Offset = "0xA13038", VA = "0xA13038", Slot = "15")]
	public Vector3 GetAngularVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xA13098", Offset = "0xA13098", VA = "0xA13098", Slot = "16")]
	public Vector2 GetThumbstickAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xA130F8", Offset = "0xA130F8", VA = "0xA130F8", Slot = "12")]
	public bool GetMenuButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xA13100", Offset = "0xA13100", VA = "0xA13100", Slot = "13")]
	public bool GetThumbstickButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xA13108", Offset = "0xA13108", VA = "0xA13108", Slot = "21")]
	public void TriggerHapticEffect(HapticEffect effect)
	{
	}
}
[Token(Token = "0x2000026")]
public class NullVRSystem : IVRSystem
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private NullVRController left;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NullVRController right;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform trackingSpace;

	[Token(Token = "0x17000032")]
	public Vector3 headPosition
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0xA1310C", Offset = "0xA1310C", VA = "0xA1310C", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000033")]
	public Quaternion headRotation
	{
		[Token(Token = "0x6000141")]
		[Address(RVA = "0xA13188", Offset = "0xA13188", VA = "0xA13188", Slot = "5")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000034")]
	public bool has360tracking
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0xA131A4", Offset = "0xA131A4", VA = "0xA131A4", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public bool isUserPresent
	{
		[Token(Token = "0x6000143")]
		[Address(RVA = "0xA131AC", Offset = "0xA131AC", VA = "0xA131AC", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xA0B1F0", Offset = "0xA0B1F0", VA = "0xA0B1F0")]
	public NullVRSystem(Transform trackingSpace)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xA131B4", Offset = "0xA131B4", VA = "0xA131B4", Slot = "9")]
	public IVRController GetLeftController()
	{
		return null;
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xA131BC", Offset = "0xA131BC", VA = "0xA131BC", Slot = "10")]
	public IVRController GetRightController()
	{
		return null;
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xA131C4", Offset = "0xA131C4", VA = "0xA131C4", Slot = "11")]
	public Bounds GetPlayArea()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xA13284", Offset = "0xA13284", VA = "0xA13284", Slot = "8")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000027")]
public class OculusVRController : IVRController
{
	[Token(Token = "0x200023A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74027C", Offset = "0x74027C")]
	private sealed class <OculusHapticCoroutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float frequency;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float amplitude;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OculusVRController <>4__this;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float duration;

		[Token(Token = "0x1700012E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xAEC1B0", Offset = "0xAEC1B0", VA = "0xAEC1B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xAEC218", Offset = "0xAEC218", VA = "0xAEC218", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xAEC038", Offset = "0xAEC038", VA = "0xAEC038")]
		[DebuggerHidden]
		public <OculusHapticCoroutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xAEC064", Offset = "0xAEC064", VA = "0xAEC064", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xAEC068", Offset = "0xAEC068", VA = "0xAEC068", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xAEC1B8", Offset = "0xAEC1B8", VA = "0xAEC1B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isPrimaryAkaLeft;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform trackingSpace;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MonoBehaviour coroutineHelper;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine hapticCoroutine;

	[Token(Token = "0x17000036")]
	public Vector3 position
	{
		[Token(Token = "0x6000148")]
		[Address(RVA = "0xAEB5A0", Offset = "0xAEB5A0", VA = "0xAEB5A0", Slot = "17")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000037")]
	public Vector3 localPosition
	{
		[Token(Token = "0x6000149")]
		[Address(RVA = "0xAEB5D0", Offset = "0xAEB5D0", VA = "0xAEB5D0", Slot = "18")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000038")]
	public Quaternion rotation
	{
		[Token(Token = "0x600014A")]
		[Address(RVA = "0xAEB65C", Offset = "0xAEB65C", VA = "0xAEB65C", Slot = "19")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000039")]
	public Quaternion localRotation
	{
		[Token(Token = "0x600014B")]
		[Address(RVA = "0xAEB73C", Offset = "0xAEB73C", VA = "0xAEB73C", Slot = "20")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700003A")]
	public OVRInput.Controller controllerType
	{
		[Token(Token = "0x600014C")]
		[Address(RVA = "0xAEB648", Offset = "0xAEB648", VA = "0xAEB648")]
		get
		{
			return default(OVRInput.Controller);
		}
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xAEB7B4", Offset = "0xAEB7B4", VA = "0xAEB7B4")]
	public OculusVRController(HandType handType, Transform trackingSpace)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAEB84C", Offset = "0xAEB84C", VA = "0xAEB84C", Slot = "4")]
	public string GetAdjustTargetName()
	{
		return null;
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xAEB894", Offset = "0xAEB894", VA = "0xAEB894", Slot = "5")]
	public bool GetGrip()
	{
		return default(bool);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xAEB914", Offset = "0xAEB914", VA = "0xAEB914", Slot = "6")]
	public bool GetGripDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xAEB994", Offset = "0xAEB994", VA = "0xAEB994", Slot = "7")]
	public bool GetGripUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAEBA14", Offset = "0xAEBA14", VA = "0xAEBA14", Slot = "8")]
	public bool GetTrigger()
	{
		return default(bool);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAEBA94", Offset = "0xAEBA94", VA = "0xAEBA94", Slot = "9")]
	public float GetTriggerAnalog()
	{
		return default(float);
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAEBB10", Offset = "0xAEBB10", VA = "0xAEBB10", Slot = "10")]
	public bool GetTriggerDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAEBB90", Offset = "0xAEBB90", VA = "0xAEBB90", Slot = "11")]
	public bool GetTriggerUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAEBC10", Offset = "0xAEBC10", VA = "0xAEBC10", Slot = "14")]
	public Vector3 GetLinearVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAEBCA0", Offset = "0xAEBCA0", VA = "0xAEBCA0", Slot = "15")]
	public Vector3 GetAngularVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAEBDA0", Offset = "0xAEBDA0", VA = "0xAEBDA0", Slot = "16")]
	public Vector2 GetThumbstickAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xAEBE1C", Offset = "0xAEBE1C", VA = "0xAEBE1C", Slot = "12")]
	public bool GetMenuButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xAEBE84", Offset = "0xAEBE84", VA = "0xAEBE84", Slot = "13")]
	public bool GetThumbstickButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAEBF04", Offset = "0xAEBF04", VA = "0xAEBF04", Slot = "21")]
	public void TriggerHapticEffect(HapticEffect effect)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xAEBFA4", Offset = "0xAEBFA4", VA = "0xAEBFA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x74503C", Offset = "0x74503C")]
	private IEnumerator OculusHapticCoroutine(float frequency, float amplitude, float duration)
	{
		return null;
	}
}
[Token(Token = "0x2000028")]
public class OculusVRSystem : IVRSystem
{
	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private OculusVRController leftController;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OculusVRController rightController;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform trackingSpace;

	[Token(Token = "0x1700003B")]
	public Vector3 headPosition
	{
		[Token(Token = "0x600015E")]
		[Address(RVA = "0xAEC2BC", Offset = "0xAEC2BC", VA = "0xAEC2BC", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700003C")]
	public Quaternion headRotation
	{
		[Token(Token = "0x600015F")]
		[Address(RVA = "0xAEC33C", Offset = "0xAEC33C", VA = "0xAEC33C", Slot = "5")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700003D")]
	public bool has360tracking
	{
		[Token(Token = "0x6000160")]
		[Address(RVA = "0xAEC440", Offset = "0xAEC440", VA = "0xAEC440", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003E")]
	public bool isUserPresent
	{
		[Token(Token = "0x6000161")]
		[Address(RVA = "0xAEC448", Offset = "0xAEC448", VA = "0xAEC448", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xAEC220", Offset = "0xAEC220", VA = "0xAEC220")]
	public OculusVRSystem(Transform trackingSpace)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xAEC4DC", Offset = "0xAEC4DC", VA = "0xAEC4DC", Slot = "9")]
	public IVRController GetLeftController()
	{
		return null;
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xAEC4E4", Offset = "0xAEC4E4", VA = "0xAEC4E4", Slot = "10")]
	public IVRController GetRightController()
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xAEC4EC", Offset = "0xAEC4EC", VA = "0xAEC4EC", Slot = "11")]
	public Bounds GetPlayArea()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xAEC68C", Offset = "0xAEC68C", VA = "0xAEC68C", Slot = "8")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000029")]
public class OpenVRController : IVRController
{
	[Token(Token = "0x200023B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74028C", Offset = "0x74028C")]
	private sealed class <LongVibration>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OpenVRController <>4__this;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float amplitude;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputDevice <device>5__2;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <i>5__3;

		[Token(Token = "0x17000130")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xAED004", Offset = "0xAED004", VA = "0xAED004", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xAED06C", Offset = "0xAED06C", VA = "0xAED06C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xAECED0", Offset = "0xAECED0", VA = "0xAECED0")]
		[DebuggerHidden]
		public <LongVibration>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xAECEFC", Offset = "0xAECEFC", VA = "0xAECEFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xAECF00", Offset = "0xAECF00", VA = "0xAECF00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xAED00C", Offset = "0xAED00C", VA = "0xAED00C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private SteamVR_Controller.Device device;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform trackingSpace;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SteamVR_Events.Action newPosesAction;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 poseLocalPosition;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion poseLocalRotation;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MonoBehaviour coroutineHelper;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isLeft;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine hapticCoroutine;

	[Token(Token = "0x1700003F")]
	public Vector3 position
	{
		[Token(Token = "0x6000167")]
		[Address(RVA = "0xAEC774", Offset = "0xAEC774", VA = "0xAEC774", Slot = "17")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000040")]
	public Vector3 localPosition
	{
		[Token(Token = "0x6000168")]
		[Address(RVA = "0xAEC79C", Offset = "0xAEC79C", VA = "0xAEC79C", Slot = "18")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000041")]
	public Quaternion rotation
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xAEC7A8", Offset = "0xAEC7A8", VA = "0xAEC7A8", Slot = "19")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000042")]
	public Quaternion localRotation
	{
		[Token(Token = "0x600016A")]
		[Address(RVA = "0xAEC878", Offset = "0xAEC878", VA = "0xAEC878", Slot = "20")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xAEC6EC", Offset = "0xAEC6EC", VA = "0xAEC6EC")]
	public OpenVRController(bool isLeft, Transform trackingSpace)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xAEC884", Offset = "0xAEC884", VA = "0xAEC884")]
	public void Initialize(SteamVR_Controller.Device device)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xAEC988", Offset = "0xAEC988", VA = "0xAEC988")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xAECA4C", Offset = "0xAECA4C", VA = "0xAECA4C", Slot = "4")]
	public string GetAdjustTargetName()
	{
		return null;
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xAECA94", Offset = "0xAECA94", VA = "0xAECA94", Slot = "5")]
	public bool GetGrip()
	{
		return default(bool);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xAECAAC", Offset = "0xAECAAC", VA = "0xAECAAC", Slot = "6")]
	public bool GetGripDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xAECAC4", Offset = "0xAECAC4", VA = "0xAECAC4", Slot = "7")]
	public bool GetGripUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xAECADC", Offset = "0xAECADC", VA = "0xAECADC", Slot = "8")]
	public bool GetTrigger()
	{
		return default(bool);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xAECAF4", Offset = "0xAECAF4", VA = "0xAECAF4", Slot = "9")]
	public float GetTriggerAnalog()
	{
		return default(float);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xAECB20", Offset = "0xAECB20", VA = "0xAECB20", Slot = "10")]
	public bool GetTriggerDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xAECB38", Offset = "0xAECB38", VA = "0xAECB38", Slot = "11")]
	public bool GetTriggerUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xAECB50", Offset = "0xAECB50", VA = "0xAECB50", Slot = "14")]
	public Vector3 GetLinearVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xAECBE4", Offset = "0xAECBE4", VA = "0xAECBE4", Slot = "15")]
	public Vector3 GetAngularVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xAECD04", Offset = "0xAECD04", VA = "0xAECD04", Slot = "16")]
	public Vector2 GetThumbstickAxis()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xAECD84", Offset = "0xAECD84", VA = "0xAECD84", Slot = "12")]
	public bool GetMenuButton()
	{
		return default(bool);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xAECD9C", Offset = "0xAECD9C", VA = "0xAECD9C", Slot = "13")]
	public bool GetThumbstickButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAECDB4", Offset = "0xAECDB4", VA = "0xAECDB4", Slot = "21")]
	public void TriggerHapticEffect(HapticEffect effect)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAECE4C", Offset = "0xAECE4C", VA = "0xAECE4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7450A0", Offset = "0x7450A0")]
	private IEnumerator LongVibration(float amplitude, float duration)
	{
		return null;
	}
}
[Token(Token = "0x200002A")]
public class OpenVRSystem : IVRSystem
{
	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private OpenVRController leftController;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OpenVRController rightController;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hasInitializedControllers;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform trackingSpace;

	[Token(Token = "0x17000043")]
	public Vector3 headPosition
	{
		[Token(Token = "0x600017D")]
		[Address(RVA = "0xAED110", Offset = "0xAED110", VA = "0xAED110", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000044")]
	public Quaternion headRotation
	{
		[Token(Token = "0x600017E")]
		[Address(RVA = "0xAED190", Offset = "0xAED190", VA = "0xAED190", Slot = "5")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000045")]
	public bool has360tracking
	{
		[Token(Token = "0x600017F")]
		[Address(RVA = "0xAED294", Offset = "0xAED294", VA = "0xAED294", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000046")]
	public bool isUserPresent
	{
		[Token(Token = "0x6000180")]
		[Address(RVA = "0xAED29C", Offset = "0xAED29C", VA = "0xAED29C", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAED074", Offset = "0xAED074", VA = "0xAED074")]
	public OpenVRSystem(Transform trackingSpace)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xAED308", Offset = "0xAED308", VA = "0xAED308", Slot = "9")]
	public IVRController GetLeftController()
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xAED310", Offset = "0xAED310", VA = "0xAED310", Slot = "10")]
	public IVRController GetRightController()
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xAED318", Offset = "0xAED318", VA = "0xAED318", Slot = "11")]
	public Bounds GetPlayArea()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xAED660", Offset = "0xAED660", VA = "0xAED660", Slot = "8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xAED4DC", Offset = "0xAED4DC", VA = "0xAED4DC")]
	private bool GetRect(ref HmdQuad_t rect)
	{
		return default(bool);
	}
}
[Token(Token = "0x200002B")]
public class Interactable : MonoBehaviour
{
	[Token(Token = "0x17000047")]
	public virtual bool canInteract
	{
		[Token(Token = "0x6000186")]
		[Address(RVA = "0xA0B990", Offset = "0xA0B990", VA = "0xA0B990", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000048")]
	public virtual bool highPriority
	{
		[Token(Token = "0x6000187")]
		[Address(RVA = "0xA0B998", Offset = "0xA0B998", VA = "0xA0B998", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xA0B9A0", Offset = "0xA0B9A0", VA = "0xA0B9A0", Slot = "6")]
	public virtual void StartInteraction(Hand hand, bool initiatedByLocalPlayer)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xA0B9A4", Offset = "0xA0B9A4", VA = "0xA0B9A4", Slot = "7")]
	public virtual void StopInteraction()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xA0B9A8", Offset = "0xA0B9A8", VA = "0xA0B9A8")]
	public Interactable()
	{
	}
}
[Token(Token = "0x200002C")]
public class NetRipple : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200023C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74029C", Offset = "0x74029C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Renderer, IEnumerable<Material>> <>9__8_0;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xA0F170", Offset = "0xA0F170", VA = "0xA0F170")]
		public <>c()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xA0F178", Offset = "0xA0F178", VA = "0xA0F178")]
		internal IEnumerable<Material> <Start>b__8_0(Renderer r)
		{
			return null;
		}
	}

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform testSourceTransform;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] renderers;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve curve;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material[] materials;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 sourcePosition;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 sourceVelocity;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float time;

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xA0EC68", Offset = "0xA0EC68", VA = "0xA0EC68")]
	private void Start()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xA0ED78", Offset = "0xA0ED78", VA = "0xA0ED78")]
	private void Update()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xA0EF40", Offset = "0xA0EF40", VA = "0xA0EF40")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xA0F040", Offset = "0xA0F040", VA = "0xA0F040")]
	public void StartRipple(Vector3 position, Vector3 velocity)
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xA0F054", Offset = "0xA0F054", VA = "0xA0F054")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x745104", Offset = "0x745104")]
	public void TestRipple()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xA0F0FC", Offset = "0xA0F0FC", VA = "0xA0F0FC")]
	public NetRipple()
	{
	}
}
[Token(Token = "0x200002D")]
internal class NetRegion
{
	[Token(Token = "0x200023D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402AC", Offset = "0x7402AC")]
	private sealed class <>c__DisplayClass1_0
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string region;

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xA0EA08", Offset = "0xA0EA08", VA = "0xA0EA08")]
		public <>c__DisplayClass1_0()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xA0EC54", Offset = "0xA0EC54", VA = "0xA0EC54")]
		internal bool <GetRegionIndex>b__0(string r)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] regions;

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xA0E924", Offset = "0xA0E924", VA = "0xA0E924")]
	private static int GetRegionIndex(string region)
	{
		return default(int);
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xA0EA10", Offset = "0xA0EA10", VA = "0xA0EA10")]
	public static string GetNext(string region)
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xA0EAC4", Offset = "0xA0EAC4", VA = "0xA0EAC4")]
	public NetRegion()
	{
	}
}
[Token(Token = "0x200002E")]
internal class NetworkManager : IConnectionCallbacks, IMatchmakingCallbacks, IInRoomCallbacks
{
	[StructLayout(3)]
	[Token(Token = "0x200023E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402BC", Offset = "0x7402BC")]
	private struct <JoinOrCreateRoom>d__26 : IAsyncStateMachine
	{
		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder<bool> <>t__builder;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkManager <>4__this;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter<bool> <>u__1;

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x7C6964", Offset = "0x7C6964", VA = "0x7C6964", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x7C696C", Offset = "0x7C696C", VA = "0x7C696C", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Action Connected;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<string> Disconnected;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action PlayerLeftRoom;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NetworkManager _instance;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TaskCompletionSource<bool> connectToMasterClientTcs;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TaskCompletionSource<bool> leaveRoomTcs;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TaskCompletionSource<bool> disconnectTcs;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TaskCompletionSource<bool> joinRoomTcs;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TaskCompletionSource<bool> createRoomTcs;

	[Token(Token = "0x17000049")]
	public static NetworkManager instance
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0xA09760", Offset = "0xA09760", VA = "0xA09760")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004A")]
	public int playerCountInRoom
	{
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xA09940", Offset = "0xA09940", VA = "0xA09940")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004B")]
	public bool isInOfflineMode
	{
		[Token(Token = "0x6000199")]
		[Address(RVA = "0xA0AA9C", Offset = "0xA0AA9C", VA = "0xA0AA9C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004C")]
	public bool isInOnlineMode
	{
		[Token(Token = "0x600019A")]
		[Address(RVA = "0xA0F340", Offset = "0xA0F340", VA = "0xA0F340")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004D")]
	public bool isMasterClient
	{
		[Token(Token = "0x600019B")]
		[Address(RVA = "0xA0F3EC", Offset = "0xA0F3EC", VA = "0xA0F3EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xA0F208", Offset = "0xA0F208", VA = "0xA0F208")]
	public Task LeaveRoom()
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xA0A188", Offset = "0xA0A188", VA = "0xA0A188")]
	public Task Disconnect()
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xA0F194", Offset = "0xA0F194", VA = "0xA0F194")]
	public NetworkManager()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xA0E2F8", Offset = "0xA0E2F8", VA = "0xA0E2F8")]
	public Task<bool> ConnectToMasterServer(string region)
	{
		return null;
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xA0F534", Offset = "0xA0F534", VA = "0xA0F534")]
	private static AppSettings AppSettingsWithFixedRegion(string region)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xA0F44C", Offset = "0xA0F44C", VA = "0xA0F44C")]
	private void SetPhotonAppVersion()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xA097DC", Offset = "0xA097DC", VA = "0xA097DC")]
	public void GoOffline()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xA09840", Offset = "0xA09840", VA = "0xA09840")]
	[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x74513C", Offset = "0x74513C")]
	public Task<bool> JoinOrCreateRoom()
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xA0F5E0", Offset = "0xA0F5E0", VA = "0xA0F5E0")]
	private Task<bool> CreateRoom()
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xA0F6B8", Offset = "0xA0F6B8", VA = "0xA0F6B8")]
	public Task<bool> JoinRandomRoom()
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xA0F758", Offset = "0xA0F758", VA = "0xA0F758", Slot = "4")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xA0F7E4", Offset = "0xA0F7E4", VA = "0xA0F7E4", Slot = "5")]
	public void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xA0F8C4", Offset = "0xA0F8C4", VA = "0xA0F8C4", Slot = "9")]
	public void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xA0F8C8", Offset = "0xA0F8C8", VA = "0xA0F8C8", Slot = "8")]
	public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xA0F8CC", Offset = "0xA0F8CC", VA = "0xA0F8CC", Slot = "6")]
	public void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xA0F9F4", Offset = "0xA0F9F4", VA = "0xA0F9F4", Slot = "7")]
	public void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xA0FA60", Offset = "0xA0FA60", VA = "0xA0FA60", Slot = "10")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(List<FriendInfo> friendList)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xA0FACC", Offset = "0xA0FACC", VA = "0xA0FACC", Slot = "11")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xA0FB60", Offset = "0xA0FB60", VA = "0xA0FB60", Slot = "12")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xA0FBF4", Offset = "0xA0FBF4", VA = "0xA0FBF4", Slot = "13")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xA0FC88", Offset = "0xA0FC88", VA = "0xA0FC88", Slot = "14")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xA0FD1C", Offset = "0xA0FD1C", VA = "0xA0FD1C", Slot = "15")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xA0FDB0", Offset = "0xA0FDB0", VA = "0xA0FDB0", Slot = "16")]
	private void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xA0FE44", Offset = "0xA0FE44", VA = "0xA0FE44", Slot = "17")]
	private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xA0FE48", Offset = "0xA0FE48", VA = "0xA0FE48", Slot = "18")]
	private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xA0FE5C", Offset = "0xA0FE5C", VA = "0xA0FE5C", Slot = "19")]
	private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xA0FE60", Offset = "0xA0FE60", VA = "0xA0FE60", Slot = "20")]
	private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xA0FE64", Offset = "0xA0FE64", VA = "0xA0FE64", Slot = "21")]
	private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
	{
	}
}
[Token(Token = "0x200002F")]
public class NetworkPlayer : TeamMember
{
	[Token(Token = "0x200023F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402CC", Offset = "0x7402CC")]
	private sealed class <>c__DisplayClass26_0
	{
		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float jumpStartTime;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NetworkPlayer <>4__this;

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xA1183C", Offset = "0xA1183C", VA = "0xA1183C")]
		public <>c__DisplayClass26_0()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xA11844", Offset = "0xA11844", VA = "0xA11844")]
		internal bool <Jump>b__0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000240")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402DC", Offset = "0x7402DC")]
	private sealed class <Jump>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkPlayer <>4__this;

		[Token(Token = "0x17000132")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xA11B1C", Offset = "0xA11B1C", VA = "0xA11B1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xA11B84", Offset = "0xA11B84", VA = "0xA11B84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xA11168", Offset = "0xA11168", VA = "0xA11168")]
		[DebuggerHidden]
		public <Jump>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xA1189C", Offset = "0xA1189C", VA = "0xA1189C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xA118A0", Offset = "0xA118A0", VA = "0xA118A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xA11B24", Offset = "0xA11B24", VA = "0xA11B24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000241")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402EC", Offset = "0x7402EC")]
	private sealed class <SnapTurn>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkPlayer <>4__this;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float degrees;

		[Token(Token = "0x17000134")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xA11CC0", Offset = "0xA11CC0", VA = "0xA11CC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000135")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xA11D28", Offset = "0xA11D28", VA = "0xA11D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xA1125C", Offset = "0xA1125C", VA = "0xA1125C")]
		[DebuggerHidden]
		public <SnapTurn>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xA11B8C", Offset = "0xA11B8C", VA = "0xA11B8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xA11B90", Offset = "0xA11B90", VA = "0xA11B90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xA11CC8", Offset = "0xA11CC8", VA = "0xA11CC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000242")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7402FC", Offset = "0x7402FC")]
	private sealed class <Teleport>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkPlayer <>4__this;

		[Token(Token = "0x17000136")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xA11F84", Offset = "0xA11F84", VA = "0xA11F84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xA11FEC", Offset = "0xA11FEC", VA = "0xA11FEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xA11518", Offset = "0xA11518", VA = "0xA11518")]
		[DebuggerHidden]
		public <Teleport>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xA11D30", Offset = "0xA11D30", VA = "0xA11D30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xA11D34", Offset = "0xA11D34", VA = "0xA11D34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xA11F8C", Offset = "0xA11F8C", VA = "0xA11F8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float flashFadeDuration;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float flashSustainDuration;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float jumpFadeDuration;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float jumpSustainDuration;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float postJumpDuration;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] objectsToDeactivateLocally;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float moveForwardSpeed;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float moveSideSpeed;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float moveBlendDuration;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static NetworkPlayer localInstance;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<NetworkPlayer> all;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool jumping;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool turning;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float moveBlend;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector2 lastMoveAxis;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741EB4", Offset = "0x741EB4")]
	private PhysicalBody <body>k__BackingField;

	[Token(Token = "0x1700004E")]
	public bool hasFrontPosition
	{
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xA1014C", Offset = "0xA1014C", VA = "0xA1014C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004F")]
	public PhysicalBody body
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xA101E4", Offset = "0xA101E4", VA = "0xA101E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7451A0", Offset = "0x7451A0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xA101EC", Offset = "0xA101EC", VA = "0xA101EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7451B0", Offset = "0x7451B0")]
		internal set
		{
		}
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xA101F4", Offset = "0xA101F4", VA = "0xA101F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xA104FC", Offset = "0xA104FC", VA = "0xA104FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xA106E0", Offset = "0xA106E0", VA = "0xA106E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xA107B8", Offset = "0xA107B8", VA = "0xA107B8")]
	private bool CanJump()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xA1084C", Offset = "0xA1084C", VA = "0xA1084C")]
	private bool IsJumpButtonDown()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xA10AA4", Offset = "0xA10AA4", VA = "0xA10AA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7451C0", Offset = "0x7451C0")]
	private IEnumerator Jump()
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xA10B34", Offset = "0xA10B34", VA = "0xA10B34")]
	private bool IsSnapTurnLeftButtonDown()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xA10C9C", Offset = "0xA10C9C", VA = "0xA10C9C")]
	private bool IsSnapTurnRightButtonDown()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xA10B14", Offset = "0xA10B14", VA = "0xA10B14")]
	private bool CanSnapTurn()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xA10C1C", Offset = "0xA10C1C", VA = "0xA10C1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745224", Offset = "0x745224")]
	private IEnumerator SnapTurn(float degrees)
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xA10D84", Offset = "0xA10D84", VA = "0xA10D84")]
	private bool CanMove()
	{
		return default(bool);
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xA10D8C", Offset = "0xA10D8C", VA = "0xA10D8C")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xA11350", Offset = "0xA11350", VA = "0xA11350")]
	private void ClampToPlayArea()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xA11288", Offset = "0xA11288", VA = "0xA11288")]
	private static IVRController GetControllerForMovement()
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xA11194", Offset = "0xA11194", VA = "0xA11194")]
	private static IVRController GetControllerForTurning()
	{
		return null;
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xA10588", Offset = "0xA10588", VA = "0xA10588")]
	public void DetachInputSystem()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xA11470", Offset = "0xA11470", VA = "0xA11470", Slot = "4")]
	public override void MoveToNextArea(int rotations)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xA114A8", Offset = "0xA114A8", VA = "0xA114A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745288", Offset = "0x745288")]
	private IEnumerator Teleport()
	{
		return null;
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xA11544", Offset = "0xA11544", VA = "0xA11544")]
	public bool CanReachPhysically(Vector3 pointWorld)
	{
		return default(bool);
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xA11744", Offset = "0xA11744", VA = "0xA11744", Slot = "5")]
	public override float GetDistanceToBallImpact(Vector3 ballImpact)
	{
		return default(float);
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xA11774", Offset = "0xA11774", VA = "0xA11774")]
	public NetworkPlayer()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xA11818", Offset = "0xA11818", VA = "0xA11818")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7452EC", Offset = "0x7452EC")]
	private bool <SnapTurn>b__30_0()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class PhysicalArm
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform handTarget;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform upperCollider;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform lowerCollider;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PhysicalBodyPart hand;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 shoulderOffset;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float length;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform shoulderIndicator;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform elbowIndicator;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform neckRootIndicator;

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x98BB9C", Offset = "0x98BB9C", VA = "0x98BB9C")]
	public PhysicalArm()
	{
	}
}
[Token(Token = "0x2000031")]
public class PhysicalBody : MonoBehaviour, IPunObservable
{
	[Token(Token = "0x2000243")]
	public struct PlayerPose
	{
		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 trackingOriginPosition;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion trackingOriginRotation;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 playAreaBoundsMin;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 playAreaBoundsMax;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 headPosition;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion headRotation;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftHandPosition;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Quaternion leftHandRotation;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 rightHandPosition;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Quaternion rightHandRotation;
	}

	[Token(Token = "0x2000244")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74030C", Offset = "0x74030C")]
	private sealed class <IgnoreCollisionRoutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicalBody <>4__this;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Volleyball <ball>5__2;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider <ballCollider>5__3;

		[Token(Token = "0x17000138")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x9906C0", Offset = "0x9906C0", VA = "0x9906C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x990728", Offset = "0x990728", VA = "0x990728", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x98D6F4", Offset = "0x98D6F4", VA = "0x98D6F4")]
		[DebuggerHidden]
		public <IgnoreCollisionRoutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x990514", Offset = "0x990514", VA = "0x990514", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x990518", Offset = "0x990518", VA = "0x990518", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x9906C8", Offset = "0x9906C8", VA = "0x9906C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000245")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74031C", Offset = "0x74031C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Bot, bool> <>9__55_0;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<Bot, Vector3> <>9__55_1;

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x990420", Offset = "0x990420", VA = "0x990420")]
		public <>c()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x990428", Offset = "0x990428", VA = "0x990428")]
		internal bool <SelectAimAssistTargetOnPlayerSide>b__55_0(Bot b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x990448", Offset = "0x990448", VA = "0x990448")]
		internal Vector3 <SelectAimAssistTargetOnPlayerSide>b__55_1(Bot b)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x741EC4", Offset = "0x741EC4")]
	public Vector3 neckRootOffset;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform headTarget;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform followHead;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform followTorso;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PhysicalArm leftArm;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PhysicalArm rightArm;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float headRollPushPower;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x741EFC", Offset = "0x741EFC")]
	public float handToChestDirectionBlend;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x741F14", Offset = "0x741F14")]
	public float reciprocalRange;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float reciprocalMaxRelativeSpeed;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool debugBreakOnCollision;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool debugBreakOnReciprocalTooFar;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool debugBreakOnReciprocalInRange;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float perfectHandAngleDual;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float perfectHandAngleSingle;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float perfectHandAngleArm;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x741F4C", Offset = "0x741F4C")]
	public float handMovementLowerVelocity;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float handMovementUpperVelocity;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float perfectReflectionFactor;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float minCarryFactor;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float maxCarryFactor;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float maxBallSpeed;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float bounceBase;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float bounceHand;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float minHitSpeed;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float coefficientOfRestitution;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PhysicalBody localInstance;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Collider[] bodyColliders;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Quaternion chestRotation;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741F84", Offset = "0x741F84")]
	private PlayerPose <currentPose>k__BackingField;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float bodyPartMass;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float ballMass;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public float posePlaybackDelay;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public bool autoPosePlaybackDelay;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<PlayerPose> recordPoseBuffer;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Queue<PlayerPose> playbackPoseBuffer;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float playbackTimeOffset;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float timeOfLastSync;

	[Token(Token = "0x17000050")]
	public PlayerPose currentPose
	{
		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x98BBB0", Offset = "0x98BBB0", VA = "0x98BBB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7452FC", Offset = "0x7452FC")]
		get
		{
			return default(PlayerPose);
		}
		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x98BBC0", Offset = "0x98BBC0", VA = "0x98BBC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74530C", Offset = "0x74530C")]
		private set
		{
		}
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x98BBDC", Offset = "0x98BBDC", VA = "0x98BBDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x98BCD8", Offset = "0x98BCD8", VA = "0x98BCD8")]
	public void DisableColliders()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x98BD88", Offset = "0x98BD88", VA = "0x98BD88")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x98C2E0", Offset = "0x98C2E0", VA = "0x98C2E0")]
	private void StepAvatarPlayback()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x98BE08", Offset = "0x98BE08", VA = "0x98BE08")]
	private void CapturePlayerPoseFromTrackingSystem()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x98C3F4", Offset = "0x98C3F4", VA = "0x98C3F4")]
	private void UpdateBodyParts()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x98CA38", Offset = "0x98CA38", VA = "0x98CA38")]
	private void UpdateArm(PhysicalArm arm, Vector3 handPosition, Quaternion handRotation, Vector3 neckRootPosition, Quaternion chestRotation, Quaternion headForwardRotation)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x98CEAC", Offset = "0x98CEAC", VA = "0x98CEAC")]
	private Vector3 GetBendNormal(Vector3 dir, PhysicalArm arm, Quaternion chestRotation)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x98D32C", Offset = "0x98D32C", VA = "0x98D32C")]
	private Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x98D658", Offset = "0x98D658", VA = "0x98D658")]
	public void IgnoreCollisionBriefly()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x98D684", Offset = "0x98D684", VA = "0x98D684")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x74531C", Offset = "0x74531C")]
	private IEnumerator IgnoreCollisionRoutine()
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x98D720", Offset = "0x98D720", VA = "0x98D720")]
	private void LogFormat(string format, params object[] args)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x98D724", Offset = "0x98D724", VA = "0x98D724")]
	public void HandleVolleyballCollision(PhysicalBodyPart hitBp, Volleyball volleyball, Collision collision)
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x98F1B4", Offset = "0x98F1B4", VA = "0x98F1B4")]
	private static Vector3 SelectAimAssistTargetOnPlayerSide(Volleyball volleyball, Vector3 ballVelocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x98F818", Offset = "0x98F818", VA = "0x98F818")]
	private void Vibrate(PhysicalBodyPart bodyPart, bool bothIfPossible)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x98FAA0", Offset = "0x98FAA0", VA = "0x98FAA0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x9902C8", Offset = "0x9902C8", VA = "0x9902C8")]
	public PhysicalBody()
	{
	}
}
[Token(Token = "0x2000032")]
public enum BodyPartType
{
	[Token(Token = "0x4000137")]
	None,
	[Token(Token = "0x4000138")]
	UpperArm,
	[Token(Token = "0x4000139")]
	LowerArm,
	[Token(Token = "0x400013A")]
	Hand,
	[Token(Token = "0x400013B")]
	Head
}
[Token(Token = "0x2000033")]
public enum BodyPartSide
{
	[Token(Token = "0x400013D")]
	Center,
	[Token(Token = "0x400013E")]
	Left,
	[Token(Token = "0x400013F")]
	Right
}
[Token(Token = "0x2000034")]
public class PhysicalBodyPart : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000246")]
	public class Pose
	{
		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider collider;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x990A64", Offset = "0x990A64", VA = "0x990A64")]
		public Pose()
		{
		}
	}

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BodyPartType type;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public BodyPartSide side;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Pose[] poses;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741F94", Offset = "0x741F94")]
	private Pose <activePose>k__BackingField;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PhysicalBody physicalBody;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VelocityEstimator velocityEstimator;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PhysicalBodyPart reciprocalPart;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 baseToTipDirection;

	[Token(Token = "0x17000051")]
	public Pose activePose
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x990738", Offset = "0x990738", VA = "0x990738")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745390", Offset = "0x745390")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x990730", Offset = "0x990730", VA = "0x990730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745380", Offset = "0x745380")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public Collider collider
	{
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x98F17C", Offset = "0x98F17C", VA = "0x98F17C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x990740", Offset = "0x990740", VA = "0x990740")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x9907C8", Offset = "0x9907C8", VA = "0x9907C8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x9908A4", Offset = "0x9908A4", VA = "0x9908A4")]
	public Vector3 GetVelocityAtPoint(Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x98F198", Offset = "0x98F198", VA = "0x98F198")]
	public Vector3 GetLinearVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x98D544", Offset = "0x98D544", VA = "0x98D544")]
	public void SetPose(int index)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x9909EC", Offset = "0x9909EC", VA = "0x9909EC")]
	public PhysicalBodyPart()
	{
	}
}
[Token(Token = "0x2000035")]
public class PlayAreaPlacement : MonoBehaviour
{
	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x990A6C", Offset = "0x990A6C", VA = "0x990A6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x990A70", Offset = "0x990A70", VA = "0x990A70")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x990A74", Offset = "0x990A74", VA = "0x990A74")]
	public PlayAreaPlacement()
	{
	}
}
[Token(Token = "0x2000036")]
public class ReachForBall : MonoBehaviour
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float innerRange;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float outerRange;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve reachCurve;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private FullBodyBipedIK fbbik;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider collider;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LookAtIK lookAtIK;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 frozenBallPosition;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float frozenBlend;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float lastBallHitTime;

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xB0FD08", Offset = "0xB0FD08", VA = "0xB0FD08")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xB0FD90", Offset = "0xB0FD90", VA = "0xB0FD90")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xB10084", Offset = "0xB10084", VA = "0xB10084")]
	private void Set(FullBodyBipedEffector effector, Vector3 position, float weight)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xB100E0", Offset = "0xB100E0", VA = "0xB100E0")]
	private void LookAt(Vector3 position)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xB1010C", Offset = "0xB1010C", VA = "0xB1010C")]
	public void ResetIKFreeze()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xB10138", Offset = "0xB10138", VA = "0xB10138")]
	public ReachForBall()
	{
	}
}
[Token(Token = "0x2000037")]
public class Settings
{
	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action changed;

	[Token(Token = "0x4000152")]
	private const int DefaultJumpMode = 0;

	[Token(Token = "0x4000153")]
	private const int DefaultAimAssistEnabled = 1;

	[Token(Token = "0x4000154")]
	private const int DefaultFriendBotPro = 0;

	[Token(Token = "0x4000155")]
	private const int DefaultOpponentBotPro = 0;

	[Token(Token = "0x4000156")]
	private const int DefaultFrontRowOnlyEnabled = 0;

	[Token(Token = "0x4000157")]
	private const int DefaultSnapTurnEnabled = 0;

	[Token(Token = "0x4000158")]
	private const int DefaultMovementEnabled = 0;

	[Token(Token = "0x4000159")]
	private const int DefaultSets = 3;

	[Token(Token = "0x400015A")]
	private const int DefaultPoints = 3;

	[Token(Token = "0x400015B")]
	private const int DefaultResolutionScaleStep = 2;

	[Token(Token = "0x400015C")]
	private const int DefaultJumpHeightCm = 100;

	[Token(Token = "0x17000053")]
	public static bool musicEnabled
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xB101FC", Offset = "0xB101FC", VA = "0xB101FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xB10140", Offset = "0xB10140", VA = "0xB10140")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public static string netRegion
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xB102B0", Offset = "0xB102B0", VA = "0xB102B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xB10258", Offset = "0xB10258", VA = "0xB10258")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public static bool jumpEnabled
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xB10360", Offset = "0xB10360", VA = "0xB10360")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xB10308", Offset = "0xB10308", VA = "0xB10308")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public static int jumpHeightCm
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xB10414", Offset = "0xB10414", VA = "0xB10414")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xB103BC", Offset = "0xB103BC", VA = "0xB103BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public static bool aimAssistEnabled
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xB104BC", Offset = "0xB104BC", VA = "0xB104BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xB10464", Offset = "0xB10464", VA = "0xB10464")]
		set
		{
		}
	}

	[Token(Token = "0x17000058")]
	public static bool friendBotProEnabled
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0xB10570", Offset = "0xB10570", VA = "0xB10570")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0xB10518", Offset = "0xB10518", VA = "0xB10518")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public static bool opponentBotProEnabled
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0xB10624", Offset = "0xB10624", VA = "0xB10624")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0xB105CC", Offset = "0xB105CC", VA = "0xB105CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public static bool frontRowOnlyEnabled
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0xB106D8", Offset = "0xB106D8", VA = "0xB106D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000204")]
		[Address(RVA = "0xB10680", Offset = "0xB10680", VA = "0xB10680")]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public static bool snapTurnEnabled
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0xB1078C", Offset = "0xB1078C", VA = "0xB1078C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0xB10734", Offset = "0xB10734", VA = "0xB10734")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public static bool movementEnabled
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0xB10840", Offset = "0xB10840", VA = "0xB10840")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000208")]
		[Address(RVA = "0xB107E8", Offset = "0xB107E8", VA = "0xB107E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public static int sets
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xB108F4", Offset = "0xB108F4", VA = "0xB108F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xB1089C", Offset = "0xB1089C", VA = "0xB1089C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public static int pointsPerSet
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xB1099C", Offset = "0xB1099C", VA = "0xB1099C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0xB10944", Offset = "0xB10944", VA = "0xB10944")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public static int resolutionScaleStep
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0xB10A44", Offset = "0xB10A44", VA = "0xB10A44")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xB109EC", Offset = "0xB109EC", VA = "0xB109EC")]
		set
		{
		}
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xB10198", Offset = "0xB10198", VA = "0xB10198")]
	private static void TriggerChangedEvent()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xB10A94", Offset = "0xB10A94", VA = "0xB10A94")]
	public Settings()
	{
	}
}
[Token(Token = "0x2000038")]
public class ShadowBlob : MonoBehaviour
{
	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rayOriginOffset;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rayMaxDistance;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float visualBlobOffset;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask layerMask;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer renderer;

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xB11C18", Offset = "0xB11C18", VA = "0xB11C18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xB11C70", Offset = "0xB11C70", VA = "0xB11C70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xB11E88", Offset = "0xB11E88", VA = "0xB11E88")]
	public ShadowBlob()
	{
	}
}
[Token(Token = "0x2000039")]
public class Startup : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x2000247")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74032C", Offset = "0x74032C")]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Startup <>4__this;

		[Token(Token = "0x1700013A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xB16810", Offset = "0xB16810", VA = "0xB16810", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xB16878", Offset = "0xB16878", VA = "0xB16878", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xB15FA0", Offset = "0xB15FA0", VA = "0xB15FA0")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xB164F8", Offset = "0xB164F8", VA = "0xB164F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xB164FC", Offset = "0xB164FC", VA = "0xB164FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xB16818", Offset = "0xB16818", VA = "0xB16818", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000248")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74033C", Offset = "0x74033C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<float, float> <>9__2_0;

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xB164EC", Offset = "0xB164EC", VA = "0xB164EC")]
		public <>c()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xB164F4", Offset = "0xB164F4", VA = "0xB164F4")]
		internal float <SetMaxDisplayFrequency>b__2_0(float x)
		{
			return default(float);
		}
	}

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string appIdQuest;

	[Token(Token = "0x17000060")]
	private bool HasThankedPlayer
	{
		[Token(Token = "0x600021A")]
		[Address(RVA = "0xB16424", Offset = "0xB16424", VA = "0xB16424")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000219")]
		[Address(RVA = "0xB163D0", Offset = "0xB163D0", VA = "0xB163D0")]
		set
		{
		}
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xB15F30", Offset = "0xB15F30", VA = "0xB15F30")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7453A0", Offset = "0x7453A0")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xB15FCC", Offset = "0xB15FCC", VA = "0xB15FCC")]
	private void SetMaxDisplayFrequency()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xB16308", Offset = "0xB16308", VA = "0xB16308")]
	private void EntitlementCallback(Message message)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xB163CC", Offset = "0xB163CC", VA = "0xB163CC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xB16480", Offset = "0xB16480", VA = "0xB16480")]
	public Startup()
	{
	}
}
[Token(Token = "0x200003A")]
public class Team : MonoBehaviour
{
	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<BotArea> areas;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float interceptHeight;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FA4", Offset = "0x741FA4")]
	private List<TeamMember> <members>k__BackingField;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Bot> bots;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<NetworkPlayer> players;

	[Token(Token = "0x17000061")]
	public List<TeamMember> members
	{
		[Token(Token = "0x600021D")]
		[Address(RVA = "0x9CAC9C", Offset = "0x9CAC9C", VA = "0x9CAC9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745414", Offset = "0x745414")]
		get
		{
			return null;
		}
		[Token(Token = "0x600021C")]
		[Address(RVA = "0x9CAC94", Offset = "0x9CAC94", VA = "0x9CAC94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745404", Offset = "0x745404")]
		private set
		{
		}
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x9CACA4", Offset = "0x9CACA4", VA = "0x9CACA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x9CB1EC", Offset = "0x9CB1EC", VA = "0x9CB1EC")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x9CB274", Offset = "0x9CB274", VA = "0x9CB274")]
	public void AddPlayer(NetworkPlayer networkPlayer, int slot)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x9CB330", Offset = "0x9CB330", VA = "0x9CB330")]
	public void AddBot(Bot bot, int slot)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x9CB3EC", Offset = "0x9CB3EC", VA = "0x9CB3EC")]
	public Team()
	{
	}
}
[Token(Token = "0x200003B")]
public class TeamMember : MonoBehaviourPun
{
	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FB4", Offset = "0x741FB4")]
	private BotArea <area>k__BackingField;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FC4", Offset = "0x741FC4")]
	private int <team>k__BackingField;

	[Token(Token = "0x17000062")]
	public BotArea area
	{
		[Token(Token = "0x6000224")]
		[Address(RVA = "0x9CB4E8", Offset = "0x9CB4E8", VA = "0x9CB4E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745434", Offset = "0x745434")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000223")]
		[Address(RVA = "0x9CB4E0", Offset = "0x9CB4E0", VA = "0x9CB4E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745424", Offset = "0x745424")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public int touchId
	{
		[Token(Token = "0x6000225")]
		[Address(RVA = "0x9CB1C8", Offset = "0x9CB1C8", VA = "0x9CB1C8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000064")]
	public int team
	{
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x9CB4F8", Offset = "0x9CB4F8", VA = "0x9CB4F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745454", Offset = "0x745454")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000226")]
		[Address(RVA = "0x9CB4F0", Offset = "0x9CB4F0", VA = "0x9CB4F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745444", Offset = "0x745444")]
		set
		{
		}
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x9CB500", Offset = "0x9CB500", VA = "0x9CB500", Slot = "4")]
	public virtual void MoveToNextArea(int rotations)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x9CB58C", Offset = "0x9CB58C", VA = "0x9CB58C", Slot = "5")]
	public virtual float GetDistanceToBallImpact(Vector3 ballImpact)
	{
		return default(float);
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x9CB674", Offset = "0x9CB674", VA = "0x9CB674")]
	public TeamMember()
	{
	}
}
[Token(Token = "0x200003C")]
public class AlertPageController : PageController
{
	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text text;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button button;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AlertPageConfig config;

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x94B090", Offset = "0x94B090", VA = "0x94B090")]
	private void Awake()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x94B120", Offset = "0x94B120", VA = "0x94B120", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x94B1E4", Offset = "0x94B1E4", VA = "0x94B1E4")]
	private Task HandleButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x94B268", Offset = "0x94B268", VA = "0x94B268")]
	public AlertPageController()
	{
	}
}
[Token(Token = "0x200003D")]
public class AlertPageConfig
{
	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FD4", Offset = "0x741FD4")]
	private string <message>k__BackingField;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FE4", Offset = "0x741FE4")]
	private string <nextPage>k__BackingField;

	[Token(Token = "0x17000065")]
	public string message
	{
		[Token(Token = "0x600022F")]
		[Address(RVA = "0x94B068", Offset = "0x94B068", VA = "0x94B068")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745464", Offset = "0x745464")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000230")]
		[Address(RVA = "0x94B070", Offset = "0x94B070", VA = "0x94B070")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745474", Offset = "0x745474")]
		set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public string nextPage
	{
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x94B078", Offset = "0x94B078", VA = "0x94B078")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745484", Offset = "0x745484")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x94B080", Offset = "0x94B080", VA = "0x94B080")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745494", Offset = "0x745494")]
		set
		{
		}
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x94B088", Offset = "0x94B088", VA = "0x94B088")]
	public AlertPageConfig()
	{
	}
}
[Token(Token = "0x200003E")]
public class InGamePageController : PageController
{
	[StructLayout(3)]
	[Token(Token = "0x2000249")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74034C", Offset = "0x74034C")]
	private struct <HandleLeaveButtonPressed>d__15 : IAsyncStateMachine
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder <>t__builder;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InGamePageController <>4__this;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x7C693C", Offset = "0x7C693C", VA = "0x7C693C", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x7C6944", Offset = "0x7C6944", VA = "0x7C6944", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button resumeButton;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button leaveButton;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MenuShowerHider menuShowerHider;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string customLeaveMessage;

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xA09CA0", Offset = "0xA09CA0", VA = "0xA09CA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xA09D74", Offset = "0xA09D74", VA = "0xA09D74", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xA09EE4", Offset = "0xA09EE4", VA = "0xA09EE4")]
	private void HandleDisconnected(string reason)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xA09F68", Offset = "0xA09F68", VA = "0xA09F68")]
	private bool IsUnexpectedDisconnect()
	{
		return default(bool);
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xA0A12C", Offset = "0xA0A12C", VA = "0xA0A12C")]
	private void HandlePlayerLeftRoom()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xA09F78", Offset = "0xA09F78", VA = "0xA09F78")]
	private void Leave(string message)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xA09EBC", Offset = "0xA09EBC", VA = "0xA09EBC")]
	private void HideMenu()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xA0A2C8", Offset = "0xA0A2C8", VA = "0xA0A2C8")]
	private void ShowMenu()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xA0A4C4", Offset = "0xA0A4C4", VA = "0xA0A4C4")]
	private void Pause()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xA0A2BC", Offset = "0xA0A2BC", VA = "0xA0A2BC")]
	private void Unpause()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xA0A4D0", Offset = "0xA0A4D0", VA = "0xA0A4D0")]
	private Task HandleResumeButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xA0A53C", Offset = "0xA0A53C", VA = "0xA0A53C")]
	[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x7454A4", Offset = "0x7454A4")]
	private Task HandleLeaveButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA0A300", Offset = "0xA0A300", VA = "0xA0A300")]
	private void ResetScreenFade()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xA0A710", Offset = "0xA0A710", VA = "0xA0A710")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xA0A750", Offset = "0xA0A750", VA = "0xA0A750")]
	private bool ShouldShowMenu()
	{
		return default(bool);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xA0A4A8", Offset = "0xA0A4A8", VA = "0xA0A4A8")]
	private bool CanPause()
	{
		return default(bool);
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xA0A9C8", Offset = "0xA0A9C8", VA = "0xA0A9C8")]
	private bool IsUserAway()
	{
		return default(bool);
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xA0A784", Offset = "0xA0A784", VA = "0xA0A784")]
	private bool IsMenuButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xA0AB40", Offset = "0xA0AB40", VA = "0xA0AB40")]
	public InGamePageController()
	{
	}
}
[Token(Token = "0x200003F")]
public class IntroPageController : PageController
{
	[Serializable]
	[Token(Token = "0x200024A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74035C", Offset = "0x74035C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<bool> <>9__1_0;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xA0BAF0", Offset = "0xA0BAF0", VA = "0xA0BAF0")]
		public <>c()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xA0BAF8", Offset = "0xA0BAF8", VA = "0xA0BAF8")]
		internal bool <Intro>b__1_0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200024B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74036C", Offset = "0x74036C")]
	private sealed class <Intro>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntroPageController <>4__this;

		[Token(Token = "0x1700013C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xA0BF10", Offset = "0xA0BF10", VA = "0xA0BF10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xA0BF78", Offset = "0xA0BF78", VA = "0xA0BF78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xA0BA58", Offset = "0xA0BA58", VA = "0xA0BA58")]
		[DebuggerHidden]
		public <Intro>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xA0BB74", Offset = "0xA0BB74", VA = "0xA0BB74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xA0BB78", Offset = "0xA0BB78", VA = "0xA0BB78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xA0BF18", Offset = "0xA0BF18", VA = "0xA0BF18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xA0B9B0", Offset = "0xA0B9B0", VA = "0xA0B9B0", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xA0B9E8", Offset = "0xA0B9E8", VA = "0xA0B9E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745508", Offset = "0x745508")]
	private IEnumerator Intro()
	{
		return null;
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xA0BA84", Offset = "0xA0BA84", VA = "0xA0BA84")]
	public IntroPageController()
	{
	}
}
[Token(Token = "0x2000040")]
public class MatchmakingPageController : PageController
{
	[StructLayout(3)]
	[Token(Token = "0x200024C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74037C", Offset = "0x74037C")]
	private struct <Go>d__10 : IAsyncStateMachine
	{
		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MatchmakingPageController <>4__this;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NetworkManager <networkManager>5__2;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TaskAwaiter<bool> <>u__1;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TaskAwaiter <>u__2;

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x7C6950", Offset = "0x7C6950", VA = "0x7C6950", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x7C6958", Offset = "0x7C6958", VA = "0x7C6958", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text text;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button cancelButton;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button discordButton;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int numPlayersNeeded;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool cancelRequested;

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xA0D230", Offset = "0xA0D230", VA = "0xA0D230")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xA0D30C", Offset = "0xA0D30C", VA = "0xA0D30C")]
	private void DisableDiscordButton()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xA0D33C", Offset = "0xA0D33C", VA = "0xA0D33C")]
	private Task Cancel()
	{
		return null;
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xA0D3A8", Offset = "0xA0D3A8", VA = "0xA0D3A8")]
	private Task OpenDiscord()
	{
		return null;
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xA0D41C", Offset = "0xA0D41C", VA = "0xA0D41C", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xA0D420", Offset = "0xA0D420", VA = "0xA0D420")]
	[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x74556C", Offset = "0x74556C")]
	private void Go()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xA0D4D8", Offset = "0xA0D4D8", VA = "0xA0D4D8")]
	public MatchmakingPageController()
	{
	}
}
[Token(Token = "0x2000041")]
public class SettingsPageController : PageController
{
	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button regionButton;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button musicButton;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button jumpButton;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Button aimAssistButton;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Button friendBotProButton;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Button opponentBotProButton;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Button frontRowOnlyButton;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Button snapTurnButton;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Button movementButton;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Button backButton;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Button setsButton;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Button pointsButton;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Button resolutionButton;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Button jumpHeightButton;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text versionText;

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xB10A9C", Offset = "0xB10A9C", VA = "0xB10A9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xB10E78", Offset = "0xB10E78", VA = "0xB10E78", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xB11430", Offset = "0xB11430", VA = "0xB11430")]
	private Task HandleRegionButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xB114D8", Offset = "0xB114D8", VA = "0xB114D8")]
	private Task HandleMusicButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xB11554", Offset = "0xB11554", VA = "0xB11554")]
	private Task HandleJumpButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xB115D0", Offset = "0xB115D0", VA = "0xB115D0")]
	private Task HandleAimAssistButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xB1164C", Offset = "0xB1164C", VA = "0xB1164C")]
	private Task HandleFriendBotProButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xB116C8", Offset = "0xB116C8", VA = "0xB116C8")]
	private Task HandleOpponentBotProButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xB11744", Offset = "0xB11744", VA = "0xB11744")]
	private Task HandleFrontRowOnlyButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xB117C0", Offset = "0xB117C0", VA = "0xB117C0")]
	private Task HandleSnapTurnButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xB1183C", Offset = "0xB1183C", VA = "0xB1183C")]
	private Task HandleMovementButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xB118B8", Offset = "0xB118B8", VA = "0xB118B8")]
	private Task HandleBackButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xB11938", Offset = "0xB11938", VA = "0xB11938")]
	private Task HandleSetsButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xB11A10", Offset = "0xB11A10", VA = "0xB11A10")]
	private Task HandlePointsButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xB11AEC", Offset = "0xB11AEC", VA = "0xB11AEC")]
	private Task HandleResolutionButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xB11B84", Offset = "0xB11B84", VA = "0xB11B84")]
	private Task HandleJumpHeightButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xB10EA0", Offset = "0xB10EA0", VA = "0xB10EA0")]
	private void RefreshUI()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xB10E48", Offset = "0xB10E48", VA = "0xB10E48")]
	private void RemoveResolutionButton()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xB11C10", Offset = "0xB11C10", VA = "0xB11C10")]
	public SettingsPageController()
	{
	}
}
[Token(Token = "0x2000042")]
public class SoloPageController : PageController
{
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74038C", Offset = "0x74038C")]
	private sealed class <>c__DisplayClass19_0
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool finished;

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xB125CC", Offset = "0xB125CC", VA = "0xB125CC")]
		public <>c__DisplayClass19_0()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xB125D4", Offset = "0xB125D4", VA = "0xB125D4")]
		internal void <StartSolo>b__0()
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74039C", Offset = "0x74039C")]
	private struct <StartSolo>d__19 : IAsyncStateMachine
	{
		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder <>t__builder;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoloPageController <>4__this;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass19_0 <>8__1;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string environment;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool bombMode;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NetworkManager <networkManager>5__2;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TaskAwaiter<bool> <>u__1;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TaskAwaiter <>u__2;

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x7CB1C0", Offset = "0x7CB1C0", VA = "0x7CB1C0", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x7CB1C8", Offset = "0x7CB1C8", VA = "0x7CB1C8", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MenuShowerHider menuShowerHider;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text text;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button beachDayButton;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Button beachNightButton;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Button indoorButton;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Button bombButton;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Button backButton;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int numPlayersNeeded;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string originalIndoorText;

	[Token(Token = "0x17000067")]
	private Text indoorButtonText
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0xB11ED4", Offset = "0xB11ED4", VA = "0xB11ED4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xB11F2C", Offset = "0xB11F2C", VA = "0xB11F2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xB120DC", Offset = "0xB120DC", VA = "0xB120DC")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xB12278", Offset = "0xB12278", VA = "0xB12278")]
	private void HandleIndoorButtonUnlock()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xB123EC", Offset = "0xB123EC", VA = "0xB123EC")]
	private Task HandleBeachDayButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB12440", Offset = "0xB12440", VA = "0xB12440")]
	private Task HandleBeachNightButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB12494", Offset = "0xB12494", VA = "0xB12494")]
	private Task HandleIndoorButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xB124E8", Offset = "0xB124E8", VA = "0xB124E8")]
	private Task HandleBombButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xB1253C", Offset = "0xB1253C", VA = "0xB1253C")]
	private Task HandleBackButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xB12160", Offset = "0xB12160", VA = "0xB12160")]
	[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x7455D0", Offset = "0x7455D0")]
	private Task StartSolo(string environment, bool bombMode)
	{
		return null;
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xB125BC", Offset = "0xB125BC", VA = "0xB125BC")]
	public SoloPageController()
	{
	}
}
[Token(Token = "0x2000043")]
public class StartPageController : PageController
{
	[Token(Token = "0x200024F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403AC", Offset = "0x7403AC")]
	private sealed class <LoadMenuEnvironment>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StartPageController <>4__this;

		[Token(Token = "0x1700013E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0xB15EC0", Offset = "0xB15EC0", VA = "0xB15EC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0xB15F28", Offset = "0xB15F28", VA = "0xB15F28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xB15BA4", Offset = "0xB15BA4", VA = "0xB15BA4")]
		[DebuggerHidden]
		public <LoadMenuEnvironment>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xB15DC0", Offset = "0xB15DC0", VA = "0xB15DC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xB15DC4", Offset = "0xB15DC4", VA = "0xB15DC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xB15EC8", Offset = "0xB15EC8", VA = "0xB15EC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button soloButton;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button onlineButton;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button settingsButton;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Button quitButton;

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xB158EC", Offset = "0xB158EC", VA = "0xB158EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xB15A70", Offset = "0xB15A70", VA = "0xB15A70")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xB15AFC", Offset = "0xB15AFC", VA = "0xB15AFC", Slot = "4")]
	public override void Activated(object argument)
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xB15B34", Offset = "0xB15B34", VA = "0xB15B34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745634", Offset = "0x745634")]
	private IEnumerator LoadMenuEnvironment()
	{
		return null;
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xB15BD0", Offset = "0xB15BD0", VA = "0xB15BD0")]
	private Task HandleSoloButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xB15C50", Offset = "0xB15C50", VA = "0xB15C50")]
	private Task HandleOnlineButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xB15CD0", Offset = "0xB15CD0", VA = "0xB15CD0")]
	private Task HandleSettingsButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xB15D50", Offset = "0xB15D50", VA = "0xB15D50")]
	private Task HandleQuitButtonPressed()
	{
		return null;
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xB15A40", Offset = "0xB15A40", VA = "0xB15A40")]
	private void RemoveQuitButton()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xB15DB8", Offset = "0xB15DB8", VA = "0xB15DB8")]
	public StartPageController()
	{
	}
}
[Token(Token = "0x2000044")]
public class FadeTween : MonoBehaviour
{
	[Token(Token = "0x2000250")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403BC", Offset = "0x7403BC")]
	private sealed class <PlayRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeTween <>4__this;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x17000140")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0x940054", Offset = "0x940054", VA = "0x940054", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x9400BC", Offset = "0x9400BC", VA = "0x9400BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x93FEAC", Offset = "0x93FEAC", VA = "0x93FEAC")]
		[DebuggerHidden]
		public <PlayRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x93FF20", Offset = "0x93FF20", VA = "0x93FF20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x93FF24", Offset = "0x93FF24", VA = "0x93FF24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x94005C", Offset = "0x94005C", VA = "0x94005C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve curve;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GraphicRaycaster graphicRaycaster;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CanvasRenderer canvasRenderer;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CanvasGroup canvasGroup;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool graphicRaycasterWasEnabledOnAwake;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741FF4", Offset = "0x741FF4")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x17000068")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x93FBB0", Offset = "0x93FBB0", VA = "0x93FBB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745698", Offset = "0x745698")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x93FBB8", Offset = "0x93FBB8", VA = "0x93FBB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7456A8", Offset = "0x7456A8")]
		internal set
		{
		}
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x93FBC4", Offset = "0x93FBC4", VA = "0x93FBC4")]
	public void GoToBeginning()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x93FD2C", Offset = "0x93FD2C", VA = "0x93FD2C")]
	public void Play()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x93FDD4", Offset = "0x93FDD4", VA = "0x93FDD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x93FD64", Offset = "0x93FD64", VA = "0x93FD64")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7456B8", Offset = "0x7456B8")]
	private IEnumerator PlayRoutine()
	{
		return null;
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x93FBCC", Offset = "0x93FBCC", VA = "0x93FBCC")]
	private void SeekTo(float t)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x93FED8", Offset = "0x93FED8", VA = "0x93FED8")]
	public FadeTween()
	{
	}
}
[Token(Token = "0x2000045")]
public class MenuPositioner : MonoBehaviour
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 offset;

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xA0E430", Offset = "0xA0E430", VA = "0xA0E430")]
	private void Update()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xA0E568", Offset = "0xA0E568", VA = "0xA0E568")]
	public MenuPositioner()
	{
	}
}
[Token(Token = "0x2000046")]
public class MenuShowerHider : MonoBehaviour
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] visualObjects;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Canvas canvas;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xA0E570", Offset = "0xA0E570", VA = "0xA0E570")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xA0A390", Offset = "0xA0A390", VA = "0xA0A390")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xA0A41C", Offset = "0xA0A41C", VA = "0xA0A41C")]
	public void Show()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xA0E5C8", Offset = "0xA0E5C8", VA = "0xA0E5C8")]
	public MenuShowerHider()
	{
	}
}
[Token(Token = "0x2000047")]
public class NavigationController : MonoBehaviour
{
	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string startPage;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742004", Offset = "0x742004")]
	private static NavigationController <instance>k__BackingField;

	[Token(Token = "0x17000069")]
	public static NavigationController instance
	{
		[Token(Token = "0x6000288")]
		[Address(RVA = "0xA0E864", Offset = "0xA0E864", VA = "0xA0E864")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74572C", Offset = "0x74572C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000287")]
		[Address(RVA = "0xA0E810", Offset = "0xA0E810", VA = "0xA0E810")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74571C", Offset = "0x74571C")]
		set
		{
		}
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xA0E8B4", Offset = "0xA0E8B4", VA = "0xA0E8B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xA0E908", Offset = "0xA0E908", VA = "0xA0E908")]
	private void Start()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xA0E914", Offset = "0xA0E914", VA = "0xA0E914")]
	public void TransitionToPage(string pageName)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xA099DC", Offset = "0xA099DC", VA = "0xA099DC")]
	public void TransitionToPage(string pageName, object argument)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xA0E91C", Offset = "0xA0E91C", VA = "0xA0E91C")]
	public NavigationController()
	{
	}
}
[Token(Token = "0x2000048")]
public class PageController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403CC", Offset = "0x7403CC")]
	private sealed class <>c
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Selectable, bool> <>9__9_0;

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x989AF0", Offset = "0x989AF0", VA = "0x989AF0")]
		public <>c()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x989AF8", Offset = "0x989AF8", VA = "0x989AF8")]
		internal bool <SelectFirstSelectableFound>b__9_0(Selectable s)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000252")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403DC", Offset = "0x7403DC")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PageController <>4__this;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<Task> func;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x989A7C", Offset = "0x989A7C", VA = "0x989A7C")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x989B24", Offset = "0x989B24", VA = "0x989B24")]
		internal void <SetButtonHandler>b__0()
		{
		}
	}

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PageController backTarget;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Selectable defaultSelectable;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Task lastStartedTask;

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x9895A4", Offset = "0x9895A4", VA = "0x9895A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x989604", Offset = "0x989604", VA = "0x989604", Slot = "4")]
	public virtual void Activated(object argument)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x989608", Offset = "0x989608", VA = "0x989608")]
	public void SetStatus(string message)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x98960C", Offset = "0x98960C", VA = "0x98960C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x989648", Offset = "0x989648", VA = "0x989648")]
	protected void TransitionToPage(string pageName, [Optional] object argument)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x9896BC", Offset = "0x9896BC", VA = "0x9896BC", Slot = "5")]
	public virtual void SetDefaultFocus()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x98975C", Offset = "0x98975C", VA = "0x98975C")]
	protected void SelectFirstSelectableFound()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x9898B8", Offset = "0x9898B8", VA = "0x9898B8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x989920", Offset = "0x989920", VA = "0x989920")]
	private void GoBack()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x9899C0", Offset = "0x9899C0", VA = "0x9899C0")]
	protected void SetButtonHandler(Button button, Func<Task> func)
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x989A84", Offset = "0x989A84", VA = "0x989A84")]
	public PageController()
	{
	}
}
[Token(Token = "0x2000049")]
public class UpdateCustomControllerRay : MonoBehaviour
{
	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform laserPointerTransform;

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x9CBC50", Offset = "0x9CBC50", VA = "0x9CBC50")]
	private void Update()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x9CBEE4", Offset = "0x9CBEE4", VA = "0x9CBEE4")]
	public UpdateCustomControllerRay()
	{
	}
}
[Token(Token = "0x200004A")]
public class VRInputMirror : MonoBehaviour
{
	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform followHead;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform followHand1;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform followHand2;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform mirroredHead;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform mirroredHand1;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform mirroredHand2;

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x9CD1A0", Offset = "0x9CD1A0", VA = "0x9CD1A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x9CD1DC", Offset = "0x9CD1DC", VA = "0x9CD1DC")]
	private void Copy(Transform from, Transform to)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x9CD234", Offset = "0x9CD234", VA = "0x9CD234")]
	public VRInputMirror()
	{
	}
}
[Token(Token = "0x200004B")]
public class Volleyball : Interactable, IPunObservable
{
	[Token(Token = "0x2000253")]
	public enum Context
	{
		[Token(Token = "0x4000F44")]
		PlayerServe,
		[Token(Token = "0x4000F45")]
		MateToPlayer,
		[Token(Token = "0x4000F46")]
		OpponentToPlayer,
		[Token(Token = "0x4000F47")]
		Other,
		[Token(Token = "0x4000F48")]
		PlayerShot
	}

	[Token(Token = "0x2000254")]
	private enum BombStage
	{
		[Token(Token = "0x4000F4A")]
		Off,
		[Token(Token = "0x4000F4B")]
		FuseRunning,
		[Token(Token = "0x4000F4C")]
		ReadyToExplode,
		[Token(Token = "0x4000F4D")]
		Exploded
	}

	[Token(Token = "0x2000255")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403EC", Offset = "0x7403EC")]
	private sealed class <>c__DisplayClass92_0
	{
		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int touchId;

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xEC0228", Offset = "0xEC0228", VA = "0xEC0228")]
		public <>c__DisplayClass92_0()
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xEC0A24", Offset = "0xEC0A24", VA = "0xEC0A24")]
		internal bool <Client_ChangeMotion>b__0(Bot b)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] defaultMaterials;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] frozenMaterials;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float serveMultiplier;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody localVolleyballRigidbody;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform visualVolleyballTransform;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer renderer;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float timeWarpStartDelay;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float timeWarpDuration;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float hitSpin;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource fuseTickAudio;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject fuseGroup;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float timeUntilExplosion;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float fuseTickMinPitch;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float fuseTickMaxPitch;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationCurve fuseTickPitchCurve;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject readyToExplodeEffect;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Volleyball instance;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742014", Offset = "0x742014")]
	private bool <isAllowedToHit>k__BackingField;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742024", Offset = "0x742024")]
	private bool <isAllowedToPickUpForServe>k__BackingField;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742034", Offset = "0x742034")]
	private Vector3 <velocityLastFrame>k__BackingField;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742044", Offset = "0x742044")]
	private Rigidbody <rigidbody>k__BackingField;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742054", Offset = "0x742054")]
	private Action <onInteractionStopped>k__BackingField;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742064", Offset = "0x742064")]
	private Action <onInteractionStarted>k__BackingField;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742074", Offset = "0x742074")]
	private Action <onGroundCollision>k__BackingField;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742084", Offset = "0x742084")]
	private Action <onPlayerCollision>k__BackingField;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742094", Offset = "0x742094")]
	private Context <context>k__BackingField;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private CollisionDetectionMode originalCollisionDetectionMode;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private PhotonView photonView;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool isGrabbed;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Hand grabbingHand;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float timeWarpStartTime;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject volleyballLocalGroup;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float fuseStartTime;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private BombStage bombStage;

	[Token(Token = "0x1700006A")]
	public bool isAllowedToHit
	{
		[Token(Token = "0x600029F")]
		[Address(RVA = "0xEBED08", Offset = "0xEBED08", VA = "0xEBED08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74574C", Offset = "0x74574C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xEBECFC", Offset = "0xEBECFC", VA = "0xEBECFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74573C", Offset = "0x74573C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public bool isAllowedToPickUpForServe
	{
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xEBED1C", Offset = "0xEBED1C", VA = "0xEBED1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74576C", Offset = "0x74576C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xEBED10", Offset = "0xEBED10", VA = "0xEBED10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74575C", Offset = "0x74575C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public Vector3 velocityLastFrame
	{
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xEBED24", Offset = "0xEBED24", VA = "0xEBED24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74577C", Offset = "0x74577C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xEBED30", Offset = "0xEBED30", VA = "0xEBED30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74578C", Offset = "0x74578C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public Rigidbody rigidbody
	{
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xEBED44", Offset = "0xEBED44", VA = "0xEBED44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457AC", Offset = "0x7457AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xEBED3C", Offset = "0xEBED3C", VA = "0xEBED3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74579C", Offset = "0x74579C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public float radius
	{
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xEBED4C", Offset = "0xEBED4C", VA = "0xEBED4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700006F")]
	public Action onInteractionStopped
	{
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xEBEDDC", Offset = "0xEBEDDC", VA = "0xEBEDDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457BC", Offset = "0x7457BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xEBEDE4", Offset = "0xEBEDE4", VA = "0xEBEDE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457CC", Offset = "0x7457CC")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public Action onInteractionStarted
	{
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xEBEDEC", Offset = "0xEBEDEC", VA = "0xEBEDEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457DC", Offset = "0x7457DC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xEBEDF4", Offset = "0xEBEDF4", VA = "0xEBEDF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457EC", Offset = "0x7457EC")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public Action onGroundCollision
	{
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xEBEDFC", Offset = "0xEBEDFC", VA = "0xEBEDFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7457FC", Offset = "0x7457FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xEBEE04", Offset = "0xEBEE04", VA = "0xEBEE04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74580C", Offset = "0x74580C")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public Action onPlayerCollision
	{
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xEBEE0C", Offset = "0xEBEE0C", VA = "0xEBEE0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74581C", Offset = "0x74581C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xEBEE14", Offset = "0xEBEE14", VA = "0xEBEE14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74582C", Offset = "0x74582C")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000073")]
	public Context context
	{
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xEBEE1C", Offset = "0xEBEE1C", VA = "0xEBEE1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74583C", Offset = "0x74583C")]
		get
		{
			return default(Context);
		}
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xEBEE24", Offset = "0xEBEE24", VA = "0xEBEE24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74584C", Offset = "0x74584C")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public override bool canInteract
	{
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xEBEE2C", Offset = "0xEBEE2C", VA = "0xEBEE2C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000075")]
	public float timeSinceFuseStarted
	{
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xEBEE4C", Offset = "0xEBEE4C", VA = "0xEBEE4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000076")]
	public bool isReadyToExplode
	{
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xEBEE78", Offset = "0xEBEE78", VA = "0xEBEE78")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000077")]
	private bool isFuseActive
	{
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xEBEE88", Offset = "0xEBEE88", VA = "0xEBEE88")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xEBEE98", Offset = "0xEBEE98", VA = "0xEBEE98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xEBEFB0", Offset = "0xEBEFB0", VA = "0xEBEFB0")]
	private void DetachLocalVolleyballStuff()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xEBF080", Offset = "0xEBF080", VA = "0xEBF080")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xEBF134", Offset = "0xEBF134", VA = "0xEBF134")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xEBF178", Offset = "0xEBF178", VA = "0xEBF178")]
	private void UpdateFuse()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xEBF3B0", Offset = "0xEBF3B0", VA = "0xEBF3B0")]
	private void SetReadyToExplode()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xEBF464", Offset = "0xEBF464", VA = "0xEBF464")]
	private void ReactLocallyAndStartTimeWarp(Vector3 newBallPosition, Vector3 newBallVelocity)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xEBF53C", Offset = "0xEBF53C", VA = "0xEBF53C")]
	private void ResetTimeWarp()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xEBF544", Offset = "0xEBF544", VA = "0xEBF544")]
	private float GetTimeWarpBlend()
	{
		return default(float);
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xEBF274", Offset = "0xEBF274", VA = "0xEBF274")]
	private void UpdateTimeWarp()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xEBF5E8", Offset = "0xEBF5E8", VA = "0xEBF5E8")]
	private void SetRandomAngularVelocity()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xEBF700", Offset = "0xEBF700", VA = "0xEBF700")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xEBF83C", Offset = "0xEBF83C", VA = "0xEBF83C")]
	public void InvokeRpc_FreezePhysics()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xEBF934", Offset = "0xEBF934", VA = "0xEBF934")]
	[PunRPC]
	public void Client_FreezePhysics()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xEBF978", Offset = "0xEBF978", VA = "0xEBF978")]
	public void MakeTransparent()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xEBF99C", Offset = "0xEBF99C", VA = "0xEBF99C")]
	public void MakeSolid()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xEBF9C0", Offset = "0xEBF9C0", VA = "0xEBF9C0")]
	public void InvokeRpc_UnfreezePhysics()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xEBFAB8", Offset = "0xEBFAB8", VA = "0xEBFAB8")]
	[PunRPC]
	public void Client_UnfreezePhysics()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xEBFAFC", Offset = "0xEBFAFC", VA = "0xEBFAFC")]
	public void InvokeRpc_ChangeMotion(Vector3 newBallPosition, Vector3 newBallVelocity, bool hit, bool isThrow, int touchId, int team, Context context)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xEBFE48", Offset = "0xEBFE48", VA = "0xEBFE48")]
	[PunRPC]
	public void Client_ChangeMotion(Vector3 newBallPosition, Vector3 newBallVelocity, bool hit, int touchId, int team, int intContext)
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xEC0230", Offset = "0xEC0230", VA = "0xEC0230", Slot = "6")]
	public override void StartInteraction(Hand hand, bool initiatedByLocalPlayer)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xEC02B8", Offset = "0xEC02B8", VA = "0xEC02B8", Slot = "7")]
	public override void StopInteraction()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xEC0478", Offset = "0xEC0478", VA = "0xEC0478")]
	public void Explode()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xEC0550", Offset = "0xEC0550", VA = "0xEC0550", Slot = "8")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xEC0788", Offset = "0xEC0788", VA = "0xEC0788")]
	public void InvokeRpc_ResetBombStage()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xEC0880", Offset = "0xEC0880", VA = "0xEC0880")]
	[PunRPC]
	public void Client_ResetBombStage()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xEC08B8", Offset = "0xEC08B8", VA = "0xEC08B8")]
	public void InvokeRpc_StartFuse()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xEC09B0", Offset = "0xEC09B0", VA = "0xEC09B0")]
	[PunRPC]
	public void Client_StartFuse()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xEC09F8", Offset = "0xEC09F8", VA = "0xEC09F8")]
	public Volleyball()
	{
	}
}
[Token(Token = "0x200004C")]
public class PortalEntry : MonoBehaviour
{
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider playerCollider;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hmdRig;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject hmdEye;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StereoRenderer stereoRenderer;

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x99124C", Offset = "0x99124C", VA = "0x99124C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x9915CC", Offset = "0x9915CC", VA = "0x9915CC")]
	public PortalEntry()
	{
	}
}
[Token(Token = "0x200004D")]
public class CreateStereoRenderer : MonoBehaviour
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x95B28C", Offset = "0x95B28C", VA = "0x95B28C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x95B408", Offset = "0x95B408", VA = "0x95B408")]
	public CreateStereoRenderer()
	{
	}
}
[Token(Token = "0x200004E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F570", Offset = "0x73F570")]
public class PortalDoorCollideDetection : MonoBehaviour
{
	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider playerCollider;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PortalSet portalManger;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StereoRenderer stereoRenderer;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x9910C0", Offset = "0x9910C0", VA = "0x9910C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x991118", Offset = "0x991118", VA = "0x991118")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x991244", Offset = "0x991244", VA = "0x991244")]
	public PortalDoorCollideDetection()
	{
	}
}
[Token(Token = "0x200004F")]
public class PortalSet : MonoBehaviour
{
	[Token(Token = "0x2000256")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7403FC", Offset = "0x7403FC")]
	private sealed class <MovePlayer>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PortalSet <>4__this;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StereoRenderer stereoRenderer;

		[Token(Token = "0x17000142")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xB0FC98", Offset = "0xB0FC98", VA = "0xB0FC98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xB0FD00", Offset = "0xB0FD00", VA = "0xB0FD00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xB0F7FC", Offset = "0xB0F7FC", VA = "0xB0F7FC")]
		[DebuggerHidden]
		public <MovePlayer>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xB0F830", Offset = "0xB0F830", VA = "0xB0F830", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xB0F834", Offset = "0xB0F834", VA = "0xB0F834", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xB0FCA0", Offset = "0xB0FCA0", VA = "0xB0FCA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject hmdRig;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hmdEye;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isColliding;

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xB0F748", Offset = "0xB0F748", VA = "0xB0F748")]
	public void OnPlayerEnter(StereoRenderer stereoRenderer)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xB0F780", Offset = "0xB0F780", VA = "0xB0F780")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7458AC", Offset = "0x7458AC")]
	private IEnumerator MovePlayer(StereoRenderer stereoRenderer)
	{
		return null;
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xB0F828", Offset = "0xB0F828", VA = "0xB0F828")]
	public PortalSet()
	{
	}
}
[Token(Token = "0x2000050")]
public class FollowHmd : MonoBehaviour
{
	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject hmdCamera;

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x9400C4", Offset = "0x9400C4", VA = "0x9400C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x94011C", Offset = "0x94011C", VA = "0x94011C")]
	public FollowHmd()
	{
	}
}
[Token(Token = "0x2000051")]
public class AudioSystem : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000257")]
	public class MusicEntry
	{
		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip clip;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74474C", Offset = "0x74474C")]
		public float volume;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744764", Offset = "0x744764")]
		private float <time>k__BackingField;

		[Token(Token = "0x17000144")]
		public float time
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x953CA0", Offset = "0x953CA0", VA = "0x953CA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7471F0", Offset = "0x7471F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x953C98", Offset = "0x953C98", VA = "0x953C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7471E0", Offset = "0x7471E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x953CA8", Offset = "0x953CA8", VA = "0x953CA8")]
		public MusicEntry()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000258")]
	public class EffectEntry
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744774", Offset = "0x744774")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744774", Offset = "0x744774")]
		public float spatialBlend;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7447C8", Offset = "0x7447C8")]
		public float volume;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7447E0", Offset = "0x7447E0")]
		public float cooldown;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744818", Offset = "0x744818")]
		public float minDistance;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744850", Offset = "0x744850")]
		public bool allowOffscreen;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744888", Offset = "0x744888")]
		public bool binaural;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<AudioClip> clips;

		[NonSerialized]
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lastTimePlayed;

		[NonSerialized]
		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int roundRobinStep;

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x953C14", Offset = "0x953C14", VA = "0x953C14")]
		public EffectEntry()
		{
		}
	}

	[Token(Token = "0x2000259")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74040C", Offset = "0x74040C")]
	private sealed class <Start>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSystem <>4__this;

		[Token(Token = "0x17000145")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x953BA4", Offset = "0x953BA4", VA = "0x953BA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x953C0C", Offset = "0x953C0C", VA = "0x953C0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x952260", Offset = "0x952260", VA = "0x952260")]
		[DebuggerHidden]
		public <Start>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x953B0C", Offset = "0x953B0C", VA = "0x953B0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x953B10", Offset = "0x953B10", VA = "0x953B10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x953BAC", Offset = "0x953BAC", VA = "0x953BAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74041C", Offset = "0x74041C")]
	private sealed class <CrossfadeRoutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSystem <>4__this;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MusicEntry next;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <t>5__2;

		[Token(Token = "0x17000147")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x953740", Offset = "0x953740", VA = "0x953740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0x9537A8", Offset = "0x9537A8", VA = "0x9537A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x952308", Offset = "0x952308", VA = "0x952308")]
		[DebuggerHidden]
		public <CrossfadeRoutine>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x953544", Offset = "0x953544", VA = "0x953544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x953548", Offset = "0x953548", VA = "0x953548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x953748", Offset = "0x953748", VA = "0x953748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74042C", Offset = "0x74042C")]
	private sealed class <FadeOutFadeInRoutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSystem <>4__this;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MusicEntry next;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <t>5__2;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <startVolume>5__3;

		[Token(Token = "0x17000149")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x953A9C", Offset = "0x953A9C", VA = "0x953A9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x953B04", Offset = "0x953B04", VA = "0x953B04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x9523B0", Offset = "0x9523B0", VA = "0x9523B0")]
		[DebuggerHidden]
		public <FadeOutFadeInRoutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x9537B0", Offset = "0x9537B0", VA = "0x9537B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x9537B4", Offset = "0x9537B4", VA = "0x9537B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x953AA4", Offset = "0x953AA4", VA = "0x953AA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74043C", Offset = "0x74043C")]
	private sealed class <>c__DisplayClass27_0
	{
		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x9524EC", Offset = "0x9524EC", VA = "0x9524EC")]
		public <>c__DisplayClass27_0()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x9534B4", Offset = "0x9534B4", VA = "0x9534B4")]
		internal bool <PlayMusic>b__0(MusicEntry e)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74044C", Offset = "0x74044C")]
	private sealed class <>c__DisplayClass28_0
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x952644", Offset = "0x952644", VA = "0x952644")]
		public <>c__DisplayClass28_0()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x9534D8", Offset = "0x9534D8", VA = "0x9534D8")]
		internal bool <PlayMusicInstantly>b__0(MusicEntry e)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200025E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74045C", Offset = "0x74045C")]
	private sealed class <>c__DisplayClass29_0
	{
		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x952824", Offset = "0x952824", VA = "0x952824")]
		public <>c__DisplayClass29_0()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x9534FC", Offset = "0x9534FC", VA = "0x9534FC")]
		internal bool <PlayNarrative>b__0(EffectEntry e)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200025F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74046C", Offset = "0x74046C")]
	private sealed class <>c__DisplayClass31_0
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x952BA4", Offset = "0x952BA4", VA = "0x952BA4")]
		public <>c__DisplayClass31_0()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x953520", Offset = "0x953520", VA = "0x953520")]
		internal bool <PlayEffect>b__0(EffectEntry e)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<MusicEntry> m_musicEntries;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<EffectEntry> m_effectEntries;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioMixer m_mixer;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioMixerGroup m_musicMixerGroup;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioMixerGroup m_narratorMixerGroup;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioMixerGroup m_effectMixerGroup;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MusicEntry m_queued;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MusicEntry m_current;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource m_primaryMusicSource;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AudioSource m_secondaryMusicSource;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource m_narrativeSource;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Coroutine m_transitionCoroutine;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_fadeOutDuration;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_fadeInDuration;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_maxMusicVolume;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioSystem instance;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioListener audioListener;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float[] m_spectrum;

	[Token(Token = "0x40001EA")]
	private const int m_smoothCount = 1;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float[] m_samples;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float[] m_narrativeSamples;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int m_index;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float m_anim;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float m_prevAmp;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float m_timeOfLastBeat;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float m_lastHeight;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	private float m_minBeatInterval;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float m_ampThreshold;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private bool m_runBeatDetection;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x742134", Offset = "0x742134")]
	private float <AnimatedHeight>k__BackingField;

	[Token(Token = "0x17000078")]
	public Vector3 earPosition
	{
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x951E30", Offset = "0x951E30", VA = "0x951E30")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000079")]
	public float AnimatedHeight
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x9530C4", Offset = "0x9530C4", VA = "0x9530C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745A3C", Offset = "0x745A3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x9530CC", Offset = "0x9530CC", VA = "0x9530CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745A4C", Offset = "0x745A4C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700007A")]
	public float NarrationVolume
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x9530D4", Offset = "0x9530D4", VA = "0x9530D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x951F64", Offset = "0x951F64", VA = "0x951F64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x952188", Offset = "0x952188", VA = "0x952188")]
	private void ApplyAudioOptions()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x9520CC", Offset = "0x9520CC", VA = "0x9520CC")]
	private AudioSource CreateMusicSource()
	{
		return null;
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x9521F0", Offset = "0x9521F0", VA = "0x9521F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745910", Offset = "0x745910")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x95228C", Offset = "0x95228C", VA = "0x95228C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745974", Offset = "0x745974")]
	private IEnumerator CrossfadeRoutine(MusicEntry next)
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x952334", Offset = "0x952334", VA = "0x952334")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7459D8", Offset = "0x7459D8")]
	private IEnumerator FadeOutFadeInRoutine(MusicEntry next)
	{
		return null;
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x9523DC", Offset = "0x9523DC", VA = "0x9523DC")]
	public void PlayMusic(string name, float fadeOutDuration = 1f, float fadeInDuration = 1.5f)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x9524F4", Offset = "0x9524F4", VA = "0x9524F4")]
	internal void PlayMusicInstantly(string name)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x95264C", Offset = "0x95264C", VA = "0x95264C")]
	public AudioSource PlayNarrative(string name, int variation = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x95282C", Offset = "0x95282C", VA = "0x95282C")]
	public AudioSource PlayEffect(string name, Transform parent, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x952944", Offset = "0x952944", VA = "0x952944")]
	public AudioSource PlayEffect(string name, Vector3 position, float delay = 0f)
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x952BAC", Offset = "0x952BAC", VA = "0x952BAC")]
	public bool IsOnscreen(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x952F2C", Offset = "0x952F2C", VA = "0x952F2C")]
	internal void StopMusic()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x952F68", Offset = "0x952F68", VA = "0x952F68")]
	public void TransitionToSnapshot(string snapshotName, float timeToReach)
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x952D40", Offset = "0x952D40", VA = "0x952D40")]
	private AudioSource PlayOneshotAudio(AudioClip clip, Vector3 position, EffectEntry effect, AudioMixerGroup mixerGroup, float delay)
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x9531D0", Offset = "0x9531D0", VA = "0x9531D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x9531E0", Offset = "0x9531E0", VA = "0x9531E0")]
	private void UpdateBeatDetection()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x9533D0", Offset = "0x9533D0", VA = "0x9533D0")]
	public AudioSystem()
	{
	}
}
[Serializable]
[Token(Token = "0x2000052")]
public class PIDConfig
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float PConstant;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float IConstant;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DConstant;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x9891E8", Offset = "0x9891E8", VA = "0x9891E8")]
	public PIDConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000053")]
public class PIDController
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float P;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float I;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float D;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float integral;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float lastError;

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x9891F8", Offset = "0x9891F8", VA = "0x9891F8")]
	public float Step(float wanted, float actual, float deltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x989234", Offset = "0x989234", VA = "0x989234")]
	public float StepAngle(float wanted, float actual, float deltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x9892F8", Offset = "0x9892F8", VA = "0x9892F8")]
	public void SetConfig(PIDConfig config)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x989324", Offset = "0x989324", VA = "0x989324")]
	public void Reset()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x98932C", Offset = "0x98932C", VA = "0x98932C")]
	public PIDController()
	{
	}
}
[Token(Token = "0x2000054")]
public class PIDControllerVector3
{
	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PIDController m_x;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PIDController m_y;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PIDController m_z;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float P;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float I;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float D;

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x989334", Offset = "0x989334", VA = "0x989334")]
	public Vector3 Step(Vector3 wanted, Vector3 actual, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x9894C4", Offset = "0x9894C4", VA = "0x9894C4")]
	public void SetConfig(PIDConfig config)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x9894F0", Offset = "0x9894F0", VA = "0x9894F0")]
	public PIDControllerVector3()
	{
	}
}
[Token(Token = "0x2000055")]
public static class Utils
{
	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x9CB5DC", Offset = "0x9CB5DC", VA = "0x9CB5DC")]
	public static float DistanceAlongGround(Vector3 a, Vector3 b)
	{
		return default(float);
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x9CBEEC", Offset = "0x9CBEEC", VA = "0x9CBEEC")]
	public static Vector3 FirstOrderIntercept(Vector3 shooterPosition, Vector3 shooterVelocity, float shotSpeed, Vector3 targetPosition, Vector3 targetVelocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x9CC30C", Offset = "0x9CC30C", VA = "0x9CC30C")]
	public static Vector3 Flatten(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x9CC33C", Offset = "0x9CC33C", VA = "0x9CC33C")]
	public static Vector3 Direction(Vector3 from, Vector3 to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x9CC3EC", Offset = "0x9CC3EC", VA = "0x9CC3EC")]
	public static Vector3 GroundDirection(Vector3 from, Vector3 to)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x9CC040", Offset = "0x9CC040", VA = "0x9CC040")]
	public static float FirstOrderInterceptTime(float shotSpeed, Vector3 targetRelativePosition, Vector3 targetRelativeVelocity)
	{
		return default(float);
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x9CC4C0", Offset = "0x9CC4C0", VA = "0x9CC4C0")]
	public static Quaternion LookAtYawOnly(Vector3 from, Vector3 to)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x9CC5A4", Offset = "0x9CC5A4", VA = "0x9CC5A4")]
	public static bool HeadingToward(Vector3 travellerPosition, Vector3 travellerDirection, Vector3 referencePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x9CC690", Offset = "0x9CC690", VA = "0x9CC690")]
	public static bool InRange(Vector3 positionA, Vector3 positionB, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x6000306")]
	public static void Shuffle<T>(this IList<T> list, System.Random randomizer)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x9CC750", Offset = "0x9CC750", VA = "0x9CC750")]
	private static Vector3 rgb_to_hsv_no_clip(Vector3 RGB)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x9CC950", Offset = "0x9CC950", VA = "0x9CC950")]
	private static Vector3 hsv_to_rgb(Vector3 HSV)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x9CCAE8", Offset = "0x9CCAE8", VA = "0x9CCAE8")]
	public static Color DoTheHueShift(Color col, float hueShift)
	{
		return default(Color);
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x9CCB60", Offset = "0x9CCB60", VA = "0x9CCB60")]
	public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek)
	{
		return default(DateTime);
	}

	[Token(Token = "0x600030B")]
	public static void Swap<T>(ref T lhs, ref T rhs)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x9CCBC8", Offset = "0x9CCBC8", VA = "0x9CCBC8")]
	public static Vector3 WithY(this Vector3 v, float y)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x9CCBD0", Offset = "0x9CCBD0", VA = "0x9CCBD0")]
	public static Vector3 Truncate(this Vector3 v, float maxLength)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x9CCCA0", Offset = "0x9CCCA0", VA = "0x9CCCA0")]
	public static Vector3 CalculateThrowVelocity(Vector3 origin, Vector3 target, float apexAdd)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x9CCE8C", Offset = "0x9CCE8C", VA = "0x9CCE8C")]
	public static float TimeToReachApex(float velocity, float gravity)
	{
		return default(float);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x9CCE98", Offset = "0x9CCE98", VA = "0x9CCE98")]
	public static float TimeForStillObjectToLand(float currentHeight, float targetHeight, float gravity)
	{
		return default(float);
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x9CCF40", Offset = "0x9CCF40", VA = "0x9CCF40")]
	public static float TimeToLand(float startVelocity, float startHeight, float targetHeight, float gravity)
	{
		return default(float);
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x9CCF8C", Offset = "0x9CCF8C", VA = "0x9CCF8C")]
	public static float HeightAtApex(float startHeight, float startVelocity, float gravity)
	{
		return default(float);
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x9CB0EC", Offset = "0x9CB0EC", VA = "0x9CB0EC")]
	public static Vector3 PredictLandPosition(Vector3 position, Vector3 velocity, float targetHeight, float gravityY)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x9CCFB4", Offset = "0x9CCFB4", VA = "0x9CCFB4")]
	public static bool PredictFuturePositionAtHeight(Vector3 position, Vector3 velocity, float targetHeight, float gravityY, out Vector3 landPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x9CD0F8", Offset = "0x9CD0F8", VA = "0x9CD0F8")]
	public static float DistanceAlongDirection(Vector3 direction, Vector3 point)
	{
		return default(float);
	}
}
[Token(Token = "0x2000056")]
public class CatmullRomSpline
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Vector3> Points;

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x957264", Offset = "0x957264", VA = "0x957264")]
	public Vector3 GetInterpolatedPoint(float time)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x9574C0", Offset = "0x9574C0", VA = "0x9574C0")]
	private void BOUNDS(ref int pp)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x95753C", Offset = "0x95753C", VA = "0x95753C")]
	public static Vector3 CalculateCatmullRomSpline(float time, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x95787C", Offset = "0x95787C", VA = "0x95787C")]
	public CatmullRomSpline()
	{
	}
}
[Token(Token = "0x2000057")]
public class AmbienceEmitter : MonoBehaviour
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SoundFXRef[] ambientSounds;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoActivate;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742144", Offset = "0x742144")]
	public bool autoRetrigger;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x74217C", Offset = "0x74217C")]
	public Vector2 randomRetriggerDelaySecs;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7421A0", Offset = "0x7421A0")]
	public Transform[] playPositions;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool activated;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int playingIdx;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float nextPlayTime;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float fadeTime;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int lastPosIdx;

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x94B270", Offset = "0x94B270", VA = "0x94B270")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x94B3F4", Offset = "0x94B3F4", VA = "0x94B3F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x94B5D4", Offset = "0x94B5D4", VA = "0x94B5D4")]
	public void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x94B454", Offset = "0x94B454", VA = "0x94B454")]
	public void Play()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x94B698", Offset = "0x94B698", VA = "0x94B698")]
	public void EnableEmitter(bool enable)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x94B810", Offset = "0x94B810", VA = "0x94B810")]
	public AmbienceEmitter()
	{
	}
}
[Token(Token = "0x2000058")]
public enum PreloadSounds
{
	[Token(Token = "0x4000210")]
	Default,
	[Token(Token = "0x4000211")]
	Preload,
	[Token(Token = "0x4000212")]
	ManualPreload
}
[Token(Token = "0x2000059")]
public enum Fade
{
	[Token(Token = "0x4000214")]
	In,
	[Token(Token = "0x4000215")]
	Out
}
[Serializable]
[Token(Token = "0x200005A")]
public class SoundGroup
{
	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SoundFX[] soundList;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixerGroup mixerGroup;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7421D8", Offset = "0x7421D8")]
	public int maxPlayingSounds;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public PreloadSounds preloadAudio;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float volumeOverride;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public int playingSoundCount;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xB157CC", Offset = "0xB157CC", VA = "0xB157CC")]
	public SoundGroup(string name)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xB15860", Offset = "0xB15860", VA = "0xB15860")]
	public SoundGroup()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xB134C4", Offset = "0xB134C4", VA = "0xB134C4")]
	public void IncrementPlayCount()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xB13800", Offset = "0xB13800", VA = "0xB13800")]
	public void DecrementPlayCount()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xB14D80", Offset = "0xB14D80", VA = "0xB14D80")]
	public bool CanPlaySound()
	{
		return default(bool);
	}
}
[Token(Token = "0x200005B")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x2000260")]
	public enum Fade
	{
		[Token(Token = "0x4000F74")]
		In,
		[Token(Token = "0x4000F75")]
		Out
	}

	[Token(Token = "0x2000261")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74047C", Offset = "0x74047C")]
	private sealed class <>c__DisplayClass75_0
	{
		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundPriority priority;

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x94FD04", Offset = "0x94FD04", VA = "0x94FD04")]
		public <>c__DisplayClass75_0()
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x951D90", Offset = "0x951D90", VA = "0x951D90")]
		internal bool <FindFreeEmitter>b__0(SoundEmitter item)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x2000262")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74048C", Offset = "0x74048C")]
	private sealed class <>c
	{
		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<SoundEmitter> <>9__75_1;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x951CF8", Offset = "0x951CF8", VA = "0x951CF8")]
		public <>c()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x951D00", Offset = "0x951D00", VA = "0x951D00")]
		internal bool <FindFreeEmitter>b__75_1(SoundEmitter item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742204", Offset = "0x742204")]
	public bool makePersistent;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74223C", Offset = "0x74223C")]
	public bool enableSpatializedAudio;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742274", Offset = "0x742274")]
	public bool enableSpatializedFastOverride;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7422AC", Offset = "0x7422AC")]
	public AudioMixer audioMixer;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7422E4", Offset = "0x7422E4")]
	public AudioMixerGroup defaultMixerGroup;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74231C", Offset = "0x74231C")]
	public AudioMixerGroup reservedMixerGroup;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742354", Offset = "0x742354")]
	public AudioMixerGroup voiceChatMixerGroup;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74238C", Offset = "0x74238C")]
	public bool verboseLogging;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7423C4", Offset = "0x7423C4")]
	public int maxSoundEmitters;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7423FC", Offset = "0x7423FC")]
	public float volumeSoundFX;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742434", Offset = "0x742434")]
	public float soundFxFadeSecs;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float audioMinFallOffDistance;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float audioMaxFallOffDistance;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SoundGroup[] soundGroupings;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<string, SoundFX> soundFXCache;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AudioManager theAudioManager;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static FastList<string> names;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[] defaultSound;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static SoundFX nullSound;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static bool hideWarnings;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float audioMaxFallOffDistanceSqr;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SoundEmitter[] soundEmitters;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FastList<SoundEmitter> playingEmitters;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private FastList<SoundEmitter> nextFreeEmitters;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MixerSnapshot currentSnapshot;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static GameObject soundEmitterParent;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Transform staticListenerPosition;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static bool showPlayingEmitterCount;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private static bool forceShowEmitterCount;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private static bool soundEnabled;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static readonly AnimationCurve defaultReverbZoneMix;

	[Token(Token = "0x1700007B")]
	public static bool enableSpatialization
	{
		[Token(Token = "0x6000325")]
		[Address(RVA = "0x94C054", Offset = "0x94C054", VA = "0x94C054")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007C")]
	public static AudioManager Instance
	{
		[Token(Token = "0x6000326")]
		[Address(RVA = "0x94C134", Offset = "0x94C134", VA = "0x94C134")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007D")]
	public static float NearFallOff
	{
		[Token(Token = "0x6000327")]
		[Address(RVA = "0x94C19C", Offset = "0x94C19C", VA = "0x94C19C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700007E")]
	public static float FarFallOff
	{
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x94C210", Offset = "0x94C210", VA = "0x94C210")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700007F")]
	public static AudioMixerGroup EmitterGroup
	{
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x94C284", Offset = "0x94C284", VA = "0x94C284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000080")]
	public static AudioMixerGroup ReservedGroup
	{
		[Token(Token = "0x600032A")]
		[Address(RVA = "0x94C2F8", Offset = "0x94C2F8", VA = "0x94C2F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000081")]
	public static AudioMixerGroup VoipGroup
	{
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x94C36C", Offset = "0x94C36C", VA = "0x94C36C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000082")]
	public static bool SoundEnabled
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x94E0C8", Offset = "0x94E0C8", VA = "0x94E0C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x94C3E0", Offset = "0x94C3E0", VA = "0x94C3E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x94C608", Offset = "0x94C608", VA = "0x94C608")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x94C3E4", Offset = "0x94C3E4", VA = "0x94C3E4")]
	private void Init()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x94D238", Offset = "0x94D238", VA = "0x94D238")]
	private void Update()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x94C760", Offset = "0x94C760", VA = "0x94C760")]
	private void RebuildSoundFXCache()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x94D864", Offset = "0x94D864", VA = "0x94D864")]
	public static SoundFX FindSoundFX(string name, bool rebuildCache = false)
	{
		return null;
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x94D9E4", Offset = "0x94D9E4", VA = "0x94D9E4")]
	private static bool FindAudioManager()
	{
		return default(bool);
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x94DB80", Offset = "0x94DB80", VA = "0x94DB80")]
	public static GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x94DC80", Offset = "0x94DC80", VA = "0x94DC80")]
	public static string NameMinusGroup(string name)
	{
		return null;
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x94DD10", Offset = "0x94DD10", VA = "0x94DD10")]
	public static string[] GetSoundFXNames(string currentValue, out int currentIdx)
	{
		return null;
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x94CBAC", Offset = "0x94CBAC", VA = "0x94CBAC")]
	private void InitializeSoundSystem()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x94D23C", Offset = "0x94D23C", VA = "0x94D23C")]
	private void UpdateFreeEmitters()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x94E1FC", Offset = "0x94E1FC", VA = "0x94E1FC")]
	private string Fmt(int count)
	{
		return null;
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x94E300", Offset = "0x94E300", VA = "0x94E300")]
	private string FmtFree(int count)
	{
		return null;
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x94E408", Offset = "0x94E408", VA = "0x94E408")]
	private void OnPreSceneLoad()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x94E130", Offset = "0x94E130", VA = "0x94E130")]
	private void ResetFreeEmitters()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x94E53C", Offset = "0x94E53C", VA = "0x94E53C")]
	public static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x94E5F8", Offset = "0x94E5F8", VA = "0x94E5F8")]
	public static bool StopSound(int idx, bool fadeOut = true, bool stopReserved = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x94E718", Offset = "0x94E718", VA = "0x94E718")]
	public static void FadeInSound(int idx, float fadeTime, float volume)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x94B5E4", Offset = "0x94B5E4", VA = "0x94B5E4")]
	public static void FadeInSound(int idx, float fadeTime)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x94B75C", Offset = "0x94B75C", VA = "0x94B75C")]
	public static void FadeOutSound(int idx, float fadeTime)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x94E7D4", Offset = "0x94E7D4", VA = "0x94E7D4")]
	public static void StopAllSounds(bool fadeOut, bool stopReserved = false)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x94E8A0", Offset = "0x94E8A0", VA = "0x94E8A0")]
	public void MuteAllSounds(bool mute, bool muteReserved = false)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x94E934", Offset = "0x94E934", VA = "0x94E934")]
	public void UnMuteAllSounds(bool unmute, bool unmuteReserved = false)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x94E9F8", Offset = "0x94E9F8", VA = "0x94E9F8")]
	public static float GetEmitterEndTime(int idx)
	{
		return default(float);
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x94EA9C", Offset = "0x94EA9C", VA = "0x94EA9C")]
	public static float SetEmitterTime(int idx, float time)
	{
		return default(float);
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x94EB58", Offset = "0x94EB58", VA = "0x94EB58")]
	public static int PlaySound(AudioClip clip, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitchVariance = 1f, bool loop = false)
	{
		return default(int);
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x94F648", Offset = "0x94F648", VA = "0x94F648")]
	private static int FindFreeEmitter(EmitterChannel src, SoundPriority priority)
	{
		return default(int);
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x94FD0C", Offset = "0x94FD0C", VA = "0x94FD0C")]
	public static int PlaySound(SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f)
	{
		return default(int);
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x94FEEC", Offset = "0x94FEEC", VA = "0x94FEEC")]
	public static int PlaySoundAt(Vector3 position, SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
	{
		return default(int);
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x950A38", Offset = "0x950A38", VA = "0x950A38")]
	public static int PlayRandomSoundAt(Vector3 position, AudioClip[] clips, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
	{
		return default(int);
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x94ED60", Offset = "0x94ED60", VA = "0x94ED60")]
	public static int PlaySoundAt(Vector3 position, AudioClip clip, float volume = 1f, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
	{
		return default(int);
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x950B58", Offset = "0x950B58", VA = "0x950B58")]
	public static void SetOnFinished(int emitterIdx, Action onFinished)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x950C3C", Offset = "0x950C3C", VA = "0x950C3C")]
	public static void SetOnFinished(int emitterIdx, Action<object> onFinished, object obj)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x950D3C", Offset = "0x950D3C", VA = "0x950D3C")]
	public static void AttachSoundToParent(int idx, Transform parent)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x950FFC", Offset = "0x950FFC", VA = "0x950FFC")]
	public static void DetachSoundFromParent(int idx)
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x951144", Offset = "0x951144", VA = "0x951144")]
	public static void DetachSoundsFromParent(SoundEmitter[] emitters, bool stopSounds = true)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x95126C", Offset = "0x95126C", VA = "0x95126C")]
	public static void SetEmitterMixerGroup(int idx, AudioMixerGroup mixerGroup)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x951390", Offset = "0x951390", VA = "0x951390")]
	public static MixerSnapshot GetActiveSnapshot()
	{
		return null;
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x951468", Offset = "0x951468", VA = "0x951468")]
	public static void SetCurrentSnapshot(MixerSnapshot mixerSnapshot)
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x95159C", Offset = "0x95159C", VA = "0x95159C")]
	public static void BlendWithCurrentSnapshot(MixerSnapshot blendSnapshot, float weight, float blendTime = 0f)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x951988", Offset = "0x951988", VA = "0x951988")]
	public AudioManager()
	{
	}
}
[Token(Token = "0x200005C")]
public enum EmitterChannel
{
	[Token(Token = "0x400023D")]
	None = -1,
	[Token(Token = "0x400023E")]
	Reserved,
	[Token(Token = "0x400023F")]
	Any
}
[Serializable]
[Token(Token = "0x200005D")]
public class MixerSnapshot
{
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioMixerSnapshot snapshot;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float transitionTime;

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xA0E62C", Offset = "0xA0E62C", VA = "0xA0E62C")]
	public MixerSnapshot()
	{
	}
}
[Token(Token = "0x200005E")]
public class MinMaxAttribute : PropertyAttribute
{
	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float minDefaultVal;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float maxDefaultVal;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float min;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float max;

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xA0E5D0", Offset = "0xA0E5D0", VA = "0xA0E5D0")]
	public MinMaxAttribute(float minDefaultVal, float maxDefaultVal, float min, float max)
	{
	}
}
[Token(Token = "0x200005F")]
public class SoundEmitter : MonoBehaviour
{
	[Token(Token = "0x2000263")]
	public enum FadeState
	{
		[Token(Token = "0x4000F7A")]
		Null,
		[Token(Token = "0x4000F7B")]
		FadingIn,
		[Token(Token = "0x4000F7C")]
		FadingOut,
		[Token(Token = "0x4000F7D")]
		Ducking
	}

	[Token(Token = "0x2000264")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74049C", Offset = "0x74049C")]
	private sealed class <DelayedSyncTo>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundEmitter <>4__this;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SoundEmitter other;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fadeTime;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float toVolume;

		[Token(Token = "0x1700014B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0xB140E0", Offset = "0xB140E0", VA = "0xB140E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xB14148", Offset = "0xB14148", VA = "0xB14148", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xB13B98", Offset = "0xB13B98", VA = "0xB13B98")]
		[DebuggerHidden]
		public <DelayedSyncTo>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xB13FF0", Offset = "0xB13FF0", VA = "0xB13FF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xB13FF4", Offset = "0xB13FF4", VA = "0xB13FF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xB140E8", Offset = "0xB140E8", VA = "0xB140E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000265")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404AC", Offset = "0x7404AC")]
	private sealed class <FadeSoundChannelTo>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundEmitter <>4__this;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float toVolume;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float fadeTime;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <start>5__2;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <end>5__3;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <startTime>5__4;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <elapsedTime>5__5;

		[Token(Token = "0x1700014D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xB14594", Offset = "0xB14594", VA = "0xB14594", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xB145FC", Offset = "0xB145FC", VA = "0xB145FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xB13F80", Offset = "0xB13F80", VA = "0xB13F80")]
		[DebuggerHidden]
		public <FadeSoundChannelTo>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xB14428", Offset = "0xB14428", VA = "0xB14428", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xB1442C", Offset = "0xB1442C", VA = "0xB1442C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xB1459C", Offset = "0xB1459C", VA = "0xB1459C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000266")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404BC", Offset = "0x7404BC")]
	private sealed class <FadeSoundChannel>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delaySecs;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Fade fadeType;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float defaultVolume;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundEmitter <>4__this;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float fadeTime;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <start>5__2;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <end>5__3;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool <restartPlay>5__4;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <startTime>5__5;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <elapsedTime>5__6;

		[Token(Token = "0x1700014F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xB143B8", Offset = "0xB143B8", VA = "0xB143B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xB14420", Offset = "0xB14420", VA = "0xB14420", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xB13FAC", Offset = "0xB13FAC", VA = "0xB13FAC")]
		[DebuggerHidden]
		public <FadeSoundChannel>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xB14150", Offset = "0xB14150", VA = "0xB14150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xB14154", Offset = "0xB14154", VA = "0xB14154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xB143C0", Offset = "0xB143C0", VA = "0xB143C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EmitterChannel channel;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool disableSpatialization;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FadeState state;

	[NonSerialized]
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AudioSource audioSource;

	[NonSerialized]
	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public SoundPriority priority;

	[NonSerialized]
	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public ONSPAudioSource osp;

	[NonSerialized]
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float endPlayTime;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform lastParentTransform;

	[NonSerialized]
	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public float defaultVolume;

	[NonSerialized]
	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform defaultParent;

	[NonSerialized]
	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public int originalIdx;

	[NonSerialized]
	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public Action onFinished;

	[NonSerialized]
	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Action<object> onFinishedObject;

	[NonSerialized]
	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public object onFinishedParam;

	[NonSerialized]
	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public SoundGroup playingSoundGroup;

	[Token(Token = "0x17000083")]
	public float volume
	{
		[Token(Token = "0x600035A")]
		[Address(RVA = "0xB130CC", Offset = "0xB130CC", VA = "0xB130CC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600035B")]
		[Address(RVA = "0xB130E8", Offset = "0xB130E8", VA = "0xB130E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	public float pitch
	{
		[Token(Token = "0x600035C")]
		[Address(RVA = "0xB13104", Offset = "0xB13104", VA = "0xB13104")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600035D")]
		[Address(RVA = "0xB13120", Offset = "0xB13120", VA = "0xB13120")]
		set
		{
		}
	}

	[Token(Token = "0x17000085")]
	public AudioClip clip
	{
		[Token(Token = "0x600035E")]
		[Address(RVA = "0xB1313C", Offset = "0xB1313C", VA = "0xB1313C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600035F")]
		[Address(RVA = "0xB13158", Offset = "0xB13158", VA = "0xB13158")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public float time
	{
		[Token(Token = "0x6000360")]
		[Address(RVA = "0xB13174", Offset = "0xB13174", VA = "0xB13174")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000361")]
		[Address(RVA = "0xB13190", Offset = "0xB13190", VA = "0xB13190")]
		set
		{
		}
	}

	[Token(Token = "0x17000087")]
	public float length
	{
		[Token(Token = "0x6000362")]
		[Address(RVA = "0xB131AC", Offset = "0xB131AC", VA = "0xB131AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000088")]
	public bool loop
	{
		[Token(Token = "0x6000363")]
		[Address(RVA = "0xB13264", Offset = "0xB13264", VA = "0xB13264")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000364")]
		[Address(RVA = "0xB13280", Offset = "0xB13280", VA = "0xB13280")]
		set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public bool mute
	{
		[Token(Token = "0x6000365")]
		[Address(RVA = "0xB132A0", Offset = "0xB132A0", VA = "0xB132A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000366")]
		[Address(RVA = "0xB132BC", Offset = "0xB132BC", VA = "0xB132BC")]
		set
		{
		}
	}

	[Token(Token = "0x1700008A")]
	public AudioVelocityUpdateMode velocityUpdateMode
	{
		[Token(Token = "0x6000367")]
		[Address(RVA = "0xB132DC", Offset = "0xB132DC", VA = "0xB132DC")]
		get
		{
			return default(AudioVelocityUpdateMode);
		}
		[Token(Token = "0x6000368")]
		[Address(RVA = "0xB132F8", Offset = "0xB132F8", VA = "0xB132F8")]
		set
		{
		}
	}

	[Token(Token = "0x1700008B")]
	public bool isPlaying
	{
		[Token(Token = "0x6000369")]
		[Address(RVA = "0xB13314", Offset = "0xB13314", VA = "0xB13314")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xB13330", Offset = "0xB13330", VA = "0xB13330")]
	private void Awake()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xB134B0", Offset = "0xB134B0", VA = "0xB134B0")]
	public void SetPlayingSoundGroup(SoundGroup soundGroup)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xB13554", Offset = "0xB13554", VA = "0xB13554")]
	public void SetOnFinished(Action onFinished)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xB1355C", Offset = "0xB1355C", VA = "0xB1355C")]
	public void SetOnFinished(Action<object> onFinished, object obj)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xB13564", Offset = "0xB13564", VA = "0xB13564")]
	public void SetChannel(int _channel)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xB1356C", Offset = "0xB1356C", VA = "0xB1356C")]
	public void SetDefaultParent(Transform parent)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xB13574", Offset = "0xB13574", VA = "0xB13574")]
	public void SetAudioMixer(AudioMixerGroup _mixer)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xB1361C", Offset = "0xB1361C", VA = "0xB1361C")]
	public bool IsPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xB13688", Offset = "0xB13688", VA = "0xB13688")]
	public void Play()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xB136E8", Offset = "0xB136E8", VA = "0xB136E8")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xB13720", Offset = "0xB13720", VA = "0xB13720")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xB13890", Offset = "0xB13890", VA = "0xB13890")]
	private int GetSampleTime()
	{
		return default(int);
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xB138E8", Offset = "0xB138E8", VA = "0xB138E8")]
	public void ParentTo(Transform parent)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xB139E4", Offset = "0xB139E4", VA = "0xB139E4")]
	public void DetachFromParent()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xB13A9C", Offset = "0xB13A9C", VA = "0xB13A9C")]
	public void ResetParent(Transform parent)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xB13ADC", Offset = "0xB13ADC", VA = "0xB13ADC")]
	public void SyncTo(SoundEmitter other, float fadeTime, float toVolume)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xB13B08", Offset = "0xB13B08", VA = "0xB13B08")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745A9C", Offset = "0x745A9C")]
	private IEnumerator DelayedSyncTo(SoundEmitter other, float fadeTime, float toVolume)
	{
		return null;
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xB13BC4", Offset = "0xB13BC4", VA = "0xB13BC4")]
	public void FadeTo(float fadeTime, float toVolume)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xB13CB0", Offset = "0xB13CB0", VA = "0xB13CB0")]
	public void FadeIn(float fadeTime, float defaultVolume)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xB13DD4", Offset = "0xB13DD4", VA = "0xB13DD4")]
	public void FadeIn(float fadeTime)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xB13E4C", Offset = "0xB13E4C", VA = "0xB13E4C")]
	public void FadeOut(float fadeTime)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xB13EE4", Offset = "0xB13EE4", VA = "0xB13EE4")]
	public void FadeOutDelayed(float delayedSecs, float fadeTime)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xB13C2C", Offset = "0xB13C2C", VA = "0xB13C2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745B00", Offset = "0x745B00")]
	private IEnumerator FadeSoundChannelTo(float fadeTime, float toVolume)
	{
		return null;
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xB13D2C", Offset = "0xB13D2C", VA = "0xB13D2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745B64", Offset = "0x745B64")]
	private IEnumerator FadeSoundChannel(float delaySecs, float fadeTime, Fade fadeType, float defaultVolume)
	{
		return null;
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xB13FD8", Offset = "0xB13FD8", VA = "0xB13FD8")]
	public SoundEmitter()
	{
	}
}
[Token(Token = "0x2000060")]
public enum SoundFXNext
{
	[Token(Token = "0x4000256")]
	Random,
	[Token(Token = "0x4000257")]
	Sequential
}
[Token(Token = "0x2000061")]
public enum FreqHint
{
	[Token(Token = "0x4000259")]
	None,
	[Token(Token = "0x400025A")]
	Wide,
	[Token(Token = "0x400025B")]
	Narrow
}
[Token(Token = "0x2000062")]
public enum SoundPriority
{
	[Token(Token = "0x400025D")]
	VeryLow = -2,
	[Token(Token = "0x400025E")]
	Low,
	[Token(Token = "0x400025F")]
	Default,
	[Token(Token = "0x4000260")]
	High,
	[Token(Token = "0x4000261")]
	VeryHigh
}
[Serializable]
[Token(Token = "0x2000063")]
public class OSPProps
{
	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74251C", Offset = "0x74251C")]
	public bool enableSpatialization;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742554", Offset = "0x742554")]
	public bool useFastOverride;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74258C", Offset = "0x74258C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74258C", Offset = "0x74258C")]
	public float gain;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7425E0", Offset = "0x7425E0")]
	public bool enableInvSquare;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742618", Offset = "0x742618")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x742618", Offset = "0x742618")]
	public float volumetric;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742670", Offset = "0x742670")]
	[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x742670", Offset = "0x742670")]
	public Vector2 invSquareFalloff;

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xADBBAC", Offset = "0xADBBAC", VA = "0xADBBAC")]
	public OSPProps()
	{
	}
}
[Serializable]
[Token(Token = "0x2000064")]
public class SoundFX
{
	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7426D0", Offset = "0x7426D0")]
	public string name;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742708", Offset = "0x742708")]
	public SoundFXNext playback;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742740", Offset = "0x742740")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x742740", Offset = "0x742740")]
	public float volume;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742794", Offset = "0x742794")]
	[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x742794", Offset = "0x742794")]
	public Vector2 pitchVariance;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7427F0", Offset = "0x7427F0")]
	[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7427F0", Offset = "0x7427F0")]
	public Vector2 falloffDistance;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742850", Offset = "0x742850")]
	public AudioRolloffMode falloffCurve;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742888", Offset = "0x742888")]
	public AnimationCurve volumeFalloffCurve;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7428C0", Offset = "0x7428C0")]
	public AnimationCurve reverbZoneMix;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7428F8", Offset = "0x7428F8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7428F8", Offset = "0x7428F8")]
	public float spread;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742950", Offset = "0x742950")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x742950", Offset = "0x742950")]
	public float pctChanceToPlay;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7429A4", Offset = "0x7429A4")]
	public SoundPriority priority;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7429DC", Offset = "0x7429DC")]
	[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7429DC", Offset = "0x7429DC")]
	public Vector2 delay;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742A38", Offset = "0x742A38")]
	public bool looping;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public OSPProps ospProps;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742A70", Offset = "0x742A70")]
	public AudioClip[] soundClips;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool visibilityToggle;

	[NonSerialized]
	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SoundGroup soundGroup;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int lastIdx;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int playingIdx;

	[Token(Token = "0x1700008C")]
	public int Length
	{
		[Token(Token = "0x6000385")]
		[Address(RVA = "0xB14AF4", Offset = "0xB14AF4", VA = "0xB14AF4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700008D")]
	public bool IsValid
	{
		[Token(Token = "0x6000386")]
		[Address(RVA = "0xB14B10", Offset = "0xB14B10", VA = "0xB14B10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008E")]
	public SoundGroup Group
	{
		[Token(Token = "0x6000387")]
		[Address(RVA = "0xB14BB4", Offset = "0xB14BB4", VA = "0xB14BB4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000388")]
		[Address(RVA = "0xB14BBC", Offset = "0xB14BBC", VA = "0xB14BBC")]
		set
		{
		}
	}

	[Token(Token = "0x1700008F")]
	public float MaxFalloffDistSquared
	{
		[Token(Token = "0x6000389")]
		[Address(RVA = "0xB14BC4", Offset = "0xB14BC4", VA = "0xB14BC4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000090")]
	public float GroupVolumeOverride
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0xB14BD0", Offset = "0xB14BD0", VA = "0xB14BD0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xB14604", Offset = "0xB14604", VA = "0xB14604")]
	public SoundFX()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xB14BE8", Offset = "0xB14BE8", VA = "0xB14BE8")]
	public AudioClip GetClip()
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xB14CB8", Offset = "0xB14CB8", VA = "0xB14CB8")]
	public AudioMixerGroup GetMixerGroup(AudioMixerGroup defaultMixerGroup)
	{
		return null;
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xB14D58", Offset = "0xB14D58", VA = "0xB14D58")]
	public bool ReachedGroupPlayLimit()
	{
		return default(bool);
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xB14DA0", Offset = "0xB14DA0", VA = "0xB14DA0")]
	public float GetClipLength(int idx)
	{
		return default(float);
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xB14E9C", Offset = "0xB14E9C", VA = "0xB14E9C")]
	public float GetPitch()
	{
		return default(float);
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xB14EA8", Offset = "0xB14EA8", VA = "0xB14EA8")]
	public int PlaySound(float delaySecs = 0f)
	{
		return default(int);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xB14F88", Offset = "0xB14F88", VA = "0xB14F88")]
	public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
	{
		return default(int);
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xB150A0", Offset = "0xB150A0", VA = "0xB150A0")]
	public void SetOnFinished(Action onFinished)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xB15130", Offset = "0xB15130", VA = "0xB15130")]
	public void SetOnFinished(Action<object> onFinished, object obj)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xB151C8", Offset = "0xB151C8", VA = "0xB151C8")]
	public bool StopSound()
	{
		return default(bool);
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xB15258", Offset = "0xB15258", VA = "0xB15258")]
	public void AttachToParent(Transform parent)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xB152E8", Offset = "0xB152E8", VA = "0xB152E8")]
	public void DetachFromParent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000065")]
public class SoundFXRef
{
	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string soundFXName;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SoundFX soundFXCached;

	[Token(Token = "0x17000091")]
	public SoundFX soundFX
	{
		[Token(Token = "0x6000397")]
		[Address(RVA = "0xB15364", Offset = "0xB15364", VA = "0xB15364")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000092")]
	public string name
	{
		[Token(Token = "0x6000398")]
		[Address(RVA = "0xB15460", Offset = "0xB15460", VA = "0xB15460")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000399")]
		[Address(RVA = "0xB15468", Offset = "0xB15468", VA = "0xB15468")]
		set
		{
		}
	}

	[Token(Token = "0x17000093")]
	public int Length
	{
		[Token(Token = "0x600039B")]
		[Address(RVA = "0xB15470", Offset = "0xB15470", VA = "0xB15470")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000094")]
	public bool IsValid
	{
		[Token(Token = "0x600039C")]
		[Address(RVA = "0xB154B4", Offset = "0xB154B4", VA = "0xB154B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xB15394", Offset = "0xB15394", VA = "0xB15394")]
	private void Init()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xB154EC", Offset = "0xB154EC", VA = "0xB154EC")]
	public AudioClip GetClip()
	{
		return null;
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xB15524", Offset = "0xB15524", VA = "0xB15524")]
	public float GetClipLength(int idx)
	{
		return default(float);
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xB15564", Offset = "0xB15564", VA = "0xB15564")]
	public int PlaySound(float delaySecs = 0f)
	{
		return default(int);
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xB155AC", Offset = "0xB155AC", VA = "0xB155AC")]
	public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volume = 1f, float pitchMultiplier = 1f)
	{
		return default(int);
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xB1562C", Offset = "0xB1562C", VA = "0xB1562C")]
	public void SetOnFinished(Action onFinished)
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xB1566C", Offset = "0xB1566C", VA = "0xB1566C")]
	public void SetOnFinished(Action<object> onFinished, object obj)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xB156BC", Offset = "0xB156BC", VA = "0xB156BC")]
	public bool StopSound()
	{
		return default(bool);
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xB156F4", Offset = "0xB156F4", VA = "0xB156F4")]
	public void AttachToParent(Transform parent)
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xB15734", Offset = "0xB15734", VA = "0xB15734")]
	public void DetachFromParent()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xB1576C", Offset = "0xB1576C", VA = "0xB1576C")]
	public SoundFXRef()
	{
	}
}
[Token(Token = "0x2000066")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x73F5E4", Offset = "0x73F5E4")]
public class FastList<T>
{
	[Token(Token = "0x2000267")]
	public delegate int CompareFunc(T left, T right);

	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404CC", Offset = "0x7404CC")]
	private sealed class <GetEnumerator>d__25 : IEnumerator<T>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<T> <>4__this;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <i>5__2;

		[Token(Token = "0x17000151")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6000CDB")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000152")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CDD")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD8")]
		[DebuggerHidden]
		public <GetEnumerator>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000CD9")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CDA")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] array;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	[Token(Token = "0x17000095")]
	public int Count
	{
		[Token(Token = "0x60003A9")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003AA")]
		set
		{
		}
	}

	[Token(Token = "0x17000096")]
	public T Item
	{
		[Token(Token = "0x60003AB")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x60003AC")]
		set
		{
		}
	}

	[Token(Token = "0x60003A7")]
	public FastList()
	{
	}

	[Token(Token = "0x60003A8")]
	public FastList(int size)
	{
	}

	[Token(Token = "0x60003AD")]
	public void Add(T item)
	{
	}

	[Token(Token = "0x60003AE")]
	public void AddUnique(T item)
	{
	}

	[Token(Token = "0x60003AF")]
	public void AddRange(IEnumerable<T> items)
	{
	}

	[Token(Token = "0x60003B0")]
	public void Insert(int index, T item)
	{
	}

	[Token(Token = "0x60003B1")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B2")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x60003B3")]
	public bool RemoveFast(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B4")]
	public void RemoveAtFast(int index)
	{
	}

	[Token(Token = "0x60003B5")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B6")]
	public int IndexOf(T item)
	{
		return default(int);
	}

	[Token(Token = "0x60003B7")]
	public T Pop()
	{
		return (T)null;
	}

	[Token(Token = "0x60003B8")]
	public T[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x60003B9")]
	public void Sort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x60003BA")]
	public void InsertionSort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x60003BB")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745BC8", Offset = "0x745BC8")]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x60003BC")]
	public T Find(Predicate<T> match)
	{
		return (T)null;
	}

	[Token(Token = "0x60003BD")]
	private void Allocate()
	{
	}

	[Token(Token = "0x60003BE")]
	private void Trim()
	{
	}

	[Token(Token = "0x60003BF")]
	public void Clear()
	{
	}

	[Token(Token = "0x60003C0")]
	public void Release()
	{
	}
}
[Token(Token = "0x2000067")]
public class InspectorNoteAttribute : PropertyAttribute
{
	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string header;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string message;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xA0B958", Offset = "0xA0B958", VA = "0xA0B958")]
	public InspectorNoteAttribute(string header, string message = "")
	{
	}
}
[Token(Token = "0x2000068")]
public class InspectorCommentAttribute : PropertyAttribute
{
	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string message;

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xA0B92C", Offset = "0xA0B92C", VA = "0xA0B92C")]
	public InspectorCommentAttribute(string message = "")
	{
	}
}
[Token(Token = "0x2000069")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x945088", Offset = "0x945088", VA = "0x945088")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x9450F8", Offset = "0x9450F8", VA = "0x9450F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x945274", Offset = "0x945274", VA = "0x945274")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x9452D8", Offset = "0x9452D8", VA = "0x9452D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x945134", Offset = "0x945134", VA = "0x945134")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x945394", Offset = "0x945394", VA = "0x945394")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x9453F4", Offset = "0x9453F4", VA = "0x9453F4")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x200006A")]
public class AvatarLayer
{
	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x953CB8", Offset = "0x953CB8", VA = "0x953CB8")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x200006B")]
public class PacketRecordSettings
{
	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x989590", Offset = "0x989590", VA = "0x989590")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x200006C")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x2000269")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xAF0688", Offset = "0xAF0688", VA = "0xAF0688")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x200026A")]
	public enum HandType
	{
		[Token(Token = "0x4000F9F")]
		Right,
		[Token(Token = "0x4000FA0")]
		Left,
		[Token(Token = "0x4000FA1")]
		Max
	}

	[Token(Token = "0x200026B")]
	public enum HandJoint
	{
		[Token(Token = "0x4000FA3")]
		HandBase,
		[Token(Token = "0x4000FA4")]
		IndexBase,
		[Token(Token = "0x4000FA5")]
		IndexTip,
		[Token(Token = "0x4000FA6")]
		ThumbBase,
		[Token(Token = "0x4000FA7")]
		ThumbTip,
		[Token(Token = "0x4000FA8")]
		Max
	}

	[Token(Token = "0x200026C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404DC", Offset = "0x7404DC")]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x17000153")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xAF2800", Offset = "0xAF2800", VA = "0xAF2800", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xAF2868", Offset = "0xAF2868", VA = "0xAF2868", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xAF2240", Offset = "0xAF2240", VA = "0xAF2240")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xAF2670", Offset = "0xAF2670", VA = "0xAF2670", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xAF2674", Offset = "0xAF2674", VA = "0xAF2674", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xAF2808", Offset = "0xAF2808", VA = "0xAF2808", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742AA8", Offset = "0x742AA8")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742AE0", Offset = "0x742AE0")]
	public bool EnableBody;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742B18", Offset = "0x742B18")]
	public bool RecordPackets;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742B50", Offset = "0x742B50")]
	public bool StartWithControllers;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742B88", Offset = "0x742B88")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742B88", Offset = "0x742B88")]
	[SerializeField]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742BF8", Offset = "0x742BF8")]
	private bool CombineMeshes;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742C30", Offset = "0x742C30")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742C68", Offset = "0x742C68")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x742CA0", Offset = "0x742CA0")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742CD8", Offset = "0x742CD8")]
	public bool EnableLaughter;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x40002C4")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x40002C6")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x40002C7")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x40002C8")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x40002C9")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x40002CA")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xAED778", Offset = "0xAED778", VA = "0xAED778")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xAEDAE0", Offset = "0xAEDAE0", VA = "0xAEDAE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xAEDB68", Offset = "0xAEDB68", VA = "0xAEDB68")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xAEDBD4", Offset = "0xAEDBD4", VA = "0xAEDBD4")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xAEDCF4", Offset = "0xAEDCF4", VA = "0xAEDCF4")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xAEDDD8", Offset = "0xAEDDD8", VA = "0xAEDDD8")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xAEDEB8", Offset = "0xAEDEB8", VA = "0xAEDEB8")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xAEE0A0", Offset = "0xAEE0A0", VA = "0xAEE0A0")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xAEE168", Offset = "0xAEE168", VA = "0xAEE168")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xAE2CDC", Offset = "0xAE2CDC", VA = "0xAE2CDC")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xAE88AC", Offset = "0xAE88AC", VA = "0xAE88AC")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xAEE1EC", Offset = "0xAEE1EC", VA = "0xAEE1EC")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xAEE308", Offset = "0xAEE308", VA = "0xAEE308")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xAEE368", Offset = "0xAEE368", VA = "0xAEE368")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x60003DA")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xAEE7BC", Offset = "0xAEE7BC", VA = "0xAEE7BC")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xAEEB0C", Offset = "0xAEEB0C", VA = "0xAEEB0C")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xAEEC70", Offset = "0xAEEC70", VA = "0xAEEC70")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xAEEF38", Offset = "0xAEEF38", VA = "0xAEEF38")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xAEF024", Offset = "0xAEF024", VA = "0xAEF024")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xAEF3C4", Offset = "0xAEF3C4", VA = "0xAEF3C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xAEF738", Offset = "0xAEF738", VA = "0xAEF738")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xAF0134", Offset = "0xAF0134", VA = "0xAF0134")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xAF0188", Offset = "0xAF0188", VA = "0xAF0188")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xAEF294", Offset = "0xAEF294", VA = "0xAEF294")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xAEF32C", Offset = "0xAEF32C", VA = "0xAEF32C")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xAF01B8", Offset = "0xAF01B8", VA = "0xAF01B8")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xAEFAA4", Offset = "0xAEFAA4", VA = "0xAEFAA4")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xAF03F0", Offset = "0xAF03F0", VA = "0xAF03F0")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xAF0220", Offset = "0xAF0220", VA = "0xAF0220")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xAF0704", Offset = "0xAF0704", VA = "0xAF0704")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xAF0AF0", Offset = "0xAF0AF0", VA = "0xAF0AF0")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xAF0D20", Offset = "0xAF0D20", VA = "0xAF0D20")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xAF0E5C", Offset = "0xAF0E5C", VA = "0xAF0E5C")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xAF1014", Offset = "0xAF1014", VA = "0xAF1014")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xAEFC34", Offset = "0xAEFC34", VA = "0xAEFC34")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xAF10EC", Offset = "0xAF10EC", VA = "0xAF10EC")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xAEFAB4", Offset = "0xAEFAB4", VA = "0xAEFAB4")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xAF11E0", Offset = "0xAF11E0", VA = "0xAF11E0")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xAF178C", Offset = "0xAF178C", VA = "0xAF178C")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xAF1C48", Offset = "0xAF1C48", VA = "0xAF1C48")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xAF1CC0", Offset = "0xAF1CC0", VA = "0xAF1CC0")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xAF1D3C", Offset = "0xAF1D3C", VA = "0xAF1D3C")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xAEFFCC", Offset = "0xAEFFCC", VA = "0xAEFFCC")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xAF129C", Offset = "0xAF129C", VA = "0xAF129C")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xAF21D0", Offset = "0xAF21D0", VA = "0xAF21D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745C2C", Offset = "0x745C2C")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xAF226C", Offset = "0xAF226C", VA = "0xAF226C")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xAF2074", Offset = "0xAF2074", VA = "0xAF2074")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xAF2334", Offset = "0xAF2334", VA = "0xAF2334")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xAF241C", Offset = "0xAF241C", VA = "0xAF241C")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xAF1E0C", Offset = "0xAF1E0C", VA = "0xAF1E0C")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xAF2504", Offset = "0xAF2504", VA = "0xAF2504")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x200006D")]
public class OvrAvatarAsset
{
	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xAF2870", Offset = "0xAF2870", VA = "0xAF2870")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x200006E")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xAF291C", Offset = "0xAF291C", VA = "0xAF291C")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xAF3BC8", Offset = "0xAF3BC8", VA = "0xAF3BC8")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xAF3778", Offset = "0xAF3778", VA = "0xAF3778")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xAF3544", Offset = "0xAF3544", VA = "0xAF3544")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xAF360C", Offset = "0xAF360C", VA = "0xAF360C")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xAF3E24", Offset = "0xAF3E24", VA = "0xAF3E24")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x200006F")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x40002E7")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x97BD6C", Offset = "0x97BD6C", VA = "0x97BD6C")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x2000070")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x97BFD4", Offset = "0x97BFD4", VA = "0x97BFD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x97C3D4", Offset = "0x97C3D4", VA = "0x97C3D4")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x2000071")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x97C4D0", Offset = "0x97C4D0", VA = "0x97C4D0")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x97C62C", Offset = "0x97C62C", VA = "0x97C62C")]
	private void Update()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x97C748", Offset = "0x97C748", VA = "0x97C748")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x2000072")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x97C7AC", Offset = "0x97C7AC", VA = "0x97C7AC")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x97C0F0", Offset = "0x97C0F0", VA = "0x97C0F0")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x97CD90", Offset = "0x97CD90", VA = "0x97CD90")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x97CDF0", Offset = "0x97CDF0", VA = "0x97CDF0")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x97D5D4", Offset = "0x97D5D4", VA = "0x97D5D4")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x97C438", Offset = "0x97C438", VA = "0x97C438")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x2000073")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x200026D")]
	public enum PacketMode
	{
		[Token(Token = "0x4000FAD")]
		SDK,
		[Token(Token = "0x4000FAE")]
		Unity
	}

	[Token(Token = "0x200026E")]
	public struct ControllerPose
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x97ECA4", Offset = "0x97ECA4", VA = "0x97ECA4")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x200026F")]
	public struct PoseFrame
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x97EE00", Offset = "0x97EE00", VA = "0x97EE00")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x97E8D0", Offset = "0x97E8D0", VA = "0x97E8D0")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x6000415")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x97E8E0", Offset = "0x97E8E0", VA = "0x97E8E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x97E980", Offset = "0x97E980", VA = "0x97E980")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x97EBF8", Offset = "0x97EBF8", VA = "0x97EBF8")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x97EC94", Offset = "0x97EC94", VA = "0x97EC94")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x2000074")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x97F1B8", Offset = "0x97F1B8", VA = "0x97F1B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x97F314", Offset = "0x97F314", VA = "0x97F314")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x2000075")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 centerEyePosition;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x97F380", Offset = "0x97F380", VA = "0x97F380")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x97F4EC", Offset = "0x97F4EC", VA = "0x97F4EC")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x97F890", Offset = "0x97F890", VA = "0x97F890")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x97FB5C", Offset = "0x97FB5C", VA = "0x97FB5C", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x97FB88", Offset = "0x97FB88", VA = "0x97FB88")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x2000076")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x2000270")]
	public enum TextureType
	{
		[Token(Token = "0x4000FBF")]
		DiffuseTextures,
		[Token(Token = "0x4000FC0")]
		NormalMaps,
		[Token(Token = "0x4000FC1")]
		RoughnessMaps,
		[Token(Token = "0x4000FC2")]
		Count
	}

	[Token(Token = "0x2000271")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x2000272")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x2000273")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x2000274")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x981DA8", Offset = "0x981DA8", VA = "0x981DA8")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x2000275")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404EC", Offset = "0x7404EC")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x17000155")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0x9826B8", Offset = "0x9826B8", VA = "0x9826B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0x982720", Offset = "0x982720", VA = "0x982720", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x981C10", Offset = "0x981C10", VA = "0x981C10")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x982040", Offset = "0x982040", VA = "0x982040", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x982044", Offset = "0x982044", VA = "0x982044", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x9826C0", Offset = "0x9826C0", VA = "0x9826C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x400031B")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x400031C")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x400031D")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x400031E")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x97FC38", Offset = "0x97FC38", VA = "0x97FC38")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x97FD98", Offset = "0x97FD98", VA = "0x97FD98")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x97FDC0", Offset = "0x97FDC0", VA = "0x97FDC0")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x9804D8", Offset = "0x9804D8", VA = "0x9804D8")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x980758", Offset = "0x980758", VA = "0x980758")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x97FE54", Offset = "0x97FE54", VA = "0x97FE54")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x980848", Offset = "0x980848", VA = "0x980848")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x980254", Offset = "0x980254", VA = "0x980254")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x980AB0", Offset = "0x980AB0", VA = "0x980AB0")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x980D28", Offset = "0x980D28", VA = "0x980D28")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x980E24", Offset = "0x980E24", VA = "0x980E24")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x980E5C", Offset = "0x980E5C", VA = "0x980E5C")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x98045C", Offset = "0x98045C", VA = "0x98045C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745C90", Offset = "0x745C90")]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x981C3C", Offset = "0x981C3C", VA = "0x981C3C")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x2000077")]
public class OvrAvatarMeshInstance : MonoBehaviour
{
	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HashSet<ulong> AssetsToLoad;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ulong MeshID;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ulong MaterialID;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ulong FadeTextureID;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarBodyPartType MeshType;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ovrAvatarMaterialState MaterialState;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private MeshFilter Mesh;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private MeshRenderer MeshInstance;

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x982728", Offset = "0x982728", VA = "0x982728")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x983208", Offset = "0x983208", VA = "0x983208")]
	public void SetMeshAssets(ulong fadeTexture, ulong meshID, ulong materialID, ovrAvatarBodyPartType type)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x9827CC", Offset = "0x9827CC", VA = "0x9827CC")]
	private void HandleAssetAvailable(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x983450", Offset = "0x983450", VA = "0x983450")]
	public void ChangeMaterial(ulong assetID)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x9832BC", Offset = "0x9832BC", VA = "0x9832BC")]
	private void RequestAsset(ulong assetID)
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x9833B4", Offset = "0x9833B4", VA = "0x9833B4")]
	private void RequestMaterialTextures()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x983574", Offset = "0x983574", VA = "0x983574")]
	public void SetActive(bool active)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x982998", Offset = "0x982998", VA = "0x982998")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x9835C4", Offset = "0x9835C4", VA = "0x9835C4")]
	public OvrAvatarMeshInstance()
	{
	}
}
[Token(Token = "0x2000078")]
public class OvrAvatarPacket
{
	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x17000097")]
	public float Duration
	{
		[Token(Token = "0x6000439")]
		[Address(RVA = "0x9835CC", Offset = "0x9835CC", VA = "0x9835CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000098")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x600043A")]
		[Address(RVA = "0x983638", Offset = "0x983638", VA = "0x983638")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x9836BC", Offset = "0x9836BC", VA = "0x9836BC")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x983780", Offset = "0x983780", VA = "0x983780")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x9838C0", Offset = "0x9838C0", VA = "0x9838C0")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x98399C", Offset = "0x98399C", VA = "0x98399C")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x983A6C", Offset = "0x983A6C", VA = "0x983A6C")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x983C74", Offset = "0x983C74", VA = "0x983C74")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x983ECC", Offset = "0x983ECC", VA = "0x983ECC")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x2000079")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x6000442")]
	[Address(RVA = "0x954160", Offset = "0x954160", VA = "0x954160")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x954274", Offset = "0x954274", VA = "0x954274")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x954420", Offset = "0x954420", VA = "0x954420")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x9542E4", Offset = "0x9542E4", VA = "0x9542E4")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x954378", Offset = "0x954378", VA = "0x954378")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x200007A")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x6000447")]
	[Address(RVA = "0x953D60", Offset = "0x953D60", VA = "0x953D60")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x954104", Offset = "0x954104", VA = "0x954104")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x953F00", Offset = "0x953F00", VA = "0x953F00")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x953F78", Offset = "0x953F78", VA = "0x953F78")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x954014", Offset = "0x954014", VA = "0x954014")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x200007B")]
public class OvrAvatarProjectorRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material material;

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x9840BC", Offset = "0x9840BC", VA = "0x9840BC")]
	internal void InitializeProjectorRender(ovrAvatarRenderPart_ProjectorRender render, Shader shader, OvrAvatarRenderComponent target)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x984380", Offset = "0x984380", VA = "0x984380")]
	internal void UpdateProjectorRender(OvrAvatarComponent component, ovrAvatarRenderPart_ProjectorRender render)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x9844E8", Offset = "0x9844E8", VA = "0x9844E8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x984A64", Offset = "0x984A64", VA = "0x984A64")]
	public OvrAvatarProjectorRenderComponent()
	{
	}
}
[Token(Token = "0x200007C")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x400032F")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x4000330")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x984A84", Offset = "0x984A84", VA = "0x984A84")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x984B10", Offset = "0x984B10", VA = "0x984B10", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x984B2C", Offset = "0x984B2C", VA = "0x984B2C")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x984CD8", Offset = "0x984CD8", VA = "0x984CD8")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x984E80", Offset = "0x984E80", VA = "0x984E80")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x200007D")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x984F00", Offset = "0x984F00", VA = "0x984F00")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x984FE4", Offset = "0x984FE4", VA = "0x984FE4")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x9851DC", Offset = "0x9851DC", VA = "0x9851DC")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x984288", Offset = "0x984288", VA = "0x984288")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x984A74", Offset = "0x984A74", VA = "0x984A74")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x200007E")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x4000339")]
	Body = 1,
	[Token(Token = "0x400033A")]
	Hands = 2,
	[Token(Token = "0x400033B")]
	Base = 4,
	[Token(Token = "0x400033C")]
	BodyTilt = 0x10,
	[Token(Token = "0x400033D")]
	Expressive = 0x20,
	[Token(Token = "0x400033E")]
	All = -1
}
[Token(Token = "0x200007F")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x4000340")]
	AvatarSpecification,
	[Token(Token = "0x4000341")]
	AssetLoaded,
	[Token(Token = "0x4000342")]
	Count
}
[Token(Token = "0x2000080")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x2000081")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x2000082")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x4000348")]
	Mesh,
	[Token(Token = "0x4000349")]
	Texture,
	[Token(Token = "0x400034A")]
	Pose,
	[Token(Token = "0x400034B")]
	Material,
	[Token(Token = "0x400034C")]
	CombinedMesh,
	[Token(Token = "0x400034D")]
	PBSMaterial,
	[Token(Token = "0x400034E")]
	FailedLoad,
	[Token(Token = "0x400034F")]
	Count
}
[Token(Token = "0x2000083")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x2000084")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x2000085")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x2000086")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000087")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000088")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x4000384")]
	RGB24,
	[Token(Token = "0x4000385")]
	DXT1,
	[Token(Token = "0x4000386")]
	DXT5,
	[Token(Token = "0x4000387")]
	ASTC_RGB_6x6,
	[Token(Token = "0x4000388")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x4000389")]
	Count
}
[Token(Token = "0x2000089")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x200008A")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x4000391")]
	SkinnedMeshRender,
	[Token(Token = "0x4000392")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x4000393")]
	ProjectorRender,
	[Token(Token = "0x4000394")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x4000395")]
	Count
}
[Token(Token = "0x200008B")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x4000397")]
	Unknown,
	[Token(Token = "0x4000398")]
	Default,
	[Token(Token = "0x4000399")]
	Verbose,
	[Token(Token = "0x400039A")]
	Debug,
	[Token(Token = "0x400039B")]
	Info,
	[Token(Token = "0x400039C")]
	Warn,
	[Token(Token = "0x400039D")]
	Error,
	[Token(Token = "0x400039E")]
	Fatal,
	[Token(Token = "0x400039F")]
	Silent
}
[Token(Token = "0x200008C")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Token(Token = "0x200008D")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x40003A4")]
	One = 1,
	[Token(Token = "0x40003A5")]
	Two = 2,
	[Token(Token = "0x40003A6")]
	Three = 4,
	[Token(Token = "0x40003A7")]
	Joystick = 8
}
[Token(Token = "0x200008E")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x40003A9")]
	One = 1,
	[Token(Token = "0x40003AA")]
	Two = 2,
	[Token(Token = "0x40003AB")]
	Joystick = 4,
	[Token(Token = "0x40003AC")]
	ThumbRest = 8,
	[Token(Token = "0x40003AD")]
	Index = 0x10,
	[Token(Token = "0x40003AE")]
	Pointing = 0x40,
	[Token(Token = "0x40003AF")]
	ThumbUp = 0x80
}
[Token(Token = "0x200008F")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x2000090")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x2000091")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x2000092")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000093")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000094")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x2000095")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000096")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000097")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x40003CF")]
	Add,
	[Token(Token = "0x40003D0")]
	Multiply,
	[Token(Token = "0x40003D1")]
	Count
}
[Token(Token = "0x2000098")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x40003D3")]
	Color,
	[Token(Token = "0x40003D4")]
	Texture,
	[Token(Token = "0x40003D5")]
	TextureSingleChannel,
	[Token(Token = "0x40003D6")]
	Parallax,
	[Token(Token = "0x40003D7")]
	Count
}
[Token(Token = "0x2000099")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x40003D9")]
	None,
	[Token(Token = "0x40003DA")]
	Positional,
	[Token(Token = "0x40003DB")]
	ViewReflection,
	[Token(Token = "0x40003DC")]
	Fresnel,
	[Token(Token = "0x40003DD")]
	Pulse,
	[Token(Token = "0x40003DE")]
	Count
}
[Token(Token = "0x200009A")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x40003E0")]
	Touch,
	[Token(Token = "0x40003E1")]
	Malibu,
	[Token(Token = "0x40003E2")]
	Go,
	[Token(Token = "0x40003E3")]
	Quest,
	[Token(Token = "0x40003E4")]
	Count
}
[Token(Token = "0x200009B")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x40003E6")]
	Lowest = 1,
	[Token(Token = "0x40003E7")]
	Medium = 3,
	[Token(Token = "0x40003E8")]
	Highest = 5
}
[Token(Token = "0x200009C")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x40003EA")]
	Unknown = -1,
	[Token(Token = "0x40003EB")]
	One,
	[Token(Token = "0x40003EC")]
	Two
}
[Token(Token = "0x200009D")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xEC1EF0", Offset = "0xEC1EF0", VA = "0xEC1EF0")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x7D7F4C", Offset = "0x7D7F4C", VA = "0x7D7F4C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x7D7F54", Offset = "0x7D7F54", VA = "0x7D7F54", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200009E")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xEC2224", Offset = "0xEC2224", VA = "0xEC2224")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x7D818C", Offset = "0x7D818C", VA = "0x7D818C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x7D8194", Offset = "0x7D8194", VA = "0x7D8194", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200009F")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xEC1598", Offset = "0xEC1598", VA = "0xEC1598")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x7D7C94", Offset = "0x7D7C94", VA = "0x7D7C94", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x7D7C9C", Offset = "0x7D7C9C", VA = "0x7D7C9C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000A0")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xEC2750", Offset = "0xEC2750", VA = "0xEC2750")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x7D8A14", Offset = "0x7D8A14", VA = "0x7D8A14", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x7D8A1C", Offset = "0x7D8A1C", VA = "0x7D8A1C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000A1")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xAF2878", Offset = "0xAF2878", VA = "0xAF2878")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x20000A2")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x20000A3")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x4000421")]
	FirstPerson = 1,
	[Token(Token = "0x4000422")]
	ThirdPerson = 2,
	[Token(Token = "0x4000423")]
	SelfOccluding = 4
}
[Token(Token = "0x20000A4")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000A5")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000A6")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x20000A7")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000A8")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x4000439")]
	Default,
	[Token(Token = "0x400043A")]
	GripSphere,
	[Token(Token = "0x400043B")]
	GripCube,
	[Token(Token = "0x400043C")]
	Count
}
[Token(Token = "0x20000A9")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x400043E")]
	Body,
	[Token(Token = "0x400043F")]
	Clothing,
	[Token(Token = "0x4000440")]
	Eyewear,
	[Token(Token = "0x4000441")]
	Hair,
	[Token(Token = "0x4000442")]
	Beard,
	[Token(Token = "0x4000443")]
	Count
}
[Token(Token = "0x20000AA")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x20000AB")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x20000AC")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x20000AD")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x20000AE")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x400044D")]
	AvatarHead,
	[Token(Token = "0x400044E")]
	AvatarHand,
	[Token(Token = "0x400044F")]
	Object,
	[Token(Token = "0x4000450")]
	ObjectStatic,
	[Token(Token = "0x4000451")]
	Count
}
[Token(Token = "0x20000AF")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x20000B0")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x20000B1")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x20000B2")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x20000B3")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x400045D")]
	Point,
	[Token(Token = "0x400045E")]
	Direction,
	[Token(Token = "0x400045F")]
	Spot,
	[Token(Token = "0x4000460")]
	Count
}
[Token(Token = "0x20000B4")]
public struct ovrAvatarLight
{
	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x20000B5")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x20000B6")]
public struct ovrAvatarLights
{
	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x20000B7")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x20000B8")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x4000476")]
	None = 0u,
	[Token(Token = "0x4000477")]
	GazeTarget = 1u,
	[Token(Token = "0x4000478")]
	Any = uint.MaxValue
}
[Token(Token = "0x20000B9")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 startPoint;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 endPoint;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 color;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x20000BA")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x20000BB")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x20000BC")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x20000BD")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x20000BE")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x2000276")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x7C55F8", Offset = "0x7C55F8", VA = "0x7C55F8")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x400048D")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x17000099")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x600047B")]
		[Address(RVA = "0x97D668", Offset = "0x97D668", VA = "0x97D668")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x985570", Offset = "0x985570", VA = "0x985570")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x9857BC", Offset = "0x9857BC", VA = "0x9857BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x985830", Offset = "0x985830", VA = "0x985830")]
	private void Update()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x986080", Offset = "0x986080", VA = "0x986080")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x9860D8", Offset = "0x9860D8", VA = "0x9860D8")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x986130", Offset = "0x986130", VA = "0x986130")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x986198", Offset = "0x986198", VA = "0x986198")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x986200", Offset = "0x986200", VA = "0x986200")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x985EB8", Offset = "0x985EB8", VA = "0x985EB8")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x983458", Offset = "0x983458", VA = "0x983458")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x9862E0", Offset = "0x9862E0", VA = "0x9862E0")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x97D7F8", Offset = "0x97D7F8", VA = "0x97D7F8")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x9863C0", Offset = "0x9863C0", VA = "0x9863C0")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x985770", Offset = "0x985770", VA = "0x985770")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x980538", Offset = "0x980538", VA = "0x980538")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x986498", Offset = "0x986498", VA = "0x986498")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x20000BF")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x1700009A")]
	public static string AppID
	{
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x986458", Offset = "0x986458", VA = "0x986458")]
		get
		{
			return null;
		}
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x9865F0", Offset = "0x9865F0", VA = "0x9865F0")]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public static string MobileAppID
	{
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x986478", Offset = "0x986478", VA = "0x986478")]
		get
		{
			return null;
		}
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x98661C", Offset = "0x98661C", VA = "0x98661C")]
		set
		{
		}
	}

	[Token(Token = "0x1700009C")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x9864DC", Offset = "0x9864DC", VA = "0x9864DC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x986648", Offset = "0x986648", VA = "0x986648")]
		set
		{
		}
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x98669C", Offset = "0x98669C", VA = "0x98669C")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x20000C0")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x987D78", Offset = "0x987D78", VA = "0x987D78")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x97C7B4", Offset = "0x97C7B4", VA = "0x97C7B4")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x987EBC", Offset = "0x987EBC", VA = "0x987EBC")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x98801C", Offset = "0x98801C", VA = "0x98801C")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x20000C1")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x98802C", Offset = "0x98802C", VA = "0x98802C")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x97C9DC", Offset = "0x97C9DC", VA = "0x97C9DC")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x98815C", Offset = "0x98815C", VA = "0x98815C")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x20000C2")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x400049C")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x400049D")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x400049E")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x9866F4", Offset = "0x9866F4", VA = "0x9866F4")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x97CB74", Offset = "0x97CB74", VA = "0x97CB74")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x987534", Offset = "0x987534", VA = "0x987534")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x986CC8", Offset = "0x986CC8", VA = "0x986CC8")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x986A98", Offset = "0x986A98", VA = "0x986A98")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x986BAC", Offset = "0x986BAC", VA = "0x986BAC")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x987D68", Offset = "0x987D68", VA = "0x987D68")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x20000C3")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000277")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x2000278")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x7C5660", Offset = "0x7C5660", VA = "0x7C5660")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x2000279")]
	public struct TextureSet
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x7C56E8", Offset = "0x7C56E8", VA = "0x7C56E8")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x200027A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7404FC", Offset = "0x7404FC")]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000157")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x988DE8", Offset = "0x988DE8", VA = "0x988DE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0x988E50", Offset = "0x988E50", VA = "0x988E50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x988784", Offset = "0x988784", VA = "0x988784")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x9888EC", Offset = "0x9888EC", VA = "0x9888EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x9888F0", Offset = "0x9888F0", VA = "0x9888F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x988DF0", Offset = "0x988DF0", VA = "0x988DF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x40004A2")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x40004A3")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x40004A6")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x40004A7")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x40004A8")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x40004A9")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x40004AA")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x40004AB")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x40004AC")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x98816C", Offset = "0x98816C", VA = "0x98816C")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x9884C8", Offset = "0x9884C8", VA = "0x9884C8")]
	public void Update()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x982668", Offset = "0x982668", VA = "0x982668")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x98092C", Offset = "0x98092C", VA = "0x98092C")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x988640", Offset = "0x988640", VA = "0x988640")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x9805BC", Offset = "0x9805BC", VA = "0x9805BC")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x9807A0", Offset = "0x9807A0", VA = "0x9807A0")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x9886F0", Offset = "0x9886F0", VA = "0x9886F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x745D94", Offset = "0x745D94")]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x986294", Offset = "0x986294", VA = "0x986294")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x9887B0", Offset = "0x9887B0", VA = "0x9887B0")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x20000C4")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x988E58", Offset = "0x988E58", VA = "0x988E58")]
	private void Update()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x988FB4", Offset = "0x988FB4", VA = "0x988FB4")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x20000C5")]
public class EnableSwitch : MonoBehaviour
{
	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SwitchTargets;

	[Token(Token = "0x60004AD")]
	public bool SetActive<T>(int target) where T : MonoBehaviour
	{
		return default(bool);
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x93E018", Offset = "0x93E018", VA = "0x93E018")]
	public EnableSwitch()
	{
	}
}
[Token(Token = "0x20000C6")]
public class LipSyncDemo_Control : MonoBehaviour
{
	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742D30", Offset = "0x742D30")]
	public KeyCode rotateLeftKey;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742D68", Offset = "0x742D68")]
	public KeyCode rotateRightKey;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742DA0", Offset = "0x742DA0")]
	public KeyCode resetRotationKey;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float resetRotation;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationAmount;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationMax;

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xA0CACC", Offset = "0xA0CACC", VA = "0xA0CACC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xA0CAD0", Offset = "0xA0CAD0", VA = "0xA0CAD0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xA0CB50", Offset = "0xA0CB50", VA = "0xA0CB50")]
	private void RotateObject(float amountDegrees, bool absolute = false)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xA0CD3C", Offset = "0xA0CD3C", VA = "0xA0CD3C")]
	public LipSyncDemo_Control()
	{
	}
}
[Token(Token = "0x20000C7")]
public class LipSyncDemo_SetCurrentTarget : MonoBehaviour
{
	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnableSwitch[] SwitchTargets;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int targetSet;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int maxTarget;

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xA0CD6C", Offset = "0xA0CD6C", VA = "0xA0CD6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xA0CE70", Offset = "0xA0CE70", VA = "0xA0CE70")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xA0CF44", Offset = "0xA0CF44", VA = "0xA0CF44")]
	private void SetCurrentTarget()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xA0D1D0", Offset = "0xA0D1D0", VA = "0xA0D1D0")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xA0D220", Offset = "0xA0D220", VA = "0xA0D220")]
	public LipSyncDemo_SetCurrentTarget()
	{
	}
}
[Token(Token = "0x20000C8")]
public class OVRLipSyncDebugConsole : MonoBehaviour
{
	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrayList messages;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMessages;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text textMsg;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRLipSyncDebugConsole s_Instance;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool clearTimeoutOn;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float clearTimeout;

	[Token(Token = "0x1700009D")]
	public static OVRLipSyncDebugConsole instance
	{
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xADF840", Offset = "0xADF840", VA = "0xADF840")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xADFAF8", Offset = "0xADFAF8", VA = "0xADFAF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xADFC34", Offset = "0xADFC34", VA = "0xADFC34")]
	private void Update()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xADFB68", Offset = "0xADFB68", VA = "0xADFB68")]
	public void Init()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xADDA58", Offset = "0xADDA58", VA = "0xADDA58")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xADFDBC", Offset = "0xADFDBC", VA = "0xADFDBC")]
	public static void Log(string message, Color color)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xADD9F0", Offset = "0xADD9F0", VA = "0xADD9F0")]
	public static void Clear()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xADDAD8", Offset = "0xADDAD8", VA = "0xADDAD8")]
	public static void ClearTimeout(float timeToClear)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xADFCCC", Offset = "0xADFCCC", VA = "0xADFCCC")]
	public void AddMessage(string message, Color color)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xADFE5C", Offset = "0xADFE5C", VA = "0xADFE5C")]
	public void ClearMessages()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xADFE98", Offset = "0xADFE98", VA = "0xADFE98")]
	public void SetClearTimeout(float timeout)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xAE008C", Offset = "0xAE008C", VA = "0xAE008C")]
	private void Prune()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xADFEA8", Offset = "0xADFEA8", VA = "0xADFEA8")]
	private void Display()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xAE013C", Offset = "0xAE013C", VA = "0xAE013C")]
	public OVRLipSyncDebugConsole()
	{
	}
}
[Token(Token = "0x20000C9")]
public class OVRNamedArrayAttribute : PropertyAttribute
{
	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string[] names;

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xAE0C00", Offset = "0xAE0C00", VA = "0xAE0C00")]
	public OVRNamedArrayAttribute(string[] names)
	{
	}
}
[Token(Token = "0x20000CA")]
public static class OVRTouchpad
{
	[Token(Token = "0x200027B")]
	public enum TouchEvent
	{
		[Token(Token = "0x4000FF5")]
		SingleTap,
		[Token(Token = "0x4000FF6")]
		DoubleTap,
		[Token(Token = "0x4000FF7")]
		Left,
		[Token(Token = "0x4000FF8")]
		Right,
		[Token(Token = "0x4000FF9")]
		Up,
		[Token(Token = "0x4000FFA")]
		Down
	}

	[Token(Token = "0x200027C")]
	public delegate void OVRTouchpadCallback<TouchEvent>(TouchEvent arg);

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 moveAmountMouse;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float minMovMagnitudeMouse;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Delegate touchPadCallbacks;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRTouchpadHelper touchpadHelper;

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xADC66C", Offset = "0xADC66C", VA = "0xADC66C")]
	public static void Create()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xAE0C2C", Offset = "0xAE0C2C", VA = "0xAE0C2C")]
	public static void Update()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xAE0F4C", Offset = "0xAE0F4C", VA = "0xAE0F4C")]
	public static void OnDisable()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xAE0D9C", Offset = "0xAE0D9C", VA = "0xAE0D9C")]
	private static void HandleInputMouse(ref Vector3 move)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xADD54C", Offset = "0xADD54C", VA = "0xADD54C")]
	public static void AddListener(OVRTouchpadCallback<TouchEvent> handler)
	{
	}
}
[Token(Token = "0x20000CB")]
public sealed class OVRTouchpadHelper : MonoBehaviour
{
	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xAE0FFC", Offset = "0xAE0FFC", VA = "0xAE0FFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xAE1078", Offset = "0xAE1078", VA = "0xAE1078")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xAE1110", Offset = "0xAE1110", VA = "0xAE1110")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xAE116C", Offset = "0xAE116C", VA = "0xAE116C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xAE11D0", Offset = "0xAE11D0", VA = "0xAE11D0")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xAE11D4", Offset = "0xAE11D4", VA = "0xAE11D4")]
	public OVRTouchpadHelper()
	{
	}
}
[Token(Token = "0x20000CC")]
public class OVRLipSync : MonoBehaviour
{
	[Token(Token = "0x200027D")]
	public enum Result
	{
		[Token(Token = "0x4000FFC")]
		Success = 0,
		[Token(Token = "0x4000FFD")]
		Unknown = -2200,
		[Token(Token = "0x4000FFE")]
		CannotCreateContext = -2201,
		[Token(Token = "0x4000FFF")]
		InvalidParam = -2202,
		[Token(Token = "0x4001000")]
		BadSampleRate = -2203,
		[Token(Token = "0x4001001")]
		MissingDLL = -2204,
		[Token(Token = "0x4001002")]
		BadVersion = -2205,
		[Token(Token = "0x4001003")]
		UndefinedFunction = -2206
	}

	[Token(Token = "0x200027E")]
	public enum AudioDataType
	{
		[Token(Token = "0x4001005")]
		S16_Mono,
		[Token(Token = "0x4001006")]
		S16_Stereo,
		[Token(Token = "0x4001007")]
		F32_Mono,
		[Token(Token = "0x4001008")]
		F32_Stereo
	}

	[Token(Token = "0x200027F")]
	public enum Viseme
	{
		[Token(Token = "0x400100A")]
		sil,
		[Token(Token = "0x400100B")]
		PP,
		[Token(Token = "0x400100C")]
		FF,
		[Token(Token = "0x400100D")]
		TH,
		[Token(Token = "0x400100E")]
		DD,
		[Token(Token = "0x400100F")]
		kk,
		[Token(Token = "0x4001010")]
		CH,
		[Token(Token = "0x4001011")]
		SS,
		[Token(Token = "0x4001012")]
		nn,
		[Token(Token = "0x4001013")]
		RR,
		[Token(Token = "0x4001014")]
		aa,
		[Token(Token = "0x4001015")]
		E,
		[Token(Token = "0x4001016")]
		ih,
		[Token(Token = "0x4001017")]
		oh,
		[Token(Token = "0x4001018")]
		ou
	}

	[Token(Token = "0x2000280")]
	public enum Signals
	{
		[Token(Token = "0x400101A")]
		VisemeOn,
		[Token(Token = "0x400101B")]
		VisemeOff,
		[Token(Token = "0x400101C")]
		VisemeAmount,
		[Token(Token = "0x400101D")]
		VisemeSmoothing,
		[Token(Token = "0x400101E")]
		LaughterAmount
	}

	[Token(Token = "0x2000281")]
	public enum ContextProviders
	{
		[Token(Token = "0x4001020")]
		Original,
		[Token(Token = "0x4001021")]
		Enhanced,
		[Token(Token = "0x4001022")]
		Enhanced_with_Laughter
	}

	[Serializable]
	[Token(Token = "0x2000282")]
	public class Frame
	{
		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameNumber;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int frameDelay;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] Visemes;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float laughterScore;

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xADD2B4", Offset = "0xADD2B4", VA = "0xADD2B4")]
		public void CopyInput(Frame input)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xADD30C", Offset = "0xADD30C", VA = "0xADD30C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xADD39C", Offset = "0xADD39C", VA = "0xADD39C")]
		public Frame()
		{
		}
	}

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int VisemeCount;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int SignalCount;

	[Token(Token = "0x40004C6")]
	public const string strOVRLS = "OVRLipSync";

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Result sInitialized;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static OVRLipSync sInstance;

	[PreserveSig]
	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xADBC3C", Offset = "0xADBC3C", VA = "0xADBC3C")]
	private static extern int ovrLipSyncDll_Initialize(int samplerate, int buffersize);

	[PreserveSig]
	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xADBCCC", Offset = "0xADBCCC", VA = "0xADBCCC")]
	private static extern void ovrLipSyncDll_Shutdown();

	[PreserveSig]
	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xADBD3C", Offset = "0xADBD3C", VA = "0xADBD3C")]
	private static extern IntPtr ovrLipSyncDll_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[PreserveSig]
	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xADBDD0", Offset = "0xADBDD0", VA = "0xADBDD0")]
	private static extern int ovrLipSyncDll_CreateContextEx(ref uint context, ContextProviders provider, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xADBE78", Offset = "0xADBE78", VA = "0xADBE78")]
	private static extern int ovrLipSyncDll_CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xADBF44", Offset = "0xADBF44", VA = "0xADBF44")]
	private static extern int ovrLipSyncDll_DestroyContext(uint context);

	[PreserveSig]
	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xADBFC4", Offset = "0xADBFC4", VA = "0xADBFC4")]
	private static extern int ovrLipSyncDll_ResetContext(uint context);

	[PreserveSig]
	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xADC044", Offset = "0xADC044", VA = "0xADC044")]
	private static extern int ovrLipSyncDll_SendSignal(uint context, Signals signal, int arg1, int arg2);

	[PreserveSig]
	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xADC0EC", Offset = "0xADC0EC", VA = "0xADC0EC")]
	private static extern int ovrLipSyncDll_ProcessFrameEx(uint context, IntPtr audioBuffer, uint bufferSize, AudioDataType dataType, ref int frameNumber, ref int frameDelay, float[] visemes, int visemeCount, ref float laughterScore, float[] laughterCategories, int laughterCategoriesLength);

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xADC1F4", Offset = "0xADC1F4", VA = "0xADC1F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xADC670", Offset = "0xADC670", VA = "0xADC670")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xADC534", Offset = "0xADC534", VA = "0xADC534")]
	public static Result Initialize()
	{
		return default(Result);
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xADC750", Offset = "0xADC750", VA = "0xADC750")]
	public static Result Initialize(int sampleRate, int bufferSize)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xADC864", Offset = "0xADC864", VA = "0xADC864")]
	public static void Shutdown()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xADC8D4", Offset = "0xADC8D4", VA = "0xADC8D4")]
	public static Result IsInitialized()
	{
		return default(Result);
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xADC93C", Offset = "0xADC93C", VA = "0xADC93C")]
	public static Result CreateContext(ref uint context, ContextProviders provider, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xADCA60", Offset = "0xADCA60", VA = "0xADCA60")]
	public static Result CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xADCB98", Offset = "0xADCB98", VA = "0xADCB98")]
	public static Result DestroyContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xADCC78", Offset = "0xADCC78", VA = "0xADCC78")]
	public static Result ResetContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xADCD58", Offset = "0xADCD58", VA = "0xADCD58")]
	public static Result SendSignal(uint context, Signals signal, int arg1, int arg2)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xADCE5C", Offset = "0xADCE5C", VA = "0xADCE5C")]
	public static Result ProcessFrame(uint context, float[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xADD000", Offset = "0xADD000", VA = "0xADD000")]
	public static Result ProcessFrame(uint context, short[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xADD19C", Offset = "0xADD19C", VA = "0xADD19C")]
	public OVRLipSync()
	{
	}
}
[Token(Token = "0x20000CD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F68C", Offset = "0x73F68C")]
public class OVRLipSyncContext : OVRLipSyncContextBase
{
	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742DD8", Offset = "0x742DD8")]
	public bool enableKeyboardInput;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742E10", Offset = "0x742E10")]
	public bool enableTouchInput;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742E48", Offset = "0x742E48")]
	public bool audioLoopback;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742E80", Offset = "0x742E80")]
	public KeyCode loopbackKey;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742EB8", Offset = "0x742EB8")]
	public bool showVisemes;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742EF0", Offset = "0x742EF0")]
	public KeyCode debugVisemesKey;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742F28", Offset = "0x742F28")]
	public bool skipAudioSource;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742F60", Offset = "0x742F60")]
	public float gain;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasDebugConsole;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public KeyCode debugLaughterKey;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool showLaughter;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float laughterScore;

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xADD424", Offset = "0xADD424", VA = "0xADD424")]
	private void Start()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xADD60C", Offset = "0xADD60C", VA = "0xADD60C")]
	private void HandleKeyboard()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xADDB58", Offset = "0xADDB58", VA = "0xADDB58")]
	private void Update()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xADDE04", Offset = "0xADDE04", VA = "0xADDE04")]
	public void PreprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xADDE68", Offset = "0xADDE68", VA = "0xADDE68")]
	public void PostprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xADDED4", Offset = "0xADDED4", VA = "0xADDED4")]
	public void ProcessAudioSamplesRaw(float[] data, int channels)
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xADE078", Offset = "0xADE078", VA = "0xADE078")]
	public void ProcessAudioSamplesRaw(short[] data, int channels)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xADE21C", Offset = "0xADE21C", VA = "0xADE21C")]
	public void ProcessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xADE350", Offset = "0xADE350", VA = "0xADE350")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xADDB9C", Offset = "0xADDB9C", VA = "0xADDB9C")]
	private void DebugShowVisemesAndLaughter()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xADD91C", Offset = "0xADD91C", VA = "0xADD91C")]
	private void ToggleAudioLoopback()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xADE360", Offset = "0xADE360", VA = "0xADE360")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xADE48C", Offset = "0xADE48C", VA = "0xADE48C")]
	public OVRLipSyncContext()
	{
	}
}
[Token(Token = "0x20000CE")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F6F0", Offset = "0x73F6F0")]
public class OVRLipSyncContextBase : MonoBehaviour
{
	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742F98", Offset = "0x742F98")]
	public OVRLipSync.ContextProviders provider;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x742FD0", Offset = "0x742FD0")]
	public bool enableAcceleration;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRLipSync.Frame frame;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private uint context;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _smoothing;

	[Token(Token = "0x1700009E")]
	public int Smoothing
	{
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xADE60C", Offset = "0xADE60C", VA = "0xADE60C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xADE520", Offset = "0xADE520", VA = "0xADE520")]
		set
		{
		}
	}

	[Token(Token = "0x1700009F")]
	public uint Context
	{
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xADE614", Offset = "0xADE614", VA = "0xADE614")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000A0")]
	protected OVRLipSync.Frame Frame
	{
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xADE61C", Offset = "0xADE61C", VA = "0xADE61C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xADE624", Offset = "0xADE624", VA = "0xADE624")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xADE7BC", Offset = "0xADE7BC", VA = "0xADE7BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xADE8E0", Offset = "0xADE8E0", VA = "0xADE8E0")]
	public OVRLipSync.Frame GetCurrentPhonemeFrame()
	{
		return null;
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xADE8E8", Offset = "0xADE8E8", VA = "0xADE8E8")]
	public void SetVisemeBlend(int viseme, int amount)
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xADE9DC", Offset = "0xADE9DC", VA = "0xADE9DC")]
	public void SetLaughterBlend(int amount)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xADEAA4", Offset = "0xADEAA4", VA = "0xADEAA4")]
	public OVRLipSync.Result ResetContext()
	{
		return default(OVRLipSync.Result);
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xADE4B0", Offset = "0xADE4B0", VA = "0xADE4B0")]
	public OVRLipSyncContextBase()
	{
	}
}
[Token(Token = "0x20000CF")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F754", Offset = "0x73F754")]
public class OVRLipSyncContextCanned : OVRLipSyncContextBase
{
	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743008", Offset = "0x743008")]
	public OVRLipSyncSequence currentSequence;

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xADEB1C", Offset = "0xADEB1C", VA = "0xADEB1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xADEC8C", Offset = "0xADEC8C", VA = "0xADEC8C")]
	public OVRLipSyncContextCanned()
	{
	}
}
[Token(Token = "0x20000D0")]
public class OVRLipSyncContextMorphTarget : MonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743040", Offset = "0x743040")]
	public SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743078", Offset = "0x743078")]
	public int[] visemeToBlendTargets;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7430B0", Offset = "0x7430B0")]
	public bool enableVisemeTestKeys;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7430E8", Offset = "0x7430E8")]
	public KeyCode[] visemeTestKeys;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743120", Offset = "0x743120")]
	public KeyCode laughterKey;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743158", Offset = "0x743158")]
	public int laughterBlendTarget;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743190", Offset = "0x743190")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743190", Offset = "0x743190")]
	public float laughterThreshold;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7431E4", Offset = "0x7431E4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7431E4", Offset = "0x7431E4")]
	public float laughterMultiplier;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743238", Offset = "0x743238")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743238", Offset = "0x743238")]
	public int smoothAmount;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xADEC90", Offset = "0xADEC90", VA = "0xADEC90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xADEDD4", Offset = "0xADEDD4", VA = "0xADEDD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xADF084", Offset = "0xADF084", VA = "0xADF084")]
	private void CheckForKeys()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xADEEE0", Offset = "0xADEEE0", VA = "0xADEEE0")]
	private void SetVisemeToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xADEF94", Offset = "0xADEF94", VA = "0xADEF94")]
	private void SetLaughterToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xADF154", Offset = "0xADF154", VA = "0xADF154")]
	private void CheckVisemeKey(KeyCode key, int viseme, int amount)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xADF218", Offset = "0xADF218", VA = "0xADF218")]
	private void CheckLaughterKey()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xADF280", Offset = "0xADF280", VA = "0xADF280")]
	public OVRLipSyncContextMorphTarget()
	{
	}
}
[Token(Token = "0x20000D1")]
public class OVRLipSyncContextTextureFlip : MonoBehaviour
{
	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743290", Offset = "0x743290")]
	[AttributeAttribute(Name = "OVRNamedArrayAttribute", RVA = "0x743290", Offset = "0x743290")]
	public Texture[] Textures;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74340C", Offset = "0x74340C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74340C", Offset = "0x74340C")]
	public int smoothAmount;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRLipSync.Frame oldFrame;

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xADF378", Offset = "0xADF378", VA = "0xADF378")]
	private void Start()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xADF4CC", Offset = "0xADF4CC", VA = "0xADF4CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xADF670", Offset = "0xADF670", VA = "0xADF670")]
	private void SetVisemeToTexture()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xADF794", Offset = "0xADF794", VA = "0xADF794")]
	public OVRLipSyncContextTextureFlip()
	{
	}
}
[Token(Token = "0x20000D2")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F7B8", Offset = "0x73F7B8")]
public class OVRLipSyncMicInput : MonoBehaviour
{
	[Token(Token = "0x2000283")]
	public enum micActivation
	{
		[Token(Token = "0x4001028")]
		HoldToSpeak,
		[Token(Token = "0x4001029")]
		PushToSpeak,
		[Token(Token = "0x400102A")]
		ConstantSpeak
	}

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743464", Offset = "0x743464")]
	public AudioSource audioSource;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74349C", Offset = "0x74349C")]
	public bool enableMicSelectionGUI;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7434D4", Offset = "0x7434D4")]
	public KeyCode micSelectionGUIKey;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74350C", Offset = "0x74350C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x74350C", Offset = "0x74350C")]
	private float micInputVolume;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743574", Offset = "0x743574")]
	private int micFrequency;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7435C0", Offset = "0x7435C0")]
	public micActivation micControl;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7435F8", Offset = "0x7435F8")]
	public KeyCode micActivationKey;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743630", Offset = "0x743630")]
	public string selectedDevice;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool micSelected;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int minFreq;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int maxFreq;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool focused;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool initialized;

	[Token(Token = "0x170000A1")]
	public float MicFrequency
	{
		[Token(Token = "0x6000512")]
		[Address(RVA = "0xAE01B0", Offset = "0xAE01B0", VA = "0xAE01B0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000513")]
		[Address(RVA = "0xAE01BC", Offset = "0xAE01BC", VA = "0xAE01BC")]
		set
		{
		}
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xAE0248", Offset = "0xAE0248", VA = "0xAE0248")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xAE0308", Offset = "0xAE0308", VA = "0xAE0308")]
	private void Start()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xAE0354", Offset = "0xAE0354", VA = "0xAE0354")]
	private void InitializeMicrophone()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xAE0498", Offset = "0xAE0498", VA = "0xAE0498")]
	private void Update()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xAE08D0", Offset = "0xAE08D0", VA = "0xAE08D0")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xAE08E4", Offset = "0xAE08E4", VA = "0xAE08E4")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xAE08FC", Offset = "0xAE08FC", VA = "0xAE08FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xAE0900", Offset = "0xAE0900", VA = "0xAE0900")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xAE0978", Offset = "0xAE0978", VA = "0xAE0978")]
	public void MicDeviceGUI(float left, float top, float width, float height, float buttonSpaceTop, float buttonSpaceLeft)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xAE03DC", Offset = "0xAE03DC", VA = "0xAE03DC")]
	public void GetMicCaps()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xAE073C", Offset = "0xAE073C", VA = "0xAE073C")]
	public void StartMicrophone()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xAE05F4", Offset = "0xAE05F4", VA = "0xAE05F4")]
	public void StopMicrophone()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xAE0B58", Offset = "0xAE0B58", VA = "0xAE0B58")]
	private float GetAveragedVolume()
	{
		return default(float);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xAE0B60", Offset = "0xAE0B60", VA = "0xAE0B60")]
	public OVRLipSyncMicInput()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D3")]
public class OVRLipSyncSequence : ScriptableObject
{
	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OVRLipSync.Frame> entries;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float length;

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xADEBE8", Offset = "0xADEBE8", VA = "0xADEBE8")]
	public OVRLipSync.Frame GetFrameAtTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xAE0B90", Offset = "0xAE0B90", VA = "0xAE0B90")]
	public OVRLipSyncSequence()
	{
	}
}
[Token(Token = "0x20000D4")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x2000284")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x400102C")]
		Uninitialized = -1,
		[Token(Token = "0x400102D")]
		NotEnabled,
		[Token(Token = "0x400102E")]
		Success,
		[Token(Token = "0x400102F")]
		StreamError,
		[Token(Token = "0x4001030")]
		ProcessError,
		[Token(Token = "0x4001031")]
		MaxStatValue
	}

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool useVirtualSpeakers;

	[Token(Token = "0x170000A2")]
	public bool UseVirtualSpeakers
	{
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xA13288", Offset = "0xA13288", VA = "0xA13288")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000525")]
		[Address(RVA = "0xA13290", Offset = "0xA13290", VA = "0xA13290")]
		set
		{
		}
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xA1329C", Offset = "0xA1329C", VA = "0xA1329C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xA134B8", Offset = "0xA134B8", VA = "0xA134B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xA13714", Offset = "0xA13714", VA = "0xA13714")]
	public ONSPAmbisonicsNative()
	{
	}
}
[Token(Token = "0x20000D5")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000285")]
	private enum Parameters
	{
		[Token(Token = "0x4001033")]
		P_GAIN,
		[Token(Token = "0x4001034")]
		P_USEINVSQR,
		[Token(Token = "0x4001035")]
		P_NEAR,
		[Token(Token = "0x4001036")]
		P_FAR,
		[Token(Token = "0x4001037")]
		P_RADIUS,
		[Token(Token = "0x4001038")]
		P_DISABLE_RFL,
		[Token(Token = "0x4001039")]
		P_VSPEAKERMODE,
		[Token(Token = "0x400103A")]
		P_AMBISTAT,
		[Token(Token = "0x400103B")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x400103C")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x400103D")]
		P_SENDLEVEL,
		[Token(Token = "0x400103E")]
		P_NUM
	}

	[Token(Token = "0x40004FF")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x170000A3")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x600052C")]
		[Address(RVA = "0xA13970", Offset = "0xA13970", VA = "0xA13970")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600052D")]
		[Address(RVA = "0xA13978", Offset = "0xA13978", VA = "0xA13978")]
		set
		{
		}
	}

	[Token(Token = "0x170000A4")]
	public float Gain
	{
		[Token(Token = "0x600052E")]
		[Address(RVA = "0xA13984", Offset = "0xA13984", VA = "0xA13984")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600052F")]
		[Address(RVA = "0xA1398C", Offset = "0xA1398C", VA = "0xA1398C")]
		set
		{
		}
	}

	[Token(Token = "0x170000A5")]
	public bool UseInvSqr
	{
		[Token(Token = "0x6000530")]
		[Address(RVA = "0xA13A10", Offset = "0xA13A10", VA = "0xA13A10")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000531")]
		[Address(RVA = "0xA13A18", Offset = "0xA13A18", VA = "0xA13A18")]
		set
		{
		}
	}

	[Token(Token = "0x170000A6")]
	public float Near
	{
		[Token(Token = "0x6000532")]
		[Address(RVA = "0xA13A24", Offset = "0xA13A24", VA = "0xA13A24")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000533")]
		[Address(RVA = "0xA13A2C", Offset = "0xA13A2C", VA = "0xA13A2C")]
		set
		{
		}
	}

	[Token(Token = "0x170000A7")]
	public float Far
	{
		[Token(Token = "0x6000534")]
		[Address(RVA = "0xA13AB4", Offset = "0xA13AB4", VA = "0xA13AB4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000535")]
		[Address(RVA = "0xA13ABC", Offset = "0xA13ABC", VA = "0xA13ABC")]
		set
		{
		}
	}

	[Token(Token = "0x170000A8")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000536")]
		[Address(RVA = "0xA13B44", Offset = "0xA13B44", VA = "0xA13B44")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000537")]
		[Address(RVA = "0xA13B4C", Offset = "0xA13B4C", VA = "0xA13B4C")]
		set
		{
		}
	}

	[Token(Token = "0x170000A9")]
	public float ReverbSend
	{
		[Token(Token = "0x6000538")]
		[Address(RVA = "0xA13BD4", Offset = "0xA13BD4", VA = "0xA13BD4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000539")]
		[Address(RVA = "0xA13BDC", Offset = "0xA13BDC", VA = "0xA13BDC")]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	public bool EnableRfl
	{
		[Token(Token = "0x600053A")]
		[Address(RVA = "0xA13C64", Offset = "0xA13C64", VA = "0xA13C64")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600053B")]
		[Address(RVA = "0xA13C6C", Offset = "0xA13C6C", VA = "0xA13C6C")]
		set
		{
		}
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xA13798", Offset = "0xA13798", VA = "0xA13798")]
	[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x745DF8", Offset = "0x745DF8")]
	private static void OnBeforeSceneLoadRuntimeMethod()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600052B")]
	[Address(RVA = "0xA13890", Offset = "0xA13890", VA = "0xA13890")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xA13C78", Offset = "0xA13C78", VA = "0xA13C78")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xA13DEC", Offset = "0xA13DEC", VA = "0xA13DEC")]
	private void Start()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xA13DF0", Offset = "0xA13DF0", VA = "0xA13DF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xA13CE4", Offset = "0xA13CE4", VA = "0xA13CE4")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xA13EB8", Offset = "0xA13EB8", VA = "0xA13EB8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xA14318", Offset = "0xA14318", VA = "0xA14318")]
	private void OnDestroy()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000542")]
	[Address(RVA = "0xA13810", Offset = "0xA13810", VA = "0xA13810")]
	private static extern int OSP_SetGlobalVoiceLimit(int VoiceLimit);

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xA143E8", Offset = "0xA143E8", VA = "0xA143E8")]
	public ONSPAudioSource()
	{
	}
}
[Token(Token = "0x20000D6")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Token(Token = "0x400050A")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Token(Token = "0x400050C")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xA14408", Offset = "0xA14408", VA = "0xA14408")]
	private void Start()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xA14414", Offset = "0xA14414", VA = "0xA14414")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000547")]
	[Address(RVA = "0xA144CC", Offset = "0xA144CC", VA = "0xA144CC")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000548")]
	[Address(RVA = "0xA1444C", Offset = "0xA1444C", VA = "0xA1444C")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xA1454C", Offset = "0xA1454C", VA = "0xA1454C")]
	public ONSPProfiler()
	{
	}
}
[Token(Token = "0x20000D7")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000286")]
	private struct MeshMaterial
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000287")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh[] treePrototypeMeshes;
	}

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int OSPSuccess;

	[Token(Token = "0x4000513")]
	public const string GEOMETRY_FILE_EXTENSION = "ovramesh";

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int terrainDecimation;

	[Token(Token = "0x170000AB")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x600054A")]
		[Address(RVA = "0xA16FC8", Offset = "0xA16FC8", VA = "0xA16FC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AC")]
	public string filePath
	{
		[Token(Token = "0x600054B")]
		[Address(RVA = "0xA17054", Offset = "0xA17054", VA = "0xA17054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xA170CC", Offset = "0xA170CC", VA = "0xA170CC")]
	private static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xA17214", Offset = "0xA17214", VA = "0xA17214")]
	private void Awake()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xA17218", Offset = "0xA17218", VA = "0xA17218")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xA17778", Offset = "0xA17778", VA = "0xA17778")]
	private void Update()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xA17B10", Offset = "0xA17B10", VA = "0xA17B10")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xA17C6C", Offset = "0xA17C6C", VA = "0xA17C6C")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic, ref int ignoredMeshCount)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xA18354", Offset = "0xA18354", VA = "0xA18354")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal)
	{
		return default(int);
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xA18390", Offset = "0xA18390", VA = "0xA18390")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic, ref int ignoredMeshCount)
	{
		return default(int);
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xA19BB0", Offset = "0xA19BB0", VA = "0xA19BB0")]
	private static void uploadMeshFilter(List<Vector3> tempVertices, List<int> tempIndices, MeshGroup[] groups, float[] vertices, int[] indices, ref int vertexOffset, ref int indexOffset, ref int groupOffset, Mesh mesh, ONSPPropagationMaterial[] materials, Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xA19A88", Offset = "0xA19A88", VA = "0xA19A88")]
	private static void updateCountsForMesh(ref int totalVertexCount, ref uint totalIndexCount, ref int totalFaceCount, ref int totalMaterialCount, Mesh mesh)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xA175B0", Offset = "0xA175B0", VA = "0xA175B0")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xA173E4", Offset = "0xA173E4", VA = "0xA173E4")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xA1A1C4", Offset = "0xA1A1C4", VA = "0xA1A1C4")]
	public bool WriteToObj()
	{
		return default(bool);
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xA1A600", Offset = "0xA1A600", VA = "0xA1A600")]
	public ONSPPropagationGeometry()
	{
	}
}
[Token(Token = "0x20000D8")]
internal class ONSPPropagation
{
	[Token(Token = "0x2000288")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x4001045")]
		Int8,
		[Token(Token = "0x4001046")]
		UInt8,
		[Token(Token = "0x4001047")]
		Int16,
		[Token(Token = "0x4001048")]
		UInt16,
		[Token(Token = "0x4001049")]
		Int32,
		[Token(Token = "0x400104A")]
		UInt32,
		[Token(Token = "0x400104B")]
		Int64,
		[Token(Token = "0x400104C")]
		UInt64,
		[Token(Token = "0x400104D")]
		Float16,
		[Token(Token = "0x400104E")]
		Float32,
		[Token(Token = "0x400104F")]
		Float64
	}

	[Token(Token = "0x2000289")]
	public class ClientType
	{
		[Token(Token = "0x4001050")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x4001051")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x4001052")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x4001053")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x4001054")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x4001055")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x4001056")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x4001057")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x4001058")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x4001059")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x400105A")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x400105B")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x400105C")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x400105D")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_1 = 13u;

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xA14A00", Offset = "0xA14A00", VA = "0xA14A00")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x200028A")]
	public interface PropagationInterface
	{
		[Token(Token = "0x6000CFF")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x6000D00")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x6000D01")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x6000D02")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000D03")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x6000D04")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000D05")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000D06")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D07")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D08")]
		int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D09")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6000D0A")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x6000D0B")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000D0C")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000D0D")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x200028B")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x400105E")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x17000159")]
		private IntPtr context
		{
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xA15670", Offset = "0xA15670", VA = "0xA15670")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xA156D4", Offset = "0xA156D4", VA = "0xA156D4")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xA15764", Offset = "0xA15764", VA = "0xA15764")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xA157F4", Offset = "0xA157F4", VA = "0xA157F4", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xA15818", Offset = "0xA15818", VA = "0xA15818")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xA158A8", Offset = "0xA158A8", VA = "0xA158A8", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xA158CC", Offset = "0xA158CC", VA = "0xA158CC")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xA15958", Offset = "0xA15958", VA = "0xA15958", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xA1597C", Offset = "0xA1597C", VA = "0xA1597C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xA159FC", Offset = "0xA159FC", VA = "0xA159FC", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xA15A04", Offset = "0xA15A04", VA = "0xA15A04")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xA15B24", Offset = "0xA15B24", VA = "0xA15B24", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xA15C1C", Offset = "0xA15C1C", VA = "0xA15C1C")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xA15CB4", Offset = "0xA15CB4", VA = "0xA15CB4", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xA15CC0", Offset = "0xA15CC0", VA = "0xA15CC0")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xA15DEC", Offset = "0xA15DEC", VA = "0xA15DEC", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xA15DF8", Offset = "0xA15DF8", VA = "0xA15DF8")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xA15EA4", Offset = "0xA15EA4", VA = "0xA15EA4", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xA15EB0", Offset = "0xA15EB0", VA = "0xA15EB0")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xA15F5C", Offset = "0xA15F5C", VA = "0xA15F5C", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xA15F68", Offset = "0xA15F68", VA = "0xA15F68")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xA16014", Offset = "0xA16014", VA = "0xA16014", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xA16020", Offset = "0xA16020", VA = "0xA16020")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xA160AC", Offset = "0xA160AC", VA = "0xA160AC", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xA160D0", Offset = "0xA160D0", VA = "0xA160D0")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xA16150", Offset = "0xA16150", VA = "0xA16150", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xA16158", Offset = "0xA16158", VA = "0xA16158")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xA16200", Offset = "0xA16200", VA = "0xA16200", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xA1620C", Offset = "0xA1620C", VA = "0xA1620C")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xA162B4", Offset = "0xA162B4", VA = "0xA162B4", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xA162C4", Offset = "0xA162C4", VA = "0xA162C4")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xA16354", Offset = "0xA16354", VA = "0xA16354", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xA149AC", Offset = "0xA149AC", VA = "0xA149AC")]
		public UnityNativeInterface()
		{
		}
	}

	[Token(Token = "0x200028C")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x4001060")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x1700015A")]
		private IntPtr context
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xA16360", Offset = "0xA16360", VA = "0xA16360")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xA147F4", Offset = "0xA147F4", VA = "0xA147F4")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xA163C4", Offset = "0xA163C4", VA = "0xA163C4")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xA16454", Offset = "0xA16454", VA = "0xA16454", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xA16478", Offset = "0xA16478", VA = "0xA16478")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xA16508", Offset = "0xA16508", VA = "0xA16508", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xA1652C", Offset = "0xA1652C", VA = "0xA1652C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xA165BC", Offset = "0xA165BC", VA = "0xA165BC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xA165E0", Offset = "0xA165E0", VA = "0xA165E0")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xA16660", Offset = "0xA16660", VA = "0xA16660", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xA16668", Offset = "0xA16668", VA = "0xA16668")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xA16788", Offset = "0xA16788", VA = "0xA16788", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xA16880", Offset = "0xA16880", VA = "0xA16880")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xA16918", Offset = "0xA16918", VA = "0xA16918", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xA16924", Offset = "0xA16924", VA = "0xA16924")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xA16A50", Offset = "0xA16A50", VA = "0xA16A50", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xA16A5C", Offset = "0xA16A5C", VA = "0xA16A5C")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xA16B08", Offset = "0xA16B08", VA = "0xA16B08", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xA16B14", Offset = "0xA16B14", VA = "0xA16B14")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xA16BC0", Offset = "0xA16BC0", VA = "0xA16BC0", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xA16BCC", Offset = "0xA16BCC", VA = "0xA16BCC")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xA16C78", Offset = "0xA16C78", VA = "0xA16C78", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xA16C84", Offset = "0xA16C84", VA = "0xA16C84")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xA16D14", Offset = "0xA16D14", VA = "0xA16D14", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xA16D38", Offset = "0xA16D38", VA = "0xA16D38")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xA16DB8", Offset = "0xA16DB8", VA = "0xA16DB8", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xA16DC0", Offset = "0xA16DC0", VA = "0xA16DC0")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xA16E68", Offset = "0xA16E68", VA = "0xA16E68", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xA16E74", Offset = "0xA16E74", VA = "0xA16E74")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xA16F1C", Offset = "0xA16F1C", VA = "0xA16F1C", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xA16F2C", Offset = "0xA16F2C", VA = "0xA16F2C")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xA16FBC", Offset = "0xA16FBC", VA = "0xA16FBC", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xA14884", Offset = "0xA14884", VA = "0xA14884")]
		public WwisePluginInterface()
		{
		}
	}

	[Token(Token = "0x200028D")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x4001062")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x1700015B")]
		private IntPtr context
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0xA14A08", Offset = "0xA14A08", VA = "0xA14A08")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xA148D0", Offset = "0xA148D0", VA = "0xA148D0")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xA14A6C", Offset = "0xA14A6C", VA = "0xA14A6C")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xA14AFC", Offset = "0xA14AFC", VA = "0xA14AFC", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xA14B20", Offset = "0xA14B20", VA = "0xA14B20")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xA14BB0", Offset = "0xA14BB0", VA = "0xA14BB0", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xA14BD4", Offset = "0xA14BD4", VA = "0xA14BD4")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xA14C64", Offset = "0xA14C64", VA = "0xA14C64", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xA14C88", Offset = "0xA14C88", VA = "0xA14C88")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xA14D08", Offset = "0xA14D08", VA = "0xA14D08", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xA14D10", Offset = "0xA14D10", VA = "0xA14D10")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xA14E30", Offset = "0xA14E30", VA = "0xA14E30", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xA14F28", Offset = "0xA14F28", VA = "0xA14F28")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xA14FC0", Offset = "0xA14FC0", VA = "0xA14FC0", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xA14FCC", Offset = "0xA14FCC", VA = "0xA14FCC")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xA150F8", Offset = "0xA150F8", VA = "0xA150F8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xA15104", Offset = "0xA15104", VA = "0xA15104")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xA151B0", Offset = "0xA151B0", VA = "0xA151B0", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xA151BC", Offset = "0xA151BC", VA = "0xA151BC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xA15268", Offset = "0xA15268", VA = "0xA15268", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xA15274", Offset = "0xA15274", VA = "0xA15274")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xA15320", Offset = "0xA15320", VA = "0xA15320", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xA1532C", Offset = "0xA1532C", VA = "0xA1532C")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xA153BC", Offset = "0xA153BC", VA = "0xA153BC", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xA153E0", Offset = "0xA153E0", VA = "0xA153E0")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xA15460", Offset = "0xA15460", VA = "0xA15460", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xA15468", Offset = "0xA15468", VA = "0xA15468")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xA15510", Offset = "0xA15510", VA = "0xA15510", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xA1551C", Offset = "0xA1551C", VA = "0xA1551C")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xA155C4", Offset = "0xA155C4", VA = "0xA155C4", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xA155D4", Offset = "0xA155D4", VA = "0xA155D4")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xA15664", Offset = "0xA15664", VA = "0xA15664", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xA14960", Offset = "0xA14960", VA = "0xA14960")]
		public FMODPluginInterface()
		{
		}
	}

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x170000AD")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x600055B")]
		[Address(RVA = "0xA1455C", Offset = "0xA1455C", VA = "0xA1455C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xA145CC", Offset = "0xA145CC", VA = "0xA145CC")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xA149F8", Offset = "0xA149F8", VA = "0xA149F8")]
	public ONSPPropagation()
	{
	}
}
[Token(Token = "0x20000D9")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x200028E")]
	public enum Preset
	{
		[Token(Token = "0x4001065")]
		Custom,
		[Token(Token = "0x4001066")]
		AcousticTile,
		[Token(Token = "0x4001067")]
		Brick,
		[Token(Token = "0x4001068")]
		BrickPainted,
		[Token(Token = "0x4001069")]
		Carpet,
		[Token(Token = "0x400106A")]
		CarpetHeavy,
		[Token(Token = "0x400106B")]
		CarpetHeavyPadded,
		[Token(Token = "0x400106C")]
		CeramicTile,
		[Token(Token = "0x400106D")]
		Concrete,
		[Token(Token = "0x400106E")]
		ConcreteRough,
		[Token(Token = "0x400106F")]
		ConcreteBlock,
		[Token(Token = "0x4001070")]
		ConcreteBlockPainted,
		[Token(Token = "0x4001071")]
		Curtain,
		[Token(Token = "0x4001072")]
		Foliage,
		[Token(Token = "0x4001073")]
		Glass,
		[Token(Token = "0x4001074")]
		GlassHeavy,
		[Token(Token = "0x4001075")]
		Grass,
		[Token(Token = "0x4001076")]
		Gravel,
		[Token(Token = "0x4001077")]
		GypsumBoard,
		[Token(Token = "0x4001078")]
		PlasterOnBrick,
		[Token(Token = "0x4001079")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x400107A")]
		Soil,
		[Token(Token = "0x400107B")]
		SoundProof,
		[Token(Token = "0x400107C")]
		Snow,
		[Token(Token = "0x400107D")]
		Steel,
		[Token(Token = "0x400107E")]
		Water,
		[Token(Token = "0x400107F")]
		WoodThin,
		[Token(Token = "0x4001080")]
		WoodThick,
		[Token(Token = "0x4001081")]
		WoodFloor,
		[Token(Token = "0x4001082")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x200028F")]
	public sealed class Point
	{
		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xADAC94", Offset = "0xADAC94", VA = "0xADAC94")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xADACCC", Offset = "0xADACCC", VA = "0xADACCC")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xADAD3C", Offset = "0xADAD3C", VA = "0xADAD3C")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x2000290")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x74050C", Offset = "0x74050C")]
	public sealed class Spectrum
	{
		[Serializable]
		[Token(Token = "0x20003F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741D44", Offset = "0x741D44")]
		private sealed class <>c
		{
			[Token(Token = "0x4001165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, float> <>9__3_0;

			[Token(Token = "0x4001167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Point, float> <>9__3_1;

			[Token(Token = "0x6001310")]
			[Address(RVA = "0xADB20C", Offset = "0xADB20C", VA = "0xADB20C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001311")]
			[Address(RVA = "0xADB214", Offset = "0xADB214", VA = "0xADB214")]
			internal float <get_Item>b__3_0(Point p)
			{
				return default(float);
			}

			[Token(Token = "0x6001312")]
			[Address(RVA = "0xADB22C", Offset = "0xADB22C", VA = "0xADB22C")]
			internal float <get_Item>b__3_1(Point p)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		[Token(Token = "0x1700015C")]
		public float Item
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xADAD74", Offset = "0xADAD74", VA = "0xADAD74")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xADB130", Offset = "0xADB130", VA = "0xADB130")]
		public Spectrum()
		{
		}
	}

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7436F8", Offset = "0x7436F8")]
	public Spectrum absorption;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743730", Offset = "0x743730")]
	public Spectrum transmission;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743768", Offset = "0x743768")]
	public Spectrum scattering;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x170000AE")]
	public Preset preset
	{
		[Token(Token = "0x600055E")]
		[Address(RVA = "0xA1A6D8", Offset = "0xA1A6D8", VA = "0xA1A6D8")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x600055F")]
		[Address(RVA = "0xA1A6E0", Offset = "0xA1A6E0", VA = "0xA1A6E0")]
		set
		{
		}
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xA1A708", Offset = "0xA1A708", VA = "0xA1A708")]
	private void Start()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xA1A058", Offset = "0xA1A058", VA = "0xA1A058")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xA1ACEC", Offset = "0xA1ACEC", VA = "0xA1ACEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xA1ACF0", Offset = "0xA1ACF0", VA = "0xA1ACF0")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xA1A70C", Offset = "0xA1A70C", VA = "0xA1A70C")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xA198F4", Offset = "0xA198F4", VA = "0xA198F4")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xA1ADD4", Offset = "0xA1ADD4", VA = "0xA1ADD4")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xA1B274", Offset = "0xA1B274", VA = "0xA1B274")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xA1B718", Offset = "0xA1B718", VA = "0xA1B718")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xA1BBB8", Offset = "0xA1BBB8", VA = "0xA1BBB8")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xA1C06C", Offset = "0xA1C06C", VA = "0xA1C06C")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xA1C50C", Offset = "0xA1C50C", VA = "0xA1C50C")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xA1C9AC", Offset = "0xA1C9AC", VA = "0xA1C9AC")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xA1CE54", Offset = "0xA1CE54", VA = "0xA1CE54")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xA1D2FC", Offset = "0xA1D2FC", VA = "0xA1D2FC")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xA1D7A8", Offset = "0xA1D7A8", VA = "0xA1D7A8")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xA1DC50", Offset = "0xA1DC50", VA = "0xA1DC50")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xA1E100", Offset = "0xA1E100", VA = "0xA1E100")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xA1E5A0", Offset = "0xA1E5A0", VA = "0xA1E5A0")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xA1EA4C", Offset = "0xA1EA4C", VA = "0xA1EA4C")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xA1EEDC", Offset = "0xA1EEDC", VA = "0xA1EEDC")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xA1F378", Offset = "0xA1F378", VA = "0xA1F378")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xA1F700", Offset = "0xA1F700", VA = "0xA1F700")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xA1FA80", Offset = "0xA1FA80", VA = "0xA1FA80")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xA1FF30", Offset = "0xA1FF30", VA = "0xA1FF30")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xA203DC", Offset = "0xA203DC", VA = "0xA203DC")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xA20880", Offset = "0xA20880", VA = "0xA20880")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xA20C0C", Offset = "0xA20C0C", VA = "0xA20C0C")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xA20D70", Offset = "0xA20D70", VA = "0xA20D70")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xA210EC", Offset = "0xA210EC", VA = "0xA210EC")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xA2157C", Offset = "0xA2157C", VA = "0xA2157C")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xA21A20", Offset = "0xA21A20", VA = "0xA21A20")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xA21EB8", Offset = "0xA21EB8", VA = "0xA21EB8")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xA22358", Offset = "0xA22358", VA = "0xA22358")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xA22800", Offset = "0xA22800", VA = "0xA22800")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xA22CA4", Offset = "0xA22CA4", VA = "0xA22CA4")]
	public ONSPPropagationMaterial()
	{
	}
}
[Token(Token = "0x20000DA")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quality;

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xADB244", Offset = "0xADB244", VA = "0xADB244")]
	private void Update()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xADB318", Offset = "0xADB318", VA = "0xADB318")]
	public ONSPPropagationSettings()
	{
	}
}
[Token(Token = "0x20000DB")]
public sealed class ONSPSettings : ScriptableObject
{
	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int voiceLimit;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPSettings instance;

	[Token(Token = "0x170000AF")]
	public static ONSPSettings Instance
	{
		[Token(Token = "0x6000586")]
		[Address(RVA = "0xADB8D4", Offset = "0xADB8D4", VA = "0xADB8D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xADB9E8", Offset = "0xADB9E8", VA = "0xADB9E8")]
	public ONSPSettings()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x400051E")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Token(Token = "0x6000588")]
	[Address(RVA = "0xADB9F8", Offset = "0xADB9F8", VA = "0xADB9F8")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xADBA90", Offset = "0xADBA90", VA = "0xADBA90")]
	private void Awake()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xADBB9C", Offset = "0xADBB9C", VA = "0xADBB9C")]
	private void Start()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xADBBA0", Offset = "0xADBBA0", VA = "0xADBBA0")]
	private void Update()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xADBBA4", Offset = "0xADBBA4", VA = "0xADBBA4")]
	public ONSPVersion()
	{
	}
}
[Token(Token = "0x20000DD")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x2000291")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioRaycastCallback _raycastCallback;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float particleSize;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float particleOffset;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject room;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] dims;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] coefs;

	[Token(Token = "0x400052E")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] points;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] normals;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem sys;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x4000534")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xAE9318", Offset = "0xAE9318", VA = "0xAE9318")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xAE9350", Offset = "0xAE9350", VA = "0xAE9350")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xAE9520", Offset = "0xAE9520", VA = "0xAE9520")]
	private void Start()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xAE95D0", Offset = "0xAE95D0", VA = "0xAE95D0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xAE96C4", Offset = "0xAE96C4", VA = "0xAE96C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xAEA02C", Offset = "0xAEA02C", VA = "0xAEA02C")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000593")]
	[Address(RVA = "0xAE95B4", Offset = "0xAE95B4", VA = "0xAE95B4")]
	private static extern int OSP_Unity_AssignRaycastCallback(MulticastDelegate callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000594")]
	[Address(RVA = "0xAE9634", Offset = "0xAE9634", VA = "0xAE9634")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000595")]
	[Address(RVA = "0xAE9D94", Offset = "0xAE9D94", VA = "0xAE9D94")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000596")]
	[Address(RVA = "0xAE9E14", Offset = "0xAE9E14", VA = "0xAE9E14")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6000597")]
	[Address(RVA = "0xAE9E9C", Offset = "0xAE9E9C", VA = "0xAE9E9C")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x6000598")]
	[Address(RVA = "0xAE9F24", Offset = "0xAE9F24", VA = "0xAE9F24")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x6000599")]
	[Address(RVA = "0xAE9FA4", Offset = "0xAE9FA4", VA = "0xAE9FA4")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600059A")]
	[Address(RVA = "0xAEAE64", Offset = "0xAEAE64", VA = "0xAEAE64")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x600059B")]
	[Address(RVA = "0xAEAF0C", Offset = "0xAEAF0C", VA = "0xAEAF0C")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xAEAFB4", Offset = "0xAEAFB4", VA = "0xAEAFB4")]
	public OculusSpatializerUnity()
	{
	}
}
[Token(Token = "0x20000DE")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
[Token(Token = "0x20000DF")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xADB328", Offset = "0xADB328", VA = "0xADB328")]
	private void Start()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xADB32C", Offset = "0xADB32C", VA = "0xADB32C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xADB330", Offset = "0xADB330", VA = "0xADB330")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xADB498", Offset = "0xADB498", VA = "0xADB498")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xADB37C", Offset = "0xADB37C", VA = "0xADB37C")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xADB40C", Offset = "0xADB40C", VA = "0xADB40C")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xADB4E4", Offset = "0xADB4E4", VA = "0xADB4E4")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xADB57C", Offset = "0xADB57C", VA = "0xADB57C")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xADB6E4", Offset = "0xADB6E4", VA = "0xADB6E4")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xADB84C", Offset = "0xADB84C", VA = "0xADB84C")]
	public ONSPReflectionZone()
	{
	}
}
[Token(Token = "0x20000E0")]
public static class AppSettingsExtensions
{
	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x94BF90", Offset = "0x94BF90", VA = "0x94BF90")]
	public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
	{
		return null;
	}
}
[Token(Token = "0x20000E1")]
public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
{
	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Channel;

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x9578EC", Offset = "0x9578EC", VA = "0x9578EC")]
	public void SetChannel(string channel)
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x957968", Offset = "0x957968", VA = "0x957968", Slot = "4")]
	public void OnPointerClick(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x957C0C", Offset = "0x957C0C", VA = "0x957C0C")]
	public ChannelSelector()
	{
	}
}
[Token(Token = "0x20000E2")]
[ExecuteInEditMode]
public class ChatAppIdCheckerUI : MonoBehaviour
{
	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Description;

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x95839C", Offset = "0x95839C", VA = "0x95839C")]
	public void Update()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x9584E0", Offset = "0x9584E0", VA = "0x9584E0")]
	public ChatAppIdCheckerUI()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ChatGui : MonoBehaviour, IChatClientListener
{
	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] ChannelsToJoinOnConnect;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] FriendsList;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int HistoryLengthToFetch;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7437C0", Offset = "0x7437C0")]
	private string <UserName>k__BackingField;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string selectedChannelName;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ChatClient chatClient;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected internal ChatAppSettings chatAppSettings;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject missingAppIdErrorPanel;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject ConnectingLabel;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RectTransform ChatPanel;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject UserIdFormPanel;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public InputField InputFieldChat;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text CurrentChannelText;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle ChannelToggleToInstantiate;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject FriendListUiItemtoInstantiate;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly Dictionary<string, Toggle> channelToggles;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly Dictionary<string, FriendItem> friendListItemLUT;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool ShowState;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject Title;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text StateText;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text UserIdText;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string HelpText;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public int TestLength;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private byte[] testBytes;

	[Token(Token = "0x170000B0")]
	public string UserName
	{
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x9584E8", Offset = "0x9584E8", VA = "0x9584E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E1C", Offset = "0x745E1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x9584F0", Offset = "0x9584F0", VA = "0x9584F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E2C", Offset = "0x745E2C")]
		set
		{
		}
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x9584F8", Offset = "0x9584F8", VA = "0x9584F8")]
	public void Start()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x958784", Offset = "0x958784", VA = "0x958784")]
	public void Connect()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x9588E4", Offset = "0x9588E4", VA = "0x9588E4")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x9588FC", Offset = "0x9588FC", VA = "0x9588FC")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x958914", Offset = "0x958914", VA = "0x958914")]
	public void Update()
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x958A08", Offset = "0x958A08", VA = "0x958A08")]
	public void OnEnterSend()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x959360", Offset = "0x959360", VA = "0x959360")]
	public void OnClickSend()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x958AA4", Offset = "0x958AA4", VA = "0x958AA4")]
	private void SendChatMessage(string inputLine)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x959414", Offset = "0x959414", VA = "0x959414")]
	public void PostHelpToCurrentChannel()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x9594D0", Offset = "0x9594D0", VA = "0x9594D0", Slot = "4")]
	public void DebugReturn(DebugLevel level, string message)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x9595B8", Offset = "0x9595B8", VA = "0x9595B8", Slot = "6")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x9598F4", Offset = "0x9598F4", VA = "0x9598F4", Slot = "5")]
	public void OnDisconnected()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x959914", Offset = "0x959914", VA = "0x959914", Slot = "7")]
	public void OnChatStateChange(ChatState state)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x9599C0", Offset = "0x9599C0", VA = "0x9599C0", Slot = "10")]
	public void OnSubscribed(string[] channels, bool[] results)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x959CD0", Offset = "0x959CD0", VA = "0x959CD0")]
	public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x959B44", Offset = "0x959B44", VA = "0x959B44")]
	private void InstantiateChannelButton(string channelName)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x9597C0", Offset = "0x9597C0", VA = "0x9597C0")]
	private void InstantiateFriendButton(string friendId)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x959E60", Offset = "0x959E60", VA = "0x959E60", Slot = "11")]
	public void OnUnsubscribed(string[] channels)
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x95A230", Offset = "0x95A230", VA = "0x95A230", Slot = "8")]
	public void OnGetMessages(string channelName, string[] senders, object[] messages)
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x95A280", Offset = "0x95A280", VA = "0x95A280", Slot = "9")]
	public void OnPrivateMessage(string sender, object message, string channelName)
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x95A390", Offset = "0x95A390", VA = "0x95A390", Slot = "12")]
	public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x95A51C", Offset = "0x95A51C", VA = "0x95A51C", Slot = "13")]
	public void OnUserSubscribed(string channel, string user)
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x95A620", Offset = "0x95A620", VA = "0x95A620", Slot = "14")]
	public void OnUserUnsubscribed(string channel, string user)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x95A724", Offset = "0x95A724", VA = "0x95A724")]
	public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x95A884", Offset = "0x95A884", VA = "0x95A884")]
	public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x95AA18", Offset = "0x95AA18", VA = "0x95AA18")]
	public void OnErrorInfo(string channel, string error, object data)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x95AB48", Offset = "0x95AB48", VA = "0x95AB48")]
	public void AddMessageToSelectedChannel(string msg)
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x9579E4", Offset = "0x9579E4", VA = "0x9579E4")]
	public void ShowChannel(string channelName)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x95AC2C", Offset = "0x95AC2C", VA = "0x95AC2C")]
	public void OpenDashboard()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x95AC78", Offset = "0x95AC78", VA = "0x95AC78")]
	public ChatGui()
	{
	}
}
[Token(Token = "0x20000E4")]
public class FriendItem : MonoBehaviour
{
	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text NameLabel;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text StatusLabel;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Health;

	[Token(Token = "0x170000B1")]
	[HideInInspector]
	public string FriendId
	{
		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x940148", Offset = "0x940148", VA = "0x940148")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x940124", Offset = "0x940124", VA = "0x940124")]
		set
		{
		}
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x94016C", Offset = "0x94016C", VA = "0x94016C")]
	public void Awake()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x9401D8", Offset = "0x9401D8", VA = "0x9401D8")]
	public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x940300", Offset = "0x940300", VA = "0x940300")]
	public FriendItem()
	{
	}
}
[Token(Token = "0x20000E5")]
public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xA09C74", Offset = "0xA09C74", VA = "0xA09C74", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xA09C98", Offset = "0xA09C98", VA = "0xA09C98")]
	public IgnoreUiRaycastWhenInactive()
	{
	}
}
[Token(Token = "0x20000E6")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F83C", Offset = "0x73F83C")]
public class NamePickGui : MonoBehaviour
{
	[Token(Token = "0x4000558")]
	private const string UserNamePlayerPref = "NamePickUserName";

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChatGui chatNewComponent;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField idInput;

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xA0E63C", Offset = "0xA0E63C", VA = "0xA0E63C")]
	public void Start()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xA0E6F4", Offset = "0xA0E6F4", VA = "0xA0E6F4")]
	public void EndEditOnEnter()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xA0E740", Offset = "0xA0E740", VA = "0xA0E740")]
	public void StartChat()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xA0E808", Offset = "0xA0E808", VA = "0xA0E808")]
	public NamePickGui()
	{
	}
}
[Token(Token = "0x20000E7")]
public enum Pipeline
{
	[Token(Token = "0x400055C")]
	HDRP,
	[Token(Token = "0x400055D")]
	LWRP,
	[Token(Token = "0x400055E")]
	Standard
}
[Token(Token = "0x20000E8")]
public struct GazeEventArgs
{
	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float distance;
}
[Token(Token = "0x20000E9")]
public delegate void GazeEventHandler(object sender, GazeEventArgs e);
[Token(Token = "0x20000EA")]
public class SteamVR_GazeTracker : MonoBehaviour
{
	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInGaze;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gazeInCutoff;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float gazeOutCutoff;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform hmdTrackedObject;

	[Token(Token = "0x14000001")]
	public event GazeEventHandler GazeOn
	{
		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x9E0444", Offset = "0x9E0444", VA = "0x9E0444")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E3C", Offset = "0x745E3C")]
		add
		{
		}
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x9E04E8", Offset = "0x9E04E8", VA = "0x9E04E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E4C", Offset = "0x745E4C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event GazeEventHandler GazeOff
	{
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x9E058C", Offset = "0x9E058C", VA = "0x9E058C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E5C", Offset = "0x745E5C")]
		add
		{
		}
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x9E0630", Offset = "0x9E0630", VA = "0x9E0630")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E6C", Offset = "0x745E6C")]
		remove
		{
		}
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x9E06D4", Offset = "0x9E06D4", VA = "0x9E06D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x9E06D8", Offset = "0x9E06D8", VA = "0x9E06D8", Slot = "4")]
	public virtual void OnGazeOn(GazeEventArgs e)
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x9E06F0", Offset = "0x9E06F0", VA = "0x9E06F0", Slot = "5")]
	public virtual void OnGazeOff(GazeEventArgs e)
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x9E0708", Offset = "0x9E0708", VA = "0x9E0708")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x9E0A70", Offset = "0x9E0A70", VA = "0x9E0A70")]
	public SteamVR_GazeTracker()
	{
	}
}
[Token(Token = "0x20000EB")]
public struct PointerEventArgs
{
	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float distance;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;
}
[Token(Token = "0x20000EC")]
public delegate void PointerEventHandler(object sender, PointerEventArgs e);
[Token(Token = "0x20000ED")]
public class SteamVR_LaserPointer : MonoBehaviour
{
	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool active;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject holder;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject pointer;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool addRigidBody;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform reference;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform previousContact;

	[Token(Token = "0x14000003")]
	public event PointerEventHandler PointerIn
	{
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x9E1954", Offset = "0x9E1954", VA = "0x9E1954")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E7C", Offset = "0x745E7C")]
		add
		{
		}
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x9E19F8", Offset = "0x9E19F8", VA = "0x9E19F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E8C", Offset = "0x745E8C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event PointerEventHandler PointerOut
	{
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x9E1A9C", Offset = "0x9E1A9C", VA = "0x9E1A9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745E9C", Offset = "0x745E9C")]
		add
		{
		}
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x9E1B40", Offset = "0x9E1B40", VA = "0x9E1B40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745EAC", Offset = "0x745EAC")]
		remove
		{
		}
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x9E1BE4", Offset = "0x9E1BE4", VA = "0x9E1BE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x9E1FA8", Offset = "0x9E1FA8", VA = "0x9E1FA8", Slot = "4")]
	public virtual void OnPointerIn(PointerEventArgs e)
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x9E1FEC", Offset = "0x9E1FEC", VA = "0x9E1FEC", Slot = "5")]
	public virtual void OnPointerOut(PointerEventArgs e)
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x9E2030", Offset = "0x9E2030", VA = "0x9E2030")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x9E24A8", Offset = "0x9E24A8", VA = "0x9E24A8")]
	public SteamVR_LaserPointer()
	{
	}
}
[Token(Token = "0x20000EE")]
public class SteamVR_Teleporter : MonoBehaviour
{
	[Token(Token = "0x2000292")]
	public enum TeleportType
	{
		[Token(Token = "0x4001088")]
		TeleportTypeUseTerrain,
		[Token(Token = "0x4001089")]
		TeleportTypeUseCollider,
		[Token(Token = "0x400108A")]
		TeleportTypeUseZeroY
	}

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool teleportOnClick;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TeleportType teleportType;

	[Token(Token = "0x170000B2")]
	private Transform reference
	{
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x9C4308", Offset = "0x9C4308", VA = "0x9C4308")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x9C43A4", Offset = "0x9C43A4", VA = "0x9C43A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x9C4610", Offset = "0x9C4610", VA = "0x9C4610")]
	private void DoClick(object sender, ClickedEventArgs e)
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x9C49AC", Offset = "0x9C49AC", VA = "0x9C49AC")]
	public SteamVR_Teleporter()
	{
	}
}
[Token(Token = "0x20000EF")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F8A0", Offset = "0x73F8A0")]
public class SteamVR_TestThrow : MonoBehaviour
{
	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody attachPoint;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SteamVR_TrackedObject trackedObj;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FixedJoint joint;

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x9C5AC4", Offset = "0x9C5AC4", VA = "0x9C5AC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x9C5B1C", Offset = "0x9C5B1C", VA = "0x9C5B1C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x9C5E50", Offset = "0x9C5E50", VA = "0x9C5E50")]
	public SteamVR_TestThrow()
	{
	}
}
[Token(Token = "0x20000F0")]
public class SteamVR_TestTrackedCamera : MonoBehaviour
{
	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool undistorted;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cropped;

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x9C5E58", Offset = "0x9C5E58", VA = "0x9C5E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x9C5F18", Offset = "0x9C5F18", VA = "0x9C5F18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x9C6010", Offset = "0x9C6010", VA = "0x9C6010")]
	private void Update()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x9C639C", Offset = "0x9C639C", VA = "0x9C639C")]
	public SteamVR_TestTrackedCamera()
	{
	}
}
[Token(Token = "0x20000F1")]
public struct ClickedEventArgs
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float padX;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float padY;
}
[Token(Token = "0x20000F2")]
public delegate void ClickedEventHandler(object sender, ClickedEventArgs e);
[Token(Token = "0x20000F3")]
public class SteamVR_TrackedController : MonoBehaviour
{
	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uint controllerIndex;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRControllerState_t controllerState;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool triggerPressed;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool steamPressed;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool menuPressed;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool padPressed;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool padTouched;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool gripped;

	[Token(Token = "0x14000005")]
	public event ClickedEventHandler MenuButtonClicked
	{
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x9C6E84", Offset = "0x9C6E84", VA = "0x9C6E84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745EBC", Offset = "0x745EBC")]
		add
		{
		}
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x9C6F28", Offset = "0x9C6F28", VA = "0x9C6F28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745ECC", Offset = "0x745ECC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event ClickedEventHandler MenuButtonUnclicked
	{
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x9C6FCC", Offset = "0x9C6FCC", VA = "0x9C6FCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745EDC", Offset = "0x745EDC")]
		add
		{
		}
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x9C7070", Offset = "0x9C7070", VA = "0x9C7070")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745EEC", Offset = "0x745EEC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event ClickedEventHandler TriggerClicked
	{
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x9C456C", Offset = "0x9C456C", VA = "0x9C456C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745EFC", Offset = "0x745EFC")]
		add
		{
		}
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x9C7114", Offset = "0x9C7114", VA = "0x9C7114")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F0C", Offset = "0x745F0C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event ClickedEventHandler TriggerUnclicked
	{
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x9C71B8", Offset = "0x9C71B8", VA = "0x9C71B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F1C", Offset = "0x745F1C")]
		add
		{
		}
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x9C725C", Offset = "0x9C725C", VA = "0x9C725C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F2C", Offset = "0x745F2C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event ClickedEventHandler SteamClicked
	{
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x9C7300", Offset = "0x9C7300", VA = "0x9C7300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F3C", Offset = "0x745F3C")]
		add
		{
		}
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x9C73A4", Offset = "0x9C73A4", VA = "0x9C73A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F4C", Offset = "0x745F4C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event ClickedEventHandler PadClicked
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x9C7448", Offset = "0x9C7448", VA = "0x9C7448")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F5C", Offset = "0x745F5C")]
		add
		{
		}
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x9C74EC", Offset = "0x9C74EC", VA = "0x9C74EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F6C", Offset = "0x745F6C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event ClickedEventHandler PadUnclicked
	{
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x9C7590", Offset = "0x9C7590", VA = "0x9C7590")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F7C", Offset = "0x745F7C")]
		add
		{
		}
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x9C7634", Offset = "0x9C7634", VA = "0x9C7634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F8C", Offset = "0x745F8C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event ClickedEventHandler PadTouched
	{
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x9C76D8", Offset = "0x9C76D8", VA = "0x9C76D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745F9C", Offset = "0x745F9C")]
		add
		{
		}
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x9C777C", Offset = "0x9C777C", VA = "0x9C777C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FAC", Offset = "0x745FAC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event ClickedEventHandler PadUntouched
	{
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x9C7820", Offset = "0x9C7820", VA = "0x9C7820")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FBC", Offset = "0x745FBC")]
		add
		{
		}
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x9C78C4", Offset = "0x9C78C4", VA = "0x9C78C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FCC", Offset = "0x745FCC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event ClickedEventHandler Gripped
	{
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x9C7968", Offset = "0x9C7968", VA = "0x9C7968")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FDC", Offset = "0x745FDC")]
		add
		{
		}
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x9C7A0C", Offset = "0x9C7A0C", VA = "0x9C7A0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FEC", Offset = "0x745FEC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event ClickedEventHandler Ungripped
	{
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x9C7AB0", Offset = "0x9C7AB0", VA = "0x9C7AB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x745FFC", Offset = "0x745FFC")]
		add
		{
		}
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x9C7B54", Offset = "0x9C7B54", VA = "0x9C7B54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74600C", Offset = "0x74600C")]
		remove
		{
		}
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x9C7BF8", Offset = "0x9C7BF8", VA = "0x9C7BF8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x9C7D44", Offset = "0x9C7D44", VA = "0x9C7D44")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x9C7D4C", Offset = "0x9C7D4C", VA = "0x9C7D4C", Slot = "5")]
	public virtual void OnTriggerClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x9C7D70", Offset = "0x9C7D70", VA = "0x9C7D70", Slot = "6")]
	public virtual void OnTriggerUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x9C7D94", Offset = "0x9C7D94", VA = "0x9C7D94", Slot = "7")]
	public virtual void OnMenuClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x9C7DB8", Offset = "0x9C7DB8", VA = "0x9C7DB8", Slot = "8")]
	public virtual void OnMenuUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x9C7DDC", Offset = "0x9C7DDC", VA = "0x9C7DDC", Slot = "9")]
	public virtual void OnSteamClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x9C7E00", Offset = "0x9C7E00", VA = "0x9C7E00", Slot = "10")]
	public virtual void OnPadClicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x9C7E24", Offset = "0x9C7E24", VA = "0x9C7E24", Slot = "11")]
	public virtual void OnPadUnclicked(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x9C7E48", Offset = "0x9C7E48", VA = "0x9C7E48", Slot = "12")]
	public virtual void OnPadTouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x9C7E6C", Offset = "0x9C7E6C", VA = "0x9C7E6C", Slot = "13")]
	public virtual void OnPadUntouched(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x9C7E90", Offset = "0x9C7E90", VA = "0x9C7E90", Slot = "14")]
	public virtual void OnGripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x9C7EB4", Offset = "0x9C7EB4", VA = "0x9C7EB4", Slot = "15")]
	public virtual void OnUngripped(ClickedEventArgs e)
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x9C7ED8", Offset = "0x9C7ED8", VA = "0x9C7ED8", Slot = "16")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x9C81D0", Offset = "0x9C81D0", VA = "0x9C81D0")]
	public SteamVR_TrackedController()
	{
	}
}
[Token(Token = "0x20000F4")]
public class SteamVR : IDisposable
{
	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _enabled;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR _instance;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7438C0", Offset = "0x7438C0")]
	private CVRSystem <hmd>k__BackingField;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7438D0", Offset = "0x7438D0")]
	private CVRCompositor <compositor>k__BackingField;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7438E0", Offset = "0x7438E0")]
	private CVROverlay <overlay>k__BackingField;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7438F0", Offset = "0x7438F0")]
	private static bool <initializing>k__BackingField;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743900", Offset = "0x743900")]
	private static bool <calibrating>k__BackingField;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743910", Offset = "0x743910")]
	private static bool <outOfRange>k__BackingField;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool[] connected;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743920", Offset = "0x743920")]
	private float <sceneWidth>k__BackingField;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743930", Offset = "0x743930")]
	private float <sceneHeight>k__BackingField;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743940", Offset = "0x743940")]
	private float <aspect>k__BackingField;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743950", Offset = "0x743950")]
	private float <fieldOfView>k__BackingField;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743960", Offset = "0x743960")]
	private Vector2 <tanHalfFov>k__BackingField;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743970", Offset = "0x743970")]
	private VRTextureBounds_t[] <textureBounds>k__BackingField;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743980", Offset = "0x743980")]
	private SteamVR_Utils.RigidTransform[] <eyes>k__BackingField;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ETextureType textureType;

	[Token(Token = "0x170000B3")]
	public static bool active
	{
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x9D6654", Offset = "0x9D6654", VA = "0x9D6654")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B4")]
	public static bool enabled
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x9D66C4", Offset = "0x9D66C4", VA = "0x9D66C4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x9D6760", Offset = "0x9D6760", VA = "0x9D6760")]
		set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public static SteamVR instance
	{
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x9D68A4", Offset = "0x9D68A4", VA = "0x9D68A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B6")]
	public static bool usingNativeSupport
	{
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x9D6BE4", Offset = "0x9D6BE4", VA = "0x9D6BE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B7")]
	public CVRSystem hmd
	{
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x9D75B4", Offset = "0x9D75B4", VA = "0x9D75B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74601C", Offset = "0x74601C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x9D75BC", Offset = "0x9D75BC", VA = "0x9D75BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74602C", Offset = "0x74602C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B8")]
	public CVRCompositor compositor
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x9D75C4", Offset = "0x9D75C4", VA = "0x9D75C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74603C", Offset = "0x74603C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x9D75CC", Offset = "0x9D75CC", VA = "0x9D75CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74604C", Offset = "0x74604C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public CVROverlay overlay
	{
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x9D75D4", Offset = "0x9D75D4", VA = "0x9D75D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74605C", Offset = "0x74605C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x9D75DC", Offset = "0x9D75DC", VA = "0x9D75DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74606C", Offset = "0x74606C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BA")]
	public static bool initializing
	{
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x9D75E4", Offset = "0x9D75E4", VA = "0x9D75E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74607C", Offset = "0x74607C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x9D764C", Offset = "0x9D764C", VA = "0x9D764C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74608C", Offset = "0x74608C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BB")]
	public static bool calibrating
	{
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x9D76BC", Offset = "0x9D76BC", VA = "0x9D76BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74609C", Offset = "0x74609C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x9D7724", Offset = "0x9D7724", VA = "0x9D7724")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460AC", Offset = "0x7460AC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BC")]
	public static bool outOfRange
	{
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x9D7794", Offset = "0x9D7794", VA = "0x9D7794")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460BC", Offset = "0x7460BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x9D77FC", Offset = "0x9D77FC", VA = "0x9D77FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460CC", Offset = "0x7460CC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BD")]
	public float sceneWidth
	{
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x9D786C", Offset = "0x9D786C", VA = "0x9D786C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460DC", Offset = "0x7460DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x9D7874", Offset = "0x9D7874", VA = "0x9D7874")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460EC", Offset = "0x7460EC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BE")]
	public float sceneHeight
	{
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x9D787C", Offset = "0x9D787C", VA = "0x9D787C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7460FC", Offset = "0x7460FC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x9D7884", Offset = "0x9D7884", VA = "0x9D7884")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74610C", Offset = "0x74610C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BF")]
	public float aspect
	{
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x9D788C", Offset = "0x9D788C", VA = "0x9D788C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74611C", Offset = "0x74611C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x9D7894", Offset = "0x9D7894", VA = "0x9D7894")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74612C", Offset = "0x74612C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C0")]
	public float fieldOfView
	{
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x9D789C", Offset = "0x9D789C", VA = "0x9D789C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74613C", Offset = "0x74613C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x9D78A4", Offset = "0x9D78A4", VA = "0x9D78A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74614C", Offset = "0x74614C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C1")]
	public Vector2 tanHalfFov
	{
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x9D78AC", Offset = "0x9D78AC", VA = "0x9D78AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74615C", Offset = "0x74615C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x9D78B4", Offset = "0x9D78B4", VA = "0x9D78B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74616C", Offset = "0x74616C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C2")]
	public VRTextureBounds_t[] textureBounds
	{
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x9D78BC", Offset = "0x9D78BC", VA = "0x9D78BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74617C", Offset = "0x74617C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x9D78C4", Offset = "0x9D78C4", VA = "0x9D78C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74618C", Offset = "0x74618C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C3")]
	public SteamVR_Utils.RigidTransform[] eyes
	{
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x9D78CC", Offset = "0x9D78CC", VA = "0x9D78CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x74619C", Offset = "0x74619C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x9D78D4", Offset = "0x9D78D4", VA = "0x9D78D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7461AC", Offset = "0x7461AC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C4")]
	public string hmd_TrackingSystemName
	{
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x9D78DC", Offset = "0x9D78DC", VA = "0x9D78DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C5")]
	public string hmd_ModelNumber
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x9D7A30", Offset = "0x9D7A30", VA = "0x9D7A30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C6")]
	public string hmd_SerialNumber
	{
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x9D7A3C", Offset = "0x9D7A3C", VA = "0x9D7A3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C7")]
	public float hmd_SecondsFromVsyncToPhotons
	{
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x9D7A48", Offset = "0x9D7A48", VA = "0x9D7A48")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000C8")]
	public float hmd_DisplayFrequency
	{
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x9D7A94", Offset = "0x9D7A94", VA = "0x9D7A94")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x9D69BC", Offset = "0x9D69BC", VA = "0x9D69BC")]
	private static SteamVR CreateInstance()
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x9D6C50", Offset = "0x9D6C50", VA = "0x9D6C50")]
	private static void ReportError(EVRInitError error)
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x9D7AA0", Offset = "0x9D7AA0", VA = "0x9D7AA0")]
	public string GetTrackedDeviceString(uint deviceId)
	{
		return null;
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x9D78E8", Offset = "0x9D78E8", VA = "0x9D78E8")]
	public string GetStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return null;
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x9D7A54", Offset = "0x9D7A54", VA = "0x9D7A54")]
	public float GetFloatProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return default(float);
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x9D7B88", Offset = "0x9D7B88", VA = "0x9D7B88")]
	private void OnInitializing(bool initializing)
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x9D7C3C", Offset = "0x9D7C3C", VA = "0x9D7C3C")]
	private void OnCalibrating(bool calibrating)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x9D7CF0", Offset = "0x9D7CF0", VA = "0x9D7CF0")]
	private void OnOutOfRange(bool outOfRange)
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x9D7DA4", Offset = "0x9D7DA4", VA = "0x9D7DA4")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x9D7E48", Offset = "0x9D7E48", VA = "0x9D7E48")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x9D6DA4", Offset = "0x9D6DA4", VA = "0x9D6DA4")]
	private SteamVR()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x9D82F4", Offset = "0x9D82F4", VA = "0x9D82F4", Slot = "1")]
	~SteamVR()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x9D85A4", Offset = "0x9D85A4", VA = "0x9D85A4", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x9D8360", Offset = "0x9D8360", VA = "0x9D8360")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x9D6800", Offset = "0x9D6800", VA = "0x9D6800")]
	public static void SafeDispose()
	{
	}
}
[Token(Token = "0x20000F5")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F904", Offset = "0x73F904")]
public class SteamVR_Camera : MonoBehaviour
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _head;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7439A0", Offset = "0x7439A0")]
	private Camera <camera>k__BackingField;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform _ears;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wireframe;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static System.Collections.Hashtable values;

	[Token(Token = "0x40005AC")]
	private const string eyeSuffix = " (eye)";

	[Token(Token = "0x40005AD")]
	private const string earsSuffix = " (ears)";

	[Token(Token = "0x40005AE")]
	private const string headSuffix = " (head)";

	[Token(Token = "0x40005AF")]
	private const string originSuffix = " (origin)";

	[Token(Token = "0x170000C9")]
	public Transform head
	{
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x9D868C", Offset = "0x9D868C", VA = "0x9D868C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CA")]
	public Transform offset
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x9D8694", Offset = "0x9D8694", VA = "0x9D8694")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CB")]
	public Transform origin
	{
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x9D869C", Offset = "0x9D869C", VA = "0x9D869C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CC")]
	public Camera camera
	{
		[Token(Token = "0x6000660")]
		[Address(RVA = "0x9D86B8", Offset = "0x9D86B8", VA = "0x9D86B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7461BC", Offset = "0x7461BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x9D86C0", Offset = "0x9D86C0", VA = "0x9D86C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7461CC", Offset = "0x7461CC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public Transform ears
	{
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x9D86C8", Offset = "0x9D86C8", VA = "0x9D86C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CE")]
	public static float sceneResolutionScale
	{
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x9D8758", Offset = "0x9D8758", VA = "0x9D8758")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x9D8760", Offset = "0x9D8760", VA = "0x9D8760")]
		set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public string baseName
	{
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x9D9868", Offset = "0x9D9868", VA = "0x9D9868")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x9D86D0", Offset = "0x9D86D0", VA = "0x9D86D0")]
	public Ray GetRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x9D8768", Offset = "0x9D8768", VA = "0x9D8768")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x9D8770", Offset = "0x9D8770", VA = "0x9D8770")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x9D91F8", Offset = "0x9D91F8", VA = "0x9D91F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x9D9254", Offset = "0x9D9254", VA = "0x9D9254")]
	public void ForceLast()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x9D8ACC", Offset = "0x9D8ACC", VA = "0x9D8ACC")]
	public void Expand()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x9D9938", Offset = "0x9D9938", VA = "0x9D9938")]
	public void Collapse()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x9D9D38", Offset = "0x9D9D38", VA = "0x9D9D38")]
	public SteamVR_Camera()
	{
	}
}
[Token(Token = "0x20000F6")]
[ExecuteInEditMode]
public class SteamVR_CameraFlip : MonoBehaviour
{
	[Token(Token = "0x600066E")]
	[Address(RVA = "0x9D9D40", Offset = "0x9D9D40", VA = "0x9D9D40")]
	private void Awake()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x9D9DDC", Offset = "0x9D9DDC", VA = "0x9D9DDC")]
	public SteamVR_CameraFlip()
	{
	}
}
[Token(Token = "0x20000F7")]
[ExecuteInEditMode]
public class SteamVR_CameraMask : MonoBehaviour
{
	[Token(Token = "0x6000670")]
	[Address(RVA = "0x9D9DE4", Offset = "0x9D9DE4", VA = "0x9D9DE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x9D9E80", Offset = "0x9D9E80", VA = "0x9D9E80")]
	public SteamVR_CameraMask()
	{
	}
}
[Token(Token = "0x20000F8")]
public class SteamVR_Controller
{
	[Token(Token = "0x2000293")]
	public class ButtonMask
	{
		[Token(Token = "0x400108B")]
		public const ulong System = 1uL;

		[Token(Token = "0x400108C")]
		public const ulong ApplicationMenu = 2uL;

		[Token(Token = "0x400108D")]
		public const ulong Grip = 4uL;

		[Token(Token = "0x400108E")]
		public const ulong Axis0 = 4294967296uL;

		[Token(Token = "0x400108F")]
		public const ulong Axis1 = 8589934592uL;

		[Token(Token = "0x4001090")]
		public const ulong Axis2 = 17179869184uL;

		[Token(Token = "0x4001091")]
		public const ulong Axis3 = 34359738368uL;

		[Token(Token = "0x4001092")]
		public const ulong Axis4 = 68719476736uL;

		[Token(Token = "0x4001093")]
		public const ulong Touchpad = 4294967296uL;

		[Token(Token = "0x4001094")]
		public const ulong Trigger = 8589934592uL;

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x9DA5B8", Offset = "0x9DA5B8", VA = "0x9DA5B8")]
		public ButtonMask()
		{
		}
	}

	[Token(Token = "0x2000294")]
	public class Device
	{
		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7448C0", Offset = "0x7448C0")]
		private uint <index>k__BackingField;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7448D0", Offset = "0x7448D0")]
		private bool <valid>k__BackingField;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRControllerState_t state;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRControllerState_t prevState;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TrackedDevicePose_t pose;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int prevFrameCount;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float hairTriggerDelta;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float hairTriggerLimit;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool hairTriggerState;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool hairTriggerPrevState;

		[Token(Token = "0x1700015D")]
		public uint index
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x9DA5C0", Offset = "0x9DA5C0", VA = "0x9DA5C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747520", Offset = "0x747520")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x9DA5C8", Offset = "0x9DA5C8", VA = "0x9DA5C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747530", Offset = "0x747530")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public bool valid
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x9DA5D0", Offset = "0x9DA5D0", VA = "0x9DA5D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747540", Offset = "0x747540")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x9DA5D8", Offset = "0x9DA5D8", VA = "0x9DA5D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747550", Offset = "0x747550")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public bool connected
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x9DA58C", Offset = "0x9DA58C", VA = "0x9DA58C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000160")]
		public bool hasTracking
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x9DA5E4", Offset = "0x9DA5E4", VA = "0x9DA5E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000161")]
		public bool outOfRange
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x9DA608", Offset = "0x9DA608", VA = "0x9DA608")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		public bool calibrating
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x9DA640", Offset = "0x9DA640", VA = "0x9DA640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000163")]
		public bool uninitialized
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x9DA670", Offset = "0x9DA670", VA = "0x9DA670")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000164")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x9DA530", Offset = "0x9DA530", VA = "0x9DA530")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x17000165")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0x9DA69C", Offset = "0x9DA69C", VA = "0x9DA69C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000166")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0x9DA6EC", Offset = "0x9DA6EC", VA = "0x9DA6EC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x9D9FD4", Offset = "0x9D9FD4", VA = "0x9D9FD4")]
		public Device(uint i)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x9DA740", Offset = "0x9DA740", VA = "0x9DA740")]
		public VRControllerState_t GetState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x9DA77C", Offset = "0x9DA77C", VA = "0x9DA77C")]
		public VRControllerState_t GetPrevState()
		{
			return default(VRControllerState_t);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x9DA7B8", Offset = "0x9DA7B8", VA = "0x9DA7B8")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x9DA048", Offset = "0x9DA048", VA = "0x9DA048")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x9DA8E8", Offset = "0x9DA8E8", VA = "0x9DA8E8")]
		public bool GetPress(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x9DA918", Offset = "0x9DA918", VA = "0x9DA918")]
		public bool GetPressDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x9DA95C", Offset = "0x9DA95C", VA = "0x9DA95C")]
		public bool GetPressUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x9DA9A0", Offset = "0x9DA9A0", VA = "0x9DA9A0")]
		public bool GetPress(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x9DA9D4", Offset = "0x9DA9D4", VA = "0x9DA9D4")]
		public bool GetPressDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x9DAA1C", Offset = "0x9DAA1C", VA = "0x9DAA1C")]
		public bool GetPressUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x9DAA64", Offset = "0x9DAA64", VA = "0x9DAA64")]
		public bool GetTouch(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x9DAA94", Offset = "0x9DAA94", VA = "0x9DAA94")]
		public bool GetTouchDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x9DAAD8", Offset = "0x9DAAD8", VA = "0x9DAAD8")]
		public bool GetTouchUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x9DAB1C", Offset = "0x9DAB1C", VA = "0x9DAB1C")]
		public bool GetTouch(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x9DAB50", Offset = "0x9DAB50", VA = "0x9DAB50")]
		public bool GetTouchDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x9DAB98", Offset = "0x9DAB98", VA = "0x9DAB98")]
		public bool GetTouchUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x9DABE0", Offset = "0x9DABE0", VA = "0x9DABE0")]
		public Vector2 GetAxis(EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x9DACBC", Offset = "0x9DACBC", VA = "0x9DACBC")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x9DA7E8", Offset = "0x9DA7E8", VA = "0x9DA7E8")]
		private void UpdateHairTrigger()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x9DAD58", Offset = "0x9DAD58", VA = "0x9DAD58")]
		public bool GetHairTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x9DAD7C", Offset = "0x9DAD7C", VA = "0x9DAD7C")]
		public bool GetHairTriggerDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x9DADB8", Offset = "0x9DADB8", VA = "0x9DADB8")]
		public bool GetHairTriggerUp()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000295")]
	public enum DeviceRelation
	{
		[Token(Token = "0x40010A0")]
		First,
		[Token(Token = "0x40010A1")]
		Leftmost,
		[Token(Token = "0x40010A2")]
		Rightmost,
		[Token(Token = "0x40010A3")]
		FarthestLeft,
		[Token(Token = "0x40010A4")]
		FarthestRight
	}

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Device[] devices;

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x9D9E88", Offset = "0x9D9E88", VA = "0x9D9E88")]
	public static Device Input(int deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x9DA00C", Offset = "0x9DA00C", VA = "0x9DA00C")]
	public static void Update()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x9DA1D4", Offset = "0x9DA1D4", VA = "0x9DA1D4")]
	public static int GetDeviceIndex(DeviceRelation relation, ETrackedDeviceClass deviceClass = ETrackedDeviceClass.Controller, int relativeTo = 0)
	{
		return default(int);
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x9DA5B0", Offset = "0x9DA5B0", VA = "0x9DA5B0")]
	public SteamVR_Controller()
	{
	}
}
[Token(Token = "0x20000F9")]
public class SteamVR_ControllerManager : MonoBehaviour
{
	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject left;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject right;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7439C0", Offset = "0x7439C0")]
	public GameObject[] objects;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7439F8", Offset = "0x7439F8")]
	public bool assignAllBeforeIdentified;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint[] indices;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool[] connected;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private uint leftIndex;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private uint rightIndex;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action inputFocusAction;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SteamVR_Events.Action trackedDeviceRoleChangedAction;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string hiddenPrefix;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string hiddenPostfix;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[] labels;

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x9DADF4", Offset = "0x9DADF4", VA = "0x9DADF4")]
	private void SetUniqueObject(GameObject o, int index)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x9DAF08", Offset = "0x9DAF08", VA = "0x9DAF08")]
	public void UpdateTargets()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x9DB044", Offset = "0x9DB044", VA = "0x9DB044")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x9DB048", Offset = "0x9DB048", VA = "0x9DB048")]
	private SteamVR_ControllerManager()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x9DB38C", Offset = "0x9DB38C", VA = "0x9DB38C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x9DB92C", Offset = "0x9DB92C", VA = "0x9DB92C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x9DB990", Offset = "0x9DB990", VA = "0x9DB990")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x9DBD40", Offset = "0x9DBD40", VA = "0x9DBD40")]
	private void HideObject(Transform t, string name)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x9DBC4C", Offset = "0x9DBC4C", VA = "0x9DBC4C")]
	private void ShowObject(Transform t, string name)
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x9DBEB0", Offset = "0x9DBEB0", VA = "0x9DBEB0")]
	private void SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex)
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x9DC0FC", Offset = "0x9DC0FC", VA = "0x9DC0FC")]
	private void OnTrackedDeviceRoleChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x9DB808", Offset = "0x9DB808", VA = "0x9DB808")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x9DB56C", Offset = "0x9DB56C", VA = "0x9DB56C")]
	public void Refresh()
	{
	}
}
[Token(Token = "0x20000FA")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F988", Offset = "0x73F988")]
public class SteamVR_Ears : MonoBehaviour
{
	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_Camera vrcam;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool usingSpeakers;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion offset;

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x9DC224", Offset = "0x9DC224", VA = "0x9DC224")]
	private void OnNewPosesApplied()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x9DC398", Offset = "0x9DC398", VA = "0x9DC398")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x9DC53C", Offset = "0x9DC53C", VA = "0x9DC53C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x9DC610", Offset = "0x9DC610", VA = "0x9DC610")]
	public SteamVR_Ears()
	{
	}
}
[Token(Token = "0x20000FB")]
public static class SteamVR_Events
{
	[Token(Token = "0x2000296")]
	public abstract class Action
	{
		[Token(Token = "0x17000167")]
		public bool enabled
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x9DB91C", Offset = "0x9DB91C", VA = "0x9DB91C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D9E")]
		public abstract void Enable(bool enabled);

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x9DD1AC", Offset = "0x9DD1AC", VA = "0x9DD1AC")]
		protected Action()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000297")]
	public class ActionNoArgs : Action
	{
		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Event _event;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityAction action;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x9DC7F8", Offset = "0x9DC7F8", VA = "0x9DC7F8")]
		public ActionNoArgs(Event _event, UnityAction action)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x9DD1B4", Offset = "0x9DD1B4", VA = "0x9DD1B4", Slot = "4")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000298")]
	public class Action<T> : Action
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T> _event;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T> action;

		[Token(Token = "0x6000DA3")]
		public Action(Event<T> _event, UnityAction<T> action)
		{
		}

		[Token(Token = "0x6000DA4")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000299")]
	public class Action<T0, T1> : Action
	{
		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1> _event;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1> action;

		[Token(Token = "0x6000DA5")]
		public Action(Event<T0, T1> _event, UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x6000DA6")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200029A")]
	public class Action<T0, T1, T2> : Action
	{
		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1, T2> _event;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1, T2> action;

		[Token(Token = "0x6000DA7")]
		public Action(Event<T0, T1, T2> _event, UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6000DA8")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Token(Token = "0x200029B")]
	public class Event : UnityEvent
	{
		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x9DC534", Offset = "0x9DC534", VA = "0x9DC534")]
		public void Listen(UnityAction action)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x9DC608", Offset = "0x9DC608", VA = "0x9DC608")]
		public void Remove(UnityAction action)
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x9DD1E4", Offset = "0x9DD1E4", VA = "0x9DD1E4")]
		public void Send()
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x9DD1A4", Offset = "0x9DD1A4", VA = "0x9DD1A4")]
		public Event()
		{
		}
	}

	[Token(Token = "0x200029C")]
	public class Event<T> : UnityEvent<T>
	{
		[Token(Token = "0x6000DAD")]
		public void Listen(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6000DAE")]
		public void Remove(UnityAction<T> action)
		{
		}

		[Token(Token = "0x6000DAF")]
		public void Send(T arg0)
		{
		}

		[Token(Token = "0x6000DB0")]
		public Event()
		{
		}
	}

	[Token(Token = "0x200029D")]
	public class Event<T0, T1> : UnityEvent<T0, T1>
	{
		[Token(Token = "0x6000DB1")]
		public void Listen(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x6000DB2")]
		public void Remove(UnityAction<T0, T1> action)
		{
		}

		[Token(Token = "0x6000DB3")]
		public void Send(T0 arg0, T1 arg1)
		{
		}

		[Token(Token = "0x6000DB4")]
		public Event()
		{
		}
	}

	[Token(Token = "0x200029E")]
	public class Event<T0, T1, T2> : UnityEvent<T0, T1, T2>
	{
		[Token(Token = "0x6000DB5")]
		public void Listen(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6000DB6")]
		public void Remove(UnityAction<T0, T1, T2> action)
		{
		}

		[Token(Token = "0x6000DB7")]
		public void Send(T0 arg0, T1 arg1, T2 arg2)
		{
		}

		[Token(Token = "0x6000DB8")]
		public Event()
		{
		}
	}

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Event<bool> Calibrating;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Event<int, bool> DeviceConnected;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Event<Color, float, bool> Fade;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Event FadeReady;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Event<bool> HideRenderModels;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Event<bool> Initializing;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Event<bool> InputFocus;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Event<bool> Loading;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Event<float> LoadingFadeIn;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Event<float> LoadingFadeOut;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Event<TrackedDevicePose_t[]> NewPoses;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Event NewPosesApplied;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Event<bool> OutOfRange;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Event<SteamVR_RenderModel, bool> RenderModelLoaded;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Dictionary<EVREventType, Event<VREvent_t>> systemEvents;

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x9DC618", Offset = "0x9DC618", VA = "0x9DC618")]
	public static Action CalibratingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x9DB23C", Offset = "0x9DB23C", VA = "0x9DB23C")]
	public static Action DeviceConnectedAction(UnityAction<int, bool> action)
	{
		return null;
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x9DC6BC", Offset = "0x9DC6BC", VA = "0x9DC6BC")]
	public static Action FadeAction(UnityAction<Color, float, bool> action)
	{
		return null;
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x9DC760", Offset = "0x9DC760", VA = "0x9DC760")]
	public static Action FadeReadyAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x9DC830", Offset = "0x9DC830", VA = "0x9DC830")]
	public static Action HideRenderModelsAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x9DC8D4", Offset = "0x9DC8D4", VA = "0x9DC8D4")]
	public static Action InitializingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x9DB198", Offset = "0x9DB198", VA = "0x9DB198")]
	public static Action InputFocusAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x9DC978", Offset = "0x9DC978", VA = "0x9DC978")]
	public static Action LoadingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x9DCA1C", Offset = "0x9DCA1C", VA = "0x9DCA1C")]
	public static Action LoadingFadeInAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x9DCAC0", Offset = "0x9DCAC0", VA = "0x9DCAC0")]
	public static Action LoadingFadeOutAction(UnityAction<float> action)
	{
		return null;
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x9DCB64", Offset = "0x9DCB64", VA = "0x9DCB64")]
	public static Action NewPosesAction(UnityAction<TrackedDevicePose_t[]> action)
	{
		return null;
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x9DCC08", Offset = "0x9DCC08", VA = "0x9DCC08")]
	public static Action NewPosesAppliedAction(UnityAction action)
	{
		return null;
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x9DCCA0", Offset = "0x9DCCA0", VA = "0x9DCCA0")]
	public static Action OutOfRangeAction(UnityAction<bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x9DCD44", Offset = "0x9DCD44", VA = "0x9DCD44")]
	public static Action RenderModelLoadedAction(UnityAction<SteamVR_RenderModel, bool> action)
	{
		return null;
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0x9DCDE8", Offset = "0x9DCDE8", VA = "0x9DCDE8")]
	public static Event<VREvent_t> System(EVREventType eventType)
	{
		return null;
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0x9DB2E0", Offset = "0x9DB2E0", VA = "0x9DB2E0")]
	public static Action SystemAction(EVREventType eventType, UnityAction<VREvent_t> action)
	{
		return null;
	}
}
[Token(Token = "0x20000FC")]
public class SteamVR_ExternalCamera : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200029F")]
	public struct Config
	{
		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rx;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float ry;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rz;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fov;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float near;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float far;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sceneResolutionScale;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float frameSkip;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float nearOffset;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farOffset;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hmdOffset;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float r;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float g;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float b;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float a;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool disableStandardAssets;
	}

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Config config;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string configPath;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private FileSystemWatcher watcher;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Camera cam;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform target;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject clipQuad;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material clipMaterial;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Material colorMat;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Material alphaMat;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Camera[] cameras;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] cameraRects;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float sceneResolutionScale;

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x9DD1EC", Offset = "0x9DD1EC", VA = "0x9DD1EC")]
	public void ReadConfig()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x9DDAF4", Offset = "0x9DDAF4", VA = "0x9DDAF4")]
	private void OnChanged(object source, FileSystemEventArgs e)
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x9DDAF8", Offset = "0x9DDAF8", VA = "0x9DDAF8")]
	public void AttachToCamera(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x9DE0A8", Offset = "0x9DE0A8", VA = "0x9DE0A8")]
	public float GetTargetDistance()
	{
		return default(float);
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x9DE354", Offset = "0x9DE354", VA = "0x9DE354")]
	public void RenderNear()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x9DEAAC", Offset = "0x9DEAAC", VA = "0x9DEAAC")]
	public void RenderFar()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x9DEBCC", Offset = "0x9DEBCC", VA = "0x9DEBCC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x9DEBD0", Offset = "0x9DEBD0", VA = "0x9DEBD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x9DEE20", Offset = "0x9DEE20", VA = "0x9DEE20")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x9DEF5C", Offset = "0x9DEF5C", VA = "0x9DEF5C")]
	public SteamVR_ExternalCamera()
	{
	}
}
[Token(Token = "0x20000FD")]
public class SteamVR_Fade : MonoBehaviour
{
	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color currentColor;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color targetColor;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color deltaColor;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool fadeOverlay;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material fadeMaterial;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int fadeMaterialColorID;

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x9DEF64", Offset = "0x9DEF64", VA = "0x9DEF64")]
	public static void Start(Color newColor, float duration, bool fadeOverlay = false)
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x9DF028", Offset = "0x9DF028", VA = "0x9DF028")]
	public static void View(Color newColor, float duration)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x9DF0F0", Offset = "0x9DF0F0", VA = "0x9DF0F0")]
	public void OnStartFade(Color newColor, float duration, bool fadeOverlay)
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x9DF158", Offset = "0x9DF158", VA = "0x9DF158")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x9DF318", Offset = "0x9DF318", VA = "0x9DF318")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x9DF3DC", Offset = "0x9DF3DC", VA = "0x9DF3DC")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x9DF704", Offset = "0x9DF704", VA = "0x9DF704")]
	public SteamVR_Fade()
	{
	}
}
[Token(Token = "0x20000FE")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73F9EC", Offset = "0x73F9EC")]
public class SteamVR_Frustum : MonoBehaviour
{
	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fovLeft;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fovRight;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fovTop;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fovBottom;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float nearZ;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float farZ;

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x9DF80C", Offset = "0x9DF80C", VA = "0x9DF80C")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x9DFFF4", Offset = "0x9DFFF4", VA = "0x9DFFF4")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x9E01B0", Offset = "0x9E01B0", VA = "0x9E01B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x9E0298", Offset = "0x9E0298", VA = "0x9E0298")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x9E0380", Offset = "0x9E0380", VA = "0x9E0380")]
	public SteamVR_Frustum()
	{
	}
}
[Token(Token = "0x20000FF")]
[ExecuteInEditMode]
public class SteamVR_GameView : MonoBehaviour
{
	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x9E03A0", Offset = "0x9E03A0", VA = "0x9E03A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x9E043C", Offset = "0x9E043C", VA = "0x9E043C")]
	public SteamVR_GameView()
	{
	}
}
[Token(Token = "0x2000100")]
public class SteamVR_IK : MonoBehaviour
{
	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform start;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform joint;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform end;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform poleVector;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform upVector;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float blendPct;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Transform startXform;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform jointXform;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Transform endXform;

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x9E0A84", Offset = "0x9E0A84", VA = "0x9E0A84")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x9E142C", Offset = "0x9E142C", VA = "0x9E142C")]
	public static bool Solve(Vector3 start, Vector3 end, Vector3 poleVector, float jointDist, float targetDist, ref Vector3 result, out Vector3 forward, out Vector3 up)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x9E1944", Offset = "0x9E1944", VA = "0x9E1944")]
	public SteamVR_IK()
	{
	}
}
[Token(Token = "0x2000101")]
public class SteamVR_LoadLevel : MonoBehaviour
{
	[Token(Token = "0x20002A0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x740544", Offset = "0x740544")]
	private sealed class <LoadLevel>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_LoadLevel <>4__this;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVROverlay <overlay>5__2;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <fadedForeground>5__3;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRCompositor <compositor>5__4;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_Controller.Device <hmd>5__5;

		[Token(Token = "0x17000168")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x9E4130", Offset = "0x9E4130", VA = "0x9E4130", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x9E4198", Offset = "0x9E4198", VA = "0x9E4198", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x9E32C0", Offset = "0x9E32C0", VA = "0x9E32C0")]
		[DebuggerHidden]
		public <LoadLevel>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x9E33CC", Offset = "0x9E33CC", VA = "0x9E33CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x9E33D0", Offset = "0x9E33D0", VA = "0x9E33D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x9E4138", Offset = "0x9E4138", VA = "0x9E4138", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SteamVR_LoadLevel _active;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string levelName;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string internalProcessPath;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string internalProcessArgs;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadAdditive;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool loadAsync;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture loadingScreen;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture progressBarEmpty;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture progressBarFull;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float loadingScreenWidthInMeters;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float progressBarWidthInMeters;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float loadingScreenDistance;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform loadingScreenTransform;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform progressBarTransform;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture front;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture back;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture left;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Texture right;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture top;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Texture bottom;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color backgroundColor;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool showGrid;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float fadeOutTime;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float fadeInTime;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float postLoadSettleTime;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float loadingScreenFadeInTime;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float loadingScreenFadeOutTime;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float fadeRate;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float alpha;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AsyncOperation async;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RenderTexture renderTexture;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ulong loadingScreenOverlayHandle;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ulong progressBarOverlayHandle;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool autoTriggerOnEnable;

	[Token(Token = "0x170000D0")]
	public static bool loading
	{
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x9E24C4", Offset = "0x9E24C4", VA = "0x9E24C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D1")]
	public static float progress
	{
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x9E255C", Offset = "0x9E255C", VA = "0x9E255C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D2")]
	public static Texture progressTexture
	{
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x9E2670", Offset = "0x9E2670", VA = "0x9E2670")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x9E2748", Offset = "0x9E2748", VA = "0x9E2748")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x9E2758", Offset = "0x9E2758", VA = "0x9E2758")]
	public void Trigger()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x9E2860", Offset = "0x9E2860", VA = "0x9E2860")]
	public static void Begin(string levelName, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x9E296C", Offset = "0x9E296C", VA = "0x9E296C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x9E3158", Offset = "0x9E3158", VA = "0x9E3158")]
	private void Update()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x9E27F0", Offset = "0x9E27F0", VA = "0x9E27F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7461DC", Offset = "0x7461DC")]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x9E2DB0", Offset = "0x9E2DB0", VA = "0x9E2DB0")]
	private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
	{
		return default(ulong);
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x9E3364", Offset = "0x9E3364", VA = "0x9E3364")]
	public SteamVR_LoadLevel()
	{
	}
}
[Token(Token = "0x2000102")]
public class SteamVR_Menu : MonoBehaviour
{
	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture cursor;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture background;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture logo;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float logoHeight;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float menuOffset;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 scaleLimits;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float scaleRate;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Overlay overlay;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera overlayCam;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector4 uvOffset;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743A60", Offset = "0x743A60")]
	private float <scale>k__BackingField;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string scaleLimitX;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string scaleLimitY;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string scaleRateText;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CursorLockMode savedCursorLockState;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool savedCursorVisible;

	[Token(Token = "0x170000D3")]
	public RenderTexture texture
	{
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x9E41A0", Offset = "0x9E41A0", VA = "0x9E41A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D4")]
	public float scale
	{
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x9E426C", Offset = "0x9E426C", VA = "0x9E426C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746240", Offset = "0x746240")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x9E4274", Offset = "0x9E4274", VA = "0x9E4274")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746250", Offset = "0x746250")]
		private set
		{
		}
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x9E427C", Offset = "0x9E427C", VA = "0x9E427C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x9E43E4", Offset = "0x9E43E4", VA = "0x9E43E4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x9E5F74", Offset = "0x9E5F74", VA = "0x9E5F74")]
	public void ShowMenu()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x9E5E70", Offset = "0x9E5E70", VA = "0x9E5E70")]
	public void HideMenu()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x9E6330", Offset = "0x9E6330", VA = "0x9E6330")]
	private void Update()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x9E5D80", Offset = "0x9E5D80", VA = "0x9E5D80")]
	private void SetScale(float scale)
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x9E62C8", Offset = "0x9E62C8", VA = "0x9E62C8")]
	private void SaveCursorState()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x9E6300", Offset = "0x9E6300", VA = "0x9E6300")]
	private void RestoreCursorState()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x9E6500", Offset = "0x9E6500", VA = "0x9E6500")]
	public SteamVR_Menu()
	{
	}
}
[Token(Token = "0x2000103")]
public class SteamVR_Overlay : MonoBehaviour
{
	[Token(Token = "0x20002A1")]
	public struct IntersectionResults
	{
		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 point;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 normal;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 UVs;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;
	}

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture texture;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool curved;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool antialias;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool highquality;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743A70", Offset = "0x743A70")]
	public float scale;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743AA8", Offset = "0x743AA8")]
	public float distance;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743AE0", Offset = "0x743AE0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743AE0", Offset = "0x743AE0")]
	public float alpha;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 uvOffset;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 mouseScale;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 curvedRange;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VROverlayInputMethod inputMethod;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743B34", Offset = "0x743B34")]
	private static SteamVR_Overlay <instance>k__BackingField;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ulong handle;

	[Token(Token = "0x170000D5")]
	public static SteamVR_Overlay instance
	{
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x9E6554", Offset = "0x9E6554", VA = "0x9E6554")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746260", Offset = "0x746260")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x9E65A4", Offset = "0x9E65A4", VA = "0x9E65A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746270", Offset = "0x746270")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public static string key
	{
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x9E32EC", Offset = "0x9E32EC", VA = "0x9E32EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x9E65F8", Offset = "0x9E65F8", VA = "0x9E65F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x9E6748", Offset = "0x9E6748", VA = "0x9E6748")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x9E6804", Offset = "0x9E6804", VA = "0x9E6804")]
	public void UpdateOverlay()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x9E6C48", Offset = "0x9E6C48", VA = "0x9E6C48")]
	public bool PollNextEvent(ref VREvent_t pEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x9E6D54", Offset = "0x9E6D54", VA = "0x9E6D54")]
	public bool ComputeIntersection(Vector3 source, Vector3 direction, ref IntersectionResults results)
	{
		return default(bool);
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x9E6F14", Offset = "0x9E6F14", VA = "0x9E6F14")]
	public SteamVR_Overlay()
	{
	}
}
[Token(Token = "0x2000104")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FA8C", Offset = "0x73FA8C")]
public class SteamVR_PlayArea : MonoBehaviour
{
	[Token(Token = "0x20002A2")]
	public enum Size
	{
		[Token(Token = "0x40010CC")]
		Calibrated,
		[Token(Token = "0x40010CD")]
		_400x300,
		[Token(Token = "0x40010CE")]
		_300x225,
		[Token(Token = "0x40010CF")]
		_200x150
	}

	[Token(Token = "0x20002A3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x740554", Offset = "0x740554")]
	private sealed class <UpdateBounds>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_PlayArea <>4__this;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVRChaperone <chaperone>5__2;

		[Token(Token = "0x1700016A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x9BCCB8", Offset = "0x9BCCB8", VA = "0x9BCCB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x9BCD20", Offset = "0x9BCD20", VA = "0x9BCD20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x9BCB64", Offset = "0x9BCB64", VA = "0x9BCB64")]
		[DebuggerHidden]
		public <UpdateBounds>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x9BCB90", Offset = "0x9BCB90", VA = "0x9BCB90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x9BCB94", Offset = "0x9BCB94", VA = "0x9BCB94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x9BCCC0", Offset = "0x9BCCC0", VA = "0x9BCCC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float borderThickness;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wireframeHeight;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool drawWireframeWhenSelectedOnly;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool drawInGame;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Size size;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Vector3[] vertices;

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x9E6FDC", Offset = "0x9E6FDC", VA = "0x9E6FDC")]
	public static bool GetBounds(Size size, ref HmdQuad_t pRect)
	{
		return default(bool);
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x9E7360", Offset = "0x9E7360", VA = "0x9E7360")]
	public void BuildMesh()
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x9E7BA8", Offset = "0x9E7BA8", VA = "0x9E7BA8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x9E7E3C", Offset = "0x9E7E3C", VA = "0x9E7E3C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x9E7BB8", Offset = "0x9E7BB8", VA = "0x9E7BB8")]
	public void DrawWireframe()
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x9E7E4C", Offset = "0x9E7E4C", VA = "0x9E7E4C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x9E7F00", Offset = "0x9E7F00", VA = "0x9E7F00")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746280", Offset = "0x746280")]
	private IEnumerator UpdateBounds()
	{
		return null;
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x9E7F70", Offset = "0x9E7F70", VA = "0x9E7F70")]
	public SteamVR_PlayArea()
	{
	}
}
[Token(Token = "0x2000105")]
public class SteamVR_Render : MonoBehaviour
{
	[Token(Token = "0x20002A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x740564", Offset = "0x740564")]
	private sealed class <RenderLoop>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_Render <>4__this;

		[Token(Token = "0x1700016C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0x9BFBA4", Offset = "0x9BFBA4", VA = "0x9BFBA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x9BFC0C", Offset = "0x9BFC0C", VA = "0x9BFC0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x9BD6E0", Offset = "0x9BD6E0", VA = "0x9BD6E0")]
		[DebuggerHidden]
		public <RenderLoop>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x9BF9AC", Offset = "0x9BF9AC", VA = "0x9BF9AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x9BF9B0", Offset = "0x9BF9B0", VA = "0x9BF9B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x9BFBAC", Offset = "0x9BFBAC", VA = "0x9BFBAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool pauseGameWhenDashboardIsVisible;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool lockPhysicsUpdateRateToRenderFrequency;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SteamVR_ExternalCamera externalCamera;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string externalCameraConfigPath;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ETrackingUniverseOrigin trackingSpace;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743B54", Offset = "0x743B54")]
	private static EVREye <eye>k__BackingField;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR_Render _instance;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isQuitting;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SteamVR_Camera[] cameras;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TrackedDevicePose_t[] poses;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TrackedDevicePose_t[] gamePoses;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool _pauseRendering;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float sceneResolutionScale;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeScale;

	[Token(Token = "0x170000D7")]
	public static EVREye eye
	{
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x9BCD28", Offset = "0x9BCD28", VA = "0x9BCD28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7462E4", Offset = "0x7462E4")]
		get
		{
			return default(EVREye);
		}
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x9BCD78", Offset = "0x9BCD78", VA = "0x9BCD78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7462F4", Offset = "0x7462F4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D8")]
	public static SteamVR_Render instance
	{
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x9BCDCC", Offset = "0x9BCDCC", VA = "0x9BCDCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D9")]
	public static bool pauseRendering
	{
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x9BD55C", Offset = "0x9BD55C", VA = "0x9BD55C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x9BD5AC", Offset = "0x9BD5AC", VA = "0x9BD5AC")]
		set
		{
		}
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x9BCF00", Offset = "0x9BCF00", VA = "0x9BCF00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x9BCF50", Offset = "0x9BCF50", VA = "0x9BCF50")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x9BCFC8", Offset = "0x9BCFC8", VA = "0x9BCFC8")]
	public static void Add(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x9BD240", Offset = "0x9BD240", VA = "0x9BD240")]
	public static void Remove(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x9BD4A0", Offset = "0x9BD4A0", VA = "0x9BD4A0")]
	public static SteamVR_Camera Top()
	{
		return null;
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x9BD03C", Offset = "0x9BD03C", VA = "0x9BD03C")]
	private void AddInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x9BD2EC", Offset = "0x9BD2EC", VA = "0x9BD2EC")]
	private void RemoveInternal(SteamVR_Camera vrcam)
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x9BD510", Offset = "0x9BD510", VA = "0x9BD510")]
	private SteamVR_Camera TopInternal()
	{
		return null;
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x9BD670", Offset = "0x9BD670", VA = "0x9BD670")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746304", Offset = "0x746304")]
	private IEnumerator RenderLoop()
	{
		return null;
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x9BD70C", Offset = "0x9BD70C", VA = "0x9BD70C")]
	private void RenderExternalCamera()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x9BD854", Offset = "0x9BD854", VA = "0x9BD854")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x9BD8C4", Offset = "0x9BD8C4", VA = "0x9BD8C4")]
	private void OnQuit(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x9BD8CC", Offset = "0x9BD8CC", VA = "0x9BD8CC")]
	private string GetScreenshotFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames screenshotPropertyFilename)
	{
		return null;
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x9BDA44", Offset = "0x9BDA44", VA = "0x9BDA44")]
	private void OnRequestScreenshot(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x9BEDC0", Offset = "0x9BEDC0", VA = "0x9BEDC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x9BF06C", Offset = "0x9BF06C", VA = "0x9BF06C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x9BF22C", Offset = "0x9BF22C", VA = "0x9BF22C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x9BF394", Offset = "0x9BF394", VA = "0x9BF394")]
	public void UpdatePoses()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x9BF4A4", Offset = "0x9BF4A4", VA = "0x9BF4A4")]
	private void OnBeforeRender()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x9BF4A8", Offset = "0x9BF4A8", VA = "0x9BF4A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x9BF8DC", Offset = "0x9BF8DC", VA = "0x9BF8DC")]
	public SteamVR_Render()
	{
	}
}
[Token(Token = "0x2000106")]
[ExecuteInEditMode]
public class SteamVR_RenderModel : MonoBehaviour
{
	[Token(Token = "0x20002A5")]
	public class RenderModel
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7448E0", Offset = "0x7448E0")]
		private Mesh <mesh>k__BackingField;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7448F0", Offset = "0x7448F0")]
		private Material <material>k__BackingField;

		[Token(Token = "0x1700016E")]
		public Mesh mesh
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x9C37F4", Offset = "0x9C37F4", VA = "0x9C37F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747650", Offset = "0x747650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x9C37FC", Offset = "0x9C37FC", VA = "0x9C37FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747660", Offset = "0x747660")]
			private set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public Material material
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x9C3804", Offset = "0x9C3804", VA = "0x9C3804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747670", Offset = "0x747670")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x9C380C", Offset = "0x9C380C", VA = "0x9C380C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747680", Offset = "0x747680")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x9C2294", Offset = "0x9C2294", VA = "0x9C2294")]
		public RenderModel(Mesh mesh, Material material)
		{
		}
	}

	[Token(Token = "0x20002A6")]
	public sealed class RenderModelInterfaceHolder : IDisposable
	{
		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool needsShutdown;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool failedLoadInterface;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CVRRenderModels _instance;

		[Token(Token = "0x17000170")]
		public CVRRenderModels instance
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x9C0D24", Offset = "0x9C0D24", VA = "0x9C0D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x9C3814", Offset = "0x9C3814", VA = "0x9C3814", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x9C0640", Offset = "0x9C0640", VA = "0x9C0640")]
		public RenderModelInterfaceHolder()
		{
		}
	}

	[Token(Token = "0x20002A7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x740574", Offset = "0x740574")]
	private sealed class <SetModelAsync>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string renderModelName;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_RenderModel <>4__this;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderModelInterfaceHolder <holder>5__2;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRRenderModels <renderModels>5__3;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string[] <renderModelNames>5__4;

		[Token(Token = "0x17000171")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0x9C3784", Offset = "0x9C3784", VA = "0x9C3784", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x9C37EC", Offset = "0x9C37EC", VA = "0x9C37EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x9C0010", Offset = "0x9C0010", VA = "0x9C0010")]
		[DebuggerHidden]
		public <SetModelAsync>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x9C2DA0", Offset = "0x9C2DA0", VA = "0x9C2DA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x9C2E7C", Offset = "0x9C2E7C", VA = "0x9C2E7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x9C2DBC", Offset = "0x9C2DBC", VA = "0x9C2DBC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x9C378C", Offset = "0x9C378C", VA = "0x9C378C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x740584", Offset = "0x740584")]
	private sealed class <FreeRenderModel>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr pRenderModel;

		[Token(Token = "0x17000173")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x9C2D30", Offset = "0x9C2D30", VA = "0x9C2D30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x9C2D98", Offset = "0x9C2D98", VA = "0x9C2D98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x9C22CC", Offset = "0x9C22CC", VA = "0x9C22CC")]
		[DebuggerHidden]
		public <FreeRenderModel>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x9C2B74", Offset = "0x9C2B74", VA = "0x9C2B74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x9C2B78", Offset = "0x9C2B78", VA = "0x9C2B78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x9C2D38", Offset = "0x9C2D38", VA = "0x9C2D38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Token(Token = "0x400064B")]
	public const string modelOverrideWarning = "Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.";

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743B64", Offset = "0x743B64")]
	public string modelOverride;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743B9C", Offset = "0x743B9C")]
	public Shader shader;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743BD4", Offset = "0x743BD4")]
	public bool verbose;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743C0C", Offset = "0x743C0C")]
	public bool createComponents;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743C44", Offset = "0x743C44")]
	public bool updateDynamically;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public RenderModel_ControllerMode_State_t controllerModeState;

	[Token(Token = "0x4000652")]
	public const string k_localTransformName = "attach";

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743C7C", Offset = "0x743C7C")]
	private string <renderModelName>k__BackingField;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static System.Collections.Hashtable models;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static System.Collections.Hashtable materials;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Events.Action hideRenderModelsAction;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action modelSkinSettingsHaveChangedAction;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<int, string> nameCache;

	[Token(Token = "0x170000DA")]
	public string renderModelName
	{
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x9BFC14", Offset = "0x9BFC14", VA = "0x9BFC14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746368", Offset = "0x746368")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x9BFC1C", Offset = "0x9BFC1C", VA = "0x9BFC1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746378", Offset = "0x746378")]
		private set
		{
		}
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x9BFC24", Offset = "0x9BFC24", VA = "0x9BFC24")]
	private void OnModelSkinSettingsHaveChanged(VREvent_t vrEvent)
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x9BFE48", Offset = "0x9BFE48", VA = "0x9BFE48")]
	private void OnHideRenderModels(bool hidden)
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x9BFF7C", Offset = "0x9BFF7C", VA = "0x9BFF7C")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x9BFC94", Offset = "0x9BFC94", VA = "0x9BFC94")]
	public void UpdateModel()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x9BFF94", Offset = "0x9BFF94", VA = "0x9BFF94")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746388", Offset = "0x746388")]
	private IEnumerator SetModelAsync(string renderModelName)
	{
		return null;
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x9C003C", Offset = "0x9C003C", VA = "0x9C003C")]
	private bool SetModel(string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x9C12C4", Offset = "0x9C12C4", VA = "0x9C12C4")]
	private RenderModel LoadRenderModel(CVRRenderModels renderModels, string renderModelName, string baseName)
	{
		return null;
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x9C2224", Offset = "0x9C2224", VA = "0x9C2224")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7463EC", Offset = "0x7463EC")]
	private IEnumerator FreeRenderModel(IntPtr pRenderModel)
	{
		return null;
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x9C22F8", Offset = "0x9C22F8", VA = "0x9C22F8")]
	public Transform FindComponent(string componentName)
	{
		return null;
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0x9C0504", Offset = "0x9C0504", VA = "0x9C0504")]
	private void StripMesh(GameObject go)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x9C0648", Offset = "0x9C0648", VA = "0x9C0648")]
	private bool LoadComponents(RenderModelInterfaceHolder holder, string renderModelName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x9C23E8", Offset = "0x9C23E8", VA = "0x9C23E8")]
	private SteamVR_RenderModel()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x9C2534", Offset = "0x9C2534", VA = "0x9C2534")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x9C2650", Offset = "0x9C2650", VA = "0x9C2650")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x9C26A8", Offset = "0x9C26A8", VA = "0x9C26A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x9C0E84", Offset = "0x9C0E84", VA = "0x9C0E84")]
	public void UpdateComponents(CVRRenderModels renderModels)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x9C2A5C", Offset = "0x9C2A5C", VA = "0x9C2A5C")]
	public void SetDeviceIndex(int index)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x9C1DCC", Offset = "0x9C1DCC", VA = "0x9C1DCC")]
	private static void Sleep()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x9C1DD8", Offset = "0x9C1DD8", VA = "0x9C1DD8")]
	private RenderModel_t MarshalRenderModel(IntPtr pRenderModel)
	{
		return default(RenderModel_t);
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x9C1FFC", Offset = "0x9C1FFC", VA = "0x9C1FFC")]
	private RenderModel_TextureMap_t MarshalRenderModel_TextureMap(IntPtr pRenderModel)
	{
		return default(RenderModel_TextureMap_t);
	}
}
[Token(Token = "0x2000107")]
public class SteamVR_Skybox : MonoBehaviour
{
	[Token(Token = "0x20002A9")]
	public enum CellSize
	{
		[Token(Token = "0x40010E7")]
		x1024,
		[Token(Token = "0x40010E8")]
		x64,
		[Token(Token = "0x40010E9")]
		x32,
		[Token(Token = "0x40010EA")]
		x16,
		[Token(Token = "0x40010EB")]
		x8
	}

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture front;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture back;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture left;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture right;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture top;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture bottom;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CellSize StereoCellSize;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float StereoIpdMm;

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x9C388C", Offset = "0x9C388C", VA = "0x9C388C")]
	public void SetTextureByIndex(int i, Texture t)
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x9C38E0", Offset = "0x9C38E0", VA = "0x9C38E0")]
	public Texture GetTextureByIndex(int i)
	{
		return null;
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x9C393C", Offset = "0x9C393C", VA = "0x9C393C")]
	public static void SetOverride([Optional] Texture front, [Optional] Texture back, [Optional] Texture left, [Optional] Texture right, [Optional] Texture top, [Optional] Texture bottom)
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x9C3CF8", Offset = "0x9C3CF8", VA = "0x9C3CF8")]
	public static void ClearOverride()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x9C3D98", Offset = "0x9C3D98", VA = "0x9C3D98")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x9C3DAC", Offset = "0x9C3DAC", VA = "0x9C3DAC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x9C3DB0", Offset = "0x9C3DB0", VA = "0x9C3DB0")]
	public SteamVR_Skybox()
	{
	}
}
[Token(Token = "0x2000108")]
[ExecuteInEditMode]
public class SteamVR_SphericalProjection : MonoBehaviour
{
	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material material;

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x9C3DC4", Offset = "0x9C3DC4", VA = "0x9C3DC4")]
	public void Set(Vector3 N, float phi0, float phi1, float theta0, float theta1, Vector3 uAxis, Vector3 uOrigin, float uScale, Vector3 vAxis, Vector3 vOrigin, float vScale)
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x9C4164", Offset = "0x9C4164", VA = "0x9C4164")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x9C41F4", Offset = "0x9C41F4", VA = "0x9C41F4")]
	public SteamVR_SphericalProjection()
	{
	}
}
[Token(Token = "0x2000109")]
public class SteamVR_Stats : MonoBehaviour
{
	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color fadeColor;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fadeDuration;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private double lastUpdate;

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x9C41FC", Offset = "0x9C41FC", VA = "0x9C41FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x9C42C8", Offset = "0x9C42C8", VA = "0x9C42C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x9C42CC", Offset = "0x9C42CC", VA = "0x9C42CC")]
	public SteamVR_Stats()
	{
	}
}
[Token(Token = "0x200010A")]
public class SteamVR_TestController : MonoBehaviour
{
	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> controllerIndices;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EVRButtonId[] buttonIds;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EVRButtonId[] axisIds;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform point;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pointer;

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x9C49BC", Offset = "0x9C49BC", VA = "0x9C49BC")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x9C4F70", Offset = "0x9C4F70", VA = "0x9C4F70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x9C5034", Offset = "0x9C5034", VA = "0x9C5034")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x9C4B70", Offset = "0x9C4B70", VA = "0x9C4B70")]
	private void PrintControllerStatus(int index)
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x9C50F8", Offset = "0x9C50F8", VA = "0x9C50F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0x9C59D8", Offset = "0x9C59D8", VA = "0x9C59D8")]
	public SteamVR_TestController()
	{
	}
}
[Token(Token = "0x200010B")]
public class SteamVR_TrackedCamera
{
	[Token(Token = "0x20002AA")]
	public class VideoStreamTexture
	{
		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744900", Offset = "0x744900")]
		private bool <undistorted>k__BackingField;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744910", Offset = "0x744910")]
		private VRTextureBounds_t <frameBounds>k__BackingField;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D _texture;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int prevFrameCount;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint glTextureId;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VideoStream videostream;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraVideoStreamFrameHeader_t header;

		[Token(Token = "0x17000175")]
		public bool undistorted
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x9C69E0", Offset = "0x9C69E0", VA = "0x9C69E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747730", Offset = "0x747730")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x9C69E8", Offset = "0x9C69E8", VA = "0x9C69E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747740", Offset = "0x747740")]
			private set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public uint deviceIndex
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x9C69F4", Offset = "0x9C69F4", VA = "0x9C69F4")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000177")]
		public bool hasCamera
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x9C5EFC", Offset = "0x9C5EFC", VA = "0x9C5EFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public bool hasTracking
		{
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x9C6320", Offset = "0x9C6320", VA = "0x9C6320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000179")]
		public uint frameId
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0x9C6D6C", Offset = "0x9C6D6C", VA = "0x9C6D6C")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700017A")]
		public VRTextureBounds_t frameBounds
		{
			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0x9C6D90", Offset = "0x9C6D90", VA = "0x9C6D90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747750", Offset = "0x747750")]
			get
			{
				return default(VRTextureBounds_t);
			}
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x9C6D9C", Offset = "0x9C6D9C", VA = "0x9C6D9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747760", Offset = "0x747760")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public EVRTrackedCameraFrameType frameType
		{
			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x9C6DA8", Offset = "0x9C6DA8", VA = "0x9C6DA8")]
			get
			{
				return default(EVRTrackedCameraFrameType);
			}
		}

		[Token(Token = "0x1700017C")]
		public Texture2D texture
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x9C62FC", Offset = "0x9C62FC", VA = "0x9C62FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		public SteamVR_Utils.RigidTransform transform
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x9C6344", Offset = "0x9C6344", VA = "0x9C6344")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		[Token(Token = "0x1700017E")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x9C6DB0", Offset = "0x9C6DB0", VA = "0x9C6DB0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700017F")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x9C6E00", Offset = "0x9C6E00", VA = "0x9C6E00")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x9C64FC", Offset = "0x9C64FC", VA = "0x9C64FC")]
		public VideoStreamTexture(uint deviceIndex, bool undistorted)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x9C6E54", Offset = "0x9C6E54", VA = "0x9C6E54")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x9C5EE4", Offset = "0x9C5EE4", VA = "0x9C5EE4")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x9C5F6C", Offset = "0x9C5F6C", VA = "0x9C5F6C")]
		public ulong Release()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x9C6A10", Offset = "0x9C6A10", VA = "0x9C6A10")]
		private void Update()
		{
		}
	}

	[Token(Token = "0x20002AB")]
	private class VideoStream
	{
		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744920", Offset = "0x744920")]
		private uint <deviceIndex>k__BackingField;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong _handle;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _hasCamera;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ulong refCount;

		[Token(Token = "0x17000180")]
		public uint deviceIndex
		{
			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x9C687C", Offset = "0x9C687C", VA = "0x9C687C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747770", Offset = "0x747770")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x9C6884", Offset = "0x9C6884", VA = "0x9C6884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747780", Offset = "0x747780")]
			private set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public ulong handle
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x9C688C", Offset = "0x9C688C", VA = "0x9C688C")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000182")]
		public bool hasCamera
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x9C6894", Offset = "0x9C6894", VA = "0x9C6894")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x9C67D0", Offset = "0x9C67D0", VA = "0x9C67D0")]
		public VideoStream(uint deviceIndex)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x9C689C", Offset = "0x9C689C", VA = "0x9C689C")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x9C693C", Offset = "0x9C693C", VA = "0x9C693C")]
		public ulong Release()
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VideoStreamTexture[] distorted;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static VideoStreamTexture[] undistorted;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static VideoStream[] videostreams;

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x9C63AC", Offset = "0x9C63AC", VA = "0x9C63AC")]
	public static VideoStreamTexture Distorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x9C654C", Offset = "0x9C654C", VA = "0x9C654C")]
	public static VideoStreamTexture Undistorted(int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x9C5ED0", Offset = "0x9C5ED0", VA = "0x9C5ED0")]
	public static VideoStreamTexture Source(bool undistorted, int deviceIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x9C669C", Offset = "0x9C669C", VA = "0x9C669C")]
	private static VideoStream Stream(uint deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x9C6874", Offset = "0x9C6874", VA = "0x9C6874")]
	public SteamVR_TrackedCamera()
	{
	}
}
[Token(Token = "0x200010C")]
public class SteamVR_TrackedObject : MonoBehaviour
{
	[Token(Token = "0x20002AC")]
	public enum EIndex
	{
		[Token(Token = "0x40010F8")]
		None = -1,
		[Token(Token = "0x40010F9")]
		Hmd,
		[Token(Token = "0x40010FA")]
		Device1,
		[Token(Token = "0x40010FB")]
		Device2,
		[Token(Token = "0x40010FC")]
		Device3,
		[Token(Token = "0x40010FD")]
		Device4,
		[Token(Token = "0x40010FE")]
		Device5,
		[Token(Token = "0x40010FF")]
		Device6,
		[Token(Token = "0x4001100")]
		Device7,
		[Token(Token = "0x4001101")]
		Device8,
		[Token(Token = "0x4001102")]
		Device9,
		[Token(Token = "0x4001103")]
		Device10,
		[Token(Token = "0x4001104")]
		Device11,
		[Token(Token = "0x4001105")]
		Device12,
		[Token(Token = "0x4001106")]
		Device13,
		[Token(Token = "0x4001107")]
		Device14,
		[Token(Token = "0x4001108")]
		Device15
	}

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EIndex index;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743C8C", Offset = "0x743C8C")]
	public Transform origin;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743CC4", Offset = "0x743CC4")]
	private bool <isValid>k__BackingField;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SteamVR_Events.Action newPosesAction;

	[Token(Token = "0x170000DB")]
	public bool isValid
	{
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x9C81D8", Offset = "0x9C81D8", VA = "0x9C81D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746450", Offset = "0x746450")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x9C81E0", Offset = "0x9C81E0", VA = "0x9C81E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x746460", Offset = "0x746460")]
		private set
		{
		}
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0x9C81EC", Offset = "0x9C81EC", VA = "0x9C81EC")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x9C8448", Offset = "0x9C8448", VA = "0x9C8448")]
	private SteamVR_TrackedObject()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x9C84F8", Offset = "0x9C84F8", VA = "0x9C84F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x9C85A4", Offset = "0x9C85A4", VA = "0x9C85A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x9C85DC", Offset = "0x9C85DC", VA = "0x9C85DC")]
	public void SetDeviceIndex(int index)
	{
	}
}
[Token(Token = "0x200010D")]
[ExecuteInEditMode]
public class SteamVR_UpdatePoses : MonoBehaviour
{
	[Token(Token = "0x600072E")]
	[Address(RVA = "0x9C86C4", Offset = "0x9C86C4", VA = "0x9C86C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x9C8760", Offset = "0x9C8760", VA = "0x9C8760")]
	public SteamVR_UpdatePoses()
	{
	}
}
[Token(Token = "0x200010E")]
public static class SteamVR_Utils
{
	[Serializable]
	[Token(Token = "0x20002AD")]
	public struct RigidTransform
	{
		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 pos;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rot;

		[Token(Token = "0x17000183")]
		public static RigidTransform identity
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0x9C9510", Offset = "0x9C9510", VA = "0x9C9510")]
			get
			{
				return default(RigidTransform);
			}
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x9C95E0", Offset = "0x9C95E0", VA = "0x9C95E0")]
		public static RigidTransform FromLocal(Transform t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x7C5F3C", Offset = "0x7C5F3C", VA = "0x7C5F3C")]
		public RigidTransform(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x7C5F50", Offset = "0x7C5F50", VA = "0x7C5F50")]
		public RigidTransform(Transform t)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x7C5F58", Offset = "0x7C5F58", VA = "0x7C5F58")]
		public RigidTransform(Transform from, Transform to)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x7C5F60", Offset = "0x7C5F60", VA = "0x7C5F60")]
		public RigidTransform(HmdMatrix34_t pose)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x7C5F94", Offset = "0x7C5F94", VA = "0x7C5F94")]
		public RigidTransform(HmdMatrix44_t pose)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x7C5FC8", Offset = "0x7C5FC8", VA = "0x7C5FC8")]
		public HmdMatrix44_t ToHmdMatrix44()
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x7C5FD0", Offset = "0x7C5FD0", VA = "0x7C5FD0")]
		public HmdMatrix34_t ToHmdMatrix34()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x7C5FD8", Offset = "0x7C5FD8", VA = "0x7C5FD8", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x7C5FE0", Offset = "0x7C5FE0", VA = "0x7C5FE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x9CA1DC", Offset = "0x9CA1DC", VA = "0x9CA1DC")]
		public static bool operator ==(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x9CA314", Offset = "0x9CA314", VA = "0x9CA314")]
		public static bool operator !=(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x9CA44C", Offset = "0x9CA44C", VA = "0x9CA44C")]
		public static RigidTransform operator *(RigidTransform a, RigidTransform b)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x7C601C", Offset = "0x7C601C", VA = "0x7C601C")]
		public void Inverse()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x7C6024", Offset = "0x7C6024", VA = "0x7C6024")]
		public RigidTransform GetInverse()
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x7C602C", Offset = "0x7C602C", VA = "0x7C602C")]
		public void Multiply(RigidTransform a, RigidTransform b)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x7C6074", Offset = "0x7C6074", VA = "0x7C6074")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x7C607C", Offset = "0x7C607C", VA = "0x7C607C")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x9CAA70", Offset = "0x9CAA70", VA = "0x9CAA70")]
		public static Vector3 operator *(RigidTransform t, Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x9CAA74", Offset = "0x9CAA74", VA = "0x9CAA74")]
		public static RigidTransform Interpolate(RigidTransform a, RigidTransform b, float t)
		{
			return default(RigidTransform);
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x7C6084", Offset = "0x7C6084", VA = "0x7C6084")]
		public void Interpolate(RigidTransform to, float t)
		{
		}
	}

	[Token(Token = "0x20002AE")]
	public delegate object SystemFn(CVRSystem system, params object[] args);

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x9C8768", Offset = "0x9C8768", VA = "0x9C8768")]
	public static Quaternion Slerp(Quaternion A, Quaternion B, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x9C8930", Offset = "0x9C8930", VA = "0x9C8930")]
	public static Vector3 Lerp(Vector3 A, Vector3 B, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x9C8988", Offset = "0x9C8988", VA = "0x9C8988")]
	public static float Lerp(float A, float B, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x9C8998", Offset = "0x9C8998", VA = "0x9C8998")]
	public static double Lerp(double A, double B, double t)
	{
		return default(double);
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x9C89A8", Offset = "0x9C89A8", VA = "0x9C89A8")]
	public static float InverseLerp(Vector3 A, Vector3 B, Vector3 result)
	{
		return default(float);
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x9C8AAC", Offset = "0x9C8AAC", VA = "0x9C8AAC")]
	public static float InverseLerp(float A, float B, float result)
	{
		return default(float);
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x9C8ABC", Offset = "0x9C8ABC", VA = "0x9C8ABC")]
	public static double InverseLerp(double A, double B, double result)
	{
		return default(double);
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x9C8ACC", Offset = "0x9C8ACC", VA = "0x9C8ACC")]
	public static float Saturate(float A)
	{
		return default(float);
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x9C8AE8", Offset = "0x9C8AE8", VA = "0x9C8AE8")]
	public static Vector2 Saturate(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x9C8B34", Offset = "0x9C8B34", VA = "0x9C8B34")]
	public static float Abs(float A)
	{
		return default(float);
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x9C8B44", Offset = "0x9C8B44", VA = "0x9C8B44")]
	public static Vector2 Abs(Vector2 A)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x9C8B88", Offset = "0x9C8B88", VA = "0x9C8B88")]
	private static float _copysign(float sizeval, float signval)
	{
		return default(float);
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x9C8C44", Offset = "0x9C8C44", VA = "0x9C8C44")]
	public static Quaternion GetRotation(this Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x9C8E10", Offset = "0x9C8E10", VA = "0x9C8E10")]
	public static Vector3 GetPosition(this Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x9C8E4C", Offset = "0x9C8E4C", VA = "0x9C8E4C")]
	public static Vector3 GetScale(this Matrix4x4 m)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x9C8F84", Offset = "0x9C8F84", VA = "0x9C8F84")]
	public static object CallSystemFn(SystemFn fn, params object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x9BDC28", Offset = "0x9BDC28", VA = "0x9BDC28")]
	public static void TakeStereoScreenshot(uint screenshotHandle, GameObject target, int cellSize, float ipd, ref string previewFilename, ref string VRFilename)
	{
	}
}
[Token(Token = "0x200010F")]
public class JsonNetSample : MonoBehaviour
{
	[Token(Token = "0x20002AF")]
	public class Product
	{
		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime ExpiryDate;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public decimal Price;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Sizes;

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xA0C910", Offset = "0xA0C910", VA = "0xA0C910", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xA0CA60", Offset = "0xA0CA60", VA = "0xA0CA60", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xA0C7E0", Offset = "0xA0C7E0", VA = "0xA0C7E0")]
		public Product()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002B0")]
	public class CharacterListItem
	{
		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744930", Offset = "0x744930")]
		private int <Id>k__BackingField;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744940", Offset = "0x744940")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744950", Offset = "0x744950")]
		private int <Level>k__BackingField;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744960", Offset = "0x744960")]
		private string <Class>k__BackingField;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744970", Offset = "0x744970")]
		private string <Sex>k__BackingField;

		[Token(Token = "0x17000184")]
		public int Id
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0xA0C84C", Offset = "0xA0C84C", VA = "0xA0C84C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747790", Offset = "0x747790")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xA0C854", Offset = "0xA0C854", VA = "0xA0C854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477A0", Offset = "0x7477A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public string Name
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0xA0C85C", Offset = "0xA0C85C", VA = "0xA0C85C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477B0", Offset = "0x7477B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0xA0C864", Offset = "0xA0C864", VA = "0xA0C864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477C0", Offset = "0x7477C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public int Level
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0xA0C86C", Offset = "0xA0C86C", VA = "0xA0C86C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477D0", Offset = "0x7477D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0xA0C874", Offset = "0xA0C874", VA = "0xA0C874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477E0", Offset = "0x7477E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public string Class
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xA0C87C", Offset = "0xA0C87C", VA = "0xA0C87C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7477F0", Offset = "0x7477F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xA0C884", Offset = "0xA0C884", VA = "0xA0C884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747800", Offset = "0x747800")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public string Sex
		{
			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xA0C88C", Offset = "0xA0C88C", VA = "0xA0C88C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747810", Offset = "0x747810")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xA0C894", Offset = "0xA0C894", VA = "0xA0C894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747820", Offset = "0x747820")]
			set
			{
			}
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xA0C89C", Offset = "0xA0C89C", VA = "0xA0C89C")]
		public CharacterListItem()
		{
		}
	}

	[Token(Token = "0x20002B1")]
	public class Movie
	{
		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744980", Offset = "0x744980")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x744990", Offset = "0x744990")]
		private string <Description>k__BackingField;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449A0", Offset = "0x7449A0")]
		private string <Classification>k__BackingField;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449B0", Offset = "0x7449B0")]
		private string <Studio>k__BackingField;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449C0", Offset = "0x7449C0")]
		private DateTime? <ReleaseDate>k__BackingField;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7449D0", Offset = "0x7449D0")]
		private List<string> <ReleaseCountries>k__BackingField;

		[Token(Token = "0x17000189")]
		public string Name
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xA0C8A4", Offset = "0xA0C8A4", VA = "0xA0C8A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747830", Offset = "0x747830")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xA0C8AC", Offset = "0xA0C8AC", VA = "0xA0C8AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747840", Offset = "0x747840")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public string Description
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xA0C8B4", Offset = "0xA0C8B4", VA = "0xA0C8B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747850", Offset = "0x747850")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0xA0C8BC", Offset = "0xA0C8BC", VA = "0xA0C8BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747860", Offset = "0x747860")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public string Classification
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xA0C8C4", Offset = "0xA0C8C4", VA = "0xA0C8C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747870", Offset = "0x747870")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xA0C8CC", Offset = "0xA0C8CC", VA = "0xA0C8CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747880", Offset = "0x747880")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public string Studio
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xA0C8D4", Offset = "0xA0C8D4", VA = "0xA0C8D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x747890", Offset = "0x747890")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xA0C8DC", Offset = "0xA0C8DC", VA = "0xA0C8DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7478A0", Offset = "0x7478A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public DateTime? ReleaseDate
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xA0C8E4", Offset = "0xA0C8E4", VA = "0xA0C8E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7478B0", Offset = "0x7478B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0xA0C8F0", Offset = "0xA0C8F0", VA = "0xA0C8F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7478C0", Offset = "0x7478C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public List<string> ReleaseCountries
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0xA0C8F8", Offset = "0xA0C8F8", VA = "0xA0C8F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7478D0", Offset = "0x7478D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0xA0C900", Offset = "0xA0C900", VA = "0xA0C900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7478E0", Offset = "0x7478E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xA0C908", Offset = "0xA0C908", VA = "0xA0C908")]
		public Movie()
		{
		}
	}

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Output;

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xA0BF80", Offset = "0xA0BF80", VA = "0xA0BF80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xA0C748", Offset = "0xA0C748", VA = "0xA0C748")]
	private void WriteLine(string msg)
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xA0C020", Offset = "0xA0C020", VA = "0xA0C020")]
	private void TestJson()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xA0C104", Offset = "0xA0C104", VA = "0xA0C104")]
	private void SerailizeJson()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xA0C25C", Offset = "0xA0C25C", VA = "0xA0C25C")]
	private void DeserializeJson()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xA0C2FC", Offset = "0xA0C2FC", VA = "0xA0C2FC")]
	private void LinqToJson()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xA0C450", Offset = "0xA0C450", VA = "0xA0C450")]
	private void JsonPath()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xA0C844", Offset = "0xA0C844", VA = "0xA0C844")]
	public JsonNetSample()
	{
	}
}
namespace Valve.VR
{
	[Token(Token = "0x2000110")]
	public struct IVRSystem
	{
		[Token(Token = "0x20002B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740594", Offset = "0x740594")]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7405A8", Offset = "0x7405A8")]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[Token(Token = "0x20002B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7405BC", Offset = "0x7405BC")]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[Token(Token = "0x20002B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7405D0", Offset = "0x7405D0")]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[Token(Token = "0x20002B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7405E4", Offset = "0x7405E4")]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[Token(Token = "0x20002B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7405F8", Offset = "0x7405F8")]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[Token(Token = "0x20002B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74060C", Offset = "0x74060C")]
		internal delegate int _GetD3D9AdapterIndex();

		[Token(Token = "0x20002B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740620", Offset = "0x740620")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[Token(Token = "0x20002BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740634", Offset = "0x740634")]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType);

		[Token(Token = "0x20002BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740648", Offset = "0x740648")]
		internal delegate bool _IsDisplayOnDesktop();

		[Token(Token = "0x20002BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74065C", Offset = "0x74065C")]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[Token(Token = "0x20002BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740670", Offset = "0x740670")]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[Token(Token = "0x20002BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740684", Offset = "0x740684")]
		internal delegate void _ResetSeatedZeroPose();

		[Token(Token = "0x20002BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740698", Offset = "0x740698")]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x20002C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7406AC", Offset = "0x7406AC")]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x20002C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7406C0", Offset = "0x7406C0")]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[Token(Token = "0x20002C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7406D4", Offset = "0x7406D4")]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[Token(Token = "0x20002C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7406E8", Offset = "0x7406E8")]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[Token(Token = "0x20002C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7406FC", Offset = "0x7406FC")]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[Token(Token = "0x20002C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740710", Offset = "0x740710")]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[Token(Token = "0x20002C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740724", Offset = "0x740724")]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[Token(Token = "0x20002C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740738", Offset = "0x740738")]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[Token(Token = "0x20002C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74074C", Offset = "0x74074C")]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740760", Offset = "0x740760")]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740774", Offset = "0x740774")]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740788", Offset = "0x740788")]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74079C", Offset = "0x74079C")]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7407B0", Offset = "0x7407B0")]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x20002CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7407C4", Offset = "0x7407C4")]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[Token(Token = "0x20002CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7407D8", Offset = "0x7407D8")]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x20002D0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7407EC", Offset = "0x7407EC")]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x20002D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740800", Offset = "0x740800")]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[Token(Token = "0x20002D2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740814", Offset = "0x740814")]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[Token(Token = "0x20002D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740828", Offset = "0x740828")]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[Token(Token = "0x20002D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74083C", Offset = "0x74083C")]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x20002D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740850", Offset = "0x740850")]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec);

		[Token(Token = "0x20002D6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740864", Offset = "0x740864")]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[Token(Token = "0x20002D7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740878", Offset = "0x740878")]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[Token(Token = "0x20002D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74088C", Offset = "0x74088C")]
		internal delegate bool _CaptureInputFocus();

		[Token(Token = "0x20002D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7408A0", Offset = "0x7408A0")]
		internal delegate void _ReleaseInputFocus();

		[Token(Token = "0x20002DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7408B4", Offset = "0x7408B4")]
		internal delegate bool _IsInputFocusCapturedByAnotherProcess();

		[Token(Token = "0x20002DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7408C8", Offset = "0x7408C8")]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, string pchResponseBuffer, uint unResponseBufferSize);

		[Token(Token = "0x20002DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7408DC", Offset = "0x7408DC")]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[Token(Token = "0x20002DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7408F0", Offset = "0x7408F0")]
		internal delegate void _AcknowledgeQuit_Exiting();

		[Token(Token = "0x20002DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740904", Offset = "0x740904")]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ComputeDistortion ComputeDistortion;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOutputDevice GetOutputDevice;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ApplyTransform ApplyTransform;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _PollNextEvent PollNextEvent;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetControllerState GetControllerState;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _CaptureInputFocus CaptureInputFocus;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _ReleaseInputFocus ReleaseInputFocus;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _IsInputFocusCapturedByAnotherProcess IsInputFocusCapturedByAnotherProcess;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	[Token(Token = "0x2000111")]
	public struct IVRExtendedDisplay
	{
		[Token(Token = "0x20002DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740918", Offset = "0x740918")]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002E0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74092C", Offset = "0x74092C")]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002E1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740940", Offset = "0x740940")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	[Token(Token = "0x2000112")]
	public struct IVRTrackedCamera
	{
		[Token(Token = "0x20002E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740954", Offset = "0x740954")]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[Token(Token = "0x20002E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740968", Offset = "0x740968")]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[Token(Token = "0x20002E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74097C", Offset = "0x74097C")]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[Token(Token = "0x20002E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740990", Offset = "0x740990")]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[Token(Token = "0x20002E6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7409A4", Offset = "0x7409A4")]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[Token(Token = "0x20002E7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7409B8", Offset = "0x7409B8")]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[Token(Token = "0x20002E8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7409CC", Offset = "0x7409CC")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[Token(Token = "0x20002E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7409E0", Offset = "0x7409E0")]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7409F4", Offset = "0x7409F4")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002EB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A08", Offset = "0x740A08")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002EC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A1C", Offset = "0x740A1C")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002ED")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A30", Offset = "0x740A30")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HasCamera HasCamera;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetCameraProjection GetCameraProjection;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	[Token(Token = "0x2000113")]
	public struct IVRApplications
	{
		[Token(Token = "0x20002EE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A44", Offset = "0x740A44")]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[Token(Token = "0x20002EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A58", Offset = "0x740A58")]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[Token(Token = "0x20002F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A6C", Offset = "0x740A6C")]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A80", Offset = "0x740A80")]
		internal delegate uint _GetApplicationCount();

		[Token(Token = "0x20002F2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740A94", Offset = "0x740A94")]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002F3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740AA8", Offset = "0x740AA8")]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002F4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740ABC", Offset = "0x740ABC")]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[Token(Token = "0x20002F5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740AD0", Offset = "0x740AD0")]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[Token(Token = "0x20002F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740AE4", Offset = "0x740AE4")]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[Token(Token = "0x20002F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740AF8", Offset = "0x740AF8")]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[Token(Token = "0x20002F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B0C", Offset = "0x740B0C")]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[Token(Token = "0x20002F9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B20", Offset = "0x740B20")]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[Token(Token = "0x20002FA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B34", Offset = "0x740B34")]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[Token(Token = "0x20002FB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B48", Offset = "0x740B48")]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[Token(Token = "0x20002FC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B5C", Offset = "0x740B5C")]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[Token(Token = "0x20002FD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B70", Offset = "0x740B70")]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20002FE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B84", Offset = "0x740B84")]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20002FF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740B98", Offset = "0x740B98")]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[Token(Token = "0x2000300")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740BAC", Offset = "0x740BAC")]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[Token(Token = "0x2000301")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740BC0", Offset = "0x740BC0")]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[Token(Token = "0x2000302")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740BD4", Offset = "0x740BD4")]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000303")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740BE8", Offset = "0x740BE8")]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, string pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[Token(Token = "0x2000304")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740BFC", Offset = "0x740BFC")]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, string pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[Token(Token = "0x2000305")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C10", Offset = "0x740C10")]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, string pchArgs, uint unArgs);

		[Token(Token = "0x2000306")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C24", Offset = "0x740C24")]
		internal delegate EVRApplicationError _GetStartingApplication(string pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000307")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C38", Offset = "0x740C38")]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[Token(Token = "0x2000308")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C4C", Offset = "0x740C4C")]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C60", Offset = "0x740C60")]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C74", Offset = "0x740C74")]
		internal delegate bool _IsQuitUserPromptRequested();

		[Token(Token = "0x200030B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C88", Offset = "0x740C88")]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[Token(Token = "0x200030C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740C9C", Offset = "0x740C9C")]
		internal delegate uint _GetCurrentSceneProcessId();

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetApplicationCount GetApplicationCount;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _LaunchApplication LaunchApplication;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _IdentifyApplication IdentifyApplication;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetStartingApplication GetStartingApplication;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetTransitionState GetTransitionState;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	[Token(Token = "0x2000114")]
	public struct IVRChaperone
	{
		[Token(Token = "0x200030D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740CB0", Offset = "0x740CB0")]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[Token(Token = "0x200030E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740CC4", Offset = "0x740CC4")]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740CD8", Offset = "0x740CD8")]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x2000310")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740CEC", Offset = "0x740CEC")]
		internal delegate void _ReloadInfo();

		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D00", Offset = "0x740D00")]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D14", Offset = "0x740D14")]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[Token(Token = "0x2000313")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D28", Offset = "0x740D28")]
		internal delegate bool _AreBoundsVisible();

		[Token(Token = "0x2000314")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D3C", Offset = "0x740D3C")]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReloadInfo ReloadInfo;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetSceneColor SetSceneColor;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetBoundsColor GetBoundsColor;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	[Token(Token = "0x2000115")]
	public struct IVRChaperoneSetup
	{
		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D50", Offset = "0x740D50")]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[Token(Token = "0x2000316")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D64", Offset = "0x740D64")]
		internal delegate void _RevertWorkingCopy();

		[Token(Token = "0x2000317")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D78", Offset = "0x740D78")]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x2000318")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740D8C", Offset = "0x740D8C")]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x2000319")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740DA0", Offset = "0x740DA0")]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740DB4", Offset = "0x740DB4")]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740DC8", Offset = "0x740DC8")]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740DDC", Offset = "0x740DDC")]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x200031D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740DF0", Offset = "0x740DF0")]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[Token(Token = "0x200031E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E04", Offset = "0x740E04")]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x200031F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E18", Offset = "0x740E18")]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000320")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E2C", Offset = "0x740E2C")]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000321")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E40", Offset = "0x740E40")]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[Token(Token = "0x2000322")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E54", Offset = "0x740E54")]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E68", Offset = "0x740E68")]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[Token(Token = "0x2000324")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E7C", Offset = "0x740E7C")]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740E90", Offset = "0x740E90")]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740EA4", Offset = "0x740EA4")]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740EB8", Offset = "0x740EB8")]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740ECC", Offset = "0x740ECC")]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	[Token(Token = "0x2000116")]
	public struct IVRCompositor
	{
		[Token(Token = "0x2000329")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740EE0", Offset = "0x740EE0")]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[Token(Token = "0x200032A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740EF4", Offset = "0x740EF4")]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[Token(Token = "0x200032B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F08", Offset = "0x740F08")]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x200032C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F1C", Offset = "0x740F1C")]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x200032D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F30", Offset = "0x740F30")]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[Token(Token = "0x200032E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F44", Offset = "0x740F44")]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[Token(Token = "0x200032F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F58", Offset = "0x740F58")]
		internal delegate void _ClearLastSubmittedFrame();

		[Token(Token = "0x2000330")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F6C", Offset = "0x740F6C")]
		internal delegate void _PostPresentHandoff();

		[Token(Token = "0x2000331")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F80", Offset = "0x740F80")]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[Token(Token = "0x2000332")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740F94", Offset = "0x740F94")]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740FA8", Offset = "0x740FA8")]
		internal delegate float _GetFrameTimeRemaining();

		[Token(Token = "0x2000334")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740FBC", Offset = "0x740FBC")]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[Token(Token = "0x2000335")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740FD0", Offset = "0x740FD0")]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[Token(Token = "0x2000336")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740FE4", Offset = "0x740FE4")]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x740FF8", Offset = "0x740FF8")]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[Token(Token = "0x2000338")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74100C", Offset = "0x74100C")]
		internal delegate float _GetCurrentGridAlpha();

		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741020", Offset = "0x741020")]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741034", Offset = "0x741034")]
		internal delegate void _ClearSkyboxOverride();

		[Token(Token = "0x200033B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741048", Offset = "0x741048")]
		internal delegate void _CompositorBringToFront();

		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74105C", Offset = "0x74105C")]
		internal delegate void _CompositorGoToBack();

		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741070", Offset = "0x741070")]
		internal delegate void _CompositorQuit();

		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741084", Offset = "0x741084")]
		internal delegate bool _IsFullscreen();

		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741098", Offset = "0x741098")]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7410AC", Offset = "0x7410AC")]
		internal delegate uint _GetLastFrameRenderer();

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7410C0", Offset = "0x7410C0")]
		internal delegate bool _CanRenderScene();

		[Token(Token = "0x2000342")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7410D4", Offset = "0x7410D4")]
		internal delegate void _ShowMirrorWindow();

		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7410E8", Offset = "0x7410E8")]
		internal delegate void _HideMirrorWindow();

		[Token(Token = "0x2000344")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7410FC", Offset = "0x7410FC")]
		internal delegate bool _IsMirrorWindowVisible();

		[Token(Token = "0x2000345")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741110", Offset = "0x741110")]
		internal delegate void _CompositorDumpImages();

		[Token(Token = "0x2000346")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741124", Offset = "0x741124")]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[Token(Token = "0x2000347")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741138", Offset = "0x741138")]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[Token(Token = "0x2000348")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74114C", Offset = "0x74114C")]
		internal delegate void _ForceReconnectProcess();

		[Token(Token = "0x2000349")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741160", Offset = "0x741160")]
		internal delegate void _SuspendRendering(bool bSuspend);

		[Token(Token = "0x200034A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741174", Offset = "0x741174")]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741188", Offset = "0x741188")]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74119C", Offset = "0x74119C")]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7411B0", Offset = "0x7411B0")]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[Token(Token = "0x200034E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7411C4", Offset = "0x7411C4")]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x200034F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7411D8", Offset = "0x7411D8")]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000350")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7411EC", Offset = "0x7411EC")]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x2000351")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741200", Offset = "0x741200")]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _WaitGetPoses WaitGetPoses;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetLastPoses GetLastPoses;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _Submit Submit;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFrameTiming GetFrameTiming;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetFrameTimings GetFrameTimings;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _FadeToColor FadeToColor;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _FadeGrid FadeGrid;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _CompositorQuit CompositorQuit;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsFullscreen IsFullscreen;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _CanRenderScene CanRenderScene;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _SuspendRendering SuspendRendering;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;
	}
	[Token(Token = "0x2000117")]
	public struct IVROverlay
	{
		[Token(Token = "0x2000352")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741214", Offset = "0x741214")]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[Token(Token = "0x2000353")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741228", Offset = "0x741228")]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[Token(Token = "0x2000354")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74123C", Offset = "0x74123C")]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000355")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741250", Offset = "0x741250")]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000356")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741264", Offset = "0x741264")]
		internal delegate ulong _GetHighQualityOverlay();

		[Token(Token = "0x2000357")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741278", Offset = "0x741278")]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000358")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74128C", Offset = "0x74128C")]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000359")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7412A0", Offset = "0x7412A0")]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[Token(Token = "0x200035A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7412B4", Offset = "0x7412B4")]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[Token(Token = "0x200035B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7412C8", Offset = "0x7412C8")]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[Token(Token = "0x200035C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7412DC", Offset = "0x7412DC")]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[Token(Token = "0x200035D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7412F0", Offset = "0x7412F0")]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[Token(Token = "0x200035E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741304", Offset = "0x741304")]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[Token(Token = "0x200035F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741318", Offset = "0x741318")]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[Token(Token = "0x2000360")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74132C", Offset = "0x74132C")]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741340", Offset = "0x741340")]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[Token(Token = "0x2000362")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741354", Offset = "0x741354")]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[Token(Token = "0x2000363")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741368", Offset = "0x741368")]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[Token(Token = "0x2000364")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74137C", Offset = "0x74137C")]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[Token(Token = "0x2000365")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741390", Offset = "0x741390")]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[Token(Token = "0x2000366")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7413A4", Offset = "0x7413A4")]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[Token(Token = "0x2000367")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7413B8", Offset = "0x7413B8")]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[Token(Token = "0x2000368")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7413CC", Offset = "0x7413CC")]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[Token(Token = "0x2000369")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7413E0", Offset = "0x7413E0")]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[Token(Token = "0x200036A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7413F4", Offset = "0x7413F4")]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[Token(Token = "0x200036B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741408", Offset = "0x741408")]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[Token(Token = "0x200036C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74141C", Offset = "0x74141C")]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[Token(Token = "0x200036D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741430", Offset = "0x741430")]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[Token(Token = "0x200036E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741444", Offset = "0x741444")]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x200036F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741458", Offset = "0x741458")]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x2000370")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74146C", Offset = "0x74146C")]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, string pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[Token(Token = "0x2000371")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741480", Offset = "0x741480")]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[Token(Token = "0x2000372")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741494", Offset = "0x741494")]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[Token(Token = "0x2000373")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7414A8", Offset = "0x7414A8")]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x2000374")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7414BC", Offset = "0x7414BC")]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x2000375")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7414D0", Offset = "0x7414D0")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000376")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7414E4", Offset = "0x7414E4")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000377")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7414F8", Offset = "0x7414F8")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[Token(Token = "0x2000378")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74150C", Offset = "0x74150C")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, string pchComponentName, uint unComponentNameSize);

		[Token(Token = "0x2000379")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741520", Offset = "0x741520")]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x200037A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741534", Offset = "0x741534")]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x200037B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741548", Offset = "0x741548")]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200037C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74155C", Offset = "0x74155C")]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200037D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741570", Offset = "0x741570")]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[Token(Token = "0x200037E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741584", Offset = "0x741584")]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[Token(Token = "0x200037F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741598", Offset = "0x741598")]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x2000380")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7415AC", Offset = "0x7415AC")]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[Token(Token = "0x2000381")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7415C0", Offset = "0x7415C0")]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[Token(Token = "0x2000382")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7415D4", Offset = "0x7415D4")]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x2000383")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7415E8", Offset = "0x7415E8")]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x2000384")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7415FC", Offset = "0x7415FC")]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[Token(Token = "0x2000385")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741610", Offset = "0x741610")]
		internal delegate bool _HandleControllerOverlayInteractionAsMouse(ulong ulOverlayHandle, uint unControllerDeviceIndex);

		[Token(Token = "0x2000386")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741624", Offset = "0x741624")]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000387")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741638", Offset = "0x741638")]
		internal delegate ulong _GetGamepadFocusOverlay();

		[Token(Token = "0x2000388")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74164C", Offset = "0x74164C")]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[Token(Token = "0x2000389")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741660", Offset = "0x741660")]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[Token(Token = "0x200038A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741674", Offset = "0x741674")]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[Token(Token = "0x200038B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741688", Offset = "0x741688")]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[Token(Token = "0x200038C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74169C", Offset = "0x74169C")]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[Token(Token = "0x200038D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7416B0", Offset = "0x7416B0")]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[Token(Token = "0x200038E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7416C4", Offset = "0x7416C4")]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[Token(Token = "0x200038F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7416D8", Offset = "0x7416D8")]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[Token(Token = "0x2000390")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7416EC", Offset = "0x7416EC")]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[Token(Token = "0x2000391")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741700", Offset = "0x741700")]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[Token(Token = "0x2000392")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741714", Offset = "0x741714")]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[Token(Token = "0x2000393")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741728", Offset = "0x741728")]
		internal delegate bool _IsDashboardVisible();

		[Token(Token = "0x2000394")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74173C", Offset = "0x74173C")]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000395")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741750", Offset = "0x741750")]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[Token(Token = "0x2000396")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741764", Offset = "0x741764")]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[Token(Token = "0x2000397")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741778", Offset = "0x741778")]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[Token(Token = "0x2000398")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74178C", Offset = "0x74178C")]
		internal delegate uint _GetPrimaryDashboardDevice();

		[Token(Token = "0x2000399")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7417A0", Offset = "0x7417A0")]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x200039A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7417B4", Offset = "0x7417B4")]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x200039B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7417C8", Offset = "0x7417C8")]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[Token(Token = "0x200039C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7417DC", Offset = "0x7417DC")]
		internal delegate void _HideKeyboard();

		[Token(Token = "0x200039D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7417F0", Offset = "0x7417F0")]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[Token(Token = "0x200039E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741804", Offset = "0x741804")]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[Token(Token = "0x200039F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741818", Offset = "0x741818")]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[Token(Token = "0x20003A0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74182C", Offset = "0x74182C")]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[Token(Token = "0x20003A1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741840", Offset = "0x741840")]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateOverlay CreateOverlay;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _DestroyOverlay DestroyOverlay;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetOverlayKey GetOverlayKey;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetOverlayName GetOverlayName;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayName SetOverlayName;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayColor SetOverlayColor;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayColor GetOverlayColor;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShowOverlay ShowOverlay;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _HideOverlay HideOverlay;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal _HandleControllerOverlayInteractionAsMouse HandleControllerOverlayInteractionAsMouse;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal _ShowDashboard ShowDashboard;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal _ShowKeyboard ShowKeyboard;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal _GetKeyboardText GetKeyboardText;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal _HideKeyboard HideKeyboard;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal _ShowMessageOverlay ShowMessageOverlay;
	}
	[Token(Token = "0x2000118")]
	public struct IVRRenderModels
	{
		[Token(Token = "0x20003A2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741854", Offset = "0x741854")]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[Token(Token = "0x20003A3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741868", Offset = "0x741868")]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[Token(Token = "0x20003A4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74187C", Offset = "0x74187C")]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[Token(Token = "0x20003A5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741890", Offset = "0x741890")]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[Token(Token = "0x20003A6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7418A4", Offset = "0x7418A4")]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[Token(Token = "0x20003A7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7418B8", Offset = "0x7418B8")]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[Token(Token = "0x20003A8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7418CC", Offset = "0x7418CC")]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[Token(Token = "0x20003A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7418E0", Offset = "0x7418E0")]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[Token(Token = "0x20003AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7418F4", Offset = "0x7418F4")]
		internal delegate uint _GetRenderModelCount();

		[Token(Token = "0x20003AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741908", Offset = "0x741908")]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[Token(Token = "0x20003AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74191C", Offset = "0x74191C")]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[Token(Token = "0x20003AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741930", Offset = "0x741930")]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20003AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741944", Offset = "0x741944")]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[Token(Token = "0x20003AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741958", Offset = "0x741958")]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x20003B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x74196C", Offset = "0x74196C")]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20003B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741980", Offset = "0x741980")]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20003B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741994", Offset = "0x741994")]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20003B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7419A8", Offset = "0x7419A8")]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _FreeRenderModel FreeRenderModel;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTexture FreeTexture;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRenderModelName GetRenderModelName;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetComponentCount GetComponentCount;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetComponentName GetComponentName;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetComponentState GetComponentState;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	[Token(Token = "0x2000119")]
	public struct IVRNotifications
	{
		[Token(Token = "0x20003B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7419BC", Offset = "0x7419BC")]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[Token(Token = "0x20003B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7419D0", Offset = "0x7419D0")]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveNotification RemoveNotification;
	}
	[Token(Token = "0x200011A")]
	public struct IVRSettings
	{
		[Token(Token = "0x20003B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7419E4", Offset = "0x7419E4")]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[Token(Token = "0x20003B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7419F8", Offset = "0x7419F8")]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[Token(Token = "0x20003B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A0C", Offset = "0x741A0C")]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[Token(Token = "0x20003B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A20", Offset = "0x741A20")]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[Token(Token = "0x20003BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A34", Offset = "0x741A34")]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A48", Offset = "0x741A48")]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[Token(Token = "0x20003BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A5C", Offset = "0x741A5C")]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20003BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A70", Offset = "0x741A70")]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20003BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A84", Offset = "0x741A84")]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20003BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741A98", Offset = "0x741A98")]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741AAC", Offset = "0x741AAC")]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[Token(Token = "0x20003C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741AC0", Offset = "0x741AC0")]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Sync Sync;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetBool SetBool;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetInt32 SetInt32;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetFloat SetFloat;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetString SetString;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetBool GetBool;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetInt32 GetInt32;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFloat GetFloat;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetString GetString;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _RemoveSection RemoveSection;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	[Token(Token = "0x200011B")]
	public struct IVRScreenshots
	{
		[Token(Token = "0x20003C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741AD4", Offset = "0x741AD4")]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x20003C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741AE8", Offset = "0x741AE8")]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[Token(Token = "0x20003C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741AFC", Offset = "0x741AFC")]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[Token(Token = "0x20003C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B10", Offset = "0x741B10")]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[Token(Token = "0x20003C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B24", Offset = "0x741B24")]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[Token(Token = "0x20003C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B38", Offset = "0x741B38")]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x20003C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B4C", Offset = "0x741B4C")]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HookScreenshot HookScreenshot;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	[Token(Token = "0x200011C")]
	public struct IVRResources
	{
		[Token(Token = "0x20003C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B60", Offset = "0x741B60")]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[Token(Token = "0x20003CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B74", Offset = "0x741B74")]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, string pchPathBuffer, uint unBufferLen);

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	[Token(Token = "0x200011D")]
	public struct IVRDriverManager
	{
		[Token(Token = "0x20003CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B88", Offset = "0x741B88")]
		internal delegate uint _GetDriverCount();

		[Token(Token = "0x20003CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741B9C", Offset = "0x741B9C")]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverName GetDriverName;
	}
	[Token(Token = "0x200011E")]
	public class CVRSystem
	{
		[Token(Token = "0x20003CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741BB0", Offset = "0x741BB0")]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20003CE")]
		private struct PollNextEventUnion
		{
			[Token(Token = "0x400111A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Token(Token = "0x400111B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[Token(Token = "0x20003CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741BC4", Offset = "0x741BC4")]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		[Token(Token = "0x20003D0")]
		private struct GetControllerStateUnion
		{
			[Token(Token = "0x400111C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Token(Token = "0x400111D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[Token(Token = "0x20003D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741BD8", Offset = "0x741BD8")]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		[Token(Token = "0x20003D2")]
		private struct GetControllerStateWithPoseUnion
		{
			[Token(Token = "0x400111E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Token(Token = "0x400111F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSystem FnTable;

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xFBC250", Offset = "0xFBC250", VA = "0xFBC250")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xFBC358", Offset = "0xFBC358", VA = "0xFBC358")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xFBC37C", Offset = "0xFBC37C", VA = "0xFBC37C")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xFBC398", Offset = "0xFBC398", VA = "0xFBC398")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xFBC3C4", Offset = "0xFBC3C4", VA = "0xFBC3C4")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xFBC3E0", Offset = "0xFBC3E0", VA = "0xFBC3E0")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xFBC3FC", Offset = "0xFBC3FC", VA = "0xFBC3FC")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xFBC420", Offset = "0xFBC420", VA = "0xFBC420")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xFBC43C", Offset = "0xFBC43C", VA = "0xFBC43C")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xFBC45C", Offset = "0xFBC45C", VA = "0xFBC45C")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xFBC47C", Offset = "0xFBC47C", VA = "0xFBC47C")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xFBC498", Offset = "0xFBC498", VA = "0xFBC498")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xFBC4B8", Offset = "0xFBC4B8", VA = "0xFBC4B8")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xFBC4E0", Offset = "0xFBC4E0", VA = "0xFBC4E0")]
		public void ResetSeatedZeroPose()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xFBC4FC", Offset = "0xFBC4FC", VA = "0xFBC4FC")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xFBC518", Offset = "0xFBC518", VA = "0xFBC518")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xFBC534", Offset = "0xFBC534", VA = "0xFBC534")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xFBC560", Offset = "0xFBC560", VA = "0xFBC560")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xFBC57C", Offset = "0xFBC57C", VA = "0xFBC57C")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xFBC598", Offset = "0xFBC598", VA = "0xFBC598")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xFBC5B4", Offset = "0xFBC5B4", VA = "0xFBC5B4")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xFBC5D0", Offset = "0xFBC5D0", VA = "0xFBC5D0")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xFBC5EC", Offset = "0xFBC5EC", VA = "0xFBC5EC")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xFBC608", Offset = "0xFBC608", VA = "0xFBC608")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xFBC624", Offset = "0xFBC624", VA = "0xFBC624")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xFBC640", Offset = "0xFBC640", VA = "0xFBC640")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xFBC65C", Offset = "0xFBC65C", VA = "0xFBC65C")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xFBC678", Offset = "0xFBC678", VA = "0xFBC678")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xFBC694", Offset = "0xFBC694", VA = "0xFBC694")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xFBC6B0", Offset = "0xFBC6B0", VA = "0xFBC6B0")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xFBC744", Offset = "0xFBC744", VA = "0xFBC744")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xFBCB24", Offset = "0xFBCB24", VA = "0xFBCB24")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xFBCB40", Offset = "0xFBCB40", VA = "0xFBCB40")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xFBCBD4", Offset = "0xFBCBD4", VA = "0xFBCBD4")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xFBCBF0", Offset = "0xFBCBF0", VA = "0xFBCBF0")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xFBD030", Offset = "0xFBD030", VA = "0xFBD030")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xFBD4C8", Offset = "0xFBD4C8", VA = "0xFBD4C8")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xFBD4E4", Offset = "0xFBD4E4", VA = "0xFBD4E4")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xFBD578", Offset = "0xFBD578", VA = "0xFBD578")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xFBD60C", Offset = "0xFBD60C", VA = "0xFBD60C")]
		public bool CaptureInputFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xFBD628", Offset = "0xFBD628", VA = "0xFBD628")]
		public void ReleaseInputFocus()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xFBD644", Offset = "0xFBD644", VA = "0xFBD644")]
		public bool IsInputFocusCapturedByAnotherProcess()
		{
			return default(bool);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xFBD660", Offset = "0xFBD660", VA = "0xFBD660")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, string pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xFBD67C", Offset = "0xFBD67C", VA = "0xFBD67C")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xFBD698", Offset = "0xFBD698", VA = "0xFBD698")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xFBD6B4", Offset = "0xFBD6B4", VA = "0xFBD6B4")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class CVRExtendedDisplay
	{
		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRExtendedDisplay FnTable;

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x9CE520", Offset = "0x9CE520", VA = "0x9CE520")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x9CE628", Offset = "0x9CE628", VA = "0x9CE628")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x9CE654", Offset = "0x9CE654", VA = "0x9CE654")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x9CE680", Offset = "0x9CE680", VA = "0x9CE680")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class CVRTrackedCamera
	{
		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRTrackedCamera FnTable;

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xFBDA30", Offset = "0xFBDA30", VA = "0xFBDA30")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xFBDB38", Offset = "0xFBDB38", VA = "0xFBDB38")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xFBDBCC", Offset = "0xFBDBCC", VA = "0xFBDBCC")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xFBDBEC", Offset = "0xFBDBEC", VA = "0xFBDBEC")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xFBDC14", Offset = "0xFBDC14", VA = "0xFBDC14")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xFBDC30", Offset = "0xFBDC30", VA = "0xFBDC30")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xFBDC4C", Offset = "0xFBDC4C", VA = "0xFBDC4C")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xFBDC6C", Offset = "0xFBDC6C", VA = "0xFBDC6C")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xFBDC88", Offset = "0xFBDC88", VA = "0xFBDC88")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xFBDCA4", Offset = "0xFBDCA4", VA = "0xFBDCA4")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xFBDCC8", Offset = "0xFBDCC8", VA = "0xFBDCC8")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xFBDCE4", Offset = "0xFBDCE4", VA = "0xFBDCE4")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xFBDD04", Offset = "0xFBDD04", VA = "0xFBDD04")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	[Token(Token = "0x2000121")]
	public class CVRApplications
	{
		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRApplications FnTable;

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x9CD23C", Offset = "0x9CD23C", VA = "0x9CD23C")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x9CD344", Offset = "0x9CD344", VA = "0x9CD344")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x9CD364", Offset = "0x9CD364", VA = "0x9CD364")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x9CD380", Offset = "0x9CD380", VA = "0x9CD380")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x9CD39C", Offset = "0x9CD39C", VA = "0x9CD39C")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x9CD3B8", Offset = "0x9CD3B8", VA = "0x9CD3B8")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x9CD3D4", Offset = "0x9CD3D4", VA = "0x9CD3D4")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x9CD3F0", Offset = "0x9CD3F0", VA = "0x9CD3F0")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x9CD40C", Offset = "0x9CD40C", VA = "0x9CD40C")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x9CD434", Offset = "0x9CD434", VA = "0x9CD434")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x9CD450", Offset = "0x9CD450", VA = "0x9CD450")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x9CD46C", Offset = "0x9CD46C", VA = "0x9CD46C")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x9CD488", Offset = "0x9CD488", VA = "0x9CD488")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x9CD4A4", Offset = "0x9CD4A4", VA = "0x9CD4A4")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x9CD4C0", Offset = "0x9CD4C0", VA = "0x9CD4C0")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x9CD554", Offset = "0x9CD554", VA = "0x9CD554")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x9CD570", Offset = "0x9CD570", VA = "0x9CD570")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x9CD58C", Offset = "0x9CD58C", VA = "0x9CD58C")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x9CD5A8", Offset = "0x9CD5A8", VA = "0x9CD5A8")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x9CD5C8", Offset = "0x9CD5C8", VA = "0x9CD5C8")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x9CD5E4", Offset = "0x9CD5E4", VA = "0x9CD5E4")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x9CD600", Offset = "0x9CD600", VA = "0x9CD600")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x9CD61C", Offset = "0x9CD61C", VA = "0x9CD61C")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, string pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x9CD638", Offset = "0x9CD638", VA = "0x9CD638")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, string pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x9CD654", Offset = "0x9CD654", VA = "0x9CD654")]
		public uint GetApplicationLaunchArguments(uint unHandle, string pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x9CD670", Offset = "0x9CD670", VA = "0x9CD670")]
		public EVRApplicationError GetStartingApplication(string pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x9CD68C", Offset = "0x9CD68C", VA = "0x9CD68C")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x9CD6A8", Offset = "0x9CD6A8", VA = "0x9CD6A8")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x9CD6C4", Offset = "0x9CD6C4", VA = "0x9CD6C4")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x9CD758", Offset = "0x9CD758", VA = "0x9CD758")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x9CD774", Offset = "0x9CD774", VA = "0x9CD774")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x9CD790", Offset = "0x9CD790", VA = "0x9CD790")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000122")]
	public class CVRChaperone
	{
		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperone FnTable;

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x9CD7AC", Offset = "0x9CD7AC", VA = "0x9CD7AC")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x9BCC9C", Offset = "0x9BCC9C", VA = "0x9BCC9C")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x9CD8B4", Offset = "0x9CD8B4", VA = "0x9CD8B4")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x9CD8D8", Offset = "0x9CD8D8", VA = "0x9CD8D8")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x9CD8F4", Offset = "0x9CD8F4", VA = "0x9CD8F4")]
		public void ReloadInfo()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x9CD910", Offset = "0x9CD910", VA = "0x9CD910")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x9CD92C", Offset = "0x9CD92C", VA = "0x9CD92C")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x9CD948", Offset = "0x9CD948", VA = "0x9CD948")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x9CD964", Offset = "0x9CD964", VA = "0x9CD964")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	[Token(Token = "0x2000123")]
	public class CVRChaperoneSetup
	{
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperoneSetup FnTable;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x9CD984", Offset = "0x9CD984", VA = "0x9CD984")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x9CDA8C", Offset = "0x9CDA8C", VA = "0x9CDA8C")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x9CDAA8", Offset = "0x9CDAA8", VA = "0x9CDAA8")]
		public void RevertWorkingCopy()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x9CDAC4", Offset = "0x9CDAC4", VA = "0x9CDAC4")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x9CDAE8", Offset = "0x9CDAE8", VA = "0x9CDAE8")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x9CDB04", Offset = "0x9CDB04", VA = "0x9CDB04")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x9CDBA4", Offset = "0x9CDBA4", VA = "0x9CDBA4")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x9CDC44", Offset = "0x9CDC44", VA = "0x9CDC44")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x9CDC60", Offset = "0x9CDC60", VA = "0x9CDC60")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x9CDC7C", Offset = "0x9CDC7C", VA = "0x9CDC7C")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x9CDC98", Offset = "0x9CDC98", VA = "0x9CDC98")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x9CDCC0", Offset = "0x9CDCC0", VA = "0x9CDCC0")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x9CDCDC", Offset = "0x9CDCDC", VA = "0x9CDCDC")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x9CDCF8", Offset = "0x9CDCF8", VA = "0x9CDCF8")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x9CDD14", Offset = "0x9CDD14", VA = "0x9CDD14")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x9CDD30", Offset = "0x9CDD30", VA = "0x9CDD30")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x9CDD58", Offset = "0x9CDD58", VA = "0x9CDD58")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x9CDDF8", Offset = "0x9CDDF8", VA = "0x9CDDF8")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x9CDE20", Offset = "0x9CDE20", VA = "0x9CDE20")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x9CDEC0", Offset = "0x9CDEC0", VA = "0x9CDEC0")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x9CDEE0", Offset = "0x9CDEE0", VA = "0x9CDEE0")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000124")]
	public class CVRCompositor
	{
		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRCompositor FnTable;

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x9CDEFC", Offset = "0x9CDEFC", VA = "0x9CDEFC")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x9BFB88", Offset = "0x9BFB88", VA = "0x9BFB88")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x9CE004", Offset = "0x9CE004", VA = "0x9CE004")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x9CE020", Offset = "0x9CE020", VA = "0x9CE020")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x9BF470", Offset = "0x9BF470", VA = "0x9BF470")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x9CE054", Offset = "0x9CE054", VA = "0x9CE054")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x9CE070", Offset = "0x9CE070", VA = "0x9CE070")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x9CE08C", Offset = "0x9CE08C", VA = "0x9CE08C")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x9CE0A8", Offset = "0x9CE0A8", VA = "0x9CE0A8")]
		public void PostPresentHandoff()
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x9BF8C0", Offset = "0x9BF8C0", VA = "0x9BF8C0")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x9CE0C4", Offset = "0x9CE0C4", VA = "0x9CE0C4")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x9CE0E0", Offset = "0x9CE0E0", VA = "0x9CE0E0")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x9CE0FC", Offset = "0x9CE0FC", VA = "0x9CE0FC")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x9CE118", Offset = "0x9CE118", VA = "0x9CE118")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x9CE138", Offset = "0x9CE138", VA = "0x9CE138")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x9CE158", Offset = "0x9CE158", VA = "0x9CE158")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x9CE178", Offset = "0x9CE178", VA = "0x9CE178")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x9C3CD0", Offset = "0x9C3CD0", VA = "0x9C3CD0")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x9C3D7C", Offset = "0x9C3D7C", VA = "0x9C3D7C")]
		public void ClearSkyboxOverride()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x9CE194", Offset = "0x9CE194", VA = "0x9CE194")]
		public void CompositorBringToFront()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x9CE1B0", Offset = "0x9CE1B0", VA = "0x9CE1B0")]
		public void CompositorGoToBack()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x9CE1CC", Offset = "0x9CE1CC", VA = "0x9CE1CC")]
		public void CompositorQuit()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x9CE1E8", Offset = "0x9CE1E8", VA = "0x9CE1E8")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x9CE204", Offset = "0x9CE204", VA = "0x9CE204")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x9CE220", Offset = "0x9CE220", VA = "0x9CE220")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x9BFB6C", Offset = "0x9BFB6C", VA = "0x9BFB6C")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x9CE23C", Offset = "0x9CE23C", VA = "0x9CE23C")]
		public void ShowMirrorWindow()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x9CE258", Offset = "0x9CE258", VA = "0x9CE258")]
		public void HideMirrorWindow()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x9CE274", Offset = "0x9CE274", VA = "0x9CE274")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x9CE290", Offset = "0x9CE290", VA = "0x9CE290")]
		public void CompositorDumpImages()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x9CE2AC", Offset = "0x9CE2AC", VA = "0x9CE2AC")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x9CE2C8", Offset = "0x9CE2C8", VA = "0x9CE2C8")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x9CE2E8", Offset = "0x9CE2E8", VA = "0x9CE2E8")]
		public void ForceReconnectProcess()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x9BD650", Offset = "0x9BD650", VA = "0x9BD650")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x9CE304", Offset = "0x9CE304", VA = "0x9CE304")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x9CE320", Offset = "0x9CE320", VA = "0x9CE320")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x9CE33C", Offset = "0x9CE33C", VA = "0x9CE33C")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x9CE35C", Offset = "0x9CE35C", VA = "0x9CE35C")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x9CE378", Offset = "0x9CE378", VA = "0x9CE378")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x9CE394", Offset = "0x9CE394", VA = "0x9CE394")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x9CE3B0", Offset = "0x9CE3B0", VA = "0x9CE3B0")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x9CE3CC", Offset = "0x9CE3CC", VA = "0x9CE3CC")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000125")]
	public class CVROverlay
	{
		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741BEC", Offset = "0x741BEC")]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20003D4")]
		private struct PollNextOverlayEventUnion
		{
			[Token(Token = "0x4001120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVROverlay FnTable;

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x9CE7E4", Offset = "0x9CE7E4", VA = "0x9CE7E4")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x9CE8EC", Offset = "0x9CE8EC", VA = "0x9CE8EC")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x9CE90C", Offset = "0x9CE90C", VA = "0x9CE90C")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x9CE92C", Offset = "0x9CE92C", VA = "0x9CE92C")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x9CE948", Offset = "0x9CE948", VA = "0x9CE948")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x9CE964", Offset = "0x9CE964", VA = "0x9CE964")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x9CE980", Offset = "0x9CE980", VA = "0x9CE980")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x9CE99C", Offset = "0x9CE99C", VA = "0x9CE99C")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x9CE9B8", Offset = "0x9CE9B8", VA = "0x9CE9B8")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x9CE9D4", Offset = "0x9CE9D4", VA = "0x9CE9D4")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x9CE9F8", Offset = "0x9CE9F8", VA = "0x9CE9F8")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x9CEA8C", Offset = "0x9CEA8C", VA = "0x9CEA8C")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x9CEAA8", Offset = "0x9CEAA8", VA = "0x9CEAA8")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x9CEAC4", Offset = "0x9CEAC4", VA = "0x9CEAC4")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x9CEAE4", Offset = "0x9CEAE4", VA = "0x9CEAE4")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x9CEB04", Offset = "0x9CEB04", VA = "0x9CEB04")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x9CEB20", Offset = "0x9CEB20", VA = "0x9CEB20")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x9CEB48", Offset = "0x9CEB48", VA = "0x9CEB48")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x9CEB64", Offset = "0x9CEB64", VA = "0x9CEB64")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x9CEB84", Offset = "0x9CEB84", VA = "0x9CEB84")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x9CEBA0", Offset = "0x9CEBA0", VA = "0x9CEBA0")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x9CEBC0", Offset = "0x9CEBC0", VA = "0x9CEBC0")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x9CEBDC", Offset = "0x9CEBDC", VA = "0x9CEBDC")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x9CEBFC", Offset = "0x9CEBFC", VA = "0x9CEBFC")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x9CEC18", Offset = "0x9CEC18", VA = "0x9CEC18")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x9CEC38", Offset = "0x9CEC38", VA = "0x9CEC38")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x9CEC54", Offset = "0x9CEC54", VA = "0x9CEC54")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x9CEC78", Offset = "0x9CEC78", VA = "0x9CEC78")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x9CEC94", Offset = "0x9CEC94", VA = "0x9CEC94")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x9CECB0", Offset = "0x9CECB0", VA = "0x9CECB0")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x9CECCC", Offset = "0x9CECCC", VA = "0x9CECCC")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x9CECE8", Offset = "0x9CECE8", VA = "0x9CECE8")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, string pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x9CED04", Offset = "0x9CED04", VA = "0x9CED04")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x9CED20", Offset = "0x9CED20", VA = "0x9CED20")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x9CED3C", Offset = "0x9CED3C", VA = "0x9CED3C")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x9CED58", Offset = "0x9CED58", VA = "0x9CED58")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x9CED74", Offset = "0x9CED74", VA = "0x9CED74")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x9CED90", Offset = "0x9CED90", VA = "0x9CED90")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x9CEDB0", Offset = "0x9CEDB0", VA = "0x9CEDB0")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x9CEDCC", Offset = "0x9CEDCC", VA = "0x9CEDCC")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, string pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x9CEDEC", Offset = "0x9CEDEC", VA = "0x9CEDEC")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x9CEE0C", Offset = "0x9CEE0C", VA = "0x9CEE0C")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x9CEE28", Offset = "0x9CEE28", VA = "0x9CEE28")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x9CEE44", Offset = "0x9CEE44", VA = "0x9CEE44")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x9CEE60", Offset = "0x9CEE60", VA = "0x9CEE60")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x9CEE7C", Offset = "0x9CEE7C", VA = "0x9CEE7C")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x9CEE98", Offset = "0x9CEE98", VA = "0x9CEE98")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x9CF2B0", Offset = "0x9CF2B0", VA = "0x9CF2B0")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x9CF2CC", Offset = "0x9CF2CC", VA = "0x9CF2CC")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x9CF2E8", Offset = "0x9CF2E8", VA = "0x9CF2E8")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x9CF304", Offset = "0x9CF304", VA = "0x9CF304")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x9CF320", Offset = "0x9CF320", VA = "0x9CF320")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x9CF33C", Offset = "0x9CF33C", VA = "0x9CF33C")]
		public bool HandleControllerOverlayInteractionAsMouse(ulong ulOverlayHandle, uint unControllerDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x9CF358", Offset = "0x9CF358", VA = "0x9CF358")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x9CF374", Offset = "0x9CF374", VA = "0x9CF374")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x9CF390", Offset = "0x9CF390", VA = "0x9CF390")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x9CF3AC", Offset = "0x9CF3AC", VA = "0x9CF3AC")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x9CF3C8", Offset = "0x9CF3C8", VA = "0x9CF3C8")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x9CF3E4", Offset = "0x9CF3E4", VA = "0x9CF3E4")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x9CF400", Offset = "0x9CF400", VA = "0x9CF400")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x9CF41C", Offset = "0x9CF41C", VA = "0x9CF41C")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x9CF438", Offset = "0x9CF438", VA = "0x9CF438")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x9CF454", Offset = "0x9CF454", VA = "0x9CF454")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x9CF488", Offset = "0x9CF488", VA = "0x9CF488")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x9CF4A4", Offset = "0x9CF4A4", VA = "0x9CF4A4")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x9CF4C8", Offset = "0x9CF4C8", VA = "0x9CF4C8")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x9CF4EC", Offset = "0x9CF4EC", VA = "0x9CF4EC")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x9CF508", Offset = "0x9CF508", VA = "0x9CF508")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x9CF524", Offset = "0x9CF524", VA = "0x9CF524")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x9CF540", Offset = "0x9CF540", VA = "0x9CF540")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x9CF560", Offset = "0x9CF560", VA = "0x9CF560")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x9CF57C", Offset = "0x9CF57C", VA = "0x9CF57C")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x9CF598", Offset = "0x9CF598", VA = "0x9CF598")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x9CF5BC", Offset = "0x9CF5BC", VA = "0x9CF5BC")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x9CF5E4", Offset = "0x9CF5E4", VA = "0x9CF5E4")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x9CF600", Offset = "0x9CF600", VA = "0x9CF600")]
		public void HideKeyboard()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x9CF61C", Offset = "0x9CF61C", VA = "0x9CF61C")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x9CF638", Offset = "0x9CF638", VA = "0x9CF638")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x9CF654", Offset = "0x9CF654", VA = "0x9CF654")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x9CF670", Offset = "0x9CF670", VA = "0x9CF670")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x9CF690", Offset = "0x9CF690", VA = "0x9CF690")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}
	}
	[Token(Token = "0x2000126")]
	public class CVRRenderModels
	{
		[Token(Token = "0x20003D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C00", Offset = "0x741C00")]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		[Token(Token = "0x20003D6")]
		private struct GetComponentStateUnion
		{
			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRRenderModels FnTable;

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x9CF7C8", Offset = "0x9CF7C8", VA = "0x9CF7C8")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x9C1DB0", Offset = "0x9C1DB0", VA = "0x9C1DB0")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x9C2D14", Offset = "0x9C2D14", VA = "0x9C2D14")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x9C1FE0", Offset = "0x9C1FE0", VA = "0x9C1FE0")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x9C2208", Offset = "0x9C2208", VA = "0x9C2208")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x9CF8D0", Offset = "0x9CF8D0", VA = "0x9CF8D0")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x9C21EC", Offset = "0x9C21EC", VA = "0x9C21EC")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x9CF8EC", Offset = "0x9CF8EC", VA = "0x9CF8EC")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x9CF908", Offset = "0x9CF908", VA = "0x9CF908")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x9CF924", Offset = "0x9CF924", VA = "0x9CF924")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x9C2394", Offset = "0x9C2394", VA = "0x9C2394")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x9C23B0", Offset = "0x9C23B0", VA = "0x9C23B0")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x9CF940", Offset = "0x9CF940", VA = "0x9CF940")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x9C23CC", Offset = "0x9C23CC", VA = "0x9C23CC")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x9C272C", Offset = "0x9C272C", VA = "0x9C272C")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x9CFDD4", Offset = "0x9CFDD4", VA = "0x9CFDD4")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x9CFDF0", Offset = "0x9CFDF0", VA = "0x9CFDF0")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x9CFE0C", Offset = "0x9CFE0C", VA = "0x9CFE0C")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x9CFE28", Offset = "0x9CFE28", VA = "0x9CFE28")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	[Token(Token = "0x2000127")]
	public class CVRNotifications
	{
		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRNotifications FnTable;

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x9CE6A4", Offset = "0x9CE6A4", VA = "0x9CE6A4")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x9CE7A4", Offset = "0x9CE7A4", VA = "0x9CE7A4")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x9CE7C8", Offset = "0x9CE7C8", VA = "0x9CE7C8")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	[Token(Token = "0x2000128")]
	public class CVRSettings
	{
		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSettings FnTable;

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xFBBF78", Offset = "0xFBBF78", VA = "0xFBBF78")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xFBC080", Offset = "0xFBC080", VA = "0xFBC080")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xFBC114", Offset = "0xFBC114", VA = "0xFBC114")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xFBC134", Offset = "0xFBC134", VA = "0xFBC134")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xFBC154", Offset = "0xFBC154", VA = "0xFBC154")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xFBC170", Offset = "0xFBC170", VA = "0xFBC170")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xFBC18C", Offset = "0xFBC18C", VA = "0xFBC18C")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xFBC1A8", Offset = "0xFBC1A8", VA = "0xFBC1A8")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xFBC1C4", Offset = "0xFBC1C4", VA = "0xFBC1C4")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xFBC1E0", Offset = "0xFBC1E0", VA = "0xFBC1E0")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xFBC1FC", Offset = "0xFBC1FC", VA = "0xFBC1FC")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xFBC218", Offset = "0xFBC218", VA = "0xFBC218")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xFBC234", Offset = "0xFBC234", VA = "0xFBC234")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class CVRScreenshots
	{
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRScreenshots FnTable;

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x9D0130", Offset = "0x9D0130", VA = "0x9D0130")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x9D0240", Offset = "0x9D0240", VA = "0x9D0240")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x9BF044", Offset = "0x9BF044", VA = "0x9BF044")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x9D0260", Offset = "0x9D0260", VA = "0x9D0260")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x9BDA28", Offset = "0x9BDA28", VA = "0x9BDA28")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x9C94F4", Offset = "0x9C94F4", VA = "0x9C94F4")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x9D027C", Offset = "0x9D027C", VA = "0x9D027C")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x9BEDA4", Offset = "0x9BEDA4", VA = "0x9BEDA4")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	[Token(Token = "0x200012A")]
	public class CVRResources
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRResources FnTable;

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x9CFFF8", Offset = "0x9CFFF8", VA = "0x9CFFF8")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x9D00F8", Offset = "0x9D00F8", VA = "0x9D00F8")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x9D0114", Offset = "0x9D0114", VA = "0x9D0114")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, string pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x200012B")]
	public class CVRDriverManager
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRDriverManager FnTable;

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x9CE3E8", Offset = "0x9CE3E8", VA = "0x9CE3E8")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x9CE4E8", Offset = "0x9CE4E8", VA = "0x9CE4E8")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x9CE504", Offset = "0x9CE504", VA = "0x9CE504")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x200012C")]
	public class OpenVRInterop
	{
		[PreserveSig]
		[Token(Token = "0x6000872")]
		[Address(RVA = "0xEBD504", Offset = "0xEBD504", VA = "0xEBD504")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Token(Token = "0x6000873")]
		[Address(RVA = "0xEBD598", Offset = "0xEBD598", VA = "0xEBD598")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Token(Token = "0x6000874")]
		[Address(RVA = "0xEBD60C", Offset = "0xEBD60C", VA = "0xEBD60C")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Token(Token = "0x6000875")]
		[Address(RVA = "0xEBD68C", Offset = "0xEBD68C", VA = "0xEBD68C")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Token(Token = "0x6000876")]
		[Address(RVA = "0xEBD780", Offset = "0xEBD780", VA = "0xEBD780")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Token(Token = "0x6000877")]
		[Address(RVA = "0xEBD804", Offset = "0xEBD804", VA = "0xEBD804")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Token(Token = "0x6000878")]
		[Address(RVA = "0xEBD8B0", Offset = "0xEBD8B0", VA = "0xEBD8B0")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Token(Token = "0x6000879")]
		[Address(RVA = "0xEBD950", Offset = "0xEBD950", VA = "0xEBD950")]
		internal static extern uint GetInitToken();

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xEBEB7C", Offset = "0xEBEB7C", VA = "0xEBEB7C")]
		public OpenVRInterop()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public enum EVREye
	{
		[Token(Token = "0x400079D")]
		Eye_Left,
		[Token(Token = "0x400079E")]
		Eye_Right
	}
	[Token(Token = "0x200012E")]
	public enum ETextureType
	{
		[Token(Token = "0x40007A0")]
		DirectX,
		[Token(Token = "0x40007A1")]
		OpenGL,
		[Token(Token = "0x40007A2")]
		Vulkan,
		[Token(Token = "0x40007A3")]
		IOSurface,
		[Token(Token = "0x40007A4")]
		DirectX12
	}
	[Token(Token = "0x200012F")]
	public enum EColorSpace
	{
		[Token(Token = "0x40007A6")]
		Auto,
		[Token(Token = "0x40007A7")]
		Gamma,
		[Token(Token = "0x40007A8")]
		Linear
	}
	[Token(Token = "0x2000130")]
	public enum ETrackingResult
	{
		[Token(Token = "0x40007AA")]
		Uninitialized = 1,
		[Token(Token = "0x40007AB")]
		Calibrating_InProgress = 100,
		[Token(Token = "0x40007AC")]
		Calibrating_OutOfRange = 101,
		[Token(Token = "0x40007AD")]
		Running_OK = 200,
		[Token(Token = "0x40007AE")]
		Running_OutOfRange = 201
	}
	[Token(Token = "0x2000131")]
	public enum ETrackedDeviceClass
	{
		[Token(Token = "0x40007B0")]
		Invalid,
		[Token(Token = "0x40007B1")]
		HMD,
		[Token(Token = "0x40007B2")]
		Controller,
		[Token(Token = "0x40007B3")]
		GenericTracker,
		[Token(Token = "0x40007B4")]
		TrackingReference,
		[Token(Token = "0x40007B5")]
		DisplayRedirect
	}
	[Token(Token = "0x2000132")]
	public enum ETrackedControllerRole
	{
		[Token(Token = "0x40007B7")]
		Invalid,
		[Token(Token = "0x40007B8")]
		LeftHand,
		[Token(Token = "0x40007B9")]
		RightHand
	}
	[Token(Token = "0x2000133")]
	public enum ETrackingUniverseOrigin
	{
		[Token(Token = "0x40007BB")]
		TrackingUniverseSeated,
		[Token(Token = "0x40007BC")]
		TrackingUniverseStanding,
		[Token(Token = "0x40007BD")]
		TrackingUniverseRawAndUncalibrated
	}
	[Token(Token = "0x2000134")]
	public enum ETrackedDeviceProperty
	{
		[Token(Token = "0x40007BF")]
		Prop_Invalid = 0,
		[Token(Token = "0x40007C0")]
		Prop_TrackingSystemName_String = 1000,
		[Token(Token = "0x40007C1")]
		Prop_ModelNumber_String = 1001,
		[Token(Token = "0x40007C2")]
		Prop_SerialNumber_String = 1002,
		[Token(Token = "0x40007C3")]
		Prop_RenderModelName_String = 1003,
		[Token(Token = "0x40007C4")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Token(Token = "0x40007C5")]
		Prop_ManufacturerName_String = 1005,
		[Token(Token = "0x40007C6")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Token(Token = "0x40007C7")]
		Prop_HardwareRevision_String = 1007,
		[Token(Token = "0x40007C8")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Token(Token = "0x40007C9")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Token(Token = "0x40007CA")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Token(Token = "0x40007CB")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Token(Token = "0x40007CC")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Token(Token = "0x40007CD")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Token(Token = "0x40007CE")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Token(Token = "0x40007CF")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Token(Token = "0x40007D0")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Token(Token = "0x40007D1")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Token(Token = "0x40007D2")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Token(Token = "0x40007D3")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Token(Token = "0x40007D4")]
		Prop_VRCVersion_Uint64 = 1020,
		[Token(Token = "0x40007D5")]
		Prop_RadioVersion_Uint64 = 1021,
		[Token(Token = "0x40007D6")]
		Prop_DongleVersion_Uint64 = 1022,
		[Token(Token = "0x40007D7")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Token(Token = "0x40007D8")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Token(Token = "0x40007D9")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Token(Token = "0x40007DA")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Token(Token = "0x40007DB")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Token(Token = "0x40007DC")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Token(Token = "0x40007DD")]
		Prop_DeviceClass_Int32 = 1029,
		[Token(Token = "0x40007DE")]
		Prop_HasCamera_Bool = 1030,
		[Token(Token = "0x40007DF")]
		Prop_DriverVersion_String = 1031,
		[Token(Token = "0x40007E0")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Token(Token = "0x40007E1")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Token(Token = "0x40007E2")]
		Prop_ParentDriver_Uint64 = 1034,
		[Token(Token = "0x40007E3")]
		Prop_ResourceRoot_String = 1035,
		[Token(Token = "0x40007E4")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Token(Token = "0x40007E5")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Token(Token = "0x40007E6")]
		Prop_DisplayFrequency_Float = 2002,
		[Token(Token = "0x40007E7")]
		Prop_UserIpdMeters_Float = 2003,
		[Token(Token = "0x40007E8")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Token(Token = "0x40007E9")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Token(Token = "0x40007EA")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Token(Token = "0x40007EB")]
		Prop_IsOnDesktop_Bool = 2007,
		[Token(Token = "0x40007EC")]
		Prop_DisplayMCType_Int32 = 2008,
		[Token(Token = "0x40007ED")]
		Prop_DisplayMCOffset_Float = 2009,
		[Token(Token = "0x40007EE")]
		Prop_DisplayMCScale_Float = 2010,
		[Token(Token = "0x40007EF")]
		Prop_EdidVendorID_Int32 = 2011,
		[Token(Token = "0x40007F0")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Token(Token = "0x40007F1")]
		Prop_DisplayMCImageRight_String = 2013,
		[Token(Token = "0x40007F2")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Token(Token = "0x40007F3")]
		Prop_EdidProductID_Int32 = 2015,
		[Token(Token = "0x40007F4")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Token(Token = "0x40007F5")]
		Prop_DisplayGCType_Int32 = 2017,
		[Token(Token = "0x40007F6")]
		Prop_DisplayGCOffset_Float = 2018,
		[Token(Token = "0x40007F7")]
		Prop_DisplayGCScale_Float = 2019,
		[Token(Token = "0x40007F8")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Token(Token = "0x40007F9")]
		Prop_DisplayGCImage_String = 2021,
		[Token(Token = "0x40007FA")]
		Prop_LensCenterLeftU_Float = 2022,
		[Token(Token = "0x40007FB")]
		Prop_LensCenterLeftV_Float = 2023,
		[Token(Token = "0x40007FC")]
		Prop_LensCenterRightU_Float = 2024,
		[Token(Token = "0x40007FD")]
		Prop_LensCenterRightV_Float = 2025,
		[Token(Token = "0x40007FE")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Token(Token = "0x40007FF")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Token(Token = "0x4000800")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Token(Token = "0x4000801")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Token(Token = "0x4000802")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Token(Token = "0x4000803")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Token(Token = "0x4000804")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Token(Token = "0x4000805")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Token(Token = "0x4000806")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Token(Token = "0x4000807")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Token(Token = "0x4000808")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Token(Token = "0x4000809")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Token(Token = "0x400080A")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Token(Token = "0x400080B")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Token(Token = "0x400080C")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Token(Token = "0x400080D")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Token(Token = "0x400080E")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Token(Token = "0x400080F")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Token(Token = "0x4000810")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Token(Token = "0x4000811")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Token(Token = "0x4000812")]
		Prop_AttachedDeviceId_String = 3000,
		[Token(Token = "0x4000813")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Token(Token = "0x4000814")]
		Prop_Axis0Type_Int32 = 3002,
		[Token(Token = "0x4000815")]
		Prop_Axis1Type_Int32 = 3003,
		[Token(Token = "0x4000816")]
		Prop_Axis2Type_Int32 = 3004,
		[Token(Token = "0x4000817")]
		Prop_Axis3Type_Int32 = 3005,
		[Token(Token = "0x4000818")]
		Prop_Axis4Type_Int32 = 3006,
		[Token(Token = "0x4000819")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Token(Token = "0x400081A")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Token(Token = "0x400081B")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Token(Token = "0x400081C")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Token(Token = "0x400081D")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Token(Token = "0x400081E")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Token(Token = "0x400081F")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Token(Token = "0x4000820")]
		Prop_ModeLabel_String = 4006,
		[Token(Token = "0x4000821")]
		Prop_IconPathName_String = 5000,
		[Token(Token = "0x4000822")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Token(Token = "0x4000823")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Token(Token = "0x4000824")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Token(Token = "0x4000825")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Token(Token = "0x4000826")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Token(Token = "0x4000827")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Token(Token = "0x4000828")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Token(Token = "0x4000829")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Token(Token = "0x400082A")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Token(Token = "0x400082B")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Token(Token = "0x400082C")]
		Prop_UserConfigPath_String = 6000,
		[Token(Token = "0x400082D")]
		Prop_InstallPath_String = 6001,
		[Token(Token = "0x400082E")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Token(Token = "0x400082F")]
		Prop_HasControllerComponent_Bool = 6003,
		[Token(Token = "0x4000830")]
		Prop_HasCameraComponent_Bool = 6004,
		[Token(Token = "0x4000831")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Token(Token = "0x4000832")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Token(Token = "0x4000833")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4000834")]
		Prop_VendorSpecific_Reserved_End = 10999
	}
	[Token(Token = "0x2000135")]
	public enum ETrackedPropertyError
	{
		[Token(Token = "0x4000836")]
		TrackedProp_Success,
		[Token(Token = "0x4000837")]
		TrackedProp_WrongDataType,
		[Token(Token = "0x4000838")]
		TrackedProp_WrongDeviceClass,
		[Token(Token = "0x4000839")]
		TrackedProp_BufferTooSmall,
		[Token(Token = "0x400083A")]
		TrackedProp_UnknownProperty,
		[Token(Token = "0x400083B")]
		TrackedProp_InvalidDevice,
		[Token(Token = "0x400083C")]
		TrackedProp_CouldNotContactServer,
		[Token(Token = "0x400083D")]
		TrackedProp_ValueNotProvidedByDevice,
		[Token(Token = "0x400083E")]
		TrackedProp_StringExceedsMaximumLength,
		[Token(Token = "0x400083F")]
		TrackedProp_NotYetAvailable,
		[Token(Token = "0x4000840")]
		TrackedProp_PermissionDenied,
		[Token(Token = "0x4000841")]
		TrackedProp_InvalidOperation
	}
	[Token(Token = "0x2000136")]
	public enum EVRSubmitFlags
	{
		[Token(Token = "0x4000843")]
		Submit_Default = 0,
		[Token(Token = "0x4000844")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Token(Token = "0x4000845")]
		Submit_GlRenderBuffer = 2,
		[Token(Token = "0x4000846")]
		Submit_Reserved = 4
	}
	[Token(Token = "0x2000137")]
	public enum EVRState
	{
		[Token(Token = "0x4000848")]
		Undefined = -1,
		[Token(Token = "0x4000849")]
		Off,
		[Token(Token = "0x400084A")]
		Searching,
		[Token(Token = "0x400084B")]
		Searching_Alert,
		[Token(Token = "0x400084C")]
		Ready,
		[Token(Token = "0x400084D")]
		Ready_Alert,
		[Token(Token = "0x400084E")]
		NotReady,
		[Token(Token = "0x400084F")]
		Standby,
		[Token(Token = "0x4000850")]
		Ready_Alert_Low
	}
	[Token(Token = "0x2000138")]
	public enum EVREventType
	{
		[Token(Token = "0x4000852")]
		VREvent_None = 0,
		[Token(Token = "0x4000853")]
		VREvent_TrackedDeviceActivated = 100,
		[Token(Token = "0x4000854")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Token(Token = "0x4000855")]
		VREvent_TrackedDeviceUpdated = 102,
		[Token(Token = "0x4000856")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Token(Token = "0x4000857")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Token(Token = "0x4000858")]
		VREvent_IpdChanged = 105,
		[Token(Token = "0x4000859")]
		VREvent_EnterStandbyMode = 106,
		[Token(Token = "0x400085A")]
		VREvent_LeaveStandbyMode = 107,
		[Token(Token = "0x400085B")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Token(Token = "0x400085C")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Token(Token = "0x400085D")]
		VREvent_LensDistortionChanged = 110,
		[Token(Token = "0x400085E")]
		VREvent_PropertyChanged = 111,
		[Token(Token = "0x400085F")]
		VREvent_ButtonPress = 200,
		[Token(Token = "0x4000860")]
		VREvent_ButtonUnpress = 201,
		[Token(Token = "0x4000861")]
		VREvent_ButtonTouch = 202,
		[Token(Token = "0x4000862")]
		VREvent_ButtonUntouch = 203,
		[Token(Token = "0x4000863")]
		VREvent_MouseMove = 300,
		[Token(Token = "0x4000864")]
		VREvent_MouseButtonDown = 301,
		[Token(Token = "0x4000865")]
		VREvent_MouseButtonUp = 302,
		[Token(Token = "0x4000866")]
		VREvent_FocusEnter = 303,
		[Token(Token = "0x4000867")]
		VREvent_FocusLeave = 304,
		[Token(Token = "0x4000868")]
		VREvent_Scroll = 305,
		[Token(Token = "0x4000869")]
		VREvent_TouchPadMove = 306,
		[Token(Token = "0x400086A")]
		VREvent_OverlayFocusChanged = 307,
		[Token(Token = "0x400086B")]
		VREvent_InputFocusCaptured = 400,
		[Token(Token = "0x400086C")]
		VREvent_InputFocusReleased = 401,
		[Token(Token = "0x400086D")]
		VREvent_SceneFocusLost = 402,
		[Token(Token = "0x400086E")]
		VREvent_SceneFocusGained = 403,
		[Token(Token = "0x400086F")]
		VREvent_SceneApplicationChanged = 404,
		[Token(Token = "0x4000870")]
		VREvent_SceneFocusChanged = 405,
		[Token(Token = "0x4000871")]
		VREvent_InputFocusChanged = 406,
		[Token(Token = "0x4000872")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Token(Token = "0x4000873")]
		VREvent_HideRenderModels = 410,
		[Token(Token = "0x4000874")]
		VREvent_ShowRenderModels = 411,
		[Token(Token = "0x4000875")]
		VREvent_OverlayShown = 500,
		[Token(Token = "0x4000876")]
		VREvent_OverlayHidden = 501,
		[Token(Token = "0x4000877")]
		VREvent_DashboardActivated = 502,
		[Token(Token = "0x4000878")]
		VREvent_DashboardDeactivated = 503,
		[Token(Token = "0x4000879")]
		VREvent_DashboardThumbSelected = 504,
		[Token(Token = "0x400087A")]
		VREvent_DashboardRequested = 505,
		[Token(Token = "0x400087B")]
		VREvent_ResetDashboard = 506,
		[Token(Token = "0x400087C")]
		VREvent_RenderToast = 507,
		[Token(Token = "0x400087D")]
		VREvent_ImageLoaded = 508,
		[Token(Token = "0x400087E")]
		VREvent_ShowKeyboard = 509,
		[Token(Token = "0x400087F")]
		VREvent_HideKeyboard = 510,
		[Token(Token = "0x4000880")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Token(Token = "0x4000881")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Token(Token = "0x4000882")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Token(Token = "0x4000883")]
		VREvent_DashboardGuideButtonDown = 514,
		[Token(Token = "0x4000884")]
		VREvent_DashboardGuideButtonUp = 515,
		[Token(Token = "0x4000885")]
		VREvent_ScreenshotTriggered = 516,
		[Token(Token = "0x4000886")]
		VREvent_ImageFailed = 517,
		[Token(Token = "0x4000887")]
		VREvent_DashboardOverlayCreated = 518,
		[Token(Token = "0x4000888")]
		VREvent_RequestScreenshot = 520,
		[Token(Token = "0x4000889")]
		VREvent_ScreenshotTaken = 521,
		[Token(Token = "0x400088A")]
		VREvent_ScreenshotFailed = 522,
		[Token(Token = "0x400088B")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Token(Token = "0x400088C")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Token(Token = "0x400088D")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Token(Token = "0x400088E")]
		VREvent_Notification_Shown = 600,
		[Token(Token = "0x400088F")]
		VREvent_Notification_Hidden = 601,
		[Token(Token = "0x4000890")]
		VREvent_Notification_BeginInteraction = 602,
		[Token(Token = "0x4000891")]
		VREvent_Notification_Destroyed = 603,
		[Token(Token = "0x4000892")]
		VREvent_Quit = 700,
		[Token(Token = "0x4000893")]
		VREvent_ProcessQuit = 701,
		[Token(Token = "0x4000894")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Token(Token = "0x4000895")]
		VREvent_QuitAcknowledged = 703,
		[Token(Token = "0x4000896")]
		VREvent_DriverRequestedQuit = 704,
		[Token(Token = "0x4000897")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Token(Token = "0x4000898")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Token(Token = "0x4000899")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Token(Token = "0x400089A")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Token(Token = "0x400089B")]
		VREvent_SeatedZeroPoseReset = 804,
		[Token(Token = "0x400089C")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Token(Token = "0x400089D")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Token(Token = "0x400089E")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Token(Token = "0x400089F")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Token(Token = "0x40008A0")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Token(Token = "0x40008A1")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Token(Token = "0x40008A2")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Token(Token = "0x40008A3")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Token(Token = "0x40008A4")]
		VREvent_StatusUpdate = 900,
		[Token(Token = "0x40008A5")]
		VREvent_MCImageUpdated = 1000,
		[Token(Token = "0x40008A6")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Token(Token = "0x40008A7")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Token(Token = "0x40008A8")]
		VREvent_KeyboardClosed = 1200,
		[Token(Token = "0x40008A9")]
		VREvent_KeyboardCharInput = 1201,
		[Token(Token = "0x40008AA")]
		VREvent_KeyboardDone = 1202,
		[Token(Token = "0x40008AB")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Token(Token = "0x40008AC")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Token(Token = "0x40008AD")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Token(Token = "0x40008AE")]
		VREvent_ApplicationListUpdated = 1303,
		[Token(Token = "0x40008AF")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Token(Token = "0x40008B0")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Token(Token = "0x40008B1")]
		VREvent_ProcessConnected = 1306,
		[Token(Token = "0x40008B2")]
		VREvent_ProcessDisconnected = 1307,
		[Token(Token = "0x40008B3")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Token(Token = "0x40008B4")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Token(Token = "0x40008B5")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Token(Token = "0x40008B6")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Token(Token = "0x40008B7")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Token(Token = "0x40008B8")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Token(Token = "0x40008B9")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Token(Token = "0x40008BA")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Token(Token = "0x40008BB")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Token(Token = "0x40008BC")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Token(Token = "0x40008BD")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Token(Token = "0x40008BE")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Token(Token = "0x40008BF")]
		VREvent_MessageOverlay_Closed = 1650,
		[Token(Token = "0x40008C0")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x40008C1")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	[Token(Token = "0x2000139")]
	public enum EDeviceActivityLevel
	{
		[Token(Token = "0x40008C3")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Token(Token = "0x40008C4")]
		k_EDeviceActivityLevel_Idle,
		[Token(Token = "0x40008C5")]
		k_EDeviceActivityLevel_UserInteraction,
		[Token(Token = "0x40008C6")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Token(Token = "0x40008C7")]
		k_EDeviceActivityLevel_Standby
	}
	[Token(Token = "0x200013A")]
	public enum EVRButtonId
	{
		[Token(Token = "0x40008C9")]
		k_EButton_System = 0,
		[Token(Token = "0x40008CA")]
		k_EButton_ApplicationMenu = 1,
		[Token(Token = "0x40008CB")]
		k_EButton_Grip = 2,
		[Token(Token = "0x40008CC")]
		k_EButton_DPad_Left = 3,
		[Token(Token = "0x40008CD")]
		k_EButton_DPad_Up = 4,
		[Token(Token = "0x40008CE")]
		k_EButton_DPad_Right = 5,
		[Token(Token = "0x40008CF")]
		k_EButton_DPad_Down = 6,
		[Token(Token = "0x40008D0")]
		k_EButton_A = 7,
		[Token(Token = "0x40008D1")]
		k_EButton_ProximitySensor = 31,
		[Token(Token = "0x40008D2")]
		k_EButton_Axis0 = 32,
		[Token(Token = "0x40008D3")]
		k_EButton_Axis1 = 33,
		[Token(Token = "0x40008D4")]
		k_EButton_Axis2 = 34,
		[Token(Token = "0x40008D5")]
		k_EButton_Axis3 = 35,
		[Token(Token = "0x40008D6")]
		k_EButton_Axis4 = 36,
		[Token(Token = "0x40008D7")]
		k_EButton_SteamVR_Touchpad = 32,
		[Token(Token = "0x40008D8")]
		k_EButton_SteamVR_Trigger = 33,
		[Token(Token = "0x40008D9")]
		k_EButton_Dashboard_Back = 2,
		[Token(Token = "0x40008DA")]
		k_EButton_Max = 64
	}
	[Token(Token = "0x200013B")]
	public enum EVRMouseButton
	{
		[Token(Token = "0x40008DC")]
		Left = 1,
		[Token(Token = "0x40008DD")]
		Right = 2,
		[Token(Token = "0x40008DE")]
		Middle = 4
	}
	[Token(Token = "0x200013C")]
	public enum EHiddenAreaMeshType
	{
		[Token(Token = "0x40008E0")]
		k_eHiddenAreaMesh_Standard,
		[Token(Token = "0x40008E1")]
		k_eHiddenAreaMesh_Inverse,
		[Token(Token = "0x40008E2")]
		k_eHiddenAreaMesh_LineLoop,
		[Token(Token = "0x40008E3")]
		k_eHiddenAreaMesh_Max
	}
	[Token(Token = "0x200013D")]
	public enum EVRControllerAxisType
	{
		[Token(Token = "0x40008E5")]
		k_eControllerAxis_None,
		[Token(Token = "0x40008E6")]
		k_eControllerAxis_TrackPad,
		[Token(Token = "0x40008E7")]
		k_eControllerAxis_Joystick,
		[Token(Token = "0x40008E8")]
		k_eControllerAxis_Trigger
	}
	[Token(Token = "0x200013E")]
	public enum EVRControllerEventOutputType
	{
		[Token(Token = "0x40008EA")]
		ControllerEventOutput_OSEvents,
		[Token(Token = "0x40008EB")]
		ControllerEventOutput_VREvents
	}
	[Token(Token = "0x200013F")]
	public enum ECollisionBoundsStyle
	{
		[Token(Token = "0x40008ED")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Token(Token = "0x40008EE")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Token(Token = "0x40008EF")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Token(Token = "0x40008F0")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Token(Token = "0x40008F1")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Token(Token = "0x40008F2")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	[Token(Token = "0x2000140")]
	public enum EVROverlayError
	{
		[Token(Token = "0x40008F4")]
		None = 0,
		[Token(Token = "0x40008F5")]
		UnknownOverlay = 10,
		[Token(Token = "0x40008F6")]
		InvalidHandle = 11,
		[Token(Token = "0x40008F7")]
		PermissionDenied = 12,
		[Token(Token = "0x40008F8")]
		OverlayLimitExceeded = 13,
		[Token(Token = "0x40008F9")]
		WrongVisibilityType = 14,
		[Token(Token = "0x40008FA")]
		KeyTooLong = 15,
		[Token(Token = "0x40008FB")]
		NameTooLong = 16,
		[Token(Token = "0x40008FC")]
		KeyInUse = 17,
		[Token(Token = "0x40008FD")]
		WrongTransformType = 18,
		[Token(Token = "0x40008FE")]
		InvalidTrackedDevice = 19,
		[Token(Token = "0x40008FF")]
		InvalidParameter = 20,
		[Token(Token = "0x4000900")]
		ThumbnailCantBeDestroyed = 21,
		[Token(Token = "0x4000901")]
		ArrayTooSmall = 22,
		[Token(Token = "0x4000902")]
		RequestFailed = 23,
		[Token(Token = "0x4000903")]
		InvalidTexture = 24,
		[Token(Token = "0x4000904")]
		UnableToLoadFile = 25,
		[Token(Token = "0x4000905")]
		KeyboardAlreadyInUse = 26,
		[Token(Token = "0x4000906")]
		NoNeighbor = 27,
		[Token(Token = "0x4000907")]
		TooManyMaskPrimitives = 29,
		[Token(Token = "0x4000908")]
		BadMaskPrimitive = 30
	}
	[Token(Token = "0x2000141")]
	public enum EVRApplicationType
	{
		[Token(Token = "0x400090A")]
		VRApplication_Other,
		[Token(Token = "0x400090B")]
		VRApplication_Scene,
		[Token(Token = "0x400090C")]
		VRApplication_Overlay,
		[Token(Token = "0x400090D")]
		VRApplication_Background,
		[Token(Token = "0x400090E")]
		VRApplication_Utility,
		[Token(Token = "0x400090F")]
		VRApplication_VRMonitor,
		[Token(Token = "0x4000910")]
		VRApplication_SteamWatchdog,
		[Token(Token = "0x4000911")]
		VRApplication_Bootstrapper,
		[Token(Token = "0x4000912")]
		VRApplication_Max
	}
	[Token(Token = "0x2000142")]
	public enum EVRFirmwareError
	{
		[Token(Token = "0x4000914")]
		None,
		[Token(Token = "0x4000915")]
		Success,
		[Token(Token = "0x4000916")]
		Fail
	}
	[Token(Token = "0x2000143")]
	public enum EVRNotificationError
	{
		[Token(Token = "0x4000918")]
		OK = 0,
		[Token(Token = "0x4000919")]
		InvalidNotificationId = 100,
		[Token(Token = "0x400091A")]
		NotificationQueueFull = 101,
		[Token(Token = "0x400091B")]
		InvalidOverlayHandle = 102,
		[Token(Token = "0x400091C")]
		SystemWithUserValueAlreadyExists = 103
	}
	[Token(Token = "0x2000144")]
	public enum EVRInitError
	{
		[Token(Token = "0x400091E")]
		None = 0,
		[Token(Token = "0x400091F")]
		Unknown = 1,
		[Token(Token = "0x4000920")]
		Init_InstallationNotFound = 100,
		[Token(Token = "0x4000921")]
		Init_InstallationCorrupt = 101,
		[Token(Token = "0x4000922")]
		Init_VRClientDLLNotFound = 102,
		[Token(Token = "0x4000923")]
		Init_FileNotFound = 103,
		[Token(Token = "0x4000924")]
		Init_FactoryNotFound = 104,
		[Token(Token = "0x4000925")]
		Init_InterfaceNotFound = 105,
		[Token(Token = "0x4000926")]
		Init_InvalidInterface = 106,
		[Token(Token = "0x4000927")]
		Init_UserConfigDirectoryInvalid = 107,
		[Token(Token = "0x4000928")]
		Init_HmdNotFound = 108,
		[Token(Token = "0x4000929")]
		Init_NotInitialized = 109,
		[Token(Token = "0x400092A")]
		Init_PathRegistryNotFound = 110,
		[Token(Token = "0x400092B")]
		Init_NoConfigPath = 111,
		[Token(Token = "0x400092C")]
		Init_NoLogPath = 112,
		[Token(Token = "0x400092D")]
		Init_PathRegistryNotWritable = 113,
		[Token(Token = "0x400092E")]
		Init_AppInfoInitFailed = 114,
		[Token(Token = "0x400092F")]
		Init_Retry = 115,
		[Token(Token = "0x4000930")]
		Init_InitCanceledByUser = 116,
		[Token(Token = "0x4000931")]
		Init_AnotherAppLaunching = 117,
		[Token(Token = "0x4000932")]
		Init_SettingsInitFailed = 118,
		[Token(Token = "0x4000933")]
		Init_ShuttingDown = 119,
		[Token(Token = "0x4000934")]
		Init_TooManyObjects = 120,
		[Token(Token = "0x4000935")]
		Init_NoServerForBackgroundApp = 121,
		[Token(Token = "0x4000936")]
		Init_NotSupportedWithCompositor = 122,
		[Token(Token = "0x4000937")]
		Init_NotAvailableToUtilityApps = 123,
		[Token(Token = "0x4000938")]
		Init_Internal = 124,
		[Token(Token = "0x4000939")]
		Init_HmdDriverIdIsNone = 125,
		[Token(Token = "0x400093A")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Token(Token = "0x400093B")]
		Init_VRMonitorNotFound = 127,
		[Token(Token = "0x400093C")]
		Init_VRMonitorStartupFailed = 128,
		[Token(Token = "0x400093D")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Token(Token = "0x400093E")]
		Init_InvalidApplicationType = 130,
		[Token(Token = "0x400093F")]
		Init_NotAvailableToWatchdogApps = 131,
		[Token(Token = "0x4000940")]
		Init_WatchdogDisabledInSettings = 132,
		[Token(Token = "0x4000941")]
		Init_VRDashboardNotFound = 133,
		[Token(Token = "0x4000942")]
		Init_VRDashboardStartupFailed = 134,
		[Token(Token = "0x4000943")]
		Init_VRHomeNotFound = 135,
		[Token(Token = "0x4000944")]
		Init_VRHomeStartupFailed = 136,
		[Token(Token = "0x4000945")]
		Driver_Failed = 200,
		[Token(Token = "0x4000946")]
		Driver_Unknown = 201,
		[Token(Token = "0x4000947")]
		Driver_HmdUnknown = 202,
		[Token(Token = "0x4000948")]
		Driver_NotLoaded = 203,
		[Token(Token = "0x4000949")]
		Driver_RuntimeOutOfDate = 204,
		[Token(Token = "0x400094A")]
		Driver_HmdInUse = 205,
		[Token(Token = "0x400094B")]
		Driver_NotCalibrated = 206,
		[Token(Token = "0x400094C")]
		Driver_CalibrationInvalid = 207,
		[Token(Token = "0x400094D")]
		Driver_HmdDisplayNotFound = 208,
		[Token(Token = "0x400094E")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Token(Token = "0x400094F")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Token(Token = "0x4000950")]
		Driver_HmdDisplayMirrored = 212,
		[Token(Token = "0x4000951")]
		IPC_ServerInitFailed = 300,
		[Token(Token = "0x4000952")]
		IPC_ConnectFailed = 301,
		[Token(Token = "0x4000953")]
		IPC_SharedStateInitFailed = 302,
		[Token(Token = "0x4000954")]
		IPC_CompositorInitFailed = 303,
		[Token(Token = "0x4000955")]
		IPC_MutexInitFailed = 304,
		[Token(Token = "0x4000956")]
		IPC_Failed = 305,
		[Token(Token = "0x4000957")]
		IPC_CompositorConnectFailed = 306,
		[Token(Token = "0x4000958")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Token(Token = "0x4000959")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Token(Token = "0x400095A")]
		Compositor_Failed = 400,
		[Token(Token = "0x400095B")]
		Compositor_D3D11HardwareRequired = 401,
		[Token(Token = "0x400095C")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Token(Token = "0x400095D")]
		Compositor_OverlayInitFailed = 403,
		[Token(Token = "0x400095E")]
		Compositor_ScreenshotsInitFailed = 404,
		[Token(Token = "0x400095F")]
		Compositor_UnableToCreateDevice = 405,
		[Token(Token = "0x4000960")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Token(Token = "0x4000961")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Token(Token = "0x4000962")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Token(Token = "0x4000963")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Token(Token = "0x4000964")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Token(Token = "0x4000965")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Token(Token = "0x4000966")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Token(Token = "0x4000967")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Token(Token = "0x4000968")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Token(Token = "0x4000969")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Token(Token = "0x400096A")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Token(Token = "0x400096B")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Token(Token = "0x400096C")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Token(Token = "0x400096D")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Token(Token = "0x400096E")]
		Steam_SteamInstallationNotFound = 2000
	}
	[Token(Token = "0x2000145")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4000970")]
		None,
		[Token(Token = "0x4000971")]
		Mono,
		[Token(Token = "0x4000972")]
		Stereo,
		[Token(Token = "0x4000973")]
		Cubemap,
		[Token(Token = "0x4000974")]
		MonoPanorama,
		[Token(Token = "0x4000975")]
		StereoPanorama
	}
	[Token(Token = "0x2000146")]
	public enum EVRScreenshotPropertyFilenames
	{
		[Token(Token = "0x4000977")]
		Preview,
		[Token(Token = "0x4000978")]
		VR
	}
	[Token(Token = "0x2000147")]
	public enum EVRTrackedCameraError
	{
		[Token(Token = "0x400097A")]
		None = 0,
		[Token(Token = "0x400097B")]
		OperationFailed = 100,
		[Token(Token = "0x400097C")]
		InvalidHandle = 101,
		[Token(Token = "0x400097D")]
		InvalidFrameHeaderVersion = 102,
		[Token(Token = "0x400097E")]
		OutOfHandles = 103,
		[Token(Token = "0x400097F")]
		IPCFailure = 104,
		[Token(Token = "0x4000980")]
		NotSupportedForThisDevice = 105,
		[Token(Token = "0x4000981")]
		SharedMemoryFailure = 106,
		[Token(Token = "0x4000982")]
		FrameBufferingFailure = 107,
		[Token(Token = "0x4000983")]
		StreamSetupFailure = 108,
		[Token(Token = "0x4000984")]
		InvalidGLTextureId = 109,
		[Token(Token = "0x4000985")]
		InvalidSharedTextureHandle = 110,
		[Token(Token = "0x4000986")]
		FailedToGetGLTextureId = 111,
		[Token(Token = "0x4000987")]
		SharedTextureFailure = 112,
		[Token(Token = "0x4000988")]
		NoFrameAvailable = 113,
		[Token(Token = "0x4000989")]
		InvalidArgument = 114,
		[Token(Token = "0x400098A")]
		InvalidFrameBufferSize = 115
	}
	[Token(Token = "0x2000148")]
	public enum EVRTrackedCameraFrameType
	{
		[Token(Token = "0x400098C")]
		Distorted,
		[Token(Token = "0x400098D")]
		Undistorted,
		[Token(Token = "0x400098E")]
		MaximumUndistorted,
		[Token(Token = "0x400098F")]
		MAX_CAMERA_FRAME_TYPES
	}
	[Token(Token = "0x2000149")]
	public enum EVRApplicationError
	{
		[Token(Token = "0x4000991")]
		None = 0,
		[Token(Token = "0x4000992")]
		AppKeyAlreadyExists = 100,
		[Token(Token = "0x4000993")]
		NoManifest = 101,
		[Token(Token = "0x4000994")]
		NoApplication = 102,
		[Token(Token = "0x4000995")]
		InvalidIndex = 103,
		[Token(Token = "0x4000996")]
		UnknownApplication = 104,
		[Token(Token = "0x4000997")]
		IPCFailed = 105,
		[Token(Token = "0x4000998")]
		ApplicationAlreadyRunning = 106,
		[Token(Token = "0x4000999")]
		InvalidManifest = 107,
		[Token(Token = "0x400099A")]
		InvalidApplication = 108,
		[Token(Token = "0x400099B")]
		LaunchFailed = 109,
		[Token(Token = "0x400099C")]
		ApplicationAlreadyStarting = 110,
		[Token(Token = "0x400099D")]
		LaunchInProgress = 111,
		[Token(Token = "0x400099E")]
		OldApplicationQuitting = 112,
		[Token(Token = "0x400099F")]
		TransitionAborted = 113,
		[Token(Token = "0x40009A0")]
		IsTemplate = 114,
		[Token(Token = "0x40009A1")]
		BufferTooSmall = 200,
		[Token(Token = "0x40009A2")]
		PropertyNotSet = 201,
		[Token(Token = "0x40009A3")]
		UnknownProperty = 202,
		[Token(Token = "0x40009A4")]
		InvalidParameter = 203
	}
	[Token(Token = "0x200014A")]
	public enum EVRApplicationProperty
	{
		[Token(Token = "0x40009A6")]
		Name_String = 0,
		[Token(Token = "0x40009A7")]
		LaunchType_String = 11,
		[Token(Token = "0x40009A8")]
		WorkingDirectory_String = 12,
		[Token(Token = "0x40009A9")]
		BinaryPath_String = 13,
		[Token(Token = "0x40009AA")]
		Arguments_String = 14,
		[Token(Token = "0x40009AB")]
		URL_String = 15,
		[Token(Token = "0x40009AC")]
		Description_String = 50,
		[Token(Token = "0x40009AD")]
		NewsURL_String = 51,
		[Token(Token = "0x40009AE")]
		ImagePath_String = 52,
		[Token(Token = "0x40009AF")]
		Source_String = 53,
		[Token(Token = "0x40009B0")]
		IsDashboardOverlay_Bool = 60,
		[Token(Token = "0x40009B1")]
		IsTemplate_Bool = 61,
		[Token(Token = "0x40009B2")]
		IsInstanced_Bool = 62,
		[Token(Token = "0x40009B3")]
		IsInternal_Bool = 63,
		[Token(Token = "0x40009B4")]
		LastLaunchTime_Uint64 = 70
	}
	[Token(Token = "0x200014B")]
	public enum EVRApplicationTransitionState
	{
		[Token(Token = "0x40009B6")]
		VRApplicationTransition_None = 0,
		[Token(Token = "0x40009B7")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Token(Token = "0x40009B8")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Token(Token = "0x40009B9")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	[Token(Token = "0x200014C")]
	public enum ChaperoneCalibrationState
	{
		[Token(Token = "0x40009BB")]
		OK = 1,
		[Token(Token = "0x40009BC")]
		Warning = 100,
		[Token(Token = "0x40009BD")]
		Warning_BaseStationMayHaveMoved = 101,
		[Token(Token = "0x40009BE")]
		Warning_BaseStationRemoved = 102,
		[Token(Token = "0x40009BF")]
		Warning_SeatedBoundsInvalid = 103,
		[Token(Token = "0x40009C0")]
		Error = 200,
		[Token(Token = "0x40009C1")]
		Error_BaseStationUninitialized = 201,
		[Token(Token = "0x40009C2")]
		Error_BaseStationConflict = 202,
		[Token(Token = "0x40009C3")]
		Error_PlayAreaInvalid = 203,
		[Token(Token = "0x40009C4")]
		Error_CollisionBoundsInvalid = 204
	}
	[Token(Token = "0x200014D")]
	public enum EChaperoneConfigFile
	{
		[Token(Token = "0x40009C6")]
		Live = 1,
		[Token(Token = "0x40009C7")]
		Temp
	}
	[Token(Token = "0x200014E")]
	public enum EChaperoneImportFlags
	{
		[Token(Token = "0x40009C9")]
		EChaperoneImport_BoundsOnly = 1
	}
	[Token(Token = "0x200014F")]
	public enum EVRCompositorError
	{
		[Token(Token = "0x40009CB")]
		None = 0,
		[Token(Token = "0x40009CC")]
		RequestFailed = 1,
		[Token(Token = "0x40009CD")]
		IncompatibleVersion = 100,
		[Token(Token = "0x40009CE")]
		DoNotHaveFocus = 101,
		[Token(Token = "0x40009CF")]
		InvalidTexture = 102,
		[Token(Token = "0x40009D0")]
		IsNotSceneApplication = 103,
		[Token(Token = "0x40009D1")]
		TextureIsOnWrongDevice = 104,
		[Token(Token = "0x40009D2")]
		TextureUsesUnsupportedFormat = 105,
		[Token(Token = "0x40009D3")]
		SharedTexturesNotSupported = 106,
		[Token(Token = "0x40009D4")]
		IndexOutOfRange = 107,
		[Token(Token = "0x40009D5")]
		AlreadySubmitted = 108,
		[Token(Token = "0x40009D6")]
		InvalidBounds = 109
	}
	[Token(Token = "0x2000150")]
	public enum VROverlayInputMethod
	{
		[Token(Token = "0x40009D8")]
		None,
		[Token(Token = "0x40009D9")]
		Mouse
	}
	[Token(Token = "0x2000151")]
	public enum VROverlayTransformType
	{
		[Token(Token = "0x40009DB")]
		VROverlayTransform_Absolute,
		[Token(Token = "0x40009DC")]
		VROverlayTransform_TrackedDeviceRelative,
		[Token(Token = "0x40009DD")]
		VROverlayTransform_SystemOverlay,
		[Token(Token = "0x40009DE")]
		VROverlayTransform_TrackedComponent
	}
	[Token(Token = "0x2000152")]
	public enum VROverlayFlags
	{
		[Token(Token = "0x40009E0")]
		None,
		[Token(Token = "0x40009E1")]
		Curved,
		[Token(Token = "0x40009E2")]
		RGSS4X,
		[Token(Token = "0x40009E3")]
		NoDashboardTab,
		[Token(Token = "0x40009E4")]
		AcceptsGamepadEvents,
		[Token(Token = "0x40009E5")]
		ShowGamepadFocus,
		[Token(Token = "0x40009E6")]
		SendVRScrollEvents,
		[Token(Token = "0x40009E7")]
		SendVRTouchpadEvents,
		[Token(Token = "0x40009E8")]
		ShowTouchPadScrollWheel,
		[Token(Token = "0x40009E9")]
		TransferOwnershipToInternalProcess,
		[Token(Token = "0x40009EA")]
		SideBySide_Parallel,
		[Token(Token = "0x40009EB")]
		SideBySide_Crossed,
		[Token(Token = "0x40009EC")]
		Panorama,
		[Token(Token = "0x40009ED")]
		StereoPanorama,
		[Token(Token = "0x40009EE")]
		SortWithNonSceneOverlays,
		[Token(Token = "0x40009EF")]
		VisibleInDashboard
	}
	[Token(Token = "0x2000153")]
	public enum VRMessageOverlayResponse
	{
		[Token(Token = "0x40009F1")]
		ButtonPress_0,
		[Token(Token = "0x40009F2")]
		ButtonPress_1,
		[Token(Token = "0x40009F3")]
		ButtonPress_2,
		[Token(Token = "0x40009F4")]
		ButtonPress_3,
		[Token(Token = "0x40009F5")]
		CouldntFindSystemOverlay,
		[Token(Token = "0x40009F6")]
		CouldntFindOrCreateClientOverlay,
		[Token(Token = "0x40009F7")]
		ApplicationQuit
	}
	[Token(Token = "0x2000154")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x40009F9")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x40009FA")]
		k_EGamepadTextInputModePassword,
		[Token(Token = "0x40009FB")]
		k_EGamepadTextInputModeSubmit
	}
	[Token(Token = "0x2000155")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x40009FD")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x40009FE")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000156")]
	public enum EOverlayDirection
	{
		[Token(Token = "0x4000A00")]
		Up,
		[Token(Token = "0x4000A01")]
		Down,
		[Token(Token = "0x4000A02")]
		Left,
		[Token(Token = "0x4000A03")]
		Right,
		[Token(Token = "0x4000A04")]
		Count
	}
	[Token(Token = "0x2000157")]
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Token(Token = "0x4000A06")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Token(Token = "0x4000A07")]
		OverlayIntersectionPrimitiveType_Circle
	}
	[Token(Token = "0x2000158")]
	public enum EVRRenderModelError
	{
		[Token(Token = "0x4000A09")]
		None = 0,
		[Token(Token = "0x4000A0A")]
		Loading = 100,
		[Token(Token = "0x4000A0B")]
		NotSupported = 200,
		[Token(Token = "0x4000A0C")]
		InvalidArg = 300,
		[Token(Token = "0x4000A0D")]
		InvalidModel = 301,
		[Token(Token = "0x4000A0E")]
		NoShapes = 302,
		[Token(Token = "0x4000A0F")]
		MultipleShapes = 303,
		[Token(Token = "0x4000A10")]
		TooManyVertices = 304,
		[Token(Token = "0x4000A11")]
		MultipleTextures = 305,
		[Token(Token = "0x4000A12")]
		BufferTooSmall = 306,
		[Token(Token = "0x4000A13")]
		NotEnoughNormals = 307,
		[Token(Token = "0x4000A14")]
		NotEnoughTexCoords = 308,
		[Token(Token = "0x4000A15")]
		InvalidTexture = 400
	}
	[Token(Token = "0x2000159")]
	public enum EVRComponentProperty
	{
		[Token(Token = "0x4000A17")]
		IsStatic = 1,
		[Token(Token = "0x4000A18")]
		IsVisible = 2,
		[Token(Token = "0x4000A19")]
		IsTouched = 4,
		[Token(Token = "0x4000A1A")]
		IsPressed = 8,
		[Token(Token = "0x4000A1B")]
		IsScrolled = 0x10
	}
	[Token(Token = "0x200015A")]
	public enum EVRNotificationType
	{
		[Token(Token = "0x4000A1D")]
		Transient,
		[Token(Token = "0x4000A1E")]
		Persistent,
		[Token(Token = "0x4000A1F")]
		Transient_SystemWithUserValue
	}
	[Token(Token = "0x200015B")]
	public enum EVRNotificationStyle
	{
		[Token(Token = "0x4000A21")]
		None = 0,
		[Token(Token = "0x4000A22")]
		Application = 100,
		[Token(Token = "0x4000A23")]
		Contact_Disabled = 200,
		[Token(Token = "0x4000A24")]
		Contact_Enabled = 201,
		[Token(Token = "0x4000A25")]
		Contact_Active = 202
	}
	[Token(Token = "0x200015C")]
	public enum EVRSettingsError
	{
		[Token(Token = "0x4000A27")]
		None,
		[Token(Token = "0x4000A28")]
		IPCFailed,
		[Token(Token = "0x4000A29")]
		WriteFailed,
		[Token(Token = "0x4000A2A")]
		ReadFailed,
		[Token(Token = "0x4000A2B")]
		JsonParseFailed,
		[Token(Token = "0x4000A2C")]
		UnsetSettingHasNoDefault
	}
	[Token(Token = "0x200015D")]
	public enum EVRScreenshotError
	{
		[Token(Token = "0x4000A2E")]
		None = 0,
		[Token(Token = "0x4000A2F")]
		RequestFailed = 1,
		[Token(Token = "0x4000A30")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4000A31")]
		NotFound = 101,
		[Token(Token = "0x4000A32")]
		BufferTooSmall = 102,
		[Token(Token = "0x4000A33")]
		ScreenshotAlreadyInProgress = 108
	}
	[StructLayout(2)]
	[Token(Token = "0x200015E")]
	public struct VREvent_Data_t
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	[Token(Token = "0x200015F")]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	[Token(Token = "0x2000160")]
	public struct HmdMatrix34_t
	{
		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	[Token(Token = "0x2000161")]
	public struct HmdMatrix44_t
	{
		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	[Token(Token = "0x2000162")]
	public struct HmdVector3_t
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	[Token(Token = "0x2000163")]
	public struct HmdVector4_t
	{
		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	[Token(Token = "0x2000164")]
	public struct HmdVector3d_t
	{
		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	[Token(Token = "0x2000165")]
	public struct HmdVector2_t
	{
		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	[Token(Token = "0x2000166")]
	public struct HmdQuaternion_t
	{
		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	[Token(Token = "0x2000167")]
	public struct HmdColor_t
	{
		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	[Token(Token = "0x2000168")]
	public struct HmdQuad_t
	{
		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	[Token(Token = "0x2000169")]
	public struct HmdRect2_t
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	[Token(Token = "0x200016A")]
	public struct DistortionCoordinates_t
	{
		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	[Token(Token = "0x200016B")]
	public struct Texture_t
	{
		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETextureType eType;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EColorSpace eColorSpace;
	}
	[Token(Token = "0x200016C")]
	public struct TrackedDevicePose_t
	{
		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	[Token(Token = "0x200016D")]
	public struct VRTextureBounds_t
	{
		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	[Token(Token = "0x200016E")]
	public struct VRVulkanTextureData_t
	{
		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pPhysicalDevice;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pInstance;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pQueue;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nQueueFamilyIndex;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nWidth;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nHeight;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nFormat;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nSampleCount;
	}
	[Token(Token = "0x200016F")]
	public struct D3D12TextureData_t
	{
		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pCommandQueue;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNodeMask;
	}
	[Token(Token = "0x2000170")]
	public struct VREvent_Controller_t
	{
		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	[Token(Token = "0x2000171")]
	public struct VREvent_Mouse_t
	{
		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	[Token(Token = "0x2000172")]
	public struct VREvent_Scroll_t
	{
		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	[Token(Token = "0x2000173")]
	public struct VREvent_TouchPadMove_t
	{
		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	[Token(Token = "0x2000174")]
	public struct VREvent_Notification_t
	{
		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	[Token(Token = "0x2000175")]
	public struct VREvent_Process_t
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	[Token(Token = "0x2000176")]
	public struct VREvent_Overlay_t
	{
		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;
	}
	[Token(Token = "0x2000177")]
	public struct VREvent_Status_t
	{
		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	[Token(Token = "0x2000178")]
	public struct VREvent_Keyboard_t
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;
	}
	[Token(Token = "0x2000179")]
	public struct VREvent_Ipd_t
	{
		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	[Token(Token = "0x200017A")]
	public struct VREvent_Chaperone_t
	{
		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	[Token(Token = "0x200017B")]
	public struct VREvent_Reserved_t
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;
	}
	[Token(Token = "0x200017C")]
	public struct VREvent_PerformanceTest_t
	{
		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	[Token(Token = "0x200017D")]
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	[Token(Token = "0x200017E")]
	public struct VREvent_Screenshot_t
	{
		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	[Token(Token = "0x200017F")]
	public struct VREvent_ScreenshotProgress_t
	{
		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	[Token(Token = "0x2000180")]
	public struct VREvent_ApplicationLaunch_t
	{
		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	[Token(Token = "0x2000181")]
	public struct VREvent_EditingCameraSurface_t
	{
		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	[Token(Token = "0x2000182")]
	public struct VREvent_MessageOverlay_t
	{
		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	[Token(Token = "0x2000183")]
	public struct VREvent_Property_t
	{
		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	[Token(Token = "0x2000184")]
	public struct VREvent_t
	{
		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	[Token(Token = "0x2000185")]
	public struct VREvent_t_Packed
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x7D7A48", Offset = "0x7D7A48", VA = "0x7D7A48")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x7D7A94", Offset = "0x7D7A94", VA = "0x7D7A94")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000186")]
	public struct HiddenAreaMesh_t
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unTriangleCount;
	}
	[Token(Token = "0x2000187")]
	public struct VRControllerAxis_t
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x2000188")]
	public struct VRControllerState_t
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	[Token(Token = "0x2000189")]
	public struct VRControllerState_t_Packed
	{
		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x7D7A14", Offset = "0x7D7A14", VA = "0x7D7A14")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x7D7A40", Offset = "0x7D7A40", VA = "0x7D7A40")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	[Token(Token = "0x200018A")]
	public struct Compositor_OverlaySettings
	{
		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	[Token(Token = "0x200018B")]
	public struct CameraVideoStreamFrameHeader_t
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	[Token(Token = "0x200018C")]
	public struct AppOverrideKeys_t
	{
		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pchValue;
	}
	[Token(Token = "0x200018D")]
	public struct Compositor_FrameTiming
	{
		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	[Token(Token = "0x200018E")]
	public struct Compositor_CumulativeStats
	{
		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	[Token(Token = "0x200018F")]
	public struct VROverlayIntersectionParams_t
	{
		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	[Token(Token = "0x2000190")]
	public struct VROverlayIntersectionResults_t
	{
		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	[Token(Token = "0x2000191")]
	public struct IntersectionMaskRectangle_t
	{
		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	[Token(Token = "0x2000192")]
	public struct IntersectionMaskCircle_t
	{
		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	[Token(Token = "0x2000193")]
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	[Token(Token = "0x2000194")]
	public struct RenderModel_ComponentState_t
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	[Token(Token = "0x2000195")]
	public struct RenderModel_Vertex_t
	{
		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	[Token(Token = "0x2000196")]
	public struct RenderModel_TextureMap_t
	{
		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;
	}
	[Token(Token = "0x2000197")]
	public struct RenderModel_TextureMap_t_Packed
	{
		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x7D7998", Offset = "0x7D7998", VA = "0x7D7998")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x7D79AC", Offset = "0x7D79AC", VA = "0x7D79AC")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000198")]
	public struct RenderModel_t
	{
		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr rIndexData;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unTriangleCount;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diffuseTextureId;
	}
	[Token(Token = "0x2000199")]
	public struct RenderModel_t_Packed
	{
		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr rIndexData;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTriangleCount;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diffuseTextureId;

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x7D79C8", Offset = "0x7D79C8", VA = "0x7D79C8")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x7D79E8", Offset = "0x7D79E8", VA = "0x7D79E8")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	[Token(Token = "0x200019A")]
	public struct RenderModel_ControllerMode_State_t
	{
		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	[Token(Token = "0x200019B")]
	public struct NotificationBitmap_t
	{
		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nWidth;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nHeight;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nBytesPerPixel;
	}
	[Token(Token = "0x200019C")]
	public struct COpenVRContext
	{
		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperone;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVRChaperoneSetup;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRCompositor;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVROverlay;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRResources;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRRenderModels;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRExtendedDisplay;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntPtr m_pVRSettings;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntPtr m_pVRApplications;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr m_pVRTrackedCamera;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr m_pVRScreenshots;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntPtr m_pVRDriverManager;
	}
	[Token(Token = "0x200019D")]
	public class OpenVR
	{
		[Token(Token = "0x20003D7")]
		private class COpenVRContext
		{
			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRSystem m_pVRSystem;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRChaperone m_pVRChaperone;

			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Token(Token = "0x4001127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRCompositor m_pVRCompositor;

			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVROverlay m_pVROverlay;

			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels m_pVRRenderModels;

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CVRSettings m_pVRSettings;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CVRApplications m_pVRApplications;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private CVRScreenshots m_pVRScreenshots;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xEBDB74", Offset = "0xEBDB74", VA = "0xEBDB74")]
			public COpenVRContext()
			{
			}

			[Token(Token = "0x60012AF")]
			[Address(RVA = "0xEBE9C0", Offset = "0xEBE9C0", VA = "0xEBE9C0")]
			public void Clear()
			{
			}

			[Token(Token = "0x60012B0")]
			[Address(RVA = "0xEBEA48", Offset = "0xEBEA48", VA = "0xEBEA48")]
			private void CheckClear()
			{
			}

			[Token(Token = "0x60012B1")]
			[Address(RVA = "0xEBDC0C", Offset = "0xEBDC0C", VA = "0xEBDC0C")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Token(Token = "0x60012B2")]
			[Address(RVA = "0xEBDD34", Offset = "0xEBDD34", VA = "0xEBDD34")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Token(Token = "0x60012B3")]
			[Address(RVA = "0xEBDE5C", Offset = "0xEBDE5C", VA = "0xEBDE5C")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Token(Token = "0x60012B4")]
			[Address(RVA = "0xEBDF84", Offset = "0xEBDF84", VA = "0xEBDF84")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Token(Token = "0x60012B5")]
			[Address(RVA = "0xEBE0AC", Offset = "0xEBE0AC", VA = "0xEBE0AC")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Token(Token = "0x60012B6")]
			[Address(RVA = "0xEBE1D4", Offset = "0xEBE1D4", VA = "0xEBE1D4")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Token(Token = "0x60012B7")]
			[Address(RVA = "0xEBE2FC", Offset = "0xEBE2FC", VA = "0xEBE2FC")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Token(Token = "0x60012B8")]
			[Address(RVA = "0xEBE424", Offset = "0xEBE424", VA = "0xEBE424")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Token(Token = "0x60012B9")]
			[Address(RVA = "0xEBE54C", Offset = "0xEBE54C", VA = "0xEBE54C")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Token(Token = "0x60012BA")]
			[Address(RVA = "0xEBE674", Offset = "0xEBE674", VA = "0xEBE674")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Token(Token = "0x60012BB")]
			[Address(RVA = "0xEBE79C", Offset = "0xEBE79C", VA = "0xEBE79C")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B5F")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Token(Token = "0x4000B60")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Token(Token = "0x4000B61")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Token(Token = "0x4000B62")]
		public const uint k_unMaxTrackedDeviceCount = 16u;

		[Token(Token = "0x4000B63")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Token(Token = "0x4000B64")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Token(Token = "0x4000B65")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Token(Token = "0x4000B66")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Token(Token = "0x4000B67")]
		public const uint k_unFloatPropertyTag = 1u;

		[Token(Token = "0x4000B68")]
		public const uint k_unInt32PropertyTag = 2u;

		[Token(Token = "0x4000B69")]
		public const uint k_unUint64PropertyTag = 3u;

		[Token(Token = "0x4000B6A")]
		public const uint k_unBoolPropertyTag = 4u;

		[Token(Token = "0x4000B6B")]
		public const uint k_unStringPropertyTag = 5u;

		[Token(Token = "0x4000B6C")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Token(Token = "0x4000B6D")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Token(Token = "0x4000B6E")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Token(Token = "0x4000B6F")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Token(Token = "0x4000B70")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Token(Token = "0x4000B71")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Token(Token = "0x4000B72")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Token(Token = "0x4000B73")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Token(Token = "0x4000B74")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Token(Token = "0x4000B75")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Token(Token = "0x4000B76")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Token(Token = "0x4000B77")]
		public const string IVRSystem_Version = "IVRSystem_016";

		[Token(Token = "0x4000B78")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Token(Token = "0x4000B79")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Token(Token = "0x4000B7A")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Token(Token = "0x4000B7B")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Token(Token = "0x4000B7C")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Token(Token = "0x4000B7D")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Token(Token = "0x4000B7E")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Token(Token = "0x4000B7F")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Token(Token = "0x4000B80")]
		public const string IVRCompositor_Version = "IVRCompositor_020";

		[Token(Token = "0x4000B81")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Token(Token = "0x4000B82")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Token(Token = "0x4000B83")]
		public const uint k_unMaxOverlayCount = 64u;

		[Token(Token = "0x4000B84")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Token(Token = "0x4000B85")]
		public const string IVROverlay_Version = "IVROverlay_016";

		[Token(Token = "0x4000B86")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Token(Token = "0x4000B87")]
		public const string k_pch_Controller_Component_Base = "base";

		[Token(Token = "0x4000B88")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Token(Token = "0x4000B89")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Token(Token = "0x4000B8A")]
		public const string k_pch_Controller_Component_Status = "status";

		[Token(Token = "0x4000B8B")]
		public const string IVRRenderModels_Version = "IVRRenderModels_005";

		[Token(Token = "0x4000B8C")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Token(Token = "0x4000B8D")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Token(Token = "0x4000B8E")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Token(Token = "0x4000B8F")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Token(Token = "0x4000B90")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Token(Token = "0x4000B91")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Token(Token = "0x4000B92")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Token(Token = "0x4000B93")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Token(Token = "0x4000B94")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Token(Token = "0x4000B95")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Token(Token = "0x4000B96")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Token(Token = "0x4000B97")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Token(Token = "0x4000B98")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Token(Token = "0x4000B99")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Token(Token = "0x4000B9A")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Token(Token = "0x4000B9B")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Token(Token = "0x4000B9C")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Token(Token = "0x4000B9D")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Token(Token = "0x4000B9E")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Token(Token = "0x4000B9F")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Token(Token = "0x4000BA0")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Token(Token = "0x4000BA1")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Token(Token = "0x4000BA2")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Token(Token = "0x4000BA3")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Token(Token = "0x4000BA4")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Token(Token = "0x4000BA5")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Token(Token = "0x4000BA6")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Token(Token = "0x4000BA7")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Token(Token = "0x4000BA8")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Token(Token = "0x4000BA9")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Token(Token = "0x4000BAA")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Token(Token = "0x4000BAB")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Token(Token = "0x4000BAC")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Token(Token = "0x4000BAD")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Token(Token = "0x4000BAE")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Token(Token = "0x4000BAF")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Token(Token = "0x4000BB0")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Token(Token = "0x4000BB1")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Token(Token = "0x4000BB2")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Token(Token = "0x4000BB3")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Token(Token = "0x4000BB4")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Token(Token = "0x4000BB5")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Token(Token = "0x4000BB6")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Token(Token = "0x4000BB7")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Token(Token = "0x4000BB8")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Token(Token = "0x4000BB9")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Token(Token = "0x4000BBA")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Token(Token = "0x4000BBB")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Token(Token = "0x4000BBC")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Token(Token = "0x4000BBD")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Token(Token = "0x4000BBE")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Token(Token = "0x4000BBF")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Token(Token = "0x4000BC0")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Token(Token = "0x4000BC1")]
		public const string k_pch_Null_Section = "driver_null";

		[Token(Token = "0x4000BC2")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Token(Token = "0x4000BC3")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Token(Token = "0x4000BC4")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Token(Token = "0x4000BC5")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Token(Token = "0x4000BC6")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Token(Token = "0x4000BC7")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Token(Token = "0x4000BC8")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Token(Token = "0x4000BC9")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Token(Token = "0x4000BCA")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Token(Token = "0x4000BCB")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Token(Token = "0x4000BCC")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Token(Token = "0x4000BCD")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Token(Token = "0x4000BCE")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Token(Token = "0x4000BCF")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Token(Token = "0x4000BD0")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Token(Token = "0x4000BD1")]
		public const string k_pch_Notifications_Section = "notifications";

		[Token(Token = "0x4000BD2")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Token(Token = "0x4000BD3")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Token(Token = "0x4000BD4")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Token(Token = "0x4000BD5")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Token(Token = "0x4000BD6")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Token(Token = "0x4000BD7")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Token(Token = "0x4000BD8")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Token(Token = "0x4000BD9")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Token(Token = "0x4000BDA")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Token(Token = "0x4000BDB")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Token(Token = "0x4000BDC")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Token(Token = "0x4000BDD")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Token(Token = "0x4000BDE")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Token(Token = "0x4000BDF")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Token(Token = "0x4000BE0")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Token(Token = "0x4000BE1")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Token(Token = "0x4000BE2")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Token(Token = "0x4000BE3")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Token(Token = "0x4000BE4")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Token(Token = "0x4000BE5")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Token(Token = "0x4000BE6")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Token(Token = "0x4000BE7")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Token(Token = "0x4000BE8")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Token(Token = "0x4000BE9")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Token(Token = "0x4000BEA")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Token(Token = "0x4000BEB")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Token(Token = "0x4000BEC")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Token(Token = "0x4000BED")]
		public const string k_pch_Camera_Section = "camera";

		[Token(Token = "0x4000BEE")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Token(Token = "0x4000BEF")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Token(Token = "0x4000BF0")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Token(Token = "0x4000BF1")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Token(Token = "0x4000BF2")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Token(Token = "0x4000BF3")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Token(Token = "0x4000BF4")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Token(Token = "0x4000BF5")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Token(Token = "0x4000BF6")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Token(Token = "0x4000BF7")]
		public const string k_pch_audio_Section = "audio";

		[Token(Token = "0x4000BF8")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Token(Token = "0x4000BF9")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Token(Token = "0x4000BFA")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Token(Token = "0x4000BFB")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Token(Token = "0x4000BFC")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Token(Token = "0x4000BFD")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Token(Token = "0x4000BFE")]
		public const string k_pch_Power_Section = "power";

		[Token(Token = "0x4000BFF")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Token(Token = "0x4000C00")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Token(Token = "0x4000C01")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Token(Token = "0x4000C02")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Token(Token = "0x4000C03")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Token(Token = "0x4000C04")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Token(Token = "0x4000C05")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Token(Token = "0x4000C06")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Token(Token = "0x4000C07")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Token(Token = "0x4000C08")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Token(Token = "0x4000C09")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Token(Token = "0x4000C0A")]
		public const string IVRResources_Version = "IVRResources_001";

		[Token(Token = "0x4000C0B")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x743CD4", Offset = "0x743CD4")]
		private static uint <VRToken>k__BackingField;

		[Token(Token = "0x4000C0D")]
		private const string FnTable_Prefix = "FnTable:";

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		[Token(Token = "0x170000DC")]
		private static uint VRToken
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xEBD9C4", Offset = "0xEBD9C4", VA = "0xEBD9C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7464A0", Offset = "0x7464A0")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x600088C")]
			[Address(RVA = "0xEBDA2C", Offset = "0xEBDA2C", VA = "0xEBDA2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7464B0", Offset = "0x7464B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xEBDA98", Offset = "0xEBDA98", VA = "0xEBDA98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public static CVRSystem System
		{
			[Token(Token = "0x600088E")]
			[Address(RVA = "0xEBDBA4", Offset = "0xEBDBA4", VA = "0xEBDBA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		public static CVRChaperone Chaperone
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0xEBDCCC", Offset = "0xEBDCCC", VA = "0xEBDCCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Token(Token = "0x6000890")]
			[Address(RVA = "0xEBDDF4", Offset = "0xEBDDF4", VA = "0xEBDDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E1")]
		public static CVRCompositor Compositor
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0xEBDF1C", Offset = "0xEBDF1C", VA = "0xEBDF1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		public static CVROverlay Overlay
		{
			[Token(Token = "0x6000892")]
			[Address(RVA = "0xEBE044", Offset = "0xEBE044", VA = "0xEBE044")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		public static CVRRenderModels RenderModels
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0xEBE16C", Offset = "0xEBE16C", VA = "0xEBE16C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0xEBE294", Offset = "0xEBE294", VA = "0xEBE294")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public static CVRSettings Settings
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0xEBE3BC", Offset = "0xEBE3BC", VA = "0xEBE3BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		public static CVRApplications Applications
		{
			[Token(Token = "0x6000896")]
			[Address(RVA = "0xEBE4E4", Offset = "0xEBE4E4", VA = "0xEBE4E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		public static CVRScreenshots Screenshots
		{
			[Token(Token = "0x6000897")]
			[Address(RVA = "0xEBE60C", Offset = "0xEBE60C", VA = "0xEBE60C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public static CVRTrackedCamera TrackedCamera
		{
			[Token(Token = "0x6000898")]
			[Address(RVA = "0xEBE734", Offset = "0xEBE734", VA = "0xEBE734")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xEBD500", Offset = "0xEBD500", VA = "0xEBD500")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xEBD594", Offset = "0xEBD594", VA = "0xEBD594")]
		public static void ShutdownInternal()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xEBD608", Offset = "0xEBD608", VA = "0xEBD608")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xEBD688", Offset = "0xEBD688", VA = "0xEBD688")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xEBD708", Offset = "0xEBD708", VA = "0xEBD708")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xEBD800", Offset = "0xEBD800", VA = "0xEBD800")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xEBD8AC", Offset = "0xEBD8AC", VA = "0xEBD8AC")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xEBD94C", Offset = "0xEBD94C", VA = "0xEBD94C")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xEBE85C", Offset = "0xEBE85C", VA = "0xEBE85C")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene)
		{
			return null;
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xEBE9E0", Offset = "0xEBE9E0", VA = "0xEBE9E0")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xEBEA3C", Offset = "0xEBEA3C", VA = "0xEBEA3C")]
		public OpenVR()
		{
		}
	}
}
namespace SteamAudio
{
	[Token(Token = "0x200019E")]
	public enum AudioEngine
	{
		[Token(Token = "0x4000C10")]
		UnityNative,
		[Token(Token = "0x4000C11")]
		FMODStudio
	}
	[Token(Token = "0x200019F")]
	public abstract class AudioEngineAmbisonicsSource
	{
		[Token(Token = "0x600089D")]
		[Address(RVA = "0xB16880", Offset = "0xB16880", VA = "0xB16880", Slot = "4")]
		public virtual void Initialize(GameObject gameObject)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xB16884", Offset = "0xB16884", VA = "0xB16884", Slot = "5")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xB16888", Offset = "0xB16888", VA = "0xB16888", Slot = "6")]
		public virtual void UpdateParameters(SteamAudioAmbisonicsSource steamAudioAmbisonicsSource)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xB1688C", Offset = "0xB1688C", VA = "0xB1688C", Slot = "7")]
		public virtual void GetParameters(SteamAudioAmbisonicsSource steamAudioAmbisonicsSource)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xB16890", Offset = "0xB16890", VA = "0xB16890")]
		protected AudioEngineAmbisonicsSource()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public static class AudioEngineAmbisonicsSourceFactory
	{
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xB16898", Offset = "0xB16898", VA = "0xB16898")]
		public static AudioEngineAmbisonicsSource Create(AudioEngine audioEngine)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A1")]
	public sealed class UnityAudioEngineAmbisonicsSource : AudioEngineAmbisonicsSource
	{
		[Token(Token = "0x4000C12")]
		private const int k_binauralModeIndex = 0;

		[Token(Token = "0x4000C13")]
		private const int k_hrtfIndexIndex = 1;

		[Token(Token = "0x4000C14")]
		private const int k_overrideHRTFIndexIndex = 2;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AudioSource audioSource;

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x9D5E34", Offset = "0x9D5E34", VA = "0x9D5E34", Slot = "4")]
		public override void Initialize(GameObject gameObject)
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x9D5EA0", Offset = "0x9D5EA0", VA = "0x9D5EA0", Slot = "6")]
		public override void UpdateParameters(SteamAudioAmbisonicsSource steamAudioAmbisonicsSource)
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x9D5FBC", Offset = "0x9D5FBC", VA = "0x9D5FBC")]
		public UnityAudioEngineAmbisonicsSource()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public abstract class AudioEngineSource
	{
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xB16904", Offset = "0xB16904", VA = "0xB16904", Slot = "4")]
		public virtual void Initialize(GameObject gameObject)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xB16908", Offset = "0xB16908", VA = "0xB16908", Slot = "5")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xB1690C", Offset = "0xB1690C", VA = "0xB1690C", Slot = "6")]
		public virtual void UpdateParameters(SteamAudioSource steamAudioSource)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xB16910", Offset = "0xB16910", VA = "0xB16910", Slot = "7")]
		public virtual void GetParameters(SteamAudioSource steamAudioSource)
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xB16914", Offset = "0xB16914", VA = "0xB16914", Slot = "8")]
		public virtual bool ShouldSendIdentifier(SteamAudioSource steamAudioSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		public abstract bool UsesBakedStaticListener(SteamAudioSource steamAudioSource);

		[Token(Token = "0x60008AC")]
		public abstract void SendIdentifier(SteamAudioSource steamAudioSource, int identifier);

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xB1691C", Offset = "0xB1691C", VA = "0xB1691C")]
		protected AudioEngineSource()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public static class AudioEngineSourceFactory
	{
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xB16924", Offset = "0xB16924", VA = "0xB16924")]
		public static AudioEngineSource Create(AudioEngine audioEngine)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A4")]
	public sealed class UnityAudioEngineSource : AudioEngineSource
	{
		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AudioSource audioSource;

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x9D5FC4", Offset = "0x9D5FC4", VA = "0x9D5FC4", Slot = "4")]
		public override void Initialize(GameObject gameObject)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x9D6030", Offset = "0x9D6030", VA = "0x9D6030", Slot = "6")]
		public override void UpdateParameters(SteamAudioSource steamAudioSource)
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x9D6464", Offset = "0x9D6464", VA = "0x9D6464", Slot = "8")]
		public override bool ShouldSendIdentifier(SteamAudioSource steamAudioSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x9D6488", Offset = "0x9D6488", VA = "0x9D6488", Slot = "9")]
		public override bool UsesBakedStaticListener(SteamAudioSource steamAudioSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x9D64A8", Offset = "0x9D64A8", VA = "0x9D64A8", Slot = "10")]
		public override void SendIdentifier(SteamAudioSource steamAudioSource, int identifier)
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x9D6540", Offset = "0x9D6540", VA = "0x9D6540")]
		public UnityAudioEngineSource()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public abstract class AudioEngineState
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xB16A28", Offset = "0xB16A28", VA = "0xB16A28", Slot = "4")]
		public virtual void Initialize(ComponentCache componentCache, GameEngineState gameEngineState, string[] sofaFileName)
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xB16A2C", Offset = "0xB16A2C", VA = "0xB16A2C", Slot = "5")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xB16A30", Offset = "0xB16A30", VA = "0xB16A30", Slot = "6")]
		public virtual void UpdateListener(Vector3 position, Vector3 ahead, Vector3 up)
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xB16A34", Offset = "0xB16A34", VA = "0xB16A34", Slot = "7")]
		public virtual void UpdateSOFAFile(int index)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xB16A38", Offset = "0xB16A38", VA = "0xB16A38")]
		protected AudioEngineState()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public static class AudioEngineStateFactory
	{
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xB16A40", Offset = "0xB16A40", VA = "0xB16A40")]
		public static AudioEngineState Create(AudioEngine audioEngine)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A7")]
	public sealed class UnityAudioEngineState : AudioEngineState
	{
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x9D6548", Offset = "0x9D6548", VA = "0x9D6548", Slot = "4")]
		public override void Initialize(ComponentCache componentCache, GameEngineState gameEngineState, string[] sofaFileNames)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x9D6614", Offset = "0x9D6614", VA = "0x9D6614", Slot = "5")]
		public override void Destroy()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x9D661C", Offset = "0x9D661C", VA = "0x9D661C", Slot = "6")]
		public override void UpdateListener(Vector3 position, Vector3 ahead, Vector3 up)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x9D6634", Offset = "0x9D6634", VA = "0x9D6634", Slot = "7")]
		public override void UpdateSOFAFile(int index)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x9D6640", Offset = "0x9D6640", VA = "0x9D6640")]
		public UnityAudioEngineState()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public enum BakingMode
	{
		[Token(Token = "0x4000C18")]
		StaticSource,
		[Token(Token = "0x4000C19")]
		StaticListener,
		[Token(Token = "0x4000C1A")]
		Reverb
	}
	[Token(Token = "0x20001A9")]
	public enum BakeStatus
	{
		[Token(Token = "0x4000C1C")]
		Ready,
		[Token(Token = "0x4000C1D")]
		InProgress,
		[Token(Token = "0x4000C1E")]
		Complete
	}
	[Token(Token = "0x20001AA")]
	public class Baker
	{
		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool oneBakeActive;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string bakingGameObjectName;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int probeBoxBakingCurrently;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int objectBakingCurrently;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool bakeConvolution;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool bakeParameteric;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool cancelBake;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private BakeStatus bakeStatus;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SteamAudioManager steamAudioManager;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SteamAudioProbeBox[][] duringBakeProbeBoxes;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Sphere[] duringBakeSpheres;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject[] duringBakeObjects;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string[] duringBakeObjectNames;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BakedDataIdentifier[] duringBakeIdentifiers;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string[] duringBakeNames;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Thread bakeThread;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PhononCore.BakeProgressCallback bakeCallback;

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xB16B44", Offset = "0xB16B44", VA = "0xB16B44")]
		public void BakeEffectThread()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xB1767C", Offset = "0xB1767C", VA = "0xB1767C")]
		public void BeginBake(GameObject[] gameObjects, BakedDataIdentifier[] identifiers, string[] names, Sphere[] influenceSpheres, SteamAudioProbeBox[][] probeBoxes)
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xB17BAC", Offset = "0xB17BAC", VA = "0xB17BAC")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xB17C80", Offset = "0xB17C80", VA = "0xB17C80")]
		private void InEditorUpdate()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xB17C84", Offset = "0xB17C84", VA = "0xB17C84")]
		public void CancelBake()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xB17D78", Offset = "0xB17D78", VA = "0xB17D78")]
		public static bool IsBakeActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xB17DE0", Offset = "0xB17DE0", VA = "0xB17DE0")]
		public BakeStatus GetBakeStatus()
		{
			return default(BakeStatus);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xB17DE8", Offset = "0xB17DE8", VA = "0xB17DE8")]
		private void AdvanceProgress(float bakeProgressFraction)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xB17DEC", Offset = "0xB17DEC", VA = "0xB17DEC")]
		public bool DrawProgressBar()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xB17DF4", Offset = "0xB17DF4", VA = "0xB17DF4")]
		public Baker()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public enum Bool
	{
		[Token(Token = "0x4000C31")]
		False,
		[Token(Token = "0x4000C32")]
		True
	}
	[Token(Token = "0x20001AC")]
	public enum Error
	{
		[Token(Token = "0x4000C34")]
		None,
		[Token(Token = "0x4000C35")]
		Fail,
		[Token(Token = "0x4000C36")]
		OutOfMemory,
		[Token(Token = "0x4000C37")]
		Initialization
	}
	[Token(Token = "0x20001AD")]
	public delegate void LogCallback(string message);
	[Token(Token = "0x20001AE")]
	public struct Vector3
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}
	[Token(Token = "0x20001AF")]
	public struct Matrix4x4
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m00;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m01;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m02;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m03;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m10;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m11;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m12;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m13;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m20;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m21;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m22;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m23;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m30;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m31;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m32;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m33;
	}
	[Token(Token = "0x20001B0")]
	public struct Box
	{
		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 minCoordinates;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 maxCoordinates;
	}
	[Token(Token = "0x20001B1")]
	public struct Sphere
	{
		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float centerx;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float centery;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float centerz;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;
	}
	[Token(Token = "0x20001B2")]
	public enum ChannelLayoutType
	{
		[Token(Token = "0x4000C52")]
		Speakers,
		[Token(Token = "0x4000C53")]
		Ambisonics
	}
	[Token(Token = "0x20001B3")]
	public enum ChannelLayout
	{
		[Token(Token = "0x4000C55")]
		Mono,
		[Token(Token = "0x4000C56")]
		Stereo,
		[Token(Token = "0x4000C57")]
		Quadraphonic,
		[Token(Token = "0x4000C58")]
		FivePointOne,
		[Token(Token = "0x4000C59")]
		SevenPointOne,
		[Token(Token = "0x4000C5A")]
		Custom
	}
	[Token(Token = "0x20001B4")]
	public enum ChannelOrder
	{
		[Token(Token = "0x4000C5C")]
		Interleaved,
		[Token(Token = "0x4000C5D")]
		Deinterleaved
	}
	[Token(Token = "0x20001B5")]
	public enum AmbisonicsOrdering
	{
		[Token(Token = "0x4000C5F")]
		FurseMalham,
		[Token(Token = "0x4000C60")]
		ACN
	}
	[Token(Token = "0x20001B6")]
	public enum AmbisonicsNormalization
	{
		[Token(Token = "0x4000C62")]
		FurseMalham,
		[Token(Token = "0x4000C63")]
		SN3D,
		[Token(Token = "0x4000C64")]
		N3D
	}
	[Token(Token = "0x20001B7")]
	public struct AudioFormat
	{
		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ChannelLayoutType channelLayoutType;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ChannelLayout channelLayout;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int numSpeakers;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] speakerDirections;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ambisonicsOrder;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AmbisonicsOrdering ambisonicsOrdering;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmbisonicsNormalization ambisonicsNormalization;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ChannelOrder channelOrder;
	}
	[Token(Token = "0x20001B8")]
	public struct AudioBuffer
	{
		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioFormat audioFormat;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numSamples;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] interleavedBuffer;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr[] deInterleavedBuffer;
	}
	[Token(Token = "0x20001B9")]
	public struct RenderingSettings
	{
		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int samplingRate;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int frameSize;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ConvolutionOption convolutionOption;
	}
	[Token(Token = "0x20001BA")]
	public struct Complex
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float real;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float imag;
	}
	[Token(Token = "0x20001BB")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x73FB5C", Offset = "0x73FB5C")]
	public delegate void FFTHelper(IntPtr data, IntPtr signal, IntPtr spectrum);
	[Token(Token = "0x20001BC")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x73FB70", Offset = "0x73FB70")]
	public delegate void HRTFLoadCallback(int signalSize, int spectrumSize, FFTHelper fftHelper, IntPtr data);
	[Token(Token = "0x20001BD")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x73FB84", Offset = "0x73FB84")]
	public delegate void HRTFUnloadCallback();
	[Token(Token = "0x20001BE")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x73FB98", Offset = "0x73FB98")]
	public delegate void HRTFLookupCallback(IntPtr direction, IntPtr leftHrtf, IntPtr rightHrtf);
	[Token(Token = "0x20001BF")]
	public enum HRTFDatabaseType
	{
		[Token(Token = "0x4000C77")]
		Default,
		[Token(Token = "0x4000C78")]
		SOFA
	}
	[Token(Token = "0x20001C0")]
	public struct HRTFParams
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HRTFDatabaseType type;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr hrtfData;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string sofaFileName;
	}
	[Token(Token = "0x20001C1")]
	public enum HRTFInterpolation
	{
		[Token(Token = "0x4000C7D")]
		Nearest,
		[Token(Token = "0x4000C7E")]
		Bilinear
	}
	[Token(Token = "0x20001C2")]
	public struct Triangle
	{
		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index0;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int index1;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int index2;
	}
	[Token(Token = "0x20001C3")]
	public struct Material
	{
		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float absorptionLow;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float absorptionMid;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float absorptionHigh;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float scattering;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float transmissionLow;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float transmissionMid;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transmissionHigh;
	}
	[Token(Token = "0x20001C4")]
	public enum SceneType
	{
		[Token(Token = "0x4000C8A")]
		Phonon,
		[Token(Token = "0x4000C8B")]
		Embree,
		[Token(Token = "0x4000C8C")]
		RadeonRays,
		[Token(Token = "0x4000C8D")]
		Custom
	}
	[Token(Token = "0x20001C5")]
	public enum ConvolutionOption
	{
		[Token(Token = "0x4000C8F")]
		Phonon,
		[Token(Token = "0x4000C90")]
		TrueAudioNext
	}
	[Token(Token = "0x20001C6")]
	public enum OcclusionMethod
	{
		[Token(Token = "0x4000C92")]
		Raycast,
		[Token(Token = "0x4000C93")]
		Partial
	}
	[Token(Token = "0x20001C7")]
	public enum OcclusionMode
	{
		[Token(Token = "0x4000C95")]
		NoOcclusion,
		[Token(Token = "0x4000C96")]
		OcclusionWithNoTransmission,
		[Token(Token = "0x4000C97")]
		OcclusionWithFrequencyIndependentTransmission,
		[Token(Token = "0x4000C98")]
		OcclusionWithFrequencyDependentTransmission
	}
	[Token(Token = "0x20001C8")]
	public enum SimulationType
	{
		[Token(Token = "0x4000C9A")]
		Realtime,
		[Token(Token = "0x4000C9B")]
		Baked
	}
	[Token(Token = "0x20001C9")]
	public struct SimulationSettings
	{
		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SceneType sceneType;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int occlusionSamples;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int rays;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int secondaryRays;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int bounces;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int threads;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float irDuration;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ambisonicsOrder;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxConvolutionSources;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int bakingBatchSize;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float irradianceMinDistance;
	}
	[Token(Token = "0x20001CA")]
	public enum ComputeDeviceType
	{
		[Token(Token = "0x4000CA8")]
		CPU,
		[Token(Token = "0x4000CA9")]
		GPU,
		[Token(Token = "0x4000CAA")]
		Any
	}
	[Token(Token = "0x20001CB")]
	public struct ComputeDeviceFilter
	{
		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ComputeDeviceType type;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxCUsToReserve;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fractionCUsForIRUpdate;
	}
	[Token(Token = "0x20001CC")]
	public enum ProbeBatchType
	{
		[Token(Token = "0x4000CAF")]
		Static,
		[Token(Token = "0x4000CB0")]
		Dynamic
	}
	[Token(Token = "0x20001CD")]
	public enum ProbePlacementStrategy
	{
		[Token(Token = "0x4000CB2")]
		Centroid,
		[Token(Token = "0x4000CB3")]
		Octree,
		[Token(Token = "0x4000CB4")]
		UniformFloor
	}
	[Token(Token = "0x20001CE")]
	public struct ProbePlacementParameters
	{
		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ProbePlacementStrategy placement;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float horizontalSpacing;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float heightAboveFloor;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxNumTriangles;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxOctreeDepth;
	}
	[Token(Token = "0x20001CF")]
	public struct BakingSettings
	{
		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool bakeParametric;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Bool bakeConvolution;
	}
	[Token(Token = "0x20001D0")]
	public enum BakedDataType
	{
		[Token(Token = "0x4000CBD")]
		StaticSource,
		[Token(Token = "0x4000CBE")]
		StaticListener,
		[Token(Token = "0x4000CBF")]
		Reverb
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public struct BakedDataIdentifier
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int identifier;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public BakedDataType type;
	}
	[Token(Token = "0x20001D2")]
	public struct DirectSoundPath
	{
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 direction;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distanceAttenuation;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float airAbsorptionLow;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float airAbsorptionMid;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float airAbsorptionHigh;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float propagationDelay;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float occlusionFactor;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float transmissionFactorLow;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float transmissionFactorMid;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float transmissionFactorHigh;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float directivityFactor;
	}
	[Token(Token = "0x20001D3")]
	public struct Directivity
	{
		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float dipoleWeight;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float dipolePower;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr callback;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr userData;
	}
	[Token(Token = "0x20001D4")]
	public struct Source
	{
		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 ahead;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 up;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 right;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Directivity directivity;
	}
	[Token(Token = "0x20001D5")]
	public struct DirectSoundEffectOptions
	{
		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool applyDistanceAttenuation;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Bool applyAirAbsorption;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public OcclusionMode occlusionMode;
	}
	[Token(Token = "0x20001D6")]
	public static class Common
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xB17E58", Offset = "0xB17E58", VA = "0xB17E58")]
		public static Vector3 ConvertVector(UnityEngine.Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xB17E60", Offset = "0xB17E60", VA = "0xB17E60")]
		public static UnityEngine.Vector3 ConvertVector(Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xB17E68", Offset = "0xB17E68", VA = "0xB17E68")]
		public static float[] ConvertMatrix(UnityEngine.Matrix4x4 matrix)
		{
			return null;
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xB18030", Offset = "0xB18030", VA = "0xB18030")]
		public static Matrix4x4 ConvertTransform(Transform transform)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xB181C4", Offset = "0xB181C4", VA = "0xB181C4")]
		public static byte[] ConvertString(string s)
		{
			return null;
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xB18244", Offset = "0xB18244", VA = "0xB18244")]
		public static int HashForIdentifier(string identifier)
		{
			return default(int);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xB182FC", Offset = "0xB182FC", VA = "0xB182FC")]
		public static byte[] HashStringForIdentifier(string identifier)
		{
			return null;
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xB18388", Offset = "0xB18388", VA = "0xB18388")]
		public static byte[] HashStringForIdentifierWithPrefix(string identifier, string prefix)
		{
			return null;
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xB18428", Offset = "0xB18428", VA = "0xB18428")]
		public static string GetStreamingAssetsFileName(string fileName)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D7")]
	public class ComponentCache
	{
		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AudioListener audioListener;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SteamAudioListener steamAudioListener;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamAudioCustomSpeakerLayout steamAudioCustomSpeakerLayout;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SteamAudioCustomSettings steamAudioCustomSettings;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isSteamAudioListenerSet;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool isSteamAudioCustomSpeakerLayoutSet;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool isSteamAudioCustomSettingsSet;

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xB187B0", Offset = "0xB187B0", VA = "0xB187B0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xB18A98", Offset = "0xB18A98", VA = "0xB18A98")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xB187E4", Offset = "0xB187E4", VA = "0xB187E4")]
		public AudioListener AudioListener()
		{
			return null;
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xB18858", Offset = "0xB18858", VA = "0xB18858")]
		public SteamAudioListener SteamAudioListener()
		{
			return null;
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xB189D8", Offset = "0xB189D8", VA = "0xB189D8")]
		public SteamAudioCustomSpeakerLayout SteamAudioCustomSpeakerLayout()
		{
			return null;
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xB18918", Offset = "0xB18918", VA = "0xB18918")]
		public SteamAudioCustomSettings SteamAudioCustomSettings()
		{
			return null;
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xB18AAC", Offset = "0xB18AAC", VA = "0xB18AAC")]
		public ComponentCache()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class ComputeDevice
	{
		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr device;

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xB18AB4", Offset = "0xB18AB4", VA = "0xB18AB4")]
		public IntPtr GetDevice()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xB18ABC", Offset = "0xB18ABC", VA = "0xB18ABC")]
		public Error Create(IntPtr globalContext, bool useOpenCL, ComputeDeviceFilter deviceFilter)
		{
			return default(Error);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xB18E7C", Offset = "0xB18E7C", VA = "0xB18E7C")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xB18F60", Offset = "0xB18F60", VA = "0xB18F60")]
		public ComputeDevice()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public static class PhononCore
	{
		[Token(Token = "0x20003D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C14", Offset = "0x741C14")]
		public delegate void LoadSceneProgressCallback(float progress);

		[Token(Token = "0x20003D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C28", Offset = "0x741C28")]
		public delegate void FinalizeSceneProgressCallback(float progress);

		[Token(Token = "0x20003DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C3C", Offset = "0x741C3C")]
		public delegate void ClosestHitCallback(float[] origin, float[] direction, float minDistance, float maxDistance, [In][Out] ref float hitDistance, [In][Out] ref Vector3 hitNormal, [In][Out] ref IntPtr hitMaterial, IntPtr userData);

		[Token(Token = "0x20003DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C50", Offset = "0x741C50")]
		public delegate void AnyHitCallback(float[] origin, float[] direction, float minDistance, float maxDistance, [In][Out] ref int hitExists, IntPtr userData);

		[Token(Token = "0x20003DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C64", Offset = "0x741C64")]
		public delegate void BatchedClosestHitCallback(int numRays, Vector3[] origins, Vector3[] directions, int rayStride, float[] minDistances, float[] maxDistances, float[] hitDistances, Vector3[] hitNormals, IntPtr hitMaterials, int hitStride, IntPtr userData);

		[Token(Token = "0x20003DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C78", Offset = "0x741C78")]
		public delegate void BatchedAnyHitCallback(int numRays, Vector3[] origins, Vector3[] directions, int rayStride, float[] minDistances, float[] maxDistances, byte[] hitExists, IntPtr userData);

		[Token(Token = "0x20003DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741C8C", Offset = "0x741C8C")]
		public delegate void ProbePlacementProgressCallback(float progress);

		[Token(Token = "0x20003DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x741CA0", Offset = "0x741CA0")]
		public delegate void BakeProgressCallback(float progress);

		[PreserveSig]
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xB1C68C", Offset = "0xB1C68C", VA = "0xB1C68C")]
		public static extern void iplGetVersion([In][Out] ref uint major, [In][Out] ref uint minor, [In][Out] ref uint patch);

		[PreserveSig]
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xB19E3C", Offset = "0xB19E3C", VA = "0xB19E3C")]
		public static extern Error iplCreateContext(LogCallback logCallback, IntPtr allocateCallback, IntPtr freeCallback, [In][Out] ref IntPtr context);

		[PreserveSig]
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xB1A5D4", Offset = "0xB1A5D4", VA = "0xB1A5D4")]
		public static extern void iplDestroyContext([In][Out] ref IntPtr context);

		[PreserveSig]
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xB1C724", Offset = "0xB1C724", VA = "0xB1C724")]
		public static extern void iplCleanup();

		[PreserveSig]
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xB18DD4", Offset = "0xB18DD4", VA = "0xB18DD4")]
		public static extern Error iplCreateComputeDevice(IntPtr globalContext, ComputeDeviceFilter deviceFilter, [In][Out] ref IntPtr device);

		[PreserveSig]
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xB18EE0", Offset = "0xB18EE0", VA = "0xB18EE0")]
		public static extern void iplDestroyComputeDevice([In][Out] ref IntPtr device);

		[PreserveSig]
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xB1C794", Offset = "0xB1C794", VA = "0xB1C794")]
		public static extern Error iplCreateScene(IntPtr context, IntPtr computeDevice, SimulationSettings simulationSettings, int numMaterials, Material[] materials, ClosestHitCallback closestHitCallback, AnyHitCallback anyHitCallback, BatchedClosestHitCallback batchedClosestHitCallback, BatchedAnyHitCallback batchedAnyHitCallback, IntPtr userData, [In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xB1C8C4", Offset = "0xB1C8C4", VA = "0xB1C8C4")]
		public static extern void iplDestroyScene([In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xB1C944", Offset = "0xB1C944", VA = "0xB1C944")]
		public static extern Error iplCreateStaticMesh(IntPtr scene, int numVertices, int numTriangles, Vector3[] vertices, Triangle[] triangles, int[] materialIndices, [In][Out] ref IntPtr staticMesh);

		[PreserveSig]
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xB1CA24", Offset = "0xB1CA24", VA = "0xB1CA24")]
		public static extern void iplDestroyStaticMesh([In][Out] ref IntPtr staticMesh);

		[PreserveSig]
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xB1CAA4", Offset = "0xB1CAA4", VA = "0xB1CAA4")]
		public static extern int iplSaveScene(IntPtr scene, [In][Out] byte[] data);

		[PreserveSig]
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xB1CB3C", Offset = "0xB1CB3C", VA = "0xB1CB3C")]
		public static extern Error iplLoadScene(IntPtr globalContext, SimulationSettings simulationSettings, byte[] data, int size, IntPtr computeDevice, LoadSceneProgressCallback progressCallback, [In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xB1CC28", Offset = "0xB1CC28", VA = "0xB1CC28")]
		public static extern void iplSaveSceneAsObj(IntPtr scene, byte[] fileName);

		[PreserveSig]
		[Token(Token = "0x6000900")]
		[Address(RVA = "0xB1CCC0", Offset = "0xB1CCC0", VA = "0xB1CCC0")]
		public static extern Error iplCreateInstancedMesh(IntPtr scene, IntPtr instancedScene, Matrix4x4 transform, [In][Out] ref IntPtr instancedMesh);

		[PreserveSig]
		[Token(Token = "0x6000901")]
		[Address(RVA = "0xB1CD78", Offset = "0xB1CD78", VA = "0xB1CD78")]
		public static extern void iplDestroyInstancedMesh([In][Out] ref IntPtr instancedMesh);

		[PreserveSig]
		[Token(Token = "0x6000902")]
		[Address(RVA = "0xB1CDF8", Offset = "0xB1CDF8", VA = "0xB1CDF8")]
		public static extern void iplAddInstancedMesh(IntPtr scene, IntPtr instancedMesh);

		[PreserveSig]
		[Token(Token = "0x6000903")]
		[Address(RVA = "0xB1CE88", Offset = "0xB1CE88", VA = "0xB1CE88")]
		public static extern void iplRemoveInstancedMesh(IntPtr scene, IntPtr instancedMesh);

		[PreserveSig]
		[Token(Token = "0x6000904")]
		[Address(RVA = "0xB1CF18", Offset = "0xB1CF18", VA = "0xB1CF18")]
		public static extern void iplUpdateInstancedMeshTransform(IntPtr instancedMesh, Matrix4x4 transform);

		[PreserveSig]
		[Token(Token = "0x6000905")]
		[Address(RVA = "0xB1CFB8", Offset = "0xB1CFB8", VA = "0xB1CFB8")]
		public static extern void iplCommitScene(IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x6000906")]
		[Address(RVA = "0xB19120", Offset = "0xB19120", VA = "0xB19120")]
		public static extern Error iplCreateEnvironment(IntPtr globalContext, IntPtr computeDevice, SimulationSettings simulationSettings, IntPtr scene, IntPtr probeManager, [In][Out] ref IntPtr environment);

		[PreserveSig]
		[Token(Token = "0x6000907")]
		[Address(RVA = "0xB19254", Offset = "0xB19254", VA = "0xB19254")]
		public static extern void iplDestroyEnvironment([In][Out] ref IntPtr environment);

		[PreserveSig]
		[Token(Token = "0x6000908")]
		[Address(RVA = "0xB1D038", Offset = "0xB1D038", VA = "0xB1D038")]
		public static extern void iplSetNumBounces(IntPtr environment, int numBounces);

		[PreserveSig]
		[Token(Token = "0x6000909")]
		[Address(RVA = "0xB1D0C8", Offset = "0xB1D0C8", VA = "0xB1D0C8")]
		public static extern void iplMixAudioBuffers(int numBuffers, AudioBuffer[] inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600090A")]
		[Address(RVA = "0xB1D23C", Offset = "0xB1D23C", VA = "0xB1D23C")]
		public static extern void iplInterleaveAudioBuffer(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600090B")]
		[Address(RVA = "0xB1D330", Offset = "0xB1D330", VA = "0xB1D330")]
		public static extern void iplDeinterleaveAudioBuffer(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600090C")]
		[Address(RVA = "0xB1D424", Offset = "0xB1D424", VA = "0xB1D424")]
		public static extern void iplConvertAudioBufferFormat(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600090D")]
		[Address(RVA = "0xB1D518", Offset = "0xB1D518", VA = "0xB1D518")]
		public static extern Error iplCreateAmbisonicsRotator(IntPtr globalContext, int order, [In][Out] ref IntPtr rotator);

		[PreserveSig]
		[Token(Token = "0x600090E")]
		[Address(RVA = "0xB1D5B0", Offset = "0xB1D5B0", VA = "0xB1D5B0")]
		public static extern void iplDestroyAmbisonicsRotator([In][Out] ref IntPtr rotator);

		[PreserveSig]
		[Token(Token = "0x600090F")]
		[Address(RVA = "0xB1D630", Offset = "0xB1D630", VA = "0xB1D630")]
		public static extern void iplSetAmbisonicsRotation(IntPtr rotator, Vector3 listenerAhead, Vector3 listenerUp);

		[PreserveSig]
		[Token(Token = "0x6000910")]
		[Address(RVA = "0xB1D6F8", Offset = "0xB1D6F8", VA = "0xB1D6F8")]
		public static extern void iplRotateAmbisonicsAudioBuffer(IntPtr rotator, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000911")]
		[Address(RVA = "0xB1D7FC", Offset = "0xB1D7FC", VA = "0xB1D7FC")]
		public static extern Vector3 iplCalculateRelativeDirection(Vector3 sourcePosition, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp);

		[PreserveSig]
		[Token(Token = "0x6000912")]
		[Address(RVA = "0xB1D8E4", Offset = "0xB1D8E4", VA = "0xB1D8E4")]
		public static extern Error iplCreateBinauralRenderer(IntPtr globalContext, RenderingSettings renderingSettings, HRTFParams hrtfParams, [In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000913")]
		[Address(RVA = "0xB1D9C4", Offset = "0xB1D9C4", VA = "0xB1D9C4")]
		public static extern void iplDestroyBinauralRenderer([In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000914")]
		[Address(RVA = "0xB1DA44", Offset = "0xB1DA44", VA = "0xB1DA44")]
		public static extern Error iplCreatePanningEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000915")]
		[Address(RVA = "0xB1DB70", Offset = "0xB1DB70", VA = "0xB1DB70")]
		public static extern void iplDestroyPanningEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000916")]
		[Address(RVA = "0xB1DBF0", Offset = "0xB1DBF0", VA = "0xB1DBF0")]
		public static extern void iplApplyPanningEffect(IntPtr effect, IntPtr binauralRenderer, AudioBuffer inputAudio, Vector3 direction, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000917")]
		[Address(RVA = "0xB1DD24", Offset = "0xB1DD24", VA = "0xB1DD24")]
		public static extern void iplFlushPanningEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000918")]
		[Address(RVA = "0xB1DDA4", Offset = "0xB1DDA4", VA = "0xB1DDA4")]
		public static extern Error iplCreateBinauralEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000919")]
		[Address(RVA = "0xB1DED0", Offset = "0xB1DED0", VA = "0xB1DED0")]
		public static extern void iplDestroyBinauralEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600091A")]
		[Address(RVA = "0xB1DF50", Offset = "0xB1DF50", VA = "0xB1DF50")]
		public static extern void iplApplyBinauralEffect(IntPtr effect, IntPtr binauralRenderer, AudioBuffer inputAudio, Vector3 direction, HRTFInterpolation interpolation, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600091B")]
		[Address(RVA = "0xB1E094", Offset = "0xB1E094", VA = "0xB1E094")]
		public static extern void iplFlushBinauralEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600091C")]
		[Address(RVA = "0xB1E114", Offset = "0xB1E114", VA = "0xB1E114")]
		public static extern Error iplCreateVirtualSurroundEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600091D")]
		[Address(RVA = "0xB1E240", Offset = "0xB1E240", VA = "0xB1E240")]
		public static extern void iplDestroyVirtualSurroundEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600091E")]
		[Address(RVA = "0xB1E2C0", Offset = "0xB1E2C0", VA = "0xB1E2C0")]
		public static extern void iplApplyVirtualSurroundEffect(IntPtr effect, IntPtr binauralRenderer, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600091F")]
		[Address(RVA = "0xB1E3CC", Offset = "0xB1E3CC", VA = "0xB1E3CC")]
		public static extern void iplFlushVirtualSurroundEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000920")]
		[Address(RVA = "0xB1E44C", Offset = "0xB1E44C", VA = "0xB1E44C")]
		public static extern Error iplCreateAmbisonicsPanningEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000921")]
		[Address(RVA = "0xB1E578", Offset = "0xB1E578", VA = "0xB1E578")]
		public static extern void iplDestroyAmbisonicsPanningEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000922")]
		[Address(RVA = "0xB1E5F8", Offset = "0xB1E5F8", VA = "0xB1E5F8")]
		public static extern void iplApplyAmbisonicsPanningEffect(IntPtr effect, IntPtr binauralRenderer, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000923")]
		[Address(RVA = "0xB1E704", Offset = "0xB1E704", VA = "0xB1E704")]
		public static extern void iplFlushAmbisonicsPanningEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000924")]
		[Address(RVA = "0xB1E784", Offset = "0xB1E784", VA = "0xB1E784")]
		public static extern Error iplCreateAmbisonicsBinauralEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000925")]
		[Address(RVA = "0xB1E8B0", Offset = "0xB1E8B0", VA = "0xB1E8B0")]
		public static extern void iplDestroyAmbisonicsBinauralEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000926")]
		[Address(RVA = "0xB1E930", Offset = "0xB1E930", VA = "0xB1E930")]
		public static extern void iplApplyAmbisonicsBinauralEffect(IntPtr effect, IntPtr binauralRenderer, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000927")]
		[Address(RVA = "0xB1EA3C", Offset = "0xB1EA3C", VA = "0xB1EA3C")]
		public static extern void iplFlushAmbisonicsBinauralEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000928")]
		[Address(RVA = "0xB1EABC", Offset = "0xB1EABC", VA = "0xB1EABC")]
		public static extern Error iplCreateEnvironmentalRenderer(IntPtr globalContext, IntPtr environment, RenderingSettings renderingSettings, AudioFormat outputFormat, IntPtr threadCreateCallback, IntPtr threadDestroyCallback, [In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000929")]
		[Address(RVA = "0xB1EBD8", Offset = "0xB1EBD8", VA = "0xB1EBD8")]
		public static extern void iplDestroyEnvironmentalRenderer([In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x600092A")]
		[Address(RVA = "0xB1EC58", Offset = "0xB1EC58", VA = "0xB1EC58")]
		public static extern DirectSoundPath iplGetDirectSoundPath(IntPtr environment, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, Source source, float sourceRadius, OcclusionMode occlusionMode, OcclusionMethod occlusionMethod);

		[PreserveSig]
		[Token(Token = "0x600092B")]
		[Address(RVA = "0xB1ED80", Offset = "0xB1ED80", VA = "0xB1ED80")]
		public static extern Error iplCreateDirectSoundEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600092C")]
		[Address(RVA = "0xB1EEAC", Offset = "0xB1EEAC", VA = "0xB1EEAC")]
		public static extern void iplDestroyDirectSoundEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600092D")]
		[Address(RVA = "0xB1EF2C", Offset = "0xB1EF2C", VA = "0xB1EF2C")]
		public static extern void iplApplyDirectSoundEffect(IntPtr effect, AudioBuffer inputAudio, DirectSoundPath directSoundPath, DirectSoundEffectOptions directSoundEffectOptions, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600092E")]
		[Address(RVA = "0xB1F064", Offset = "0xB1F064", VA = "0xB1F064")]
		public static extern void iplFlushDirectSoundEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600092F")]
		[Address(RVA = "0xB1F0E4", Offset = "0xB1F0E4", VA = "0xB1F0E4")]
		public static extern Error iplCreateConvolutionEffect(IntPtr renderer, BakedDataIdentifier identifier, SimulationType simulationType, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000930")]
		[Address(RVA = "0xB1F228", Offset = "0xB1F228", VA = "0xB1F228")]
		public static extern void iplDestroyConvolutionEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000931")]
		[Address(RVA = "0xB1F2A8", Offset = "0xB1F2A8", VA = "0xB1F2A8")]
		public static extern void iplSetConvolutionEffectIdentifier(IntPtr effect, BakedDataIdentifier identifier);

		[PreserveSig]
		[Token(Token = "0x6000932")]
		[Address(RVA = "0xB1F338", Offset = "0xB1F338", VA = "0xB1F338")]
		public static extern void iplSetDryAudioForConvolutionEffect(IntPtr effect, Vector3 sourcePosition, AudioBuffer dryAudio);

		[PreserveSig]
		[Token(Token = "0x6000933")]
		[Address(RVA = "0xB1F420", Offset = "0xB1F420", VA = "0xB1F420")]
		public static extern void iplGetWetAudioForConvolutionEffect(IntPtr effect, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, AudioBuffer wetAudio);

		[PreserveSig]
		[Token(Token = "0x6000934")]
		[Address(RVA = "0xB1F540", Offset = "0xB1F540", VA = "0xB1F540")]
		public static extern void iplGetMixedEnvironmentalAudio(IntPtr renderer, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, AudioBuffer mixedWetAudio);

		[PreserveSig]
		[Token(Token = "0x6000935")]
		[Address(RVA = "0xB1F660", Offset = "0xB1F660", VA = "0xB1F660")]
		public static extern void iplFlushConvolutionEffect(IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000936")]
		[Address(RVA = "0xB1F6E0", Offset = "0xB1F6E0", VA = "0xB1F6E0")]
		public static extern Error iplCreateProbeBox(IntPtr context, IntPtr scene, float[] boxLocalToWorldTransform, ProbePlacementParameters placementParams, ProbePlacementProgressCallback progressCallback, [In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x6000937")]
		[Address(RVA = "0xB174D4", Offset = "0xB174D4", VA = "0xB174D4")]
		public static extern void iplDestroyProbeBox([In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x6000938")]
		[Address(RVA = "0xB1F7C4", Offset = "0xB1F7C4", VA = "0xB1F7C4")]
		public static extern int iplGetProbeSpheres(IntPtr probeBox, [In][Out] Sphere[] probeSpheres);

		[PreserveSig]
		[Token(Token = "0x6000939")]
		[Address(RVA = "0xB17554", Offset = "0xB17554", VA = "0xB17554")]
		public static extern int iplSaveProbeBox(IntPtr probeBox, [In][Out] byte[] data);

		[PreserveSig]
		[Token(Token = "0x600093A")]
		[Address(RVA = "0xB171A4", Offset = "0xB171A4", VA = "0xB171A4")]
		public static extern Error iplLoadProbeBox(IntPtr context, byte[] data, int size, [In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x600093B")]
		[Address(RVA = "0xB1F85C", Offset = "0xB1F85C", VA = "0xB1F85C")]
		public static extern Error iplCreateProbeBatch(IntPtr context, [In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x600093C")]
		[Address(RVA = "0xB1F8EC", Offset = "0xB1F8EC", VA = "0xB1F8EC")]
		public static extern void iplDestroyProbeBatch([In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x600093D")]
		[Address(RVA = "0xB1F96C", Offset = "0xB1F96C", VA = "0xB1F96C")]
		public static extern void iplAddProbeToBatch(IntPtr probeBatch, IntPtr probeBox, int probeIndex);

		[PreserveSig]
		[Token(Token = "0x600093E")]
		[Address(RVA = "0xB1FA04", Offset = "0xB1FA04", VA = "0xB1FA04")]
		public static extern void iplFinalizeProbeBatch(IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x600093F")]
		[Address(RVA = "0xB1FA84", Offset = "0xB1FA84", VA = "0xB1FA84")]
		public static extern int iplSaveProbeBatch(IntPtr probeBatch, [In][Out] byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000940")]
		[Address(RVA = "0xB1FB1C", Offset = "0xB1FB1C", VA = "0xB1FB1C")]
		public static extern Error iplLoadProbeBatch(IntPtr context, byte[] data, int size, [In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000941")]
		[Address(RVA = "0xB1FBCC", Offset = "0xB1FBCC", VA = "0xB1FBCC")]
		public static extern Error iplCreateProbeManager(IntPtr context, [In][Out] ref IntPtr probeManager);

		[PreserveSig]
		[Token(Token = "0x6000942")]
		[Address(RVA = "0xB1FC5C", Offset = "0xB1FC5C", VA = "0xB1FC5C")]
		public static extern void iplDestroyProbeManager([In][Out] ref IntPtr probeManager);

		[PreserveSig]
		[Token(Token = "0x6000943")]
		[Address(RVA = "0xB1FCDC", Offset = "0xB1FCDC", VA = "0xB1FCDC")]
		public static extern void iplAddProbeBatch(IntPtr probeManager, IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000944")]
		[Address(RVA = "0xB1FD68", Offset = "0xB1FD68", VA = "0xB1FD68")]
		public static extern void iplRemoveProbeBatch(IntPtr probeManager, IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000945")]
		[Address(RVA = "0xB17254", Offset = "0xB17254", VA = "0xB17254")]
		public static extern void iplBakeReverb(IntPtr environment, IntPtr probeBox, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x6000946")]
		[Address(RVA = "0xB173EC", Offset = "0xB173EC", VA = "0xB173EC")]
		public static extern void iplBakePropagation(IntPtr environment, IntPtr probeBox, Sphere sourceInfluence, BakedDataIdentifier sourceIdentifier, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x6000947")]
		[Address(RVA = "0xB17304", Offset = "0xB17304", VA = "0xB17304")]
		public static extern void iplBakeStaticListener(IntPtr environment, IntPtr probeBox, Sphere listenerInfluence, BakedDataIdentifier listenerIdentifier, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x6000948")]
		[Address(RVA = "0xB17D08", Offset = "0xB17D08", VA = "0xB17D08")]
		public static extern void iplCancelBake();

		[PreserveSig]
		[Token(Token = "0x6000949")]
		[Address(RVA = "0xB1FDF8", Offset = "0xB1FDF8", VA = "0xB1FDF8")]
		public static extern void iplDeleteBakedDataByIdentifier(IntPtr probeBox, BakedDataIdentifier identifier);

		[PreserveSig]
		[Token(Token = "0x600094A")]
		[Address(RVA = "0xB175EC", Offset = "0xB175EC", VA = "0xB175EC")]
		public static extern int iplGetBakedDataSizeByIdentifier(IntPtr probeBox, BakedDataIdentifier identifier);
	}
	[Token(Token = "0x20001DA")]
	public static class PhononUnityNative
	{
		[PreserveSig]
		[Token(Token = "0x600094B")]
		[Address(RVA = "0xB21F1C", Offset = "0xB21F1C", VA = "0xB21F1C")]
		public static extern void iplUnityGetVersion([In][Out] ref uint major, [In][Out] ref uint minor, [In][Out] ref uint patch);

		[PreserveSig]
		[Token(Token = "0x600094C")]
		[Address(RVA = "0xB21FB0", Offset = "0xB21FB0", VA = "0xB21FB0")]
		public static extern void iplUnityResetAudioEngine();

		[PreserveSig]
		[Token(Token = "0x600094D")]
		[Address(RVA = "0xB22020", Offset = "0xB22020", VA = "0xB22020")]
		public static extern int iplUnityAddSOFAFileName(string sofaFileName);

		[PreserveSig]
		[Token(Token = "0x600094E")]
		[Address(RVA = "0xB220B8", Offset = "0xB220B8", VA = "0xB220B8")]
		public static extern void iplUnityRemoveSOFAFileName(string sofaFileName);

		[PreserveSig]
		[Token(Token = "0x600094F")]
		[Address(RVA = "0xB22148", Offset = "0xB22148", VA = "0xB22148")]
		public static extern void iplUnitySetCurrentSOFAFile(int index);

		[PreserveSig]
		[Token(Token = "0x6000950")]
		[Address(RVA = "0xB221C8", Offset = "0xB221C8", VA = "0xB221C8")]
		public static extern void iplUnitySetEnvironment(SimulationSettings simulationSettings, IntPtr environment, ConvolutionOption convolutionType);

		[PreserveSig]
		[Token(Token = "0x6000951")]
		[Address(RVA = "0xB22270", Offset = "0xB22270", VA = "0xB22270")]
		public static extern void iplUnityResetEnvironment();

		[PreserveSig]
		[Token(Token = "0x6000952")]
		[Address(RVA = "0xB222E0", Offset = "0xB222E0", VA = "0xB222E0")]
		public static extern void iplUnitySetListener(Vector3 position, Vector3 ahead, Vector3 up);
	}
	[Token(Token = "0x20001DB")]
	public class Environment
	{
		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr environment;

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xB18FAC", Offset = "0xB18FAC", VA = "0xB18FAC")]
		public IntPtr GetEnvironment()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xB18FB4", Offset = "0xB18FB4", VA = "0xB18FB4")]
		public Error Create(ComputeDevice computeDevice, SimulationSettings simulationSettings, Scene scene, ProbeManager probeManager, IntPtr globalContext)
		{
			return default(Error);
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xB191F0", Offset = "0xB191F0", VA = "0xB191F0")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xB192D4", Offset = "0xB192D4", VA = "0xB192D4")]
		public Environment()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public enum GameEngineStateInitReason
	{
		[Token(Token = "0x4000CE3")]
		ExportingScene,
		[Token(Token = "0x4000CE4")]
		GeneratingProbes,
		[Token(Token = "0x4000CE5")]
		EditingProbes,
		[Token(Token = "0x4000CE6")]
		Baking,
		[Token(Token = "0x4000CE7")]
		Playing
	}
	[Token(Token = "0x20001DD")]
	public class GameEngineState
	{
		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ComputeDevice computeDevice;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SimulationSettings simulationSettings;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Scene scene;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ProbeManager probeManager;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Environment environment;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ConvolutionOption convolutionType;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Dictionary<string, IntPtr> instancedScenes;

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB196EC", Offset = "0xB196EC", VA = "0xB196EC")]
		public void Initialize(SimulationSettingsValue settings, ComponentCache componentCache, GameEngineStateInitReason reason)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB1A3F0", Offset = "0xB1A3F0", VA = "0xB1A3F0")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB1A654", Offset = "0xB1A654", VA = "0xB1A654")]
		public IntPtr Context()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xB1A65C", Offset = "0xB1A65C", VA = "0xB1A65C")]
		public ComputeDevice ComputeDevice()
		{
			return null;
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xB1A664", Offset = "0xB1A664", VA = "0xB1A664")]
		public SimulationSettings SimulationSettings()
		{
			return default(SimulationSettings);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xB1A678", Offset = "0xB1A678", VA = "0xB1A678")]
		public Scene Scene()
		{
			return null;
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xB1A680", Offset = "0xB1A680", VA = "0xB1A680")]
		public ProbeManager ProbeManager()
		{
			return null;
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xB1A688", Offset = "0xB1A688", VA = "0xB1A688")]
		public Environment Environment()
		{
			return null;
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xB1A690", Offset = "0xB1A690", VA = "0xB1A690")]
		public ConvolutionOption ConvolutionType()
		{
			return default(ConvolutionOption);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xB1A698", Offset = "0xB1A698", VA = "0xB1A698")]
		public void ExportScene(MaterialValue defaultMaterial, bool exportOBJ)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xB19684", Offset = "0xB19684", VA = "0xB19684")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7464C0", Offset = "0x7464C0")]
		private static void LogMessage(string message)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xB1AE10", Offset = "0xB1AE10", VA = "0xB1AE10")]
		public GameEngineState()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class ManagerData
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ComponentCache componentCache;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameEngineState gameEngineState;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEngineState audioEngineState;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int referenceCount;

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xB1BCA4", Offset = "0xB1BCA4", VA = "0xB1BCA4")]
		public void Initialize(GameEngineStateInitReason reason, AudioEngine audioEngine, SimulationSettingsValue simulationValue, string[] sofaFileNames)
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xB1BD48", Offset = "0xB1BD48", VA = "0xB1BD48")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xB1BDB4", Offset = "0xB1BDB4", VA = "0xB1BDB4")]
		public ManagerData()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public enum MaterialPreset
	{
		[Token(Token = "0x4000CF5")]
		Generic,
		[Token(Token = "0x4000CF6")]
		Brick,
		[Token(Token = "0x4000CF7")]
		Concrete,
		[Token(Token = "0x4000CF8")]
		Ceramic,
		[Token(Token = "0x4000CF9")]
		Gravel,
		[Token(Token = "0x4000CFA")]
		Carpet,
		[Token(Token = "0x4000CFB")]
		Glass,
		[Token(Token = "0x4000CFC")]
		Plaster,
		[Token(Token = "0x4000CFD")]
		Wood,
		[Token(Token = "0x4000CFE")]
		Metal,
		[Token(Token = "0x4000CFF")]
		Rock,
		[Token(Token = "0x4000D00")]
		Custom
	}
	[Token(Token = "0x20001E0")]
	public static class MaterialPresetList
	{
		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MaterialValue[] values;

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xB1BE38", Offset = "0xB1BE38", VA = "0xB1BE38")]
		private static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xB1BE90", Offset = "0xB1BE90", VA = "0xB1BE90")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xB1C508", Offset = "0xB1C508", VA = "0xB1C508")]
		public static MaterialValue PresetValue(int index)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001E1")]
	public class MaterialValue
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743CE4", Offset = "0x743CE4")]
		public float LowFreqAbsorption;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743CFC", Offset = "0x743CFC")]
		public float MidFreqAbsorption;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D14", Offset = "0x743D14")]
		public float HighFreqAbsorption;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D2C", Offset = "0x743D2C")]
		public float Scattering;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D44", Offset = "0x743D44")]
		public float LowFreqTransmission;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D5C", Offset = "0x743D5C")]
		public float MidFreqTransmission;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D74", Offset = "0x743D74")]
		public float HighFreqTransmission;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xB1C500", Offset = "0xB1C500", VA = "0xB1C500")]
		public MaterialValue()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xB1C5BC", Offset = "0xB1C5BC", VA = "0xB1C5BC")]
		public MaterialValue(float aLow, float aMid, float aHigh)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xB1C490", Offset = "0xB1C490", VA = "0xB1C490")]
		public MaterialValue(float aLow, float aMid, float aHigh, float scattering, float tLow, float tMid, float tHigh)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xB1C610", Offset = "0xB1C610", VA = "0xB1C610")]
		public MaterialValue(MaterialValue other)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xB1C640", Offset = "0xB1C640", VA = "0xB1C640")]
		public void CopyFrom(MaterialValue other)
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class ProbeManager
	{
		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr probeManager;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr probeBatch;

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xB223C4", Offset = "0xB223C4", VA = "0xB223C4")]
		public IntPtr GetProbeManager()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xB1A168", Offset = "0xB1A168", VA = "0xB1A168")]
		public Error Create(IntPtr context)
		{
			return default(Error);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xB1A444", Offset = "0xB1A444", VA = "0xB1A444")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xB1AF14", Offset = "0xB1AF14", VA = "0xB1AF14")]
		public ProbeManager()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class RayTracer
	{
		[Token(Token = "0x6000972")]
		[Address(RVA = "0xB223CC", Offset = "0xB223CC", VA = "0xB223CC")]
		public static void ClosestHit(float[] rayOrigin, float[] rayDirection, float minDistance, float maxDistance, ref float hitDistance, ref Vector3 hitNormal, ref IntPtr hitMaterial, IntPtr userData)
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xB228B0", Offset = "0xB228B0", VA = "0xB228B0")]
		public static void AnyHit(float[] rayOrigin, float[] rayDirection, float minDistance, float maxDistance, ref int hitExists, IntPtr userData)
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xB22A48", Offset = "0xB22A48", VA = "0xB22A48")]
		public RayTracer()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class Scene
	{
		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr materialBuffer;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr scene;

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xB22A50", Offset = "0xB22A50", VA = "0xB22A50")]
		public IntPtr GetScene()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xB1A7F4", Offset = "0xB1A7F4", VA = "0xB1A7F4")]
		public Error Export(ComputeDevice computeDevice, SimulationSettings simulationSettings, MaterialValue defaultMaterial, IntPtr globalContext, bool exportOBJ = false)
		{
			return default(Error);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xB23398", Offset = "0xB23398", VA = "0xB23398")]
		private SteamAudioGeometry[] FilterGameObjectsWithDynamicGeometry(SteamAudioGeometry[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xB19EE8", Offset = "0xB19EE8", VA = "0xB19EE8")]
		public Error Create(ComputeDevice computeDevice, SimulationSettings simulationSettings, IntPtr globalContext)
		{
			return default(Error);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xB1A4C8", Offset = "0xB1A4C8", VA = "0xB1A4C8")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xB2356C", Offset = "0xB2356C", VA = "0xB2356C")]
		private static Material CopyMaterial(MaterialValue materialValue)
		{
			return default(Material);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xB22608", Offset = "0xB22608", VA = "0xB22608")]
		public static LayerMask GetSteamAudioLayerMask()
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xB23598", Offset = "0xB23598", VA = "0xB23598")]
		public static bool HasSteamAudioGeometry(Transform obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xB2269C", Offset = "0xB2269C", VA = "0xB2269C")]
		public static IntPtr GetSteamAudioMaterialBuffer(Transform obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xB22FD0", Offset = "0xB22FD0", VA = "0xB22FD0")]
		private static string SceneFileName()
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xB22F1C", Offset = "0xB22F1C", VA = "0xB22F1C")]
		private static string ObjFileName()
		{
			return null;
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xB1AEC8", Offset = "0xB1AEC8", VA = "0xB1AEC8")]
		public Scene()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public static class SceneExporter
	{
		[Token(Token = "0x6000982")]
		[Address(RVA = "0xB2371C", Offset = "0xB2371C", VA = "0xB2371C")]
		private static bool IsDynamicSubObject(GameObject root, GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xB237CC", Offset = "0xB237CC", VA = "0xB237CC")]
		public static List<GameObject> GetGameObjectsForExport(GameObject root, bool exportingStaticObjects = false)
		{
			return null;
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xB22A58", Offset = "0xB22A58", VA = "0xB22A58")]
		public static GameObject[] GetStaticGameObjectsForExport(UnityEngine.SceneManagement.Scene scene)
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xB23B88", Offset = "0xB23B88", VA = "0xB23B88")]
		public static GameObject[] GetDynamicGameObjectsForExport(SteamAudioDynamicObject dynamicObject)
		{
			return null;
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xB23BF4", Offset = "0xB23BF4", VA = "0xB23BF4")]
		private static MaterialValue GetMaterialForGameObject(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xB23CCC", Offset = "0xB23CCC", VA = "0xB23CCC")]
		private static Material MaterialFromSteamAudioMaterial(MaterialValue steamAudioMaterial)
		{
			return default(Material);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xB23CF8", Offset = "0xB23CF8", VA = "0xB23CF8")]
		private static void GetMaterialMapping(GameObject[] gameObjects, ref Material[] materials, ref int[] materialIndices)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xB24144", Offset = "0xB24144", VA = "0xB24144")]
		private static float GetTerrainSimplificationLevel(Terrain terrain)
		{
			return default(float);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xB241AC", Offset = "0xB241AC", VA = "0xB241AC")]
		public static int GetNumVertices(GameObject gameObject)
		{
			return default(int);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xB24384", Offset = "0xB24384", VA = "0xB24384")]
		public static int GetNumTriangles(GameObject gameObject)
		{
			return default(int);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xB2456C", Offset = "0xB2456C", VA = "0xB2456C")]
		private static void GetVertices(GameObject gameObject, Vector3[] vertices, int offset, Transform transform)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xB24B24", Offset = "0xB24B24", VA = "0xB24B24")]
		private static void GetTriangles(GameObject gameObject, Triangle[] triangles, int offset)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xB24EC4", Offset = "0xB24EC4", VA = "0xB24EC4")]
		private static void FixupTriangleIndices(Triangle[] triangles, int startIndex, int endIndex, int indexOffset)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xB22B60", Offset = "0xB22B60", VA = "0xB22B60")]
		public static void GetGeometryAndMaterialBuffers(GameObject[] gameObjects, ref Vector3[] vertices, ref Triangle[] triangles, ref int[] materialIndices, ref Material[] materials, bool isDynamic, bool exportOBJ)
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public enum SimulationSettingsPreset
	{
		[Token(Token = "0x4000D0E")]
		Low,
		[Token(Token = "0x4000D0F")]
		Medium,
		[Token(Token = "0x4000D10")]
		High,
		[Token(Token = "0x4000D11")]
		Custom
	}
	[Token(Token = "0x20001E7")]
	public static class SimulationSettingsPresetList
	{
		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SimulationSettingsValue[] values;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xB24F58", Offset = "0xB24F58", VA = "0xB24F58")]
		private static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xB24FB0", Offset = "0xB24FB0", VA = "0xB24FB0")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xB253A0", Offset = "0xB253A0", VA = "0xB253A0")]
		public static SimulationSettingsValue PresetValue(int index)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001E8")]
	public class SimulationSettingsValue
	{
		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743D8C", Offset = "0x743D8C")]
		public int OcclusionSamples;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743DA8", Offset = "0x743DA8")]
		public int RealtimeRays;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743DC8", Offset = "0x743DC8")]
		public int RealtimeSecondaryRays;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743DE8", Offset = "0x743DE8")]
		public int RealtimeBounces;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743E04", Offset = "0x743E04")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743E04", Offset = "0x743E04")]
		public int RealtimeThreadsPercentage;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743E5C", Offset = "0x743E5C")]
		public int BakeRays;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743E7C", Offset = "0x743E7C")]
		public int BakeSecondaryRays;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743E9C", Offset = "0x743E9C")]
		public int BakeBounces;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x743EB8", Offset = "0x743EB8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743EB8", Offset = "0x743EB8")]
		public int BakeThreadsPercentage;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743F10", Offset = "0x743F10")]
		public float Duration;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743F2C", Offset = "0x743F2C")]
		public int AmbisonicsOrder;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743F44", Offset = "0x743F44")]
		public int MaxSources;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743F60", Offset = "0x743F60")]
		public float IrradianceMinDistance;

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xB25378", Offset = "0xB25378", VA = "0xB25378")]
		public SimulationSettingsValue()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xB252B4", Offset = "0xB252B4", VA = "0xB252B4")]
		public SimulationSettingsValue(int realtimeRays, int realtimeSecondaryRays, int realtimeBounces, int realtimeThreadsPercentage, int bakeRays, int bakeSecondaryRays, int bakeBounces, int bakeThreadsPercentage, float duration, int ambisonicsOrder, int maxSources, float irradianceMinDistance)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xB25454", Offset = "0xB25454", VA = "0xB25454")]
		public SimulationSettingsValue(SimulationSettingsValue other)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xB254A4", Offset = "0xB254A4", VA = "0xB254A4")]
		public void CopyFrom(SimulationSettingsValue other)
		{
		}
	}
	[Token(Token = "0x20001E9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FBAC", Offset = "0x73FBAC")]
	public class SteamAudioAmbisonicsSource : MonoBehaviour
	{
		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableBinaural;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool overrideHRTFIndex;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int hrtfIndex;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ManagerData managerData;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioEngine audioEngine;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioEngineAmbisonicsSource audioEngineAmbisonicsSource;

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xB25518", Offset = "0xB25518", VA = "0xB25518")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xB25664", Offset = "0xB25664", VA = "0xB25664")]
		private void Start()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xB25688", Offset = "0xB25688", VA = "0xB25688")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xB256CC", Offset = "0xB256CC", VA = "0xB256CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xB256F0", Offset = "0xB256F0", VA = "0xB256F0")]
		public SteamAudioAmbisonicsSource()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FBE4", Offset = "0x73FBE4")]
	public class SteamAudioBakedStaticListenerNode : MonoBehaviour
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string uniqueIdentifier;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x743F7C", Offset = "0x743F7C")]
		public float bakingRadius;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamAudioProbeBox[] probeBoxes;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Baker phononBaker;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<string> bakedProbeNames;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<int> bakedProbeDataSizes;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int bakedDataSize;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bakeToggle;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bakedStatsFoldout;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BakedDataIdentifier bakedDataIdentifier;

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xB25700", Offset = "0xB25700", VA = "0xB25700")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xB25990", Offset = "0xB25990", VA = "0xB25990")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xB25C28", Offset = "0xB25C28", VA = "0xB25C28")]
		public void EndBake()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xB25C40", Offset = "0xB25C40", VA = "0xB25C40")]
		public void UpdateBakedDataStatistics()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xB25BF8", Offset = "0xB25BF8", VA = "0xB25BF8")]
		private void CacheIdentifier()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xB25F00", Offset = "0xB25F00", VA = "0xB25F00")]
		public SteamAudioBakedStaticListenerNode()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FC1C", Offset = "0x73FC1C")]
	public class SteamAudioCustomSettings : MonoBehaviour
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x743F98", Offset = "0x743F98")]
		public SceneType rayTracerOption;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x743FD0", Offset = "0x743FD0")]
		public ConvolutionOption convolutionOption;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x744008", Offset = "0x744008")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744008", Offset = "0x744008")]
		public int maxComputeUnitsToReserve;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x744060", Offset = "0x744060")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744060", Offset = "0x744060")]
		public float Duration;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7440B8", Offset = "0x7440B8")]
		public int AmbisonicsOrder;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7440D0", Offset = "0x7440D0")]
		public int MaxSources;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7440EC", Offset = "0x7440EC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7440EC", Offset = "0x7440EC")]
		public int BakingBatchSize;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744140", Offset = "0x744140")]
		public float fractionComputeUnitsForIRUpdate;

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x9D129C", Offset = "0x9D129C", VA = "0x9D129C")]
		public SceneType RayTracerType()
		{
			return default(SceneType);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x9D12AC", Offset = "0x9D12AC", VA = "0x9D12AC")]
		public ConvolutionOption ConvolutionType()
		{
			return default(ConvolutionOption);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x9D12B4", Offset = "0x9D12B4", VA = "0x9D12B4")]
		public SteamAudioCustomSettings()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FC54", Offset = "0x73FC54")]
	public class SteamAudioCustomSpeakerLayout : MonoBehaviour
	{
		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3[] speakerPositions;

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x9D12E0", Offset = "0x9D12E0", VA = "0x9D12E0")]
		public SteamAudioCustomSpeakerLayout()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FC8C", Offset = "0x73FC8C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FC8C", Offset = "0x73FC8C")]
	public class SteamAudioDynamicObject : MonoBehaviour
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string assetFileName;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamAudioManager manager;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IntPtr instancedMesh;

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x9D12E8", Offset = "0x9D12E8", VA = "0x9D12E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x9D1A14", Offset = "0x9D1A14", VA = "0x9D1A14")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x9D1B28", Offset = "0x9D1B28", VA = "0x9D1B28")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x9D1C68", Offset = "0x9D1C68", VA = "0x9D1C68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x9D1DA8", Offset = "0x9D1DA8", VA = "0x9D1DA8")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x9D1F04", Offset = "0x9D1F04", VA = "0x9D1F04")]
		public void Export(string assetFileName, bool exportOBJ)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x9D21E4", Offset = "0x9D21E4", VA = "0x9D21E4")]
		private bool ValidateGeometry()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x9D2264", Offset = "0x9D2264", VA = "0x9D2264")]
		private void ReportValidationFailure(string message)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x9D230C", Offset = "0x9D230C", VA = "0x9D230C")]
		public SteamAudioDynamicObject()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FD14", Offset = "0x73FD14")]
	public class SteamAudioGeometry : MonoBehaviour
	{
		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744158", Offset = "0x744158")]
		public int TerrainSimplificationLevel;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool exportAllChildren;

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x9D2368", Offset = "0x9D2368", VA = "0x9D2368")]
		public int GetNumVertices()
		{
			return default(int);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x9D248C", Offset = "0x9D248C", VA = "0x9D248C")]
		public int GetNumTriangles()
		{
			return default(int);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x9D25B0", Offset = "0x9D25B0", VA = "0x9D25B0")]
		public SteamAudioGeometry()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public enum ReverbSimulationType
	{
		[Token(Token = "0x4000D40")]
		RealtimeReverb,
		[Token(Token = "0x4000D41")]
		BakedReverb
	}
	[Token(Token = "0x20001F0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FD4C", Offset = "0x73FD4C")]
	public class SteamAudioListener : MonoBehaviour
	{
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamAudioProbeBox[] probeBoxes;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> bakedProbeNames;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<int> bakedProbeDataSizes;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int bakedDataSize;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool bakedStatsFoldout;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool bakeToggle;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamAudioBakedStaticListenerNode currentStaticListenerNode;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Baker phononBaker;

		[Token(Token = "0x170000E9")]
		public BakedDataIdentifier Identifier
		{
			[Token(Token = "0x60009B6")]
			[Address(RVA = "0x9D2A0C", Offset = "0x9D2A0C", VA = "0x9D2A0C")]
			get
			{
				return default(BakedDataIdentifier);
			}
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x9D25B8", Offset = "0x9D25B8", VA = "0x9D25B8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x9D2808", Offset = "0x9D2808", VA = "0x9D2808")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x9D2A14", Offset = "0x9D2A14", VA = "0x9D2A14")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x9D2A30", Offset = "0x9D2A30", VA = "0x9D2A30")]
		public void UpdateBakedDataStatistics()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x9D2CA8", Offset = "0x9D2CA8", VA = "0x9D2CA8")]
		public SteamAudioListener()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FD84", Offset = "0x73FD84")]
	public class SteamAudioManager : MonoBehaviour
	{
		[Token(Token = "0x20003E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741CB4", Offset = "0x741CB4")]
		private sealed class <EndOfFrameUpdate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamAudioManager <>4__this;

			[Token(Token = "0x1700018F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012DF")]
				[Address(RVA = "0x9D36A0", Offset = "0x9D36A0", VA = "0x9D36A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000190")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012E1")]
				[Address(RVA = "0x9D3708", Offset = "0x9D3708", VA = "0x9D3708", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0x9D3138", Offset = "0x9D3138", VA = "0x9D3138")]
			[DebuggerHidden]
			public <EndOfFrameUpdate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60012DD")]
			[Address(RVA = "0x9D34B8", Offset = "0x9D34B8", VA = "0x9D34B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012DE")]
			[Address(RVA = "0x9D34BC", Offset = "0x9D34BC", VA = "0x9D34BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x9D36A8", Offset = "0x9D36A8", VA = "0x9D36A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamAudioManager managerSingleton;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManagerData managerData;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaitForEndOfFrame waitForEndOfFrame;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioEngine audioEngine;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] sofaFiles;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int currentSOFAFile;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MaterialPreset materialPreset;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MaterialValue materialValue;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SimulationSettingsPreset simulationPreset;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SimulationSettingsValue simulationValue;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool updateComponents;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioListener currentAudioListener;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showLoadTimeOptions;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool showMassBakingOptions;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Baker phononBaker;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LayerMask layerMask;

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x9D2D60", Offset = "0x9D2D60", VA = "0x9D2D60")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x9D2E38", Offset = "0x9D2E38", VA = "0x9D2E38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x9D2ED4", Offset = "0x9D2ED4", VA = "0x9D2ED4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x9D2FCC", Offset = "0x9D2FCC", VA = "0x9D2FCC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x9D3104", Offset = "0x9D3104", VA = "0x9D3104")]
		private void Update()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x9D2E64", Offset = "0x9D2E64", VA = "0x9D2E64")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746524", Offset = "0x746524")]
		private IEnumerator EndOfFrameUpdate()
		{
			return null;
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x9D153C", Offset = "0x9D153C", VA = "0x9D153C")]
		public void Initialize(GameEngineStateInitReason reason)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x9D2F48", Offset = "0x9D2F48", VA = "0x9D2F48")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x9D32A4", Offset = "0x9D32A4", VA = "0x9D32A4")]
		public static bool IsAudioEngineInitializing()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x9D32AC", Offset = "0x9D32AC", VA = "0x9D32AC")]
		public void ExportScene(bool exportOBJ)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x9D3304", Offset = "0x9D3304", VA = "0x9D3304")]
		public AudioListener AudioListener()
		{
			return null;
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x9D332C", Offset = "0x9D332C", VA = "0x9D332C")]
		public SteamAudioListener SteamAudioListener()
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x9D3354", Offset = "0x9D3354", VA = "0x9D3354")]
		public GameEngineState GameEngineState()
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x9D3370", Offset = "0x9D3370", VA = "0x9D3370")]
		public AudioEngineState AudioEngineState()
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x9D338C", Offset = "0x9D338C", VA = "0x9D338C")]
		public ManagerData ManagerData()
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x9D141C", Offset = "0x9D141C", VA = "0x9D141C")]
		public static SteamAudioManager GetSingleton()
		{
			return null;
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x9D3394", Offset = "0x9D3394", VA = "0x9D3394")]
		public int NumSOFAFiles()
		{
			return default(int);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x9D3164", Offset = "0x9D3164", VA = "0x9D3164")]
		public string[] GetSOFAFileNames()
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x9D2F64", Offset = "0x9D2F64", VA = "0x9D2F64")]
		private static void ClearSingleton()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x9D1730", Offset = "0x9D1730", VA = "0x9D1730")]
		public void CreateInstancedMesh(string assetFileName, Transform instanceTransform, ref IntPtr instancedMesh)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x9D1AC0", Offset = "0x9D1AC0", VA = "0x9D1AC0")]
		public void DestroyInstancedMesh(ref IntPtr instancedMesh)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x9D1BD0", Offset = "0x9D1BD0", VA = "0x9D1BD0")]
		public void EnableInstancedMesh(IntPtr instancedMesh)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x9D1D10", Offset = "0x9D1D10", VA = "0x9D1D10")]
		public void DisableInstancedMesh(IntPtr instancedMesh)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x9D1E6C", Offset = "0x9D1E6C", VA = "0x9D1E6C")]
		public void UpdateInstancedMeshTransform(IntPtr instancedMesh, Transform instanceTransform)
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x9D3404", Offset = "0x9D3404", VA = "0x9D3404")]
		public SteamAudioManager()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FDBC", Offset = "0x73FDBC")]
	public class SteamAudioMaterial : MonoBehaviour
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MaterialPreset Preset;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialValue Value;

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x9D3710", Offset = "0x9D3710", VA = "0x9D3710")]
		public SteamAudioMaterial()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FDF4", Offset = "0x73FDF4")]
	public class SteamAudioProbeBox : MonoBehaviour
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ProbePlacementStrategy placementStrategy;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744170", Offset = "0x744170")]
		public float horizontalSpacing;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744190", Offset = "0x744190")]
		public float heightAboveFloor;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7441AC", Offset = "0x7441AC")]
		public int maxNumTriangles;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7441C8", Offset = "0x7441C8")]
		public int maxOctreeDepth;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int dataSize;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] probeSpherePoints;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] probeSphereRadii;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string cachedDataFileName;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ProbeDataLayerInfo> dataLayerInfo;

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x9D3718", Offset = "0x9D3718", VA = "0x9D3718")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x9D3984", Offset = "0x9D3984", VA = "0x9D3984")]
		public void GenerateProbes()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x9D4098", Offset = "0x9D4098", VA = "0x9D4098")]
		public void DeleteBakedDataByIdentifier(BakedDataIdentifier identifier)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x9D43F0", Offset = "0x9D43F0", VA = "0x9D43F0")]
		private string DataFileName()
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x9D4508", Offset = "0x9D4508", VA = "0x9D4508")]
		public void CacheFileName()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x9D4334", Offset = "0x9D4334", VA = "0x9D4334")]
		public byte[] LoadData()
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x9D4000", Offset = "0x9D4000", VA = "0x9D4000")]
		public void SaveData(byte[] data)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x9D4040", Offset = "0x9D4040", VA = "0x9D4040")]
		public void ResetLayers()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x9D450C", Offset = "0x9D450C", VA = "0x9D450C")]
		public void AddOrUpdateLayer(BakedDataIdentifier identifier, string name, int size)
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x9D469C", Offset = "0x9D469C", VA = "0x9D469C")]
		public void AddLayer(BakedDataIdentifier identifier, string name, int size)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x9D4378", Offset = "0x9D4378", VA = "0x9D4378")]
		public void RemoveLayer(BakedDataIdentifier identifier)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x9D473C", Offset = "0x9D473C", VA = "0x9D473C")]
		public void UpdateLayerSize(BakedDataIdentifier identifier, int newSize)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x9D4578", Offset = "0x9D4578", VA = "0x9D4578")]
		private ProbeDataLayerInfo FindLayer(BakedDataIdentifier identifier)
		{
			return null;
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x9D4764", Offset = "0x9D4764", VA = "0x9D4764")]
		public SteamAudioProbeBox()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F4")]
	public class ProbeDataLayerInfo
	{
		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BakedDataIdentifier identifier;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int size;

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xB223BC", Offset = "0xB223BC", VA = "0xB223BC")]
		public ProbeDataLayerInfo()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public enum SourceSimulationType
	{
		[Token(Token = "0x4000D6B")]
		Realtime,
		[Token(Token = "0x4000D6C")]
		BakedStaticSource,
		[Token(Token = "0x4000D6D")]
		BakedStaticListener
	}
	[Token(Token = "0x20001F6")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x73FE2C", Offset = "0x73FE2C")]
	public class SteamAudioSource : MonoBehaviour
	{
		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool directBinaural;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HRTFInterpolation interpolation;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool physicsBasedAttenuation;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool airAbsorption;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7441E0", Offset = "0x7441E0")]
		public float dipoleWeight;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7441F8", Offset = "0x7441F8")]
		public float dipolePower;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OcclusionMode occlusionMode;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OcclusionMethod occlusionMethod;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744210", Offset = "0x744210")]
		public float sourceRadius;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74422C", Offset = "0x74422C")]
		public float directMixLevel;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool reflections;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool indirectBinaural;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x744244", Offset = "0x744244")]
		public float indirectMixLevel;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SourceSimulationType simulationType;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string uniqueIdentifier;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool avoidSilenceDuringInit;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool overrideHRTFIndex;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int hrtfIndex;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DirectSoundPath directPath;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x74425C", Offset = "0x74425C")]
		public float bakingRadius;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SteamAudioProbeBox[] probeBoxes;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Baker baker;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<string> bakedProbeNames;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<int> bakedProbeDataSizes;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bakedDataSize;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool bakedStatsFoldout;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool bakeToggle;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BakedDataIdentifier bakedDataIdentifier;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ManagerData managerData;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioEngine audioEngine;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioEngineSource audioEngineSource;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.Vector3[] sphereVertices;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private UnityEngine.Vector3[] deformedSphereVertices;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Mesh deformedSphereMesh;

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x9D47FC", Offset = "0x9D47FC", VA = "0x9D47FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x9D4944", Offset = "0x9D4944", VA = "0x9D4944")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x9D4968", Offset = "0x9D4968", VA = "0x9D4968")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x9D49B0", Offset = "0x9D49B0", VA = "0x9D49B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x9D4E9C", Offset = "0x9D4E9C", VA = "0x9D4E9C")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x9D513C", Offset = "0x9D513C", VA = "0x9D513C")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x9D5158", Offset = "0x9D5158", VA = "0x9D5158")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x9D59A0", Offset = "0x9D59A0", VA = "0x9D59A0")]
		public void UpdateBakedDataStatistics()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x9D510C", Offset = "0x9D510C", VA = "0x9D510C")]
		private void CacheIdentifier()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x9D4D9C", Offset = "0x9D4D9C", VA = "0x9D4D9C")]
		private int GetIdentifierToSend()
		{
			return default(int);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x9D5C60", Offset = "0x9D5C60", VA = "0x9D5C60")]
		private UnityEngine.Vector3 DeformedVertex(UnityEngine.Vector3 vertex)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x9D5560", Offset = "0x9D5560", VA = "0x9D5560")]
		private void InitializeDeformedSphereMesh(int nPhi, int nTheta)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x9D58F0", Offset = "0x9D58F0", VA = "0x9D58F0")]
		private void DeformSphereMesh()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x9D5D4C", Offset = "0x9D5D4C", VA = "0x9D5D4C")]
		public SteamAudioSource()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public static class Version
	{
		[Token(Token = "0x4000D91")]
		public const int major = 2;

		[Token(Token = "0x4000D92")]
		public const int minor = 0;

		[Token(Token = "0x4000D93")]
		public const int patch = 17;

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x9D6648", Offset = "0x9D6648", VA = "0x9D6648")]
		public static int GetVersion()
		{
			return default(int);
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x20001F8")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x98B43C", Offset = "0x98B43C", VA = "0x98B43C")]
		public void Start()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x98B5A0", Offset = "0x98B5A0", VA = "0x98B5A0")]
		public void Update()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x98B6DC", Offset = "0x98B6DC", VA = "0x98B6DC", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x98B6E0", Offset = "0x98B6E0", VA = "0x98B6E0", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x98B768", Offset = "0x98B768", VA = "0x98B768", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x98B824", Offset = "0x98B824", VA = "0x98B824", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x98B828", Offset = "0x98B828", VA = "0x98B828", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x98B82C", Offset = "0x98B82C", VA = "0x98B82C", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x98B8F8", Offset = "0x98B8F8", VA = "0x98B8F8", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x98B8FC", Offset = "0x98B8FC", VA = "0x98B8FC", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x98B900", Offset = "0x98B900", VA = "0x98B900", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x98B904", Offset = "0x98B904", VA = "0x98B904", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x98B908", Offset = "0x98B908", VA = "0x98B908", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x98B90C", Offset = "0x98B90C", VA = "0x98B90C", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x98B910", Offset = "0x98B910", VA = "0x98B910", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x98B914", Offset = "0x98B914", VA = "0x98B914", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x98B980", Offset = "0x98B980", VA = "0x98B980", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x98B984", Offset = "0x98B984", VA = "0x98B984", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x98BA2C", Offset = "0x98BA2C", VA = "0x98BA2C", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x98BA30", Offset = "0x98BA30", VA = "0x98BA30")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x98BB34", Offset = "0x98BB34", VA = "0x98BB34")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x20001F9")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x98AD30", Offset = "0x98AD30", VA = "0x98AD30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x98AE0C", Offset = "0x98AE0C", VA = "0x98AE0C")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x98AE14", Offset = "0x98AE14", VA = "0x98AE14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x98AE90", Offset = "0x98AE90", VA = "0x98AE90")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FE64", Offset = "0x73FE64")]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalColor;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color HoverColor;

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x98AE98", Offset = "0x98AE98", VA = "0x98AE98")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x98AEF0", Offset = "0x98AEF0", VA = "0x98AEF0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x98AF20", Offset = "0x98AF20", VA = "0x98AF20")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x98AF50", Offset = "0x98AF50", VA = "0x98AF50", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x98B010", Offset = "0x98B010", VA = "0x98B010", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x98B0D0", Offset = "0x98B0D0", VA = "0x98B0D0")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FEC8", Offset = "0x73FEC8")]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x98B114", Offset = "0x98B114", VA = "0x98B114")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x98B248", Offset = "0x98B248", VA = "0x98B248")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x98B1E4", Offset = "0x98B1E4", VA = "0x98B1E4")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x98B2EC", Offset = "0x98B2EC", VA = "0x98B2EC", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x98B364", Offset = "0x98B364", VA = "0x98B364", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x98B3D8", Offset = "0x98B3D8", VA = "0x98B3D8")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x20001FD")]
	public enum FaceType : uint
	{
		[Token(Token = "0x4000DA4")]
		TRIANGLES,
		[Token(Token = "0x4000DA5")]
		QUADS
	}
	[Token(Token = "0x20001FE")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x4000DA7")]
		ABSORPTION,
		[Token(Token = "0x4000DA8")]
		TRANSMISSION,
		[Token(Token = "0x4000DA9")]
		SCATTERING
	}
	[Token(Token = "0x20001FF")]
	public struct MeshGroup
	{
		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x2000200")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4000DAE")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4000DAF")]
		public const string Tab = "    ";

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xAE11DC", Offset = "0xAE11DC", VA = "0xAE11DC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746588", Offset = "0x746588")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746588", Offset = "0x746588")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xAE1264", Offset = "0xAE1264", VA = "0xAE1264")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7465E8", Offset = "0x7465E8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7465E8", Offset = "0x7465E8")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xAE12FC", Offset = "0xAE12FC", VA = "0xAE12FC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746648", Offset = "0x746648")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746648", Offset = "0x746648")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xAE1384", Offset = "0xAE1384", VA = "0xAE1384")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7466A8", Offset = "0x7466A8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7466A8", Offset = "0x7466A8")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xAE140C", Offset = "0xAE140C", VA = "0xAE140C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746708", Offset = "0x746708")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x746708", Offset = "0x746708")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class CAPI
	{
		[Token(Token = "0x20003E1")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x20003E2")]
		public enum Result
		{
			[Token(Token = "0x4001133")]
			Success = 0,
			[Token(Token = "0x4001134")]
			Failure = -1000,
			[Token(Token = "0x4001135")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4001136")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x4001137")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x4001138")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x4001139")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x400113A")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x400113B")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x20003E3")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x400113C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x60012E6")]
			[Address(RVA = "0xAE8DA0", Offset = "0xAE8DA0", VA = "0xAE8DA0")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x4000DB0")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x4000DB8")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xAE150C", Offset = "0xAE150C", VA = "0xAE150C")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xAE159C", Offset = "0xAE159C", VA = "0xAE159C")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xAE1758", Offset = "0xAE1758", VA = "0xAE1758")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xAE1838", Offset = "0xAE1838", VA = "0xAE1838")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xAE18A8", Offset = "0xAE18A8", VA = "0xAE18A8")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xAE191C", Offset = "0xAE191C", VA = "0xAE191C")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xAE199C", Offset = "0xAE199C", VA = "0xAE199C")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xAE1AB4", Offset = "0xAE1AB4", VA = "0xAE1AB4")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xAE1B34", Offset = "0xAE1B34", VA = "0xAE1B34")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xAE1C4C", Offset = "0xAE1C4C", VA = "0xAE1C4C")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xAE1CCC", Offset = "0xAE1CCC", VA = "0xAE1CCC")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xAE1D4C", Offset = "0xAE1D4C", VA = "0xAE1D4C")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xAE1DCC", Offset = "0xAE1DCC", VA = "0xAE1DCC")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xAE1E4C", Offset = "0xAE1E4C", VA = "0xAE1E4C")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xAE1EDC", Offset = "0xAE1EDC", VA = "0xAE1EDC")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xAE1F6C", Offset = "0xAE1F6C", VA = "0xAE1F6C")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xAE1FFC", Offset = "0xAE1FFC", VA = "0xAE1FFC")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xAE207C", Offset = "0xAE207C", VA = "0xAE207C")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xAE20FC", Offset = "0xAE20FC", VA = "0xAE20FC")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xAE218C", Offset = "0xAE218C", VA = "0xAE218C")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xAE221C", Offset = "0xAE221C", VA = "0xAE221C")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xAE22AC", Offset = "0xAE22AC", VA = "0xAE22AC")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xAE232C", Offset = "0xAE232C", VA = "0xAE232C")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xAE23CC", Offset = "0xAE23CC", VA = "0xAE23CC")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xAE244C", Offset = "0xAE244C", VA = "0xAE244C")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xAE24EC", Offset = "0xAE24EC", VA = "0xAE24EC")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xAE25AC", Offset = "0xAE25AC", VA = "0xAE25AC")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xAE267C", Offset = "0xAE267C", VA = "0xAE267C")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xAE270C", Offset = "0xAE270C", VA = "0xAE270C")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xAE279C", Offset = "0xAE279C", VA = "0xAE279C")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xAE282C", Offset = "0xAE282C", VA = "0xAE282C")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xAE28BC", Offset = "0xAE28BC", VA = "0xAE28BC")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xAE294C", Offset = "0xAE294C", VA = "0xAE294C")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xAE29CC", Offset = "0xAE29CC", VA = "0xAE29CC")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xAE2AEC", Offset = "0xAE2AEC", VA = "0xAE2AEC")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xAE2A5C", Offset = "0xAE2A5C", VA = "0xAE2A5C")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xAE2DC4", Offset = "0xAE2DC4", VA = "0xAE2DC4")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xAE2EFC", Offset = "0xAE2EFC", VA = "0xAE2EFC")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000A41")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xAE2F7C", Offset = "0xAE2F7C", VA = "0xAE2F7C")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xAE31E0", Offset = "0xAE31E0", VA = "0xAE31E0")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xAE3260", Offset = "0xAE3260", VA = "0xAE3260")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xAE3398", Offset = "0xAE3398", VA = "0xAE3398")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xAE3418", Offset = "0xAE3418", VA = "0xAE3418")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xAE3550", Offset = "0xAE3550", VA = "0xAE3550")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xAE35D0", Offset = "0xAE35D0", VA = "0xAE35D0")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xAE3708", Offset = "0xAE3708", VA = "0xAE3708")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xAE3788", Offset = "0xAE3788", VA = "0xAE3788")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xAE38C0", Offset = "0xAE38C0", VA = "0xAE38C0")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xAE3940", Offset = "0xAE3940", VA = "0xAE3940")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xAE39C0", Offset = "0xAE39C0", VA = "0xAE39C0")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xAE3A58", Offset = "0xAE3A58", VA = "0xAE3A58")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xAE3AD8", Offset = "0xAE3AD8", VA = "0xAE3AD8")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xAE3C84", Offset = "0xAE3C84", VA = "0xAE3C84")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xAE3DB0", Offset = "0xAE3DB0", VA = "0xAE3DB0")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xAE3C04", Offset = "0xAE3C04", VA = "0xAE3C04")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xAE3E30", Offset = "0xAE3E30", VA = "0xAE3E30")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xAE3EB0", Offset = "0xAE3EB0", VA = "0xAE3EB0")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xAE3F40", Offset = "0xAE3F40", VA = "0xAE3F40")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xAE3FC0", Offset = "0xAE3FC0", VA = "0xAE3FC0")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xAE4050", Offset = "0xAE4050", VA = "0xAE4050")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xAE40D0", Offset = "0xAE40D0", VA = "0xAE40D0")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xAE4150", Offset = "0xAE4150", VA = "0xAE4150")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xAE438C", Offset = "0xAE438C", VA = "0xAE438C")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xAE441C", Offset = "0xAE441C", VA = "0xAE441C")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xAE4608", Offset = "0xAE4608", VA = "0xAE4608")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xAE46A0", Offset = "0xAE46A0", VA = "0xAE46A0")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xAE47C4", Offset = "0xAE47C4", VA = "0xAE47C4")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xAE4844", Offset = "0xAE4844", VA = "0xAE4844")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xAE48C4", Offset = "0xAE48C4", VA = "0xAE48C4")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xAE49EC", Offset = "0xAE49EC", VA = "0xAE49EC")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xAE4A6C", Offset = "0xAE4A6C", VA = "0xAE4A6C")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xAE4B94", Offset = "0xAE4B94", VA = "0xAE4B94")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xAE4C14", Offset = "0xAE4C14", VA = "0xAE4C14")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xAE4CA4", Offset = "0xAE4CA4", VA = "0xAE4CA4")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xAE4D34", Offset = "0xAE4D34", VA = "0xAE4D34")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xAE4DC4", Offset = "0xAE4DC4", VA = "0xAE4DC4")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xAE4E44", Offset = "0xAE4E44", VA = "0xAE4E44")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xAE4ECC", Offset = "0xAE4ECC", VA = "0xAE4ECC")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xAE4F54", Offset = "0xAE4F54", VA = "0xAE4F54")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xAE4FD4", Offset = "0xAE4FD4", VA = "0xAE4FD4")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xAE5054", Offset = "0xAE5054", VA = "0xAE5054")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xAE5108", Offset = "0xAE5108", VA = "0xAE5108")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xAE5198", Offset = "0xAE5198", VA = "0xAE5198")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xAE5228", Offset = "0xAE5228", VA = "0xAE5228")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xAE52A8", Offset = "0xAE52A8", VA = "0xAE52A8")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xAE5328", Offset = "0xAE5328", VA = "0xAE5328")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xAE53A8", Offset = "0xAE53A8", VA = "0xAE53A8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xAE5440", Offset = "0xAE5440", VA = "0xAE5440")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xAE54D0", Offset = "0xAE54D0", VA = "0xAE54D0")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xAE5560", Offset = "0xAE5560", VA = "0xAE5560")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xAE55F0", Offset = "0xAE55F0", VA = "0xAE55F0")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xAE5688", Offset = "0xAE5688", VA = "0xAE5688")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xAE5720", Offset = "0xAE5720", VA = "0xAE5720")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xAE57A0", Offset = "0xAE57A0", VA = "0xAE57A0")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xAE5820", Offset = "0xAE5820", VA = "0xAE5820")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xAE5948", Offset = "0xAE5948", VA = "0xAE5948")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xAE59C8", Offset = "0xAE59C8", VA = "0xAE59C8")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xAE5AF0", Offset = "0xAE5AF0", VA = "0xAE5AF0")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xAE5B70", Offset = "0xAE5B70", VA = "0xAE5B70")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xAE5C98", Offset = "0xAE5C98", VA = "0xAE5C98")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xAE5D18", Offset = "0xAE5D18", VA = "0xAE5D18")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xAE5EC0", Offset = "0xAE5EC0", VA = "0xAE5EC0")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xAE615C", Offset = "0xAE615C", VA = "0xAE615C")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xAE5E40", Offset = "0xAE5E40", VA = "0xAE5E40")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xAE61EC", Offset = "0xAE61EC", VA = "0xAE61EC")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xAE626C", Offset = "0xAE626C", VA = "0xAE626C")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xAE62FC", Offset = "0xAE62FC", VA = "0xAE62FC")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xAE638C", Offset = "0xAE638C", VA = "0xAE638C")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xAE641C", Offset = "0xAE641C", VA = "0xAE641C")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xAE64BC", Offset = "0xAE64BC", VA = "0xAE64BC")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xAE655C", Offset = "0xAE655C", VA = "0xAE655C")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xAE65FC", Offset = "0xAE65FC", VA = "0xAE65FC")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xAE667C", Offset = "0xAE667C", VA = "0xAE667C")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xAE66FC", Offset = "0xAE66FC", VA = "0xAE66FC")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xAE677C", Offset = "0xAE677C", VA = "0xAE677C")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xAE67FC", Offset = "0xAE67FC", VA = "0xAE67FC")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xAE687C", Offset = "0xAE687C", VA = "0xAE687C")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xAE69A4", Offset = "0xAE69A4", VA = "0xAE69A4")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xAE6A3C", Offset = "0xAE6A3C", VA = "0xAE6A3C")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xAE6ABC", Offset = "0xAE6ABC", VA = "0xAE6ABC")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xAE6B20", Offset = "0xAE6B20", VA = "0xAE6B20")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xAE6C3C", Offset = "0xAE6C3C", VA = "0xAE6C3C")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xAE6CCC", Offset = "0xAE6CCC", VA = "0xAE6CCC")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xAE6E10", Offset = "0xAE6E10", VA = "0xAE6E10")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xAE6EA0", Offset = "0xAE6EA0", VA = "0xAE6EA0")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xAE6F40", Offset = "0xAE6F40", VA = "0xAE6F40")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xAE72D8", Offset = "0xAE72D8", VA = "0xAE72D8")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xAE7358", Offset = "0xAE7358", VA = "0xAE7358")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xAE73F0", Offset = "0xAE73F0", VA = "0xAE73F0")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xAE7BB8", Offset = "0xAE7BB8", VA = "0xAE7BB8")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xAE7C38", Offset = "0xAE7C38", VA = "0xAE7C38")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xAE14A4", Offset = "0xAE14A4", VA = "0xAE14A4")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x746768", Offset = "0x746768")]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xAE7CD0", Offset = "0xAE7CD0", VA = "0xAE7CD0")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xAE7D54", Offset = "0xAE7D54", VA = "0xAE7D54")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xAE7DD4", Offset = "0xAE7DD4", VA = "0xAE7DD4")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xAE7E54", Offset = "0xAE7E54", VA = "0xAE7E54")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xAE7ED4", Offset = "0xAE7ED4", VA = "0xAE7ED4")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xAE8938", Offset = "0xAE8938", VA = "0xAE8938")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xAE89B8", Offset = "0xAE89B8", VA = "0xAE89B8")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xAE8E7C", Offset = "0xAE8E7C", VA = "0xAE8E7C")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xAE8D10", Offset = "0xAE8D10", VA = "0xAE8D10")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xAE8EF0", Offset = "0xAE8EF0", VA = "0xAE8EF0")]
		public CAPI()
		{
		}
	}
}
namespace HTC.UnityPlugin.StereoRendering
{
	[Token(Token = "0x2000202")]
	public interface IDeviceParamFactory
	{
		[Token(Token = "0x6000AAB")]
		int GetRenderWidth();

		[Token(Token = "0x6000AAC")]
		int GetRenderHeight();

		[Token(Token = "0x6000AAD")]
		Vector3 GetEyeSeperation(int eye);

		[Token(Token = "0x6000AAE")]
		Quaternion GetEyeLocalRotation(int eye);

		[Token(Token = "0x6000AAF")]
		Matrix4x4 GetProjectionMatrix(int eye, float nearPlane, float farPlane);
	}
	[Token(Token = "0x2000203")]
	public enum HmdType
	{
		[Token(Token = "0x4000DBB")]
		Unsupported,
		[Token(Token = "0x4000DBC")]
		SteamVR,
		[Token(Token = "0x4000DBD")]
		OVR,
		[Token(Token = "0x4000DBE")]
		WaveVR
	}
	[Token(Token = "0x2000204")]
	public class StereoRenderDevice
	{
		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x9453FC", Offset = "0x9453FC", VA = "0x9453FC")]
		public static HmdType GetHmdType()
		{
			return default(HmdType);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x945488", Offset = "0x945488", VA = "0x945488")]
		public static IDeviceParamFactory InitParamFactory(HmdType hmdType)
		{
			return null;
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x9454FC", Offset = "0x9454FC", VA = "0x9454FC")]
		public static bool IsNotUnityNativeSupport(HmdType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x945508", Offset = "0x945508", VA = "0x945508")]
		public StereoRenderDevice()
		{
		}
	}
	[Token(Token = "0x2000205")]
	[DisallowMultipleComponent]
	public class StereoRenderManager : MonoBehaviour
	{
		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static StereoRenderManager instance;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool isApplicationQuitting;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdType hmdType;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IDeviceParamFactory paramFactory;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static GameObject mainCameraParent;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Camera mainCamera;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<StereoRenderer> stereoRendererList;

		[Token(Token = "0x170000EA")]
		public static bool Active
		{
			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x945510", Offset = "0x945510", VA = "0x945510")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EB")]
		public static StereoRenderManager Instance
		{
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x9455A8", Offset = "0x9455A8", VA = "0x9455A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x945614", Offset = "0x945614", VA = "0x945614")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x945968", Offset = "0x945968", VA = "0x945968")]
		private static Camera GetHmdRig()
		{
			return null;
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x945A6C", Offset = "0x945A6C", VA = "0x945A6C")]
		public void InitParamFactory()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x945B00", Offset = "0x945B00", VA = "0x945B00")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x945B6C", Offset = "0x945B6C", VA = "0x945B6C")]
		public void InvokeStereoRenderers(VRRenderEventDetector detector)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x945E6C", Offset = "0x945E6C", VA = "0x945E6C")]
		public void AddToManager(StereoRenderer stereoRenderer)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x945ED4", Offset = "0x945ED4", VA = "0x945ED4")]
		public void RemoveFromManager(StereoRenderer stereoRenderer)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x945F3C", Offset = "0x945F3C", VA = "0x945F3C")]
		public StereoRenderManager()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FF3C", Offset = "0x73FF3C")]
	public class StereoRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform canvasOrigin;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector3 m_canvasOriginWorldPosition;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Vector3 m_canvasOriginWorldRotation;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform anchorTransform;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3 m_anchorWorldPosition;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private Vector3 m_anchorWorldRotation;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Matrix4x4 leftProjMatrix;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Matrix4x4 rightProjMatrix;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool canvasVisible;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		public bool shouldRender;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		public bool useObliqueClip;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		public bool useScissor;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool isUnlit;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject stereoCameraHead;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Camera stereoCameraEye;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture leftEyeTexture;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture rightEyeTexture;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float textureResolutionScale;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material stereoMaterial;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private List<GameObject> ignoreWhenRender;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<int> ignoreObjOriginalLayer;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string ignoreLayerName;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int ignoreLayerNumber;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float reflectionOffset;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Rect fullViewport;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool isMirror;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Matrix4x4 reflectionMat;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Action preRenderListeners;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Action postRenderListeners;

		[Token(Token = "0x170000EC")]
		public Vector3 canvasOriginPos
		{
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x945FB0", Offset = "0x945FB0", VA = "0x945FB0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0x946048", Offset = "0x946048", VA = "0x946048")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public Vector3 canvasOriginEuler
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x946054", Offset = "0x946054", VA = "0x946054")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0x9460EC", Offset = "0x9460EC", VA = "0x9460EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public Quaternion canvasOriginRot
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x9460F8", Offset = "0x9460F8", VA = "0x9460F8")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0x94618C", Offset = "0x94618C", VA = "0x94618C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public Vector3 canvasOriginForward
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x9461CC", Offset = "0x9461CC", VA = "0x9461CC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F0")]
		public Vector3 canvasOriginUp
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x9462B8", Offset = "0x9462B8", VA = "0x9462B8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F1")]
		public Vector3 canvasOriginRight
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x9463A4", Offset = "0x9463A4", VA = "0x9463A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F2")]
		public Vector3 localCanvasOriginPos
		{
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0x946490", Offset = "0x946490", VA = "0x946490")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x9464D0", Offset = "0x9464D0", VA = "0x9464D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public Vector3 localCanvasOriginEuler
		{
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x946534", Offset = "0x946534", VA = "0x946534")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x946650", Offset = "0x946650", VA = "0x946650")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public Quaternion localCanvasOriginRot
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x94676C", Offset = "0x94676C", VA = "0x94676C")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x94685C", Offset = "0x94685C", VA = "0x94685C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public Vector3 anchorPos
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x946964", Offset = "0x946964", VA = "0x946964")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x9469FC", Offset = "0x9469FC", VA = "0x9469FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public Vector3 anchorEuler
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x946A08", Offset = "0x946A08", VA = "0x946A08")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x946AA0", Offset = "0x946AA0", VA = "0x946AA0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public Quaternion anchorRot
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x946AAC", Offset = "0x946AAC", VA = "0x946AAC")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x946B40", Offset = "0x946B40", VA = "0x946B40")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public Vector3 anchorForward
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x946B80", Offset = "0x946B80", VA = "0x946B80")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F9")]
		public Vector3 anchorUp
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x946C6C", Offset = "0x946C6C", VA = "0x946C6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x946D58", Offset = "0x946D58", VA = "0x946D58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x9477C0", Offset = "0x9477C0", VA = "0x9477C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x9471E4", Offset = "0x9471E4", VA = "0x9471E4")]
		private void CreateStereoCameraRig()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x947390", Offset = "0x947390", VA = "0x947390")]
		private void SwapStereoShader()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x9476D0", Offset = "0x9476D0", VA = "0x9476D0")]
		private void CreateRenderTextures(int sceneWidth, int sceneHeight, int aaLevel = 4)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x947898", Offset = "0x947898", VA = "0x947898")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x9478F4", Offset = "0x9478F4", VA = "0x9478F4")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x945C10", Offset = "0x945C10", VA = "0x945C10")]
		public void Render(VRRenderEventDetector detector)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x947998", Offset = "0x947998", VA = "0x947998")]
		public void MoveStereoCameraBasedOnHmdPose(VRRenderEventDetector detector)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x948160", Offset = "0x948160", VA = "0x948160")]
		private void RenderToTwoStereoTextures(VRRenderEventDetector detector)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x947D84", Offset = "0x947D84", VA = "0x947D84")]
		private void RenderToOneStereoTexture(VRRenderEventDetector detector)
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x948854", Offset = "0x948854", VA = "0x948854")]
		private void RenderEye(Vector3 eyeOffset, Quaternion eyeRotation, Matrix4x4 projMat, Matrix4x4 worldToCameraMat, RenderTexture targetTexture, string textureName)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x9485B0", Offset = "0x9485B0", VA = "0x9485B0")]
		public void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 normal)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x9496B0", Offset = "0x9496B0", VA = "0x9496B0")]
		private Vector4 GetCameraSpacePlane(Camera cam, Vector3 pt, Vector3 normal)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x9494CC", Offset = "0x9494CC", VA = "0x9494CC")]
		private Vector4 GetObliqueNearClipPlane()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x948C30", Offset = "0x948C30", VA = "0x948C30")]
		private Rect GetScissorRect(Matrix4x4 mat)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x949210", Offset = "0x949210", VA = "0x949210")]
		private Matrix4x4 GetScissorMatrix(Rect rect)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x949828", Offset = "0x949828", VA = "0x949828")]
		private Vector3 WorldPointToViewport(Matrix4x4 mat, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x949898", Offset = "0x949898", VA = "0x949898")]
		public void SetProjetionMatrices(Matrix4x4 leftMat, Matrix4x4 rightMat)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x9498CC", Offset = "0x9498CC", VA = "0x9498CC")]
		public void AddPreRenderListener(Action listener)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x949950", Offset = "0x949950", VA = "0x949950")]
		public void AddPostRenderListener(Action listener)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x9499D4", Offset = "0x9499D4", VA = "0x9499D4")]
		public void RemovePreRenderListener(Action listener)
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x949A58", Offset = "0x949A58", VA = "0x949A58")]
		public void RemovePostRenderListener(Action listener)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x9471B0", Offset = "0x9471B0", VA = "0x9471B0")]
		public bool IsEditing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x949ADC", Offset = "0x949ADC", VA = "0x949ADC")]
		public void SetUnlit(bool value)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x949AE8", Offset = "0x949AE8", VA = "0x949AE8")]
		public StereoRenderer()
		{
		}
	}
	[Token(Token = "0x2000207")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x73FFC0", Offset = "0x73FFC0")]
	[DisallowMultipleComponent]
	public class VRRenderEventDetector : MonoBehaviour
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera unityCamera;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int eye;

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xA076EC", Offset = "0xA076EC", VA = "0xA076EC")]
		public void Initialize(int e)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xA07754", Offset = "0xA07754", VA = "0xA07754")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xA077CC", Offset = "0xA077CC", VA = "0xA077CC")]
		public VRRenderEventDetector()
		{
		}
	}
}
namespace Neuston
{
	[Token(Token = "0x2000208")]
	public class Fade : MonoBehaviour
	{
		[Token(Token = "0x20003E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741CC4", Offset = "0x741CC4")]
		private sealed class <FadeToCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400113D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400113E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400113F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Fade <>4__this;

			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color color;

			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action finishedCallback;

			[Token(Token = "0x4001143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Color <prevColor>5__2;

			[Token(Token = "0x4001144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <t>5__3;

			[Token(Token = "0x17000191")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012EB")]
				[Address(RVA = "0xA1232C", Offset = "0xA1232C", VA = "0xA1232C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000192")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012ED")]
				[Address(RVA = "0xA12394", Offset = "0xA12394", VA = "0xA12394", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012E8")]
			[Address(RVA = "0xA1207C", Offset = "0xA1207C", VA = "0xA1207C")]
			[DebuggerHidden]
			public <FadeToCoroutine>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60012E9")]
			[Address(RVA = "0xA12114", Offset = "0xA12114", VA = "0xA12114", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EA")]
			[Address(RVA = "0xA12118", Offset = "0xA12118", VA = "0xA12118", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012EC")]
			[Address(RVA = "0xA12334", Offset = "0xA12334", VA = "0xA12334", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741CD4", Offset = "0x741CD4")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TaskCompletionSource<bool> tcs;

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xA120A8", Offset = "0xA120A8", VA = "0xA120A8")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x60012EF")]
			[Address(RVA = "0xA120B8", Offset = "0xA120B8", VA = "0xA120B8")]
			internal void <FadeAsync>b__0()
			{
			}
		}

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fadeGfx;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Fade instance;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer renderer;

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xA11FF4", Offset = "0xA11FF4", VA = "0xA11FF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xA0BE58", Offset = "0xA0BE58", VA = "0xA0BE58")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7467CC", Offset = "0x7467CC")]
		public IEnumerator FadeToCoroutine(Color color, float duration, [Optional] Action finishedCallback)
		{
			return null;
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xA0A62C", Offset = "0xA0A62C", VA = "0xA0A62C")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xA0ADDC", Offset = "0xA0ADDC", VA = "0xA0ADDC")]
		public Task FadeAsync(Color color, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xA120B0", Offset = "0xA120B0", VA = "0xA120B0")]
		public Fade()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x20003E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741CE4", Offset = "0x741CE4")]
		private sealed class <EstimateVelocityCoroutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x17000193")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F3")]
				[Address(RVA = "0xA12C90", Offset = "0xA12C90", VA = "0xA12C90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000194")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F5")]
				[Address(RVA = "0xA12CF8", Offset = "0xA12CF8", VA = "0xA12CF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012F0")]
			[Address(RVA = "0xA12860", Offset = "0xA12860", VA = "0xA12860")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60012F1")]
			[Address(RVA = "0xA128A0", Offset = "0xA128A0", VA = "0xA128A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012F2")]
			[Address(RVA = "0xA128A4", Offset = "0xA128A4", VA = "0xA128A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F4")]
			[Address(RVA = "0xA12C98", Offset = "0xA12C98", VA = "0xA12C98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7442E8", Offset = "0x7442E8")]
		public int linearVelocityAverageFrames;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744320", Offset = "0x744320")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnEnable;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linearVelocitySamples;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xA07C40", Offset = "0xA07C40", VA = "0xA07C40")]
		public void StartEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xA1239C", Offset = "0xA1239C", VA = "0xA1239C")]
		public void StopEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xA08214", Offset = "0xA08214", VA = "0xA08214")]
		public Vector3 GetLinearVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xA1243C", Offset = "0xA1243C", VA = "0xA1243C")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xA12604", Offset = "0xA12604", VA = "0xA12604")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xA127E8", Offset = "0xA127E8", VA = "0xA127E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xA12850", Offset = "0xA12850", VA = "0xA12850")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xA123CC", Offset = "0xA123CC", VA = "0xA123CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746830", Offset = "0x746830")]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xA1288C", Offset = "0xA1288C", VA = "0xA1288C")]
		public VelocityEstimator()
		{
		}
	}
}
namespace EpicToonFX
{
	[Token(Token = "0x200020A")]
	public class ETFXButtonScript : MonoBehaviour
	{
		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ETFXFireProjectile effectScript;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ETFXProjectileScript projectileScript;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x93E4FC", Offset = "0x93E4FC", VA = "0x93E4FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x93E670", Offset = "0x93E670", VA = "0x93E670")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x93E5C8", Offset = "0x93E5C8", VA = "0x93E5C8")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x93E69C", Offset = "0x93E69C", VA = "0x93E69C")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x93E7A8", Offset = "0x93E7A8", VA = "0x93E7A8")]
		public ETFXButtonScript()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class ETFXFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GameObject[] projectiles;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x744368", Offset = "0x744368")]
		public Transform spawnPosition;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ETFXButtonScript selectedProjectileButton;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit hit;

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x93E7B0", Offset = "0x93E7B0", VA = "0x93E7B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x93E820", Offset = "0x93E820", VA = "0x93E820")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x93EC64", Offset = "0x93EC64", VA = "0x93EC64")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x93ECA4", Offset = "0x93ECA4", VA = "0x93ECA4")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x93ECE4", Offset = "0x93ECE4", VA = "0x93ECE4")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x93ECEC", Offset = "0x93ECEC", VA = "0x93ECEC")]
		public ETFXFireProjectile()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class ETFXLoopScript : MonoBehaviour
	{
		[Token(Token = "0x20003E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741CF4", Offset = "0x741CF4")]
		private sealed class <EffectLoop>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ETFXLoopScript <>4__this;

			[Token(Token = "0x400114E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x17000195")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F9")]
				[Address(RVA = "0x93F300", Offset = "0x93F300", VA = "0x93F300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000196")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012FB")]
				[Address(RVA = "0x93F368", Offset = "0x93F368", VA = "0x93F368", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x93F04C", Offset = "0x93F04C", VA = "0x93F04C")]
			[DebuggerHidden]
			public <EffectLoop>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x93F090", Offset = "0x93F090", VA = "0x93F090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012F8")]
			[Address(RVA = "0x93F094", Offset = "0x93F094", VA = "0x93F094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012FA")]
			[Address(RVA = "0x93F308", Offset = "0x93F308", VA = "0x93F308", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7443B0", Offset = "0x7443B0")]
		public bool spawnWithoutLight;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool spawnWithoutSound;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x93EF84", Offset = "0x93EF84", VA = "0x93EF84")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x93EF88", Offset = "0x93EF88", VA = "0x93EF88")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x93EFDC", Offset = "0x93EFDC", VA = "0x93EFDC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746894", Offset = "0x746894")]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x93F078", Offset = "0x93F078", VA = "0x93F078")]
		public ETFXLoopScript()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class ETFXMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x93F370", Offset = "0x93F370", VA = "0x93F370")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x93F44C", Offset = "0x93F44C", VA = "0x93F44C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x93F84C", Offset = "0x93F84C", VA = "0x93F84C")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x93F8FC", Offset = "0x93F8FC", VA = "0x93F8FC")]
		public ETFXMouseOrbit()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class ETFXLightFade : MonoBehaviour
	{
		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7443E8", Offset = "0x7443E8")]
		public float life;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x93ECFC", Offset = "0x93ECFC", VA = "0x93ECFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x93EE08", Offset = "0x93EE08", VA = "0x93EE08")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x93EF68", Offset = "0x93EF68", VA = "0x93EF68")]
		public ETFXLightFade()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class ETFXPitchRandomizer : MonoBehaviour
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float randomPercent;

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x93F918", Offset = "0x93F918", VA = "0x93F918")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x93F9D0", Offset = "0x93F9D0", VA = "0x93F9D0")]
		public ETFXPitchRandomizer()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class ETFXRotation : MonoBehaviour
	{
		[Token(Token = "0x20003E8")]
		public enum spaceEnum
		{
			[Token(Token = "0x4001150")]
			Local,
			[Token(Token = "0x4001151")]
			World
		}

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x744420", Offset = "0x744420")]
		public Vector3 rotateVector;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x93F9E0", Offset = "0x93F9E0", VA = "0x93F9E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x93F9E4", Offset = "0x93F9E4", VA = "0x93F9E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x93FB38", Offset = "0x93FB38", VA = "0x93FB38")]
		public ETFXRotation()
		{
		}
	}
}
namespace CurvedUI
{
	[Token(Token = "0x2000211")]
	public class CurvedUIEventSystem : EventSystem
	{
		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CurvedUIEventSystem instance;

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x95B410", Offset = "0x95B410", VA = "0x95B410", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x95B470", Offset = "0x95B470", VA = "0x95B470", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x95B47C", Offset = "0x95B47C", VA = "0x95B47C")]
		public CurvedUIEventSystem()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public static class CurvedUIExtensionMethods
	{
		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x95B4E4", Offset = "0x95B4E4", VA = "0x95B4E4")]
		public static bool AlmostEqual(this Vector3 a, Vector3 b, double accuracy = 0.01)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x95B5B0", Offset = "0x95B5B0", VA = "0x95B5B0")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x95B5CC", Offset = "0x95B5CC", VA = "0x95B5CC")]
		public static float RemapAndClamp(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x95B678", Offset = "0x95B678", VA = "0x95B678")]
		public static float Remap(this int value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x95B698", Offset = "0x95B698", VA = "0x95B698")]
		public static double Remap(this double value, double from1, double to1, double from2, double to2)
		{
			return default(double);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x95B5F0", Offset = "0x95B5F0", VA = "0x95B5F0")]
		public static float Clamp(this float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x95B6B4", Offset = "0x95B6B4", VA = "0x95B6B4")]
		public static float Clamp(this int value, int min, int max)
		{
			return default(float);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x95B73C", Offset = "0x95B73C", VA = "0x95B73C")]
		public static int Abs(this int value)
		{
			return default(int);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x95B7A4", Offset = "0x95B7A4", VA = "0x95B7A4")]
		public static float Abs(this float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x95B810", Offset = "0x95B810", VA = "0x95B810")]
		public static int ToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x95B880", Offset = "0x95B880", VA = "0x95B880")]
		public static int FloorToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x95B8F0", Offset = "0x95B8F0", VA = "0x95B8F0")]
		public static int CeilToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x95B960", Offset = "0x95B960", VA = "0x95B960")]
		public static Vector3 ModifyX(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x95B998", Offset = "0x95B998", VA = "0x95B998")]
		public static Vector3 ModifyY(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x95B9D0", Offset = "0x95B9D0", VA = "0x95B9D0")]
		public static Vector3 ModifyZ(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x95BA08", Offset = "0x95BA08", VA = "0x95BA08")]
		public static Vector2 ModifyVectorX(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x95BAA8", Offset = "0x95BAA8", VA = "0x95BAA8")]
		public static Vector2 ModifyVectorY(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x95BB48", Offset = "0x95BB48", VA = "0x95BB48")]
		public static void ResetTransform(this Transform trans)
		{
		}

		[Token(Token = "0x6000B31")]
		public static T AddComponentIfMissing<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000B32")]
		public static T AddComponentIfMissing<T>(this Component go) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	public class CurvedUIHandSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject LaserBeam;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x744468", Offset = "0x744468")]
		private bool autoSwitchHands;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x95BC08", Offset = "0x95BC08", VA = "0x95BC08")]
		private void SwitchHandTo(CurvedUIInputModule.Hand newHand)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x95BE50", Offset = "0x95BE50", VA = "0x95BE50")]
		public CurvedUIHandSwitcher()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class CurvedUIInputFieldCaret : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
	{
		[Token(Token = "0x20003E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741D04", Offset = "0x741D04")]
		private sealed class <CaretBlinker>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CurvedUIInputFieldCaret <>4__this;

			[Token(Token = "0x17000197")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012FF")]
				[Address(RVA = "0x95CAC0", Offset = "0x95CAC0", VA = "0x95CAC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000198")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001301")]
				[Address(RVA = "0x95CB28", Offset = "0x95CB28", VA = "0x95CB28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012FC")]
			[Address(RVA = "0x95C678", Offset = "0x95C678", VA = "0x95C678")]
			[DebuggerHidden]
			public <CaretBlinker>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60012FD")]
			[Address(RVA = "0x95C9A4", Offset = "0x95C9A4", VA = "0x95C9A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012FE")]
			[Address(RVA = "0x95C9A8", Offset = "0x95C9A8", VA = "0x95C9A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001300")]
			[Address(RVA = "0x95CAC8", Offset = "0x95CAC8", VA = "0x95CAC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField myField;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform myCaret;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color origCaretColor;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color origSelectionColor;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool selected;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool selectingText;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastCharDist;

		[Token(Token = "0x170000FA")]
		public Color CaretColor
		{
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x95C92C", Offset = "0x95C92C", VA = "0x95C92C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x95C938", Offset = "0x95C938", VA = "0x95C938")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public Color SelectionColor
		{
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0x95C944", Offset = "0x95C944", VA = "0x95C944")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x95C950", Offset = "0x95C950", VA = "0x95C950")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public float CaretBlinkRate
		{
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0x95C95C", Offset = "0x95C95C", VA = "0x95C95C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0x95C978", Offset = "0x95C978", VA = "0x95C978")]
			set
			{
			}
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x95BE60", Offset = "0x95BE60", VA = "0x95BE60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x95BEB8", Offset = "0x95BEB8", VA = "0x95BEB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x95C1F8", Offset = "0x95C1F8", VA = "0x95C1F8", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x95C640", Offset = "0x95C640", VA = "0x95C640", Slot = "5")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x95C5D0", Offset = "0x95C5D0", VA = "0x95C5D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746A38", Offset = "0x746A38")]
		private IEnumerator CaretBlinker()
		{
			return null;
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x95C2B8", Offset = "0x95C2B8", VA = "0x95C2B8")]
		private void CreateCaret()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x95BEC8", Offset = "0x95BEC8", VA = "0x95BEC8")]
		private void UpdateCaret()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x95C6A4", Offset = "0x95C6A4", VA = "0x95C6A4")]
		private Vector2 GetLocalPositionInText(int charNo)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x95C994", Offset = "0x95C994", VA = "0x95C994")]
		public CurvedUIInputFieldCaret()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class CurvedUILaserBeam : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741D14", Offset = "0x741D14")]
		private sealed class <>c
		{
			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<GameObject> <>9__4_0;

			[Token(Token = "0x6001303")]
			[Address(RVA = "0x95CFC4", Offset = "0x95CFC4", VA = "0x95CFC4")]
			public <>c()
			{
			}

			[Token(Token = "0x6001304")]
			[Address(RVA = "0x95CFCC", Offset = "0x95CFCC", VA = "0x95CFCC")]
			internal bool <Update>b__4_0(GameObject x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform LaserBeamTransform;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform LaserBeamDot;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool CollideWithMyLayerOnly;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool hideWhenNotAimingAtCanvas;

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x95CB30", Offset = "0x95CB30", VA = "0x95CB30")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x95CF58", Offset = "0x95CF58", VA = "0x95CF58")]
		public CurvedUILaserBeam()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class CurvedUIPointerEventData : PointerEventData
	{
		[Token(Token = "0x20003EB")]
		public enum ControllerType
		{
			[Token(Token = "0x4001158")]
			NONE = -1,
			[Token(Token = "0x4001159")]
			VIVE
		}

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public GameObject Controller;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Vector2 TouchPadAxis;

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x95D0C0", Offset = "0x95D0C0", VA = "0x95D0C0")]
		public CurvedUIPointerEventData(EventSystem eventSystem)
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class CurvedUIRaycaster : GraphicRaycaster
	{
		[Serializable]
		[Token(Token = "0x20003EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741D24", Offset = "0x741D24")]
		private sealed class <>c
		{
			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<GameObject> <>9__22_0;

			[Token(Token = "0x400115C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<Graphic> <>9__50_0;

			[Token(Token = "0x6001306")]
			[Address(RVA = "0x93220C", Offset = "0x93220C", VA = "0x93220C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001307")]
			[Address(RVA = "0x932214", Offset = "0x932214", VA = "0x932214")]
			internal bool <Update>b__22_0(GameObject obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001308")]
			[Address(RVA = "0x9322D8", Offset = "0x9322D8", VA = "0x9322D8")]
			internal int <GetObjectsHitByRay>b__50_0(Graphic g1, Graphic g2)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool showDebug;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool overrideEventData;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas myCanvas;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cyllinderMidPoint;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<GameObject> objectsUnderPointer;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 lastCanvasPos;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject colliderContainer;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PointerEventData lastFrameEventData;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PointerEventData curEventData;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PointerEventData eventDataToUse;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera cachedWorldCamera;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Ray cachedRay;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Graphic gph;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<GameObject> selectablesUnderGaze;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<GameObject> selectablesUnderGazeLastFrame;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float objectsUnderGazeLastChangeTime;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool gazeClickExecuted;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		private bool pointingAtCanvas;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		private bool pointingAtCanvasLastFrame;

		[Token(Token = "0x170000FD")]
		private Image GazeProgressImage
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x95DD08", Offset = "0x95DD08", VA = "0x95DD08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		public bool PointingAtCanvas
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0x963BC8", Offset = "0x963BC8", VA = "0x963BC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x95D148", Offset = "0x95D148", VA = "0x95D148", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x95D2C0", Offset = "0x95D2C0", VA = "0x95D2C0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x95D7CC", Offset = "0x95D7CC", VA = "0x95D7CC", Slot = "22")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x95DB50", Offset = "0x95DB50", VA = "0x95DB50")]
		private void ProcessGazeTimedClick()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x95DB24", Offset = "0x95DB24", VA = "0x95DB24")]
		private void ResetGazeTimedClick()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x95E304", Offset = "0x95E304", VA = "0x95E304", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x95F17C", Offset = "0x95F17C", VA = "0x95F17C", Slot = "23")]
		public virtual bool RaycastToCyllinderCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x95FA30", Offset = "0x95FA30", VA = "0x95FA30", Slot = "24")]
		public virtual bool RaycastToCyllinderVerticalCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x96014C", Offset = "0x96014C", VA = "0x96014C", Slot = "25")]
		public virtual bool RaycastToRingCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x960700", Offset = "0x960700", VA = "0x960700", Slot = "26")]
		public virtual bool RaycastToSphereCanvas(Ray ray3D, out Vector2 o_canvasPos, bool OutputInCanvasSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x95D2C4", Offset = "0x95D2C4", VA = "0x95D2C4")]
		protected void CreateCollider()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x962828", Offset = "0x962828", VA = "0x962828")]
		private void SetupMeshColliderUsingMesh(Mesh meshie)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x96122C", Offset = "0x96122C", VA = "0x96122C")]
		private GameObject CreateConvexCyllinderCollider(bool vertical = false)
		{
			return null;
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x961EA0", Offset = "0x961EA0", VA = "0x961EA0")]
		private Mesh CreateCyllinderColliderMesh(bool vertical = false)
		{
			return null;
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x9628D8", Offset = "0x9628D8", VA = "0x9628D8")]
		private Mesh CreateSphereColliderMesh()
		{
			return null;
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x95F898", Offset = "0x95F898", VA = "0x95F898")]
		private LayerMask GetLayerMaskForMyLayer()
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x95F8EC", Offset = "0x95F8EC", VA = "0x95F8EC")]
		private float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x963200", Offset = "0x963200", VA = "0x963200")]
		private bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x9632D0", Offset = "0x9632D0", VA = "0x9632D0", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x95ECA4", Offset = "0x95ECA4", VA = "0x95ECA4")]
		protected void UpdateSelectedObjects(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x9632E8", Offset = "0x9632E8", VA = "0x9632E8")]
		protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x963894", Offset = "0x963894", VA = "0x963894")]
		protected static GameObject FindCommonRoot(GameObject g1, GameObject g2)
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x963A3C", Offset = "0x963A3C", VA = "0x963A3C")]
		private bool GetScreenSpacePointByRay(Ray ray, out Vector2 o_positionOnCanvas)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x963BD0", Offset = "0x963BD0", VA = "0x963BD0")]
		public void RebuildCollider()
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x963C40", Offset = "0x963C40", VA = "0x963C40")]
		public List<GameObject> GetObjectsUnderPointer()
		{
			return null;
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x963CB4", Offset = "0x963CB4", VA = "0x963CB4")]
		public List<GameObject> GetObjectsUnderScreenPos(Vector2 screenPos, [Optional] Camera eventCamera)
		{
			return null;
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x963DC4", Offset = "0x963DC4", VA = "0x963DC4")]
		public List<GameObject> GetObjectsHitByRay(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x95DD78", Offset = "0x95DD78", VA = "0x95DD78")]
		public void Click()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x962E9C", Offset = "0x962E9C", VA = "0x962E9C")]
		private void ModifyQuad(List<Vector3> verts, int vertexIndex, Vector2 requiredSize)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x9641E8", Offset = "0x9641E8", VA = "0x9641E8")]
		private Vector3 TesselateQuad(List<Vector3> quad, float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x9643DC", Offset = "0x9643DC", VA = "0x9643DC")]
		public CurvedUIRaycaster()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x740044", Offset = "0x740044")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x740044", Offset = "0x740044")]
	public class CurvedUISettings : MonoBehaviour
	{
		[Token(Token = "0x20003ED")]
		public enum CurvedUIShape
		{
			[Token(Token = "0x400115E")]
			CYLINDER,
			[Token(Token = "0x400115F")]
			RING,
			[Token(Token = "0x4001160")]
			SPHERE,
			[Token(Token = "0x4001161")]
			CYLINDER_VERTICAL
		}

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CurvedUIShape shape;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float quality;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool interactable;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool blocksRaycasts;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		private bool raycastMyLayerOnly;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[SerializeField]
		private bool forceUseBoxCollider;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int angle;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool preserveAspect;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int vertAngle;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float ringFill;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int ringExternalDiamater;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool ringFlipVertical;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int baseCircleSegments;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 savedRectSize;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float savedRadius;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Canvas myCanvas;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x170000FF")]
		private RectTransform RectTransform
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x9323C8", Offset = "0x9323C8", VA = "0x9323C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public int BaseCircleSegments
		{
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x933FE8", Offset = "0x933FE8", VA = "0x933FE8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000101")]
		public int Angle
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x933FF0", Offset = "0x933FF0", VA = "0x933FF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0x933FF8", Offset = "0x933FF8", VA = "0x933FF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public float Quality
		{
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0x93400C", Offset = "0x93400C", VA = "0x93400C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0x934014", Offset = "0x934014", VA = "0x934014")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public CurvedUIShape Shape
		{
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0x934030", Offset = "0x934030", VA = "0x934030")]
			get
			{
				return default(CurvedUIShape);
			}
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x934038", Offset = "0x934038", VA = "0x934038")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public int VerticalAngle
		{
			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x934058", Offset = "0x934058", VA = "0x934058")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x934060", Offset = "0x934060", VA = "0x934060")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public float RingFill
		{
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x934080", Offset = "0x934080", VA = "0x934080")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0x934088", Offset = "0x934088", VA = "0x934088")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public float SavedRadius
		{
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0x932D50", Offset = "0x932D50", VA = "0x932D50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000107")]
		public int RingExternalDiameter
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x9340A4", Offset = "0x9340A4", VA = "0x9340A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x9340AC", Offset = "0x9340AC", VA = "0x9340AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public bool RingFlipVertical
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x9340CC", Offset = "0x9340CC", VA = "0x9340CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x9340D4", Offset = "0x9340D4", VA = "0x9340D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public bool PreserveAspect
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x934100", Offset = "0x934100", VA = "0x934100")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x934108", Offset = "0x934108", VA = "0x934108")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public bool Interactable
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x934134", Offset = "0x934134", VA = "0x934134")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x93413C", Offset = "0x93413C", VA = "0x93413C")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public bool ForceUseBoxCollider
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x934148", Offset = "0x934148", VA = "0x934148")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x934150", Offset = "0x934150", VA = "0x934150")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public bool BlocksRaycasts
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x93415C", Offset = "0x93415C", VA = "0x93415C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0x934164", Offset = "0x934164", VA = "0x934164")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public bool RaycastMyLayerOnly
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0x934250", Offset = "0x934250", VA = "0x934250")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0x934258", Offset = "0x934258", VA = "0x934258")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public bool PointingAtCanvas
		{
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x934320", Offset = "0x934320", VA = "0x934320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010F")]
		public CurvedUIInputModule.CUIControlMethod ControlMethod
		{
			[Token(Token = "0x6000B98")]
			[Address(RVA = "0x9344D4", Offset = "0x9344D4", VA = "0x9344D4")]
			get
			{
				return default(CurvedUIInputModule.CUIControlMethod);
			}
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0x93459C", Offset = "0x93459C", VA = "0x93459C")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public bool GazeUseTimedClick
		{
			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0x9349E4", Offset = "0x9349E4", VA = "0x9349E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0x934B4C", Offset = "0x934B4C", VA = "0x934B4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public float GazeClickTimer
		{
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0x934BC0", Offset = "0x934BC0", VA = "0x934BC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0x934C2C", Offset = "0x934C2C", VA = "0x934C2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public float GazeClickTimerDelay
		{
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0x934D24", Offset = "0x934D24", VA = "0x934D24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x934D90", Offset = "0x934D90", VA = "0x934D90")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public float GazeTimerProgress
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0x934E88", Offset = "0x934E88", VA = "0x934E88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x932330", Offset = "0x932330", VA = "0x932330")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x932474", Offset = "0x932474", VA = "0x932474")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x932770", Offset = "0x932770", VA = "0x932770")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x932820", Offset = "0x932820", VA = "0x932820")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x9328D0", Offset = "0x9328D0", VA = "0x9328D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x932A24", Offset = "0x932A24", VA = "0x932A24")]
		private void SetUIAngle(int newAngle)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x932C20", Offset = "0x932C20", VA = "0x932C20")]
		private Vector3 CanvasToCyllinder(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x932D80", Offset = "0x932D80", VA = "0x932D80")]
		private Vector3 CanvasToCyllinderVertical(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x932EB0", Offset = "0x932EB0", VA = "0x932EB0")]
		private Vector3 CanvasToRing(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x932FE8", Offset = "0x932FE8", VA = "0x932FE8")]
		private Vector3 CanvasToSphere(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x9331F0", Offset = "0x9331F0", VA = "0x9331F0")]
		public void AddEffectToChildren()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x933530", Offset = "0x933530", VA = "0x933530")]
		public Vector3 VertexPositionToCurvedCanvas(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x933660", Offset = "0x933660", VA = "0x933660")]
		public Vector3 CanvasToCurvedCanvas(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x933780", Offset = "0x933780", VA = "0x933780")]
		public Vector3 CanvasToCurvedCanvasNormal(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x933B08", Offset = "0x933B08", VA = "0x933B08")]
		public bool RaycastToCanvasSpace(Ray ray, out Vector2 o_positionOnCanvas)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x9325F4", Offset = "0x9325F4", VA = "0x9325F4")]
		public float GetCyllinderRadiusInCanvasSpace()
		{
			return default(float);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x933CB8", Offset = "0x933CB8", VA = "0x933CB8")]
		public Vector2 GetTesslationSize(bool modifiedByQuality = true)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x933EEC", Offset = "0x933EEC", VA = "0x933EEC")]
		private float GetSegmentsByAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x934264", Offset = "0x934264", VA = "0x934264")]
		public void SetAllChildrenDirty(bool recalculateCurveOnly = false)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x934414", Offset = "0x934414", VA = "0x934414")]
		public void Click()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x93469C", Offset = "0x93469C", VA = "0x93469C")]
		public List<GameObject> GetObjectsUnderPointer()
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x934784", Offset = "0x934784", VA = "0x934784")]
		public List<GameObject> GetObjectsUnderScreenPos(Vector2 pos, [Optional] Camera eventCamera)
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x9348D0", Offset = "0x9348D0", VA = "0x9348D0")]
		public List<GameObject> GetObjectsHitByRay(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x934EF4", Offset = "0x934EF4", VA = "0x934EF4")]
		public CurvedUISettings()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class CurvedUIVertexEffect : BaseMeshEffect
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7445C4", Offset = "0x7445C4")]
		public bool DoNotTesselate;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas myCanvas;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Graphic myGraphic;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text myText;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextMeshProUGUI myTMP;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvedUITMPSubmesh myTMPSubMesh;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_tesselationRequired;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool curvingRequired;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool TransformMisaligned;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Matrix4x4 CanvasToWorld;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Matrix4x4 CanvasToLocal;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Matrix4x4 MyToWorld;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Matrix4x4 MyToLocal;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<UIVertex> m_tesselatedVerts;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<UIVertex> m_curvedVerts;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private List<UIVertex> m_vertsInQuads;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private UIVertex m_ret;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private UIVertex[] m_quad;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float[] m_weights;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 savedPos;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		[HideInInspector]
		private Vector3 savedUp;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		[HideInInspector]
		private Vector2 savedRectSize;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		[HideInInspector]
		private Color savedColor;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		[HideInInspector]
		private Vector2 savedTextUV0;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		[HideInInspector]
		private float savedFill;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private Vector2 _uv0;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private Vector2 _uv1;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Vector3 _pos;

		[Token(Token = "0x17000114")]
		private bool tesselationRequired
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x937190", Offset = "0x937190", VA = "0x937190")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x937198", Offset = "0x937198", VA = "0x937198")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public bool TesselationRequired
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0x939ED4", Offset = "0x939ED4", VA = "0x939ED4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0x939EC8", Offset = "0x939EC8", VA = "0x939EC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public bool CurvingRequired
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0x939EDC", Offset = "0x939EDC", VA = "0x939EDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0x939EE4", Offset = "0x939EE4", VA = "0x939EE4")]
			set
			{
			}
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x9371A4", Offset = "0x9371A4", VA = "0x9371A4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x937250", Offset = "0x937250", VA = "0x937250", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x9374F0", Offset = "0x9374F0", VA = "0x9374F0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x937A78", Offset = "0x937A78", VA = "0x937A78", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x937BF8", Offset = "0x937BF8", VA = "0x937BF8")]
		private void TesselationRequiredCallback()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x937C04", Offset = "0x937C04", VA = "0x937C04")]
		private void FontTextureRebuiltCallback(Font fontie)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x937CA8", Offset = "0x937CA8", VA = "0x937CA8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x938268", Offset = "0x938268", VA = "0x938268", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x935D6C", Offset = "0x935D6C", VA = "0x935D6C")]
		public void ModifyTMPMesh(ref List<UIVertex> vertexList)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x9388E4", Offset = "0x9388E4", VA = "0x9388E4")]
		private bool ShouldModify()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x9389E8", Offset = "0x9389E8", VA = "0x9389E8")]
		private void CheckTextFontMaterial()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x9373F4", Offset = "0x9373F4", VA = "0x9373F4")]
		public CurvedUISettings FindParentSettings(bool forceNew = false)
		{
			return null;
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x938E68", Offset = "0x938E68", VA = "0x938E68")]
		private UIVertex CurveVertex(UIVertex input, float cylinder_angle, float radius, Vector2 canvasSize)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x938C8C", Offset = "0x938C8C", VA = "0x938C8C")]
		private void TesselateGeometry(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x9394A0", Offset = "0x9394A0", VA = "0x9394A0")]
		private void ModifyQuad(List<UIVertex> verts, int vertexIndex, Vector2 requiredSize)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x939240", Offset = "0x939240", VA = "0x939240")]
		private void TrisToQuads(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x939B3C", Offset = "0x939B3C", VA = "0x939B3C")]
		private UIVertex TesselateQuad(float x, float y)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x932C14", Offset = "0x932C14", VA = "0x932C14")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x939EF0", Offset = "0x939EF0", VA = "0x939EF0")]
		public CurvedUIVertexEffect()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class CurvedUIViveController : MonoBehaviour
	{
		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x939FD0", Offset = "0x939FD0", VA = "0x939FD0")]
		public CurvedUIViveController()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public struct ViveInputArgs
	{
		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint controllerIndex;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float buttonPressure;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 touchpadAxis;
	}
	[Token(Token = "0x200021C")]
	public delegate void ViveInputEvent(object sender, ViveInputArgs e);
	[Token(Token = "0x200021D")]
	public delegate void ViveEvent(object sender);
	[Token(Token = "0x200021E")]
	[ExecuteInEditMode]
	public class CurvedUITMP : MonoBehaviour
	{
		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvedUIVertexEffect crvdVE;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProUGUI tmpText;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvedUISettings mySettings;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UIVertex> m_UIVerts;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UIVertex m_tempVertex;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CurvedUITMPSubmesh m_tempSubMsh;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 savedSize;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 savedUp;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 savedPos;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 savedLocalScale;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 savedGlobalScale;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<CurvedUITMPSubmesh> subMeshes;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool Dirty;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool curvingRequired;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		private bool tesselationRequired;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		private bool quitting;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3[] vertices;

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x934F3C", Offset = "0x934F3C", VA = "0x934F3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x934FCC", Offset = "0x934FCC", VA = "0x934FCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x935254", Offset = "0x935254", VA = "0x935254")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x9353A0", Offset = "0x9353A0", VA = "0x9353A0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x9353AC", Offset = "0x9353AC", VA = "0x9353AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x935B4C", Offset = "0x935B4C", VA = "0x935B4C")]
		private void CreateUIVertexList(Mesh mesh)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x936538", Offset = "0x936538", VA = "0x936538")]
		private void GetUIVertexFromMesh(ref UIVertex vert, int i)
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x936020", Offset = "0x936020", VA = "0x936020")]
		private void FillMeshWithUIVertexList(Mesh mesh, List<UIVertex> list)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x935134", Offset = "0x935134", VA = "0x935134")]
		private void FindTMP()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x936174", Offset = "0x936174", VA = "0x936174")]
		private void FindSubmeshes()
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x935844", Offset = "0x935844", VA = "0x935844")]
		private bool ShouldTesselate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x936588", Offset = "0x936588", VA = "0x936588")]
		private void TMPTextChangedCallback(object obj)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x9365A4", Offset = "0x9365A4", VA = "0x9365A4")]
		private void TesselationRequiredCallback()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x9365B0", Offset = "0x9365B0", VA = "0x9365B0")]
		public CurvedUITMP()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class CurvedUITMPInputFieldCaret : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
	{
		[Token(Token = "0x20003EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x741D34", Offset = "0x741D34")]
		private sealed class <CaretBlinker>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CurvedUITMPInputFieldCaret <>4__this;

			[Token(Token = "0x17000199")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600130C")]
				[Address(RVA = "0x937118", Offset = "0x937118", VA = "0x937118", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600130E")]
				[Address(RVA = "0x937180", Offset = "0x937180", VA = "0x937180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001309")]
			[Address(RVA = "0x936E6C", Offset = "0x936E6C", VA = "0x936E6C")]
			[DebuggerHidden]
			public <CaretBlinker>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600130A")]
			[Address(RVA = "0x936FFC", Offset = "0x936FFC", VA = "0x936FFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600130B")]
			[Address(RVA = "0x937000", Offset = "0x937000", VA = "0x937000", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600130D")]
			[Address(RVA = "0x937120", Offset = "0x937120", VA = "0x937120", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_InputField myField;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform myCaret;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color origCaretColor;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color origSelectionColor;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool selected;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool selectingText;

		[Token(Token = "0x17000117")]
		public Color CaretColor
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x936F8C", Offset = "0x936F8C", VA = "0x936F8C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x936F98", Offset = "0x936F98", VA = "0x936F98")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public Color SelectionColor
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x936FA4", Offset = "0x936FA4", VA = "0x936FA4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x936FB0", Offset = "0x936FB0", VA = "0x936FB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public float CaretBlinkRate
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x936FBC", Offset = "0x936FBC", VA = "0x936FBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0x936FD8", Offset = "0x936FD8", VA = "0x936FD8")]
			set
			{
			}
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x936648", Offset = "0x936648", VA = "0x936648")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x9366A0", Offset = "0x9366A0", VA = "0x9366A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x9369CC", Offset = "0x9369CC", VA = "0x9369CC", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x936E34", Offset = "0x936E34", VA = "0x936E34", Slot = "5")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x936DC4", Offset = "0x936DC4", VA = "0x936DC4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x746A9C", Offset = "0x746A9C")]
		private IEnumerator CaretBlinker()
		{
			return null;
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x936A8C", Offset = "0x936A8C", VA = "0x936A8C")]
		private void CreateCaret()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x9366B0", Offset = "0x9366B0", VA = "0x9366B0")]
		private void UpdateCaret()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x936E98", Offset = "0x936E98", VA = "0x936E98")]
		private Vector2 GetLocalPositionInText(int charNo)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x936FF4", Offset = "0x936FF4", VA = "0x936FF4")]
		public CurvedUITMPInputFieldCaret()
		{
		}
	}
	[Token(Token = "0x2000220")]
	[ExecuteInEditMode]
	public class CurvedUITMPSubmesh : MonoBehaviour
	{
		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VertexHelper vh;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh straightMesh;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh curvedMesh;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvedUIVertexEffect crvdVE;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TMP_SubMeshUI TMPsub;

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x936280", Offset = "0x936280", VA = "0x936280")]
		public void UpdateSubmesh(bool tesselate, bool curve)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x937188", Offset = "0x937188", VA = "0x937188")]
		public CurvedUITMPSubmesh()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7400EC", Offset = "0x7400EC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7400EC", Offset = "0x7400EC")]
	public class OptionalDependencyAttribute : Attribute
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string dependentClass;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string define;

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x939FD8", Offset = "0x939FD8", VA = "0x939FD8")]
		public OptionalDependencyAttribute(string dependentClass, string define)
		{
		}
	}
}
