using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using ANT_Managed_Library;
using BeautifulDissolves;
using BeautifulTransitions.Scripts.Helper;
using BeautifulTransitions.Scripts.Transitions.Components;
using BeautifulTransitions.Scripts.Transitions.Components.Camera;
using BeautifulTransitions.Scripts.Transitions.Components.Camera.AbstractClasses;
using BeautifulTransitions.Scripts.Transitions.Components.GameObject.AbstractClasses;
using BeautifulTransitions.Scripts.Transitions.Components.Screen;
using BeautifulTransitions.Scripts.Transitions.Components.Screen.AbstractClasses;
using BeautifulTransitions.Scripts.Transitions.TransitionSteps;
using BeautifulTransitions.Scripts.Transitions.TransitionSteps.AbstractClasses;
using BeautifyEffect;
using BezierSolution;
using BlueprintReality.Text;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using DigitalRuby.ThunderAndLightning;
using Il2CppDummyDll;
using Microsoft.MixedReality.Toolkit.Rendering;
using MirzaBeig.Scripting.Effects;
using NAudio.Wave;
using Oculus.Platform;
using Oculus.Platform.Models;
using RhythmTool;
using RootMotion.FinalIK;
using SimpleJSON;
using TMPro;
using TriangleNet.Geometry;
using TriangleNet.Logging;
using TriangleNet.Meshing;
using TriangleNet.Meshing.Data;
using TriangleNet.Topology;
using UltimateGameTools.MeshSimplifier;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.UI;
using UnityEngine.Localization;
using UnityEngine.Localization.Components;
using UnityEngine.Localization.Settings;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.UI.Extensions.Tweens;
using UnityStandardAssets.Utility;
using ffmpegaudioimport;
using powerbeatsvr;
using powerbeatsvr.generator.v10;
using powerbeatsvr.generator.v20;

[assembly: AssemblyVersion("1.0.0.0")]
[Token(Token = "0x2000002")]
public class BeautifyDoNotChange : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0xAE21C0", Offset = "0xAE21C0", VA = "0xAE21C0")]
	public BeautifyDoNotChange()
	{
	}
}
[Token(Token = "0x2000003")]
public class HrmFaker : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI hrmText;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI caloriesText;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int hrmStart;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float hrmRaiseSpeed;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float caloriesStart;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float caloriesSpeed;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int asteroidNr;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private Vector3 asteroidStart;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector3 asteroidEnd;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool fakeIsRunning;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float hrm;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float calories;

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xAE21C8", Offset = "0xAE21C8", VA = "0xAE21C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xAE2388", Offset = "0xAE2388", VA = "0xAE2388")]
	private void Update()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xAE25FC", Offset = "0xAE25FC", VA = "0xAE25FC")]
	private void StartFakeInternal()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xAE261C", Offset = "0xAE261C", VA = "0xAE261C")]
	public void StartFake()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xAE26C0", Offset = "0xAE26C0", VA = "0xAE26C0")]
	public HrmFaker()
	{
	}
}
[Token(Token = "0x2000004")]
public class DynamicSkyLite : MonoBehaviour
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ssgUvRotateSpeed;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ssgUvRotateDistance;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform player;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string HelpURL;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string ReportAProblem;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string Patrons;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector2 ssgVector;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform tr;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xAE26C8", Offset = "0xAE26C8", VA = "0xAE26C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xAE2730", Offset = "0xAE2730", VA = "0xAE2730")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xAE28D0", Offset = "0xAE28D0", VA = "0xAE28D0")]
	public DynamicSkyLite()
	{
	}
}
[Token(Token = "0x2000005")]
public class FPSCounter : MonoBehaviour
{
	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int frameUpdate;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int highestPossibleFPS;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float graphUpdate;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color graphColor;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string HelpURL;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string ReportAProblem;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string Patrons;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject counter;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject graph;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform graphTr;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Text counterText;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float ofsetX;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int curCount;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int lineCount;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static WaitForSeconds stGraphUpdate;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameObject[] stLines;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int stNumLines;

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xAE2980", Offset = "0xAE2980", VA = "0xAE2980")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xAE2F78", Offset = "0xAE2F78", VA = "0xAE2F78")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xAE300C", Offset = "0xAE300C", VA = "0xAE300C")]
	private void Update()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xAE2F98", Offset = "0xAE2F98", VA = "0xAE2F98")]
	private IEnumerator DrawGraph()
	{
		return null;
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xAE2984", Offset = "0xAE2984", VA = "0xAE2984")]
	private void CreateCounter()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xAE38F0", Offset = "0xAE38F0", VA = "0xAE38F0")]
	private static GameObject GiveLine()
	{
		return null;
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xAE39BC", Offset = "0xAE39BC", VA = "0xAE39BC")]
	public FPSCounter()
	{
	}
}
[Token(Token = "0x2000007")]
public static class StFPS
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<float> fpsBuffer;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float fpsB;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Vector3Int fps;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xAE334C", Offset = "0xAE334C", VA = "0xAE334C")]
	public static Vector3Int Counter(int frameUpdate, float deltaTime)
	{
		return default(Vector3Int);
	}
}
[Token(Token = "0x2000008")]
[ExecuteInEditMode]
public class Water : MonoBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UvRotateSpeed;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float UvRotateDistance;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float UvBumpRotateSpeed;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float UvBumpRotateDistance;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool depthTextureModeOn;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string HelpURL;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string ReportAProblem;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string Patrons;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 lwVector;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2 lwNVector;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xAE3FFC", Offset = "0xAE3FFC", VA = "0xAE3FFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xAE4058", Offset = "0xAE4058", VA = "0xAE4058")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xAE408C", Offset = "0xAE408C", VA = "0xAE408C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xAE42D4", Offset = "0xAE42D4", VA = "0xAE42D4")]
	public Water()
	{
	}
}
[Token(Token = "0x2000009")]
public class Shark : MonoBehaviour
{
	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float walkZone;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform camRig;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool debug;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float huntingZone;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask layerFlock;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material sharkMaterial;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform thisTransform;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 vel;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 velCam;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 target;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 targetCurent;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 targetRandom;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 targetFlock;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float startYpos;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float huntTime;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float huntSpeed;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float speedSh;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float acselSh;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool hunting;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static WaitForSeconds delay0;

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xAE4390", Offset = "0xAE4390", VA = "0xAE4390")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xAE4468", Offset = "0xAE4468", VA = "0xAE4468")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xAE4490", Offset = "0xAE4490", VA = "0xAE4490")]
	private void Hunting()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xAE471C", Offset = "0xAE471C", VA = "0xAE471C")]
	private void Move()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xAE48BC", Offset = "0xAE48BC", VA = "0xAE48BC")]
	private void CameraRig()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xAE43F4", Offset = "0xAE43F4", VA = "0xAE43F4")]
	private IEnumerator RandomVector()
	{
		return null;
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xAE48F0", Offset = "0xAE48F0", VA = "0xAE48F0")]
	private void DebugPath()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xAE49E4", Offset = "0xAE49E4", VA = "0xAE49E4")]
	public Shark()
	{
	}
}
[Token(Token = "0x200000B")]
public class SlowMo : MonoBehaviour
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource[] audios;

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xAE4B94", Offset = "0xAE4B94", VA = "0xAE4B94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xAE4BA0", Offset = "0xAE4BA0", VA = "0xAE4BA0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xAE4CA0", Offset = "0xAE4CA0", VA = "0xAE4CA0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xAE4CAC", Offset = "0xAE4CAC", VA = "0xAE4CAC")]
	public SlowMo()
	{
	}
}
[Token(Token = "0x200000C")]
public class TDControl : MonoBehaviour
{
	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotationSpeed;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 mouseVerticaleClamp;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float smoothMouse;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool liftOn;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector2 liftClamp;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float smoothLift;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform camTransform;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 camClamp;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float smoothCam;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform tr;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 rotationStart;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 positionStart;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 cameraStart;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 velocity;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 target;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float mouseX;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float mouseY;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float upCh;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float upChCur;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float upChVel;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float camhVel;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float camCh;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float camChCur;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xAE4CB4", Offset = "0xAE4CB4", VA = "0xAE4CB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xAE4D34", Offset = "0xAE4D34", VA = "0xAE4D34")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xAE4D64", Offset = "0xAE4D64", VA = "0xAE4D64")]
	private void Rotation()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xAE4FEC", Offset = "0xAE4FEC", VA = "0xAE4FEC")]
	private void Lift()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xAE4F38", Offset = "0xAE4F38", VA = "0xAE4F38")]
	private void CameraTransform()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xAE50E0", Offset = "0xAE50E0", VA = "0xAE50E0")]
	public TDControl()
	{
	}
}
[Token(Token = "0x200000D")]
public class Underwater : MonoBehaviour
{
	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float waterLevel;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject underwater;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer horizenDown;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material horizenDownMat1;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material horizenDownMat2;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform thisTransform;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xAE5120", Offset = "0xAE5120", VA = "0xAE5120")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xAE517C", Offset = "0xAE517C", VA = "0xAE517C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xAE5224", Offset = "0xAE5224", VA = "0xAE5224")]
	public Underwater()
	{
	}
}
[Token(Token = "0x200000E")]
public class NVBoids : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 behavioralCh;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool debug;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int flockNum;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int fragmentedFlock;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fragmentedFlockYLimit;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float migrationFrequency;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float posChangeFrequency;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float smoothChFrequency;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject birdPref;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int birdsNum;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float birdSpeed;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int fragmentedBirds;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float fragmentedBirdsYLimit;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float soaring;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float verticalWawe;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool rotationClamp;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float rotationClampValue;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector2 scaleRandom;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool danger;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float dangerRadius;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float dangerSpeed;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float dangerSoaring;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public LayerMask dangerLayer;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string HelpURL;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string ReportAProblem;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public string Patrons;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform thisTransform;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform dangerTransform;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int dangerBird;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform[] birdsTransform;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform[] flocksTransform;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3[] rdTargetPos;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3[] flockPos;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3[] velFlocks;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float[] birdsSpeed;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float[] birdsSpeedCur;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float[] spVelocity;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int[] curentFlock;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float dangerSpeedCh;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float dangerSoaringCh;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float timeTime;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static WaitForSeconds delay0;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xAE5234", Offset = "0xAE5234", VA = "0xAE5234")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xAE5A54", Offset = "0xAE5A54", VA = "0xAE5A54")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xAE5A6C", Offset = "0xAE5A6C", VA = "0xAE5A6C")]
	private void FlocksMove()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xAE5BAC", Offset = "0xAE5BAC", VA = "0xAE5BAC")]
	private void BirdsMove()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xAE59E0", Offset = "0xAE59E0", VA = "0xAE59E0")]
	private IEnumerator Danger()
	{
		return null;
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xAE596C", Offset = "0xAE596C", VA = "0xAE596C")]
	private IEnumerator BehavioralChange()
	{
		return null;
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xAE5298", Offset = "0xAE5298", VA = "0xAE5298")]
	private void CreateFlock()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xAE55B4", Offset = "0xAE55B4", VA = "0xAE55B4")]
	private void CreateBird()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xAE5FAC", Offset = "0xAE5FAC", VA = "0xAE5FAC")]
	private static Quaternion BirdsRotationClamp(Quaternion rotationCur, float rotationClampValue)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xAE6080", Offset = "0xAE6080", VA = "0xAE6080")]
	public NVBoids()
	{
	}
}
[Token(Token = "0x2000011")]
public class AntChannel : MonoBehaviour
{
	[Token(Token = "0x2000012")]
	public delegate void OnReceiveData(byte[] data);

	[Token(Token = "0x2000013")]
	public delegate void OnChannelResponse(ANT_Response response);

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ANT_Device device;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ANT_Channel channel;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public byte[] txBuffer;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool broadcasting;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Queue<byte[]> RXQueue;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Queue<ANT_Response> messageQueue;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ANT_ReferenceLibrary.ChannelType channelType;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public byte userChannel;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private ushort deviceNum;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private byte deviceType;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private byte transType;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private byte radioFreq;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ushort channelPeriod;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool pairing;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	private bool isBackgroundScan;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool hideRXFAIL;

	[Token(Token = "0x14000001")]
	public event OnReceiveData onReceiveData
	{
		[Token(Token = "0x600004F")]
		[Address(RVA = "0xAE66A0", Offset = "0xAE66A0", VA = "0xAE66A0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000050")]
		[Address(RVA = "0xAE673C", Offset = "0xAE673C", VA = "0xAE673C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event OnChannelResponse onChannelResponse
	{
		[Token(Token = "0x6000051")]
		[Address(RVA = "0xAE67D8", Offset = "0xAE67D8", VA = "0xAE67D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000052")]
		[Address(RVA = "0xAE6874", Offset = "0xAE6874", VA = "0xAE6874")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xAE6910", Offset = "0xAE6910", VA = "0xAE6910")]
	private void Update()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xAE69FC", Offset = "0xAE69FC", VA = "0xAE69FC")]
	public void ConfigureAnt(ANT_ReferenceLibrary.ChannelType channelType, byte userChannel, ushort deviceNum, byte deviceType, byte transType, byte radioFreq, ushort channelPeriod, bool pairing, int USBNum)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xAE6DC4", Offset = "0xAE6DC4", VA = "0xAE6DC4")]
	public void ConfigureScan(byte userChannel, ushort USBNum)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xAE7028", Offset = "0xAE7028", VA = "0xAE7028")]
	public void ConfigureContinuousScan(ANT_ReferenceLibrary.ChannelType channelType, byte radioFreq, ushort USBNum)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xAE72A8", Offset = "0xAE72A8", VA = "0xAE72A8")]
	public void Close()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xAE73CC", Offset = "0xAE73CC", VA = "0xAE73CC")]
	public void PauseChannel()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xAE73D4", Offset = "0xAE73D4", VA = "0xAE73D4")]
	public void ReOpen()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xAE7450", Offset = "0xAE7450", VA = "0xAE7450")]
	public void ReOpen(ANT_Device device)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xAE74F4", Offset = "0xAE74F4", VA = "0xAE74F4")]
	public void sendAcknowledgedData(byte[] data)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xAE7510", Offset = "0xAE7510", VA = "0xAE7510")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xAE7A38", Offset = "0xAE7A38", VA = "0xAE7A38")]
	public AntChannel()
	{
	}
}
[Token(Token = "0x2000014")]
public class SerialError
{
	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ANT_Device sender;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ANT_Device.serialErrorCode error;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isCritical;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xAE7CE4", Offset = "0xAE7CE4", VA = "0xAE7CE4")]
	public SerialError(ANT_Device sender, ANT_Device.serialErrorCode error, bool isCritical)
	{
	}
}
[Token(Token = "0x2000015")]
public class AntManager : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	public delegate void OnDeviceResponse(ANT_Response response);

	[Token(Token = "0x2000017")]
	public delegate void OnSerialError(SerialError error);

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AntManager _instance;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int lastChannel;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly byte[] NETWORK_KEY;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ANT_Device[] devices;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Queue<ANT_Response> messageQueue;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Queue<SerialError> errorQueue;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AntChannel> channelList;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool[,] channelIDUsed;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int nScanRequest;

	[Token(Token = "0x17000009")]
	public static AntManager Instance
	{
		[Token(Token = "0x6000063")]
		[Address(RVA = "0xAE6CA8", Offset = "0xAE6CA8", VA = "0xAE6CA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public ANT_Device device
	{
		[Token(Token = "0x6000064")]
		[Address(RVA = "0xAE7D30", Offset = "0xAE7D30", VA = "0xAE7D30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000003")]
	public event OnDeviceResponse onDeviceResponse
	{
		[Token(Token = "0x6000065")]
		[Address(RVA = "0xAE7D58", Offset = "0xAE7D58", VA = "0xAE7D58")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000066")]
		[Address(RVA = "0xAE7DF4", Offset = "0xAE7DF4", VA = "0xAE7DF4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event OnSerialError onSerialError
	{
		[Token(Token = "0x6000067")]
		[Address(RVA = "0xAE7E90", Offset = "0xAE7E90", VA = "0xAE7E90")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000068")]
		[Address(RVA = "0xAE7F2C", Offset = "0xAE7F2C", VA = "0xAE7F2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xAE7FC8", Offset = "0xAE7FC8", VA = "0xAE7FC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xAE8098", Offset = "0xAE8098", VA = "0xAE8098")]
	private void Update()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xAE8188", Offset = "0xAE8188", VA = "0xAE8188")]
	public void Init(byte USBDeviceNum = 0)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xAE8588", Offset = "0xAE8588", VA = "0xAE8588")]
	public void Reconnect(ANT_Device previousDevice)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xAE86E4", Offset = "0xAE86E4", VA = "0xAE86E4")]
	public AntChannel OpenChannel(ANT_ReferenceLibrary.ChannelType channelType, byte userChannel, ushort deviceNum, byte deviceType, byte transType, byte radioFreq, ushort channelPeriod, bool pairing, int USBNum = 0)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xAE887C", Offset = "0xAE887C", VA = "0xAE887C")]
	public AntChannel OpenBackgroundScanChannel(byte userChannel, byte USBDeviceNum = 0)
	{
		return null;
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xAE8A18", Offset = "0xAE8A18", VA = "0xAE8A18")]
	public AntChannel OpenContinuousScanChannel(byte radioFreq, byte USBDeviceNum = 0)
	{
		return null;
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xAE8A9C", Offset = "0xAE8A9C", VA = "0xAE8A9C")]
	public void CloseBackgroundScanChannel()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xAE8AEC", Offset = "0xAE8AEC", VA = "0xAE8AEC")]
	private void CloseBackgroundScan()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xAE8B94", Offset = "0xAE8B94", VA = "0xAE8B94")]
	public byte GetFreeChannelID(int USBNum = 0)
	{
		return default(byte);
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xAE8C68", Offset = "0xAE8C68", VA = "0xAE8C68")]
	private void DeviceResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xAE8CDC", Offset = "0xAE8CDC", VA = "0xAE8CDC")]
	private void SerialErrorHandler(ANT_Device sender, ANT_Device.serialErrorCode error, bool isCritical)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xAE8DB4", Offset = "0xAE8DB4", VA = "0xAE8DB4")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xAE8E18", Offset = "0xAE8E18", VA = "0xAE8E18")]
	public AntManager()
	{
	}
}
[Token(Token = "0x2000018")]
public class AntDevice
{
	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public byte deviceType;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public byte transType;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int period;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int deviceNumber;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int radiofreq;

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xAE91CC", Offset = "0xAE91CC", VA = "0xAE91CC")]
	public AntDevice()
	{
	}
}
[Token(Token = "0x2000019")]
public class CadenceDisplay : MonoBehaviour
{
	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wheelCircumference;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useAndroidUI;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool skipPreferredSearch;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int cadence;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AntChannel deviceChannel;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int stopRevCounter_cadence;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int prev_measTime_cadence;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int prev_revCount_cadence;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int deviceID;

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xAE91D4", Offset = "0xAE91D4", VA = "0xAE91D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xAE91E4", Offset = "0xAE91E4", VA = "0xAE91E4")]
	public void StartScan()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xAE9804", Offset = "0xAE9804", VA = "0xAE9804")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xAE9A3C", Offset = "0xAE9A3C", VA = "0xAE9A3C")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xAE9B4C", Offset = "0xAE9B4C", VA = "0xAE9B4C")]
	private void ANTPLUG_Receive_calculatedCadence(string s)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xAE9B84", Offset = "0xAE9B84", VA = "0xAE9B84")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xAE9F08", Offset = "0xAE9F08", VA = "0xAE9F08")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xAEA078", Offset = "0xAEA078", VA = "0xAEA078")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xAEA124", Offset = "0xAEA124", VA = "0xAEA124")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xAEA128", Offset = "0xAEA128", VA = "0xAEA128")]
	public CadenceDisplay()
	{
	}
}
[Token(Token = "0x200001A")]
public class TrainerCapabilities
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int maximumResistance;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool basicResistanceNodeSupport;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool targetPowerModeSupport;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool simulationModeSupport;

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xAEA150", Offset = "0xAEA150", VA = "0xAEA150")]
	public TrainerCapabilities()
	{
	}
}
[Token(Token = "0x200001B")]
public class CommandStatus
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int lastReceivedCommandId;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int status;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int lastReceivedSequenceNumber;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public byte byte_4;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public byte byte_5;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public byte byte_6;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public byte byte_7;

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xAEA158", Offset = "0xAEA158", VA = "0xAEA158")]
	public CommandStatus()
	{
	}
}
[Token(Token = "0x200001C")]
public class UserConfiguration
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float bicycleWeight;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float userWeight;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xAEA160", Offset = "0xAEA160", VA = "0xAEA160")]
	public UserConfiguration()
	{
	}
}
[Token(Token = "0x200001D")]
public class FitnessEquipmentDisplay : MonoBehaviour
{
	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useAndroidUI;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool skipPreferredSearch;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float elapsedTime;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int heartRate;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int distanceTraveled;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int instantaneousPower;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int cadence;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TrainerCapabilities trainerCapabilities;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AntChannel deviceChannel;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private byte[] pageToSend;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool request_page_54;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool request_page_55;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool request_page_71;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int deviceID;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int prevDistance;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float prevTime;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool firstDistanceInfo;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool firstTimeInfo;

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xAEA168", Offset = "0xAEA168", VA = "0xAEA168")]
	private void Start()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xAEA178", Offset = "0xAEA178", VA = "0xAEA178")]
	public void StartScan()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xAEA6C8", Offset = "0xAEA6C8", VA = "0xAEA6C8")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xAEA900", Offset = "0xAEA900", VA = "0xAEA900")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xAEAA10", Offset = "0xAEAA10", VA = "0xAEAA10")]
	private void ANTPLUG_Receive_instantaneousHeartRate(string s)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xAEAA48", Offset = "0xAEAA48", VA = "0xAEAA48")]
	private void ANTPLUG_Receive_elapsedTime(string s)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xAEAA68", Offset = "0xAEAA68", VA = "0xAEAA68")]
	private void ANTPLUG_Receive_instantaneousSpeed(string s)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xAEAA94", Offset = "0xAEAA94", VA = "0xAEAA94")]
	private void ANTPLUG_Receive_cumulativeDistance(string s)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xAEAACC", Offset = "0xAEAACC", VA = "0xAEAACC")]
	private void ANTPLUG_Receive_trainer_instantaneousPower(string s)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xAEAB04", Offset = "0xAEAB04", VA = "0xAEAB04")]
	private void ANTPLUG_Receive_trainer_instantaneousCadence(string s)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xAEAB3C", Offset = "0xAEAB3C", VA = "0xAEAB3C")]
	private void ANTPLUG_Receive_trainer_capabilities(string jsonstring)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xAEACF4", Offset = "0xAEACF4", VA = "0xAEACF4")]
	private void ANTPLUG_Receive_Trainer_commandStatus(string jsonstring)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xAEAFC4", Offset = "0xAEAFC4", VA = "0xAEAFC4")]
	private void ANTPLUG_Receive_userConfiguration(string jsonstring)
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xAEB10C", Offset = "0xAEB10C", VA = "0xAEB10C")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xAEB490", Offset = "0xAEB490", VA = "0xAEB490")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xAEB600", Offset = "0xAEB600", VA = "0xAEB600")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xAEAD5C", Offset = "0xAEAD5C", VA = "0xAEAD5C")]
	private static void ReadCommandStatus(CommandStatus status)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xAEB02C", Offset = "0xAEB02C", VA = "0xAEB02C")]
	private static void ReadUserConFig(UserConfiguration config)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xAEBAD4", Offset = "0xAEBAD4", VA = "0xAEBAD4")]
	public void SetTrainerResistance(int resistance)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xAEBEA0", Offset = "0xAEBEA0", VA = "0xAEBEA0")]
	public void SetTrainerTargetPower(int targetpower)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xAEC26C", Offset = "0xAEC26C", VA = "0xAEC26C")]
	public void SetTrainerSlope(int slope)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xAEC650", Offset = "0xAEC650", VA = "0xAEC650")]
	public void SetTrainerUserConfiguration(float bikeWeight, float userWeight)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xAECA84", Offset = "0xAECA84", VA = "0xAECA84")]
	public void RequestCommandStatus()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xAECE18", Offset = "0xAECE18", VA = "0xAECE18")]
	public void RequestTrainerCapabilities()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xAED1AC", Offset = "0xAED1AC", VA = "0xAED1AC")]
	public void RequestUserConfig()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xAED540", Offset = "0xAED540", VA = "0xAED540")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xAED594", Offset = "0xAED594", VA = "0xAED594")]
	public FitnessEquipmentDisplay()
	{
	}
}
[Token(Token = "0x200001E")]
public class HeartRateDisplay : MonoBehaviour
{
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useAndroidUI;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool skipPreferredSearch;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float heartRate;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AntChannel deviceChannel;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int deviceID;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xAED61C", Offset = "0xAED61C", VA = "0xAED61C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xAED62C", Offset = "0xAED62C", VA = "0xAED62C")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xAEDB7C", Offset = "0xAEDB7C", VA = "0xAEDB7C")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xAEDDD4", Offset = "0xAEDDD4", VA = "0xAEDDD4")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xAEDF30", Offset = "0xAEDF30", VA = "0xAEDF30")]
	private void ANTPLUG_Receive_computedHeartRate(string s)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xAEDF70", Offset = "0xAEDF70", VA = "0xAEDF70")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xAEE2F4", Offset = "0xAEE2F4", VA = "0xAEE2F4")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xAEE464", Offset = "0xAEE464", VA = "0xAEE464")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xAEE494", Offset = "0xAEE494", VA = "0xAEE494")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xAEE498", Offset = "0xAEE498", VA = "0xAEE498")]
	public HeartRateDisplay()
	{
	}
}
[Token(Token = "0x200001F")]
public class MultipleDeviceSearch : MonoBehaviour
{
	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool speedCadence;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool cadence;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool hr;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool speed;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool power;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool fec;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool podometer;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<int> foundSpeedCadenceIDList;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<int> foundCadenceIDList;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<int> foundHrIDList;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<int> foundSpeedIDList;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<int> foundPowerIDList;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<int> foundFecIDList;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text debugText;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SpeedCadenceDisplay spcadDisplay;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xAEE4B4", Offset = "0xAEE4B4", VA = "0xAEE4B4")]
	public void Start()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xAEE4B8", Offset = "0xAEE4B8", VA = "0xAEE4B8")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xAEEC2C", Offset = "0xAEEC2C", VA = "0xAEEC2C")]
	private void ANTPLUG_foundSpeedCadence(string s)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xAEF3E0", Offset = "0xAEF3E0", VA = "0xAEF3E0")]
	private void ANTPLUG_foundCadence(string s)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xAEF54C", Offset = "0xAEF54C", VA = "0xAEF54C")]
	private void ANTPLUG_foundHr(string s)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xAEF6B8", Offset = "0xAEF6B8", VA = "0xAEF6B8")]
	private void ANTPLUG_foundSpeed(string s)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xAEF824", Offset = "0xAEF824", VA = "0xAEF824")]
	private void ANTPLUG_foundPower(string s)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xAEF978", Offset = "0xAEF978", VA = "0xAEF978")]
	private void ANTPLUG_foundFec(string s)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xAEFAE4", Offset = "0xAEFAE4", VA = "0xAEFAE4")]
	public MultipleDeviceSearch()
	{
	}
}
[Token(Token = "0x2000020")]
public class PowerMeterDisplay : MonoBehaviour
{
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useAndroidUI;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool skipPreferredSearch;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int instantaneousPower;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int instantaneousCadence;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AntChannel deviceChannel;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int deviceID;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private byte[] pageToSend;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int update_event_count;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int sameEventCounter;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xAEFAEC", Offset = "0xAEFAEC", VA = "0xAEFAEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xAEFAFC", Offset = "0xAEFAFC", VA = "0xAEFAFC")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xAF004C", Offset = "0xAF004C", VA = "0xAF004C")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xAF0284", Offset = "0xAF0284", VA = "0xAF0284")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xAF0394", Offset = "0xAF0394", VA = "0xAF0394")]
	private void ANTPLUG_Receive_calculatedPower(string s)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xAF03CC", Offset = "0xAF03CC", VA = "0xAF03CC")]
	private void ANTPLUG_Receive_calculatedCadence(string s)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xAF0404", Offset = "0xAF0404", VA = "0xAF0404")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xAF0788", Offset = "0xAF0788", VA = "0xAF0788")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xAF08F8", Offset = "0xAF08F8", VA = "0xAF08F8")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xAF0998", Offset = "0xAF0998", VA = "0xAF0998")]
	public void Calibrate()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xAF0A80", Offset = "0xAF0A80", VA = "0xAF0A80")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xAF0AD0", Offset = "0xAF0AD0", VA = "0xAF0AD0")]
	public PowerMeterDisplay()
	{
	}
}
[Token(Token = "0x2000021")]
public class SpeedCadenceDisplay : MonoBehaviour
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wheelCircumference;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useAndroidUI;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool skipPreferredSearch;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float speed;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int cadence;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float distance;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AntChannel deviceChannel;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int stopRevCounter_speed;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int stopRevCounter_cadence;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int prev_measTime_speed;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int prev_revCount_speed;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int prev_measTime_cadence;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int prev_revCount_cadence;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int revCountZero;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int deviceID;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xAF0AEC", Offset = "0xAF0AEC", VA = "0xAF0AEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xAEEDBC", Offset = "0xAEEDBC", VA = "0xAEEDBC")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xAF0AFC", Offset = "0xAF0AFC", VA = "0xAF0AFC")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xAF0D34", Offset = "0xAF0D34", VA = "0xAF0D34")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xAF0E44", Offset = "0xAF0E44", VA = "0xAF0E44")]
	private void ANTPLUG_Receive_calculatedCadence(string s)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xAF0E7C", Offset = "0xAF0E7C", VA = "0xAF0E7C")]
	private void ANTPLUG_Receive_calculatedSpeed(string s)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAF0EA8", Offset = "0xAF0EA8", VA = "0xAF0EA8")]
	private void ANTPLUG_Receive_CalculatedAccumulatedDistance(string s)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAF0EC8", Offset = "0xAF0EC8", VA = "0xAF0EC8")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xAF124C", Offset = "0xAF124C", VA = "0xAF124C")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xAF13BC", Offset = "0xAF13BC", VA = "0xAF13BC")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xAF151C", Offset = "0xAF151C", VA = "0xAF151C")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xAF1520", Offset = "0xAF1520", VA = "0xAF1520")]
	public SpeedCadenceDisplay()
	{
	}
}
[Token(Token = "0x2000022")]
public class SpeedDisplay : MonoBehaviour
{
	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoStartScan;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool connected;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wheelCircumference;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoConnectToFirstSensorFound;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AntDevice> scanResult;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useAndroidUI;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool skipPreferredSearch;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float speed;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distance;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AntChannel backgroundScanChannel;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AntChannel deviceChannel;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int stopRevCounter_speed;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int prev_measTime_speed;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int prev_revCount_speed;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int revCountZero;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int deviceID;

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xAF1548", Offset = "0xAF1548", VA = "0xAF1548")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xAF1558", Offset = "0xAF1558", VA = "0xAF1558")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xAF1B1C", Offset = "0xAF1B1C", VA = "0xAF1B1C")]
	private void ANTPLUG_ConnectEvent(string resultCode)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xAF1D54", Offset = "0xAF1D54", VA = "0xAF1D54")]
	private void ANTPLUG_StateChange(string newDeviceState)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAF1E64", Offset = "0xAF1E64", VA = "0xAF1E64")]
	private void ANTPLUG_Receive_calculatedSpeed(string s)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xAF1E90", Offset = "0xAF1E90", VA = "0xAF1E90")]
	private void ANTPLUG_Receive_CalculatedAccumulatedDistance(string s)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAF1EB0", Offset = "0xAF1EB0", VA = "0xAF1EB0")]
	private void ReceivedBackgroundScanData(byte[] data)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAF2234", Offset = "0xAF2234", VA = "0xAF2234")]
	private void ConnectToDevice(AntDevice device)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAF23A4", Offset = "0xAF23A4", VA = "0xAF23A4")]
	public void Data(byte[] data)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAF2494", Offset = "0xAF2494", VA = "0xAF2494")]
	private void ChannelResponse(ANT_Response response)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAF2498", Offset = "0xAF2498", VA = "0xAF2498")]
	public SpeedDisplay()
	{
	}
}
[Token(Token = "0x2000023")]
public class RayShot : MonoBehaviour
{
	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer line;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rayEnd;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform hitReport;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ASCLBasicController abc;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Enemy[] enemies;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float damage;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lifespan;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float startTime;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 endPos;

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAF24C0", Offset = "0xAF24C0", VA = "0xAF24C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAF2DDC", Offset = "0xAF2DDC", VA = "0xAF2DDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAF2E6C", Offset = "0xAF2E6C", VA = "0xAF2E6C")]
	public RayShot()
	{
	}
}
[Serializable]
[Token(Token = "0x2000024")]
public class Ability
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int weaponstate;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<AbilityCollision> collChecks;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAF2E74", Offset = "0xAF2E74", VA = "0xAF2E74")]
	public Ability()
	{
	}
}
[Serializable]
[Token(Token = "0x2000025")]
public class AbilityCollision
{
	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int type;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 position;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 rotation;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float range;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angle;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float speed;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float damage;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform missile;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAF2E7C", Offset = "0xAF2E7C", VA = "0xAF2E7C")]
	public AbilityCollision()
	{
	}
}
[Token(Token = "0x2000026")]
public class ASCLBasicController : MonoBehaviour
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider floorPlane;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider attackPlane;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Enemy[] enemies;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform hitReport;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform particleHit;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Ability> abilities;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int ahc;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool hitCheck;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int WeaponState;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool wasAttacking;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Renderer movementTarget;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform destFloor;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float rotateSpeed;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector3 attackPos;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector3 lookAtPos;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float gravity;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float fallspeed;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool rightButtonDown;

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAF2E84", Offset = "0xAF2E84", VA = "0xAF2E84")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAF3058", Offset = "0xAF3058", VA = "0xAF3058")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xAF45D0", Offset = "0xAF45D0", VA = "0xAF45D0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAF4060", Offset = "0xAF4060", VA = "0xAF4060")]
	private void CheckForHit(Enemy en, AbilityCollision ac)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAF4674", Offset = "0xAF4674", VA = "0xAF4674")]
	public ASCLBasicController()
	{
	}
}
[Token(Token = "0x2000027")]
public class BasicHitCheck : StateMachineBehaviour
{
	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float colliderTestTime;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool collChecked;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ASCLBasicController abilityController;

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAF4718", Offset = "0xAF4718", VA = "0xAF4718", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xAF4788", Offset = "0xAF4788", VA = "0xAF4788", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xAF47D0", Offset = "0xAF47D0", VA = "0xAF47D0", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xAF47D8", Offset = "0xAF47D8", VA = "0xAF47D8")]
	public BasicHitCheck()
	{
	}
}
[Token(Token = "0x2000028")]
public class CamTarget : MonoBehaviour
{
	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float camSpeed;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lerpPos;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xAF47E0", Offset = "0xAF47E0", VA = "0xAF47E0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xAF48B0", Offset = "0xAF48B0", VA = "0xAF48B0")]
	public CamTarget()
	{
	}
}
[Token(Token = "0x2000029")]
public class CarCamera : MonoBehaviour
{
	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float height;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float positionDamping;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float velocityDamping;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask ignoreLayers;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private RaycastHit hit;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 prevVelocity;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private LayerMask raycastLayers;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 currentVelocity;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAF48C0", Offset = "0xAF48C0", VA = "0xAF48C0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAF48EC", Offset = "0xAF48EC", VA = "0xAF48EC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAF49D8", Offset = "0xAF49D8", VA = "0xAF49D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xAF4D04", Offset = "0xAF4D04", VA = "0xAF4D04")]
	public CarCamera()
	{
	}
}
[Token(Token = "0x200002A")]
public class CharacterControllerCollCheck : MonoBehaviour
{
	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController charControl;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float gravity;

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xAF4DC4", Offset = "0xAF4DC4", VA = "0xAF4DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xAF4E1C", Offset = "0xAF4E1C", VA = "0xAF4E1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xAF4E84", Offset = "0xAF4E84", VA = "0xAF4E84")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xAF4EB4", Offset = "0xAF4EB4", VA = "0xAF4EB4")]
	public CharacterControllerCollCheck()
	{
	}
}
[Token(Token = "0x200002B")]
public class CharacterDemoController : MonoBehaviour
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject floorPlane;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int WeaponState;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool wasAttacking;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotateSpeed;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 movementTargetPosition;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 attackPos;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 lookAtPos;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float gravity;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private RaycastHit hit;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Ray ray;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool rightButtonDown;

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xAF4EC4", Offset = "0xAF4EC4", VA = "0xAF4EC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xAF4F44", Offset = "0xAF4F44", VA = "0xAF4F44")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xAF5B64", Offset = "0xAF5B64", VA = "0xAF5B64")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xAF5C08", Offset = "0xAF5C08", VA = "0xAF5C08")]
	public CharacterDemoController()
	{
	}
}
[Token(Token = "0x200002C")]
public class CharacterPhysicsController : MonoBehaviour
{
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject floorPlane;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int WeaponState;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool wasAttacking;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotateSpeed;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CharacterController charcontroller;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 movementTargetPosition;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 attackPos;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 lookAtPos;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float gravity;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool jumping;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool grounded;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject contact;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float verticalVelocity;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private RaycastHit hit;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Ray ray;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool rightButtonDown;

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xAF5C24", Offset = "0xAF5C24", VA = "0xAF5C24")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xAF5CDC", Offset = "0xAF5CDC", VA = "0xAF5CDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xAF6BC4", Offset = "0xAF6BC4", VA = "0xAF6BC4")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xAF6BF4", Offset = "0xAF6BF4", VA = "0xAF6BF4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xAF6C98", Offset = "0xAF6C98", VA = "0xAF6C98")]
	public CharacterPhysicsController()
	{
	}
}
[Token(Token = "0x200002D")]
public class Enemy : MonoBehaviour
{
	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D cursorTexture;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CursorMode cursorMode;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 hotSpot;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool targeted;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xAF6CB0", Offset = "0xAF6CB0", VA = "0xAF6CB0")]
	private void OnMouseEnter()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xAF6CDC", Offset = "0xAF6CDC", VA = "0xAF6CDC")]
	private void OnMouseExit()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xAF6D08", Offset = "0xAF6D08", VA = "0xAF6D08")]
	public Enemy()
	{
	}
}
[Token(Token = "0x200002E")]
public class Hit : MonoBehaviour
{
	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMesh yellow;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh black;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float currentTime;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lifespan;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float fadeTime;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fadeSpeed;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxSize;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float speed;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string text;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xAF6D18", Offset = "0xAF6D18", VA = "0xAF6D18")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xAF6D34", Offset = "0xAF6D34", VA = "0xAF6D34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xAF6FAC", Offset = "0xAF6FAC", VA = "0xAF6FAC")]
	public Hit()
	{
	}
}
[Token(Token = "0x200002F")]
public class killParticle : MonoBehaviour
{
	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifespan;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xAF6FB4", Offset = "0xAF6FB4", VA = "0xAF6FB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xAF6FD0", Offset = "0xAF6FD0", VA = "0xAF6FD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xAF7060", Offset = "0xAF7060", VA = "0xAF7060")]
	public killParticle()
	{
	}
}
[Token(Token = "0x2000030")]
public class Missile : MonoBehaviour
{
	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy[] enemies;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float damage;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ASCLBasicController abc;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lifespan;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float startTime;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform hitReport;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform particleHit;

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xAF7068", Offset = "0xAF7068", VA = "0xAF7068")]
	private void Start()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xAF7084", Offset = "0xAF7084", VA = "0xAF7084")]
	private void Update()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xAF775C", Offset = "0xAF775C", VA = "0xAF775C")]
	public Missile()
	{
	}
}
[Token(Token = "0x2000031")]
public class MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float distance;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float xSpeed;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float ySpeed;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float x;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float y;

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xAF7764", Offset = "0xAF7764", VA = "0xAF7764")]
	private void Start()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xAF77D4", Offset = "0xAF77D4", VA = "0xAF77D4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xAF7B30", Offset = "0xAF7B30", VA = "0xAF7B30")]
	private float ClampAngle(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xAF7B5C", Offset = "0xAF7B5C", VA = "0xAF7B5C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xAF7C00", Offset = "0xAF7C00", VA = "0xAF7C00")]
	public MouseOrbit()
	{
	}
}
[Token(Token = "0x2000032")]
public class RadialAngler : MonoBehaviour
{
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float angle;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float oldAngle;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float range;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float oldRange;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform diameter;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SkinnedMeshRenderer helper;

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xAF7C1C", Offset = "0xAF7C1C", VA = "0xAF7C1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xAF7C4C", Offset = "0xAF7C4C", VA = "0xAF7C4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xAF7D14", Offset = "0xAF7D14", VA = "0xAF7D14")]
	public RadialAngler()
	{
	}
}
[Token(Token = "0x2000033")]
public class RootMotionOff : StateMachineBehaviour
{
	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ColliderTestTime;

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xAF7D28", Offset = "0xAF7D28", VA = "0xAF7D28", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xAF7D44", Offset = "0xAF7D44", VA = "0xAF7D44", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xAF7D60", Offset = "0xAF7D60", VA = "0xAF7D60")]
	public RootMotionOff()
	{
	}
}
[Token(Token = "0x2000034")]
[ExecuteInEditMode]
public class sprite_sheet : MonoBehaviour
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _uvTieX;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int _uvTieY;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int _fps;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 _size;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer _myRenderer;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _lastIndex;

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xAF7D68", Offset = "0xAF7D68", VA = "0xAF7D68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xAF7E3C", Offset = "0xAF7E3C", VA = "0xAF7E3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xAF7F4C", Offset = "0xAF7F4C", VA = "0xAF7F4C")]
	public sprite_sheet()
	{
	}
}
[Token(Token = "0x2000035")]
[RequireComponent(typeof(MeshRenderer))]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class AGGlobalSettings : MonoBehaviour
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float AOIntensity;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TranslucencyIntensity;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TranslucencyDistance;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool EnableTintColor;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float TintToggle;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D TintNoiseTexture;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float TintNoiseTile;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float TintNoiseContrast;

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xAF7F6C", Offset = "0xAF7F6C", VA = "0xAF7F6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xAF7FE4", Offset = "0xAF7FE4", VA = "0xAF7FE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xAF8138", Offset = "0xAF8138", VA = "0xAF8138")]
	public AGGlobalSettings()
	{
	}
}
[Token(Token = "0x2000036")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnow : MonoBehaviour
{
	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableGlobalWind;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float WindToggle;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float WindGrassAmplitude;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float WindGrassSpeed;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float WindGrassScale;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float WindGrassStiffness;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool EnableTintColor;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float TintToggle;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D TintNoiseTexture;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float TintNoiseTile;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float TintNoiseContrast;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float SnowPropsIntensity;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float SnowPropsOffset;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float SnowPropsContrast;

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xAF815C", Offset = "0xAF815C", VA = "0xAF815C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xAF81D4", Offset = "0xAF81D4", VA = "0xAF81D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xAF8440", Offset = "0xAF8440", VA = "0xAF8440")]
	public AGGlobalSnow()
	{
	}
}
[Token(Token = "0x2000037")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowGrass : MonoBehaviour
{
	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SnowGrassIntensity;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SnowGrassOffset;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SnowGrassContrast;

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xAF8470", Offset = "0xAF8470", VA = "0xAF8470")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xAF84E8", Offset = "0xAF84E8", VA = "0xAF84E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xAF8584", Offset = "0xAF8584", VA = "0xAF8584")]
	public AGGlobalSnowGrass()
	{
	}
}
[Token(Token = "0x2000038")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowProps : MonoBehaviour
{
	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SnowPropsIntensity;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SnowPropsOffset;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SnowPropsContrast;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xAF859C", Offset = "0xAF859C", VA = "0xAF859C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xAF8614", Offset = "0xAF8614", VA = "0xAF8614")]
	private void Update()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xAF86B0", Offset = "0xAF86B0", VA = "0xAF86B0")]
	public AGGlobalSnowProps()
	{
	}
}
[Token(Token = "0x2000039")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalSnowTree : MonoBehaviour
{
	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SnowTreeIntensity;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SnowTreeOffset;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SnowTreeContrast;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SnowTreeArrowDirection;

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xAF86C8", Offset = "0xAF86C8", VA = "0xAF86C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xAF8740", Offset = "0xAF8740", VA = "0xAF8740")]
	private void Update()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xAF8808", Offset = "0xAF8808", VA = "0xAF8808")]
	public AGGlobalSnowTree()
	{
	}
}
[Token(Token = "0x200003A")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(MeshRenderer))]
public class AGGlobalWind : MonoBehaviour
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableGlobalWind;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float WindToggle;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float WindTreeAmplitude;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float WindTreeSpeed;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float WindTreeScale;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float WindTreeStiffness;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float WindGrassAmplitude;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float WindGrassSpeed;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float WindGrassScale;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float WindGrassStiffness;

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xAF8818", Offset = "0xAF8818", VA = "0xAF8818")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xAF8890", Offset = "0xAF8890", VA = "0xAF8890")]
	private void Update()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xAF8A80", Offset = "0xAF8A80", VA = "0xAF8A80")]
	public AGGlobalWind()
	{
	}
}
[Token(Token = "0x200003B")]
public class MathUtils
{
	[Token(Token = "0x6000127")]
	[Address(RVA = "0xAF8AA4", Offset = "0xAF8AA4", VA = "0xAF8AA4")]
	public static Quaternion GetQuatConjugate(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xAF8AB4", Offset = "0xAF8AB4", VA = "0xAF8AB4")]
	public static Quaternion GetQuatLog(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xAF8B34", Offset = "0xAF8B34", VA = "0xAF8B34")]
	public static Quaternion GetQuatExp(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xAF8BBC", Offset = "0xAF8BBC", VA = "0xAF8BBC")]
	public static Quaternion GetQuatSquad(float t, Quaternion q0, Quaternion q1, Quaternion a0, Quaternion a1)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xAF8E14", Offset = "0xAF8E14", VA = "0xAF8E14")]
	public static Quaternion GetSquadIntermediate(Quaternion q0, Quaternion q1, Quaternion q2)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xAF8FF8", Offset = "0xAF8FF8", VA = "0xAF8FF8")]
	public static float Ease(float t, float k1, float k2)
	{
		return default(float);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xAF8CA8", Offset = "0xAF8CA8", VA = "0xAF8CA8")]
	public static Quaternion Slerp(Quaternion p, Quaternion q, float t)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x200003C")]
public enum eOrientationMode
{
	[Token(Token = "0x40001EC")]
	NODE,
	[Token(Token = "0x40001ED")]
	TANGENT
}
[Token(Token = "0x200003D")]
[RequireComponent(typeof(SplineInterpolator))]
public class SplineController : MonoBehaviour
{
	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject SplineRoot;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public eOrientationMode OrientationMode;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public eWrapMode WrapMode;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool AutoStart;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool AutoClose;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool HideOnExecute;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SplineInterpolator mSplineInterp;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform[] mTransforms;

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xAF90D0", Offset = "0xAF90D0", VA = "0xAF90D0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xAF9BC4", Offset = "0xAF9BC4", VA = "0xAF9BC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xAF9640", Offset = "0xAF9640", VA = "0xAF9640")]
	private void SetupSplineInterpolator(SplineInterpolator interp, Transform[] trans)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xAF932C", Offset = "0xAF932C", VA = "0xAF932C")]
	private Transform[] GetTransforms()
	{
		return null;
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xAF9D30", Offset = "0xAF9D30", VA = "0xAF9D30")]
	private void DisableTransforms()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xAF9DB8", Offset = "0xAF9DB8", VA = "0xAF9DB8")]
	private void FollowSpline()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xAFA720", Offset = "0xAFA720", VA = "0xAFA720")]
	public SplineController()
	{
	}
}
[Token(Token = "0x200003F")]
public enum eEndPointsMode
{
	[Token(Token = "0x40001FB")]
	AUTO,
	[Token(Token = "0x40001FC")]
	AUTOCLOSED,
	[Token(Token = "0x40001FD")]
	EXPLICIT
}
[Token(Token = "0x2000040")]
public enum eWrapMode
{
	[Token(Token = "0x40001FF")]
	ONCE,
	[Token(Token = "0x4000200")]
	LOOP
}
[Token(Token = "0x2000041")]
public delegate void OnEndCallback();
[Token(Token = "0x2000042")]
public class SplineInterpolator : MonoBehaviour
{
	[Token(Token = "0x2000043")]
	internal class SplineNode
	{
		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 Point;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal Quaternion Rot;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float Time;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Vector2 EaseIO;

		[Token(Token = "0x6000147")]
		[Address(RVA = "0xAFABA4", Offset = "0xAFABA4", VA = "0xAFABA4")]
		internal SplineNode(Vector3 p, Quaternion q, float t, Vector2 io)
		{
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0xAFACCC", Offset = "0xAFACCC", VA = "0xAFACCC")]
		internal SplineNode(SplineNode o)
		{
		}
	}

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private eEndPointsMode mEndPointsMode;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SplineNode> mNodes;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string mState;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mRotations;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OnEndCallback mOnEndCallback;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float mCurrentTime;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int mCurrentIdx;

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xAFA964", Offset = "0xAFA964", VA = "0xAFA964")]
	private void Awake()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xAF98E0", Offset = "0xAF98E0", VA = "0xAF98E0")]
	public void StartInterpolation(OnEndCallback endCallback, bool bRotations, eWrapMode mode)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xAF9E00", Offset = "0xAF9E00", VA = "0xAF9E00")]
	public void Reset()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xAF9E9C", Offset = "0xAF9E9C", VA = "0xAF9E9C")]
	public void AddPoint(Vector3 pos, Quaternion quat, float timeInSeconds, Vector2 easeInOut)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xAFA968", Offset = "0xAFA968", VA = "0xAFA968")]
	private void SetInput()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xAFAC24", Offset = "0xAFAC24", VA = "0xAFAC24")]
	private void SetExplicitMode()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xAFA060", Offset = "0xAFA060", VA = "0xAFA060")]
	public void SetAutoCloseMode(float joiningPointTime)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xAFAD20", Offset = "0xAFAD20", VA = "0xAFAD20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xAFB230", Offset = "0xAFB230", VA = "0xAFB230")]
	private Quaternion GetSquad(int idxFirstPoint, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xAFB0A0", Offset = "0xAFB0A0", VA = "0xAFB0A0")]
	public Vector3 GetHermiteInternal(int idxFirstPoint, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xAF99FC", Offset = "0xAF99FC", VA = "0xAF99FC")]
	public Vector3 GetHermiteAtTime(float timeParam)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xAFB3F8", Offset = "0xAFB3F8", VA = "0xAFB3F8")]
	public SplineInterpolator()
	{
	}
}
[Token(Token = "0x2000044")]
[RequireComponent(typeof(Camera))]
public class AQUAS_Camera : MonoBehaviour
{
	[Token(Token = "0x6000149")]
	[Address(RVA = "0xAFB4AC", Offset = "0xAFB4AC", VA = "0xAFB4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xAFB4B0", Offset = "0xAFB4B0", VA = "0xAFB4B0")]
	private void Set()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xAFB534", Offset = "0xAFB534", VA = "0xAFB534")]
	public AQUAS_Camera()
	{
	}
}
[Token(Token = "0x2000045")]
[ExecuteInEditMode]
public class AQUAS_Reflection : MonoBehaviour
{
	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_DisablePixelLights;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_TextureSize;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_ClipPlaneOffset;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask m_ReflectLayers;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Hashtable m_ReflectionCameras;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture m_ReflectionTexture;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_OldReflectionTextureSize;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_InsideRendering;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool ignoreOcclusionCulling;

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xAFB53C", Offset = "0xAFB53C", VA = "0xAFB53C")]
	public void OnWillRenderObject()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xAFC9F8", Offset = "0xAFC9F8", VA = "0xAFC9F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAFC394", Offset = "0xAFC394", VA = "0xAFC394")]
	private void UpdateCameraModes(Camera src, Camera dest)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xAFBE44", Offset = "0xAFBE44", VA = "0xAFBE44")]
	private void CreateMirrorObjects(Camera currentCamera, out Camera reflectionCamera)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xAFCDC8", Offset = "0xAFCDC8", VA = "0xAFCDC8")]
	private static float sgn(float a)
	{
		return default(float);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xAFC6F8", Offset = "0xAFC6F8", VA = "0xAFC6F8")]
	private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAFC8A8", Offset = "0xAFC8A8", VA = "0xAFC8A8")]
	private static void CalculateObliqueMatrix(ref Matrix4x4 projection, Vector4 clipPlane)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAFC664", Offset = "0xAFC664", VA = "0xAFC664")]
	private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAFCDE8", Offset = "0xAFCDE8", VA = "0xAFCDE8")]
	public AQUAS_Reflection()
	{
	}
}
[Token(Token = "0x2000046")]
public class ImporterExample : MonoBehaviour
{
	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Browser browser;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioImporter importer;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSource;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAFCE84", Offset = "0xAFCE84", VA = "0xAFCE84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAFCFBC", Offset = "0xAFCFBC", VA = "0xAFCFBC")]
	private void OnFileSelected(string path)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAFD050", Offset = "0xAFD050", VA = "0xAFD050")]
	private IEnumerator Import(string path)
	{
		return null;
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAFD108", Offset = "0xAFD108", VA = "0xAFD108")]
	public ImporterExample()
	{
	}
}
[Token(Token = "0x2000048")]
public abstract class AudioImporter : MonoBehaviour
{
	[Token(Token = "0x1700000D")]
	public Uri uri
	{
		[Token(Token = "0x6000161")]
		[Address(RVA = "0xAFD514", Offset = "0xAFD514", VA = "0xAFD514")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000162")]
		[Address(RVA = "0xAFD51C", Offset = "0xAFD51C", VA = "0xAFD51C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public virtual AudioClip audioClip
	{
		[Token(Token = "0x6000163")]
		[Address(RVA = "0xAFD524", Offset = "0xAFD524", VA = "0xAFD524", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000164")]
		[Address(RVA = "0xAFD52C", Offset = "0xAFD52C", VA = "0xAFD52C", Slot = "5")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public virtual float progress
	{
		[Token(Token = "0x6000165")]
		[Address(RVA = "0xAFD534", Offset = "0xAFD534", VA = "0xAFD534", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000166")]
		[Address(RVA = "0xAFD53C", Offset = "0xAFD53C", VA = "0xAFD53C", Slot = "7")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public virtual bool isDone
	{
		[Token(Token = "0x6000167")]
		[Address(RVA = "0xAFD544", Offset = "0xAFD544", VA = "0xAFD544", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000168")]
		[Address(RVA = "0xAFD54C", Offset = "0xAFD54C", VA = "0xAFD54C", Slot = "9")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public virtual bool isInitialized
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xAFD558", Offset = "0xAFD558", VA = "0xAFD558", Slot = "10")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600016A")]
		[Address(RVA = "0xAFD560", Offset = "0xAFD560", VA = "0xAFD560", Slot = "11")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public virtual bool isError
	{
		[Token(Token = "0x600016B")]
		[Address(RVA = "0xAFD56C", Offset = "0xAFD56C", VA = "0xAFD56C", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600016C")]
		[Address(RVA = "0xAFD574", Offset = "0xAFD574", VA = "0xAFD574", Slot = "13")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public virtual string error
	{
		[Token(Token = "0x600016D")]
		[Address(RVA = "0xAFD580", Offset = "0xAFD580", VA = "0xAFD580", Slot = "14")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600016E")]
		[Address(RVA = "0xAFD588", Offset = "0xAFD588", VA = "0xAFD588", Slot = "15")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action<AudioClip> Loaded
	{
		[Token(Token = "0x600015F")]
		[Address(RVA = "0xAFD3B4", Offset = "0xAFD3B4", VA = "0xAFD3B4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000160")]
		[Address(RVA = "0xAFD464", Offset = "0xAFD464", VA = "0xAFD464")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xAFD278", Offset = "0xAFD278", VA = "0xAFD278")]
	public void Import(string uri)
	{
	}

	[Token(Token = "0x6000170")]
	public abstract void Abort();

	[Token(Token = "0x6000171")]
	protected abstract void Import();

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xAFD590", Offset = "0xAFD590", VA = "0xAFD590")]
	protected void OnLoaded()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xAFD5CC", Offset = "0xAFD5CC", VA = "0xAFD5CC")]
	protected AudioImporter()
	{
	}
}
[Token(Token = "0x2000049")]
public class Browser : MonoBehaviour
{
	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> extensions;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject listItemPrefab;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject upButton;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ScrollRect scrollRect;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject folderPanel;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject filePanel;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string currentDirectory;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string[] drives;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<string> directories;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<string> files;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool selectDrive;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool scrolling;

	[Token(Token = "0x14000006")]
	public event Action<string> FileSelected
	{
		[Token(Token = "0x6000174")]
		[Address(RVA = "0xAFCF0C", Offset = "0xAFCF0C", VA = "0xAFCF0C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000175")]
		[Address(RVA = "0xAFD5D4", Offset = "0xAFD5D4", VA = "0xAFD5D4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xAFD684", Offset = "0xAFD684", VA = "0xAFD684")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xAFDB70", Offset = "0xAFDB70", VA = "0xAFDB70")]
	public void Up()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xAFD7CC", Offset = "0xAFD7CC", VA = "0xAFD7CC")]
	private void BuildContent()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xAFDC38", Offset = "0xAFDC38", VA = "0xAFDC38")]
	private void ClearContent()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAFDE7C", Offset = "0xAFDE7C", VA = "0xAFDE7C")]
	private void OnFileSelected(int index)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAFDF14", Offset = "0xAFDF14", VA = "0xAFDF14")]
	private void OnDirectorySelected(int index)
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAFDE08", Offset = "0xAFDE08", VA = "0xAFDE08")]
	private IEnumerator refreshFiles()
	{
		return null;
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xAFDD94", Offset = "0xAFDD94", VA = "0xAFDD94")]
	private IEnumerator refreshDirectories()
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xAFE01C", Offset = "0xAFE01C", VA = "0xAFE01C")]
	private void AddFileItem(int index)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xAFE258", Offset = "0xAFE258", VA = "0xAFE258")]
	private void AddDirectoryItem(int index)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xAFE4AC", Offset = "0xAFE4AC", VA = "0xAFE4AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xAFE764", Offset = "0xAFE764", VA = "0xAFE764")]
	public Browser()
	{
	}
}
[Token(Token = "0x200004E")]
public abstract class DecoderImporter : AudioImporter
{
	[Token(Token = "0x200004F")]
	protected class AudioInfo
	{
		[Token(Token = "0x17000018")]
		public int lengthSamples
		{
			[Token(Token = "0x60001A0")]
			[Address(RVA = "0xAFF4B8", Offset = "0xAFF4B8", VA = "0xAFF4B8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0xAFF4C0", Offset = "0xAFF4C0", VA = "0xAFF4C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000019")]
		public int sampleRate
		{
			[Token(Token = "0x60001A2")]
			[Address(RVA = "0xAFF4C8", Offset = "0xAFF4C8", VA = "0xAFF4C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0xAFF4D0", Offset = "0xAFF4D0", VA = "0xAFF4D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700001A")]
		public int channels
		{
			[Token(Token = "0x60001A4")]
			[Address(RVA = "0xAFF4D8", Offset = "0xAFF4D8", VA = "0xAFF4D8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60001A5")]
			[Address(RVA = "0xAFF4E0", Offset = "0xAFF4E0", VA = "0xAFF4E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0xAFF4E8", Offset = "0xAFF4E8", VA = "0xAFF4E8")]
		public AudioInfo(int lengthSamples, int sampleRate, int channels)
		{
		}
	}

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioInfo info;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int bufferSize;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] buffer;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AutoResetEvent waitForMainThread;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Thread import;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int index;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool abort;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Queue<Action> executionQueue;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private object _lock;

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAFE9C4", Offset = "0xAFE9C4", VA = "0xAFE9C4", Slot = "16")]
	public override void Abort()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAFEB78", Offset = "0xAFEB78", VA = "0xAFEB78", Slot = "17")]
	protected override void Import()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xAFED00", Offset = "0xAFED00", VA = "0xAFED00")]
	private void DoImport()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAFEF30", Offset = "0xAFEF30", VA = "0xAFEF30")]
	private void Decode()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAFF090", Offset = "0xAFF090", VA = "0xAFF090")]
	private void CreateClip()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAFF148", Offset = "0xAFF148", VA = "0xAFF148")]
	private void SetData()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xAFF278", Offset = "0xAFF278", VA = "0xAFF278")]
	protected void OnError(string error)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xAFEE1C", Offset = "0xAFEE1C", VA = "0xAFEE1C")]
	private void Dispatch(Action action)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xAFF2C0", Offset = "0xAFF2C0", VA = "0xAFF2C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600019B")]
	protected abstract void Initialize();

	[Token(Token = "0x600019C")]
	protected abstract void Cleanup();

	[Token(Token = "0x600019D")]
	protected abstract int GetSamples(float[] buffer, int offset, int count);

	[Token(Token = "0x600019E")]
	protected abstract AudioInfo GetInfo();

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xAFF3F4", Offset = "0xAFF3F4", VA = "0xAFF3F4")]
	protected DecoderImporter()
	{
	}
}
[Token(Token = "0x2000050")]
public class MobileImporter : AudioImporter
{
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityWebRequest webRequest;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AsyncOperation operation;

	[Token(Token = "0x1700001B")]
	public override float progress
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xAFF524", Offset = "0xAFF524", VA = "0xAFF524", Slot = "6")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700001C")]
	public override bool isDone
	{
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0xAFF53C", Offset = "0xAFF53C", VA = "0xAFF53C", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001D")]
	public override bool isInitialized
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0xAFF550", Offset = "0xAFF550", VA = "0xAFF550", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001E")]
	public override bool isError
	{
		[Token(Token = "0x60001AA")]
		[Address(RVA = "0xAFF55C", Offset = "0xAFF55C", VA = "0xAFF55C", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001F")]
	public override string error
	{
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0xAFF59C", Offset = "0xAFF59C", VA = "0xAFF59C", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xAFF600", Offset = "0xAFF600", VA = "0xAFF600", Slot = "16")]
	public override void Abort()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xAFF664", Offset = "0xAFF664", VA = "0xAFF664", Slot = "17")]
	protected override void Import()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xAFF6E4", Offset = "0xAFF6E4", VA = "0xAFF6E4")]
	private IEnumerator WaitForWebRequest()
	{
		return null;
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xAFF780", Offset = "0xAFF780", VA = "0xAFF780")]
	public MobileImporter()
	{
	}
}
[Token(Token = "0x2000052")]
public class NAudioImporter : DecoderImporter
{
	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Mp3FileReader reader;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ISampleProvider sampleProvider;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xAFF8B8", Offset = "0xAFF8B8", VA = "0xAFF8B8", Slot = "18")]
	protected override void Initialize()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xAFFAB8", Offset = "0xAFFAB8", VA = "0xAFFAB8", Slot = "19")]
	protected override void Cleanup()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xAFFB00", Offset = "0xAFFB00", VA = "0xAFFB00", Slot = "21")]
	protected override AudioInfo GetInfo()
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xAFFBCC", Offset = "0xAFFBCC", VA = "0xAFFBCC", Slot = "20")]
	protected override int GetSamples(float[] buffer, int offset, int count)
	{
		return default(int);
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xAFFC8C", Offset = "0xAFFC8C", VA = "0xAFFC8C")]
	public NAudioImporter()
	{
	}
}
[Token(Token = "0x2000053")]
public class AlienMove : MonoBehaviour
{
	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 m_TopLeftBound;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector3 m_BottomRightBound;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_MinMoveTime;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_MaxMoveTime;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_MinWaitTime;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float m_MaxWaitTime;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Animator m_Animator;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform m_Transform;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_Position;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xAFFC90", Offset = "0xAFFC90", VA = "0xAFFC90")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xAFFCE8", Offset = "0xAFFCE8", VA = "0xAFFCE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xAFFD9C", Offset = "0xAFFD9C", VA = "0xAFFD9C")]
	private Vector3 GetRandomPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xAFFD28", Offset = "0xAFFD28", VA = "0xAFFD28")]
	private IEnumerator StartMoving()
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xAFFE28", Offset = "0xAFFE28", VA = "0xAFFE28")]
	private IEnumerator GoToPosition(float time, float waitTime, Vector3 from, Vector3 to)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xAFFF14", Offset = "0xAFFF14", VA = "0xAFFF14")]
	public AlienMove()
	{
	}
}
[Token(Token = "0x2000056")]
public class CPC_DEMO_UpDown : MonoBehaviour
{
	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startPos;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float height;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xB002A4", Offset = "0xB002A4", VA = "0xB002A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xB002D4", Offset = "0xB002D4", VA = "0xB002D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xB0039C", Offset = "0xB0039C", VA = "0xB0039C")]
	public CPC_DEMO_UpDown()
	{
	}
}
[Serializable]
[Token(Token = "0x2000057")]
public class CPC_Visual
{
	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color pathColor;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color inactivePathColor;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color frustrumColor;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color handleColor;

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xB003A4", Offset = "0xB003A4", VA = "0xB003A4")]
	public CPC_Visual()
	{
	}
}
[Token(Token = "0x2000058")]
public enum CPC_ECurveType
{
	[Token(Token = "0x400026C")]
	EaseInAndOut,
	[Token(Token = "0x400026D")]
	Linear,
	[Token(Token = "0x400026E")]
	Custom
}
[Token(Token = "0x2000059")]
public enum CPC_EAfterLoop
{
	[Token(Token = "0x4000270")]
	Continue,
	[Token(Token = "0x4000271")]
	Stop
}
[Serializable]
[Token(Token = "0x200005A")]
public class CPC_Point
{
	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion rotation;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 handleprev;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 handlenext;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public CPC_ECurveType curveTypeRotation;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve rotationCurve;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CPC_ECurveType curveTypePosition;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve positionCurve;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool chained;
}
[Token(Token = "0x200005B")]
public class CPC_CameraPath : MonoBehaviour
{
	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useMainCamera;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera selectedCamera;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool lookAtTarget;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform target;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool playOnAwake;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float playOnAwakeTime;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<CPC_Point> points;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CPC_Visual visual;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool looped;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool alwaysShow;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public CPC_EAfterLoop afterLoop;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int currentWaypointIndex;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float currentTimeInWaypoint;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float timePerSegment;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool paused;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool playing;

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xB003D0", Offset = "0xB003D0", VA = "0xB003D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xB00794", Offset = "0xB00794", VA = "0xB00794")]
	public void PlayPath(float time)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xB00868", Offset = "0xB00868", VA = "0xB00868")]
	public void StopPath()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xB00874", Offset = "0xB00874", VA = "0xB00874")]
	public void UpdateTimeInSeconds(float seconds)
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xB008E0", Offset = "0xB008E0", VA = "0xB008E0")]
	public void PausePath()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xB008EC", Offset = "0xB008EC", VA = "0xB008EC")]
	public void ResumePath()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xB00904", Offset = "0xB00904", VA = "0xB00904")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xB0090C", Offset = "0xB0090C", VA = "0xB0090C")]
	public bool IsPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xB00914", Offset = "0xB00914", VA = "0xB00914")]
	public int GetCurrentWayPoint()
	{
		return default(int);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xB0091C", Offset = "0xB0091C", VA = "0xB0091C")]
	public float GetCurrentTimeInWaypoint()
	{
		return default(float);
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xB00924", Offset = "0xB00924", VA = "0xB00924")]
	public void SetCurrentWayPoint(int value)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xB0092C", Offset = "0xB0092C", VA = "0xB0092C")]
	public void SetCurrentTimeInWaypoint(float value)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xB00934", Offset = "0xB00934", VA = "0xB00934")]
	public void RefreshTransform()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xB007E4", Offset = "0xB007E4", VA = "0xB007E4")]
	private IEnumerator FollowPath(float time)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xB01074", Offset = "0xB01074", VA = "0xB01074")]
	private int GetNextIndex(int index)
	{
		return default(int);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xB00AE4", Offset = "0xB00AE4", VA = "0xB00AE4")]
	private Vector3 GetBezierPosition(int pointIndex, float time)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xB00F20", Offset = "0xB00F20", VA = "0xB00F20")]
	private Quaternion GetLerpRotation(int pointIndex, float time)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xB010CC", Offset = "0xB010CC", VA = "0xB010CC")]
	public CPC_CameraPath()
	{
	}
}
[Token(Token = "0x200005D")]
public class CV_Camera : MonoBehaviour
{
	[Token(Token = "0x200005E")]
	public enum Type
	{
		[Token(Token = "0x40002B1")]
		Boxes,
		[Token(Token = "0x40002B2")]
		Spheres,
		[Token(Token = "0x40002B3")]
		Capsules,
		[Token(Token = "0x40002B4")]
		Meshes,
		[Token(Token = "0x40002B5")]
		Characters,
		[Token(Token = "0x40002B6")]
		Count
	}

	[Token(Token = "0x200005F")]
	[Flags]
	public enum Flags
	{
		[Token(Token = "0x40002B8")]
		None = 0,
		[Token(Token = "0x40002B9")]
		Boxes = 1,
		[Token(Token = "0x40002BA")]
		Spheres = 2,
		[Token(Token = "0x40002BB")]
		Capsules = 4,
		[Token(Token = "0x40002BC")]
		Meshes = 8,
		[Token(Token = "0x40002BD")]
		NoDepth = 0x10,
		[Token(Token = "0x40002BE")]
		NoLines = 0x20,
		[Token(Token = "0x40002BF")]
		NoFaces = 0x40,
		[Token(Token = "0x40002C0")]
		NoTriggers = 0x80,
		[Token(Token = "0x40002C1")]
		NoGUI = 0x100
	}

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera compCamera;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Plane[] viewFrustum;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] guiColliderCount;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Collider> colliderList;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Collider> triggerList;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Collider2D> colliderList2D;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Collider2D> triggerList2D;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color boxColor;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color sphereColor;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color capsuleColor;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color meshColor;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Color characterColor;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color triggerColor;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float edgeAlpha;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float faceAlpha;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Flags renderFlags;

	[Token(Token = "0x400029F")]
	private const Flags RENDER_COLLIDERS = Flags.Boxes | Flags.Spheres | Flags.Capsules | Flags.Meshes;

	[Token(Token = "0x40002A0")]
	private const int buttonCount = 8;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float guiYPosition;

	[Token(Token = "0x40002A2")]
	private const float frameRelativeW = 0.95f;

	[Token(Token = "0x40002A3")]
	private const float frameRelativeL = 0.025000006f;

	[Token(Token = "0x40002A4")]
	private const float frameRelativeH = 0.1f;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float frameRelativeT;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int framePixelW;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int framePixelL;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int framePixelH;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int framePixelT;

	[Token(Token = "0x40002AA")]
	private const int buttonPixelW = 87;

	[Token(Token = "0x40002AB")]
	private const float buttonRelativeH = 0.75f;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int buttonLengthTotal;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int buttonPixelHeight;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int buttonPixelPadding;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int buttonPixelL;

	[Token(Token = "0x17000028")]
	public float EdgeAlpha
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xB01634", Offset = "0xB01634", VA = "0xB01634")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000029")]
	public float FaceAlpha
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xB01648", Offset = "0xB01648", VA = "0xB01648")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xB014BC", Offset = "0xB014BC", VA = "0xB014BC")]
	public void Toggle(Flags flag)
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xB014CC", Offset = "0xB014CC", VA = "0xB014CC")]
	public void Set(Flags flag)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xB014DC", Offset = "0xB014DC", VA = "0xB014DC")]
	public void Clear(Flags flag)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xB014EC", Offset = "0xB014EC", VA = "0xB014EC")]
	public bool IsSet(Flags flag)
	{
		return default(bool);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xB014FC", Offset = "0xB014FC", VA = "0xB014FC")]
	public Color ColliderColor(Type type)
	{
		return default(Color);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xB0165C", Offset = "0xB0165C", VA = "0xB0165C")]
	public void Start()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xB016BC", Offset = "0xB016BC", VA = "0xB016BC")]
	public void OnPostRender()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xB018A8", Offset = "0xB018A8", VA = "0xB018A8")]
	private void AddToRenderList(Collider[] colliders)
	{
	}

	[Token(Token = "0x60001F3")]
	private void RenderCollision<T>(Type type) where T : Collider
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xB01ACC", Offset = "0xB01ACC", VA = "0xB01ACC")]
	private void AddToRenderList2D(Collider2D[] colliders)
	{
	}

	[Token(Token = "0x60001F5")]
	private void RenderCollision2D<T>(Type type) where T : Collider2D
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xB01CF0", Offset = "0xB01CF0", VA = "0xB01CF0")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xB02090", Offset = "0xB02090", VA = "0xB02090")]
	private void RenderFrame()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xB025DC", Offset = "0xB025DC", VA = "0xB025DC")]
	private void RenderButton(string setting, Flags flag)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xB02480", Offset = "0xB02480", VA = "0xB02480")]
	private void RenderButton(string label, Flags flag, Type type)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xB02724", Offset = "0xB02724", VA = "0xB02724")]
	public CV_Camera()
	{
	}
}
[Token(Token = "0x2000060")]
internal static class CharacterStates
{
	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xB028F0", Offset = "0xB028F0", VA = "0xB028F0")]
	public static string ToString(int state)
	{
		return null;
	}
}
[Token(Token = "0x2000061")]
public class Character : MonoBehaviour
{
	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StateManager sm;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 goal;

	[Token(Token = "0x40002C4")]
	private const float moveSpeed = 10f;

	[Token(Token = "0x40002C5")]
	private const float turnSpeed = 2.5f;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody compRigidbody;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animation compAnimation;

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xB02970", Offset = "0xB02970", VA = "0xB02970")]
	private void Start()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xB02A10", Offset = "0xB02A10", VA = "0xB02A10")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xB02FD4", Offset = "0xB02FD4", VA = "0xB02FD4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xB03170", Offset = "0xB03170", VA = "0xB03170")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xB034A0", Offset = "0xB034A0", VA = "0xB034A0")]
	private void StartIdle()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xB035DC", Offset = "0xB035DC", VA = "0xB035DC")]
	private void UpdateIdle()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xB035E0", Offset = "0xB035E0", VA = "0xB035E0")]
	private void AiWander()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xB03624", Offset = "0xB03624", VA = "0xB03624")]
	private void StartWalk()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xB03710", Offset = "0xB03710", VA = "0xB03710")]
	private void UpdateWalk()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xB03970", Offset = "0xB03970", VA = "0xB03970")]
	private void AttemptJump()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xB03A44", Offset = "0xB03A44", VA = "0xB03A44")]
	private void StartJump()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xB03AC0", Offset = "0xB03AC0", VA = "0xB03AC0")]
	private void UpdateJump()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xB03908", Offset = "0xB03908", VA = "0xB03908")]
	private bool IsAtGoal()
	{
		return default(bool);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xB03C08", Offset = "0xB03C08", VA = "0xB03C08")]
	public Character()
	{
	}
}
[Token(Token = "0x2000062")]
public class PhysicsObject : MonoBehaviour
{
	[Token(Token = "0x40002C8")]
	public const float maxIdleTimeSecs = 3f;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float idleTime;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody compRigidbody;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startY;

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xB03C10", Offset = "0xB03C10", VA = "0xB03C10")]
	private void Start()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xB03C94", Offset = "0xB03C94", VA = "0xB03C94")]
	private void Update()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xB03D3C", Offset = "0xB03D3C", VA = "0xB03D3C")]
	private void NewPosition()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xB03E5C", Offset = "0xB03E5C", VA = "0xB03E5C")]
	public PhysicsObject()
	{
	}
}
[Token(Token = "0x2000063")]
public delegate void StateCallback();
[Token(Token = "0x2000064")]
public class State
{
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private StateCallback start;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StateCallback update;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StateCallback timedEvent;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xB03E78", Offset = "0xB03E78", VA = "0xB03E78")]
	public State(StateCallback start, StateCallback update, StateCallback timedEvent)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xB03ED8", Offset = "0xB03ED8", VA = "0xB03ED8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xB03EFC", Offset = "0xB03EFC", VA = "0xB03EFC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xB03F20", Offset = "0xB03F20", VA = "0xB03F20")]
	public void TimedEvent()
	{
	}
}
[Token(Token = "0x2000065")]
public class StateManager
{
	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private State[] states;

	[Token(Token = "0x40002D0")]
	private const int SM_INVALID_STATE = -1;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int statePrevious;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int stateCurrent;

	[Token(Token = "0x40002D3")]
	private const float SM_EVENT_TIME_NONE = 0f;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float eventTime;

	[Token(Token = "0x1700002A")]
	public int PreviousState
	{
		[Token(Token = "0x6000214")]
		[Address(RVA = "0xB03F44", Offset = "0xB03F44", VA = "0xB03F44")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002B")]
	public int CurrentState
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0xB03F4C", Offset = "0xB03F4C", VA = "0xB03F4C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000216")]
		[Address(RVA = "0xB03F54", Offset = "0xB03F54", VA = "0xB03F54")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public float TimedEvent
	{
		[Token(Token = "0x6000217")]
		[Address(RVA = "0xB035B0", Offset = "0xB035B0", VA = "0xB035B0")]
		set
		{
		}
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xB02D98", Offset = "0xB02D98", VA = "0xB02D98")]
	public StateManager(int initialState, int maxStates)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xB02EE4", Offset = "0xB02EE4", VA = "0xB02EE4")]
	public bool RegisterState(int id, StateCallback start, StateCallback update, StateCallback timedEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xB02FCC", Offset = "0xB02FCC", VA = "0xB02FCC")]
	public bool RegisterState(int id, StateCallback start, StateCallback update)
	{
		return default(bool);
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xB03F5C", Offset = "0xB03F5C", VA = "0xB03F5C")]
	private void StartState()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xB02FEC", Offset = "0xB02FEC", VA = "0xB02FEC")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000066")]
public class CloudsRotate : MonoBehaviour
{
	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cloudSpeed;

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xB03FBC", Offset = "0xB03FBC", VA = "0xB03FBC")]
	private void Update()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xB0407C", Offset = "0xB0407C", VA = "0xB0407C")]
	public CloudsRotate()
	{
	}
}
[Token(Token = "0x2000067")]
public class EarthRotate : MonoBehaviour
{
	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float EarthSpeed;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xB0408C", Offset = "0xB0408C", VA = "0xB0408C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xB0414C", Offset = "0xB0414C", VA = "0xB0414C")]
	public EarthRotate()
	{
	}
}
[Token(Token = "0x2000068")]
public class SpawnEffect : MonoBehaviour
{
	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnEffectTime;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pause;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve fadeIn;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int shaderProperty;

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xB04160", Offset = "0xB04160", VA = "0xB04160")]
	private void Start()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xB04260", Offset = "0xB04260", VA = "0xB04260")]
	private void Update()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xB04320", Offset = "0xB04320", VA = "0xB04320")]
	public SpawnEffect()
	{
	}
}
[Token(Token = "0x2000069")]
public class DecalDestroyer : MonoBehaviour
{
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifeTime;

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xB04334", Offset = "0xB04334", VA = "0xB04334")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xB043D0", Offset = "0xB043D0", VA = "0xB043D0")]
	public DecalDestroyer()
	{
	}
}
[Token(Token = "0x200006B")]
public class ExtinguishableFire : MonoBehaviour
{
	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem fireParticleSystem;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem smokeParticleSystem;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool m_isExtinguished;

	[Token(Token = "0x40002E5")]
	private const float m_FireStartingTime = 2f;

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xB0452C", Offset = "0xB0452C", VA = "0xB0452C")]
	private void Start()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xB045F0", Offset = "0xB045F0", VA = "0xB045F0")]
	public void Extinguish()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xB04628", Offset = "0xB04628", VA = "0xB04628")]
	private IEnumerator Extinguishing()
	{
		return null;
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xB0457C", Offset = "0xB0457C", VA = "0xB0457C")]
	private IEnumerator StartingFire()
	{
		return null;
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xB046EC", Offset = "0xB046EC", VA = "0xB046EC")]
	public ExtinguishableFire()
	{
	}
}
[Token(Token = "0x200006E")]
public class GunAim : MonoBehaviour
{
	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int borderLeft;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int borderRight;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int borderTop;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int borderBottom;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera parentCamera;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isOutOfBounds;

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xB04BF0", Offset = "0xB04BF0", VA = "0xB04BF0")]
	private void Start()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xB04C48", Offset = "0xB04C48", VA = "0xB04C48")]
	private void Update()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xB04D28", Offset = "0xB04D28", VA = "0xB04D28")]
	public bool GetIsOutOfBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xB04D30", Offset = "0xB04D30", VA = "0xB04D30")]
	public GunAim()
	{
	}
}
[Token(Token = "0x200006F")]
public class GunShoot : MonoBehaviour
{
	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fireRate;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float weaponRange;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform gunEnd;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem muzzleFlash;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem cartridgeEjection;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject metalHitEffect;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject sandHitEffect;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject stoneHitEffect;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject waterLeakEffect;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject waterLeakExtinguishEffect;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] fleshHitEffects;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject woodHitEffect;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float nextFire;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator anim;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GunAim gunAim;

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xB04D38", Offset = "0xB04D38", VA = "0xB04D38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xB04DC8", Offset = "0xB04DC8", VA = "0xB04DC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xB04F34", Offset = "0xB04F34", VA = "0xB04F34")]
	private void HandleHit(RaycastHit hit)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xB05378", Offset = "0xB05378", VA = "0xB05378")]
	private void SpawnDecal(RaycastHit hit, GameObject prefab)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xB054A8", Offset = "0xB054A8", VA = "0xB054A8")]
	public GunShoot()
	{
	}
}
[Token(Token = "0x2000070")]
public class ParticleCollision : MonoBehaviour
{
	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ParticleCollisionEvent> m_CollisionEvents;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem m_ParticleSystem;

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xB054BC", Offset = "0xB054BC", VA = "0xB054BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xB05514", Offset = "0xB05514", VA = "0xB05514")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xB05650", Offset = "0xB05650", VA = "0xB05650")]
	public ParticleCollision()
	{
	}
}
[Serializable]
[Token(Token = "0x2000071")]
public class ParticleExamples
{
	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string title;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string description;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isWeaponEffect;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject particleSystemGO;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 particlePosition;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 particleRotation;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xB056D8", Offset = "0xB056D8", VA = "0xB056D8")]
	public ParticleExamples()
	{
	}
}
[Token(Token = "0x2000072")]
public class ParticleMenu : MonoBehaviour
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleExamples[] particleSystems;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gunGameObject;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentIndex;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject currentGO;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform spawnLocation;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text title;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text description;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text navigationDetails;

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xB056E0", Offset = "0xB056E0", VA = "0xB056E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xB056FC", Offset = "0xB056FC", VA = "0xB056FC")]
	public void Navigate(int i)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xB05A18", Offset = "0xB05A18", VA = "0xB05A18")]
	public ParticleMenu()
	{
	}
}
[Token(Token = "0x2000073")]
public class Floatie : MonoBehaviour
{
	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distanceFromHead;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool drawLine;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve angleToPositionLerp;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve angleToRotationLerp;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rollLerp;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float worldUpRotationTargetPercentage;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float offsetFactor;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool spawnInFrontOfCam;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float dismissTime;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float dismissAngle;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float lineWidth;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color lineColor;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float waitBeforeDestroy;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform attentionPoint;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform head;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform lineStartPoint;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent Dismissed;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected LineRenderer line;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected Material lineMaterial;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected float countdown;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected bool destroyingInProgress;

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xB05A20", Offset = "0xB05A20", VA = "0xB05A20")]
	public static Floatie Spawn(GameObject prefab, [Optional] Transform attentionPoint, float distanceFromHead = 0.5f, bool spawnInFrontOfCam = true)
	{
		return null;
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xB05B4C", Offset = "0xB05B4C", VA = "0xB05B4C")]
	public void Destroy()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xB05BF8", Offset = "0xB05BF8", VA = "0xB05BF8", Slot = "4")]
	public virtual void OnAboutToBeDestroyed()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xB05BFC", Offset = "0xB05BFC", VA = "0xB05BFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xB05F5C", Offset = "0xB05F5C", VA = "0xB05F5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xB05FE0", Offset = "0xB05FE0", VA = "0xB05FE0")]
	private void UpdateFloatie()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xB0666C", Offset = "0xB0666C", VA = "0xB0666C")]
	private void UpdateLine()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xB0681C", Offset = "0xB0681C", VA = "0xB0681C")]
	private void UpdateDismiss()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xB069C4", Offset = "0xB069C4", VA = "0xB069C4")]
	public Floatie()
	{
	}
}
[Token(Token = "0x2000074")]
public class FloatieSpawner : MonoBehaviour
{
	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabToUseAsFloatie;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform attentionPoint;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int mode;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int prevMode;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Floatie floatie;

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xB06A78", Offset = "0xB06A78", VA = "0xB06A78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xB06AE0", Offset = "0xB06AE0", VA = "0xB06AE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xB06CE8", Offset = "0xB06CE8", VA = "0xB06CE8")]
	private void OnDismiss()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xB06D60", Offset = "0xB06D60", VA = "0xB06D60")]
	public FloatieSpawner()
	{
	}
}
[Token(Token = "0x2000075")]
public class FloatieWithAnimation : Floatie
{
	[Token(Token = "0x600025A")]
	[Address(RVA = "0xB06D70", Offset = "0xB06D70", VA = "0xB06D70", Slot = "4")]
	public override void OnAboutToBeDestroyed()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xB06E40", Offset = "0xB06E40", VA = "0xB06E40")]
	public FloatieWithAnimation()
	{
	}
}
[Token(Token = "0x2000076")]
public class rotator : MonoBehaviour
{
	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 direction;

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xB06E44", Offset = "0xB06E44", VA = "0xB06E44")]
	private void Update()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xB06EB8", Offset = "0xB06EB8", VA = "0xB06EB8")]
	public rotator()
	{
	}
}
[Token(Token = "0x2000077")]
public class ME_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Character;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Model;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Current;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light Sun;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Light[] NightLights;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture HUETexture;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool UseMobileVersion;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject MobileCharacter;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject Target;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color guiColor;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentNomber;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject characterInstance;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject modelInstance;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float dpiScale;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool isDay;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float colorHUE;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float startSunIntensity;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion startSunRotation;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color startAmbientLight;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float startAmbientIntencity;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float startReflectionIntencity;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private LightShadows startLightShadows;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool isButtonPressed;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject instanceShieldProjectile;

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xB06F18", Offset = "0xB06F18", VA = "0xB06F18")]
	private void Start()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xB073AC", Offset = "0xB073AC", VA = "0xB073AC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xB07088", Offset = "0xB07088", VA = "0xB07088")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xB07A94", Offset = "0xB07A94", VA = "0xB07A94")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xB07B98", Offset = "0xB07B98", VA = "0xB07B98")]
	private void ReactivateEffect()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xB07BF8", Offset = "0xB07BF8", VA = "0xB07BF8")]
	public ME_DemoGUI()
	{
	}
}
[Token(Token = "0x2000078")]
public class ME_FPS : MonoBehaviour
{
	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timeleft2;

	[Token(Token = "0x400034E")]
	private const float updateTime = 0.5f;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float fps;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int frames;

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xB07CDC", Offset = "0xB07CDC", VA = "0xB07CDC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xB07DE0", Offset = "0xB07DE0", VA = "0xB07DE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xB07E34", Offset = "0xB07E34", VA = "0xB07E34")]
	public ME_FPS()
	{
	}
}
[Token(Token = "0x2000079")]
public class ME_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xB07EA8", Offset = "0xB07EA8", VA = "0xB07EA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xB07ED4", Offset = "0xB07ED4", VA = "0xB07ED4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB0832C", Offset = "0xB0832C", VA = "0xB0832C")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB08368", Offset = "0xB08368", VA = "0xB08368")]
	public ME_MouseOrbit()
	{
	}
}
[Token(Token = "0x200007A")]
public class ME_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool CanUpdate;

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xBB07A8", Offset = "0xBB07A8", VA = "0xBB07A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xBB0828", Offset = "0xBB0828", VA = "0xBB0828")]
	private void Update()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xBB08B4", Offset = "0xBB08B4", VA = "0xBB08B4")]
	public ME_RealtimeReflection()
	{
	}
}
[Token(Token = "0x200007B")]
[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
public class ME_DistortionAndBloom : MonoBehaviour
{
	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask CullingMask;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UseBloom;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Threshold;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public float SoftKnee;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Radius;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Intensity;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool HighQuality;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool AntiFlicker;

	[Token(Token = "0x4000366")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/ME_Bloom";

	[Token(Token = "0x4000367")]
	private const string shaderAdditiveName = "Hidden/KriptoFX/PostEffects/ME_BloomAdditive";

	[Token(Token = "0x4000368")]
	private const string cameraName = "MobileCamera(Distort_Bloom_Depth)";

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture source;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture depth;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture destination;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int previuosFrameWidth;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int previuosFrameHeight;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float previousScale;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera addCamera;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject tempGO;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool HDRSupported;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Material m_Material;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Material m_MaterialAdditive;

	[Token(Token = "0x4000374")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x17000033")]
	public Material mat
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0xBB08C4", Offset = "0xBB08C4", VA = "0xBB08C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000034")]
	public Material matAdditive
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0xBB0A2C", Offset = "0xBB0A2C", VA = "0xBB0A2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xBB0964", Offset = "0xBB0964", VA = "0xBB0964")]
	public static Material CheckShaderAndCreateMaterial(Shader s)
	{
		return null;
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xBB0AE4", Offset = "0xBB0AE4", VA = "0xBB0AE4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xBB0C68", Offset = "0xBB0C68", VA = "0xBB0C68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xBB0E8C", Offset = "0xBB0E8C", VA = "0xBB0E8C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xBB1B08", Offset = "0xBB1B08", VA = "0xBB1B08")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xBB0C6C", Offset = "0xBB0C6C", VA = "0xBB0C6C")]
	private void InitializeRenderTarget()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xBB1330", Offset = "0xBB1330", VA = "0xBB1330")]
	private void UpdateBloom()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xBB1054", Offset = "0xBB1054", VA = "0xBB1054")]
	private void GrabImage()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xBB1B7C", Offset = "0xBB1B7C", VA = "0xBB1B7C")]
	public ME_DistortionAndBloom()
	{
	}
}
[Token(Token = "0x200007C")]
public class ME_AnimatorEvents : MonoBehaviour
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject EffectPrefab;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SwordPrefab;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform SwordPosition;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform StartSwordPosition;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject EffectInstance;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject SwordInstance;

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xBB1C30", Offset = "0xBB1C30", VA = "0xBB1C30")]
	private void Start()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xBB1DBC", Offset = "0xBB1DBC", VA = "0xBB1DBC")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xBB212C", Offset = "0xBB212C", VA = "0xBB212C")]
	public void ActivateSword()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xBB21F0", Offset = "0xBB21F0", VA = "0xBB21F0")]
	public void UpdateColor(float HUE)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xBB26E8", Offset = "0xBB26E8", VA = "0xBB26E8")]
	public ME_AnimatorEvents()
	{
	}
}
[Token(Token = "0x200007D")]
public static class ME_ColorHelper
{
	[Token(Token = "0x200007E")]
	public struct HSBColor
	{
		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xBB26F0", Offset = "0xBB26F0", VA = "0xBB26F0")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xBB2344", Offset = "0xBB2344", VA = "0xBB2344")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xBB24B4", Offset = "0xBB24B4", VA = "0xBB24B4")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xBB26FC", Offset = "0xBB26FC", VA = "0xBB26FC")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xBB27E8", Offset = "0xBB27E8", VA = "0xBB27E8")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xBB32B8", Offset = "0xBB32B8", VA = "0xBB32B8")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}
}
[Token(Token = "0x200007F")]
public class ME_EffectSettingColor : MonoBehaviour
{
	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color Color;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color previousColor;

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xBB37A0", Offset = "0xBB37A0", VA = "0xBB37A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xBB37A4", Offset = "0xBB37A4", VA = "0xBB37A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xBB37E4", Offset = "0xBB37E4", VA = "0xBB37E4")]
	private void UpdateColor()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xBB3880", Offset = "0xBB3880", VA = "0xBB3880")]
	public ME_EffectSettingColor()
	{
	}
}
[Token(Token = "0x2000080")]
[ExecuteInEditMode]
public class ME_CustomPostEffectIgnore : MonoBehaviour
{
	[Token(Token = "0x6000289")]
	[Address(RVA = "0xBB3894", Offset = "0xBB3894", VA = "0xBB3894")]
	private void Start()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xBB3908", Offset = "0xBB3908", VA = "0xBB3908")]
	public ME_CustomPostEffectIgnore()
	{
	}
}
[Token(Token = "0x2000081")]
public class ME_LightCurves : MonoBehaviour
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xBB3910", Offset = "0xBB3910", VA = "0xBB3910")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xBB3994", Offset = "0xBB3994", VA = "0xBB3994")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xBB39B8", Offset = "0xBB39B8", VA = "0xBB39B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xBB3A44", Offset = "0xBB3A44", VA = "0xBB3A44")]
	public ME_LightCurves()
	{
	}
}
[Token(Token = "0x2000082")]
public class ME_MeshMaterialEffect : MonoBehaviour
{
	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material Material;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsFirstMaterial;

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xBB3A8C", Offset = "0xBB3A8C", VA = "0xBB3A8C")]
	public ME_MeshMaterialEffect()
	{
	}
}
[Token(Token = "0x2000083")]
[ExecuteInEditMode]
public class ME_ParticleCollisionDecal : MonoBehaviour
{
	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem DecalParticles;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsBilboard;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool InstantiateWhenZeroSpeed;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxGroundAngleDeviation;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinDistanceBetweenDecals;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MinDistanceBetweenSurface;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> collidedGameObjects;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xBB3A94", Offset = "0xBB3A94", VA = "0xBB3A94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xBB3BE4", Offset = "0xBB3BE4", VA = "0xBB3BE4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xBB3C44", Offset = "0xBB3C44", VA = "0xBB3C44")]
	private void CollisionDetect()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xBB3DA8", Offset = "0xBB3DA8", VA = "0xBB3DA8")]
	private void OnParticleCollisionManual(GameObject other, int aliveParticles = -1)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xBB42F0", Offset = "0xBB42F0", VA = "0xBB42F0")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xBB43F8", Offset = "0xBB43F8", VA = "0xBB43F8")]
	public ME_ParticleCollisionDecal()
	{
	}
}
[Token(Token = "0x2000084")]
[ExecuteInEditMode]
public class ME_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool DistanceRelative;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 prevPos;

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xBB44E8", Offset = "0xBB44E8", VA = "0xBB44E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xBB4568", Offset = "0xBB4568", VA = "0xBB4568")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xBB498C", Offset = "0xBB498C", VA = "0xBB498C")]
	public ME_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x2000085")]
public class ME_ParticleTrails : MonoBehaviour
{
	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject TrailPrefab;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<uint, GameObject> hashTrails;

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xBB499C", Offset = "0xBB499C", VA = "0xBB499C")]
	private void Start()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xBB4A60", Offset = "0xBB4A60", VA = "0xBB4A60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xBB4AB4", Offset = "0xBB4AB4", VA = "0xBB4AB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xBB4B00", Offset = "0xBB4B00", VA = "0xBB4B00")]
	private void Update()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xBB4B04", Offset = "0xBB4B04", VA = "0xBB4B04")]
	private void UpdateTrail()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xBB4FF4", Offset = "0xBB4FF4", VA = "0xBB4FF4")]
	private void ClearEmptyHashes()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xBB5274", Offset = "0xBB5274", VA = "0xBB5274")]
	public ME_ParticleTrails()
	{
	}
}
[Token(Token = "0x2000087")]
public class ME_TrailRendererNoise : MonoBehaviour
{
	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MinVertexDistance;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float VertexTime;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TotalLifeTime;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool SmoothCurves;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool IsRibbon;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Frequency;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TimeScale;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Amplitude;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float Gravity;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float TurbulenceStrength;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool Autodestruct;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform t;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 prevPos;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Vector3> points;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<float> lifeTimes;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Vector3> velocities;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float randomOffset;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int curveCount;

	[Token(Token = "0x40003BA")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x40003BB")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x40003BC")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xBB5454", Offset = "0xBB5454", VA = "0xBB5454")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xBB55EC", Offset = "0xBB55EC", VA = "0xBB55EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xBB56D8", Offset = "0xBB56D8", VA = "0xBB56D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xBB5754", Offset = "0xBB5754", VA = "0xBB5754")]
	private void AddNewPoints()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xBB59E4", Offset = "0xBB59E4", VA = "0xBB59E4")]
	private void UpdatetPoints()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xBB5BA8", Offset = "0xBB5BA8", VA = "0xBB5BA8")]
	private void UpdateLineRendererBezier()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xBB5C74", Offset = "0xBB5C74", VA = "0xBB5C74")]
	private void UpdateLineRenderer()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xBB5D0C", Offset = "0xBB5D0C", VA = "0xBB5D0C")]
	private void CalculateTurbuelence(Vector3 position, float speed, float scale, float height, float gravity, int index)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xBB5EC4", Offset = "0xBB5EC4", VA = "0xBB5EC4")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xBB6514", Offset = "0xBB6514", VA = "0xBB6514")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xBB6618", Offset = "0xBB6618", VA = "0xBB6618")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xBB68FC", Offset = "0xBB68FC", VA = "0xBB68FC")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xBB67E8", Offset = "0xBB67E8", VA = "0xBB67E8")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xBB6C54", Offset = "0xBB6C54", VA = "0xBB6C54")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xBB6CE8", Offset = "0xBB6CE8", VA = "0xBB6CE8")]
	public ME_TrailRendererNoise()
	{
	}
}
[Token(Token = "0x2000088")]
[ExecuteInEditMode]
public class PSMeshRendererUpdater : MonoBehaviour
{
	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject meshObject;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color Color;

	[Token(Token = "0x40003BF")]
	private const string materialName = "MeshEffect";

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Material[]> rendererMaterials;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Material[]> skinnedMaterials;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color oldColor;

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xBB6E60", Offset = "0xBB6E60", VA = "0xBB6E60")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xBB6EBC", Offset = "0xBB6EBC", VA = "0xBB6EBC")]
	public void UpdateColor(Color color)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xBB6F94", Offset = "0xBB6F94", VA = "0xBB6F94")]
	public void UpdateColor(float HUE)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xBB7048", Offset = "0xBB7048", VA = "0xBB7048")]
	public void UpdateMeshEffect()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xBB1FE8", Offset = "0xBB1FE8", VA = "0xBB1FE8")]
	public void UpdateMeshEffect(GameObject go)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xBB7138", Offset = "0xBB7138", VA = "0xBB7138")]
	private void UpdatePSMesh(GameObject go)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xBB74B8", Offset = "0xBB74B8", VA = "0xBB74B8")]
	private void AddMaterialToMesh(GameObject go)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xBB7750", Offset = "0xBB7750", VA = "0xBB7750")]
	private Material[] AddToSharedMaterial(Material[] sharedMaterials, ME_MeshMaterialEffect meshMatEffect)
	{
		return null;
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xBB797C", Offset = "0xBB797C", VA = "0xBB797C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xBB7DC4", Offset = "0xBB7DC4", VA = "0xBB7DC4")]
	public PSMeshRendererUpdater()
	{
	}
}
[Token(Token = "0x2000089")]
[RequireComponent(typeof(Camera))]
[ExecuteInEditMode]
public class RFX4_DistortionAndBloom : MonoBehaviour
{
	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseBloom;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Threshold;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public float SoftKnee;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Radius;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Intensity;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool HighQuality;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool AntiFlicker;

	[Token(Token = "0x40003CB")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/RFX4_Bloom";

	[Token(Token = "0x40003CC")]
	private const string shaderAdditiveName = "Hidden/KriptoFX/PostEffects/RFX4_BloomAdditive";

	[Token(Token = "0x40003CD")]
	private const string cameraName = "MobileCamera(Distort_Bloom_Depth)";

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture source;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture depth;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture destination;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int previuosFrameWidth;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int previuosFrameHeight;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float previousScale;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera addCamera;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject tempGO;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool HDRSupported;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Material m_Material;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Material m_MaterialAdditive;

	[Token(Token = "0x40003D9")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x17000035")]
	public Material mat
	{
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xBB7E9C", Offset = "0xBB7E9C", VA = "0xBB7E9C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000036")]
	public Material matAdditive
	{
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xBB8004", Offset = "0xBB8004", VA = "0xBB8004")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xBB7F3C", Offset = "0xBB7F3C", VA = "0xBB7F3C")]
	public static Material CheckShaderAndCreateMaterial(Shader s)
	{
		return null;
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xBB80BC", Offset = "0xBB80BC", VA = "0xBB80BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xBB8240", Offset = "0xBB8240", VA = "0xBB8240")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xBB8464", Offset = "0xBB8464", VA = "0xBB8464")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xBB904C", Offset = "0xBB904C", VA = "0xBB904C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xBB8244", Offset = "0xBB8244", VA = "0xBB8244")]
	private void InitializeRenderTarget()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xBB8874", Offset = "0xBB8874", VA = "0xBB8874")]
	private void UpdateBloom()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xBB862C", Offset = "0xBB862C", VA = "0xBB862C")]
	private void GrabImage()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xBB90C0", Offset = "0xBB90C0", VA = "0xBB90C0")]
	public RFX4_DistortionAndBloom()
	{
	}
}
[Token(Token = "0x200008A")]
public class RFX4_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] ReactivationTimes;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light[] NightLights;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture HUETexture;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseMobileVersion;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RFX4_DistortionAndBloom RFX4_DistortionAndBloom;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int currentNomber;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject currentInstance;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float dpiScale;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool isDay;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float colorHUE;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float startSunIntensity;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion startSunRotation;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color startAmbientLight;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float startAmbientIntencity;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float startReflectionIntencity;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LightShadows startLightShadows;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool isButtonPressed;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	private bool isUsedMobileBloom;

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xBB9164", Offset = "0xBB9164", VA = "0xBB9164")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xBB947C", Offset = "0xBB947C", VA = "0xBB947C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xBB92B4", Offset = "0xBB92B4", VA = "0xBB92B4")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xBBA888", Offset = "0xBBA888", VA = "0xBBA888")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xBBA98C", Offset = "0xBBA98C", VA = "0xBBA98C")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xBBA9C4", Offset = "0xBBA9C4", VA = "0xBBA9C4")]
	public RFX4_DemoGUI()
	{
	}
}
[Token(Token = "0x200008B")]
public class RFX4_FPS : MonoBehaviour
{
	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xBBAAA0", Offset = "0xBBAAA0", VA = "0xBBAAA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xBBAAF0", Offset = "0xBBAAF0", VA = "0xBBAAF0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xBBABE8", Offset = "0xBBABE8", VA = "0xBBABE8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xBBAC3C", Offset = "0xBBAC3C", VA = "0xBBAC3C")]
	public RFX4_FPS()
	{
	}
}
[Token(Token = "0x200008C")]
public class RFX4_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xBBACB0", Offset = "0xBBACB0", VA = "0xBBACB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xBBACDC", Offset = "0xBBACDC", VA = "0xBBACDC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xBBB134", Offset = "0xBBB134", VA = "0xBBB134")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xBBB170", Offset = "0xBBB170", VA = "0xBBB170")]
	public RFX4_MouseOrbit()
	{
	}
}
[Token(Token = "0x200008D")]
public class RFX4_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xBBB18C", Offset = "0xBBB18C", VA = "0xBBB18C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xBBB20C", Offset = "0xBBB20C", VA = "0xBBB20C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xBBB280", Offset = "0xBBB280", VA = "0xBBB280")]
	public RFX4_RealtimeReflection()
	{
	}
}
[Token(Token = "0x200008E")]
public class RFX4_AudioCurves : MonoBehaviour
{
	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsLoop;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool canUpdate;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startVolume;

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xBBB288", Offset = "0xBBB288", VA = "0xBBB288")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xBBB324", Offset = "0xBBB324", VA = "0xBBB324")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xBBB348", Offset = "0xBBB348", VA = "0xBBB348")]
	private void Update()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xBBB3D4", Offset = "0xBBB3D4", VA = "0xBBB3D4")]
	public RFX4_AudioCurves()
	{
	}
}
[Token(Token = "0x200008F")]
public class RFX4_LightCurves : MonoBehaviour
{
	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool canUpdate;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xBBB41C", Offset = "0xBBB41C", VA = "0xBBB41C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xBBB4A0", Offset = "0xBBB4A0", VA = "0xBBB4A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBBB4C4", Offset = "0xBBB4C4", VA = "0xBBB4C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBBB550", Offset = "0xBBB550", VA = "0xBBB550")]
	public RFX4_LightCurves()
	{
	}
}
[Token(Token = "0x2000090")]
public class RFX4_PhysicsForceCurves : MonoBehaviour
{
	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ForceRadius;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ForceMultiplier;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ForceCurve;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ForceMode ForceMode;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsLoop;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float DestoryDistance;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool UseDistanceScale;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve DistanceScaleCurve;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseUPVector;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve DragCurve;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float DragGraphTimeMultiplier;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float DragGraphIntensityMultiplier;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string AffectedName;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float forceAdditionalMultiplier;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool canUpdate;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startTime;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform t;

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBBB598", Offset = "0xBBB598", VA = "0xBBB598")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBBB5BC", Offset = "0xBBB5BC", VA = "0xBBB5BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xBBB5E8", Offset = "0xBBB5E8", VA = "0xBBB5E8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xBBBBC8", Offset = "0xBBBBC8", VA = "0xBBBBC8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xBBBC1C", Offset = "0xBBBC1C", VA = "0xBBBC1C")]
	public RFX4_PhysicsForceCurves()
	{
	}
}
[Token(Token = "0x2000091")]
public class RFX4_ScaleCurves : MonoBehaviour
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int nameId;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Projector proj;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startScale;

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xBBBCE4", Offset = "0xBBBCE4", VA = "0xBBBCE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xBBBDD8", Offset = "0xBBBDD8", VA = "0xBBBDD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xBBBE4C", Offset = "0xBBBE4C", VA = "0xBBBE4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xBBBF58", Offset = "0xBBBF58", VA = "0xBBBF58")]
	public RFX4_ScaleCurves()
	{
	}
}
[Token(Token = "0x2000092")]
public class RFX4_ShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderColorProperty;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient Color;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeMultiplier;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool UseSharedMaterial;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float HUE;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool canUpdate;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int propertyID;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float startTime;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color startColor;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isInitialized;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string shaderProperty;

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xBBBFA0", Offset = "0xBBBFA0", VA = "0xBBBFA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xBBBFA4", Offset = "0xBBBFA4", VA = "0xBBBFA4")]
	private void Init()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xBBC2F0", Offset = "0xBBC2F0", VA = "0xBBC2F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xBBC31C", Offset = "0xBBC31C", VA = "0xBBC31C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xBBC59C", Offset = "0xBBC59C", VA = "0xBBC59C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xBBC650", Offset = "0xBBC650", VA = "0xBBC650")]
	public RFX4_ShaderColorGradient()
	{
	}
}
[Token(Token = "0x2000093")]
public class RFX4_ShaderFloatCurve : MonoBehaviour
{
	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderFloatProperty;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool UseSharedMaterial;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool canUpdate;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startFloat;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int propertyID;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string shaderProperty;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xBBC6D4", Offset = "0xBBC6D4", VA = "0xBBC6D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xBBC9B8", Offset = "0xBBC9B8", VA = "0xBBC9B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xBBCA1C", Offset = "0xBBCA1C", VA = "0xBBCA1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xBBCAAC", Offset = "0xBBCAAC", VA = "0xBBCAAC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xBBCAE4", Offset = "0xBBCAE4", VA = "0xBBCAE4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBBCB8C", Offset = "0xBBCB8C", VA = "0xBBCB8C")]
	public RFX4_ShaderFloatCurve()
	{
	}
}
[Token(Token = "0x2000094")]
public enum RFX4_ShaderProperties
{
	[Token(Token = "0x4000448")]
	_TintColor,
	[Token(Token = "0x4000449")]
	_Cutoff,
	[Token(Token = "0x400044A")]
	_Color,
	[Token(Token = "0x400044B")]
	_EmissionColor,
	[Token(Token = "0x400044C")]
	_MaskPow,
	[Token(Token = "0x400044D")]
	_Cutout,
	[Token(Token = "0x400044E")]
	_Speed,
	[Token(Token = "0x400044F")]
	_BumpAmt
}
[Token(Token = "0x2000095")]
public class RFX4_WindCurves : MonoBehaviour
{
	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve WindCurve;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WindZone windZone;

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBBCBDC", Offset = "0xBBCBDC", VA = "0xBBCBDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xBBCC60", Offset = "0xBBCC60", VA = "0xBBCC60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xBBCC84", Offset = "0xBBCC84", VA = "0xBBCC84")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xBBCD10", Offset = "0xBBCD10", VA = "0xBBCD10")]
	public RFX4_WindCurves()
	{
	}
}
[Token(Token = "0x2000096")]
public class RFX4_EffectSettingColor : MonoBehaviour
{
	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color Color;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color previousColor;

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xBBCD58", Offset = "0xBBCD58", VA = "0xBBCD58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xBBCEC4", Offset = "0xBBCEC4", VA = "0xBBCEC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xBBCD5C", Offset = "0xBBCD5C", VA = "0xBBCD5C")]
	private void UpdateColor()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xBBD074", Offset = "0xBBD074", VA = "0xBBD074")]
	public RFX4_EffectSettingColor()
	{
	}
}
[Token(Token = "0x2000097")]
public class RFX4_EffectSettingPhysxForce : MonoBehaviour
{
	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ForceMultiplier;

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xBBD088", Offset = "0xBBD088", VA = "0xBBD088")]
	private void Update()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xBBD344", Offset = "0xBBD344", VA = "0xBBD344")]
	public RFX4_EffectSettingPhysxForce()
	{
	}
}
[Token(Token = "0x2000098")]
public class RFX4_EffectSettingProjectile : MonoBehaviour
{
	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float FlyDistanceForProjectiles;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SpeedMultiplier;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask CollidesWith;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float startSpeed;

	[Token(Token = "0x400045E")]
	private const string particlesAdditionalName = "Distance";

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xBBD354", Offset = "0xBBD354", VA = "0xBBD354")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xBBD3FC", Offset = "0xBBD3FC", VA = "0xBBD3FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xBBD640", Offset = "0xBBD640", VA = "0xBBD640")]
	public RFX4_EffectSettingProjectile()
	{
	}
}
[Token(Token = "0x2000099")]
public class RFX4_EffectSettingsTimeScale : MonoBehaviour
{
	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Time;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float prevTime;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem[] particles;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xBBD674", Offset = "0xBBD674", VA = "0xBBD674")]
	private void Start()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xBBD6CC", Offset = "0xBBD6CC", VA = "0xBBD6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xBBD758", Offset = "0xBBD758", VA = "0xBBD758")]
	private void UpdateTime()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xBBDA3C", Offset = "0xBBDA3C", VA = "0xBBDA3C")]
	public RFX4_EffectSettingsTimeScale()
	{
	}
}
[Token(Token = "0x200009A")]
public class RFX4_EffectSettingVisible : MonoBehaviour
{
	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float FadeOutTime;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool previousActiveStatus;

	[Token(Token = "0x4000465")]
	private const string rendererAdditionalName = "Loop";

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] colorProperties;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float alpha;

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xBBDA4C", Offset = "0xBBDA4C", VA = "0xBBDA4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xBBE13C", Offset = "0xBBE13C", VA = "0xBBE13C")]
	public RFX4_EffectSettingVisible()
	{
	}
}
[Token(Token = "0x200009B")]
public class RFX4_CollisionPropertyDeactiavtion : MonoBehaviour
{
	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTimeDelay;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindZone windZone;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.CollisionModule collisionModule;

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xBBE4A8", Offset = "0xBBE4A8", VA = "0xBBE4A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xBBE528", Offset = "0xBBE528", VA = "0xBBE528")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xBBE550", Offset = "0xBBE550", VA = "0xBBE550")]
	private void Update()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xBBE58C", Offset = "0xBBE58C", VA = "0xBBE58C")]
	public RFX4_CollisionPropertyDeactiavtion()
	{
	}
}
[Token(Token = "0x200009C")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleCollisionHandler : MonoBehaviour
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] EffectsOnCollision;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Offset;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DestroyTimeDelay;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool UseWorldSpacePosition;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem part;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem ps;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xBBE59C", Offset = "0xBBE59C", VA = "0xBBE59C")]
	private void Start()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xBBE5F4", Offset = "0xBBE5F4", VA = "0xBBE5F4")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xBBE8F0", Offset = "0xBBE8F0", VA = "0xBBE8F0")]
	public RFX4_ParticleCollisionHandler()
	{
	}
}
[Token(Token = "0x200009D")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleLight : MonoBehaviour
{
	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float LightIntencityMultiplayer;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LightShadows Shadows;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light[] lights;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int lightLimit;

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xBBE980", Offset = "0xBBE980", VA = "0xBBE980")]
	private void Start()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xBBEC1C", Offset = "0xBBEC1C", VA = "0xBBEC1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xBBEED4", Offset = "0xBBEED4", VA = "0xBBEED4")]
	public RFX4_ParticleLight()
	{
	}
}
[Token(Token = "0x200009E")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleTrail : MonoBehaviour
{
	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 DefaultSizeMultiplayer;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float VertexLifeTime;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TrailLifeTime;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseShaderMaterial;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material TrailMaterial;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool UseColorOverLifeTime;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Gradient ColorOverLifeTime;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float ColorLifeTime;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool UseUvAnimation;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int TilesX;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int TilesY;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int FPS;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool IsLoop;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float MinVertexDistance;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool GetVelocityFromParticleSystem;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float Gravity;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector3 Force;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float InheritVelocity;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float Drag;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float Frequency;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float OffsetSpeed;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float Amplitude;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool SmoothCurves;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, LineRenderer> dict;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ParticleSystem ps;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TrailRenderer[] trails;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Color psColor;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform targetT;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int layer;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool isLocalSpace;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform t;

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xBBEEEC", Offset = "0xBBEEEC", VA = "0xBBEEEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xBBF8A4", Offset = "0xBBF8A4", VA = "0xBBF8A4")]
	private void ClearTrails()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xBBF108", Offset = "0xBBF108", VA = "0xBBF108")]
	private void Update()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xBBFAC4", Offset = "0xBBFAC4", VA = "0xBBFAC4")]
	private void InitTrailRenderer(GameObject go)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xBBF99C", Offset = "0xBBF99C", VA = "0xBBF99C")]
	private void RemoveEmptyTrails()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xBBFB9C", Offset = "0xBBFB9C", VA = "0xBBFB9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xBBFD9C", Offset = "0xBBFD9C", VA = "0xBBFD9C")]
	public RFX4_ParticleTrail()
	{
	}
}
[Token(Token = "0x200009F")]
[ExecuteInEditMode]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_Turbulence : MonoBehaviour
{
	[Token(Token = "0x20000A0")]
	public enum MoveMethodEnum
	{
		[Token(Token = "0x40004BD")]
		Position,
		[Token(Token = "0x40004BE")]
		Velocity,
		[Token(Token = "0x40004BF")]
		RelativePosition
	}

	[Token(Token = "0x20000A1")]
	public enum PerfomanceEnum
	{
		[Token(Token = "0x40004C1")]
		High,
		[Token(Token = "0x40004C2")]
		Low
	}

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TurbulenceStrenght;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool TurbulenceByTime;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve TurbulenceStrengthByTime;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 Frequency;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 OffsetSpeed;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 Amplitude;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 GlobalForce;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool UseGlobalOffset;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MoveMethodEnum MoveMethod;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PerfomanceEnum Perfomance;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float ThreshholdSpeed;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float lastStopTime;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 currentOffset;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float deltaTime;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float deltaTimeLastUpdateOffset;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem particleSys;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float time;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int currentSplit;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float fpsTime;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int FPS;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int splitUpdate;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private PerfomanceEnum perfomanceOldSettings;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool skipFrame;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform t;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float currentDelay;

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xBBFF3C", Offset = "0xBBFF3C", VA = "0xBBFF3C")]
	private void Start()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xBC00F4", Offset = "0xBC00F4", VA = "0xBC00F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xBC00FC", Offset = "0xBC00FC", VA = "0xBC00FC")]
	private void Update()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xBC00A4", Offset = "0xBC00A4", VA = "0xBC00A4")]
	private void UpdatePerfomanceSettings()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xBC0308", Offset = "0xBC0308", VA = "0xBC0308")]
	private void UpdateTurbulence()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xBC09E4", Offset = "0xBC09E4", VA = "0xBC09E4")]
	public RFX4_Turbulence()
	{
	}
}
[Token(Token = "0x20000A2")]
public class RFX4_CameraShake : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ShakeCurve;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Magnitude;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float DistanceForce;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RotationDamper;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsEnabled;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isPlaying;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool canUpdate;

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xBC0A94", Offset = "0xBC0A94", VA = "0xBC0A94")]
	private void PlayShake()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xBC0B34", Offset = "0xBC0B34", VA = "0xBC0B34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xBC0B50", Offset = "0xBC0B50", VA = "0xBC0B50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xBC0AC0", Offset = "0xBC0AC0", VA = "0xBC0AC0")]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xBC0C98", Offset = "0xBC0C98", VA = "0xBC0C98")]
	public RFX4_CameraShake()
	{
	}
}
[Token(Token = "0x20000A4")]
public static class RFX4_ColorHelper
{
	[Token(Token = "0x20000A5")]
	public struct HSBColor
	{
		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xBC1340", Offset = "0xBC1340", VA = "0xBC1340")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xBBCF04", Offset = "0xBBCF04", VA = "0xBBCF04")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xBC134C", Offset = "0xBC134C", VA = "0xBC134C")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xBBC4B0", Offset = "0xBBC4B0", VA = "0xBBC4B0")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xBB9FFC", Offset = "0xBB9FFC", VA = "0xBB9FFC")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xBC1580", Offset = "0xBC1580", VA = "0xBC1580")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}
}
[Token(Token = "0x20000A6")]
public class RFX4_CopyPosition : MonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CopiedTransform;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xBC19B0", Offset = "0xBC19B0", VA = "0xBC19B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xBC19D4", Offset = "0xBC19D4", VA = "0xBC19D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xBC1A08", Offset = "0xBC1A08", VA = "0xBC1A08")]
	public RFX4_CopyPosition()
	{
	}
}
[Token(Token = "0x20000A7")]
public class RFX4_DeactivateByTime : MonoBehaviour
{
	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTime;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool canUpdateState;

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xBC1A10", Offset = "0xBC1A10", VA = "0xBC1A10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xBC1A1C", Offset = "0xBC1A1C", VA = "0xBC1A1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xBC1A84", Offset = "0xBC1A84", VA = "0xBC1A84")]
	private void DeactivateThis()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xBC1AA8", Offset = "0xBC1AA8", VA = "0xBC1AA8")]
	public RFX4_DeactivateByTime()
	{
	}
}
[Token(Token = "0x20000A8")]
public class RFX4_DeactivateRigidbodyByTime : MonoBehaviour
{
	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelayToDeactivate;

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xC85D94", Offset = "0xC85D94", VA = "0xC85D94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xC85E2C", Offset = "0xC85E2C", VA = "0xC85E2C")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xC85E9C", Offset = "0xC85E9C", VA = "0xC85E9C")]
	public RFX4_DeactivateRigidbodyByTime()
	{
	}
}
[Token(Token = "0x20000A9")]
public class RFX4_DemoReactivation : MonoBehaviour
{
	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ReactivationTime;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Effect;

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xC85EAC", Offset = "0xC85EAC", VA = "0xC85EAC")]
	private void Start()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xC85F00", Offset = "0xC85F00", VA = "0xC85F00")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xC85F38", Offset = "0xC85F38", VA = "0xC85F38")]
	public RFX4_DemoReactivation()
	{
	}
}
[Token(Token = "0x20000AA")]
public class RFX4_EffectEvent : MonoBehaviour
{
	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CharacterEffect;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CharacterAttachPoint;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject CharacterEffect2;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform CharacterAttachPoint2;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Effect;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform AttachPoint;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject AdditionalEffect;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform AdditionalEffectAttachPoint;

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xC85F48", Offset = "0xC85F48", VA = "0xC85F48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xC86084", Offset = "0xC86084", VA = "0xC86084")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xC8610C", Offset = "0xC8610C", VA = "0xC8610C")]
	public void ActivateAdditionalEffect()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xC86194", Offset = "0xC86194", VA = "0xC86194")]
	public void ActivateCharacterEffect()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xC8621C", Offset = "0xC8621C", VA = "0xC8621C")]
	public void ActivateCharacterEffect2()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xC862A4", Offset = "0xC862A4", VA = "0xC862A4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xC86510", Offset = "0xC86510", VA = "0xC86510")]
	public RFX4_EffectEvent()
	{
	}
}
[Token(Token = "0x20000AB")]
[RequireComponent(typeof(Renderer))]
[ExecuteInEditMode]
public class RFX4_MaterialQueue : MonoBehaviour
{
	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int queue;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] queues;

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xC86518", Offset = "0xC86518", VA = "0xC86518")]
	private void Start()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xC86698", Offset = "0xC86698", VA = "0xC86698")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xC8669C", Offset = "0xC8669C", VA = "0xC8669C")]
	private void Update()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xC866C4", Offset = "0xC866C4", VA = "0xC866C4")]
	public RFX4_MaterialQueue()
	{
	}
}
[Token(Token = "0x20000AC")]
public class RFX4_OnEnableResetTransform : MonoBehaviour
{
	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform t;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPosition;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRotation;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startScale;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xC866D4", Offset = "0xC866D4", VA = "0xC866D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xC867B8", Offset = "0xC867B8", VA = "0xC867B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xC8689C", Offset = "0xC8689C", VA = "0xC8689C")]
	public RFX4_OnEnableResetTransform()
	{
	}
}
[Token(Token = "0x20000AD")]
public class RFX4_PhysXSetImpulse : MonoBehaviour
{
	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Force;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ForceMode ForceMode;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rig;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xC868A4", Offset = "0xC868A4", VA = "0xC868A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xC86918", Offset = "0xC86918", VA = "0xC86918")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xC869C4", Offset = "0xC869C4", VA = "0xC869C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xC86A84", Offset = "0xC86A84", VA = "0xC86A84")]
	public RFX4_PhysXSetImpulse()
	{
	}
}
[Token(Token = "0x20000AE")]
public class RFX4_RaycastCollision : MonoBehaviour
{
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RaycastDistance;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Effects;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Offset;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TimeDelay;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float DestroyTime;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UsePivotPosition;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseNormalRotation;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool IsWorldSpace;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool RealTimeUpdateRaycast;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DestroyAfterDisabling;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float HUE;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool canUpdate;

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xC86A94", Offset = "0xC86A94", VA = "0xC86A94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xC870AC", Offset = "0xC870AC", VA = "0xC870AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xC8716C", Offset = "0xC8716C", VA = "0xC8716C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xC872D4", Offset = "0xC872D4", VA = "0xC872D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xC872E4", Offset = "0xC872E4", VA = "0xC872E4")]
	private void LateEnable()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xC86B0C", Offset = "0xC86B0C", VA = "0xC86B0C")]
	private void UpdateRaycast()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xC872E8", Offset = "0xC872E8", VA = "0xC872E8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xC873B8", Offset = "0xC873B8", VA = "0xC873B8")]
	public RFX4_RaycastCollision()
	{
	}
}
[Token(Token = "0x20000AF")]
public class RFX4_ReplaceMaterialByTime : MonoBehaviour
{
	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material ReplacementMaterial;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool ChangeShadow;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool isInitialized;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material mat;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer mshRend;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xC87460", Offset = "0xC87460", VA = "0xC87460")]
	private void Start()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xC87510", Offset = "0xC87510", VA = "0xC87510")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xC8758C", Offset = "0xC8758C", VA = "0xC8758C")]
	private void ReplaceObject()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xC875B0", Offset = "0xC875B0", VA = "0xC875B0")]
	public RFX4_ReplaceMaterialByTime()
	{
	}
}
[Token(Token = "0x20000B0")]
public class RFX4_ReplaceModelOnCollision : MonoBehaviour
{
	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PhysicsObjects;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCollided;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xC875C8", Offset = "0xC875C8", VA = "0xC875C8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xC876DC", Offset = "0xC876DC", VA = "0xC876DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xC877D8", Offset = "0xC877D8", VA = "0xC877D8")]
	public RFX4_ReplaceModelOnCollision()
	{
	}
}
[Token(Token = "0x20000B1")]
public class RFX4_RotateAround : MonoBehaviour
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Offset;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 RotateVector;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float LifeTime;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentTime;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion rotation;

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xC877E0", Offset = "0xC877E0", VA = "0xC877E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xC87830", Offset = "0xC87830", VA = "0xC87830")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xC878C0", Offset = "0xC878C0", VA = "0xC878C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xC87960", Offset = "0xC87960", VA = "0xC87960")]
	public RFX4_RotateAround()
	{
	}
}
[Token(Token = "0x20000B2")]
public class RFX4_SimpleDecal : MonoBehaviour
{
	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Offset;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseNormalRotation;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RaycastHit hit;

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xC879D8", Offset = "0xC879D8", VA = "0xC879D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xC87BC0", Offset = "0xC87BC0", VA = "0xC87BC0")]
	public RFX4_SimpleDecal()
	{
	}
}
[Token(Token = "0x20000B3")]
public class RFX4_StartDelay : MonoBehaviour
{
	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ActivatedGameObject;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xC87BD4", Offset = "0xC87BD4", VA = "0xC87BD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xC87C3C", Offset = "0xC87C3C", VA = "0xC87C3C")]
	private void ActivateGO()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xC87C5C", Offset = "0xC87C5C", VA = "0xC87C5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xC87CA8", Offset = "0xC87CA8", VA = "0xC87CA8")]
	public RFX4_StartDelay()
	{
	}
}
[Token(Token = "0x20000B4")]
public enum RFX4_TextureShaderProperties
{
	[Token(Token = "0x400051A")]
	_MainTex,
	[Token(Token = "0x400051B")]
	_DistortTex,
	[Token(Token = "0x400051C")]
	_Mask,
	[Token(Token = "0x400051D")]
	_Cutout,
	[Token(Token = "0x400051E")]
	_CutoutTex,
	[Token(Token = "0x400051F")]
	_Bump,
	[Token(Token = "0x4000520")]
	_BumpTex,
	[Token(Token = "0x4000521")]
	_EmissionTex
}
[Token(Token = "0x20000B5")]
public class RFX4_TornadoParticles : MonoBehaviour
{
	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material TornadoMaterial;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light myLight;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector4 _twistScale;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int materialID;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xC87CB8", Offset = "0xC87CB8", VA = "0xC87CB8")]
	private void Start()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xC87EC0", Offset = "0xC87EC0", VA = "0xC87EC0")]
	private void Update()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xC8816C", Offset = "0xC8816C", VA = "0xC8816C")]
	public RFX4_TornadoParticles()
	{
	}
}
[Token(Token = "0x20000B6")]
[RequireComponent(typeof(LineRenderer))]
public class RFX4_TrailRenderer : MonoBehaviour
{
	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float VertexLifeTime;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TrailLifeTime;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MinVertexDistance;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Gravity;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 Force;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float InheritVelocity;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Drag;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float Frequency;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float OffsetSpeed;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Amplitude;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool SmoothCurves;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Vector3> positions;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<float> currentTimes;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector3> velocities;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float currentLifeTime;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform t;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 prevPosition;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 startPosition;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int curveCount;

	[Token(Token = "0x4000541")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x4000542")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x4000543")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float currentVelocity;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float turbulenceRandomOffset;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isInitialized;

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xC8817C", Offset = "0xC8817C", VA = "0xC8817C")]
	private void Start()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xC88550", Offset = "0xC88550", VA = "0xC88550")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xC88198", Offset = "0xC88198", VA = "0xC88198")]
	private void Init()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xC88560", Offset = "0xC88560", VA = "0xC88560")]
	private void Update()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xC8920C", Offset = "0xC8920C", VA = "0xC8920C")]
	private int GetLastDeletedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xC8867C", Offset = "0xC8867C", VA = "0xC8867C")]
	private void UpdatePositionsCount()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xC89B88", Offset = "0xC89B88", VA = "0xC89B88")]
	private void AddInterpolatedPositions(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xC89318", Offset = "0xC89318", VA = "0xC89318")]
	private void RemovePositionsBeforeIndex(int lastDeletedIndex)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xC88864", Offset = "0xC88864", VA = "0xC88864")]
	private void UpdateForce()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xC88CE0", Offset = "0xC88CE0", VA = "0xC88CE0")]
	private void UpdateImpulse()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xC88F78", Offset = "0xC88F78", VA = "0xC88F78")]
	private void UpdateVelocity()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xC89434", Offset = "0xC89434", VA = "0xC89434")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xC89A84", Offset = "0xC89A84", VA = "0xC89A84")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xC89EBC", Offset = "0xC89EBC", VA = "0xC89EBC")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xC8A1A0", Offset = "0xC8A1A0", VA = "0xC8A1A0")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xC8A08C", Offset = "0xC8A08C", VA = "0xC8A08C")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xC8A4F8", Offset = "0xC8A4F8", VA = "0xC8A4F8")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xC8A58C", Offset = "0xC8A58C", VA = "0xC8A58C")]
	public RFX4_TrailRenderer()
	{
	}
}
[Token(Token = "0x20000B7")]
public class RFX4_TransformMotion : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	public class RFX4_CollisionInfo : EventArgs
	{
		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit Hit;

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xC8B1F0", Offset = "0xC8B1F0", VA = "0xC8B1F0")]
		public RFX4_CollisionInfo()
		{
		}
	}

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Distance;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Speed;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Dampeen;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MinSpeed;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeDelay;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask CollidesWith;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] EffectsOnCollision;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float CollisionOffset;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float DestroyTimeDelay;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] DeactivatedObjectsOnCollision;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float HUE;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 startPositionLocal;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform t;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 oldPos;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool isCollided;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	private bool isOutDistance;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion startQuaternion;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float currentSpeed;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float currentDelay;

	[Token(Token = "0x400055C")]
	private const float RayCastTolerance = 0.3f;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isInitialized;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	private bool dropFirstFrameForFixUnityBugWithParticles;

	[Token(Token = "0x14000007")]
	public event EventHandler<RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x6000380")]
		[Address(RVA = "0xC8A67C", Offset = "0xC8A67C", VA = "0xC8A67C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000381")]
		[Address(RVA = "0xC8A72C", Offset = "0xC8A72C", VA = "0xC8A72C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xC8A7DC", Offset = "0xC8A7DC", VA = "0xC8A7DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xC8A8F8", Offset = "0xC8A8F8", VA = "0xC8A8F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xC8A908", Offset = "0xC8A908", VA = "0xC8A908")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xC8A86C", Offset = "0xC8A86C", VA = "0xC8A86C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xC8A980", Offset = "0xC8A980", VA = "0xC8A980")]
	private void Update()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xC8A994", Offset = "0xC8A994", VA = "0xC8A994")]
	private void UpdateWorldPosition()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xC8AE58", Offset = "0xC8AE58", VA = "0xC8AE58")]
	private void OnCollisionBehaviour(RaycastHit hit)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xC8A918", Offset = "0xC8A918", VA = "0xC8A918")]
	private void OnCollisionDeactivateBehaviour(bool active)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xC8B248", Offset = "0xC8B248", VA = "0xC8B248")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xC8B34C", Offset = "0xC8B34C", VA = "0xC8B34C")]
	public RFX4_TransformMotion()
	{
	}
}
[Token(Token = "0x20000B9")]
public class RFX4_UVAnimation : MonoBehaviour
{
	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int FPS;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int StartFrameOffset;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float StartDelay;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsReverse;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RFX4_TextureShaderProperties[] TextureNames;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve FrameOverTime;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int count;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer currentRenderer;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Projector projector;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float animationStartTime;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool canUpdate;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int previousIndex;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int totalFrames;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float currentInterpolatedTime;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int currentIndex;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector2 size;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isInitialized;

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xC8B3A0", Offset = "0xC8B3A0", VA = "0xC8B3A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xC8B594", Offset = "0xC8B594", VA = "0xC8B594")]
	private void Start()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xC8B5B0", Offset = "0xC8B5B0", VA = "0xC8B5B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xC8B3B0", Offset = "0xC8B3B0", VA = "0xC8B3B0")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xC8BB30", Offset = "0xC8BB30", VA = "0xC8BB30")]
	private void InitializeMaterial()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xC8B5E8", Offset = "0xC8B5E8", VA = "0xC8B5E8")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xC8B7B0", Offset = "0xC8B7B0", VA = "0xC8B7B0")]
	private void SetSpriteAnimation()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xC8B9C0", Offset = "0xC8B9C0", VA = "0xC8B9C0")]
	private void SetSpriteAnimationIterpolated()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xC8BD60", Offset = "0xC8BD60", VA = "0xC8BD60")]
	public RFX4_UVAnimation()
	{
	}
}
[Token(Token = "0x20000BA")]
public class RFX4_UVScroll : MonoBehaviour
{
	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 UvScrollMultiplier;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RFX4_TextureShaderProperties TextureName;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 uvOffset;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xC8BE04", Offset = "0xC8BE04", VA = "0xC8BE04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xC8C004", Offset = "0xC8C004", VA = "0xC8C004")]
	private void Update()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xC8C0EC", Offset = "0xC8C0EC", VA = "0xC8C0EC")]
	public RFX4_UVScroll()
	{
	}
}
[Token(Token = "0x20000BB")]
public class SoundPlayTime : MonoBehaviour
{
	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool playOnAwake;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool loopCheck;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timer;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waitTime;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float loopTime;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float loopWaitTime;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool flag;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip sound01;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource audioSource;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xC8C150", Offset = "0xC8C150", VA = "0xC8C150")]
	private void Start()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xC8C24C", Offset = "0xC8C24C", VA = "0xC8C24C")]
	private void Update()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xC8C384", Offset = "0xC8C384", VA = "0xC8C384")]
	public SoundPlayTime()
	{
	}
}
[Token(Token = "0x20000BC")]
public class ConGUI : MonoBehaviour
{
	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform mainCamera;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cameraTrs;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int rotSpeed;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] effectObj;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] effectObProj;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int arrayNo;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject nowEffectObj;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] cameraState;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int cameraRotCon;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float num;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float numBck;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 initPos;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool haveProFlg;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject nonProFX;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 tmpPos;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xC8C394", Offset = "0xC8C394", VA = "0xC8C394")]
	private bool visibleBt()
	{
		return default(bool);
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xC8C464", Offset = "0xC8C464", VA = "0xC8C464")]
	private void Start()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xC8C4A8", Offset = "0xC8C4A8", VA = "0xC8C4A8")]
	private void Update()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xC8C58C", Offset = "0xC8C58C", VA = "0xC8C58C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xC8C9A4", Offset = "0xC8C9A4", VA = "0xC8C9A4")]
	private void effectOn()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xC8CA9C", Offset = "0xC8CA9C", VA = "0xC8CA9C")]
	public ConGUI()
	{
	}
}
[Token(Token = "0x20000BD")]
public class Lighting : MonoBehaviour
{
	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lighting;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light lightPower;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool flashFlg;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float flashTimer;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool lightKeepFlg;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float revOnTime;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float keepOnTime;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float keepTime;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool flashingFlg;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float minLight;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxLight;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool lightOffFlg;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float flashingOff;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float flashingOffPower;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float flashingOffIntensity;

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xC8CBE0", Offset = "0xC8CBE0", VA = "0xC8CBE0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xC8CE28", Offset = "0xC8CE28", VA = "0xC8CE28")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xC8CC58", Offset = "0xC8CC58", VA = "0xC8CC58")]
	private IEnumerator flash()
	{
		return null;
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xC8CCCC", Offset = "0xC8CCCC", VA = "0xC8CCCC")]
	private IEnumerator setRev()
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xC8CD40", Offset = "0xC8CD40", VA = "0xC8CD40")]
	private IEnumerator keepOn()
	{
		return null;
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xC8CDB4", Offset = "0xC8CDB4", VA = "0xC8CDB4")]
	private IEnumerator setFlashingOff()
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xC8D02C", Offset = "0xC8D02C", VA = "0xC8D02C")]
	public Lighting()
	{
	}
}
[Token(Token = "0x20000C2")]
public class LookAtTarget : MonoBehaviour
{
	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _target;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float _speed;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 _lookAtTarget;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xC8D524", Offset = "0xC8D524", VA = "0xC8D524")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xC8D5DC", Offset = "0xC8D5DC", VA = "0xC8D5DC")]
	public LookAtTarget()
	{
	}
}
[Token(Token = "0x20000C3")]
public class MouseMove : MonoBehaviour
{
	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float _sensitivity;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 _originalPos;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xC8D5EC", Offset = "0xC8D5EC", VA = "0xC8D5EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xC8D61C", Offset = "0xC8D61C", VA = "0xC8D61C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xC8D6CC", Offset = "0xC8D6CC", VA = "0xC8D6CC")]
	public MouseMove()
	{
	}
}
[Token(Token = "0x20000C4")]
public class SwooshTest : MonoBehaviour
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationClip _animation;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AnimationState _animationState;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int _start;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int _end;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _startN;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _endN;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _time;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _prevTime;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _prevAnimTime;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MeleeWeaponTrail _trail;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _firstFrame;

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xC8D6DC", Offset = "0xC8D6DC", VA = "0xC8D6DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xC8D7B8", Offset = "0xC8D7B8", VA = "0xC8D7B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xC8D898", Offset = "0xC8D898", VA = "0xC8D898")]
	public SwooshTest()
	{
	}
}
[Token(Token = "0x20000C5")]
public class Interpolate
{
	[Token(Token = "0x20000C6")]
	public delegate Vector3 ToVector3<T>(T v);

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xC8D8A8", Offset = "0xC8D8A8", VA = "0xC8D8A8")]
	private static Vector3 Identity(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xC8D8AC", Offset = "0xC8D8AC", VA = "0xC8D8AC")]
	public static IEnumerable<Vector3> NewCatmullRom(Vector3[] points, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x60003CB")]
	private static IEnumerable<Vector3> NewCatmullRom<T>(IList nodes, ToVector3<T> toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xC8D95C", Offset = "0xC8D95C", VA = "0xC8D95C")]
	private static Vector3 CatmullRom(Vector3 previous, Vector3 start, Vector3 end, Vector3 next, float elapsedTime, float duration)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20000C8")]
public class MeleeWeaponTrail : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000C9")]
	public class Point
	{
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeCreated;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 basePosition;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 tipPosition;

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xC8EEEC", Offset = "0xC8EEEC", VA = "0xC8EEEC")]
		public Point()
		{
		}
	}

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool _emit;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _use;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float _emitTime;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material _material;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _lifeTime;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color[] _colors;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float[] _sizes;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float _minVertexDistance;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float _maxVertexDistance;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _minVertexDistanceSqr;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _maxVertexDistanceSqr;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float _maxAngle;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool _autoDestruct;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int subdivisions;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform _base;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform _tip;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Point> _points;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Point> _smoothedPoints;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject _trailObject;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Mesh _trailMesh;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 _lastPosition;

	[Token(Token = "0x17000043")]
	public bool Emit
	{
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xC8DA1C", Offset = "0xC8DA1C", VA = "0xC8DA1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public bool Use
	{
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xC8DA28", Offset = "0xC8DA28", VA = "0xC8DA28")]
		set
		{
		}
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xC8DA34", Offset = "0xC8DA34", VA = "0xC8DA34")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xC8DDA0", Offset = "0xC8DDA0", VA = "0xC8DDA0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xC8DDFC", Offset = "0xC8DDFC", VA = "0xC8DDFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xC8EEF4", Offset = "0xC8EEF4", VA = "0xC8EEF4")]
	private void RemoveOldPoints(List<Point> pointList)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xC8F1F0", Offset = "0xC8F1F0", VA = "0xC8F1F0")]
	public MeleeWeaponTrail()
	{
	}
}
[Token(Token = "0x20000CA")]
public class MicroSplatKeywords : ScriptableObject
{
	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> keywords;

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xC8F2D4", Offset = "0xC8F2D4", VA = "0xC8F2D4")]
	public bool IsKeywordEnabled(string k)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xC8F32C", Offset = "0xC8F32C", VA = "0xC8F32C")]
	public void EnableKeyword(string k)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xC8F3F8", Offset = "0xC8F3F8", VA = "0xC8F3F8")]
	public void DisableKeyword(string k)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xC8F46C", Offset = "0xC8F46C", VA = "0xC8F46C")]
	public MicroSplatKeywords()
	{
	}
}
[Token(Token = "0x20000CB")]
[ExecuteAlways]
public class MicroSplatObject : MonoBehaviour
{
	[Token(Token = "0x20000CC")]
	public struct TerrainDescriptor
	{
		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture heightMap;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture normalMap;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 heightMapScale;
	}

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material templateMaterial;

	[NonSerialized]
	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material matInstance;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material blendMat;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material blendMatInstance;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MicroSplatKeywords keywordSO;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture2D perPixelNormal;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D streamTexture;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MicroSplatPropData propData;

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xC8F4F4", Offset = "0xC8F4F4", VA = "0xC8F4F4")]
	protected long GetOverrideHash()
	{
		return default(long);
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xC8F6F4", Offset = "0xC8F6F4", VA = "0xC8F6F4")]
	protected void SetMap(Material m, string name, Texture tex)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xC8F7A4", Offset = "0xC8F7A4", VA = "0xC8F7A4")]
	protected void ApplySharedData(Material m)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xC8FA2C", Offset = "0xC8FA2C", VA = "0xC8FA2C")]
	protected void ApplyMaps(Material m)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xC8FB44", Offset = "0xC8FB44", VA = "0xC8FB44")]
	protected void ApplyControlTextures(Texture2D[] controls, Material m)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xC8FDC8", Offset = "0xC8FDC8", VA = "0xC8FDC8")]
	protected void SyncBlendMat(Vector3 size)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xC8FFF8", Offset = "0xC8FFF8", VA = "0xC8FFF8", Slot = "4")]
	public virtual TerrainDescriptor GetTerrainDescriptor()
	{
		return default(TerrainDescriptor);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xC90004", Offset = "0xC90004", VA = "0xC90004", Slot = "5")]
	public virtual Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xC90010", Offset = "0xC90010", VA = "0xC90010")]
	public Material GetBlendMatInstance()
	{
		return null;
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xC901F4", Offset = "0xC901F4", VA = "0xC901F4")]
	public void ApplyBlendMap()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xC90320", Offset = "0xC90320", VA = "0xC90320")]
	public void RevisionFromMat()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xC90324", Offset = "0xC90324", VA = "0xC90324")]
	public static void SyncAll()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xC904AC", Offset = "0xC904AC", VA = "0xC904AC")]
	public MicroSplatObject()
	{
	}
}
[Token(Token = "0x20000CD")]
public class MicroSplatPropData : ScriptableObject
{
	[Token(Token = "0x20000CE")]
	public enum PerTexVector2
	{
		[Token(Token = "0x4000600")]
		SplatUVScale = 0,
		[Token(Token = "0x4000601")]
		SplatUVOffset = 2
	}

	[Token(Token = "0x20000CF")]
	public enum PerTexColor
	{
		[Token(Token = "0x4000603")]
		Tint = 4,
		[Token(Token = "0x4000604")]
		SSSRTint = 72,
		[Token(Token = "0x4000605")]
		TraxTint = 84
	}

	[Token(Token = "0x20000D0")]
	public enum PerTexFloat
	{
		[Token(Token = "0x4000607")]
		InterpolationContrast = 5,
		[Token(Token = "0x4000608")]
		NormalStrength = 8,
		[Token(Token = "0x4000609")]
		Smoothness = 9,
		[Token(Token = "0x400060A")]
		AO = 10,
		[Token(Token = "0x400060B")]
		Metallic = 11,
		[Token(Token = "0x400060C")]
		Brightness = 12,
		[Token(Token = "0x400060D")]
		Contrast = 13,
		[Token(Token = "0x400060E")]
		Porosity = 14,
		[Token(Token = "0x400060F")]
		Foam = 15,
		[Token(Token = "0x4000610")]
		DetailNoiseStrength = 16,
		[Token(Token = "0x4000611")]
		DistanceNoiseStrength = 17,
		[Token(Token = "0x4000612")]
		DistanceResample = 18,
		[Token(Token = "0x4000613")]
		DisplacementMip = 19,
		[Token(Token = "0x4000614")]
		GeoTexStrength = 20,
		[Token(Token = "0x4000615")]
		GeoTintStrength = 21,
		[Token(Token = "0x4000616")]
		GeoNormalStrength = 22,
		[Token(Token = "0x4000617")]
		GlobalSmoothMetalAOStength = 23,
		[Token(Token = "0x4000618")]
		DisplacementStength = 24,
		[Token(Token = "0x4000619")]
		DisplacementBias = 25,
		[Token(Token = "0x400061A")]
		DisplacementOffset = 26,
		[Token(Token = "0x400061B")]
		GlobalEmisStength = 27,
		[Token(Token = "0x400061C")]
		NoiseNormal0Strength = 28,
		[Token(Token = "0x400061D")]
		NoiseNormal1Strength = 29,
		[Token(Token = "0x400061E")]
		NoiseNormal2Strength = 30,
		[Token(Token = "0x400061F")]
		WindParticulateStrength = 31,
		[Token(Token = "0x4000620")]
		SnowAmount = 32,
		[Token(Token = "0x4000621")]
		GlitterAmount = 33,
		[Token(Token = "0x4000622")]
		GeoHeightFilter = 34,
		[Token(Token = "0x4000623")]
		GeoHeightFilterStrength = 35,
		[Token(Token = "0x4000624")]
		TriplanarMode = 36,
		[Token(Token = "0x4000625")]
		TriplanarContrast = 37,
		[Token(Token = "0x4000626")]
		StochatsicEnabled = 38,
		[Token(Token = "0x4000627")]
		Saturation = 39,
		[Token(Token = "0x4000628")]
		TextureClusterContrast = 40,
		[Token(Token = "0x4000629")]
		TextureClusterBoost = 41,
		[Token(Token = "0x400062A")]
		HeightOffset = 42,
		[Token(Token = "0x400062B")]
		HeightContrast = 43,
		[Token(Token = "0x400062C")]
		AntiTileArrayNormalStrength = 56,
		[Token(Token = "0x400062D")]
		AntiTileArrayDetailStrength = 57,
		[Token(Token = "0x400062E")]
		AntiTileArrayDistanceStrength = 58,
		[Token(Token = "0x400062F")]
		DisplaceShaping = 59,
		[Token(Token = "0x4000630")]
		UVRotation = 64,
		[Token(Token = "0x4000631")]
		TriplanarRotationX = 65,
		[Token(Token = "0x4000632")]
		TriplanarRotationY = 66,
		[Token(Token = "0x4000633")]
		FuzzyShadingCore = 68,
		[Token(Token = "0x4000634")]
		FuzzyShadingEdge = 69,
		[Token(Token = "0x4000635")]
		FuzzyShadingPower = 70,
		[Token(Token = "0x4000636")]
		SSSThickness = 75,
		[Token(Token = "0x4000637")]
		CurveInterpolator = 76,
		[Token(Token = "0x4000638")]
		TraxDigDepth = 80,
		[Token(Token = "0x4000639")]
		TraxOpacity = 81,
		[Token(Token = "0x400063A")]
		TraxNormalStrength = 82,
		[Token(Token = "0x400063B")]
		NoiseHeightFrequency = 88,
		[Token(Token = "0x400063C")]
		NoiseHeightAmplitude = 89,
		[Token(Token = "0x400063D")]
		NoiseUVFrequency = 90,
		[Token(Token = "0x400063E")]
		NoiseUVAmplitude = 91,
		[Token(Token = "0x400063F")]
		ColorIntensity = 92,
		[Token(Token = "0x4000640")]
		ScatterBlendMode = 98,
		[Token(Token = "0x4000641")]
		ScatterAlphaMult = 99,
		[Token(Token = "0x4000642")]
		ScatterDistanceFade = 104,
		[Token(Token = "0x4000643")]
		RimPower = 105
	}

	[Token(Token = "0x40005F5")]
	public const int sMaxTextures = 32;

	[Token(Token = "0x40005F6")]
	public const int sMaxAttributes = 32;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color[] values;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D propTex;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve geoCurve;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D geoTex;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve geoSlopeFilter;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture2D geoSlopeTex;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve globalSlopeFilter;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture2D globalSlopeTex;

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xC904B4", Offset = "0xC904B4", VA = "0xC904B4")]
	private void RevisionData()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xC90610", Offset = "0xC90610", VA = "0xC90610")]
	public Color GetValue(int x, int y)
	{
		return default(Color);
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xC90664", Offset = "0xC90664", VA = "0xC90664")]
	public void SetValue(int x, int y, Color c)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xC906D8", Offset = "0xC906D8", VA = "0xC906D8")]
	public void SetValue(int x, int y, int channel, float value)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xC90840", Offset = "0xC90840", VA = "0xC90840")]
	public void SetValue(int x, int y, int channel, Vector2 value)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xC908CC", Offset = "0xC908CC", VA = "0xC908CC")]
	public void SetValue(int textureIndex, PerTexFloat channel, float value)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xC90A0C", Offset = "0xC90A0C", VA = "0xC90A0C")]
	public void SetValue(int textureIndex, PerTexColor channel, Color value)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xC90A34", Offset = "0xC90A34", VA = "0xC90A34")]
	public void SetValue(int textureIndex, PerTexVector2 channel, Vector2 value)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xC8F860", Offset = "0xC8F860", VA = "0xC8F860")]
	public Texture2D GetTexture()
	{
		return null;
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xC90B74", Offset = "0xC90B74", VA = "0xC90B74")]
	public Texture2D GetGeoCurve()
	{
		return null;
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xC90CA4", Offset = "0xC90CA4", VA = "0xC90CA4")]
	public Texture2D GetGeoSlopeFilter()
	{
		return null;
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xC90DD4", Offset = "0xC90DD4", VA = "0xC90DD4")]
	public Texture2D GetGlobalSlopeFilter()
	{
		return null;
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xC90F04", Offset = "0xC90F04", VA = "0xC90F04")]
	public MicroSplatPropData()
	{
	}
}
[Token(Token = "0x20000D1")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class MicroSplatTerrain : MicroSplatObject
{
	[Token(Token = "0x20000D2")]
	public delegate void MaterialSyncAll();

	[Token(Token = "0x20000D3")]
	public delegate void MaterialSync(Material m);

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<MicroSplatTerrain> sInstances;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Terrain terrain;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Texture2D customControl0;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D customControl1;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture2D customControl2;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture2D customControl3;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Texture2D customControl4;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture2D customControl5;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Texture2D customControl6;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Texture2D customControl7;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool reenabled;

	[Token(Token = "0x14000008")]
	public static event MaterialSyncAll OnMaterialSyncAll
	{
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xC91004", Offset = "0xC91004", VA = "0xC91004")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xC910DC", Offset = "0xC910DC", VA = "0xC910DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event MaterialSync OnMaterialSync
	{
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xC911B4", Offset = "0xC911B4", VA = "0xC911B4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000400")]
		[Address(RVA = "0xC91250", Offset = "0xC91250", VA = "0xC91250")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xC912EC", Offset = "0xC912EC", VA = "0xC912EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xC91344", Offset = "0xC91344", VA = "0xC91344")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xC91AB4", Offset = "0xC91AB4", VA = "0xC91AB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xC91AB8", Offset = "0xC91AB8", VA = "0xC91AB8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xC91B4C", Offset = "0xC91B4C", VA = "0xC91B4C")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xC91C28", Offset = "0xC91C28", VA = "0xC91C28", Slot = "4")]
	public override TerrainDescriptor GetTerrainDescriptor()
	{
		return default(TerrainDescriptor);
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xC91470", Offset = "0xC91470", VA = "0xC91470")]
	public void Sync()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xC91D40", Offset = "0xC91D40", VA = "0xC91D40", Slot = "5")]
	public override Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xC9039C", Offset = "0xC9039C", VA = "0xC9039C")]
	public new static void SyncAll()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xC91D8C", Offset = "0xC91D8C", VA = "0xC91D8C")]
	public MicroSplatTerrain()
	{
	}
}
[Token(Token = "0x20000D4")]
[ExecuteInEditMode]
public class ShurikenToSpritesheetGameViewGuide : MonoBehaviour
{
	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 position;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 size;

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xC92054", Offset = "0xC92054", VA = "0xC92054")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xC921E0", Offset = "0xC921E0", VA = "0xC921E0")]
	public ShurikenToSpritesheetGameViewGuide()
	{
	}
}
[Token(Token = "0x20000D5")]
public class StormVFXTerrainDemoCamera : MonoBehaviour
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float height;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float acceleration;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float deceleration;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 velocity;

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xC921E8", Offset = "0xC921E8", VA = "0xC921E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xC92738", Offset = "0xC92738", VA = "0xC92738")]
	public StormVFXTerrainDemoCamera()
	{
	}
}
[Token(Token = "0x20000D6")]
public class StormVFXTerrainDemoFollowTargetPosition : MonoBehaviour
{
	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xC9274C", Offset = "0xC9274C", VA = "0xC9274C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xC9278C", Offset = "0xC9278C", VA = "0xC9278C")]
	public StormVFXTerrainDemoFollowTargetPosition()
	{
	}
}
[Token(Token = "0x20000D7")]
public class ParticleSystemTimeRemap : MonoBehaviour
{
	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool reverseSimulation;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float elapsedTime;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve simulationSpeedOverTime;

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xC92794", Offset = "0xC92794", VA = "0xC92794")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xC92994", Offset = "0xC92994", VA = "0xC92994")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xC929F4", Offset = "0xC929F4", VA = "0xC929F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xC92D74", Offset = "0xC92D74", VA = "0xC92D74")]
	public ParticleSystemTimeRemap()
	{
	}
}
[Token(Token = "0x20000D8")]
public class RewindParticleSystem : MonoBehaviour
{
	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xC92DC8", Offset = "0xC92DC8", VA = "0xC92DC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xC92F90", Offset = "0xC92F90", VA = "0xC92F90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xC92FF0", Offset = "0xC92FF0", VA = "0xC92FF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xC932E8", Offset = "0xC932E8", VA = "0xC932E8")]
	public RewindParticleSystem()
	{
	}
}
[Token(Token = "0x20000D9")]
public class RewindParticleSystemSimple : MonoBehaviour
{
	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float simulationTime;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float startTime;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float internalStartTime;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float simulationSpeed;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool rewind;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xC93304", Offset = "0xC93304", VA = "0xC93304")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xC93414", Offset = "0xC93414", VA = "0xC93414")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xC93474", Offset = "0xC93474", VA = "0xC93474")]
	private void Update()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xC93678", Offset = "0xC93678", VA = "0xC93678")]
	public RewindParticleSystemSimple()
	{
	}
}
[Token(Token = "0x20000DA")]
public class RewindParticleSystemSuperSimple : MonoBehaviour
{
	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] simulationTimes;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startTime;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float simulationSpeedScale;

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xC93698", Offset = "0xC93698", VA = "0xC93698")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xC93734", Offset = "0xC93734", VA = "0xC93734")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xC937C4", Offset = "0xC937C4", VA = "0xC937C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xC93AA4", Offset = "0xC93AA4", VA = "0xC93AA4")]
	public RewindParticleSystemSuperSimple()
	{
	}
}
[Token(Token = "0x20000DB")]
public class ParticleForceFieldsDemo : MonoBehaviour
{
	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text FPSText;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text particleCountText;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle postProcessingToggle;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MonoBehaviour postProcessing;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem particleSystem;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.EmissionModule particleSystemEmissionModule;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text maxParticlesText;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text particlesPerSecondText;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider maxParticlesSlider;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider particlesPerSecondSlider;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AttractionParticleForceField attractionParticleForceField;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text attractionParticleForceFieldRadiusText;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text attractionParticleForceFieldMaxForceText;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text attractionParticleForceFieldArrivalRadiusText;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text attractionParticleForceFieldArrivedRadiusText;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text attractionParticleForceFieldPositionTextX;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text attractionParticleForceFieldPositionTextY;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text attractionParticleForceFieldPositionTextZ;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Slider attractionParticleForceFieldRadiusSlider;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Slider attractionParticleForceFieldMaxForceSlider;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Slider attractionParticleForceFieldArrivalRadiusSlider;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Slider attractionParticleForceFieldArrivedRadiusSlider;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Slider attractionParticleForceFieldPositionSliderX;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Slider attractionParticleForceFieldPositionSliderY;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Slider attractionParticleForceFieldPositionSliderZ;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public VortexParticleForceField vortexParticleForceField;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text vortexParticleForceFieldRadiusText;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text vortexParticleForceFieldMaxForceText;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text vortexParticleForceFieldRotationTextX;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Text vortexParticleForceFieldRotationTextY;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Text vortexParticleForceFieldRotationTextZ;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Text vortexParticleForceFieldPositionTextX;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Text vortexParticleForceFieldPositionTextY;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Text vortexParticleForceFieldPositionTextZ;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Slider vortexParticleForceFieldRadiusSlider;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Slider vortexParticleForceFieldMaxForceSlider;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Slider vortexParticleForceFieldRotationSliderX;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Slider vortexParticleForceFieldRotationSliderY;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Slider vortexParticleForceFieldRotationSliderZ;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Slider vortexParticleForceFieldPositionSliderX;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Slider vortexParticleForceFieldPositionSliderY;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Slider vortexParticleForceFieldPositionSliderZ;

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xC93AB8", Offset = "0xC93AB8", VA = "0xC93AB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xC9456C", Offset = "0xC9456C", VA = "0xC9456C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xC94678", Offset = "0xC94678", VA = "0xC94678")]
	public void ReloadScene()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xC946E8", Offset = "0xC946E8", VA = "0xC946E8")]
	public void SetMaxParticles(float value)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xC947A0", Offset = "0xC947A0", VA = "0xC947A0")]
	public void SetParticleEmissionPerSecond(float value)
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xC94868", Offset = "0xC94868", VA = "0xC94868")]
	public void SetAttractionParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xC94910", Offset = "0xC94910", VA = "0xC94910")]
	public void SetAttractionParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xC949B8", Offset = "0xC949B8", VA = "0xC949B8")]
	public void SetAttractionParticleForceFieldArrivalRadius(float value)
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xC94A60", Offset = "0xC94A60", VA = "0xC94A60")]
	public void SetAttractionParticleForceFieldArrivedRadius(float value)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xC94B08", Offset = "0xC94B08", VA = "0xC94B08")]
	public void SetAttractionParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xC94BF8", Offset = "0xC94BF8", VA = "0xC94BF8")]
	public void SetAttractionParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xC94CE8", Offset = "0xC94CE8", VA = "0xC94CE8")]
	public void SetAttractionParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xC94DD8", Offset = "0xC94DD8", VA = "0xC94DD8")]
	public void SetVortexParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xC94E80", Offset = "0xC94E80", VA = "0xC94E80")]
	public void SetVortexParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xC94F28", Offset = "0xC94F28", VA = "0xC94F28")]
	public void SetVortexParticleForceFieldRotationX(float value)
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xC95018", Offset = "0xC95018", VA = "0xC95018")]
	public void SetVortexParticleForceFieldRotationY(float value)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xC95108", Offset = "0xC95108", VA = "0xC95108")]
	public void SetVortexParticleForceFieldRotationZ(float value)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xC951F8", Offset = "0xC951F8", VA = "0xC951F8")]
	public void SetVortexParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xC952E8", Offset = "0xC952E8", VA = "0xC952E8")]
	public void SetVortexParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xC953D8", Offset = "0xC953D8", VA = "0xC953D8")]
	public void SetVortexParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xC954C8", Offset = "0xC954C8", VA = "0xC954C8")]
	public ParticleForceFieldsDemo()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ParticleForceFieldsDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotationLimit;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xC954D0", Offset = "0xC954D0", VA = "0xC954D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xC9550C", Offset = "0xC9550C", VA = "0xC9550C")]
	private void Update()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xC95708", Offset = "0xC95708", VA = "0xC95708")]
	public ParticleForceFieldsDemo_CameraRig()
	{
	}
}
[Token(Token = "0x20000DD")]
public class ParticlePlexusDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotationLimit;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xC95724", Offset = "0xC95724", VA = "0xC95724")]
	private void Start()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xC95760", Offset = "0xC95760", VA = "0xC95760")]
	private void Update()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xC9595C", Offset = "0xC9595C", VA = "0xC9595C")]
	public ParticlePlexusDemo_CameraRig()
	{
	}
}
[Token(Token = "0x20000DE")]
[ExecuteInEditMode]
public class NM_Wind : MonoBehaviour
{
	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float WindSpeed;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Turbulence;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D NoiseTexture;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FlexNoiseWorldSize;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ShiverNoiseWorldSize;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D GustMaskTexture;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float GustWorldSize;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float GustSpeed;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float GustScale;

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xC95978", Offset = "0xC95978", VA = "0xC95978")]
	private void Start()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xC95B3C", Offset = "0xC95B3C", VA = "0xC95B3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xC95B40", Offset = "0xC95B40", VA = "0xC95B40")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xC9597C", Offset = "0xC9597C", VA = "0xC9597C")]
	private void ApplySettings()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xC95B44", Offset = "0xC95B44", VA = "0xC95B44")]
	private Vector4 GetDirectionAndSpeed()
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xC95C48", Offset = "0xC95C48", VA = "0xC95C48")]
	public NM_Wind()
	{
	}
}
[Token(Token = "0x20000DF")]
[RequireComponent(typeof(MeshFilter))]
public class LakePolygon : MonoBehaviour
{
	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LakePolygonProfile currentProfile;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LakePolygonProfile oldProfile;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Vector3> points;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vector3> splinePoints;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float distSmooth;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float uvScale;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float distSmoothStart;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int currentSplatMap;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float maximumTriangleSize;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float traingleDensity;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float height;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool lockHeight;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float yOffset;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float trianglesGenerated;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Mesh currentMesh;

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xC95C7C", Offset = "0xC95C7C", VA = "0xC95C7C")]
	public void AddPoint(Vector3 position)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xC95D54", Offset = "0xC95D54", VA = "0xC95D54")]
	public void AddPointAfter(int i)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xC95FA0", Offset = "0xC95FA0", VA = "0xC95FA0")]
	public void ChangePointPosition(int i, Vector3 position)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xC96020", Offset = "0xC96020", VA = "0xC96020")]
	public void RemovePoint(int i)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xC9609C", Offset = "0xC9609C", VA = "0xC9609C")]
	public void RemovePoints(int fromID = -1)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xC96108", Offset = "0xC96108", VA = "0xC96108")]
	private void CenterPivot()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xC962A4", Offset = "0xC962A4", VA = "0xC962A4")]
	public void GeneratePolygon()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xC97464", Offset = "0xC97464", VA = "0xC97464")]
	public static LakePolygon CreatePolygon(Material material, [Optional] List<Vector3> positions)
	{
		return null;
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xC97204", Offset = "0xC97204", VA = "0xC97204")]
	private void DisplayCatmullRomSpline(int pos)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xC975F8", Offset = "0xC975F8", VA = "0xC975F8")]
	public int ClampListPos(int pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xC97674", Offset = "0xC97674", VA = "0xC97674")]
	private Vector3 GetCatmullRomPosition(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xC9777C", Offset = "0xC9777C", VA = "0xC9777C")]
	public LakePolygon()
	{
	}
}
[Token(Token = "0x20000E0")]
public class LakePolygonProfile : ScriptableObject
{
	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material lakeMaterial;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distSmooth;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float uvScale;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distSmoothStart;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int currentSplatMap;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maximumTriangleSize;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float traingleDensity;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int biomeType;

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xD3DB9C", Offset = "0xD3DB9C", VA = "0xD3DB9C")]
	public LakePolygonProfile()
	{
	}
}
[Token(Token = "0x20000E1")]
public class MeshColoringRam : MonoBehaviour
{
	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float height;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float threshold;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoColor;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool newMesh;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 oldPosition;

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xD3DDF4", Offset = "0xD3DDF4", VA = "0xD3DDF4")]
	public MeshColoringRam()
	{
	}
}
[Token(Token = "0x20000E2")]
[RequireComponent(typeof(MeshFilter))]
public class RamSpline : MonoBehaviour
{
	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SplineProfile currentProfile;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SplineProfile oldProfile;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<RamSpline> beginnigChildSplines;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<RamSpline> endingChildSplines;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RamSpline beginningSpline;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RamSpline endingSpline;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int beginningConnectionID;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int endingConnectionID;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float beginningMinWidth;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float beginningMaxWidth;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float endingMinWidth;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float endingMaxWidth;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int toolbarInt;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool invertUVDirection;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool uvRotation;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MeshFilter meshfilter;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<Vector4> controlPoints;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<Quaternion> controlPointsRotations;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<Quaternion> controlPointsOrientation;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Vector3> controlPointsUp;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<Vector3> controlPointsDown;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<float> controlPointsSnap;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve meshCurve;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<AnimationCurve> controlPointsMeshCurves;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool normalFromRaycast;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool snapToTerrain;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public LayerMask snapMask;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<Vector3> points;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public List<Vector3> pointsUp;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public List<Vector3> pointsDown;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<Vector3> points2;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<Vector3> verticesBeginning;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public List<Vector3> verticesEnding;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<Vector3> normalsBeginning;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public List<Vector3> normalsEnding;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<float> widths;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<float> snaps;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<float> lerpValues;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public List<Quaternion> orientations;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public List<Vector3> tangents;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public List<Vector3> normalsList;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Color[] colors;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public List<Vector2> colorsFlowMap;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool generateOnStart;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float minVal;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float maxVal;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public float width;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public int vertsInShape;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public float traingleDensity;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float uvScale;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Material oldMaterial;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public bool showVertexColors;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
	public bool showFlowMap;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
	public bool overrideFlowMap;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x163")]
	public bool drawOnMesh;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public bool drawOnMeshFlowMap;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
	public bool uvScaleOverride;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x166")]
	public bool debug;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Color drawColor;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public bool drawOnMultiple;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public float flowSpeed;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public float flowDirection;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public AnimationCurve flowFlat;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public AnimationCurve flowWaterfall;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public float opacity;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public float drawSize;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public float length;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public float fulllength;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public float minMaxWidth;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public float uvWidth;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public float uvBeginning;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	public bool receiveShadows;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public ShadowCastingMode shadowCastingMode;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public bool generateMeshParts;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public int meshPartsCount;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public List<Transform> meshesPartTransforms;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public float simulatedRiverLength;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	public int simulatedRiverPoints;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public float simulationMinStepSize;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	public int detailTerrain;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public int detailTerrainForward;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public float terrainAdditionalWidth;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public float terrainSmoothMultiplier;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public float distSmooth;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	public float distSmoothStart;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public int currentSplatMap;

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xD3DE64", Offset = "0xD3DE64", VA = "0xD3DE64")]
	public void Start()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xD3ECF4", Offset = "0xD3ECF4", VA = "0xD3ECF4")]
	public static RamSpline CreateSpline([Optional] Material splineMaterial, [Optional] List<Vector4> positions)
	{
		return null;
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xD3EE88", Offset = "0xD3EE88", VA = "0xD3EE88")]
	public void AddPoint(Vector4 position)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xD3F238", Offset = "0xD3F238", VA = "0xD3F238")]
	public void AddPointAfter(int i)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xD3F690", Offset = "0xD3F690", VA = "0xD3F690")]
	public void ChangePointPosition(int i, Vector3 position)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xD3F698", Offset = "0xD3F698", VA = "0xD3F698")]
	public void ChangePointPosition(int i, Vector4 position)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xD3F74C", Offset = "0xD3F74C", VA = "0xD3F74C")]
	public void RemovePoint(int i)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xD3F840", Offset = "0xD3F840", VA = "0xD3F840")]
	public void RemovePoints(int fromID = -1)
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xD3F8AC", Offset = "0xD3F8AC", VA = "0xD3F8AC")]
	public void GenerateBeginningParentBased()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xD3FB8C", Offset = "0xD3FB8C", VA = "0xD3FB8C")]
	public void GenerateEndingParentBased()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xD3DE74", Offset = "0xD3DE74", VA = "0xD3DE74")]
	public void GenerateSpline([Optional] List<RamSpline> generatedSplines)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xD3FE70", Offset = "0xD3FE70", VA = "0xD3FE70")]
	private void CalculateCatmullRomSideSplines(List<Vector4> controlPoints, int pos)
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xD406B4", Offset = "0xD406B4", VA = "0xD406B4")]
	private void CalculateCatmullRomSplineParameters(List<Vector4> controlPoints, int pos, bool initialPoints = false)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xD4098C", Offset = "0xD4098C", VA = "0xD4098C")]
	private void CalculateCatmullRomSpline(List<Vector3> controlPoints, int pos, ref List<Vector3> points)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xD43DE4", Offset = "0xD43DE4", VA = "0xD43DE4")]
	private void CalculatePointPosition(List<Vector3> controlPoints, int pos, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t, ref List<Vector3> points)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xD433B4", Offset = "0xD433B4", VA = "0xD433B4")]
	private void CalculatePointParameters(List<Vector4> controlPoints, int pos, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xD430F4", Offset = "0xD430F4", VA = "0xD430F4")]
	private int ClampListPos(int pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xD43170", Offset = "0xD43170", VA = "0xD43170")]
	private Vector3 GetCatmullRomPosition(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xD43278", Offset = "0xD43278", VA = "0xD43278")]
	private Vector3 GetCatmullRomTangent(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xD43368", Offset = "0xD43368", VA = "0xD43368")]
	private Vector3 CalculateNormal(Vector3 tangent, Vector3 up)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xD40C60", Offset = "0xD40C60", VA = "0xD40C60")]
	private void GenerateMesh(ref Mesh mesh)
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xD4410C", Offset = "0xD4410C", VA = "0xD4410C")]
	public void GenerateMeshParts(Mesh baseMesh)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xD44094", Offset = "0xD44094", VA = "0xD44094")]
	private float FlowCalculate(float u, float normalY)
	{
		return default(float);
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xD45170", Offset = "0xD45170", VA = "0xD45170")]
	public RamSpline()
	{
	}
}
[Token(Token = "0x20000E3")]
public class SplineProfile : ScriptableObject
{
	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material splineMaterial;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve meshCurve;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minVal;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxVal;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int vertsInShape;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float traingleDensity;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float uvScale;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool uvRotation;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve flowFlat;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve flowWaterfall;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve terrainCarve;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float distSmooth;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float distSmoothStart;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve terrainPaintCarve;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool receiveShadows;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ShadowCastingMode shadowCastingMode;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int biomeType;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xD45C88", Offset = "0xD45C88", VA = "0xD45C88")]
	public SplineProfile()
	{
	}
}
[Token(Token = "0x20000E4")]
public class ColorPicker_Material : MonoBehaviour
{
	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material targetSharedMaterial;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D colorPickerTexture;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int guiTextureX;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int guiTextureY;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int guiTextureWidth;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int guiTextureHeight;

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xD461DC", Offset = "0xD461DC", VA = "0xD461DC")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xD46348", Offset = "0xD46348", VA = "0xD46348")]
	public ColorPicker_Material()
	{
	}
}
[Token(Token = "0x20000E5")]
public class SmoothCameraOrbit : MonoBehaviour
{
	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDistance;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSpeed;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySpeed;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int yMinLimit;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int yMaxLimit;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int zoomRate;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float panSpeed;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zoomDampening;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float autoRotate;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float xDeg;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float yDeg;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float currentDistance;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float desiredDistance;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion currentRotation;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion desiredRotation;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion rotation;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 position;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float idleTimer;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float idleSmooth;

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xD46358", Offset = "0xD46358", VA = "0xD46358")]
	private void Start()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xD46854", Offset = "0xD46854", VA = "0xD46854")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xD4635C", Offset = "0xD4635C", VA = "0xD4635C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xD46858", Offset = "0xD46858", VA = "0xD46858")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xD46DC8", Offset = "0xD46DC8", VA = "0xD46DC8")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xD46E04", Offset = "0xD46E04", VA = "0xD46E04")]
	public SmoothCameraOrbit()
	{
	}
}
[Token(Token = "0x20000E6")]
public class DynamicRayChanger : MonoBehaviour
{
	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject dragObj;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Rays;

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xD46E48", Offset = "0xD46E48", VA = "0xD46E48")]
	private void Update()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xD4716C", Offset = "0xD4716C", VA = "0xD4716C")]
	public void LoadScene(int i)
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xD471C4", Offset = "0xD471C4", VA = "0xD471C4")]
	public DynamicRayChanger()
	{
	}
}
[Token(Token = "0x20000E7")]
public class RayHandler : MonoBehaviour
{
	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RayDesigner> Rays;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int UseRay;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform Hand;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 StandardTargetPoint;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 MousePosDelayed;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Animator animator;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 NormalPos;

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xD471CC", Offset = "0xD471CC", VA = "0xD471CC")]
	public void LoadScene(int i)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xD47224", Offset = "0xD47224", VA = "0xD47224")]
	private void Start()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xD47370", Offset = "0xD47370", VA = "0xD47370")]
	private void Update()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xD47984", Offset = "0xD47984", VA = "0xD47984")]
	public void Activate()
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xD479E4", Offset = "0xD479E4", VA = "0xD479E4")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xD47A44", Offset = "0xD47A44", VA = "0xD47A44")]
	public RayHandler()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E8")]
public class RayData
{
	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RayDesigner.FaceMode faceMode;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject RayHolder;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter meshFilter;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material Mat;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int Steps;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int Sides;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve Shape;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve AmplitudeMask;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float WidthAmplitude;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float TextureSpeed;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float DistortionSpeed;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem StartEffects;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ParticleSystem HitEffects;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ParticleSystem EndEffects;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Light PointLights;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Mesh mesh;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion dir;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float lower;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float Width;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int index;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3[] Vertices;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3[] Normals;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector2[] UVs;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int[] Triangles;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color[] VertColor;

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xD47B0C", Offset = "0xD47B0C", VA = "0xD47B0C")]
	public Mesh CreateMesh(Transform _parent, Vector3[] _BezierPoints, float _Fade)
	{
		return null;
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xD4D838", Offset = "0xD4D838", VA = "0xD4D838")]
	public RayData()
	{
	}
}
[Token(Token = "0x20000E9")]
[ExecuteInEditMode]
public class RayDesigner : MonoBehaviour
{
	[Token(Token = "0x20000EA")]
	public enum FaceMode
	{
		[Token(Token = "0x400079A")]
		Camera,
		[Token(Token = "0x400079B")]
		Cross,
		[Token(Token = "0x400079C")]
		Horizontal,
		[Token(Token = "0x400079D")]
		Vertical,
		[Token(Token = "0x400079E")]
		Tube,
		[Token(Token = "0x400079F")]
		CameraSymmetric,
		[Token(Token = "0x40007A0")]
		CrossSymmetric,
		[Token(Token = "0x40007A1")]
		HorizontalSymmetric,
		[Token(Token = "0x40007A2")]
		VerticalSymmetric
	}

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RayData> Rays;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject StartPoint;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject EndPoint;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ControlPointOne;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject ControlPointTwo;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool RayIsActive;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool Simulate;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool IsDynamic;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float FadeIn;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float FadeTarget;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float FadeSpeed;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem StartEffect;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem HitEffect;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Light StartLight;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Light EndLight;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve StartLightIntensityOverTime;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationCurve EndLightIntensityOverTime;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RayDesignerBezier b;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Mesh MeshBuffer;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] BezierPoints;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float time;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float step;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color ColorBuffer;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector2 Offset1;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector2 Offset2;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool ActiveOnStart;

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xD4D92C", Offset = "0xD4D92C", VA = "0xD4D92C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xD4DC5C", Offset = "0xD4DC5C", VA = "0xD4DC5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xD4DD34", Offset = "0xD4DD34", VA = "0xD4DD34")]
	public void Update()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xD4E8F0", Offset = "0xD4E8F0", VA = "0xD4E8F0")]
	private void CheckPoints()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xD4ECF0", Offset = "0xD4ECF0", VA = "0xD4ECF0")]
	public void CalculateBezier(Vector3 _SP, Vector3 _EP, Vector3 _CP1, Vector3 _CP2, int _Steps)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xD4EE94", Offset = "0xD4EE94", VA = "0xD4EE94")]
	private void UpdateMaterials()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xD4F370", Offset = "0xD4F370", VA = "0xD4F370")]
	public void AddRay()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xD4F86C", Offset = "0xD4F86C", VA = "0xD4F86C")]
	public void DuplicateRay(int _index)
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xD500B0", Offset = "0xD500B0", VA = "0xD500B0")]
	public void RemoveRay()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xD4DB7C", Offset = "0xD4DB7C", VA = "0xD4DB7C")]
	public void Show()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xD4DC74", Offset = "0xD4DC74", VA = "0xD4DC74")]
	public void Hide()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xD5018C", Offset = "0xD5018C", VA = "0xD5018C")]
	public void UpdateTargetPosition(Vector3 _TargetPoint, Vector3 _ControlPoint)
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xD5021C", Offset = "0xD5021C", VA = "0xD5021C")]
	public void UpdateStartPosition(Vector3 _TargetPoint, Vector3 _ControlPoint)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xD4FF18", Offset = "0xD4FF18", VA = "0xD4FF18")]
	private AnimationCurve CopyAnimationCurve(AnimationCurve _AnimationCurve)
	{
		return null;
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xD502AC", Offset = "0xD502AC", VA = "0xD502AC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xD50468", Offset = "0xD50468", VA = "0xD50468")]
	public RayDesigner()
	{
	}
}
[Token(Token = "0x20000EB")]
public class RayDesignerBezier
{
	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 p0;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 p1;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 p2;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 p3;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float ti;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 b0;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 b1;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 b2;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 b3;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float Ax;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float Ay;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float Az;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float Bx;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float By;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float Bz;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float Cx;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float Cy;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float Cz;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float u;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float tt;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float uu;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float uuu;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float ttt;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xD4F1A4", Offset = "0xD4F1A4", VA = "0xD4F1A4")]
	public RayDesignerBezier(Vector3 v0, Vector3 v1, Vector3 v2, Vector3 v3)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xD4F2BC", Offset = "0xD4F2BC", VA = "0xD4F2BC")]
	public Vector3 GetPointAtTime(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xD50690", Offset = "0xD50690", VA = "0xD50690")]
	private void SetConstant()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xD50560", Offset = "0xD50560", VA = "0xD50560")]
	private void CheckConstant()
	{
	}
}
[Token(Token = "0x20000EC")]
public class CamControl2 : MonoBehaviour
{
	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float height;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distanceMin;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceMax;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float xSpeed;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float ySpeed;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float distance;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float xAngle;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float yAngle;

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xD50724", Offset = "0xD50724", VA = "0xD50724")]
	private void Update()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xD5095C", Offset = "0xD5095C", VA = "0xD5095C")]
	public CamControl2()
	{
	}
}
[Token(Token = "0x20000ED")]
public class DetectHit : MonoBehaviour
{
	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ForceField forceField;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xD50964", Offset = "0xD50964", VA = "0xD50964")]
	public void ApplyDamage(float damage)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xD50988", Offset = "0xD50988", VA = "0xD50988")]
	public void PointHit(Vector3 point)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xD50B5C", Offset = "0xD50B5C", VA = "0xD50B5C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xD50DA8", Offset = "0xD50DA8", VA = "0xD50DA8")]
	public DetectHit()
	{
	}
}
[Token(Token = "0x20000EE")]
public class ForceField : MonoBehaviour
{
	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] underShield;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material materialShield;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float brightnessCollision;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fadingGlow;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float armor;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float speedOnOff;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 speedOffset;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool sphere;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float sphereScale;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 spherePosition;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float mTime;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color shieldColor;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool hit;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool hit2;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MeshRenderer[] mesh;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int i;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float shieldA;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject sp;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool activ;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector4 offset;

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xD50DB0", Offset = "0xD50DB0", VA = "0xD50DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xD5137C", Offset = "0xD5137C", VA = "0xD5137C")]
	private void Update()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xD50DB4", Offset = "0xD50DB4", VA = "0xD50DB4")]
	public void CreateForceField()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xD51974", Offset = "0xD51974", VA = "0xD51974")]
	public void DestroyForceField()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xD51BE8", Offset = "0xD51BE8", VA = "0xD51BE8")]
	public ForceField()
	{
	}
}
[Token(Token = "0x20000EF")]
public class Hologram : MonoBehaviour
{
	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer[] renderers;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 speedOffset;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector4 offset;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material[] material;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float camDistance;

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xD51C14", Offset = "0xD51C14", VA = "0xD51C14")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xD51D1C", Offset = "0xD51D1C", VA = "0xD51D1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xD51F4C", Offset = "0xD51F4C", VA = "0xD51F4C")]
	public Hologram()
	{
	}
}
[Token(Token = "0x20000F0")]
public class Pointer2 : MonoBehaviour
{
	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xD51F5C", Offset = "0xD51F5C", VA = "0xD51F5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xD51F68", Offset = "0xD51F68", VA = "0xD51F68")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xD51FC0", Offset = "0xD51FC0", VA = "0xD51FC0")]
	public Pointer2()
	{
	}
}
[Token(Token = "0x20000F1")]
public class TestBox2 : MonoBehaviour
{
	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damage;

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xD51FC8", Offset = "0xD51FC8", VA = "0xD51FC8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xD521C0", Offset = "0xD521C0", VA = "0xD521C0")]
	public TestBox2()
	{
	}
}
[Token(Token = "0x20000F2")]
public class TestScene2 : MonoBehaviour
{
	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cam1;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject cam2;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ForceField forceField;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject prefab;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<GameObject> obj;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float r;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool createBox2;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool createBox;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timeBox;

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xD521C8", Offset = "0xD521C8", VA = "0xD521C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xD52200", Offset = "0xD52200", VA = "0xD52200")]
	private void Update()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xD52468", Offset = "0xD52468", VA = "0xD52468")]
	private void CreateObjectA()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xD5261C", Offset = "0xD5261C", VA = "0xD5261C")]
	private void CreateObjectB()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xD534C4", Offset = "0xD534C4", VA = "0xD534C4")]
	private void CreateLineY(float x, float y, float z, int range)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xD53338", Offset = "0xD53338", VA = "0xD53338")]
	private void CreateLineX(float x, float y, float z, int range)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xD52ED8", Offset = "0xD52ED8", VA = "0xD52ED8")]
	private void CreateSquare(float x, float y, float z, int range)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xD53650", Offset = "0xD53650", VA = "0xD53650")]
	public TestScene2()
	{
	}
}
[Token(Token = "0x20000F3")]
public class skyboxspace_mouselook_v1 : MonoBehaviour
{
	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 _mouseAbsolute;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 _smoothMouse;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 clampInDegrees;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 sensitivity;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 smoothing;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 targetDirection;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 targetCharacterDirection;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject characterBody;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float minFov;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float maxFov;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float zoomsensitivity;

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xD536D8", Offset = "0xD536D8", VA = "0xD536D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xD537C4", Offset = "0xD537C4", VA = "0xD537C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xD53D9C", Offset = "0xD53D9C", VA = "0xD53D9C")]
	public skyboxspace_mouselook_v1()
	{
	}
}
[Token(Token = "0x20000F4")]
public class StagitEarthSkyboxDemo : MonoBehaviour
{
	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] skyBoxMaterial;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] sunPosition;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int skyBoxLength;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int currentSkyBoxIndex;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string topText;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float counter;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int frames;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float fps;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GUIStyle whiteStyle;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GUIStyle blackStyle;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject sun;

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xD53DD0", Offset = "0xD53DD0", VA = "0xD53DD0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xD53EA4", Offset = "0xD53EA4", VA = "0xD53EA4")]
	public void nextSkybox()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xD53F7C", Offset = "0xD53F7C", VA = "0xD53F7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xD540EC", Offset = "0xD540EC", VA = "0xD540EC", Slot = "4")]
	protected virtual void OnGUI()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xD54388", Offset = "0xD54388", VA = "0xD54388")]
	private static void DrawText(string text, TextAnchor anchor, int offsetX = 15, int offsetY = 15)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xD548AC", Offset = "0xD548AC", VA = "0xD548AC")]
	public StagitEarthSkyboxDemo()
	{
	}
}
[Token(Token = "0x20000F5")]
public class skyboxspace_demo_v1 : MonoBehaviour
{
	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] skyBoxMaterial;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] sunPosition;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int skyBoxLength;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int currentSkyBoxIndex;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string topText;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float counter;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int frames;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float fps;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GUIStyle whiteStyle;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GUIStyle blackStyle;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject sun;

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xD548B4", Offset = "0xD548B4", VA = "0xD548B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xD54964", Offset = "0xD54964", VA = "0xD54964")]
	private void Update()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xD54ABC", Offset = "0xD54ABC", VA = "0xD54ABC", Slot = "4")]
	protected virtual void OnGUI()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xD54D58", Offset = "0xD54D58", VA = "0xD54D58")]
	private static void DrawText(string text, TextAnchor anchor, int offsetX = 15, int offsetY = 15)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xD5527C", Offset = "0xD5527C", VA = "0xD5527C")]
	public skyboxspace_demo_v1()
	{
	}
}
[Token(Token = "0x20000F6")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image _image;

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xD55284", Offset = "0xD55284", VA = "0xD55284")]
	public void Start()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xD5544C", Offset = "0xD5544C", VA = "0xD5544C", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xD55730", Offset = "0xD55730", VA = "0xD55730")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x20000F7")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xD55738", Offset = "0xD55738", VA = "0xD55738")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xD55840", Offset = "0xD55840", VA = "0xD55840")]
	public EventSystemChecker()
	{
	}
}
[Token(Token = "0x20000F8")]
[RequireComponent(typeof(Image))]
public class ForcedReset : MonoBehaviour
{
	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xD55848", Offset = "0xD55848", VA = "0xD55848")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xD55904", Offset = "0xD55904", VA = "0xD55904")]
	public ForcedReset()
	{
	}
}
[Token(Token = "0x20000F9")]
public class BillBoard : MonoBehaviour
{
	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xD5590C", Offset = "0xD5590C", VA = "0xD5590C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xD55954", Offset = "0xD55954", VA = "0xD55954")]
	public BillBoard()
	{
	}
}
[Token(Token = "0x20000FA")]
public class button_target : MonoBehaviour
{
	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MY_target;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject temp_target;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject[] ALL_target;

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xD5595C", Offset = "0xD5595C", VA = "0xD5595C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xD55A80", Offset = "0xD55A80", VA = "0xD55A80")]
	public void ShowTarget()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xD55B40", Offset = "0xD55B40", VA = "0xD55B40")]
	public button_target()
	{
	}
}
[Token(Token = "0x20000FB")]
public class demo : MonoBehaviour
{
	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xD55B48", Offset = "0xD55B48", VA = "0xD55B48")]
	public void GoURL_FX()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xD55B8C", Offset = "0xD55B8C", VA = "0xD55B8C")]
	public void GoURL_Free()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xD55BD0", Offset = "0xD55BD0", VA = "0xD55BD0")]
	public demo()
	{
	}
}
[Token(Token = "0x20000FC")]
public class tazo_rotate : MonoBehaviour
{
	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotate_x;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rotate_y;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rotate_z;

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xD55BD8", Offset = "0xD55BD8", VA = "0xD55BD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xD55C60", Offset = "0xD55C60", VA = "0xD55C60")]
	public tazo_rotate()
	{
	}
}
[Token(Token = "0x20000FD")]
public class tazo_UVScroller : MonoBehaviour
{
	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetMaterialSlot;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myrender;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedY;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speedX;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeWentX;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeWentY;

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xD55C68", Offset = "0xD55C68", VA = "0xD55C68")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xD55CC0", Offset = "0xD55CC0", VA = "0xD55CC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xD55D64", Offset = "0xD55D64", VA = "0xD55D64")]
	public tazo_UVScroller()
	{
	}
}
[Token(Token = "0x20000FE")]
public class LODPreview : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000FF")]
	public class ShowcaseObject
	{
		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AutomaticLOD m_automaticLOD;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 m_position;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 m_angles;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 m_rotationAxis;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string m_description;

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xD577C0", Offset = "0xD577C0", VA = "0xD577C0")]
		public ShowcaseObject()
		{
		}
	}

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShowcaseObject[] ShowcaseObjects;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material WireframeMaterial;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MouseSensitvity;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MouseReleaseSpeed;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<GameObject, Material[]> m_objectMaterials;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AutomaticLOD m_selectedAutomaticLOD;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_nSelectedIndex;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_bWireframe;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_fRotationSpeed;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_fLastMouseX;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Mesh m_newMesh;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_nLastProgress;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string m_strLastTitle;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string m_strLastMessage;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_fVertexAmount;

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xD55D74", Offset = "0xD55D74", VA = "0xD55D74")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xD5606C", Offset = "0xD5606C", VA = "0xD5606C")]
	private void Progress(string strTitle, string strMessage, float fT)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xD561C0", Offset = "0xD561C0", VA = "0xD561C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xD5667C", Offset = "0xD5667C", VA = "0xD5667C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xD55E84", Offset = "0xD55E84", VA = "0xD55E84")]
	private void SetActiveObject(int index)
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xD57558", Offset = "0xD57558", VA = "0xD57558")]
	private void AddMaterials(GameObject theGameObject, Dictionary<GameObject, Material[]> dicMaterials)
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xD563BC", Offset = "0xD563BC", VA = "0xD563BC")]
	private void SetWireframe(bool bEnabled)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xD57458", Offset = "0xD57458", VA = "0xD57458")]
	private IEnumerator ComputeLODWithVertices(float fAmount)
	{
		return null;
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xD57730", Offset = "0xD57730", VA = "0xD57730")]
	public LODPreview()
	{
	}
}
[Token(Token = "0x2000101")]
public class LODSampleLODScene : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000102")]
	public class SceneCamera
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera m_camera;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_near;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_far;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 m_v3InitialCameraPosition;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 m_v3ViewDir;

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xD597EC", Offset = "0xD597EC", VA = "0xD597EC")]
		public SceneCamera()
		{
		}
	}

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneCamera[] SceneCameras;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material WireframeMaterial;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<GameObject, Material[]> m_objectMaterials;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SceneCamera m_selectedCamera;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_bWireframe;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<AutomaticLOD> m_sceneLODObjects;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_nMaxLODLevels;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_fCurrentDistanceSlider;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_nCamMode;

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xD58064", Offset = "0xD58064", VA = "0xD58064")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xD586C4", Offset = "0xD586C4", VA = "0xD586C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xD58B1C", Offset = "0xD58B1C", VA = "0xD58B1C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xD5859C", Offset = "0xD5859C", VA = "0xD5859C")]
	private void SetActiveCamera(int index)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xD58798", Offset = "0xD58798", VA = "0xD58798")]
	private void UpdateCamera(float fPos)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xD583C8", Offset = "0xD583C8", VA = "0xD583C8")]
	private void AddMaterials(GameObject theGameObject, Dictionary<GameObject, Material[]> dicMaterials)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xD5885C", Offset = "0xD5885C", VA = "0xD5885C")]
	private void SetWireframe(bool bEnabled)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xD597E4", Offset = "0xD597E4", VA = "0xD597E4")]
	public LODSampleLODScene()
	{
	}
}
[Token(Token = "0x2000103")]
public class LODSceneSelection : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000104")]
	public class SceneOption
	{
		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_sceneName;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_sceneDisplayName;

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xD59B84", Offset = "0xD59B84", VA = "0xD59B84")]
		public SceneOption()
		{
		}
	}

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int BoxWidth;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int BoxHeight;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MarginH;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int MarginV;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneOption[] SceneOptions;

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xD597F4", Offset = "0xD597F4", VA = "0xD597F4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xD59B70", Offset = "0xD59B70", VA = "0xD59B70")]
	public LODSceneSelection()
	{
	}
}
[Token(Token = "0x2000105")]
public class AutomaticLOD : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000106")]
	public enum EvalMode
	{
		[Token(Token = "0x400086B")]
		CameraDistance,
		[Token(Token = "0x400086C")]
		ScreenCoverage
	}

	[Serializable]
	[Token(Token = "0x2000107")]
	public enum LevelsToGenerate
	{
		[Token(Token = "0x400086E")]
		_1 = 1,
		[Token(Token = "0x400086F")]
		_2,
		[Token(Token = "0x4000870")]
		_3,
		[Token(Token = "0x4000871")]
		_4,
		[Token(Token = "0x4000872")]
		_5,
		[Token(Token = "0x4000873")]
		_6
	}

	[Serializable]
	[Token(Token = "0x2000108")]
	public enum SwitchMode
	{
		[Token(Token = "0x4000875")]
		SwitchMesh,
		[Token(Token = "0x4000876")]
		SwitchGameObject,
		[Token(Token = "0x4000877")]
		UnityLODGroup
	}

	[Serializable]
	[Token(Token = "0x2000109")]
	public class LODLevelData
	{
		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m_fScreenCoverage;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m_fMaxCameraDistance;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_fMeshVerticesAmount;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_nColorEditorBarIndex;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Mesh m_mesh;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool m_bUsesOriginalMesh;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject m_gameObject;

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xD61A3C", Offset = "0xD61A3C", VA = "0xD61A3C")]
		public LODLevelData GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xD61ABC", Offset = "0xD61ABC", VA = "0xD61ABC")]
		public LODLevelData()
		{
		}
	}

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh m_originalMesh;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EvalMode m_evalMode;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_bEnablePrefabUsage;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_strAssetPath;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fMaxCameraDistance;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int m_nColorEditorBarNewIndex;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<LODLevelData> m_listLODLevels;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AutomaticLOD m_LODObjectRoot;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AutomaticLOD> m_listDependentChildren;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool m_bExpandRelevanceSpheres;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public RelevanceSphere[] m_aRelevanceSpheres;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Simplifier m_meshSimplifier;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_bGenerateIncludeChildren;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private LevelsToGenerate m_levelsToGenerate;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private SwitchMode m_switchMode;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private bool m_bOverrideRootSettings;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[SerializeField]
	private bool m_bLODDataDirty;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AutomaticLOD m_LODObjectRootPersist;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private LODGroup m_LODGroup;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_bUseAutomaticCameraLODSwitch;

	[Token(Token = "0x400085B")]
	private const int k_MaxLODChecksPerFrame = 4;

	[Token(Token = "0x400085C")]
	private const int k_MaxFrameCheckLoop = 100;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_currentCheckIndex;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int s_currentFrameCheckIndex;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int s_checkLoopLength;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int s_lastFrameComputedModulus;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int s_currentFrameInLoop;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Camera s_userDefinedCamera;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Camera m_renderCamera;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int m_nCurrentLOD;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<Camera, int> m_cachedFrameLODLevel;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 m_localCenter;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] _corners;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int m_frameToCheck;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool b_performCheck;

	[Token(Token = "0x17000047")]
	public static Camera UserDefinedLODCamera
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xD59B8C", Offset = "0xD59B8C", VA = "0xD59B8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xD59BE4", Offset = "0xD59BE4", VA = "0xD59BE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public SwitchMode LODSwitchMode
	{
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xD59C44", Offset = "0xD59C44", VA = "0xD59C44")]
		get
		{
			return default(SwitchMode);
		}
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xD59CF0", Offset = "0xD59CF0", VA = "0xD59CF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xD5A350", Offset = "0xD5A350", VA = "0xD5A350")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xD5AAAC", Offset = "0xD5AAAC", VA = "0xD5AAAC")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xD5AAD0", Offset = "0xD5AAD0", VA = "0xD5AAD0")]
	public static bool HasValidMeshData(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xD5ABB8", Offset = "0xD5ABB8", VA = "0xD5ABB8")]
	public static bool IsRootOrBelongsToLODTree(AutomaticLOD automaticLOD, AutomaticLOD root)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xD5ACE8", Offset = "0xD5ACE8", VA = "0xD5ACE8")]
	public int GetNumberOfLevelsToGenerate()
	{
		return default(int);
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xD5ACF0", Offset = "0xD5ACF0", VA = "0xD5ACF0")]
	public bool IsGenerateIncludeChildrenActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xD58368", Offset = "0xD58368", VA = "0xD58368")]
	public bool IsRootAutomaticLOD()
	{
		return default(bool);
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xD5ACF8", Offset = "0xD5ACF8", VA = "0xD5ACF8")]
	public bool HasDependentChildren()
	{
		return default(bool);
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xD5AD4C", Offset = "0xD5AD4C", VA = "0xD5AD4C")]
	public bool HasLODDataDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xD5AD54", Offset = "0xD5AD54", VA = "0xD5AD54")]
	public bool SetLODDataDirty(bool bDirty)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xD572F4", Offset = "0xD572F4", VA = "0xD572F4")]
	public int GetLODLevelCount()
	{
		return default(int);
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xD5AD64", Offset = "0xD5AD64", VA = "0xD5AD64")]
	public float ComputeScreenCoverage(Camera camera)
	{
		return default(float);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xD59F94", Offset = "0xD59F94", VA = "0xD59F94")]
	public Vector3 ComputeWorldCenter()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xD5B5BC", Offset = "0xD5B5BC", VA = "0xD5B5BC")]
	public float ComputeViewSpaceBounds(Vector3 v3CameraPos, Vector3 v3CameraDir, Vector3 v3CameraUp, out Vector3 v3Min, out Vector3 v3Max, out Vector3 v3Center)
	{
		return default(float);
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xD574DC", Offset = "0xD574DC", VA = "0xD574DC")]
	public void SetAutomaticCameraLODSwitch(bool bEnabled)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xD5BB18", Offset = "0xD5BB18", VA = "0xD5BB18")]
	private static void SetAutomaticCameraLODSwitchRecursive(AutomaticLOD root, GameObject gameObject, bool bEnabled)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xD5BC90", Offset = "0xD5BC90", VA = "0xD5BC90")]
	public void SetLODLevels(List<LODLevelData> listLODLevelData, EvalMode evalMode, float fMaxCameraDistance, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xD5BE20", Offset = "0xD5BE20", VA = "0xD5BE20")]
	private static void SetLODLevelsRecursive(AutomaticLOD root, GameObject gameObject)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xD5C678", Offset = "0xD5C678", VA = "0xD5C678")]
	public void AddLODLevel(int nLevel, bool bBefore, bool bCreateMesh, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xD5C714", Offset = "0xD5C714", VA = "0xD5C714")]
	public static void AddLODLevelRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, bool bBefore, bool bCreateMesh, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xD5D130", Offset = "0xD5D130", VA = "0xD5D130")]
	public void RemoveLODLevel(int nLevel, bool bDeleteMesh, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xD5D1C4", Offset = "0xD5D1C4", VA = "0xD5D1C4")]
	public static void RemoveLODLevelRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, bool bDeleteMesh, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xD5D630", Offset = "0xD5D630", VA = "0xD5D630")]
	public Simplifier GetMeshSimplifier()
	{
		return null;
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xD5D638", Offset = "0xD5D638", VA = "0xD5D638")]
	public void ComputeLODData(bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xD5D674", Offset = "0xD5D674", VA = "0xD5D674")]
	private void ComputeLODDataRecursive(AutomaticLOD root, GameObject gameObject, bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xD5DE94", Offset = "0xD5DE94", VA = "0xD5DE94")]
	public bool HasLODData()
	{
		return default(bool);
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xD5A80C", Offset = "0xD5A80C", VA = "0xD5A80C")]
	public int GetLODLevelUsingCamera(Camera currentCamera)
	{
		return default(int);
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xD5DF24", Offset = "0xD5DF24", VA = "0xD5DF24")]
	public int GetCurrentLODLevel()
	{
		return default(int);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xD57210", Offset = "0xD57210", VA = "0xD57210")]
	public void SwitchToLOD(int nLevel, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xD5DF2C", Offset = "0xD5DF2C", VA = "0xD5DF2C")]
	private static void SwitchToLODRecursive(AutomaticLOD root, GameObject gameObject, int nLODLevel, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xD5E4DC", Offset = "0xD5E4DC", VA = "0xD5E4DC")]
	public void ComputeAllLODMeshes(bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xD5F1C4", Offset = "0xD5F1C4", VA = "0xD5F1C4")]
	public void ComputeLODMesh(int nLevel, bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xD5E600", Offset = "0xD5E600", VA = "0xD5E600")]
	private static void ComputeLODMeshRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xD5F260", Offset = "0xD5F260", VA = "0xD5F260")]
	public void RestoreOriginalMesh(bool bDeleteLODData, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xD5F338", Offset = "0xD5F338", VA = "0xD5F338")]
	private static void RestoreOriginalMeshRecursive(AutomaticLOD root, GameObject gameObject, bool bDeleteLODData, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xD5F780", Offset = "0xD5F780", VA = "0xD5F780")]
	public bool HasOriginalMeshActive(bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xD5F7FC", Offset = "0xD5F7FC", VA = "0xD5F7FC")]
	private static bool HasOriginalMeshActiveRecursive(AutomaticLOD root, GameObject gameObject, bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xD5FAA8", Offset = "0xD5FAA8", VA = "0xD5FAA8")]
	public bool HasVertexData(int nLevel, bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xD5FB2C", Offset = "0xD5FB2C", VA = "0xD5FB2C")]
	private static bool HasVertexDataRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xD573CC", Offset = "0xD573CC", VA = "0xD573CC")]
	public int GetOriginalVertexCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xD5FD9C", Offset = "0xD5FD9C", VA = "0xD5FD9C")]
	private static void GetOriginalVertexCountRecursive(AutomaticLOD root, GameObject gameObject, ref int nVertexCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xD5FF58", Offset = "0xD5FF58", VA = "0xD5FF58")]
	public int GetOriginalTriangleCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xD5FFE4", Offset = "0xD5FFE4", VA = "0xD5FFE4")]
	private static void GetOriginalTriangleCountRecursive(AutomaticLOD root, GameObject gameObject, ref int nTriangleCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xD57340", Offset = "0xD57340", VA = "0xD57340")]
	public int GetCurrentVertexCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xD601C0", Offset = "0xD601C0", VA = "0xD601C0")]
	private static void GetCurrentVertexCountRecursive(AutomaticLOD root, GameObject gameObject, ref int nVertexCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xD60488", Offset = "0xD60488", VA = "0xD60488")]
	public int GetLODVertexCount(int nLevel, bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xD60524", Offset = "0xD60524", VA = "0xD60524")]
	private static void GetLODVertexCountRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, ref int nVertexCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xD60798", Offset = "0xD60798", VA = "0xD60798")]
	public int GetLODTriangleCount(int nLevel, bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xD60834", Offset = "0xD60834", VA = "0xD60834")]
	private static void GetLODTriangleCountRecursive(AutomaticLOD root, GameObject gameObject, int nLevel, ref int nTriangleCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xD60AC8", Offset = "0xD60AC8", VA = "0xD60AC8")]
	public void RemoveFromLODTree()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xD5DE18", Offset = "0xD5DE18", VA = "0xD5DE18")]
	public void FreeLODData(bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xD60B70", Offset = "0xD60B70", VA = "0xD60B70")]
	private static void FreeLODDataRecursive(AutomaticLOD root, GameObject gameObject, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xD5C2AC", Offset = "0xD5C2AC", VA = "0xD5C2AC")]
	private static Mesh CreateNewEmptyMesh(AutomaticLOD automaticLOD)
	{
		return null;
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xD61080", Offset = "0xD61080", VA = "0xD61080")]
	private static GameObject CreateBasicObjectCopy(GameObject gameObject, Mesh mesh, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xD5C394", Offset = "0xD5C394", VA = "0xD5C394")]
	private static void CheckForAdditionalLODSetup(AutomaticLOD root, AutomaticLOD automaticLOD, LODLevelData levelData, int level)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xD5EDAC", Offset = "0xD5EDAC", VA = "0xD5EDAC")]
	public void SetupLODGroup()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xD61578", Offset = "0xD61578", VA = "0xD61578")]
	private static void SetupLODGroupRecursive(AutomaticLOD root, GameObject gameObject, ref List<List<Renderer>> renderers)
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xD61570", Offset = "0xD61570", VA = "0xD61570")]
	private static Component CopyComponent(Component original, GameObject destination)
	{
		return null;
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xD5B244", Offset = "0xD5B244", VA = "0xD5B244")]
	private void BuildCornerData(ref Vector3[] av3Corners, Bounds bounds)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xD5A2B8", Offset = "0xD5A2B8", VA = "0xD5A2B8")]
	private bool IsDependent()
	{
		return default(bool);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xD61920", Offset = "0xD61920", VA = "0xD61920")]
	public AutomaticLOD()
	{
	}
}
[Token(Token = "0x200010A")]
public class SimplifyMeshPreview : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200010B")]
	public class ShowcaseObject
	{
		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshSimplify m_meshSimplify;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 m_position;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 m_angles;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 m_rotationAxis;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string m_description;

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xD6355C", Offset = "0xD6355C", VA = "0xD6355C")]
		public ShowcaseObject()
		{
		}
	}

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShowcaseObject[] ShowcaseObjects;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material WireframeMaterial;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MouseSensitvity;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MouseReleaseSpeed;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<GameObject, Material[]> m_objectMaterials;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshSimplify m_selectedMeshSimplify;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_nSelectedIndex;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_bWireframe;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_fRotationSpeed;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_fLastMouseX;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Mesh m_newMesh;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_nLastProgress;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string m_strLastTitle;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string m_strLastMessage;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_fVertexAmount;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_bGUIEnabled;

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xD61AC4", Offset = "0xD61AC4", VA = "0xD61AC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xD61DB0", Offset = "0xD61DB0", VA = "0xD61DB0")]
	private void Progress(string strTitle, string strMessage, float fT)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xD61F04", Offset = "0xD61F04", VA = "0xD61F04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xD623DC", Offset = "0xD623DC", VA = "0xD623DC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xD61BD4", Offset = "0xD61BD4", VA = "0xD61BD4")]
	private void SetActiveObject(int index)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xD632EC", Offset = "0xD632EC", VA = "0xD632EC")]
	private void AddMaterials(GameObject theGameObject, Dictionary<GameObject, Material[]> dicMaterials)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xD6211C", Offset = "0xD6211C", VA = "0xD6211C")]
	private void SetWireframe(bool bEnabled)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xD63268", Offset = "0xD63268", VA = "0xD63268")]
	private IEnumerator ComputeMeshWithVertices(float fAmount)
	{
		return null;
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xD634C4", Offset = "0xD634C4", VA = "0xD634C4")]
	public SimplifyMeshPreview()
	{
	}
}
[Token(Token = "0x200010D")]
public class MeshSimplify : MonoBehaviour
{
	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh m_originalMesh;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Mesh m_simplifiedMesh;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_bEnablePrefabUsage;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fVertexAmount;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string m_strAssetPath;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshSimplify m_meshSimplifyRoot;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<MeshSimplify> m_listDependentChildren;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_bExpandRelevanceSpheres;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RelevanceSphere[] m_aRelevanceSpheres;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Simplifier m_meshSimplifier;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool m_bGenerateIncludeChildren;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[SerializeField]
	private bool m_bOverrideRootSettings;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	[SerializeField]
	private bool m_bUseEdgeLength;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	[SerializeField]
	private bool m_bUseCurvature;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private bool m_bProtectTexture;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[SerializeField]
	private bool m_bLockBorder;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	[SerializeField]
	private bool m_bDataDirty;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	[SerializeField]
	private bool m_bExcludedFromTree;

	[Token(Token = "0x1700004B")]
	public bool RecurseIntoChildren
	{
		[Token(Token = "0x6000544")]
		[Address(RVA = "0xD63E64", Offset = "0xD63E64", VA = "0xD63E64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004C")]
	public Simplifier MeshSimplifier
	{
		[Token(Token = "0x6000545")]
		[Address(RVA = "0xD63E6C", Offset = "0xD63E6C", VA = "0xD63E6C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000546")]
		[Address(RVA = "0xD63E74", Offset = "0xD63E74", VA = "0xD63E74")]
		set
		{
		}
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xD63E7C", Offset = "0xD63E7C", VA = "0xD63E7C")]
	public static bool HasValidMeshData(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xD63F64", Offset = "0xD63F64", VA = "0xD63F64")]
	public static bool IsRootOrBelongsToTree(MeshSimplify meshSimplify, MeshSimplify root)
	{
		return default(bool);
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xD6409C", Offset = "0xD6409C", VA = "0xD6409C")]
	public bool IsGenerateIncludeChildrenActive()
	{
		return default(bool);
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xD640A4", Offset = "0xD640A4", VA = "0xD640A4")]
	public bool HasDependentChildren()
	{
		return default(bool);
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xD640F8", Offset = "0xD640F8", VA = "0xD640F8")]
	public bool HasDataDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xD64100", Offset = "0xD64100", VA = "0xD64100")]
	public bool SetDataDirty(bool bDirty)
	{
		return default(bool);
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xD64110", Offset = "0xD64110", VA = "0xD64110")]
	public bool HasNonMeshSimplifyGameObjectsInTree()
	{
		return default(bool);
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xD64134", Offset = "0xD64134", VA = "0xD64134")]
	private bool HasNonMeshSimplifyGameObjectsInTreeRecursive(MeshSimplify root, GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xD64264", Offset = "0xD64264", VA = "0xD64264")]
	public void ConfigureSimplifier()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xD643E8", Offset = "0xD643E8", VA = "0xD643E8")]
	public Simplifier GetMeshSimplifier()
	{
		return null;
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xD643F0", Offset = "0xD643F0", VA = "0xD643F0")]
	public void ComputeData(bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xD64428", Offset = "0xD64428", VA = "0xD64428")]
	private static void ComputeDataRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xD64C80", Offset = "0xD64C80", VA = "0xD64C80")]
	public bool HasData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xD64D40", Offset = "0xD64D40", VA = "0xD64D40")]
	public bool HasSimplifiedMesh()
	{
		return default(bool);
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xD64DCC", Offset = "0xD64DCC", VA = "0xD64DCC")]
	public void ComputeMesh(bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xD64E04", Offset = "0xD64E04", VA = "0xD64E04")]
	private static void ComputeMeshRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren, [Optional] Simplifier.ProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xD65334", Offset = "0xD65334", VA = "0xD65334")]
	public void AssignSimplifiedMesh(bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xD65364", Offset = "0xD65364", VA = "0xD65364")]
	private static void AssignSimplifiedMeshRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xD65588", Offset = "0xD65588", VA = "0xD65588")]
	public void RestoreOriginalMesh(bool bDeleteData, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xD655C0", Offset = "0xD655C0", VA = "0xD655C0")]
	private static void RestoreOriginalMeshRecursive(MeshSimplify root, GameObject gameObject, bool bDeleteData, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xD65844", Offset = "0xD65844", VA = "0xD65844")]
	public bool HasOriginalMeshActive(bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xD65874", Offset = "0xD65874", VA = "0xD65874")]
	private static bool HasOriginalMeshActiveRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xD65AE4", Offset = "0xD65AE4", VA = "0xD65AE4")]
	public bool HasVertexData(bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xD65B14", Offset = "0xD65B14", VA = "0xD65B14")]
	private static bool HasVertexDataRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren)
	{
		return default(bool);
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xD63228", Offset = "0xD63228", VA = "0xD63228")]
	public int GetOriginalVertexCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xD65C98", Offset = "0xD65C98", VA = "0xD65C98")]
	private static void GetOriginalVertexCountRecursive(MeshSimplify root, GameObject gameObject, ref int nVertexCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xD65E18", Offset = "0xD65E18", VA = "0xD65E18")]
	public int GetOriginalTriangleCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xD65E58", Offset = "0xD65E58", VA = "0xD65E58")]
	private static void GetOriginalTriangleCountRecursive(MeshSimplify root, GameObject gameObject, ref int nTriangleCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xD631E8", Offset = "0xD631E8", VA = "0xD631E8")]
	public int GetSimplifiedVertexCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xD65FF8", Offset = "0xD65FF8", VA = "0xD65FF8")]
	private static void GetSimplifiedVertexCountRecursive(MeshSimplify root, GameObject gameObject, ref int nVertexCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xD66178", Offset = "0xD66178", VA = "0xD66178")]
	public int GetSimplifiedTriangleCount(bool bRecurseIntoChildren)
	{
		return default(int);
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xD661B8", Offset = "0xD661B8", VA = "0xD661B8")]
	private static void GetSimplifiedTriangleCountRecursive(MeshSimplify root, GameObject gameObject, ref int nTriangleCount, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xD66358", Offset = "0xD66358", VA = "0xD66358")]
	public void RemoveFromTree()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xD64C50", Offset = "0xD64C50", VA = "0xD64C50")]
	public void FreeData(bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xD6641C", Offset = "0xD6641C", VA = "0xD6641C")]
	private static void FreeDataRecursive(MeshSimplify root, GameObject gameObject, bool bRecurseIntoChildren)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xD6524C", Offset = "0xD6524C", VA = "0xD6524C")]
	private static Mesh CreateNewEmptyMesh(MeshSimplify meshSimplify)
	{
		return null;
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xD66658", Offset = "0xD66658", VA = "0xD66658")]
	public MeshSimplify()
	{
	}
}
[Token(Token = "0x200010E")]
[RequireComponent(typeof(MeshSimplify))]
public class RuntimeMeshSimplifier : MonoBehaviour
{
	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<GameObject, Material[]> m_objectMaterials;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshSimplify m_selectedMeshSimplify;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_bFinished;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Mesh m_newMesh;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_nLastProgress;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string m_strLastTitle;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string m_strLastMessage;

	[Token(Token = "0x1700004D")]
	public string ProgressTitle
	{
		[Token(Token = "0x600056C")]
		[Address(RVA = "0xD66700", Offset = "0xD66700", VA = "0xD66700")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004E")]
	public string ProgressMessage
	{
		[Token(Token = "0x600056D")]
		[Address(RVA = "0xD66708", Offset = "0xD66708", VA = "0xD66708")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004F")]
	public int ProgressPercent
	{
		[Token(Token = "0x600056E")]
		[Address(RVA = "0xD66710", Offset = "0xD66710", VA = "0xD66710")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000050")]
	public bool Finished
	{
		[Token(Token = "0x600056F")]
		[Address(RVA = "0xD66718", Offset = "0xD66718", VA = "0xD66718")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xD66720", Offset = "0xD66720", VA = "0xD66720")]
	public void Simplify(float percent)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xD667F4", Offset = "0xD667F4", VA = "0xD667F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xD668D4", Offset = "0xD668D4", VA = "0xD668D4")]
	private void AddMaterials(GameObject theGameObject, Dictionary<GameObject, Material[]> dicMaterials)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xD66A9C", Offset = "0xD66A9C", VA = "0xD66A9C")]
	private void Progress(string strTitle, string strMessage, float fT)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xD66770", Offset = "0xD66770", VA = "0xD66770")]
	private IEnumerator ComputeMeshWithVertices(float fAmount)
	{
		return null;
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xD66C18", Offset = "0xD66C18", VA = "0xD66C18")]
	public RuntimeMeshSimplifier()
	{
	}
}
[Serializable]
[Token(Token = "0x2000110")]
public class ColorChangedEvent : UnityEvent<Color>
{
	[Token(Token = "0x600057D")]
	[Address(RVA = "0xD67914", Offset = "0xD67914", VA = "0xD67914")]
	public ColorChangedEvent()
	{
	}
}
[Token(Token = "0x2000111")]
public class HSVChangedEvent : UnityEvent<float, float, float>
{
	[Token(Token = "0x600057E")]
	[Address(RVA = "0xD6795C", Offset = "0xD6795C", VA = "0xD6795C")]
	public HSVChangedEvent()
	{
	}
}
[Token(Token = "0x2000112")]
public class TestCompression : MonoBehaviour
{
	[Token(Token = "0x600057F")]
	[Address(RVA = "0xD679A4", Offset = "0xD679A4", VA = "0xD679A4")]
	public TestCompression()
	{
	}
}
[Token(Token = "0x2000113")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class MicroSplatMeshTerrain : MicroSplatObject
{
	[Token(Token = "0x2000114")]
	public delegate void MaterialSyncAll();

	[Token(Token = "0x2000115")]
	public delegate void MaterialSync(Material m);

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<MicroSplatMeshTerrain> sInstances;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MeshRenderer[] meshTerrains;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Texture2D[] controlTextures;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material meshBlendMat;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material meshBlendMatInstance;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TerrainDescriptor terrainDescriptor;

	[Token(Token = "0x1400000A")]
	public static event MaterialSyncAll OnMaterialSyncAll
	{
		[Token(Token = "0x6000580")]
		[Address(RVA = "0xD679AC", Offset = "0xD679AC", VA = "0xD679AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000581")]
		[Address(RVA = "0xD67A84", Offset = "0xD67A84", VA = "0xD67A84")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event MaterialSync OnMaterialSync
	{
		[Token(Token = "0x6000582")]
		[Address(RVA = "0xD67B5C", Offset = "0xD67B5C", VA = "0xD67B5C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000583")]
		[Address(RVA = "0xD67BF8", Offset = "0xD67BF8", VA = "0xD67BF8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xD67C94", Offset = "0xD67C94", VA = "0xD67C94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xD67D6C", Offset = "0xD67D6C", VA = "0xD67D6C", Slot = "4")]
	public override TerrainDescriptor GetTerrainDescriptor()
	{
		return default(TerrainDescriptor);
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xD67DF8", Offset = "0xD67DF8", VA = "0xD67DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xD68060", Offset = "0xD68060", VA = "0xD68060")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xD680E8", Offset = "0xD680E8", VA = "0xD680E8")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xD681AC", Offset = "0xD681AC", VA = "0xD681AC")]
	private void SyncMeshBlendMat()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xD6825C", Offset = "0xD6825C", VA = "0xD6825C")]
	private Material GetMeshBlendMatInstance()
	{
		return null;
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xD683D0", Offset = "0xD683D0", VA = "0xD683D0")]
	private void ApplyMeshBlendMap()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xD67DFC", Offset = "0xD67DFC", VA = "0xD67DFC")]
	public void Sync()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xD684C8", Offset = "0xD684C8", VA = "0xD684C8", Slot = "5")]
	public override Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xD685F4", Offset = "0xD685F4", VA = "0xD685F4")]
	public new static void SyncAll()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xD68704", Offset = "0xD68704", VA = "0xD68704")]
	public MicroSplatMeshTerrain()
	{
	}
}
[Token(Token = "0x2000116")]
public class AndroidPermissionCallback : AndroidJavaProxy
{
	[Token(Token = "0x1400000C")]
	private event Action<string> OnPermissionGrantedAction
	{
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xD689CC", Offset = "0xD689CC", VA = "0xD689CC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000596")]
		[Address(RVA = "0xD68A7C", Offset = "0xD68A7C", VA = "0xD68A7C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	private event Action<string> OnPermissionDeniedAction
	{
		[Token(Token = "0x6000597")]
		[Address(RVA = "0xD68B2C", Offset = "0xD68B2C", VA = "0xD68B2C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000598")]
		[Address(RVA = "0xD68BDC", Offset = "0xD68BDC", VA = "0xD68BDC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	private event Action<string> OnPermissionDeniedAndDontAskAgainAction
	{
		[Token(Token = "0x6000599")]
		[Address(RVA = "0xD68C8C", Offset = "0xD68C8C", VA = "0xD68C8C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600059A")]
		[Address(RVA = "0xD68D3C", Offset = "0xD68D3C", VA = "0xD68D3C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xD68DEC", Offset = "0xD68DEC", VA = "0xD68DEC")]
	public AndroidPermissionCallback(Action<string> onGrantedCallback, Action<string> onDeniedCallback, Action<string> onDeniedAndDontAskAgainCallback)
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xD68EBC", Offset = "0xD68EBC", VA = "0xD68EBC", Slot = "9")]
	public virtual void OnPermissionGranted(string permissionName)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xD68ED8", Offset = "0xD68ED8", VA = "0xD68ED8", Slot = "10")]
	public virtual void OnPermissionDenied(string permissionName)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xD68EF4", Offset = "0xD68EF4", VA = "0xD68EF4", Slot = "11")]
	public virtual void OnPermissionDeniedAndDontAskAgain(string permissionName)
	{
	}
}
[Token(Token = "0x2000117")]
public class AndroidPermissionsManager
{
	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject m_Activity;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AndroidJavaObject m_PermissionService;

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xD68F18", Offset = "0xD68F18", VA = "0xD68F18")]
	private static AndroidJavaObject GetActivity()
	{
		return null;
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xD69014", Offset = "0xD69014", VA = "0xD69014")]
	private static AndroidJavaObject GetPermissionsService()
	{
		return null;
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xD69118", Offset = "0xD69118", VA = "0xD69118")]
	public static void RequestPermission(string permissionName, AndroidPermissionCallback callback)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xD691C4", Offset = "0xD691C4", VA = "0xD691C4")]
	public static void RequestPermission(string[] permissionNames, AndroidPermissionCallback callback)
	{
	}
}
[Token(Token = "0x2000118")]
public abstract class BluetoothImports : IDisposable
{
	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool FDisposed;

	[Token(Token = "0x40008CE")]
	protected internal const string WclGattClientDllName = "WclGattClientDll.dll";

	[Token(Token = "0x17000053")]
	protected bool Disposed
	{
		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xD6933C", Offset = "0xD6933C", VA = "0xD6933C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xD6930C", Offset = "0xD6930C", VA = "0xD6930C")]
	private void Dispose(bool Disposing)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xD69338", Offset = "0xD69338", VA = "0xD69338", Slot = "5")]
	protected virtual void Free()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xD69344", Offset = "0xD69344", VA = "0xD69344")]
	public BluetoothImports()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xD69360", Offset = "0xD69360", VA = "0xD69360", Slot = "1")]
	~BluetoothImports()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xD69410", Offset = "0xD69410", VA = "0xD69410", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x2000119")]
public delegate void DeviceFoundEvent(object sender, IntPtr Radio, long Address);
[Token(Token = "0x200011A")]
public delegate void DiscoveringStartedEvent(object sender, IntPtr Radio);
[Token(Token = "0x200011B")]
public delegate void DiscoveringCompletedEvent(object sender, IntPtr Radio, int Error);
[Token(Token = "0x200011C")]
public sealed class BluetoothManager : BluetoothImports
{
	[Token(Token = "0x200011D")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	private delegate void NOTIFY_EVENT([In] IntPtr sender);

	[Token(Token = "0x200011E")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	private delegate void DEVICE_FOUND_EVENT([In] IntPtr sender, [In] IntPtr Radio, [In] long Address);

	[Token(Token = "0x200011F")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	private delegate void DISCOVERING_STARTED_EVENT([In] IntPtr sender, [In] IntPtr Radio);

	[Token(Token = "0x2000120")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	private delegate void DISCOVERING_COMPLETED_EVENT([In] IntPtr sender, [In] IntPtr Radio, [In] int Error);

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr FManager;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NOTIFY_EVENT FAfterOpen;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NOTIFY_EVENT FBeforeClose;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private DEVICE_FOUND_EVENT FOnDeviceFound;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private DISCOVERING_STARTED_EVENT FOnDiscoveringStarted;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private DISCOVERING_COMPLETED_EVENT FOnDiscoveringCompleted;

	[Token(Token = "0x17000054")]
	public int Count
	{
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xD6AB9C", Offset = "0xD6AB9C", VA = "0xD6AB9C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000055")]
	public IntPtr this[int Index]
	{
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xD6AC24", Offset = "0xD6AC24", VA = "0xD6AC24")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1400000F")]
	public event EventHandler AfterOpen
	{
		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xD6ACAC", Offset = "0xD6ACAC", VA = "0xD6ACAC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xD6AD48", Offset = "0xD6AD48", VA = "0xD6AD48")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event EventHandler BeforeClose
	{
		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xD6ADE4", Offset = "0xD6ADE4", VA = "0xD6ADE4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xD6AE80", Offset = "0xD6AE80", VA = "0xD6AE80")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event DeviceFoundEvent OnDeviceFound
	{
		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xD6AF1C", Offset = "0xD6AF1C", VA = "0xD6AF1C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xD6AFB8", Offset = "0xD6AFB8", VA = "0xD6AFB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event DiscoveringStartedEvent OnDiscoveringStarted
	{
		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xD6B054", Offset = "0xD6B054", VA = "0xD6B054")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xD6B0F0", Offset = "0xD6B0F0", VA = "0xD6B0F0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public event DiscoveringCompletedEvent OnDiscoveringCompleted
	{
		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xD6B18C", Offset = "0xD6B18C", VA = "0xD6B18C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xD6B228", Offset = "0xD6B228", VA = "0xD6B228")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[PreserveSig]
	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xD69884", Offset = "0xD69884", VA = "0xD69884")]
	private static extern IntPtr ManagerCreate();

	[PreserveSig]
	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xD698E8", Offset = "0xD698E8", VA = "0xD698E8")]
	private static extern void ManagerDestroy([In] IntPtr Manager);

	[PreserveSig]
	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xD69960", Offset = "0xD69960", VA = "0xD69960")]
	private static extern int ManagerOpen([In] IntPtr Manager);

	[PreserveSig]
	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xD699D8", Offset = "0xD699D8", VA = "0xD699D8")]
	private static extern int ManagerClose([In] IntPtr Manager);

	[PreserveSig]
	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xD69A50", Offset = "0xD69A50", VA = "0xD69A50")]
	private static extern int ManagerGetRadioCount([In] IntPtr Manager);

	[PreserveSig]
	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xD69AC4", Offset = "0xD69AC4", VA = "0xD69AC4")]
	private static extern IntPtr ManagerGetRadio([In] IntPtr Manager, int Index);

	[PreserveSig]
	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xD69B44", Offset = "0xD69B44", VA = "0xD69B44")]
	private static extern void ManagerSetAfterOpen([In] IntPtr Manager, [In] NOTIFY_EVENT Event);

	[PreserveSig]
	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xD69BCC", Offset = "0xD69BCC", VA = "0xD69BCC")]
	private static extern void ManagerSetBeforeClose([In] IntPtr Manager, [In] NOTIFY_EVENT Event);

	[PreserveSig]
	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xD69C54", Offset = "0xD69C54", VA = "0xD69C54")]
	private static extern void ManagerSetOnDeviceFound([In] IntPtr Manager, [In] DEVICE_FOUND_EVENT Event);

	[PreserveSig]
	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xD69CDC", Offset = "0xD69CDC", VA = "0xD69CDC")]
	private static extern void ManagerSetOnDiscoveringStarted([In] IntPtr Manager, [In] DISCOVERING_STARTED_EVENT Event);

	[PreserveSig]
	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xD69D64", Offset = "0xD69D64", VA = "0xD69D64")]
	private static extern void ManagerSetOnDiscoveringCompleted([In] IntPtr Manager, [In] DISCOVERING_COMPLETED_EVENT Event);

	[PreserveSig]
	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xD69DEC", Offset = "0xD69DEC", VA = "0xD69DEC")]
	private static extern int RadioDiscover([In] IntPtr Radio, [In] uint Timeout);

	[PreserveSig]
	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xD69E6C", Offset = "0xD69E6C", VA = "0xD69E6C")]
	private static extern bool RadioIsAvailable([In] IntPtr Radio);

	[PreserveSig]
	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xD69EEC", Offset = "0xD69EEC", VA = "0xD69EEC")]
	private static extern int RadioGetDeviceName([In] IntPtr Radio, [In] long Address, [In] IntPtr Name, [In] int Len);

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xD69F84", Offset = "0xD69F84", VA = "0xD69F84")]
	private void DoAfterOpen(IntPtr sender)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xD6A004", Offset = "0xD6A004", VA = "0xD6A004")]
	private void DoBeofreClose(IntPtr sender)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xD6A084", Offset = "0xD6A084", VA = "0xD6A084")]
	private void DoDeviceFound(IntPtr sender, IntPtr Radio, long Address)
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xD6A0A4", Offset = "0xD6A0A4", VA = "0xD6A0A4")]
	private void DoDiscoveringStarted(IntPtr sender, IntPtr Radio)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xD6A0C4", Offset = "0xD6A0C4", VA = "0xD6A0C4")]
	private void DoDiscoveringCompleted(IntPtr sender, IntPtr Radio, int Error)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xD6A0E4", Offset = "0xD6A0E4", VA = "0xD6A0E4", Slot = "5")]
	protected override void Free()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xD6A258", Offset = "0xD6A258", VA = "0xD6A258")]
	public BluetoothManager()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xD6A804", Offset = "0xD6A804", VA = "0xD6A804")]
	public int Open()
	{
		return default(int);
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xD6A1D0", Offset = "0xD6A1D0", VA = "0xD6A1D0")]
	public int Close()
	{
		return default(int);
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xD6A88C", Offset = "0xD6A88C", VA = "0xD6A88C")]
	public int Discover(IntPtr Radio, uint Timeout)
	{
		return default(int);
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xD6A918", Offset = "0xD6A918", VA = "0xD6A918")]
	public bool IsRadioAvailable(IntPtr Radio)
	{
		return default(bool);
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xD6A9A0", Offset = "0xD6A9A0", VA = "0xD6A9A0")]
	public int GetRemoteName(IntPtr Radio, long Address, out string Name)
	{
		return default(int);
	}
}
[Token(Token = "0x2000121")]
public struct GattUuid
{
	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool IsShortUuid;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public ushort ShortUuid;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public Guid LongUuid;
}
[Token(Token = "0x2000122")]
public struct GattService
{
	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GattUuid Uuid;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public ushort Handle;
}
[Token(Token = "0x2000123")]
public struct GattServices
{
	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public byte Count;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GattService[] Services;
}
[Token(Token = "0x2000124")]
public struct GattCharacteristic
{
	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ushort ServiceHandle;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public GattUuid Uuid;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public ushort Handle;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public ushort ValueHandle;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool IsBroadcastable;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool IsReadable;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool IsWritable;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool IsWritableWithoutResponse;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool IsSignedWritable;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool IsNotifiable;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool IsIndicatable;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool HasExtendedProperties;
}
[Token(Token = "0x2000125")]
public struct GattCharacteristics
{
	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public byte Count;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GattCharacteristic[] Chars;
}
[Token(Token = "0x2000126")]
public enum GattOperationFlag
{
	[Token(Token = "0x40008F0")]
	goNone,
	[Token(Token = "0x40008F1")]
	goReadFromDevice,
	[Token(Token = "0x40008F2")]
	goReadFromCache
}
[Token(Token = "0x2000127")]
public enum GattProtectionLevel
{
	[Token(Token = "0x40008F4")]
	plNone,
	[Token(Token = "0x40008F5")]
	plAuthentication,
	[Token(Token = "0x40008F6")]
	plEncryption,
	[Token(Token = "0x40008F7")]
	plEncryptionAndAuthentication
}
[Token(Token = "0x2000128")]
public delegate void ClietConnect(object sender, int Error);
[Token(Token = "0x2000129")]
public delegate void ClientDisconnect(object sender, int Reason);
[Token(Token = "0x200012A")]
public delegate void ClientChanged(object sender, ushort Handle, byte[] Value);
[Token(Token = "0x200012B")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void GATTCLIENT_CONNECT([In] IntPtr sender, [In] int Error);
[Token(Token = "0x200012C")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void GATTCLIENT_DISCONNECT([In] IntPtr sender, [In] int Reason);
[Token(Token = "0x200012D")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void GATTCLIENT_ONCHANGED([In] IntPtr sender, [In] ushort Handle, [In] IntPtr Value, [In] uint ValueLen);
[Token(Token = "0x200012E")]
public sealed class GattClientConnection : BluetoothImports
{
	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr FClient;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GATTCLIENT_CONNECT FOnConnect;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GATTCLIENT_DISCONNECT FOnDisconnect;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GATTCLIENT_ONCHANGED FOnChanged;

	[Token(Token = "0x14000014")]
	public event ClietConnect OnConnect
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0xD6CA48", Offset = "0xD6CA48", VA = "0xD6CA48")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000602")]
		[Address(RVA = "0xD6CAE4", Offset = "0xD6CAE4", VA = "0xD6CAE4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event ClientDisconnect OnDisconnect
	{
		[Token(Token = "0x6000603")]
		[Address(RVA = "0xD6CB80", Offset = "0xD6CB80", VA = "0xD6CB80")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000604")]
		[Address(RVA = "0xD6CC1C", Offset = "0xD6CC1C", VA = "0xD6CC1C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event ClientChanged OnChanged
	{
		[Token(Token = "0x6000605")]
		[Address(RVA = "0xD6CCB8", Offset = "0xD6CCB8", VA = "0xD6CCB8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000606")]
		[Address(RVA = "0xD6CD54", Offset = "0xD6CD54", VA = "0xD6CD54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[PreserveSig]
	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xD6B9C8", Offset = "0xD6B9C8", VA = "0xD6B9C8")]
	private static extern IntPtr GattClientCreate();

	[PreserveSig]
	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xD6BA2C", Offset = "0xD6BA2C", VA = "0xD6BA2C")]
	private static extern void GattClientDestroy([In] IntPtr Client);

	[PreserveSig]
	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xD6BAA4", Offset = "0xD6BAA4", VA = "0xD6BAA4")]
	private static extern void GattClientSetOnConnect([In] IntPtr Client, [In] GATTCLIENT_CONNECT Event);

	[PreserveSig]
	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xD6BB2C", Offset = "0xD6BB2C", VA = "0xD6BB2C")]
	private static extern void GattClientSetOnDisconnect([In] IntPtr Client, [In] GATTCLIENT_DISCONNECT Event);

	[PreserveSig]
	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xD6BBB4", Offset = "0xD6BBB4", VA = "0xD6BBB4")]
	private static extern void GattClientSetOnChanged([In] IntPtr Client, [In] GATTCLIENT_ONCHANGED Event);

	[PreserveSig]
	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xD6BC3C", Offset = "0xD6BC3C", VA = "0xD6BC3C")]
	private static extern int GattClientConnect([In] IntPtr Client, [In] IntPtr Radio, [In] long Address);

	[PreserveSig]
	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xD6BCCC", Offset = "0xD6BCCC", VA = "0xD6BCCC")]
	private static extern int GattClientDisconnect([In] IntPtr Client);

	[PreserveSig]
	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xD6BD40", Offset = "0xD6BD40", VA = "0xD6BD40")]
	private static extern int GattClientGetServices([In] IntPtr Client, [In][Out] ref GattServices Services);

	[PreserveSig]
	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xD6BE18", Offset = "0xD6BE18", VA = "0xD6BE18")]
	private static extern int GattClientGetCharas([In] IntPtr Client, [In] ref GattService Service, [In][Out] ref GattCharacteristics Chars);

	[PreserveSig]
	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xD6BF2C", Offset = "0xD6BF2C", VA = "0xD6BF2C")]
	private static extern int GattClientSubscribe([In] IntPtr Client, [In] ref GattCharacteristic Char);

	[PreserveSig]
	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xD6C01C", Offset = "0xD6C01C", VA = "0xD6C01C")]
	private static extern int GattClientUnsubscribe([In] IntPtr Client, [In] ref GattCharacteristic Char);

	[PreserveSig]
	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xD6C10C", Offset = "0xD6C10C", VA = "0xD6C10C")]
	private static extern int GattClientWriteClientConfiguration([In] IntPtr ClientClient, [In] ref GattCharacteristic Char, [In] bool Subscribe, [In] GattOperationFlag Flag, [In] GattProtectionLevel Protection);

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xD6C224", Offset = "0xD6C224", VA = "0xD6C224")]
	private void DoConnect(IntPtr sender, int Error)
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xD6C244", Offset = "0xD6C244", VA = "0xD6C244")]
	private void DoDisconnect(IntPtr sender, int Reason)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xD6C264", Offset = "0xD6C264", VA = "0xD6C264")]
	private void DoChanged(IntPtr sender, ushort Handle, IntPtr Value, uint ValueLen)
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xD6C37C", Offset = "0xD6C37C", VA = "0xD6C37C", Slot = "5")]
	protected override void Free()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xD6C4B8", Offset = "0xD6C4B8", VA = "0xD6C4B8")]
	public GattClientConnection()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xD6C644", Offset = "0xD6C644", VA = "0xD6C644")]
	public int Connect(IntPtr Radio, long Address)
	{
		return default(int);
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xD6C430", Offset = "0xD6C430", VA = "0xD6C430")]
	public int Disconnect()
	{
		return default(int);
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xD6C6CC", Offset = "0xD6C6CC", VA = "0xD6C6CC")]
	public int GetServices(out GattServices Services)
	{
		return default(int);
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xD6C7B4", Offset = "0xD6C7B4", VA = "0xD6C7B4")]
	public int GetCharacteristics(GattService Service, out GattCharacteristics Chars)
	{
		return default(int);
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xD6C8AC", Offset = "0xD6C8AC", VA = "0xD6C8AC")]
	public int Subscribe(GattCharacteristic Char)
	{
		return default(int);
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xD6C934", Offset = "0xD6C934", VA = "0xD6C934")]
	public int Unsubscribe(GattCharacteristic Char)
	{
		return default(int);
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xD6C9BC", Offset = "0xD6C9BC", VA = "0xD6C9BC")]
	public int WriteClientConfiguration(GattCharacteristic Char, bool Subscribe, GattOperationFlag Flag, GattProtectionLevel Protection)
	{
		return default(int);
	}
}
[Token(Token = "0x200012F")]
public class GattClientThread : BluetoothImports
{
	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private long FAddress;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GattClientConnection FClient;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool FDoDisconnect;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ManualResetEvent FInitEvent;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int FInitResult;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private IntPtr FRadio;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MessageReceiver FReceiver;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ManualResetEvent FTerminationEvent;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Thread FThread;

	[Token(Token = "0x17000056")]
	public long Address
	{
		[Token(Token = "0x600061A")]
		[Address(RVA = "0xD6E3A8", Offset = "0xD6E3A8", VA = "0xD6E3A8")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000057")]
	public bool Connected
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xD6E06C", Offset = "0xD6E06C", VA = "0xD6E06C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000017")]
	public event ClietConnect OnConnect
	{
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xD6E430", Offset = "0xD6E430", VA = "0xD6E430")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600061D")]
		[Address(RVA = "0xD6E4CC", Offset = "0xD6E4CC", VA = "0xD6E4CC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public event ClientDisconnect OnDisconnect
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xD6E568", Offset = "0xD6E568", VA = "0xD6E568")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600061F")]
		[Address(RVA = "0xD6E604", Offset = "0xD6E604", VA = "0xD6E604")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event ClientChanged OnChanged
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0xD6E6A0", Offset = "0xD6E6A0", VA = "0xD6E6A0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000621")]
		[Address(RVA = "0xD6E73C", Offset = "0xD6E73C", VA = "0xD6E73C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xD6CDF0", Offset = "0xD6CDF0", VA = "0xD6CDF0")]
	private void ClientConnect(object sender, int Error)
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xD6CE9C", Offset = "0xD6CE9C", VA = "0xD6CE9C")]
	private void ClientDisconnect(object sender, int Reason)
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xD6CF50", Offset = "0xD6CF50", VA = "0xD6CF50")]
	private void ClientChanged(object sender, ushort Handle, byte[] Value)
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xD6D158", Offset = "0xD6D158", VA = "0xD6D158")]
	private void ReceiverChanged(object sender, ushort Handle, byte[] Value)
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xD6D170", Offset = "0xD6D170", VA = "0xD6D170")]
	private void ReceiverDisconnect(object sender, int Reason)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xD6D2FC", Offset = "0xD6D2FC", VA = "0xD6D2FC")]
	private void ReceiverConnect(object sender, int Error)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xD6D340", Offset = "0xD6D340", VA = "0xD6D340")]
	private void ThreadProc()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xD6D5B8", Offset = "0xD6D5B8", VA = "0xD6D5B8", Slot = "5")]
	protected override void Free()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xD6D5E8", Offset = "0xD6D5E8", VA = "0xD6D5E8", Slot = "6")]
	protected virtual void DoConnect(int Error)
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xD6D610", Offset = "0xD6D610", VA = "0xD6D610", Slot = "7")]
	protected virtual void DoDisconnect(int Reason)
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xD6D638", Offset = "0xD6D638", VA = "0xD6D638", Slot = "8")]
	protected virtual void DoChanged(ushort Handle, byte[] Value)
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xD6D664", Offset = "0xD6D664", VA = "0xD6D664")]
	public GattClientThread()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xD6DBD8", Offset = "0xD6DBD8", VA = "0xD6DBD8")]
	public int Connect(IntPtr Radio, long Address)
	{
		return default(int);
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xD6E20C", Offset = "0xD6E20C", VA = "0xD6E20C")]
	public int GetServices(out GattServices gattServices)
	{
		return default(int);
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xD6E224", Offset = "0xD6E224", VA = "0xD6E224")]
	public int GetCharacteristics(GattService service, out GattCharacteristics chars)
	{
		return default(int);
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xD6E26C", Offset = "0xD6E26C", VA = "0xD6E26C")]
	public int SubscribeToChar(GattCharacteristic chara)
	{
		return default(int);
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xD6E2D4", Offset = "0xD6E2D4", VA = "0xD6E2D4")]
	public int UnsubscribeFromChar(GattCharacteristic chara)
	{
		return default(int);
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xD6E33C", Offset = "0xD6E33C", VA = "0xD6E33C")]
	public int WriteClientConfig(GattCharacteristic Chara, bool Subscribe, GattOperationFlag Flag, GattProtectionLevel Protection = GattProtectionLevel.plNone)
	{
		return default(int);
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xD6D1A0", Offset = "0xD6D1A0", VA = "0xD6D1A0")]
	public int Disconnect()
	{
		return default(int);
	}
}
[Token(Token = "0x2000130")]
public sealed class Helpers : BluetoothImports
{
	[PreserveSig]
	[Token(Token = "0x6000622")]
	[Address(RVA = "0xD6D538", Offset = "0xD6D538", VA = "0xD6D538")]
	public static extern uint AlertableWait([In] IntPtr Handle, [In] bool Infinite);

	[PreserveSig]
	[Token(Token = "0x6000623")]
	[Address(RVA = "0xD6E7D8", Offset = "0xD6E7D8", VA = "0xD6E7D8")]
	public static extern void ProcessApc();

	[PreserveSig]
	[Token(Token = "0x6000624")]
	[Address(RVA = "0xD6E838", Offset = "0xD6E838", VA = "0xD6E838")]
	public static extern void SetApcSync();
}
[Token(Token = "0x2000131")]
public sealed class MessageReceiver : BluetoothImports
{
	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr FReceiver;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GATTCLIENT_CONNECT FOnConnect;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GATTCLIENT_DISCONNECT FOnDisconnect;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GATTCLIENT_ONCHANGED FOnChanged;

	[Token(Token = "0x1400001A")]
	public event ClietConnect OnConnect
	{
		[Token(Token = "0x6000636")]
		[Address(RVA = "0xD6DAA0", Offset = "0xD6DAA0", VA = "0xD6DAA0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000637")]
		[Address(RVA = "0xD6EE2C", Offset = "0xD6EE2C", VA = "0xD6EE2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event ClientDisconnect OnDisconnect
	{
		[Token(Token = "0x6000638")]
		[Address(RVA = "0xD6DB3C", Offset = "0xD6DB3C", VA = "0xD6DB3C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000639")]
		[Address(RVA = "0xD6EEC8", Offset = "0xD6EEC8", VA = "0xD6EEC8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public event ClientChanged OnChanged
	{
		[Token(Token = "0x600063A")]
		[Address(RVA = "0xD6DA04", Offset = "0xD6DA04", VA = "0xD6DA04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600063B")]
		[Address(RVA = "0xD6EF64", Offset = "0xD6EF64", VA = "0xD6EF64")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[PreserveSig]
	[Token(Token = "0x6000625")]
	[Address(RVA = "0xD6E898", Offset = "0xD6E898", VA = "0xD6E898")]
	private static extern IntPtr MessageReciverCreate([In] GATTCLIENT_CONNECT OnConnect, [In] GATTCLIENT_DISCONNECT OnDisconnect, [In] GATTCLIENT_ONCHANGED OnChanged);

	[PreserveSig]
	[Token(Token = "0x6000626")]
	[Address(RVA = "0xD6E944", Offset = "0xD6E944", VA = "0xD6E944")]
	private static extern void MessageReciverDestroy([In] IntPtr Receiver);

	[PreserveSig]
	[Token(Token = "0x6000627")]
	[Address(RVA = "0xD6E9BC", Offset = "0xD6E9BC", VA = "0xD6E9BC")]
	private static extern int MessageReciverOpen([In] IntPtr Receiver);

	[PreserveSig]
	[Token(Token = "0x6000628")]
	[Address(RVA = "0xD6EA34", Offset = "0xD6EA34", VA = "0xD6EA34")]
	private static extern int MessageReciverClose([In] IntPtr Receiver);

	[PreserveSig]
	[Token(Token = "0x6000629")]
	[Address(RVA = "0xD6EAAC", Offset = "0xD6EAAC", VA = "0xD6EAAC")]
	private static extern void MessageReceiverNotifyConnect([In] IntPtr Receiver, [In] int Error);

	[PreserveSig]
	[Token(Token = "0x600062A")]
	[Address(RVA = "0xD6EB2C", Offset = "0xD6EB2C", VA = "0xD6EB2C")]
	private static extern void MessageReceiverNotifyDisconnect([In] IntPtr Receiver, [In] int Result);

	[PreserveSig]
	[Token(Token = "0x600062B")]
	[Address(RVA = "0xD6EBAC", Offset = "0xD6EBAC", VA = "0xD6EBAC")]
	private static extern void MessageReceiverNotifyChanged([In] IntPtr Receiver, [In] ushort Handle, [In] IntPtr Value, [In] ushort ValueLen);

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xD6EC44", Offset = "0xD6EC44", VA = "0xD6EC44")]
	private void DoConnect(IntPtr sender, int Error)
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xD6EC64", Offset = "0xD6EC64", VA = "0xD6EC64")]
	private void DoDisconnect(IntPtr sender, int Reason)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xD6EC84", Offset = "0xD6EC84", VA = "0xD6EC84")]
	private void DoChanged(IntPtr sender, ushort Handle, IntPtr Value, uint ValueLen)
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xD6ED9C", Offset = "0xD6ED9C", VA = "0xD6ED9C", Slot = "5")]
	protected override void Free()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xD6D888", Offset = "0xD6D888", VA = "0xD6D888")]
	public MessageReceiver()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xD6E0FC", Offset = "0xD6E0FC", VA = "0xD6E0FC")]
	public int Open()
	{
		return default(int);
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xD6E184", Offset = "0xD6E184", VA = "0xD6E184")]
	public int Close()
	{
		return default(int);
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xD6CE14", Offset = "0xD6CE14", VA = "0xD6CE14")]
	public void NotifyConnect(int Error)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xD6CEC8", Offset = "0xD6CEC8", VA = "0xD6CEC8")]
	public void NotifyDisconnect(int Reason)
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xD6CF70", Offset = "0xD6CF70", VA = "0xD6CF70")]
	public void NotifyChanged(ushort Handle, byte[] Value)
	{
	}
}
[Token(Token = "0x2000132")]
public class CameraFarClipSetup : MonoBehaviour
{
	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int farClipPlane;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int farClipPlaneQuest;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera[] allCameras;

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xD6F000", Offset = "0xD6F000", VA = "0xD6F000")]
	private void Awake()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xD6F078", Offset = "0xD6F078", VA = "0xD6F078")]
	private void Start()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xD6F140", Offset = "0xD6F140", VA = "0xD6F140")]
	public CameraFarClipSetup()
	{
	}
}
[Token(Token = "0x2000133")]
public class CameraSmooth : MonoBehaviour
{
	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cameraTarget;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera cameraSelf;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool enableSmooth;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lerpPositionRate;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lerpRotationRate;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationOffset;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion targetRotation;

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xD6F154", Offset = "0xD6F154", VA = "0xD6F154")]
	public void Start()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xD6F318", Offset = "0xD6F318", VA = "0xD6F318")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xD6F640", Offset = "0xD6F640", VA = "0xD6F640")]
	public CameraSmooth()
	{
	}
}
[Token(Token = "0x2000134")]
public class EventCameraSetup : MonoBehaviour
{
	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Canvas[] sceneCanvases;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] rootObjects;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera mainCam;

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xD6F664", Offset = "0xD6F664", VA = "0xD6F664")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xD6F688", Offset = "0xD6F688", VA = "0xD6F688")]
	private void Start()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xD6F7B8", Offset = "0xD6F7B8", VA = "0xD6F7B8")]
	public EventCameraSetup()
	{
	}
}
[Token(Token = "0x2000135")]
public class BasePlatformObject : MonoBehaviour
{
	[Token(Token = "0x6000645")]
	[Address(RVA = "0xD6F7C0", Offset = "0xD6F7C0", VA = "0xD6F7C0")]
	public BasePlatformObject()
	{
	}
}
[Token(Token = "0x2000136")]
public class EndscreenModifierEntry : MonoBehaviour
{
	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI nameText;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI multiplierText;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color inactiveColor;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string multiplier;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color nameColor;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color multiplierColor;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xD6F7C8", Offset = "0xD6F7C8", VA = "0xD6F7C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xD6F81C", Offset = "0xD6F81C", VA = "0xD6F81C")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xD6F840", Offset = "0xD6F840", VA = "0xD6F840")]
	public void SetMultiplier(float multiplier)
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xD6F8D4", Offset = "0xD6F8D4", VA = "0xD6F8D4")]
	public void SetActive(bool isActive)
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xD6F9C8", Offset = "0xD6F9C8", VA = "0xD6F9C8")]
	public EndscreenModifierEntry()
	{
	}
}
[Token(Token = "0x2000137")]
public class Asteroid : MonoBehaviour
{
	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Vector3 tumble;

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xD6F9D0", Offset = "0xD6F9D0", VA = "0xD6F9D0")]
	internal void Play()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xD6FA68", Offset = "0xD6FA68", VA = "0xD6FA68")]
	internal void Stop()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xD6FB00", Offset = "0xD6FB00", VA = "0xD6FB00")]
	public Asteroid()
	{
	}
}
[Token(Token = "0x2000138")]
public class Asteroids : MonoBehaviour
{
	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Asteroid[] actualAsteroids;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool currentlyFadingIn;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool currentlyFadingOut;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Asteroid currentAsteroid;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 direction;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 actualStartPoint;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 actualEndPoint;

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xD6FB1C", Offset = "0xD6FB1C", VA = "0xD6FB1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xD6FB20", Offset = "0xD6FB20", VA = "0xD6FB20")]
	private void Restart()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xD6FBF8", Offset = "0xD6FBF8", VA = "0xD6FBF8")]
	public void SetupAsteroid(int nr, Vector3 startPoint, Vector3 endPoint)
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xD6FEE4", Offset = "0xD6FEE4", VA = "0xD6FEE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xD70320", Offset = "0xD70320", VA = "0xD70320")]
	public Asteroids()
	{
	}
}
[Token(Token = "0x2000139")]
public class BattleIsland : MonoBehaviour
{
	[Token(Token = "0x6000653")]
	[Address(RVA = "0xD70328", Offset = "0xD70328", VA = "0xD70328")]
	public BattleIsland()
	{
	}
}
[Token(Token = "0x200013A")]
public abstract class EnvironmentHighlighter : MonoBehaviour
{
	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly int MAX_COUNT;

	[Token(Token = "0x6000654")]
	public abstract void HighlightSingle(float strength);

	[Token(Token = "0x6000655")]
	public abstract void HighlightFlush();

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xD70330", Offset = "0xD70330", VA = "0xD70330", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xD70334", Offset = "0xD70334", VA = "0xD70334")]
	protected int GetCountFromStrength(float strength)
	{
		return default(int);
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xD7045C", Offset = "0xD7045C", VA = "0xD7045C")]
	protected EnvironmentHighlighter()
	{
	}
}
[Token(Token = "0x200013B")]
public class FlameBurst : MonoBehaviour
{
	[Token(Token = "0x600065A")]
	[Address(RVA = "0xD704B0", Offset = "0xD704B0", VA = "0xD704B0")]
	public FlameBurst()
	{
	}
}
[Token(Token = "0x200013C")]
public class LightBeam : MonoBehaviour
{
	[Token(Token = "0x600065B")]
	[Address(RVA = "0xD704B8", Offset = "0xD704B8", VA = "0xD704B8")]
	public LightBeam()
	{
	}
}
[Token(Token = "0x200013D")]
public class MedievalHighlighter : EnvironmentHighlighter
{
	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<FlameBurst> flames;

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xD704C0", Offset = "0xD704C0", VA = "0xD704C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xD70570", Offset = "0xD70570", VA = "0xD70570")]
	private new void Update()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xD70574", Offset = "0xD70574", VA = "0xD70574", Slot = "5")]
	public override void HighlightFlush()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xD7071C", Offset = "0xD7071C", VA = "0xD7071C", Slot = "4")]
	public override void HighlightSingle(float strength)
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xD70978", Offset = "0xD70978", VA = "0xD70978")]
	public MedievalHighlighter()
	{
	}
}
[Token(Token = "0x200013E")]
public class NetherworldHighlighter : EnvironmentHighlighter
{
	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<TechnoBurst> bursts;

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xD70A24", Offset = "0xD70A24", VA = "0xD70A24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xD70AD4", Offset = "0xD70AD4", VA = "0xD70AD4")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xD70AD8", Offset = "0xD70AD8", VA = "0xD70AD8", Slot = "5")]
	public override void HighlightFlush()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xD70C80", Offset = "0xD70C80", VA = "0xD70C80", Slot = "4")]
	public override void HighlightSingle(float strength)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xD70EDC", Offset = "0xD70EDC", VA = "0xD70EDC")]
	public NetherworldHighlighter()
	{
	}
}
[Token(Token = "0x200013F")]
public class SkyHighlighter : EnvironmentHighlighter
{
	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<LightBeam> beams;

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xD70F88", Offset = "0xD70F88", VA = "0xD70F88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xD71038", Offset = "0xD71038", VA = "0xD71038")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xD7103C", Offset = "0xD7103C", VA = "0xD7103C", Slot = "5")]
	public override void HighlightFlush()
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xD711E4", Offset = "0xD711E4", VA = "0xD711E4", Slot = "4")]
	public override void HighlightSingle(float strength)
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xD71440", Offset = "0xD71440", VA = "0xD71440")]
	public SkyHighlighter()
	{
	}
}
[Token(Token = "0x2000140")]
public class TechnoBurst : MonoBehaviour
{
	[Token(Token = "0x600066B")]
	[Address(RVA = "0xD714EC", Offset = "0xD714EC", VA = "0xD714EC")]
	public TechnoBurst()
	{
	}
}
[Token(Token = "0x2000141")]
public class MovingCylinder : MonoBehaviour
{
	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject cylinder1;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject cylinder2;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject cylinder3;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject cylinder4;

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xD714F4", Offset = "0xD714F4", VA = "0xD714F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xD71908", Offset = "0xD71908", VA = "0xD71908")]
	public MovingCylinder()
	{
	}
}
[Token(Token = "0x2000142")]
public class NetherworldSphereMover : MonoBehaviour
{
	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int pointCount;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxMovement;

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xD71910", Offset = "0xD71910", VA = "0xD71910")]
	private void Start()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xD71BA0", Offset = "0xD71BA0", VA = "0xD71BA0")]
	public NetherworldSphereMover()
	{
	}
}
[Token(Token = "0x2000143")]
public class Planet : MonoBehaviour
{
	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xD71BBC", Offset = "0xD71BBC", VA = "0xD71BBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xD71C38", Offset = "0xD71C38", VA = "0xD71C38")]
	public Planet()
	{
	}
}
[Token(Token = "0x2000144")]
public class PlayspaceBoundaries : MonoBehaviour
{
	[Token(Token = "0x6000672")]
	[Address(RVA = "0xD71C48", Offset = "0xD71C48", VA = "0xD71C48")]
	public PlayspaceBoundaries()
	{
	}
}
[Token(Token = "0x2000145")]
public class SatelliteMover : MonoBehaviour
{
	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int pointCount;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xD71C50", Offset = "0xD71C50", VA = "0xD71C50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xD71EB4", Offset = "0xD71EB4", VA = "0xD71EB4")]
	public SatelliteMover()
	{
	}
}
[Token(Token = "0x2000146")]
public class ScoreComboPanel : MonoBehaviour
{
	[Token(Token = "0x6000675")]
	[Address(RVA = "0xD71EC8", Offset = "0xD71EC8", VA = "0xD71EC8")]
	public ScoreComboPanel()
	{
	}
}
[Token(Token = "0x2000147")]
public class ShuttleEngine : MonoBehaviour
{
	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particles;

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xD71ED0", Offset = "0xD71ED0", VA = "0xD71ED0")]
	public void Start()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xD71F28", Offset = "0xD71F28", VA = "0xD71F28")]
	public void ControlEngine(int power)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xD71FA0", Offset = "0xD71FA0", VA = "0xD71FA0")]
	public ShuttleEngine()
	{
	}
}
[Token(Token = "0x2000148")]
public class SkycityBattleIsland : MonoBehaviour
{
	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject battleIsland;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minSpawnTime;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float maxSpawnTime;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float minFlightTime;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxFlightTime;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float minY;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float maxY;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float minX;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float maxX;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float minZ;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float maxZ;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float maxBattleIslands;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float timeSinceLastSpawn;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float nextSpawnTime;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int existingBattleIslands;

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xD71FA8", Offset = "0xD71FA8", VA = "0xD71FA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xD71FC8", Offset = "0xD71FC8", VA = "0xD71FC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xD7221C", Offset = "0xD7221C", VA = "0xD7221C")]
	private void DecreaseNumberOfBattleIslands()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xD7222C", Offset = "0xD7222C", VA = "0xD7222C")]
	public SkycityBattleIsland()
	{
	}
}
[Token(Token = "0x2000149")]
public class SkycityIslandMover : MonoBehaviour
{
	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int pointCount;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxMovement;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float rotationBaseSpeed;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool rotate;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool isCrystall;

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xD72234", Offset = "0xD72234", VA = "0xD72234")]
	private void Start()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xD725D8", Offset = "0xD725D8", VA = "0xD725D8")]
	public SkycityIslandMover()
	{
	}
}
[Token(Token = "0x200014A")]
public class SkyWheel : MonoBehaviour
{
	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject skyWheel;

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xD725FC", Offset = "0xD725FC", VA = "0xD725FC")]
	public void EnableSkyWheel()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xD7261C", Offset = "0xD7261C", VA = "0xD7261C")]
	public void DisableSkyWheel()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xD7263C", Offset = "0xD7263C", VA = "0xD7263C")]
	public SkyWheel()
	{
	}
}
[Token(Token = "0x200014B")]
public class SpaceshipMover : MonoBehaviour
{
	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject spaceship;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minSpawnTime;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float maxSpawnTime;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float minFlightTime;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxFlightTime;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float minY;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float maxY;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float minX;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float maxX;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float minZ;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float maxZ;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timeSinceLastSpawn;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float nextSpawnTime;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int existingSpaceships;

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xD72644", Offset = "0xD72644", VA = "0xD72644")]
	private void Start()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xD72664", Offset = "0xD72664", VA = "0xD72664")]
	private void Update()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xD7296C", Offset = "0xD7296C", VA = "0xD7296C")]
	private void DecreaseNumberOfShips()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xD7297C", Offset = "0xD7297C", VA = "0xD7297C")]
	public SpaceshipMover()
	{
	}
}
[Token(Token = "0x200014C")]
public class TerrainGrassWindSetter : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200014D")]
	private class TerrainGrassWindSettings
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float speed;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float size;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float bending;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color tint;

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xD72B38", Offset = "0xD72B38", VA = "0xD72B38")]
		public void SetToTerrainData(TerrainData terrainData)
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xD72A84", Offset = "0xD72A84", VA = "0xD72A84")]
		public static TerrainGrassWindSettings FromTerrainData(TerrainData terrainData)
		{
			return null;
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xD72C94", Offset = "0xD72C94", VA = "0xD72C94")]
		public TerrainGrassWindSettings()
		{
		}
	}

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Terrain _terrain;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TerrainGrassWindSettings _windSettings;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TerrainData _terrainData;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TerrainGrassWindSettings _previousSettings;

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xD72984", Offset = "0xD72984", VA = "0xD72984")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xD72B9C", Offset = "0xD72B9C", VA = "0xD72B9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xD72C8C", Offset = "0xD72C8C", VA = "0xD72C8C")]
	public TerrainGrassWindSetter()
	{
	}
}
[Token(Token = "0x200014E")]
public class UpdateGlobalShaderTime : MonoBehaviour
{
	[Token(Token = "0x600068C")]
	[Address(RVA = "0xD72CA8", Offset = "0xD72CA8", VA = "0xD72CA8")]
	private void Update()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xD72CFC", Offset = "0xD72CFC", VA = "0xD72CFC")]
	public UpdateGlobalShaderTime()
	{
	}
}
[Token(Token = "0x200014F")]
public class EnvironmentPreviewGenerator : MonoBehaviour
{
	[Token(Token = "0x600068E")]
	[Address(RVA = "0xD72D04", Offset = "0xD72D04", VA = "0xD72D04")]
	public Sprite GeneratePreview(Camera cam)
	{
		return null;
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xD72FB0", Offset = "0xD72FB0", VA = "0xD72FB0")]
	public EnvironmentPreviewGenerator()
	{
	}
}
[Token(Token = "0x2000150")]
public class MenuEnvironment : MonoBehaviour
{
	[Token(Token = "0x6000690")]
	[Address(RVA = "0xD72FB8", Offset = "0xD72FB8", VA = "0xD72FB8")]
	public MenuEnvironment()
	{
	}
}
[Token(Token = "0x2000151")]
public class TheSunAndOnly : MonoBehaviour
{
	[Token(Token = "0x6000691")]
	[Address(RVA = "0xD72FC0", Offset = "0xD72FC0", VA = "0xD72FC0")]
	public TheSunAndOnly()
	{
	}
}
[Token(Token = "0x2000152")]
public abstract class GeneratorSettingsAdjuster : MonoBehaviour
{
	[Token(Token = "0x6000692")]
	public abstract GeneratorUserSettings GetSettings();

	[Token(Token = "0x6000693")]
	public abstract void Initialize(GeneratorUserSettings generatorSetting, Song.Difficulty selectedDifficulty);

	[Token(Token = "0x6000694")]
	public abstract void SetResetParametersAction(Action<Song.Difficulty> action);

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xD72FC8", Offset = "0xD72FC8", VA = "0xD72FC8")]
	protected GeneratorSettingsAdjuster()
	{
	}
}
[Token(Token = "0x2000153")]
public class CollidableHeadObject : CollidableObject
{
	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameManager gameManager;

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xD72FD0", Offset = "0xD72FD0", VA = "0xD72FD0", Slot = "4")]
	internal override Vector3 GetSpeed()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xD72FE0", Offset = "0xD72FE0", VA = "0xD72FE0", Slot = "6")]
	internal override bool IsController()
	{
		return default(bool);
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xD72FE8", Offset = "0xD72FE8", VA = "0xD72FE8", Slot = "7")]
	internal override Controller GetController()
	{
		return null;
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xD72FF0", Offset = "0xD72FF0", VA = "0xD72FF0", Slot = "5")]
	internal override GameManager GetGameManager()
	{
		return null;
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xD72FF8", Offset = "0xD72FF8", VA = "0xD72FF8")]
	internal void Setup(GameManager manager)
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xD73000", Offset = "0xD73000", VA = "0xD73000")]
	public CollidableHeadObject()
	{
	}
}
[Token(Token = "0x2000154")]
public abstract class CollidableObject : MonoBehaviour
{
	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WeaponType weaponType;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<MovingElement, HashSet<Collider>> contacts;

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xD73010", Offset = "0xD73010", VA = "0xD73010")]
	private void Start()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xD7308C", Offset = "0xD7308C", VA = "0xD7308C")]
	internal void PartTriggerEnter(CollidableObjectPart collidableObjectPart, Collider contactCollider)
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xD732C4", Offset = "0xD732C4", VA = "0xD732C4")]
	internal void PartTriggerExit(CollidableObjectPart collidableObjectPart, Collider contactCollider)
	{
	}

	[Token(Token = "0x600069F")]
	internal abstract Vector3 GetSpeed();

	[Token(Token = "0x60006A0")]
	internal abstract GameManager GetGameManager();

	[Token(Token = "0x60006A1")]
	internal abstract bool IsController();

	[Token(Token = "0x60006A2")]
	internal abstract Controller GetController();

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xD73008", Offset = "0xD73008", VA = "0xD73008")]
	protected CollidableObject()
	{
	}
}
[Token(Token = "0x2000155")]
public interface DestroyableElement
{
	[Token(Token = "0x60006A4")]
	bool HasBeenHit();

	[Token(Token = "0x60006A5")]
	void SetHit();

	[Token(Token = "0x60006A6")]
	void CancelMovement();

	[Token(Token = "0x60006A7")]
	void BounceOff(float objectVelocity);

	[Token(Token = "0x60006A8")]
	void DestroyWithEffect(bool completeDestruction, CollidableObject co, float currentDebrisDuration, Vector3 hitSpeed);

	[Token(Token = "0x60006A9")]
	void DestroyGameObject(float currentDebrisDuration);

	[Token(Token = "0x60006AA")]
	void DeactivateSwingIndicator();

	[Token(Token = "0x60006AB")]
	Vector3 ReturnPosition();

	[Token(Token = "0x60006AC")]
	GameObject GetGameObject();
}
[Token(Token = "0x2000156")]
public class MultiplierIndicator : MonoBehaviour
{
	[Token(Token = "0x2000157")]
	public enum Mode
	{
		[Token(Token = "0x400096F")]
		OFF,
		[Token(Token = "0x4000970")]
		COUNTDOWN,
		[Token(Token = "0x4000971")]
		MULTIPLIER
	}

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI multiplierText;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI multiplierLabel;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Slider multiplierSlider;

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xD73448", Offset = "0xD73448", VA = "0xD73448")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xD735B4", Offset = "0xD735B4", VA = "0xD735B4")]
	public void SetSimpleValueOnly(string value)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xD735D8", Offset = "0xD735D8", VA = "0xD735D8")]
	public void SetMultiplier(float percentage)
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xD73450", Offset = "0xD73450", VA = "0xD73450")]
	internal void SetMode(Mode mode)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xD73690", Offset = "0xD73690", VA = "0xD73690")]
	internal Quaternion GetTextRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xD736C4", Offset = "0xD736C4", VA = "0xD736C4")]
	internal Vector3 GetTextPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xD736EC", Offset = "0xD736EC", VA = "0xD736EC")]
	internal Vector3 GetTextLocalScale()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xD73714", Offset = "0xD73714", VA = "0xD73714")]
	internal GameObject GetTextComponent()
	{
		return null;
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xD73730", Offset = "0xD73730", VA = "0xD73730")]
	public MultiplierIndicator()
	{
	}
}
[Token(Token = "0x2000158")]
public class PunchShockwaveEffect : MonoBehaviour
{
	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xD73738", Offset = "0xD73738", VA = "0xD73738")]
	public PunchShockwaveEffect()
	{
	}
}
[Token(Token = "0x2000159")]
public class ShatterParticles : MonoBehaviour
{
	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xD73740", Offset = "0xD73740", VA = "0xD73740")]
	public ShatterParticles()
	{
	}
}
[Token(Token = "0x200015A")]
public class VFXConfiguration : MonoBehaviour
{
	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ParticleSystem> nonLoopingEffects;

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xD73748", Offset = "0xD73748", VA = "0xD73748")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xD7374C", Offset = "0xD7374C", VA = "0xD7374C")]
	private void CreatNonLoopingVFXList()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xD73750", Offset = "0xD73750", VA = "0xD73750")]
	public List<ParticleSystem> GetNonLoopingEffects()
	{
		return null;
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xD73758", Offset = "0xD73758", VA = "0xD73758")]
	public VFXConfiguration()
	{
	}
}
[Token(Token = "0x200015B")]
public class VFXPoolManager : MonoBehaviour
{
	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int initialPoolSize;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool allowGrowing;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPosition;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRotation;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Dictionary<ParticleSystem, Queue<ParticleSystem>> poolDictionary;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private VFXConfiguration vfxConfiguration;

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xD737E0", Offset = "0xD737E0", VA = "0xD737E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xD73894", Offset = "0xD73894", VA = "0xD73894")]
	private void InstantiateGivenVFX()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xD73C18", Offset = "0xD73C18", VA = "0xD73C18")]
	private ParticleSystem GrowPool(ParticleSystem prefab)
	{
		return null;
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xD73CF0", Offset = "0xD73CF0", VA = "0xD73CF0")]
	private ParticleSystem GetObjectFromPool(ParticleSystem prefab)
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xD73D68", Offset = "0xD73D68", VA = "0xD73D68")]
	private void CreateNewPool(ParticleSystem prefab)
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xD73B40", Offset = "0xD73B40", VA = "0xD73B40")]
	private void SetParticleSystem(ParticleSystem ps, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xD73E0C", Offset = "0xD73E0C", VA = "0xD73E0C")]
	public ParticleSystem SpawnFromPool(ParticleSystem prefab, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xD73F94", Offset = "0xD73F94", VA = "0xD73F94")]
	private IEnumerator _PutObjectBackInPool(ParticleSystem prefab, ParticleSystem spawnedPS, float delay)
	{
		return null;
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xD74070", Offset = "0xD74070", VA = "0xD74070")]
	public VFXPoolManager()
	{
	}
}
[Token(Token = "0x200015D")]
public abstract class WeaponDeployer : MonoBehaviour
{
	[Token(Token = "0x60006CB")]
	internal abstract void TriggerDeployment(bool turnOn);

	[Token(Token = "0x60006CC")]
	internal abstract void ShowCollision();

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xD74250", Offset = "0xD74250", VA = "0xD74250")]
	protected WeaponDeployer()
	{
	}
}
[Token(Token = "0x200015E")]
public class WeaponDeployerShield : WeaponDeployer
{
	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xD74258", Offset = "0xD74258", VA = "0xD74258")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xD742B0", Offset = "0xD742B0", VA = "0xD742B0", Slot = "4")]
	internal override void TriggerDeployment(bool turnOn)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xD74318", Offset = "0xD74318", VA = "0xD74318", Slot = "5")]
	internal override void ShowCollision()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xD7436C", Offset = "0xD7436C", VA = "0xD7436C")]
	public WeaponDeployerShield()
	{
	}
}
[Token(Token = "0x200015F")]
public class WeaponStartInfo : MonoBehaviour
{
	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xD74374", Offset = "0xD74374", VA = "0xD74374")]
	public WeaponStartInfo()
	{
	}
}
[Token(Token = "0x2000160")]
public class EditorPositionLocalizationString : MonoBehaviour
{
	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float currentBeat;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxBeats;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string timeLeft;

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xD7437C", Offset = "0xD7437C", VA = "0xD7437C")]
	public void SetPosition(float currentBeat, int maxBeat, string timeLeft)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xD74480", Offset = "0xD74480", VA = "0xD74480")]
	public void SetEnd()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xD74538", Offset = "0xD74538", VA = "0xD74538")]
	public EditorPositionLocalizationString()
	{
	}
}
[Token(Token = "0x2000161")]
public class PlaylistSongInfoLocalizationString : MonoBehaviour
{
	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xD74540", Offset = "0xD74540", VA = "0xD74540")]
	internal void UpdateEntry(int numberOfFinishedSongs, int playlistSongCount, int playedRounds)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xD74810", Offset = "0xD74810", VA = "0xD74810")]
	public PlaylistSongInfoLocalizationString()
	{
	}
}
[Token(Token = "0x2000162")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioManager instance;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSetting[] audioSettings;

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xD74818", Offset = "0xD74818", VA = "0xD74818")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xD74898", Offset = "0xD74898", VA = "0xD74898")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xD749E8", Offset = "0xD749E8", VA = "0xD749E8")]
	public AudioManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000163")]
public class AudioSetting
{
	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Slider slider;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject redX;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string exposedParam;

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xD748F4", Offset = "0xD748F4", VA = "0xD748F4")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xD749F0", Offset = "0xD749F0", VA = "0xD749F0")]
	public AudioSetting()
	{
	}
}
[Token(Token = "0x2000164")]
public class AudioSourceEffects : MonoBehaviour
{
	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xD749F8", Offset = "0xD749F8", VA = "0xD749F8")]
	public AudioSourceEffects()
	{
	}
}
[Token(Token = "0x2000165")]
public class AudioSourceMusic : MonoBehaviour
{
	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xD74A00", Offset = "0xD74A00", VA = "0xD74A00")]
	public AudioSourceMusic()
	{
	}
}
[Token(Token = "0x2000166")]
public class ImageCycler : MonoBehaviour
{
	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Sprite[] sprites;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float framesPerSecond;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Image image;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xD74A08", Offset = "0xD74A08", VA = "0xD74A08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xD74A60", Offset = "0xD74A60", VA = "0xD74A60")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xD74ADC", Offset = "0xD74ADC", VA = "0xD74ADC")]
	public ImageCycler()
	{
	}
}
[Token(Token = "0x2000167")]
public class IngameMenuSoundConfiguration : MonoBehaviour
{
	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip buttonHover;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip buttonClick;

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xD74AEC", Offset = "0xD74AEC", VA = "0xD74AEC")]
	public IngameMenuSoundConfiguration()
	{
	}
}
[Token(Token = "0x2000168")]
public class DriveNameHelper
{
	[Token(Token = "0x2000169")]
	public enum SIGDN : uint
	{
		[Token(Token = "0x400098F")]
		NORMALDISPLAY = 0u,
		[Token(Token = "0x4000990")]
		PARENTRELATIVEPARSING = 2147581953u,
		[Token(Token = "0x4000991")]
		DESKTOPABSOLUTEPARSING = 2147647488u,
		[Token(Token = "0x4000992")]
		PARENTRELATIVEEDITING = 2147684353u,
		[Token(Token = "0x4000993")]
		DESKTOPABSOLUTEEDITING = 2147794944u,
		[Token(Token = "0x4000994")]
		FILESYSPATH = 2147844096u,
		[Token(Token = "0x4000995")]
		URL = 2147909632u,
		[Token(Token = "0x4000996")]
		PARENTRELATIVEFORADDRESSBAR = 2147991553u,
		[Token(Token = "0x4000997")]
		PARENTRELATIVE = 2148007937u
	}

	[PreserveSig]
	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xD74AF4", Offset = "0xD74AF4", VA = "0xD74AF4")]
	public static extern uint SHParseDisplayName(string pszName, IntPtr zero, out IntPtr ppidl, uint sfgaoIn, out uint psfgaoOut);

	[PreserveSig]
	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xD74BA8", Offset = "0xD74BA8", VA = "0xD74BA8")]
	public static extern uint SHGetNameFromIDList(IntPtr pidl, SIGDN sigdnName, out string ppszName);

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xD74C6C", Offset = "0xD74C6C", VA = "0xD74C6C")]
	public static string GetDriveLabel(string driveNameAsLetterColonBackslash)
	{
		return null;
	}
}
[Token(Token = "0x200016A")]
public interface IListItemWithIconAndText
{
	[Token(Token = "0x60006E6")]
	void SetIcon(string text);

	[Token(Token = "0x60006E7")]
	void SetText(string text);
}
[Token(Token = "0x200016B")]
public class LIVFakeShadow : MonoBehaviour
{
	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform headCamera;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float lerpTime;

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xD74D0C", Offset = "0xD74D0C", VA = "0xD74D0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xD74DEC", Offset = "0xD74DEC", VA = "0xD74DEC")]
	public LIVFakeShadow()
	{
	}
}
[Token(Token = "0x200016C")]
public class MenuHoverTooltip : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject toolTip;

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xD74E00", Offset = "0xD74E00", VA = "0xD74E00")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xD74E88", Offset = "0xD74E88", VA = "0xD74E88", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xD74F10", Offset = "0xD74F10", VA = "0xD74F10", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xD74F98", Offset = "0xD74F98", VA = "0xD74F98")]
	public MenuHoverTooltip()
	{
	}
}
[Token(Token = "0x200016D")]
public class MenuLogoEffect : MonoBehaviour
{
	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private DissolveSettings dissolveSettings;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float timeToDissolve;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject ball;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem ballParticles;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject trailObject;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem trailObjectParticles;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector3 trailPosition1;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Vector3 trailPosition2;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Vector3 trailPosition3;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private Vector3 trailPosition4;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Vector3 startPosition;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private Vector3 endPosition;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float timeToFly;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private int timeToWait;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private int firstWaitTime;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioSource sfxAudioSource;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AudioClip heartBeat;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float timeSinceLastEffect;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dissolve ballDissolve;

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xD74FA0", Offset = "0xD74FA0", VA = "0xD74FA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xD75098", Offset = "0xD75098", VA = "0xD75098")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xD755B8", Offset = "0xD755B8", VA = "0xD755B8")]
	private void ResetBall()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xD75678", Offset = "0xD75678", VA = "0xD75678")]
	private void DissolveBall()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xD756B0", Offset = "0xD756B0", VA = "0xD756B0")]
	private void DisableBall()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xD75620", Offset = "0xD75620", VA = "0xD75620")]
	private void ResetTrailObject()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xD756D0", Offset = "0xD756D0", VA = "0xD756D0")]
	private void FadeOutTrail()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xD756F4", Offset = "0xD756F4", VA = "0xD756F4")]
	private void PlayHeartBeat()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xD75718", Offset = "0xD75718", VA = "0xD75718")]
	private void DisableTrailObject()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xD75738", Offset = "0xD75738", VA = "0xD75738")]
	public MenuLogoEffect()
	{
	}
}
[Token(Token = "0x200016E")]
public class MenuSoundConfiguration : MonoBehaviour
{
	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip weaponUnlockedVoice;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip weaponUnlockedVoiceFemale;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip maleVoiceSampleClip;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip femaleVoiceSampleClip;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip weaponUnlockedJingle;

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xD75770", Offset = "0xD75770", VA = "0xD75770")]
	public MenuSoundConfiguration()
	{
	}
}
[Token(Token = "0x200016F")]
[RequireComponent(typeof(MultiImageTargetGraphics))]
public class MultiImageButton : Button
{
	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Graphic[] graphics;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private MultiImageTargetGraphics targetGraphics;

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xD75778", Offset = "0xD75778", VA = "0xD75778", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xD75780", Offset = "0xD75780", VA = "0xD75780", Slot = "26")]
	protected override void DoStateTransition(SelectionState state, bool instant)
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xD758DC", Offset = "0xD758DC", VA = "0xD758DC")]
	private bool GetGraphics()
	{
		return default(bool);
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xD759B0", Offset = "0xD759B0", VA = "0xD759B0")]
	public MultiImageButton()
	{
	}
}
[Token(Token = "0x2000170")]
public class MultiImageTargetGraphics : MonoBehaviour
{
	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Graphic[] targetGraphics;

	[Token(Token = "0x1700005A")]
	public Graphic[] GetTargetGraphics
	{
		[Token(Token = "0x6000701")]
		[Address(RVA = "0xD759B8", Offset = "0xD759B8", VA = "0xD759B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xD759C0", Offset = "0xD759C0", VA = "0xD759C0")]
	public MultiImageTargetGraphics()
	{
	}
}
[Token(Token = "0x2000171")]
[DisallowMultipleComponent]
public class Oscillator : MonoBehaviour
{
	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 movementVector;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float period;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float movementFactor;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 startingPos;

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xD759C8", Offset = "0xD759C8", VA = "0xD759C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xD759F8", Offset = "0xD759F8", VA = "0xD759F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xD75AE8", Offset = "0xD75AE8", VA = "0xD75AE8")]
	public Oscillator()
	{
	}
}
[Token(Token = "0x2000172")]
public class PlayspaceDialogCooldownHelper : MonoBehaviour
{
	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float permissionsDialogCooldownPeriod;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool isInDialog;

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xD75AFC", Offset = "0xD75AFC", VA = "0xD75AFC")]
	public static void SetPermissionDialogOpenStatus(bool open)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xD75B60", Offset = "0xD75B60", VA = "0xD75B60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xD75BDC", Offset = "0xD75BDC", VA = "0xD75BDC")]
	public static bool IsInPermissionCallbackCooldown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xD75C3C", Offset = "0xD75C3C", VA = "0xD75C3C")]
	public PlayspaceDialogCooldownHelper()
	{
	}
}
[Token(Token = "0x2000173")]
public class UIRaycastOpening : MonoBehaviour
{
	[Token(Token = "0x600070A")]
	[Address(RVA = "0xD75C44", Offset = "0xD75C44", VA = "0xD75C44")]
	private void Start()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xD75CA0", Offset = "0xD75CA0", VA = "0xD75CA0")]
	public UIRaycastOpening()
	{
	}
}
[Token(Token = "0x2000174")]
public class WhiteFrame : MonoBehaviour
{
	[Token(Token = "0x600070C")]
	[Address(RVA = "0xD75CA8", Offset = "0xD75CA8", VA = "0xD75CA8")]
	public WhiteFrame()
	{
	}
}
[Token(Token = "0x2000175")]
public class ZeroZPosition : MonoBehaviour
{
	[Token(Token = "0x600070D")]
	[Address(RVA = "0xD75CB0", Offset = "0xD75CB0", VA = "0xD75CB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xD75F8C", Offset = "0xD75F8C", VA = "0xD75F8C")]
	private void ZeroItAll(Transform transform)
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xD76280", Offset = "0xD76280", VA = "0xD76280")]
	public ZeroZPosition()
	{
	}
}
[Token(Token = "0x2000176")]
public class OculusControllerVisual : MonoBehaviour
{
	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject originalRift;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject questAndRiftS;

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xD76288", Offset = "0xD76288", VA = "0xD76288")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xD762C0", Offset = "0xD762C0", VA = "0xD762C0")]
	public OculusControllerVisual()
	{
	}
}
[Token(Token = "0x2000177")]
public class PlayPSOnVisible : MonoBehaviour
{
	[Token(Token = "0x6000712")]
	[Address(RVA = "0xD762C8", Offset = "0xD762C8", VA = "0xD762C8")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xD76368", Offset = "0xD76368", VA = "0xD76368")]
	private IEnumerator DisableGameObject(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xD76414", Offset = "0xD76414", VA = "0xD76414")]
	public PlayPSOnVisible()
	{
	}
}
[Serializable]
[Token(Token = "0x2000179")]
public abstract class AbstractPCMobileSwitcher : MonoBehaviour
{
	[Token(Token = "0x600071B")]
	public abstract void SwitchToPC();

	[Token(Token = "0x600071C")]
	public abstract void SwitchToMobile();

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xD7653C", Offset = "0xD7653C", VA = "0xD7653C")]
	protected AbstractPCMobileSwitcher()
	{
	}
}
[Serializable]
[Token(Token = "0x200017A")]
public class QuestPCVRMaterialsAndRenderer
{
	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Renderer renderer;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material materialForQuest;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material materialForPCVR;

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xD76544", Offset = "0xD76544", VA = "0xD76544")]
	public QuestPCVRMaterialsAndRenderer()
	{
	}
}
[Token(Token = "0x200017B")]
public class MobilePCMaterialSwitcher : AbstractPCMobileSwitcher
{
	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuestPCVRMaterialsAndRenderer[] switchingMaterials;

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xD7654C", Offset = "0xD7654C", VA = "0xD7654C", Slot = "4")]
	public override void SwitchToPC()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xD765B8", Offset = "0xD765B8", VA = "0xD765B8", Slot = "5")]
	public override void SwitchToMobile()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xD76624", Offset = "0xD76624", VA = "0xD76624")]
	public MobilePCMaterialSwitcher()
	{
	}
}
[Token(Token = "0x200017C")]
public class MobilePCObjectSwitcher : AbstractPCMobileSwitcher
{
	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> objectsToDisableOnQuest;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObject> objectsToEnableOnQuest;

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xD7662C", Offset = "0xD7662C", VA = "0xD7662C", Slot = "4")]
	public override void SwitchToPC()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xD768BC", Offset = "0xD768BC", VA = "0xD768BC", Slot = "5")]
	public override void SwitchToMobile()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xD76B4C", Offset = "0xD76B4C", VA = "0xD76B4C")]
	public void EnableAllForBaking()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xD76DDC", Offset = "0xD76DDC", VA = "0xD76DDC")]
	public MobilePCObjectSwitcher()
	{
	}
}
[Token(Token = "0x200017D")]
public class SideButtonPulse : MonoBehaviour
{
	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float xScale;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float yScale;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float finalalpha;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float firstLoopHalfDuration;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float secondloopHalfDuration;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float waitDuration;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 initialScale;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 initialPosition;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RawImage logoImage;

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xD76DE4", Offset = "0xD76DE4", VA = "0xD76DE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xD77034", Offset = "0xD77034", VA = "0xD77034")]
	public SideButtonPulse()
	{
	}
}
[Token(Token = "0x200017E")]
public class BezierCPRuntimeEditor : MonoBehaviour
{
	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private BezierPoint point;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool precedingCP;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BezierCPRuntimeEditor otherCP;

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xD77054", Offset = "0xD77054", VA = "0xD77054")]
	private void Start()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xD77144", Offset = "0xD77144", VA = "0xD77144")]
	public void Update()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xD771A8", Offset = "0xD771A8", VA = "0xD771A8")]
	public void OnDrag()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xD771F8", Offset = "0xD771F8", VA = "0xD771F8")]
	public BezierCPRuntimeEditor()
	{
	}
}
[Token(Token = "0x200017F")]
public class LiveRecorderHand : MonoBehaviour
{
	[Token(Token = "0x2000180")]
	public delegate void OnFirstPlaneHit(Vector3 contactPoint);

	[Token(Token = "0x1400001D")]
	public event OnFirstPlaneHit onFirstPlaneHit
	{
		[Token(Token = "0x600072C")]
		[Address(RVA = "0xD77200", Offset = "0xD77200", VA = "0xD77200")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600072D")]
		[Address(RVA = "0xD7729C", Offset = "0xD7729C", VA = "0xD7729C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xD77338", Offset = "0xD77338", VA = "0xD77338")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xD773E8", Offset = "0xD773E8", VA = "0xD773E8")]
	public LiveRecorderHand()
	{
	}
}
[Token(Token = "0x2000181")]
public class TextLogoAura : MonoBehaviour
{
	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float yShift;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float xScale;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float yScale;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float loopDuration;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float waitDuration;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 initialScale;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 initialPosition;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RawImage logoImage;

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xD774D8", Offset = "0xD774D8", VA = "0xD774D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xD77784", Offset = "0xD77784", VA = "0xD77784")]
	public TextLogoAura()
	{
	}
}
[Token(Token = "0x2000182")]
public class RagdollForVideos : MonoBehaviour
{
	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRIK vrIKScript;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fireworks;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider headsetCollider;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] hands;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody[] ragdollRigidbodies;

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xD777A0", Offset = "0xD777A0", VA = "0xD777A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xD7784C", Offset = "0xD7784C", VA = "0xD7784C")]
	public void ActivateRagdoll()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xD77934", Offset = "0xD77934", VA = "0xD77934")]
	public RagdollForVideos()
	{
	}
}
[Token(Token = "0x2000183")]
public class ScreenshotMaker : MonoBehaviour
{
	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int resWidth;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int resHeight;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera currentCamera;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool takeHiResShot;

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xD7793C", Offset = "0xD7793C", VA = "0xD7793C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xD77968", Offset = "0xD77968", VA = "0xD77968")]
	public void TakeHiResShot(Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xD77A04", Offset = "0xD77A04", VA = "0xD77A04")]
	public static string ScreenShotName(int width, int height)
	{
		return null;
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xD77C48", Offset = "0xD77C48", VA = "0xD77C48")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xD77E30", Offset = "0xD77E30", VA = "0xD77E30")]
	public ScreenshotMaker()
	{
	}
}
[Token(Token = "0x2000184")]
public static class Extensions
{
	[Token(Token = "0x600073C")]
	public static T Next<T>(this T src) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x600073D")]
	public static T Previous<T>(this T src) where T : struct
	{
		return (T)null;
	}
}
[Token(Token = "0x2000185")]
public class FlyingCameraControl : MonoBehaviour
{
	[Token(Token = "0x2000186")]
	private enum View
	{
		[Token(Token = "0x40009FE")]
		BACK,
		[Token(Token = "0x40009FF")]
		FRONT,
		[Token(Token = "0x4000A00")]
		SIDE
	}

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] elementsToFollow;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int speedMultiplier;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int startAtZ;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int endAtZ;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Key keyForStartAndStop;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Key keyForSwitchingView;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private Key keyForSwitchingObjects;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Key keyForLeft;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private Key keyForRight;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Key keyForBack;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Key keyForForward;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Key keyForFaster;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private Key keyForSlower;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject leftHand;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject rightHand;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentlyFollowingObjectIndex;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject currentlyFollowingObject;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private View currentView;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool flyingAfterTheItem;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float currentPositionOfCameraX;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float currentPositionOfCameraY;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float currentCameraZOffset;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float currentPositionOfObjectZ;

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xD77E44", Offset = "0xD77E44", VA = "0xD77E44")]
	private void Start()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xD77E94", Offset = "0xD77E94", VA = "0xD77E94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xD7876C", Offset = "0xD7876C", VA = "0xD7876C")]
	private void SetViewToFront()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xD787C0", Offset = "0xD787C0", VA = "0xD787C0")]
	public FlyingCameraControl()
	{
	}
}
[Token(Token = "0x2000187")]
public class FollowingCamera : MonoBehaviour
{
	[Token(Token = "0x6000742")]
	[Address(RVA = "0xD787E8", Offset = "0xD787E8", VA = "0xD787E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xD788B0", Offset = "0xD788B0", VA = "0xD788B0")]
	public FollowingCamera()
	{
	}
}
[Token(Token = "0x2000188")]
public class LoadingScreen : MonoBehaviour
{
	[Token(Token = "0x6000744")]
	[Address(RVA = "0xD788B8", Offset = "0xD788B8", VA = "0xD788B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xD78914", Offset = "0xD78914", VA = "0xD78914")]
	internal void ExchangeScreen(bool towardsGame)
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xD78B24", Offset = "0xD78B24", VA = "0xD78B24")]
	public LoadingScreen()
	{
	}
}
[Token(Token = "0x2000189")]
public class SpecialAreaInfoDisplay : MonoBehaviour
{
	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text specialText;

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xD78B2C", Offset = "0xD78B2C", VA = "0xD78B2C")]
	public void SetText(string text)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xD78B50", Offset = "0xD78B50", VA = "0xD78B50")]
	public SpecialAreaInfoDisplay()
	{
	}
}
[Token(Token = "0x200018A")]
public class AlternateEventSystem : EventSystem
{
	[Token(Token = "0x6000749")]
	[Address(RVA = "0xD78B58", Offset = "0xD78B58", VA = "0xD78B58", Slot = "17")]
	protected override void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xD78B64", Offset = "0xD78B64", VA = "0xD78B64", Slot = "18")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xD78B88", Offset = "0xD78B88", VA = "0xD78B88")]
	public AlternateEventSystem()
	{
	}
}
[Token(Token = "0x200018B")]
public class AlternateTrackedDeviceRaycaster : BaseRaycaster
{
	[Token(Token = "0x200018C")]
	private struct RaycastHitData
	{
		[Token(Token = "0x17000064")]
		public Graphic graphic
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xD79D0C", Offset = "0xD79D0C", VA = "0xD79D0C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		public Vector3 worldHitPosition
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xD79D14", Offset = "0xD79D14", VA = "0xD79D14")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000066")]
		public Vector2 screenPosition
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0xD79D20", Offset = "0xD79D20", VA = "0xD79D20")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000067")]
		public float distance
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xD79D28", Offset = "0xD79D28", VA = "0xD79D28")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xD79B88", Offset = "0xD79B88", VA = "0xD79B88")]
		public RaycastHitData(Graphic graphic, Vector3 worldHitPosition, Vector2 screenPosition, float distance)
		{
		}
	}

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("ignoreReversedGraphics")]
	private bool m_IgnoreReversedGraphics;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	[FormerlySerializedAs("checkFor2DOcclusion")]
	private bool m_CheckFor2DOcclusion;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	[FormerlySerializedAs("checkFor3DOcclusion")]
	private bool m_CheckFor3DOcclusion;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_MaxDistance;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LayerMask m_BlockingMask;

	[NonSerialized]
	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas m_Canvas;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 lastHitPosition;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IPointerOriginProvider pointerOriginProvider;

	[NonSerialized]
	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<RaycastHitData> m_RaycastResultsCache;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<RaycastHitData> s_SortedGraphics;

	[Token(Token = "0x1700005D")]
	private Canvas canvas
	{
		[Token(Token = "0x600074C")]
		[Address(RVA = "0xD78BE0", Offset = "0xD78BE0", VA = "0xD78BE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005E")]
	public override Camera eventCamera
	{
		[Token(Token = "0x600074D")]
		[Address(RVA = "0xD78C88", Offset = "0xD78C88", VA = "0xD78C88", Slot = "18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005F")]
	public LayerMask blockingMask
	{
		[Token(Token = "0x600074E")]
		[Address(RVA = "0xD78D1C", Offset = "0xD78D1C", VA = "0xD78D1C")]
		get
		{
			return default(LayerMask);
		}
		[Token(Token = "0x600074F")]
		[Address(RVA = "0xD78D24", Offset = "0xD78D24", VA = "0xD78D24")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public bool checkFor3DOcclusion
	{
		[Token(Token = "0x6000750")]
		[Address(RVA = "0xD78D2C", Offset = "0xD78D2C", VA = "0xD78D2C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000751")]
		[Address(RVA = "0xD78D34", Offset = "0xD78D34", VA = "0xD78D34")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public bool checkFor2DOcclusion
	{
		[Token(Token = "0x6000752")]
		[Address(RVA = "0xD78D40", Offset = "0xD78D40", VA = "0xD78D40")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000753")]
		[Address(RVA = "0xD78D48", Offset = "0xD78D48", VA = "0xD78D48")]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public bool ignoreReversedGraphics
	{
		[Token(Token = "0x6000754")]
		[Address(RVA = "0xD78D54", Offset = "0xD78D54", VA = "0xD78D54")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000755")]
		[Address(RVA = "0xD78D5C", Offset = "0xD78D5C", VA = "0xD78D5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public float maxDistance
	{
		[Token(Token = "0x6000756")]
		[Address(RVA = "0xD78D68", Offset = "0xD78D68", VA = "0xD78D68")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000757")]
		[Address(RVA = "0xD78D70", Offset = "0xD78D70", VA = "0xD78D70")]
		set
		{
		}
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xD78D78", Offset = "0xD78D78", VA = "0xD78D78", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xD78D80", Offset = "0xD78D80", VA = "0xD78D80", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xD78D88", Offset = "0xD78D88", VA = "0xD78D88", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xD78E38", Offset = "0xD78E38", VA = "0xD78E38")]
	internal void PerformRaycast(ExtendedPointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xD7941C", Offset = "0xD7941C", VA = "0xD7941C")]
	private void SortedRaycastGraphics(Canvas canvas, Ray ray, List<RaycastHitData> results)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xD79930", Offset = "0xD79930", VA = "0xD79930")]
	private static bool RayIntersectsRectTransform(RectTransform transform, Ray ray, out Vector3 worldPosition, out float distance)
	{
		return default(bool);
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xD79BDC", Offset = "0xD79BDC", VA = "0xD79BDC")]
	internal void SetPointerOriginProvider(IPointerOriginProvider laserPointer)
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xD79BE4", Offset = "0xD79BE4", VA = "0xD79BE4")]
	public AlternateTrackedDeviceRaycaster()
	{
	}
}
[Token(Token = "0x200018E")]
[ExecuteInEditMode]
public class SpiderChart : MonoBehaviour
{
	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material chartMaterial;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GeneratorUserSettings20 setting;

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xD79DFC", Offset = "0xD79DFC", VA = "0xD79DFC")]
	public void UpdateUI(GeneratorUserSettings20 setting)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xD7A488", Offset = "0xD7A488", VA = "0xD7A488")]
	public SpiderChart()
	{
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x200018F")]
	public enum JSONTextMode
	{
		[Token(Token = "0x4000A15")]
		Compact,
		[Token(Token = "0x4000A16")]
		Indent
	}
	[Token(Token = "0x2000190")]
	public abstract class JSONNode
	{
		[Token(Token = "0x2000191")]
		public struct Enumerator
		{
			[Token(Token = "0x2000192")]
			private enum Type
			{
				[Token(Token = "0x4000A1F")]
				None,
				[Token(Token = "0x4000A20")]
				Array,
				[Token(Token = "0x4000A21")]
				Object
			}

			[Token(Token = "0x4000A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Type type;

			[Token(Token = "0x4000A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Dictionary<string, JSONNode>.Enumerator m_Object;

			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator m_Array;

			[Token(Token = "0x17000076")]
			public KeyValuePair<string, JSONNode> Current
			{
				[Token(Token = "0x60007A3")]
				[Address(RVA = "0xD7C914", Offset = "0xD7C914", VA = "0xD7C914")]
				get
				{
					return default(KeyValuePair<string, JSONNode>);
				}
			}

			[Token(Token = "0x60007A1")]
			[Address(RVA = "0xD7C8A0", Offset = "0xD7C8A0", VA = "0xD7C8A0")]
			public Enumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xD7C8D8", Offset = "0xD7C8D8", VA = "0xD7C8D8")]
			public Enumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xD7C9E0", Offset = "0xD7C9E0", VA = "0xD7C9E0")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000193")]
		public struct KeyEnumerator
		{
			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x17000077")]
			public JSONNode Current
			{
				[Token(Token = "0x60007A6")]
				[Address(RVA = "0xD7CA94", Offset = "0xD7CA94", VA = "0xD7CA94")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007A5")]
			[Address(RVA = "0xD7CA74", Offset = "0xD7CA74", VA = "0xD7CA74")]
			public KeyEnumerator(Enumerator aEnumerator)
			{
			}

			[Token(Token = "0x60007A7")]
			[Address(RVA = "0xD7CAD4", Offset = "0xD7CAD4", VA = "0xD7CAD4")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xD7CAD8", Offset = "0xD7CAD8", VA = "0xD7CAD8")]
			public KeyEnumerator GetEnumerator()
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool forceASCII;

		[Token(Token = "0x4000A18")]
		[ThreadStatic]
		private static StringBuilder m_EscapeBuilder;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static JSONContainerType VectorContainerType;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static JSONContainerType QuaternionContainerType;

		[Token(Token = "0x17000068")]
		public virtual JSONNode this[int aIndex]
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0xD7A490", Offset = "0xD7A490", VA = "0xD7A490", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		public virtual JSONNode this[string aKey]
		{
			[Token(Token = "0x600076C")]
			[Address(RVA = "0xD7A498", Offset = "0xD7A498", VA = "0xD7A498", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600076D")]
			[Address(RVA = "0xD7A4A0", Offset = "0xD7A4A0", VA = "0xD7A4A0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public virtual string Value
		{
			[Token(Token = "0x600076E")]
			[Address(RVA = "0xD7A4A4", Offset = "0xD7A4A4", VA = "0xD7A4A4", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600076F")]
			[Address(RVA = "0xD7A4E4", Offset = "0xD7A4E4", VA = "0xD7A4E4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public virtual int Count
		{
			[Token(Token = "0x6000770")]
			[Address(RVA = "0xD7A4E8", Offset = "0xD7A4E8", VA = "0xD7A4E8", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006C")]
		public virtual bool IsArray
		{
			[Token(Token = "0x6000771")]
			[Address(RVA = "0xD7A4F0", Offset = "0xD7A4F0", VA = "0xD7A4F0", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006D")]
		public virtual bool IsObject
		{
			[Token(Token = "0x6000772")]
			[Address(RVA = "0xD7A4F8", Offset = "0xD7A4F8", VA = "0xD7A4F8", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006E")]
		public virtual bool Inline
		{
			[Token(Token = "0x6000773")]
			[Address(RVA = "0xD7A500", Offset = "0xD7A500", VA = "0xD7A500", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public KeyEnumerator Keys
		{
			[Token(Token = "0x600077A")]
			[Address(RVA = "0xD7A690", Offset = "0xD7A690", VA = "0xD7A690")]
			get
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x17000070")]
		public virtual double AsDouble
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0xD7A6D8", Offset = "0xD7A6D8", VA = "0xD7A6D8", Slot = "18")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xD7A77C", Offset = "0xD7A77C", VA = "0xD7A77C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public virtual int AsInt
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xD7A804", Offset = "0xD7A804", VA = "0xD7A804", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000072")]
		public virtual float AsFloat
		{
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xD7A838", Offset = "0xD7A838", VA = "0xD7A838", Slot = "21")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600077F")]
			[Address(RVA = "0xD7A858", Offset = "0xD7A858", VA = "0xD7A858", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xD7A86C", Offset = "0xD7A86C", VA = "0xD7A86C", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000074")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xD7A924", Offset = "0xD7A924", VA = "0xD7A924", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		internal static StringBuilder EscapeBuilder
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xD7AEA4", Offset = "0xD7AEA4", VA = "0xD7AEA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xD7A504", Offset = "0xD7A504", VA = "0xD7A504", Slot = "13")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xD7A508", Offset = "0xD7A508", VA = "0xD7A508", Slot = "14")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xD7A56C", Offset = "0xD7A56C", VA = "0xD7A56C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xD7A5F8", Offset = "0xD7A5F8", VA = "0xD7A5F8", Slot = "15")]
		public virtual string ToString(int aIndent)
		{
			return null;
		}

		[Token(Token = "0x6000778")]
		internal abstract void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);

		[Token(Token = "0x6000779")]
		public abstract Enumerator GetEnumerator();

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xD7A99C", Offset = "0xD7A99C", VA = "0xD7A99C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xD7AA3C", Offset = "0xD7AA3C", VA = "0xD7AA3C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xD7ABF8", Offset = "0xD7ABF8", VA = "0xD7ABF8")]
		public static implicit operator JSONNode(double n)
		{
			return null;
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xD7AC8C", Offset = "0xD7AC8C", VA = "0xD7AC8C")]
		public static implicit operator JSONNode(float n)
		{
			return null;
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xD7ACFC", Offset = "0xD7ACFC", VA = "0xD7ACFC")]
		public static implicit operator float(JSONNode d)
		{
			return default(float);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xD7AD3C", Offset = "0xD7AD3C", VA = "0xD7AD3C")]
		public static implicit operator JSONNode(int n)
		{
			return null;
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xD7ADAC", Offset = "0xD7ADAC", VA = "0xD7ADAC")]
		public static implicit operator JSONNode(bool b)
		{
			return null;
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xD7AE3C", Offset = "0xD7AE3C", VA = "0xD7AE3C")]
		public static implicit operator JSONNode(KeyValuePair<string, JSONNode> aKeyValue)
		{
			return null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xD7AA78", Offset = "0xD7AA78", VA = "0xD7AA78")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xD7AE78", Offset = "0xD7AE78", VA = "0xD7AE78")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xD7AE90", Offset = "0xD7AE90", VA = "0xD7AE90", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xD7AE9C", Offset = "0xD7AE9C", VA = "0xD7AE9C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xD7AF48", Offset = "0xD7AF48", VA = "0xD7AF48")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xD7B20C", Offset = "0xD7B20C", VA = "0xD7B20C")]
		private static JSONNode ParseElement(string token, bool quoted)
		{
			return null;
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xD7B410", Offset = "0xD7B410", VA = "0xD7B410")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xD7BB1C", Offset = "0xD7BB1C", VA = "0xD7BB1C")]
		private static JSONNode GetContainer(JSONContainerType aType)
		{
			return null;
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xD7BBA8", Offset = "0xD7BBA8", VA = "0xD7BBA8")]
		public static implicit operator JSONNode(Vector2 aVec)
		{
			return null;
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xD7BD64", Offset = "0xD7BD64", VA = "0xD7BD64")]
		public static implicit operator JSONNode(Vector3 aVec)
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xD7BFB8", Offset = "0xD7BFB8", VA = "0xD7BFB8")]
		public static implicit operator JSONNode(Quaternion aRot)
		{
			return null;
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xD7C27C", Offset = "0xD7C27C", VA = "0xD7C27C")]
		public static implicit operator Vector3(JSONNode aNode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xD7C2E0", Offset = "0xD7C2E0", VA = "0xD7C2E0")]
		public Vector2 ReadVector2(Vector2 aDefault)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xD7C418", Offset = "0xD7C418", VA = "0xD7C418")]
		public Vector2 ReadVector2()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xD7BC44", Offset = "0xD7BC44", VA = "0xD7BC44")]
		public JSONNode WriteVector2(Vector2 aVec, string aXName = "x", string aYName = "y")
		{
			return null;
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xD7C468", Offset = "0xD7C468", VA = "0xD7C468")]
		public Vector3 ReadVector3(Vector3 aDefault)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xD7C28C", Offset = "0xD7C28C", VA = "0xD7C28C")]
		public Vector3 ReadVector3()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xD7BE28", Offset = "0xD7BE28", VA = "0xD7BE28")]
		public JSONNode WriteVector3(Vector3 aVec, string aXName = "x", string aYName = "y", string aZName = "z")
		{
			return null;
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xD7C61C", Offset = "0xD7C61C", VA = "0xD7C61C")]
		public Quaternion ReadQuaternion(Quaternion aDefault)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xD7C844", Offset = "0xD7C844", VA = "0xD7C844")]
		public Quaternion ReadQuaternion()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xD7C03C", Offset = "0xD7C03C", VA = "0xD7C03C")]
		public JSONNode WriteQuaternion(Quaternion aRot)
		{
			return null;
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xD7C898", Offset = "0xD7C898", VA = "0xD7C898")]
		protected JSONNode()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class JSONArray : JSONNode
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inline;

		[Token(Token = "0x17000078")]
		public override bool Inline
		{
			[Token(Token = "0x60007A9")]
			[Address(RVA = "0xD7CAE8", Offset = "0xD7CAE8", VA = "0xD7CAE8", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public override bool IsArray
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0xD7CAF4", Offset = "0xD7CAF4", VA = "0xD7CAF4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007A")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0xD7CB94", Offset = "0xD7CB94", VA = "0xD7CB94", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x60007AD")]
			[Address(RVA = "0xD7CC84", Offset = "0xD7CC84", VA = "0xD7CC84", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0xD7CCE4", Offset = "0xD7CCE4", VA = "0xD7CCE4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public override int Count
		{
			[Token(Token = "0x60007AF")]
			[Address(RVA = "0xD7CDD0", Offset = "0xD7CDD0", VA = "0xD7CDD0", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xD7CAFC", Offset = "0xD7CAFC", VA = "0xD7CAFC", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xD7CE18", Offset = "0xD7CE18", VA = "0xD7CE18", Slot = "13")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xD7CF04", Offset = "0xD7CF04", VA = "0xD7CF04", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xD7BA94", Offset = "0xD7BA94", VA = "0xD7BA94")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class JSONObject : JSONNode
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inline;

		[Token(Token = "0x1700007D")]
		public override bool Inline
		{
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0xD7D06C", Offset = "0xD7D06C", VA = "0xD7D06C", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public override bool IsObject
		{
			[Token(Token = "0x60007B4")]
			[Address(RVA = "0xD7D078", Offset = "0xD7D078", VA = "0xD7D078", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007F")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x60007B6")]
			[Address(RVA = "0xD7D128", Offset = "0xD7D128", VA = "0xD7D128", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0xD7D230", Offset = "0xD7D230", VA = "0xD7D230", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000080")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0xD7D338", Offset = "0xD7D338", VA = "0xD7D338", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		public override int Count
		{
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xD7D3D8", Offset = "0xD7D3D8", VA = "0xD7D3D8", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xD7D080", Offset = "0xD7D080", VA = "0xD7D080", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xD7D428", Offset = "0xD7D428", VA = "0xD7D428", Slot = "13")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xD7D578", Offset = "0xD7D578", VA = "0xD7D578", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xD7BA0C", Offset = "0xD7BA0C", VA = "0xD7BA0C")]
		public JSONObject()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class JSONString : JSONNode
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x17000082")]
		public override string Value
		{
			[Token(Token = "0x60007BE")]
			[Address(RVA = "0xD7D894", Offset = "0xD7D894", VA = "0xD7D894", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007BF")]
			[Address(RVA = "0xD7D89C", Offset = "0xD7D89C", VA = "0xD7D89C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xD7D880", Offset = "0xD7D880", VA = "0xD7D880", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xD7AA0C", Offset = "0xD7AA0C", VA = "0xD7AA0C")]
		public JSONString(string aData)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xD7D8A4", Offset = "0xD7D8A4", VA = "0xD7D8A4", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xD7D900", Offset = "0xD7D900", VA = "0xD7D900", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xD7D9EC", Offset = "0xD7D9EC", VA = "0xD7D9EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000197")]
	public class JSONNumber : JSONNode
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double m_Data;

		[Token(Token = "0x17000083")]
		public override string Value
		{
			[Token(Token = "0x60007C5")]
			[Address(RVA = "0xD7DA20", Offset = "0xD7DA20", VA = "0xD7DA20", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007C6")]
			[Address(RVA = "0xD7DA88", Offset = "0xD7DA88", VA = "0xD7DA88", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public override double AsDouble
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0xD7DB14", Offset = "0xD7DB14", VA = "0xD7DB14", Slot = "18")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60007C8")]
			[Address(RVA = "0xD7DB1C", Offset = "0xD7DB1C", VA = "0xD7DB1C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xD7DA0C", Offset = "0xD7DA0C", VA = "0xD7DA0C", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xD7AC64", Offset = "0xD7AC64", VA = "0xD7AC64")]
		public JSONNumber(double aData)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xD7DB24", Offset = "0xD7DB24", VA = "0xD7DB24", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xD7DB58", Offset = "0xD7DB58", VA = "0xD7DB58")]
		private static bool IsNumeric(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xD7DCF8", Offset = "0xD7DCF8", VA = "0xD7DCF8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xD7DDF8", Offset = "0xD7DDF8", VA = "0xD7DDF8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000198")]
	public class JSONBool : JSONNode
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_Data;

		[Token(Token = "0x17000085")]
		public override string Value
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xD7DE7C", Offset = "0xD7DE7C", VA = "0xD7DE7C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0xD7DE88", Offset = "0xD7DE88", VA = "0xD7DE88", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000086")]
		public override bool AsBool
		{
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0xD7DF04", Offset = "0xD7DF04", VA = "0xD7DF04", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xD7DE68", Offset = "0xD7DE68", VA = "0xD7DE68", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xD7AE14", Offset = "0xD7AE14", VA = "0xD7AE14")]
		public JSONBool(bool aData)
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xD7DF0C", Offset = "0xD7DF0C", VA = "0xD7DF0C", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xD7DF84", Offset = "0xD7DF84", VA = "0xD7DF84", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xD7DFFC", Offset = "0xD7DFFC", VA = "0xD7DFFC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000199")]
	public class JSONNull : JSONNode
	{
		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JSONNull m_StaticInstance;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool reuseSameInstance;

		[Token(Token = "0x17000087")]
		public override string Value
		{
			[Token(Token = "0x60007D9")]
			[Address(RVA = "0xD7E024", Offset = "0xD7E024", VA = "0xD7E024", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007DA")]
			[Address(RVA = "0xD7E064", Offset = "0xD7E064", VA = "0xD7E064", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public override bool AsBool
		{
			[Token(Token = "0x60007DB")]
			[Address(RVA = "0xD7E068", Offset = "0xD7E068", VA = "0xD7E068", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xD7B37C", Offset = "0xD7B37C", VA = "0xD7B37C")]
		public static JSONNull CreateOrGet()
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xD7E008", Offset = "0xD7E008", VA = "0xD7E008")]
		private JSONNull()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xD7E010", Offset = "0xD7E010", VA = "0xD7E010", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xD7E070", Offset = "0xD7E070", VA = "0xD7E070", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xD7E0FC", Offset = "0xD7E0FC", VA = "0xD7E0FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xD7E104", Offset = "0xD7E104", VA = "0xD7E104", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x200019A")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x17000089")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x60007E4")]
			[Address(RVA = "0xD7E1F0", Offset = "0xD7E1F0", VA = "0xD7E1F0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0xD7E250", Offset = "0xD7E250", VA = "0xD7E250", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E6")]
			[Address(RVA = "0xD7E2C0", Offset = "0xD7E2C0", VA = "0xD7E2C0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public override int AsInt
		{
			[Token(Token = "0x60007EB")]
			[Address(RVA = "0xD7E4C4", Offset = "0xD7E4C4", VA = "0xD7E4C4", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008C")]
		public override float AsFloat
		{
			[Token(Token = "0x60007EC")]
			[Address(RVA = "0xD7E54C", Offset = "0xD7E54C", VA = "0xD7E54C", Slot = "21")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007ED")]
			[Address(RVA = "0xD7E5D4", Offset = "0xD7E5D4", VA = "0xD7E5D4", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public override double AsDouble
		{
			[Token(Token = "0x60007EE")]
			[Address(RVA = "0xD7E664", Offset = "0xD7E664", VA = "0xD7E664", Slot = "18")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60007EF")]
			[Address(RVA = "0xD7E6EC", Offset = "0xD7E6EC", VA = "0xD7E6EC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public override bool AsBool
		{
			[Token(Token = "0x60007F0")]
			[Address(RVA = "0xD7E778", Offset = "0xD7E778", VA = "0xD7E778", Slot = "23")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008F")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xD7E800", Offset = "0xD7E800", VA = "0xD7E800", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xD7E1DC", Offset = "0xD7E1DC", VA = "0xD7E1DC", Slot = "17")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xD7CC44", Offset = "0xD7CC44", VA = "0xD7CC44")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xD7D1EC", Offset = "0xD7D1EC", VA = "0xD7D1EC")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x60007E3")]
		private T Set<T>(T aVal) where T : JSONNode
		{
			return null;
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xD7E364", Offset = "0xD7E364", VA = "0xD7E364", Slot = "14")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xD7E400", Offset = "0xD7E400", VA = "0xD7E400", Slot = "13")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xD7E4A4", Offset = "0xD7E4A4", VA = "0xD7E4A4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xD7E4BC", Offset = "0xD7E4BC", VA = "0xD7E4BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xD7E878", Offset = "0xD7E878", VA = "0xD7E878", Slot = "16")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x200019B")]
	public static class JSON
	{
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xD7E8CC", Offset = "0xD7E8CC", VA = "0xD7E8CC")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
	[Token(Token = "0x200019C")]
	public enum JSONContainerType
	{
		[Token(Token = "0x4000A2F")]
		Array,
		[Token(Token = "0x4000A30")]
		Object
	}
}
namespace MK.Glow
{
	[Token(Token = "0x200019D")]
	internal abstract class CameraData
	{
		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int width;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int height;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool stereoEnabled;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float aspect;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Matrix4x4 worldToCameraMatrix;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal bool overwriteDescriptor;

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xD7E8D0", Offset = "0xD7E8D0", VA = "0xD7E8D0")]
		protected CameraData()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public enum Workflow
	{
		[Token(Token = "0x4000A38")]
		Threshold,
		[Token(Token = "0x4000A39")]
		Selective,
		[Token(Token = "0x4000A3A")]
		Natural
	}
	[Token(Token = "0x200019F")]
	public enum AntiFlickerMode
	{
		[Token(Token = "0x4000A3C")]
		Balanced,
		[Token(Token = "0x4000A3D")]
		Strong
	}
	[Token(Token = "0x20001A0")]
	public enum Quality
	{
		[Token(Token = "0x4000A3F")]
		Ultra = 1,
		[Token(Token = "0x4000A40")]
		High = 2,
		[Token(Token = "0x4000A41")]
		Medium = 4,
		[Token(Token = "0x4000A42")]
		Low = 8,
		[Token(Token = "0x4000A43")]
		VeryLow = 12
	}
	[Token(Token = "0x20001A1")]
	public enum DebugView
	{
		[Token(Token = "0x4000A45")]
		None,
		[Token(Token = "0x4000A46")]
		RawBloom,
		[Token(Token = "0x4000A47")]
		RawLensFlare,
		[Token(Token = "0x4000A48")]
		RawGlare,
		[Token(Token = "0x4000A49")]
		Bloom,
		[Token(Token = "0x4000A4A")]
		LensFlare,
		[Token(Token = "0x4000A4B")]
		Glare,
		[Token(Token = "0x4000A4C")]
		Composite
	}
	[Token(Token = "0x20001A2")]
	public enum RenderPriority
	{
		[Token(Token = "0x4000A4E")]
		Quality,
		[Token(Token = "0x4000A4F")]
		Balanced,
		[Token(Token = "0x4000A50")]
		Performance
	}
	[Token(Token = "0x20001A3")]
	public enum LensFlareStyle
	{
		[Token(Token = "0x4000A52")]
		Custom,
		[Token(Token = "0x4000A53")]
		Average,
		[Token(Token = "0x4000A54")]
		MultiAverage,
		[Token(Token = "0x4000A55")]
		Old,
		[Token(Token = "0x4000A56")]
		OldFocused,
		[Token(Token = "0x4000A57")]
		Distorted
	}
	[Token(Token = "0x20001A4")]
	public enum GlareStyle
	{
		[Token(Token = "0x4000A59")]
		Custom,
		[Token(Token = "0x4000A5A")]
		Line,
		[Token(Token = "0x4000A5B")]
		Tri,
		[Token(Token = "0x4000A5C")]
		Cross,
		[Token(Token = "0x4000A5D")]
		DistortedCross,
		[Token(Token = "0x4000A5E")]
		Star,
		[Token(Token = "0x4000A5F")]
		Flake
	}
	[Token(Token = "0x20001A5")]
	internal struct RenderDimension
	{
		[Token(Token = "0x17000090")]
		public int width
		{
			[Token(Token = "0x60007F6")]
			[Address(RVA = "0xD7E948", Offset = "0xD7E948", VA = "0xD7E948", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0xD7E950", Offset = "0xD7E950", VA = "0xD7E950")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public int height
		{
			[Token(Token = "0x60007F8")]
			[Address(RVA = "0xD7E958", Offset = "0xD7E958", VA = "0xD7E958", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007F9")]
			[Address(RVA = "0xD7E960", Offset = "0xD7E960", VA = "0xD7E960")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xD7E940", Offset = "0xD7E940", VA = "0xD7E940")]
		public RenderDimension(int width, int height)
		{
		}
	}
	[Token(Token = "0x20001A6")]
	internal enum RenderPipeline
	{
		[Token(Token = "0x4000A63")]
		Legacy,
		[Token(Token = "0x4000A64")]
		SRP
	}
	[Token(Token = "0x20001A7")]
	public static class Compatibility
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly bool _defaultHDRFormatSupported;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static readonly bool _11R11G10BFormatSupported;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private static readonly bool _2A10R10G10BFormatSupported;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public static readonly bool IsSupported;

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xD7E968", Offset = "0xD7E968", VA = "0xD7E968")]
		public static bool CheckLensFlareFeatureSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xD7EA60", Offset = "0xD7EA60", VA = "0xD7EA60")]
		public static bool CheckGlareFeatureSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xD7EB10", Offset = "0xD7EB10", VA = "0xD7EB10")]
		internal static RenderTextureFormat CheckSupportedRenderTextureFormat()
		{
			return default(RenderTextureFormat);
		}
	}
	[Token(Token = "0x20001A8")]
	internal sealed class ComputeShaderVariants
	{
		[Token(Token = "0x20001A9")]
		internal struct KeywordState
		{
			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int bloom;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int lensSurface;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int lensFlare;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int glare;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int natural;

			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int renderPriority;

			[Token(Token = "0x6000800")]
			[Address(RVA = "0xD7EE68", Offset = "0xD7EE68", VA = "0xD7EE68")]
			public KeywordState(int bloom, int lensSurface, int lensFlare, int glare, int natural, int renderPriority)
			{
			}
		}

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<KeywordState, int> variants;

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xD7EC68", Offset = "0xD7EC68", VA = "0xD7EC68")]
		internal void GetVariantNumber(KeywordState features, out int index)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xD7ECFC", Offset = "0xD7ECFC", VA = "0xD7ECFC")]
		public ComputeShaderVariants(int offset)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	internal sealed class Effect
	{
		[Token(Token = "0x20001AB")]
		internal enum MaterialKeywords
		{
			[Token(Token = "0x4000AB1")]
			Bloom,
			[Token(Token = "0x4000AB2")]
			LensSurface,
			[Token(Token = "0x4000AB3")]
			LensFlare,
			[Token(Token = "0x4000AB4")]
			Glare1,
			[Token(Token = "0x4000AB5")]
			DebugRawBloom,
			[Token(Token = "0x4000AB6")]
			DebugRawLensFlare,
			[Token(Token = "0x4000AB7")]
			DebugRawGlare,
			[Token(Token = "0x4000AB8")]
			DebugBloom,
			[Token(Token = "0x4000AB9")]
			DebugLensFlare,
			[Token(Token = "0x4000ABA")]
			DebugGlare,
			[Token(Token = "0x4000ABB")]
			DebugComposite,
			[Token(Token = "0x4000ABC")]
			LegacyBlit,
			[Token(Token = "0x4000ABD")]
			RenderPriorityQuality,
			[Token(Token = "0x4000ABE")]
			Natural,
			[Token(Token = "0x4000ABF")]
			Glare2,
			[Token(Token = "0x4000AC0")]
			Glare3,
			[Token(Token = "0x4000AC1")]
			Glare4,
			[Token(Token = "0x4000AC2")]
			Null,
			[Token(Token = "0x4000AC3")]
			RenderPriorityBalanced,
			[Token(Token = "0x4000AC4")]
			HQAntiFlickerFilter
		}

		[Token(Token = "0x20001AC")]
		internal struct Keyword
		{
			[Token(Token = "0x4000AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal string name;

			[Token(Token = "0x4000AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal bool enabled;

			[Token(Token = "0x600082D")]
			[Address(RVA = "0xD7F614", Offset = "0xD7F614", VA = "0xD7F614")]
			internal Keyword(string name, bool enabled)
			{
			}
		}

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Resources _resources;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Vector2 _referenceResolution;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly float _referenceAspectRatio;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly Vector2 _selectiveWorkflowThreshold;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int _cArgBufferSize;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int _glareIterationsBase;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly RenderDimension _directComputeSize;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly float naturalIntensityMult;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly string _selectiveReplacementTag;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly string _selectiveGlowCameraObjectName;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject _selectiveGlowCameraObject;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _selectiveGlowCamera;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComputeShaderVariants _presampleComputeVariants;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComputeShaderVariants _downsampleComputeVariants;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ComputeShaderVariants _upsampleComputeVariants;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CommandBuffer _commandBuffer;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _finalBlit;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTarget _selectiveRenderTarget;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MipBuffer _bloomDownsampleBuffer;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MipBuffer _bloomUpsampleBuffer;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MipBuffer _lensFlareDownsampleBuffer;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MipBuffer _lensFlareUpsampleBuffer;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MipBuffer _glareDownsampleBuffer0;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MipBuffer _glareDownsampleBuffer1;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private MipBuffer _glareDownsampleBuffer2;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MipBuffer _glareDownsampleBuffer3;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MipBuffer _glareUpsampleBuffer0;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private MipBuffer _glareUpsampleBuffer1;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MipBuffer _glareUpsampleBuffer2;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MipBuffer _glareUpsampleBuffer3;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTarget _sourceFrameBuffer;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RenderTarget _destinationFrameBuffer;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Keyword[] _shaderKeywords;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _useGeometryShaders;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		private bool _useComputeShaders;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
		private bool _useLensSurface;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
		private bool _useLensFlare;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private bool _useGlare;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<RenderTarget> _renderTargetsBundle;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<MaterialKeywords> _renderKeywordsBundle;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private int _bloomIterations;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int _lensFlareIterations;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int _minIterations;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private int _glareIterations;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int _currentRenderIndex;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private float bloomUpsampleSpread;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float _lensFlareUpsampleSpread;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float _glareScatteringMult;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector2 _resolutionScale;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector2[] glareAngles;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private RenderTextureFormat _renderTextureFormat;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private ComputeShaderVariants.KeywordState computeShaderFeatures;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private RenderContext[] _sourceContext;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private RenderContext[] _renderContext;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private RenderContext _selectiveRenderContext;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Camera _renderingCamera;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private CameraData _cameraData;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private RenderPipeline _renderPipeline;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Material _renderMaterialNoGeometry;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Material _renderMaterialGeometry;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float[] _cArgArray;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private ComputeBuffer _cArgsComputeBuffer;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private RenderDimension _computeThreadGroups;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Settings _settings;

		[Token(Token = "0x17000092")]
		private RenderTarget sourceFrameBuffer
		{
			[Token(Token = "0x6000802")]
			[Address(RVA = "0xD7F63C", Offset = "0xD7F63C", VA = "0xD7F63C")]
			get
			{
				return default(RenderTarget);
			}
		}

		[Token(Token = "0x17000093")]
		internal int currentRenderIndex
		{
			[Token(Token = "0x6000803")]
			[Address(RVA = "0xD7F68C", Offset = "0xD7F68C", VA = "0xD7F68C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000094")]
		internal Material renderMaterialNoGeometry
		{
			[Token(Token = "0x6000804")]
			[Address(RVA = "0xD7F694", Offset = "0xD7F694", VA = "0xD7F694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		private GameObject selectiveGlowCameraObject
		{
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xD80A3C", Offset = "0xD80A3C", VA = "0xD80A3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private Camera selectiveGlowCamera
		{
			[Token(Token = "0x600080B")]
			[Address(RVA = "0xD80B50", Offset = "0xD80B50", VA = "0xD80B50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xD7EE78", Offset = "0xD7EE78", VA = "0xD7EE78")]
		internal Effect()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xD7F69C", Offset = "0xD7F69C", VA = "0xD7F69C")]
		internal void Enable(RenderPipeline renderPipeline, [Optional] Shader shaderOverwrite, [Optional] Shader shaderGeometryOverwrite)
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xD801B0", Offset = "0xD801B0", VA = "0xD801B0", Slot = "1")]
		~Effect()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xD80250", Offset = "0xD80250", VA = "0xD80250")]
		internal void Disable()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xD80330", Offset = "0xD80330", VA = "0xD80330")]
		private void PrepareScattering(float Scattering, float scale, ref int iterations, ref float spread)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xD803F8", Offset = "0xD803F8", VA = "0xD803F8")]
		private void UpdateRenderBuffers()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xD80C2C", Offset = "0xD80C2C", VA = "0xD80C2C")]
		private void SetupSelectiveGlowCamera()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xD80D48", Offset = "0xD80D48", VA = "0xD80D48")]
		private void CheckFeatureSupport()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xD80E80", Offset = "0xD80E80", VA = "0xD80E80")]
		private void BeginProfileSample(string text)
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xD80EB0", Offset = "0xD80EB0", VA = "0xD80EB0")]
		private void EndProfileSample(string text)
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xD80EE0", Offset = "0xD80EE0", VA = "0xD80EE0")]
		internal void Build(RenderTarget source, RenderTarget destination, Settings settings, CommandBuffer cmd, CameraData cameraData, [Optional] Camera renderingCamera, bool finalBlit = true)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xD81258", Offset = "0xD81258", VA = "0xD81258")]
		private void UpdateConstantBuffers()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xD86298", Offset = "0xD86298", VA = "0xD86298")]
		private void SetKeyword(MaterialKeywords keyword, bool enable)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xD86270", Offset = "0xD86270", VA = "0xD86270")]
		private Vector2 AngleToDirection(float angleDegree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xD860B8", Offset = "0xD860B8", VA = "0xD860B8")]
		private float ConvertGammaValue(float gammaSpacedValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xD861A4", Offset = "0xD861A4", VA = "0xD861A4")]
		private Vector4 ConvertGammaValue(Vector4 gammaSpacedVector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xD8637C", Offset = "0xD8637C", VA = "0xD8637C")]
		private void UpdateComputeShaderThreadGroups(RenderDimension renderDimension)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xD864B0", Offset = "0xD864B0", VA = "0xD864B0")]
		private void UpdateRenderIndex(int v)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xD864B8", Offset = "0xD864B8", VA = "0xD864B8")]
		private void UpdateRenderIndex(ComputeShaderVariants variants, ComputeShaderVariants.KeywordState features)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xD86508", Offset = "0xD86508", VA = "0xD86508")]
		private void AttachCArgBufferToComputeKernel()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xD85F7C", Offset = "0xD85F7C", VA = "0xD85F7C")]
		private void SetFloat(PipelineProperties.ShaderProperties.CBufferProperty property, float value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xD85FFC", Offset = "0xD85FFC", VA = "0xD85FFC")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector4 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xD860F4", Offset = "0xD860F4", VA = "0xD860F4")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector3 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xD85EA8", Offset = "0xD85EA8", VA = "0xD85EA8")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector2 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xD866A8", Offset = "0xD866A8", VA = "0xD866A8")]
		private void SetTexture(PipelineProperties.ShaderProperties.DefaultProperty property, RenderTarget rt, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xD868C0", Offset = "0xD868C0", VA = "0xD868C0")]
		private void SetTexture(PipelineProperties.ShaderProperties.DefaultProperty property, Texture tex, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xD86AC8", Offset = "0xD86AC8", VA = "0xD86AC8")]
		private void PrepareDraw(int variant, RenderDimension renderDimension, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xD86E30", Offset = "0xD86E30", VA = "0xD86E30")]
		private void PrepareDraw(int materialPass, ComputeShaderVariants variants, bool enableBloom, bool enableLensflare, bool enableGlare, RenderDimension renderDimension)
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xD87068", Offset = "0xD87068", VA = "0xD87068")]
		private void Draw(RenderDimension dimension, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xD875F8", Offset = "0xD875F8", VA = "0xD875F8")]
		private MaterialKeywords GetGlareKeyword(int streaks)
		{
			return default(MaterialKeywords);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xD86D78", Offset = "0xD86D78", VA = "0xD86D78")]
		private void DisableRenderKeywords()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xD8761C", Offset = "0xD8761C", VA = "0xD8761C")]
		private void DisableDebugKeywords()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xD86C6C", Offset = "0xD86C6C", VA = "0xD86C6C")]
		private void SetRenderPriority()
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xD820D0", Offset = "0xD820D0", VA = "0xD820D0")]
		private void PreSample()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xD82E1C", Offset = "0xD82E1C", VA = "0xD82E1C")]
		private void Downsample()
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xD83CC0", Offset = "0xD83CC0", VA = "0xD83CC0")]
		private void Upsample()
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xD85098", Offset = "0xD85098", VA = "0xD85098")]
		private void Composite()
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0xD87820", Offset = "0xD87820", VA = "0xD87820")]
		internal void AfterCompositeCleanup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AD")]
	public struct MinMaxRange
	{
		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float minValue;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float maxValue;

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xD87A44", Offset = "0xD87A44", VA = "0xD87A44")]
		public MinMaxRange(float minValue, float maxValue)
		{
		}
	}
	[Token(Token = "0x20001AE")]
	internal sealed class MipBuffer
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTarget[] _renderTargets;

		[Token(Token = "0x17000097")]
		internal RenderTarget[] renderTargets
		{
			[Token(Token = "0x600082F")]
			[Address(RVA = "0xD87A4C", Offset = "0xD87A4C", VA = "0xD87A4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xD7FF74", Offset = "0xD7FF74", VA = "0xD7FF74")]
		public MipBuffer(string name, RenderPipeline renderPipeline)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xD87694", Offset = "0xD87694", VA = "0xD87694")]
		internal void CreateTemporary(RenderContext[] renderContext, int level, CommandBuffer cmd, RenderTextureFormat format, bool useComputeShaders, RenderPipeline renderPipeline)
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xD877B8", Offset = "0xD877B8", VA = "0xD877B8")]
		internal void ClearTemporary(CommandBuffer cmd, int level, RenderPipeline renderPipeline)
		{
		}
	}
	[Token(Token = "0x20001AF")]
	internal static class PipelineExtensions
	{
		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh _screenMesh;

		[Token(Token = "0x17000098")]
		private static Mesh screenMesh
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xD87A94", Offset = "0xD87A94", VA = "0xD87A94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xD86348", Offset = "0xD86348", VA = "0xD86348")]
		internal static void SetKeyword(this CommandBuffer cmd, string keyword, bool enable)
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xD86368", Offset = "0xD86368", VA = "0xD86368")]
		internal static void SetKeyword(string keyword, bool enable)
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xD87280", Offset = "0xD87280", VA = "0xD87280")]
		internal static void Draw(this CommandBuffer cmd, List<RenderTarget> destinations, Material material, bool useGeometryShader, int pass, Rect viewport)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xD87444", Offset = "0xD87444", VA = "0xD87444")]
		internal static void Draw(List<RenderTarget> destinations, Material material, bool useGeometryShader, int pass)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xD87254", Offset = "0xD87254", VA = "0xD87254")]
		internal static void Draw(this CommandBuffer cmd, List<RenderTarget> destinations, ComputeShader computeShader, int kernelIndex, RenderDimension computeThreadGroups)
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xD87418", Offset = "0xD87418", VA = "0xD87418")]
		internal static void Draw(List<RenderTarget> destinations, ComputeShader computeShader, int kernelIndex, RenderDimension computeThreadGroups)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xD882A4", Offset = "0xD882A4", VA = "0xD882A4")]
		private static int SinglePassStereoDownscale(bool cameraIsStereo, int size, int scale)
		{
			return default(int);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xD80968", Offset = "0xD80968", VA = "0xD80968")]
		internal static void UpdateMipRenderContext(this CameraData cameraData, RenderContext[] renderContexts, RenderDimension rawDimension, int levels, RenderTextureFormat format, int depthBufferBits, bool enableRandomWrite)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xD87A54", Offset = "0xD87A54", VA = "0xD87A54")]
		internal static RenderTexture GetTemporary(RenderContext renderContext, RenderTextureFormat format)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B0")]
	internal static class PipelineProperties
	{
		[Token(Token = "0x20001B1")]
		internal static class ShaderProperties
		{
			[Token(Token = "0x20001B2")]
			internal class DefaultProperty
			{
				[Token(Token = "0x4000AFA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				protected string _name;

				[Token(Token = "0x4000AFB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				protected int _id;

				[Token(Token = "0x1700009C")]
				internal int id
				{
					[Token(Token = "0x6000842")]
					[Address(RVA = "0xD89178", Offset = "0xD89178", VA = "0xD89178")]
					get
					{
						return default(int);
					}
				}

				[Token(Token = "0x6000843")]
				[Address(RVA = "0xD89134", Offset = "0xD89134", VA = "0xD89134")]
				internal DefaultProperty(string name)
				{
				}
			}

			[Token(Token = "0x20001B3")]
			internal sealed class CBufferProperty : DefaultProperty
			{
				[Token(Token = "0x4000AFC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private int _index;

				[Token(Token = "0x4000AFD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private int _size;

				[Token(Token = "0x1700009D")]
				internal int index
				{
					[Token(Token = "0x6000844")]
					[Address(RVA = "0xD89180", Offset = "0xD89180", VA = "0xD89180")]
					get
					{
						return default(int);
					}
				}

				[Token(Token = "0x6000845")]
				[Address(RVA = "0xD890A8", Offset = "0xD890A8", VA = "0xD890A8")]
				internal CBufferProperty(string name, int index, int size)
				{
				}
			}

			[Token(Token = "0x4000ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly CBufferProperty screenSize;

			[Token(Token = "0x4000ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly CBufferProperty singlePassStereoScale;

			[Token(Token = "0x4000ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly CBufferProperty viewMatrix;

			[Token(Token = "0x4000ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly DefaultProperty cArgBuffer;

			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly DefaultProperty sourceTex;

			[Token(Token = "0x4000AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly DefaultProperty targetTex;

			[Token(Token = "0x4000AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly DefaultProperty copyTargetTex;

			[Token(Token = "0x4000AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly DefaultProperty bloomTex;

			[Token(Token = "0x4000AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly DefaultProperty bloomTargetTex;

			[Token(Token = "0x4000AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly CBufferProperty bloomSpread;

			[Token(Token = "0x4000AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly CBufferProperty bloomThreshold;

			[Token(Token = "0x4000AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly CBufferProperty lumaScale;

			[Token(Token = "0x4000AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly CBufferProperty bloomIntensity;

			[Token(Token = "0x4000AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly CBufferProperty blooming;

			[Token(Token = "0x4000ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly DefaultProperty higherMipBloomTex;

			[Token(Token = "0x4000ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly CBufferProperty resolutionScale;

			[Token(Token = "0x4000ADC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly CBufferProperty renderTargetSize;

			[Token(Token = "0x4000ADD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly DefaultProperty lensSurfaceDirtTex;

			[Token(Token = "0x4000ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal static readonly DefaultProperty lensSurfaceDiffractionTex;

			[Token(Token = "0x4000ADF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal static readonly CBufferProperty lensSurfaceDirtIntensity;

			[Token(Token = "0x4000AE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal static readonly CBufferProperty lensSurfaceDiffractionIntensity;

			[Token(Token = "0x4000AE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal static readonly CBufferProperty lensSurfaceDirtTexST;

			[Token(Token = "0x4000AE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal static readonly CBufferProperty lensFlareThreshold;

			[Token(Token = "0x4000AE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			internal static readonly CBufferProperty lensFlareGhostParams;

			[Token(Token = "0x4000AE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			internal static readonly CBufferProperty lensFlareHaloParams;

			[Token(Token = "0x4000AE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			internal static readonly DefaultProperty lensFlareTex;

			[Token(Token = "0x4000AE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			internal static readonly DefaultProperty lensFlareTargetTex;

			[Token(Token = "0x4000AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			internal static readonly CBufferProperty lensFlareSpread;

			[Token(Token = "0x4000AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			internal static readonly CBufferProperty lensFlareChromaticAberration;

			[Token(Token = "0x4000AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			internal static readonly DefaultProperty lensFlareColorRamp;

			[Token(Token = "0x4000AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			internal static readonly CBufferProperty glareThreshold;

			[Token(Token = "0x4000AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			internal static readonly CBufferProperty glareBlend;

			[Token(Token = "0x4000AEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			internal static readonly CBufferProperty glareGlobalIntensity;

			[Token(Token = "0x4000AED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			internal static readonly CBufferProperty glareIntensity;

			[Token(Token = "0x4000AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			internal static readonly CBufferProperty glareScattering;

			[Token(Token = "0x4000AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			internal static readonly CBufferProperty glareDirection01;

			[Token(Token = "0x4000AF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			internal static readonly CBufferProperty glareDirection23;

			[Token(Token = "0x4000AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			internal static readonly CBufferProperty glareOffset;

			[Token(Token = "0x4000AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			internal static readonly DefaultProperty glare0Tex;

			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			internal static readonly DefaultProperty glare0TargetTex;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			internal static readonly DefaultProperty glare1Tex;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			internal static readonly DefaultProperty glare1TargetTex;

			[Token(Token = "0x4000AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			internal static readonly DefaultProperty glare2Tex;

			[Token(Token = "0x4000AF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			internal static readonly DefaultProperty glare2TargetTex;

			[Token(Token = "0x4000AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			internal static readonly DefaultProperty glare3Tex;

			[Token(Token = "0x4000AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			internal static readonly DefaultProperty glare3TargetTex;
		}

		[Token(Token = "0x20001B4")]
		internal static class CommandBufferProperties
		{
			[Token(Token = "0x4000AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly string commandBufferName;

			[Token(Token = "0x4000AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly string selectiveRenderBuffer;

			[Token(Token = "0x4000B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly string bloomDownsampleBuffer;

			[Token(Token = "0x4000B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly string bloomUpsampleBuffer;

			[Token(Token = "0x4000B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly string sourceBuffer;

			[Token(Token = "0x4000B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly string glareDownsampleBuffer0;

			[Token(Token = "0x4000B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly string glareDownsampleBuffer1;

			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly string glareDownsampleBuffer2;

			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly string glareDownsampleBuffer3;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly string glareUpsampleBuffer0;

			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly string glareUpsampleBuffer1;

			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly string glareUpsampleBuffer2;

			[Token(Token = "0x4000B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly string glareUpsampleBuffer3;

			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly string lensFlareDownsampleBuffer;

			[Token(Token = "0x4000B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly string lensFlareUpsampleBuffer;

			[Token(Token = "0x4000B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly string sampleDownsample;

			[Token(Token = "0x4000B0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly string samplePreSample;

			[Token(Token = "0x4000B0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly string sampleUpsample;

			[Token(Token = "0x4000B10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal static readonly string sampleComposite;

			[Token(Token = "0x4000B11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal static readonly string sampleCreateBuffers;

			[Token(Token = "0x4000B12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal static readonly string sampleClearBuffers;

			[Token(Token = "0x4000B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal static readonly string sampleSetup;

			[Token(Token = "0x4000B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal static readonly string sampleCopySource;

			[Token(Token = "0x4000B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			internal static readonly string sampleReplacement;

			[Token(Token = "0x4000B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			internal static readonly string samplePrepare;
		}

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int renderBufferSize;

		[Token(Token = "0x17000099")]
		internal static bool xrEnabled
		{
			[Token(Token = "0x600083D")]
			[Address(RVA = "0xD88358", Offset = "0xD88358", VA = "0xD88358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009A")]
		internal static bool singlePassStereoDoubleWideEnabled
		{
			[Token(Token = "0x600083E")]
			[Address(RVA = "0xD85F4C", Offset = "0xD85F4C", VA = "0xD85F4C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		internal static bool singlePassStereoInstancedEnabled
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xD7EA18", Offset = "0xD7EA18", VA = "0xD7EA18")]
			get
			{
				return default(bool);
			}
		}
	}
	[Token(Token = "0x20001B5")]
	internal sealed class RenderContext
	{
		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTextureDescriptor _descriptor;

		[Token(Token = "0x1700009E")]
		public RenderTextureDescriptor descriptor
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0xD895D4", Offset = "0xD895D4", VA = "0xD895D4")]
			get
			{
				return default(RenderTextureDescriptor);
			}
		}

		[Token(Token = "0x1700009F")]
		public RenderDimension renderDimension
		{
			[Token(Token = "0x6000848")]
			[Address(RVA = "0xD81250", Offset = "0xD81250", VA = "0xD81250", Slot = "4")]
			get
			{
				return default(RenderDimension);
			}
		}

		[Token(Token = "0x170000A0")]
		public int width
		{
			[Token(Token = "0x6000849")]
			[Address(RVA = "0xD80958", Offset = "0xD80958", VA = "0xD80958", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A1")]
		public int height
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0xD80960", Offset = "0xD80960", VA = "0xD80960", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xD7FEA0", Offset = "0xD7FEA0", VA = "0xD7FEA0")]
		internal RenderContext()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xD808D0", Offset = "0xD808D0", VA = "0xD808D0")]
		internal void SinglePassStereoAdjustWidth(bool stereoEnabled)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xD807A8", Offset = "0xD807A8", VA = "0xD807A8")]
		internal void UpdateRenderContext(CameraData cameraData, RenderTextureFormat format, int depthBufferBits, bool enableRandomWrite, RenderDimension dimension)
		{
		}
	}
	[Token(Token = "0x20001B6")]
	internal struct RenderTarget
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal RenderTexture renderTexture;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal RenderTargetIdentifier renderTargetIdentifier;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int identifier;
	}
	[Token(Token = "0x20001B7")]
	internal static class RenderTargetContext
	{
		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _renderTargetCount;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RenderTargetSetup[] _mrtBindingsLegacy;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static RenderTargetBinding[] _mrtBindingsSRP;

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xD87DF0", Offset = "0xD87DF0", VA = "0xD87DF0")]
		internal static void SetRenderTargetContext(this CommandBuffer cmd, List<RenderTarget> renderTargets)
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xD88084", Offset = "0xD88084", VA = "0xD88084")]
		internal static void SetRenderTargetContext(List<RenderTarget> renderTargets)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B8")]
	public sealed class Resources : ScriptableObject
	{
		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Texture2D _lensSurfaceDirtTextureDefault;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2D _lensSurfaceDiffractionTextureDefault;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Texture2D _lensFlareColorRampDefault;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Shader _selectiveRenderShader;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Shader _sm20Shader;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Shader _sm25Shader;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Shader _sm30Shader;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Shader _sm35Shader;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Shader _sm40Shader;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Shader _sm40GeometryShader;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ComputeShader _computeShader;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ComputeShader _computeShaderGles;

		[Token(Token = "0x170000A2")]
		internal Texture2D lensSurfaceDirtTextureDefault
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0xD8A1DC", Offset = "0xD8A1DC", VA = "0xD8A1DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		internal Texture2D lensSurfaceDiffractionTextureDefault
		{
			[Token(Token = "0x6000854")]
			[Address(RVA = "0xD8A1E4", Offset = "0xD8A1E4", VA = "0xD8A1E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		internal Texture2D lensFlareColorRampDefault
		{
			[Token(Token = "0x6000855")]
			[Address(RVA = "0xD8A1EC", Offset = "0xD8A1EC", VA = "0xD8A1EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		internal Shader selectiveRenderShader
		{
			[Token(Token = "0x6000856")]
			[Address(RVA = "0xD8A1F4", Offset = "0xD8A1F4", VA = "0xD8A1F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		internal Shader sm20Shader
		{
			[Token(Token = "0x6000857")]
			[Address(RVA = "0xD8A1FC", Offset = "0xD8A1FC", VA = "0xD8A1FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		internal Shader sm25Shader
		{
			[Token(Token = "0x6000858")]
			[Address(RVA = "0xD8A204", Offset = "0xD8A204", VA = "0xD8A204")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		internal Shader sm30Shader
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0xD8A20C", Offset = "0xD8A20C", VA = "0xD8A20C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		internal Shader sm35Shader
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0xD8A214", Offset = "0xD8A214", VA = "0xD8A214")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		internal Shader sm40Shader
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xD8A21C", Offset = "0xD8A21C", VA = "0xD8A21C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		internal Shader sm40GeometryShader
		{
			[Token(Token = "0x600085C")]
			[Address(RVA = "0xD8A224", Offset = "0xD8A224", VA = "0xD8A224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		internal ComputeShader computeShader
		{
			[Token(Token = "0x600085D")]
			[Address(RVA = "0xD8667C", Offset = "0xD8667C", VA = "0xD8667C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xD8A174", Offset = "0xD8A174", VA = "0xD8A174")]
		internal static void ResourcesNotAvailableWarning()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xD7FE48", Offset = "0xD7FE48", VA = "0xD7FE48")]
		internal static Resources LoadResourcesAsset()
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xD8A22C", Offset = "0xD8A22C", VA = "0xD8A22C")]
		public Resources()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	internal abstract class Settings
	{
		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool _allowGeometryShaders;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		protected bool _allowComputeShaders;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected RenderPriority _renderPriority;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DebugView _debugView;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected Quality _quality;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AntiFlickerMode _antiFlickerMode;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Workflow _workflow;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected LayerMask _selectiveRenderLayerMask;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float _anamorphicRatio;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float _lumaScale;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float _blooming;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected MinMaxRange _bloomThreshold;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float _bloomScattering;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float _bloomIntensity;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool _allowLensSurface;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Texture2D _lensSurfaceDirtTexture;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected float _lensSurfaceDirtIntensity;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Texture2D _lensSurfaceDirtDistortionTexture;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected float _lensSurfaceDirtDistortion;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Texture2D _lensSurfaceDiffractionTexture;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float _lensSurfaceDiffractionIntensity;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected bool _allowLensFlare;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected LensFlareStyle _lensFlareStyle;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float _lensFlareGhostFade;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float _lensFlareGhostIntensity;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected MinMaxRange _lensFlareThreshold;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float _lensFlareScattering;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Texture2D _lensFlareColorRamp;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float _lensFlareChromaticAberration;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int _lensFlareGhostCount;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float _lensFlareGhostDispersal;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float _lensFlareHaloFade;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float _lensFlareHaloIntensity;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float _lensFlareHaloSize;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool _allowGlare;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float _glareBlend;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float _glareIntensity;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected float _glareAngle;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected MinMaxRange _glareThreshold;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected int _glareStreaks;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float _glareScattering;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected GlareStyle _glareStyle;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float _glareSample0Scattering;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float _glareSample0Angle;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected float _glareSample0Intensity;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float _glareSample0Offset;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float _glareSample1Scattering;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float _glareSample1Angle;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float _glareSample1Intensity;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float _glareSample1Offset;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float _glareSample2Scattering;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected float _glareSample2Angle;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected float _glareSample2Intensity;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float _glareSample2Offset;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected float _glareSample3Scattering;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected float _glareSample3Angle;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected float _glareSample3Intensity;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected float _glareSample3Offset;

		[Token(Token = "0x170000AD")]
		internal bool allowGeometryShaders
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0xD8A234", Offset = "0xD8A234", VA = "0xD8A234")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		internal bool allowComputeShaders
		{
			[Token(Token = "0x6000860")]
			[Address(RVA = "0xD8A240", Offset = "0xD8A240", VA = "0xD8A240")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		internal RenderPriority renderPriority
		{
			[Token(Token = "0x6000861")]
			[Address(RVA = "0xD8A24C", Offset = "0xD8A24C", VA = "0xD8A24C")]
			get
			{
				return default(RenderPriority);
			}
			[Token(Token = "0x6000862")]
			[Address(RVA = "0xD8A254", Offset = "0xD8A254", VA = "0xD8A254")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		internal DebugView debugView
		{
			[Token(Token = "0x6000863")]
			[Address(RVA = "0xD8A25C", Offset = "0xD8A25C", VA = "0xD8A25C")]
			get
			{
				return default(DebugView);
			}
			[Token(Token = "0x6000864")]
			[Address(RVA = "0xD8A264", Offset = "0xD8A264", VA = "0xD8A264")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		internal Quality quality
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0xD8A26C", Offset = "0xD8A26C", VA = "0xD8A26C")]
			get
			{
				return default(Quality);
			}
			[Token(Token = "0x6000866")]
			[Address(RVA = "0xD8A274", Offset = "0xD8A274", VA = "0xD8A274")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		internal AntiFlickerMode antiFlickerMode
		{
			[Token(Token = "0x6000867")]
			[Address(RVA = "0xD8A27C", Offset = "0xD8A27C", VA = "0xD8A27C")]
			get
			{
				return default(AntiFlickerMode);
			}
			[Token(Token = "0x6000868")]
			[Address(RVA = "0xD8A284", Offset = "0xD8A284", VA = "0xD8A284")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		internal Workflow workflow
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0xD8A28C", Offset = "0xD8A28C", VA = "0xD8A28C")]
			get
			{
				return default(Workflow);
			}
			[Token(Token = "0x600086A")]
			[Address(RVA = "0xD8A294", Offset = "0xD8A294", VA = "0xD8A294")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		internal LayerMask selectiveRenderLayerMask
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0xD8A29C", Offset = "0xD8A29C", VA = "0xD8A29C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0xD8A2A4", Offset = "0xD8A2A4", VA = "0xD8A2A4")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		internal float anamorphicRatio
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0xD8A2AC", Offset = "0xD8A2AC", VA = "0xD8A2AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0xD8A2B4", Offset = "0xD8A2B4", VA = "0xD8A2B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		internal float lumaScale
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0xD8A2D0", Offset = "0xD8A2D0", VA = "0xD8A2D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0xD8A2D8", Offset = "0xD8A2D8", VA = "0xD8A2D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		internal float blooming
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0xD8A2F4", Offset = "0xD8A2F4", VA = "0xD8A2F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000872")]
			[Address(RVA = "0xD8A2FC", Offset = "0xD8A2FC", VA = "0xD8A2FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		internal MinMaxRange bloomThreshold
		{
			[Token(Token = "0x6000873")]
			[Address(RVA = "0xD8A318", Offset = "0xD8A318", VA = "0xD8A318")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x6000874")]
			[Address(RVA = "0xD8A320", Offset = "0xD8A320", VA = "0xD8A320")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		internal float bloomScattering
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xD8A328", Offset = "0xD8A328", VA = "0xD8A328")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xD8A330", Offset = "0xD8A330", VA = "0xD8A330")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		internal float bloomIntensity
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xD8A34C", Offset = "0xD8A34C", VA = "0xD8A34C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xD8A354", Offset = "0xD8A354", VA = "0xD8A354")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		internal bool allowLensSurface
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xD8A364", Offset = "0xD8A364", VA = "0xD8A364")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xD8A36C", Offset = "0xD8A36C", VA = "0xD8A36C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		internal Texture2D lensSurfaceDirtTexture
		{
			[Token(Token = "0x600087B")]
			[Address(RVA = "0xD8A378", Offset = "0xD8A378", VA = "0xD8A378")]
			get
			{
				return null;
			}
			[Token(Token = "0x600087C")]
			[Address(RVA = "0xD8A380", Offset = "0xD8A380", VA = "0xD8A380")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		internal float lensSurfaceDirtIntensity
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xD8A388", Offset = "0xD8A388", VA = "0xD8A388")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xD8A390", Offset = "0xD8A390", VA = "0xD8A390")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		internal Texture2D lensSurfaceDiffractionTexture
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xD8A3A0", Offset = "0xD8A3A0", VA = "0xD8A3A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xD8A3A8", Offset = "0xD8A3A8", VA = "0xD8A3A8")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		internal float lensSurfaceDiffractionIntensity
		{
			[Token(Token = "0x6000881")]
			[Address(RVA = "0xD8A3B0", Offset = "0xD8A3B0", VA = "0xD8A3B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000882")]
			[Address(RVA = "0xD8A3B8", Offset = "0xD8A3B8", VA = "0xD8A3B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		internal bool allowLensFlare
		{
			[Token(Token = "0x6000883")]
			[Address(RVA = "0xD8A3C8", Offset = "0xD8A3C8", VA = "0xD8A3C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000884")]
			[Address(RVA = "0xD8A3D0", Offset = "0xD8A3D0", VA = "0xD8A3D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		internal LensFlareStyle lensFlareStyle
		{
			[Token(Token = "0x6000885")]
			[Address(RVA = "0xD8A3DC", Offset = "0xD8A3DC", VA = "0xD8A3DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		internal float lensFlareGhostFade
		{
			[Token(Token = "0x6000886")]
			[Address(RVA = "0xD8A3E4", Offset = "0xD8A3E4", VA = "0xD8A3E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000887")]
			[Address(RVA = "0xD8A3EC", Offset = "0xD8A3EC", VA = "0xD8A3EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		internal float lensFlareGhostIntensity
		{
			[Token(Token = "0x6000888")]
			[Address(RVA = "0xD8A3FC", Offset = "0xD8A3FC", VA = "0xD8A3FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000889")]
			[Address(RVA = "0xD8A404", Offset = "0xD8A404", VA = "0xD8A404")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		internal MinMaxRange lensFlareThreshold
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xD8A414", Offset = "0xD8A414", VA = "0xD8A414")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xD8A41C", Offset = "0xD8A41C", VA = "0xD8A41C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		internal float lensFlareScattering
		{
			[Token(Token = "0x600088C")]
			[Address(RVA = "0xD8A424", Offset = "0xD8A424", VA = "0xD8A424")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xD8A42C", Offset = "0xD8A42C", VA = "0xD8A42C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		internal Texture2D lensFlareColorRamp
		{
			[Token(Token = "0x600088E")]
			[Address(RVA = "0xD8A448", Offset = "0xD8A448", VA = "0xD8A448")]
			get
			{
				return null;
			}
			[Token(Token = "0x600088F")]
			[Address(RVA = "0xD8A450", Offset = "0xD8A450", VA = "0xD8A450")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		internal float lensFlareChromaticAberration
		{
			[Token(Token = "0x6000890")]
			[Address(RVA = "0xD8A458", Offset = "0xD8A458", VA = "0xD8A458")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000891")]
			[Address(RVA = "0xD8A460", Offset = "0xD8A460", VA = "0xD8A460")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		internal int lensFlareGhostCount
		{
			[Token(Token = "0x6000892")]
			[Address(RVA = "0xD8A468", Offset = "0xD8A468", VA = "0xD8A468")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000893")]
			[Address(RVA = "0xD8A470", Offset = "0xD8A470", VA = "0xD8A470")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		internal float lensFlareGhostDispersal
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0xD8A488", Offset = "0xD8A488", VA = "0xD8A488")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000895")]
			[Address(RVA = "0xD8A490", Offset = "0xD8A490", VA = "0xD8A490")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		internal float lensFlareHaloFade
		{
			[Token(Token = "0x6000896")]
			[Address(RVA = "0xD8A4AC", Offset = "0xD8A4AC", VA = "0xD8A4AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000897")]
			[Address(RVA = "0xD8A4B4", Offset = "0xD8A4B4", VA = "0xD8A4B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		internal float lensFlareHaloIntensity
		{
			[Token(Token = "0x6000898")]
			[Address(RVA = "0xD8A4C4", Offset = "0xD8A4C4", VA = "0xD8A4C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000899")]
			[Address(RVA = "0xD8A4CC", Offset = "0xD8A4CC", VA = "0xD8A4CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		internal float lensFlareHaloSize
		{
			[Token(Token = "0x600089A")]
			[Address(RVA = "0xD8A4DC", Offset = "0xD8A4DC", VA = "0xD8A4DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600089B")]
			[Address(RVA = "0xD8A4E4", Offset = "0xD8A4E4", VA = "0xD8A4E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		internal bool allowGlare
		{
			[Token(Token = "0x600089D")]
			[Address(RVA = "0xD8A548", Offset = "0xD8A548", VA = "0xD8A548")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600089E")]
			[Address(RVA = "0xD8A550", Offset = "0xD8A550", VA = "0xD8A550")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		internal float glareBlend
		{
			[Token(Token = "0x600089F")]
			[Address(RVA = "0xD8A55C", Offset = "0xD8A55C", VA = "0xD8A55C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0xD8A564", Offset = "0xD8A564", VA = "0xD8A564")]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		internal float glareIntensity
		{
			[Token(Token = "0x60008A1")]
			[Address(RVA = "0xD8A580", Offset = "0xD8A580", VA = "0xD8A580")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008A2")]
			[Address(RVA = "0xD8A588", Offset = "0xD8A588", VA = "0xD8A588")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		internal float glareAngle
		{
			[Token(Token = "0x60008A3")]
			[Address(RVA = "0xD8A598", Offset = "0xD8A598", VA = "0xD8A598")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xD8A5A0", Offset = "0xD8A5A0", VA = "0xD8A5A0")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		internal MinMaxRange glareThreshold
		{
			[Token(Token = "0x60008A5")]
			[Address(RVA = "0xD8A5C0", Offset = "0xD8A5C0", VA = "0xD8A5C0")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x60008A6")]
			[Address(RVA = "0xD8A5C8", Offset = "0xD8A5C8", VA = "0xD8A5C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		internal int glareStreaks
		{
			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xD8A5D0", Offset = "0xD8A5D0", VA = "0xD8A5D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xD8A5D8", Offset = "0xD8A5D8", VA = "0xD8A5D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		internal float glareScattering
		{
			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xD8A5F4", Offset = "0xD8A5F4", VA = "0xD8A5F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xD8A5FC", Offset = "0xD8A5FC", VA = "0xD8A5FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		internal GlareStyle glareStyle
		{
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xD8A60C", Offset = "0xD8A60C", VA = "0xD8A60C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		internal float glareSample0Scattering
		{
			[Token(Token = "0x60008AC")]
			[Address(RVA = "0xD8A614", Offset = "0xD8A614", VA = "0xD8A614")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AD")]
			[Address(RVA = "0xD8A61C", Offset = "0xD8A61C", VA = "0xD8A61C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		internal float glareSample0Angle
		{
			[Token(Token = "0x60008AE")]
			[Address(RVA = "0xD8A624", Offset = "0xD8A624", VA = "0xD8A624")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xD8A62C", Offset = "0xD8A62C", VA = "0xD8A62C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		internal float glareSample0Intensity
		{
			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xD8A634", Offset = "0xD8A634", VA = "0xD8A634")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xD8A63C", Offset = "0xD8A63C", VA = "0xD8A63C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		internal float glareSample0Offset
		{
			[Token(Token = "0x60008B2")]
			[Address(RVA = "0xD8A64C", Offset = "0xD8A64C", VA = "0xD8A64C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xD8A654", Offset = "0xD8A654", VA = "0xD8A654")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		internal float glareSample1Scattering
		{
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xD8A65C", Offset = "0xD8A65C", VA = "0xD8A65C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xD8A664", Offset = "0xD8A664", VA = "0xD8A664")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		internal float glareSample1Angle
		{
			[Token(Token = "0x60008B6")]
			[Address(RVA = "0xD8A66C", Offset = "0xD8A66C", VA = "0xD8A66C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008B7")]
			[Address(RVA = "0xD8A674", Offset = "0xD8A674", VA = "0xD8A674")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		internal float glareSample1Intensity
		{
			[Token(Token = "0x60008B8")]
			[Address(RVA = "0xD8A67C", Offset = "0xD8A67C", VA = "0xD8A67C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0xD8A684", Offset = "0xD8A684", VA = "0xD8A684")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		internal float glareSample1Offset
		{
			[Token(Token = "0x60008BA")]
			[Address(RVA = "0xD8A694", Offset = "0xD8A694", VA = "0xD8A694")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008BB")]
			[Address(RVA = "0xD8A69C", Offset = "0xD8A69C", VA = "0xD8A69C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		internal float glareSample2Scattering
		{
			[Token(Token = "0x60008BC")]
			[Address(RVA = "0xD8A6A4", Offset = "0xD8A6A4", VA = "0xD8A6A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008BD")]
			[Address(RVA = "0xD8A6AC", Offset = "0xD8A6AC", VA = "0xD8A6AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		internal float glareSample2Angle
		{
			[Token(Token = "0x60008BE")]
			[Address(RVA = "0xD8A6B4", Offset = "0xD8A6B4", VA = "0xD8A6B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008BF")]
			[Address(RVA = "0xD8A6BC", Offset = "0xD8A6BC", VA = "0xD8A6BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		internal float glareSample2Intensity
		{
			[Token(Token = "0x60008C0")]
			[Address(RVA = "0xD8A6C4", Offset = "0xD8A6C4", VA = "0xD8A6C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xD8A6CC", Offset = "0xD8A6CC", VA = "0xD8A6CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		internal float glareSample2Offset
		{
			[Token(Token = "0x60008C2")]
			[Address(RVA = "0xD8A6DC", Offset = "0xD8A6DC", VA = "0xD8A6DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xD8A6E4", Offset = "0xD8A6E4", VA = "0xD8A6E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		internal float glareSample3Scattering
		{
			[Token(Token = "0x60008C4")]
			[Address(RVA = "0xD8A6EC", Offset = "0xD8A6EC", VA = "0xD8A6EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008C5")]
			[Address(RVA = "0xD8A6F4", Offset = "0xD8A6F4", VA = "0xD8A6F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		internal float glareSample3Angle
		{
			[Token(Token = "0x60008C6")]
			[Address(RVA = "0xD8A6FC", Offset = "0xD8A6FC", VA = "0xD8A6FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008C7")]
			[Address(RVA = "0xD8A704", Offset = "0xD8A704", VA = "0xD8A704")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		internal float glareSample3Intensity
		{
			[Token(Token = "0x60008C8")]
			[Address(RVA = "0xD8A70C", Offset = "0xD8A70C", VA = "0xD8A70C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008C9")]
			[Address(RVA = "0xD8A714", Offset = "0xD8A714", VA = "0xD8A714")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		internal float glareSample3Offset
		{
			[Token(Token = "0x60008CA")]
			[Address(RVA = "0xD8A724", Offset = "0xD8A724", VA = "0xD8A724")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0xD8A72C", Offset = "0xD8A72C", VA = "0xD8A72C")]
			set
			{
			}
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xD8A500", Offset = "0xD8A500", VA = "0xD8A500")]
		internal void SetLensFlarePreset(LensFlareStyle lensFlareStyle)
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xD8A734", Offset = "0xD8A734", VA = "0xD8A734")]
		internal void SetGlarePreset(GlareStyle glareStyle)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xD8A874", Offset = "0xD8A874", VA = "0xD8A874")]
		protected Settings()
		{
		}
	}
}
namespace MK.Glow.Legacy
{
	[Token(Token = "0x20001BA")]
	internal class CameraDataLegacy : CameraData
	{
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xD8B87C", Offset = "0xD8B87C", VA = "0xD8B87C")]
		public static implicit operator CameraDataLegacy(Camera input)
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xD8B954", Offset = "0xD8B954", VA = "0xD8B954")]
		public CameraDataLegacy()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Camera))]
	[ExecuteAlways]
	public class MKGlow : MonoBehaviour
	{
		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowGeometryShaders;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool allowComputeShaders;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public RenderPriority renderPriority;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugView debugView;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quality quality;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AntiFlickerMode antiFlickerMode;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Workflow workflow;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask selectiveRenderLayerMask;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float anamorphicRatio;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lumaScale;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blooming;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MinMaxRange bloomThreshold;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float bloomScattering;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float bloomIntensity;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowLensSurface;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D lensSurfaceDirtTexture;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensSurfaceDirtIntensity;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D lensSurfaceDiffractionTexture;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensSurfaceDiffractionIntensity;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool allowLensFlare;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LensFlareStyle lensFlareStyle;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float lensFlareGhostFade;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float lensFlareGhostIntensity;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public MinMaxRange lensFlareThreshold;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lensFlareScattering;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D lensFlareColorRamp;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float lensFlareChromaticAberration;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int lensFlareGhostCount;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float lensFlareGhostDispersal;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float lensFlareHaloFade;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float lensFlareHaloIntensity;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float lensFlareHaloSize;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool allowGlare;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float glareBlend;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float glareIntensity;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float glareAngle;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public MinMaxRange glareThreshold;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int glareStreaks;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public GlareStyle glareStyle;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float glareScattering;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float glareSample0Scattering;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float glareSample0Angle;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float glareSample0Intensity;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float glareSample0Offset;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float glareSample1Scattering;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float glareSample1Angle;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float glareSample1Intensity;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float glareSample1Offset;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float glareSample2Scattering;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float glareSample2Angle;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float glareSample2Intensity;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float glareSample2Offset;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float glareSample3Scattering;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float glareSample3Angle;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float glareSample3Intensity;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float glareSample3Offset;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Effect _effect;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private RenderTarget _source;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RenderTarget _destination;

		[Token(Token = "0x170000E5")]
		private Camera renderingCamera
		{
			[Token(Token = "0x60008D0")]
			[Address(RVA = "0xD8B95C", Offset = "0xD8B95C", VA = "0xD8B95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xD8B9A4", Offset = "0xD8B9A4", VA = "0xD8B9A4")]
		[ContextMenu("Load Preset For Mobile")]
		private void LoadMobilePreset()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xD8B9D0", Offset = "0xD8B9D0", VA = "0xD8B9D0")]
		[ContextMenu("Load Preset For Quality")]
		private void LoadQualityPreset()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xD8B9FC", Offset = "0xD8B9FC", VA = "0xD8B9FC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xD8BABC", Offset = "0xD8BABC", VA = "0xD8BABC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xD8BAD8", Offset = "0xD8BAD8", VA = "0xD8BAD8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xD8BFF4", Offset = "0xD8BFF4", VA = "0xD8BFF4")]
		public MKGlow()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	internal sealed class SettingsLegacy : Settings
	{
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xD8BD1C", Offset = "0xD8BD1C", VA = "0xD8BD1C")]
		public static implicit operator SettingsLegacy(MKGlow input)
		{
			return null;
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xD8C168", Offset = "0xD8C168", VA = "0xD8C168")]
		public SettingsLegacy()
		{
		}
	}
}
namespace VolumetricFogAndMist
{
	[Token(Token = "0x20001BD")]
	public class FogAreaCullingManager : MonoBehaviour
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VolumetricFog fog;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isSpherical;

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xD8C170", Offset = "0xD8C170", VA = "0xD8C170")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xD8C23C", Offset = "0xD8C23C", VA = "0xD8C23C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xD8C2C4", Offset = "0xD8C2C4", VA = "0xD8C2C4")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xD8C34C", Offset = "0xD8C34C", VA = "0xD8C34C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xD8C46C", Offset = "0xD8C46C", VA = "0xD8C46C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xD8C470", Offset = "0xD8C470", VA = "0xD8C470")]
		public void UpdateFogAreaExtents()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xD8C7DC", Offset = "0xD8C7DC", VA = "0xD8C7DC")]
		public FogAreaCullingManager()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class FogVolume : MonoBehaviour
	{
		[Token(Token = "0x4000BA1")]
		private const float GRAY = 0.8901961f;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableAlphaTransition;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float targetFogAlpha;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float targetSkyHazeAlpha;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool enableFogColorTransition;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color targetFogColor;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableFogSpecularColorTransition;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color targetFogSpecularColor;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool enableLightColorTransition;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color targetLightColor;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float transitionDuration;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Collider targetCollider;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool cameraInside;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VolumetricFog fog;

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xD8C7E4", Offset = "0xD8C7E4", VA = "0xD8C7E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xD8C9E8", Offset = "0xD8C9E8", VA = "0xD8C9E8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xD8CCE4", Offset = "0xD8CCE4", VA = "0xD8CCE4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xD8CF38", Offset = "0xD8CF38", VA = "0xD8CF38")]
		public FogVolume()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	internal interface IVolumetricFogRenderComponent
	{
		[Token(Token = "0x170000E6")]
		VolumetricFog fog
		{
			[Token(Token = "0x60008E4")]
			get;
			[Token(Token = "0x60008E5")]
			set;
		}

		[Token(Token = "0x60008E6")]
		void DestroySelf();
	}
	[Token(Token = "0x20001C0")]
	public enum FOG_PRESET
	{
		[Token(Token = "0x4000BB0")]
		Clear = 0,
		[Token(Token = "0x4000BB1")]
		Mist = 10,
		[Token(Token = "0x4000BB2")]
		WindyMist = 11,
		[Token(Token = "0x4000BB3")]
		LowClouds = 20,
		[Token(Token = "0x4000BB4")]
		SeaClouds = 21,
		[Token(Token = "0x4000BB5")]
		GroundFog = 30,
		[Token(Token = "0x4000BB6")]
		FrostedGround = 31,
		[Token(Token = "0x4000BB7")]
		FoggyLake = 32,
		[Token(Token = "0x4000BB8")]
		Fog = 41,
		[Token(Token = "0x4000BB9")]
		HeavyFog = 42,
		[Token(Token = "0x4000BBA")]
		SandStorm1 = 50,
		[Token(Token = "0x4000BBB")]
		Smoke = 51,
		[Token(Token = "0x4000BBC")]
		ToxicSwamp = 52,
		[Token(Token = "0x4000BBD")]
		SandStorm2 = 53,
		[Token(Token = "0x4000BBE")]
		WorldEdge = 200,
		[Token(Token = "0x4000BBF")]
		Custom = 1000
	}
	[Token(Token = "0x20001C1")]
	public enum SPSR_BEHAVIOUR
	{
		[Token(Token = "0x4000BC1")]
		AutoDetectInEditor,
		[Token(Token = "0x4000BC2")]
		ForcedOn,
		[Token(Token = "0x4000BC3")]
		ForcedOff
	}
	[Token(Token = "0x20001C2")]
	public enum TRANSPARENT_PASS_MODE
	{
		[Token(Token = "0x4000BC5")]
		None,
		[Token(Token = "0x4000BC6")]
		ScreenDirect,
		[Token(Token = "0x4000BC7")]
		BlendPass
	}
	[Token(Token = "0x20001C3")]
	public enum LIGHTING_MODEL
	{
		[Token(Token = "0x4000BC9")]
		Classic,
		[Token(Token = "0x4000BCA")]
		Natural,
		[Token(Token = "0x4000BCB")]
		SingleLight
	}
	[Token(Token = "0x20001C4")]
	public enum SUN_SHADOWS_BAKE_MODE
	{
		[Token(Token = "0x4000BCD")]
		Realtime,
		[Token(Token = "0x4000BCE")]
		Discrete
	}
	[Token(Token = "0x20001C5")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class VolumetricFog : MonoBehaviour
	{
		[Token(Token = "0x20001C6")]
		private class FogOfWarTransition
		{
			[Token(Token = "0x4000C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int x;

			[Token(Token = "0x4000C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int y;

			[Token(Token = "0x4000C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float startTime;

			[Token(Token = "0x4000C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float startDelay;

			[Token(Token = "0x4000C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float duration;

			[Token(Token = "0x4000C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public byte initialAlpha;

			[Token(Token = "0x4000C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			public byte targetAlpha;

			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xD974A4", Offset = "0xD974A4", VA = "0xD974A4")]
			public FogOfWarTransition()
			{
			}
		}

		[Token(Token = "0x4000BCF")]
		public const string SKW_FOG_DISTANCE_ON = "FOG_DISTANCE_ON";

		[Token(Token = "0x4000BD0")]
		public const string SKW_LIGHT_SCATTERING = "FOG_SCATTERING_ON";

		[Token(Token = "0x4000BD1")]
		public const string SKW_FOG_AREA_BOX = "FOG_AREA_BOX";

		[Token(Token = "0x4000BD2")]
		public const string SKW_FOG_AREA_SPHERE = "FOG_AREA_SPHERE";

		[Token(Token = "0x4000BD3")]
		public const string SKW_FOG_VOID_BOX = "FOG_VOID_BOX";

		[Token(Token = "0x4000BD4")]
		public const string SKW_FOG_VOID_SPHERE = "FOG_VOID_SPHERE";

		[Token(Token = "0x4000BD5")]
		public const string SKW_FOG_HAZE_ON = "FOG_HAZE_ON";

		[Token(Token = "0x4000BD6")]
		public const string SKW_FOG_OF_WAR_ON = "FOG_OF_WAR_ON";

		[Token(Token = "0x4000BD7")]
		public const string SKW_FOG_BLUR = "FOG_BLUR_ON";

		[Token(Token = "0x4000BD8")]
		public const string SKW_SUN_SHADOWS = "FOG_SUN_SHADOWS_ON";

		[Token(Token = "0x4000BD9")]
		public const string SKW_FOG_USE_XY_PLANE = "FOG_USE_XY_PLANE";

		[Token(Token = "0x4000BDA")]
		public const string SKW_FOG_TRANSPARENT_BLENDPASS = "FOG_TRANSPARENCY_BLEND_PASS";

		[Token(Token = "0x4000BDB")]
		private const float TIME_BETWEEN_TEXTURE_UPDATES = 0.2f;

		[Token(Token = "0x4000BDC")]
		private const string DEPTH_CAM_NAME = "VFMDepthCamera";

		[Token(Token = "0x4000BDD")]
		private const string DEPTH_SUN_CAM_NAME = "VFMDepthSunCamera";

		[Token(Token = "0x4000BDE")]
		private const string VFM_BUILD_HINT = "VFMBuildHint743";

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VolumetricFog _fog;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isDirty;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private FOG_PRESET _preset;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _useFogVolumes;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool _debugDepthPass;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private TRANSPARENT_PASS_MODE _transparencyMode;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LIGHTING_MODEL _lightingModel;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private bool _renderOpaque;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject _sun;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool _sunCopyColor;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _density;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _noiseStrength;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _distance;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _maxFogLength;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float _maxFogLengthFallOff;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _distanceFallOff;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float _height;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float _baselineHeight;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private bool _baselineRelativeToCamera;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float _baselineRelativeToCameraDelay;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float _noiseScale;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _alpha;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private Color _color;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Color _specularColor;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private float _specularThreshold;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private float _specularIntensity;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private Vector3 _lightDirection;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float _lightIntensity;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private Color _lightColor;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private int _updateTextureSpread;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private float _speed;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private Vector3 _windDirection;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Color _skyColor;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private float _skyHaze;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float _skySpeed;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private float _skyNoiseStrength;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private float _skyAlpha;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private float _skyDepth;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private GameObject _character;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private float _fogVoidFallOff;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private float _fogVoidRadius;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Vector3 _fogVoidPosition;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private float _fogVoidDepth;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float _fogVoidHeight;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private bool _fogVoidInverted;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private GameObject _fogAreaCenter;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private float _fogAreaFallOff;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private float _fogAreaRadius;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Vector3 _fogAreaPosition;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		private float _fogAreaDepth;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private float _fogAreaHeight;

		[Token(Token = "0x4000C12")]
		public const int MAX_POINT_LIGHTS = 6;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private GameObject[] _pointLights;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private float[] _pointLightRanges;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private float[] _pointLightIntensities;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private float[] _pointLightIntensitiesMultiplier;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private Vector3[] _pointLightPositions;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private Color[] _pointLightColors;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private bool _pointLightTrackingAuto;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[SerializeField]
		private int _pointLightTrackingCount;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private float _pointLightTrackingCheckInterval;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[SerializeField]
		private int _downsampling;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private bool _edgeImprove;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[SerializeField]
		private float _edgeThreshold;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private float _stepping;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[SerializeField]
		private float _steppingNear;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private bool _dithering;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[SerializeField]
		private float _ditherStrength;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private bool _lightScatteringEnabled;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[SerializeField]
		private float _lightScatteringSpread;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private int _lightScatteringSamples;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[SerializeField]
		private float _lightScatteringWeight;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private float _lightScatteringIllumination;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[SerializeField]
		private float _lightScatteringDecay;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private float _lightScatteringExposure;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[SerializeField]
		private float _lightScatteringJittering;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private bool _fogBlur;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[SerializeField]
		private float _fogBlurDepth;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[SerializeField]
		private bool _sunShadows;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[SerializeField]
		private float _sunShadowsStrength;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		private float _sunShadowsBias;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[SerializeField]
		private float _sunShadowsJitterStrength;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private int _sunShadowsResolution;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[SerializeField]
		private float _sunShadowsMaxDistance;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private SUN_SHADOWS_BAKE_MODE _sunShadowsBakeMode;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[SerializeField]
		private float _sunShadowsRefreshInterval;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[SerializeField]
		private float _sunShadowsCancellation;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		private float _turbulenceStrength;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private bool _useXYPlane;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
		[SerializeField]
		private bool _useSinglePassStereoRenderingMatrix;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[SerializeField]
		private SPSR_BEHAVIOUR _spsrBehaviour;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private float initialFogAlpha;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private float targetFogAlpha;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private float initialSkyHazeAlpha;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private float targetSkyHazeAlpha;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private bool transitionAlpha;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x201")]
		private bool transitionColor;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x202")]
		private bool transitionSpecularColor;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x203")]
		private bool transitionLightColor;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private bool targetColorActive;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x205")]
		private bool targetSpecularColorActive;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x206")]
		private bool targetLightColorActive;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Color initialFogColor;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Color targetFogColor;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Color initialFogSpecularColor;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Color targetFogSpecularColor;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Color initialLightColor;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Color targetLightColor;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float transitionDuration;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private float transitionStartTime;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private float currentFogAlpha;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private float currentSkyHazeAlpha;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Color currentFogColor;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private Color currentFogSpecularColor;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private Color currentLightColor;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private float oldBaselineRelativeCameraY;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private float currentFogAltitude;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private float skyHazeSpeedAcum;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Camera mainCamera;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private List<string> shaderKeywords;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Material blurMat;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private RenderBuffer[] mrt;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private Material fogMat;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private RenderTexture depthTexture;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private RenderTexture depthSunTexture;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private RenderTexture reducedDestination;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private Light[] pointLightComponents;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Light[] lastFoundLights;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Light[] lightBuffer;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private GameObject[] currentLights;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float trackPointAutoLastTime;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private float trackPointCheckNewLightsLastTime;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Shader depthShader;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private GameObject depthCamObj;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Camera depthCam;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private float lastTextureUpdate;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private Vector3 windSpeedAcum;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private Texture2D adjustedTexture;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Color[] noiseColors;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Color[] adjustedColors;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private float sunLightIntensity;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		private bool needUpdateTexture;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x365")]
		private bool hasChangeAdjustedColorsAlpha;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private int updatingTextureSlice;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private Color updatingTextureLightColor;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		private Color lastRenderSettingsAmbientLight;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		private float lastRenderSettingsAmbientIntensity;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private Light sunLight;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private Vector2 oldSunPos;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private float sunFade;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private GameObject depthSunCamObj;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private Camera depthSunCam;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private Shader depthSunShader;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private bool needUpdateDepthSunTexture;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private float lastShadowUpdateFrame;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private Texture2D adjustedChaosTexture;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private Material chaosLerpMat;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private float turbAcum;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
		private RenderTextureDescriptor defaultDesc;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		[SerializeField]
		private bool _fogOfWarEnabled;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
		[SerializeField]
		private Vector3 _fogOfWarCenter;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		[SerializeField]
		private Vector3 _fogOfWarSize;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		[SerializeField]
		private int _fogOfWarTextureSize;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		[SerializeField]
		private float _fogOfWarRestoreDelay;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		[SerializeField]
		private float _fogOfWarRestoreDuration;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private Texture2D fogOfWarTexture;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private Color32[] fogOfWarColorBuffer;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private List<FogOfWarTransition> fowTransitionList;

		[Token(Token = "0x170000E7")]
		public static VolumetricFog instance
		{
			[Token(Token = "0x60008E7")]
			[Address(RVA = "0xD8C804", Offset = "0xD8C804", VA = "0xD8C804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public FOG_PRESET preset
		{
			[Token(Token = "0x60008E8")]
			[Address(RVA = "0xD8CF70", Offset = "0xD8CF70", VA = "0xD8CF70")]
			get
			{
				return default(FOG_PRESET);
			}
			[Token(Token = "0x60008E9")]
			[Address(RVA = "0xD8CF78", Offset = "0xD8CF78", VA = "0xD8CF78")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public bool useFogVolumes
		{
			[Token(Token = "0x60008EA")]
			[Address(RVA = "0xD8DB50", Offset = "0xD8DB50", VA = "0xD8DB50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008EB")]
			[Address(RVA = "0xD8DB58", Offset = "0xD8DB58", VA = "0xD8DB58")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public bool debugDepthPass
		{
			[Token(Token = "0x60008EC")]
			[Address(RVA = "0xD8DB78", Offset = "0xD8DB78", VA = "0xD8DB78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008ED")]
			[Address(RVA = "0xD8DB80", Offset = "0xD8DB80", VA = "0xD8DB80")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public TRANSPARENT_PASS_MODE transparencyMode
		{
			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xD8DBA0", Offset = "0xD8DBA0", VA = "0xD8DBA0")]
			get
			{
				return default(TRANSPARENT_PASS_MODE);
			}
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xD8DBA8", Offset = "0xD8DBA8", VA = "0xD8DBA8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public LIGHTING_MODEL lightingModel
		{
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xD8E8E8", Offset = "0xD8E8E8", VA = "0xD8E8E8")]
			get
			{
				return default(LIGHTING_MODEL);
			}
			[Token(Token = "0x60008F1")]
			[Address(RVA = "0xD8E8F0", Offset = "0xD8E8F0", VA = "0xD8E8F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public bool renderOpaque
		{
			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xD8EBE0", Offset = "0xD8EBE0", VA = "0xD8EBE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xD8EBE8", Offset = "0xD8EBE8", VA = "0xD8EBE8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public GameObject sun
		{
			[Token(Token = "0x60008F4")]
			[Address(RVA = "0xD8EC2C", Offset = "0xD8EC2C", VA = "0xD8EC2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008F5")]
			[Address(RVA = "0xD8EC34", Offset = "0xD8EC34", VA = "0xD8EC34")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public bool sunCopyColor
		{
			[Token(Token = "0x60008F6")]
			[Address(RVA = "0xD8ED7C", Offset = "0xD8ED7C", VA = "0xD8ED7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008F7")]
			[Address(RVA = "0xD8ED84", Offset = "0xD8ED84", VA = "0xD8ED84")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public float density
		{
			[Token(Token = "0x60008F8")]
			[Address(RVA = "0xD8EDB4", Offset = "0xD8EDB4", VA = "0xD8EDB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008F9")]
			[Address(RVA = "0xD8EDBC", Offset = "0xD8EDBC", VA = "0xD8EDBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public float noiseStrength
		{
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xD8EEA4", Offset = "0xD8EEA4", VA = "0xD8EEA4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xD8EEAC", Offset = "0xD8EEAC", VA = "0xD8EEAC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public float distance
		{
			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xD8EEF0", Offset = "0xD8EEF0", VA = "0xD8EEF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xD8EEF8", Offset = "0xD8EEF8", VA = "0xD8EEF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public float maxFogLength
		{
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xD8EF2C", Offset = "0xD8EF2C", VA = "0xD8EF2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xD8EF34", Offset = "0xD8EF34", VA = "0xD8EF34")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public float maxFogLengthFallOff
		{
			[Token(Token = "0x6000900")]
			[Address(RVA = "0xD8EF60", Offset = "0xD8EF60", VA = "0xD8EF60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000901")]
			[Address(RVA = "0xD8EF68", Offset = "0xD8EF68", VA = "0xD8EF68")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public float distanceFallOff
		{
			[Token(Token = "0x6000902")]
			[Address(RVA = "0xD8EF94", Offset = "0xD8EF94", VA = "0xD8EF94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000903")]
			[Address(RVA = "0xD8EF9C", Offset = "0xD8EF9C", VA = "0xD8EF9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public float height
		{
			[Token(Token = "0x6000904")]
			[Address(RVA = "0xD8EFD0", Offset = "0xD8EFD0", VA = "0xD8EFD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000905")]
			[Address(RVA = "0xD8EFD8", Offset = "0xD8EFD8", VA = "0xD8EFD8")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public float baselineHeight
		{
			[Token(Token = "0x6000906")]
			[Address(RVA = "0xD8F018", Offset = "0xD8F018", VA = "0xD8F018")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000907")]
			[Address(RVA = "0xD8F020", Offset = "0xD8F020", VA = "0xD8F020")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public bool baselineRelativeToCamera
		{
			[Token(Token = "0x6000908")]
			[Address(RVA = "0xD8F068", Offset = "0xD8F068", VA = "0xD8F068")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000909")]
			[Address(RVA = "0xD8F070", Offset = "0xD8F070", VA = "0xD8F070")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public float baselineRelativeToCameraDelay
		{
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xD8F0A8", Offset = "0xD8F0A8", VA = "0xD8F0A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600090B")]
			[Address(RVA = "0xD8F0B0", Offset = "0xD8F0B0", VA = "0xD8F0B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public float noiseScale
		{
			[Token(Token = "0x600090C")]
			[Address(RVA = "0xD8F0DC", Offset = "0xD8F0DC", VA = "0xD8F0DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xD8F0E4", Offset = "0xD8F0E4", VA = "0xD8F0E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public float alpha
		{
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xD8F118", Offset = "0xD8F118", VA = "0xD8F118")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600090F")]
			[Address(RVA = "0xD8F120", Offset = "0xD8F120", VA = "0xD8F120")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public Color color
		{
			[Token(Token = "0x6000910")]
			[Address(RVA = "0xD8F158", Offset = "0xD8F158", VA = "0xD8F158")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000911")]
			[Address(RVA = "0xD8F164", Offset = "0xD8F164", VA = "0xD8F164")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public Color specularColor
		{
			[Token(Token = "0x6000912")]
			[Address(RVA = "0xD8F1E0", Offset = "0xD8F1E0", VA = "0xD8F1E0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000913")]
			[Address(RVA = "0xD8F1EC", Offset = "0xD8F1EC", VA = "0xD8F1EC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public float specularThreshold
		{
			[Token(Token = "0x6000914")]
			[Address(RVA = "0xD8F270", Offset = "0xD8F270", VA = "0xD8F270")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000915")]
			[Address(RVA = "0xD8F278", Offset = "0xD8F278", VA = "0xD8F278")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public float specularIntensity
		{
			[Token(Token = "0x6000916")]
			[Address(RVA = "0xD8F2AC", Offset = "0xD8F2AC", VA = "0xD8F2AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000917")]
			[Address(RVA = "0xD8F2B4", Offset = "0xD8F2B4", VA = "0xD8F2B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public Vector3 lightDirection
		{
			[Token(Token = "0x6000918")]
			[Address(RVA = "0xD8F2F0", Offset = "0xD8F2F0", VA = "0xD8F2F0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000919")]
			[Address(RVA = "0xD8F2FC", Offset = "0xD8F2FC", VA = "0xD8F2FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float lightIntensity
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0xD8F368", Offset = "0xD8F368", VA = "0xD8F368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600091B")]
			[Address(RVA = "0xD8F370", Offset = "0xD8F370", VA = "0xD8F370")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public Color lightColor
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0xD8F3AC", Offset = "0xD8F3AC", VA = "0xD8F3AC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600091D")]
			[Address(RVA = "0xD8F3B8", Offset = "0xD8F3B8", VA = "0xD8F3B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public int updateTextureSpread
		{
			[Token(Token = "0x600091E")]
			[Address(RVA = "0xD8F43C", Offset = "0xD8F43C", VA = "0xD8F43C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600091F")]
			[Address(RVA = "0xD8F444", Offset = "0xD8F444", VA = "0xD8F444")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public float speed
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0xD8F460", Offset = "0xD8F460", VA = "0xD8F460")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000921")]
			[Address(RVA = "0xD8F468", Offset = "0xD8F468", VA = "0xD8F468")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public Vector3 windDirection
		{
			[Token(Token = "0x6000922")]
			[Address(RVA = "0xD8F6E8", Offset = "0xD8F6E8", VA = "0xD8F6E8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000923")]
			[Address(RVA = "0xD8F6F4", Offset = "0xD8F6F4", VA = "0xD8F6F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public Color skyColor
		{
			[Token(Token = "0x6000924")]
			[Address(RVA = "0xD8F758", Offset = "0xD8F758", VA = "0xD8F758")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000925")]
			[Address(RVA = "0xD8F764", Offset = "0xD8F764", VA = "0xD8F764")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public float skyHaze
		{
			[Token(Token = "0x6000926")]
			[Address(RVA = "0xD8F7D4", Offset = "0xD8F7D4", VA = "0xD8F7D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000927")]
			[Address(RVA = "0xD8F7DC", Offset = "0xD8F7DC", VA = "0xD8F7DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public float skySpeed
		{
			[Token(Token = "0x6000928")]
			[Address(RVA = "0xD8F810", Offset = "0xD8F810", VA = "0xD8F810")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000929")]
			[Address(RVA = "0xD8F818", Offset = "0xD8F818", VA = "0xD8F818")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public float skyNoiseStrength
		{
			[Token(Token = "0x600092A")]
			[Address(RVA = "0xD8F83C", Offset = "0xD8F83C", VA = "0xD8F83C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600092B")]
			[Address(RVA = "0xD8F844", Offset = "0xD8F844", VA = "0xD8F844")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public float skyAlpha
		{
			[Token(Token = "0x600092C")]
			[Address(RVA = "0xD8F878", Offset = "0xD8F878", VA = "0xD8F878")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600092D")]
			[Address(RVA = "0xD8F880", Offset = "0xD8F880", VA = "0xD8F880")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public float skyDepth
		{
			[Token(Token = "0x600092E")]
			[Address(RVA = "0xD8F8B4", Offset = "0xD8F8B4", VA = "0xD8F8B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600092F")]
			[Address(RVA = "0xD8F8BC", Offset = "0xD8F8BC", VA = "0xD8F8BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public GameObject character
		{
			[Token(Token = "0x6000930")]
			[Address(RVA = "0xD8F8E8", Offset = "0xD8F8E8", VA = "0xD8F8E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000931")]
			[Address(RVA = "0xD8F8F0", Offset = "0xD8F8F0", VA = "0xD8F8F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public float fogVoidFallOff
		{
			[Token(Token = "0x6000932")]
			[Address(RVA = "0xD8F9E0", Offset = "0xD8F9E0", VA = "0xD8F9E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000933")]
			[Address(RVA = "0xD8F9E8", Offset = "0xD8F9E8", VA = "0xD8F9E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public float fogVoidRadius
		{
			[Token(Token = "0x6000934")]
			[Address(RVA = "0xD8FA1C", Offset = "0xD8FA1C", VA = "0xD8FA1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000935")]
			[Address(RVA = "0xD8F9AC", Offset = "0xD8F9AC", VA = "0xD8F9AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public Vector3 fogVoidPosition
		{
			[Token(Token = "0x6000936")]
			[Address(RVA = "0xD8FA24", Offset = "0xD8FA24", VA = "0xD8FA24")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000937")]
			[Address(RVA = "0xD8FA34", Offset = "0xD8FA34", VA = "0xD8FA34")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public float fogVoidDepth
		{
			[Token(Token = "0x6000938")]
			[Address(RVA = "0xD8FAA0", Offset = "0xD8FAA0", VA = "0xD8FAA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000939")]
			[Address(RVA = "0xD8FAA8", Offset = "0xD8FAA8", VA = "0xD8FAA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public float fogVoidHeight
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0xD8FADC", Offset = "0xD8FADC", VA = "0xD8FADC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600093B")]
			[Address(RVA = "0xD8FAE4", Offset = "0xD8FAE4", VA = "0xD8FAE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		[Obsolete("Fog Void inverted is now deprecated. Use Fog Area settings.")]
		public bool fogVoidInverted
		{
			[Token(Token = "0x600093C")]
			[Address(RVA = "0xD8FB18", Offset = "0xD8FB18", VA = "0xD8FB18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600093D")]
			[Address(RVA = "0xD8FB20", Offset = "0xD8FB20", VA = "0xD8FB20")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public GameObject fogAreaCenter
		{
			[Token(Token = "0x600093E")]
			[Address(RVA = "0xD8FB2C", Offset = "0xD8FB2C", VA = "0xD8FB2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600093F")]
			[Address(RVA = "0xD8FB34", Offset = "0xD8FB34", VA = "0xD8FB34")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public float fogAreaFallOff
		{
			[Token(Token = "0x6000940")]
			[Address(RVA = "0xD8FBC0", Offset = "0xD8FBC0", VA = "0xD8FBC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000941")]
			[Address(RVA = "0xD8FBC8", Offset = "0xD8FBC8", VA = "0xD8FBC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public float fogAreaRadius
		{
			[Token(Token = "0x6000942")]
			[Address(RVA = "0xD8FBF4", Offset = "0xD8FBF4", VA = "0xD8FBF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000943")]
			[Address(RVA = "0xD8C758", Offset = "0xD8C758", VA = "0xD8C758")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public Vector3 fogAreaPosition
		{
			[Token(Token = "0x6000944")]
			[Address(RVA = "0xD8FBFC", Offset = "0xD8FBFC", VA = "0xD8FBFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000945")]
			[Address(RVA = "0xD8C6F0", Offset = "0xD8C6F0", VA = "0xD8C6F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public float fogAreaDepth
		{
			[Token(Token = "0x6000946")]
			[Address(RVA = "0xD8FC0C", Offset = "0xD8FC0C", VA = "0xD8FC0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000947")]
			[Address(RVA = "0xD8C7B0", Offset = "0xD8C7B0", VA = "0xD8C7B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public float fogAreaHeight
		{
			[Token(Token = "0x6000948")]
			[Address(RVA = "0xD8FC14", Offset = "0xD8FC14", VA = "0xD8FC14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000949")]
			[Address(RVA = "0xD8C784", Offset = "0xD8C784", VA = "0xD8C784")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public bool pointLightTrackAuto
		{
			[Token(Token = "0x600094A")]
			[Address(RVA = "0xD8FC1C", Offset = "0xD8FC1C", VA = "0xD8FC1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600094B")]
			[Address(RVA = "0xD8FC24", Offset = "0xD8FC24", VA = "0xD8FC24")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public int pointLightTrackingCount
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0xD8FF14", Offset = "0xD8FF14", VA = "0xD8FF14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600094D")]
			[Address(RVA = "0xD8FF1C", Offset = "0xD8FF1C", VA = "0xD8FF1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public float pointLightTrackingCheckInterval
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0xD8FF58", Offset = "0xD8FF58", VA = "0xD8FF58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600094F")]
			[Address(RVA = "0xD8FF60", Offset = "0xD8FF60", VA = "0xD8FF60")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public int downsampling
		{
			[Token(Token = "0x6000950")]
			[Address(RVA = "0xD8FF8C", Offset = "0xD8FF8C", VA = "0xD8FF8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000951")]
			[Address(RVA = "0xD8FF94", Offset = "0xD8FF94", VA = "0xD8FF94")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public bool edgeImprove
		{
			[Token(Token = "0x6000952")]
			[Address(RVA = "0xD8FFB8", Offset = "0xD8FFB8", VA = "0xD8FFB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000953")]
			[Address(RVA = "0xD8FFC0", Offset = "0xD8FFC0", VA = "0xD8FFC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public float edgeThreshold
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0xD8FFF8", Offset = "0xD8FFF8", VA = "0xD8FFF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000955")]
			[Address(RVA = "0xD90000", Offset = "0xD90000", VA = "0xD90000")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public float stepping
		{
			[Token(Token = "0x6000956")]
			[Address(RVA = "0xD90034", Offset = "0xD90034", VA = "0xD90034")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000957")]
			[Address(RVA = "0xD9003C", Offset = "0xD9003C", VA = "0xD9003C")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public float steppingNear
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0xD90070", Offset = "0xD90070", VA = "0xD90070")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000959")]
			[Address(RVA = "0xD90078", Offset = "0xD90078", VA = "0xD90078")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public bool dithering
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0xD900AC", Offset = "0xD900AC", VA = "0xD900AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600095B")]
			[Address(RVA = "0xD900B4", Offset = "0xD900B4", VA = "0xD900B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public float ditherStrength
		{
			[Token(Token = "0x600095C")]
			[Address(RVA = "0xD900E4", Offset = "0xD900E4", VA = "0xD900E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600095D")]
			[Address(RVA = "0xD900EC", Offset = "0xD900EC", VA = "0xD900EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public bool lightScatteringEnabled
		{
			[Token(Token = "0x600095E")]
			[Address(RVA = "0xD90118", Offset = "0xD90118", VA = "0xD90118")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600095F")]
			[Address(RVA = "0xD90120", Offset = "0xD90120", VA = "0xD90120")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public float lightScatteringSpread
		{
			[Token(Token = "0x6000960")]
			[Address(RVA = "0xD90150", Offset = "0xD90150", VA = "0xD90150")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000961")]
			[Address(RVA = "0xD90158", Offset = "0xD90158", VA = "0xD90158")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public int lightScatteringSamples
		{
			[Token(Token = "0x6000962")]
			[Address(RVA = "0xD90184", Offset = "0xD90184", VA = "0xD90184")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000963")]
			[Address(RVA = "0xD9018C", Offset = "0xD9018C", VA = "0xD9018C")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public float lightScatteringWeight
		{
			[Token(Token = "0x6000964")]
			[Address(RVA = "0xD901B8", Offset = "0xD901B8", VA = "0xD901B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000965")]
			[Address(RVA = "0xD901C0", Offset = "0xD901C0", VA = "0xD901C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000127")]
		public float lightScatteringIllumination
		{
			[Token(Token = "0x6000966")]
			[Address(RVA = "0xD901EC", Offset = "0xD901EC", VA = "0xD901EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000967")]
			[Address(RVA = "0xD901F4", Offset = "0xD901F4", VA = "0xD901F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public float lightScatteringDecay
		{
			[Token(Token = "0x6000968")]
			[Address(RVA = "0xD90220", Offset = "0xD90220", VA = "0xD90220")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000969")]
			[Address(RVA = "0xD90228", Offset = "0xD90228", VA = "0xD90228")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public float lightScatteringExposure
		{
			[Token(Token = "0x600096A")]
			[Address(RVA = "0xD90254", Offset = "0xD90254", VA = "0xD90254")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600096B")]
			[Address(RVA = "0xD9025C", Offset = "0xD9025C", VA = "0xD9025C")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public float lightScatteringJittering
		{
			[Token(Token = "0x600096C")]
			[Address(RVA = "0xD90288", Offset = "0xD90288", VA = "0xD90288")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600096D")]
			[Address(RVA = "0xD90290", Offset = "0xD90290", VA = "0xD90290")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public bool fogBlur
		{
			[Token(Token = "0x600096E")]
			[Address(RVA = "0xD902BC", Offset = "0xD902BC", VA = "0xD902BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600096F")]
			[Address(RVA = "0xD902C4", Offset = "0xD902C4", VA = "0xD902C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public float fogBlurDepth
		{
			[Token(Token = "0x6000970")]
			[Address(RVA = "0xD902F4", Offset = "0xD902F4", VA = "0xD902F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000971")]
			[Address(RVA = "0xD902FC", Offset = "0xD902FC", VA = "0xD902FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public bool sunShadows
		{
			[Token(Token = "0x6000972")]
			[Address(RVA = "0xD90328", Offset = "0xD90328", VA = "0xD90328")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000973")]
			[Address(RVA = "0xD90330", Offset = "0xD90330", VA = "0xD90330")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public float sunShadowsStrength
		{
			[Token(Token = "0x6000974")]
			[Address(RVA = "0xD90410", Offset = "0xD90410", VA = "0xD90410")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000975")]
			[Address(RVA = "0xD90418", Offset = "0xD90418", VA = "0xD90418")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public float sunShadowsBias
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0xD90444", Offset = "0xD90444", VA = "0xD90444")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000977")]
			[Address(RVA = "0xD9044C", Offset = "0xD9044C", VA = "0xD9044C")]
			set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public float sunShadowsJitterStrength
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0xD90484", Offset = "0xD90484", VA = "0xD90484")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000979")]
			[Address(RVA = "0xD9048C", Offset = "0xD9048C", VA = "0xD9048C")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public int sunShadowsResolution
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0xD904B8", Offset = "0xD904B8", VA = "0xD904B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600097B")]
			[Address(RVA = "0xD904C0", Offset = "0xD904C0", VA = "0xD904C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public float sunShadowsMaxDistance
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xD90500", Offset = "0xD90500", VA = "0xD90500")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600097D")]
			[Address(RVA = "0xD90508", Offset = "0xD90508", VA = "0xD90508")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public SUN_SHADOWS_BAKE_MODE sunShadowsBakeMode
		{
			[Token(Token = "0x600097E")]
			[Address(RVA = "0xD90540", Offset = "0xD90540", VA = "0xD90540")]
			get
			{
				return default(SUN_SHADOWS_BAKE_MODE);
			}
			[Token(Token = "0x600097F")]
			[Address(RVA = "0xD90548", Offset = "0xD90548", VA = "0xD90548")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public float sunShadowsRefreshInterval
		{
			[Token(Token = "0x6000980")]
			[Address(RVA = "0xD90580", Offset = "0xD90580", VA = "0xD90580")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000981")]
			[Address(RVA = "0xD90588", Offset = "0xD90588", VA = "0xD90588")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public float sunShadowsCancellation
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xD905B4", Offset = "0xD905B4", VA = "0xD905B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000983")]
			[Address(RVA = "0xD905BC", Offset = "0xD905BC", VA = "0xD905BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public float turbulenceStrength
		{
			[Token(Token = "0x6000984")]
			[Address(RVA = "0xD905E8", Offset = "0xD905E8", VA = "0xD905E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000985")]
			[Address(RVA = "0xD905F0", Offset = "0xD905F0", VA = "0xD905F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public bool useXYPlane
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xD90630", Offset = "0xD90630", VA = "0xD90630")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000987")]
			[Address(RVA = "0xD90638", Offset = "0xD90638", VA = "0xD90638")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public bool useSinglePassStereoRenderingMatrix
		{
			[Token(Token = "0x6000988")]
			[Address(RVA = "0xD9067C", Offset = "0xD9067C", VA = "0xD9067C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000989")]
			[Address(RVA = "0xD90684", Offset = "0xD90684", VA = "0xD90684")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public SPSR_BEHAVIOUR spsrBehaviour
		{
			[Token(Token = "0x600098A")]
			[Address(RVA = "0xD906A4", Offset = "0xD906A4", VA = "0xD906A4")]
			get
			{
				return default(SPSR_BEHAVIOUR);
			}
			[Token(Token = "0x600098B")]
			[Address(RVA = "0xD906AC", Offset = "0xD906AC", VA = "0xD906AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Camera fogCamera
		{
			[Token(Token = "0x600098C")]
			[Address(RVA = "0xD906C8", Offset = "0xD906C8", VA = "0xD906C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public bool fogOfWarEnabled
		{
			[Token(Token = "0x60009D3")]
			[Address(RVA = "0xD962F4", Offset = "0xD962F4", VA = "0xD962F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xD962FC", Offset = "0xD962FC", VA = "0xD962FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public Vector3 fogOfWarCenter
		{
			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xD96334", Offset = "0xD96334", VA = "0xD96334")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xD96344", Offset = "0xD96344", VA = "0xD96344")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public Vector3 fogOfWarSize
		{
			[Token(Token = "0x60009D7")]
			[Address(RVA = "0xD963A8", Offset = "0xD963A8", VA = "0xD963A8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xD963B8", Offset = "0xD963B8", VA = "0xD963B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public int fogOfWarTextureSize
		{
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xD96430", Offset = "0xD96430", VA = "0xD96430")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xD96438", Offset = "0xD96438", VA = "0xD96438")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public float fogOfWarRestoreDelay
		{
			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xD96478", Offset = "0xD96478", VA = "0xD96478")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xD96480", Offset = "0xD96480", VA = "0xD96480")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public float fogOfWarRestoreDuration
		{
			[Token(Token = "0x60009DD")]
			[Address(RVA = "0xD9649C", Offset = "0xD9649C", VA = "0xD9649C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xD964A4", Offset = "0xD964A4", VA = "0xD964A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public Color32[] fogOfWarTextureData
		{
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xD96FC8", Offset = "0xD96FC8", VA = "0xD96FC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xD96FD0", Offset = "0xD96FD0", VA = "0xD96FD0")]
			set
			{
			}
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xD906D0", Offset = "0xD906D0", VA = "0xD906D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xD908E4", Offset = "0xD908E4", VA = "0xD908E4")]
		private void Init()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xD90F14", Offset = "0xD90F14", VA = "0xD90F14")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xD8C3CC", Offset = "0xD8C3CC", VA = "0xD8C3CC")]
		public void DestroySelf()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xD91278", Offset = "0xD91278", VA = "0xD91278")]
		private void Start()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xD912B0", Offset = "0xD912B0", VA = "0xD912B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xD8E81C", Offset = "0xD8E81C", VA = "0xD8E81C")]
		private void UpdateRenderComponents()
		{
		}

		[Token(Token = "0x6000994")]
		private void DestroyRenderComponent<T>() where T : IVolumetricFogRenderComponent
		{
		}

		[Token(Token = "0x6000995")]
		private void AssignRenderComponent<T>() where T : Component, IVolumetricFogRenderComponent
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xD927C8", Offset = "0xD927C8", VA = "0xD927C8")]
		private void GetTransparentDepth()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xD92690", Offset = "0xD92690", VA = "0xD92690")]
		private void CastSunShadows()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xD92BDC", Offset = "0xD92BDC", VA = "0xD92BDC")]
		private void GetSunShadows()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xD9357C", Offset = "0xD9357C", VA = "0xD9357C")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xD93618", Offset = "0xD93618", VA = "0xD93618")]
		internal void DoOnPreRender()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xD936C8", Offset = "0xD936C8", VA = "0xD936C8")]
		internal void DoOnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xD94540", Offset = "0xD94540", VA = "0xD94540")]
		private void SetMaterialLightData(int k, Light lightComponent)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xD949FC", Offset = "0xD949FC", VA = "0xD949FC")]
		private int GetScaledSize(int size, float factor)
		{
			return default(int);
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xD94A3C", Offset = "0xD94A3C", VA = "0xD94A3C")]
		private void SetBlurTexture(RenderTexture source)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xD94D1C", Offset = "0xD94D1C", VA = "0xD94D1C")]
		internal void DoOnPostRender()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xD94DD4", Offset = "0xD94DD4", VA = "0xD94DD4")]
		internal void DoOnPostRenderBlend(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xD911EC", Offset = "0xD911EC", VA = "0xD911EC")]
		private void CleanUpDepthTexture()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xD90378", Offset = "0xD90378", VA = "0xD90378")]
		private void CleanUpTextureDepthSun()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xD94EA0", Offset = "0xD94EA0", VA = "0xD94EA0")]
		public string GetCurrentPresetName()
		{
			return null;
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xD8CFA4", Offset = "0xD8CFA4", VA = "0xD8CFA4")]
		private void UpdatePreset()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xD94F84", Offset = "0xD94F84", VA = "0xD94F84")]
		public void CheckWaterLevel(bool baseZero)
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xD9519C", Offset = "0xD9519C", VA = "0xD9519C")]
		public static Terrain GetActiveTerrain()
		{
			return null;
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xD91CB0", Offset = "0xD91CB0", VA = "0xD91CB0")]
		private void UpdateMaterialFogColor()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xD91D24", Offset = "0xD91D24", VA = "0xD91D24")]
		private void UpdateMaterialHeights()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xD8DBDC", Offset = "0xD8DBDC", VA = "0xD8DBDC")]
		private void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xD933D0", Offset = "0xD933D0", VA = "0xD933D0")]
		private void UpdateSunShadowsData()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xD8F49C", Offset = "0xD8F49C", VA = "0xD8F49C")]
		private void UpdateWindSpeedQuick()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xD941F4", Offset = "0xD941F4", VA = "0xD941F4")]
		private void UpdateScatteringData()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xD8ECD0", Offset = "0xD8ECD0", VA = "0xD8ECD0")]
		private void UpdateSun()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xD91BBC", Offset = "0xD91BBC", VA = "0xD91BBC")]
		private void UpdateSkyColor(float alpha)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xD90C18", Offset = "0xD90C18", VA = "0xD90C18")]
		private void UpdatePointLights()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xD8EE00", Offset = "0xD8EE00", VA = "0xD8EE00")]
		private void UpdateTextureAlpha()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xD8E924", Offset = "0xD8E924", VA = "0xD8E924")]
		private void UpdateTexture()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xD91FB8", Offset = "0xD91FB8", VA = "0xD91FB8")]
		private void UpdateTextureColors(Color[] colors, bool forceUpdateEntireTexture)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xD94730", Offset = "0xD94730", VA = "0xD94730")]
		private void ApplyChaos()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xD90EDC", Offset = "0xD90EDC", VA = "0xD90EDC")]
		private void CopyTransitionValues()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xD8CB9C", Offset = "0xD8CB9C", VA = "0xD8CB9C")]
		public void SetTargetAlpha(float newFogAlpha, float newSkyHazeAlpha, float duration)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xD8CE68", Offset = "0xD8CE68", VA = "0xD8CE68")]
		public void ClearTargetAlpha(float duration)
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xD8CBE4", Offset = "0xD8CBE4", VA = "0xD8CBE4")]
		public void SetTargetColor(Color newColor, float duration)
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xD8CEB4", Offset = "0xD8CEB4", VA = "0xD8CEB4")]
		public void ClearTargetColor(float duration)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xD8CC38", Offset = "0xD8CC38", VA = "0xD8CC38")]
		public void SetTargetSpecularColor(Color newSpecularColor, float duration)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xD8CEE0", Offset = "0xD8CEE0", VA = "0xD8CEE0")]
		public void ClearTargetSpecularColor(float duration)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xD8CC8C", Offset = "0xD8CC8C", VA = "0xD8CC8C")]
		public void SetTargetLightColor(Color newLightColor, float duration)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xD8CF0C", Offset = "0xD8CF0C", VA = "0xD8CF0C")]
		public void ClearTargetLightColor(float duration)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xD952B8", Offset = "0xD952B8", VA = "0xD952B8")]
		public GameObject GetPointLight(int index)
		{
			return null;
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xD952F8", Offset = "0xD952F8", VA = "0xD952F8")]
		public void SetPointLight(int index, GameObject pointLight)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xD95400", Offset = "0xD95400", VA = "0xD95400")]
		public float GetPointLightRange(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xD9543C", Offset = "0xD9543C", VA = "0xD9543C")]
		public void SetPointLightRange(int index, float range)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xD95494", Offset = "0xD95494", VA = "0xD95494")]
		public float GetPointLightIntensity(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xD954D0", Offset = "0xD954D0", VA = "0xD954D0")]
		public void SetPointLightIntensity(int index, float intensity)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xD95528", Offset = "0xD95528", VA = "0xD95528")]
		public float GetPointLightIntensityMultiplier(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xD95564", Offset = "0xD95564", VA = "0xD95564")]
		public void SetPointLightIntensityMultiplier(int index, float intensityMultiplier)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xD955BC", Offset = "0xD955BC", VA = "0xD955BC")]
		public Vector3 GetPointLightPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xD95650", Offset = "0xD95650", VA = "0xD95650")]
		public void SetPointLightPosition(int index, Vector3 position)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xD956F4", Offset = "0xD956F4", VA = "0xD956F4")]
		public Color GetPointLightColor(int index)
		{
			return default(Color);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xD95758", Offset = "0xD95758", VA = "0xD95758")]
		public void SetPointLightColor(int index, Color color)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xD95810", Offset = "0xD95810", VA = "0xD95810")]
		private void TrackNewLights()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xD8FC54", Offset = "0xD8FC54", VA = "0xD8FC54")]
		private void TrackPointLights()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xD95888", Offset = "0xD95888", VA = "0xD95888")]
		private GameObject GetNearestLight(Light[] lights)
		{
			return null;
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xD95A5C", Offset = "0xD95A5C", VA = "0xD95A5C")]
		public static VolumetricFog CreateFogArea(Vector3 position, float radius)
		{
			return null;
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xD95AB0", Offset = "0xD95AB0", VA = "0xD95AB0")]
		public static VolumetricFog CreateFogArea(GameObject cameraGameObject, Vector3 position, float radius)
		{
			return null;
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xD95E54", Offset = "0xD95E54", VA = "0xD95E54")]
		public static VolumetricFog CreateFogArea(Vector3 position, Vector3 boxSize)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xD95EC0", Offset = "0xD95EC0", VA = "0xD95EC0")]
		public static VolumetricFog CreateFogArea(GameObject cameraGameObject, Vector3 position, Vector3 boxSize)
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xD95C50", Offset = "0xD95C50", VA = "0xD95C50")]
		private static void CreateFogAreaPlaceholder(bool spherical, Vector3 position, float radius, float height, float depth, VolumetricFog fog)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xD960B0", Offset = "0xD960B0", VA = "0xD960B0")]
		public static void RemoveAllFogAreas()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xD960D4", Offset = "0xD960D4", VA = "0xD960D4")]
		public static void RemoveAllFogAreas(GameObject cameraGameObject)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xD90D64", Offset = "0xD90D64", VA = "0xD90D64")]
		private void FogOfWarInit()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xD90DE0", Offset = "0xD90DE0", VA = "0xD90DE0")]
		private void FogOfWarUpdateTexture()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xD92438", Offset = "0xD92438", VA = "0xD92438")]
		private void FogOfWarUpdate()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xD96814", Offset = "0xD96814", VA = "0xD96814")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xD9681C", Offset = "0xD9681C", VA = "0xD9681C")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha, float duration)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xD96C7C", Offset = "0xD96C7C", VA = "0xD96C7C")]
		public void ResetFogOfWarAlpha(Vector3 worldPosition, float radius)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xD964C0", Offset = "0xD964C0", VA = "0xD964C0")]
		public void ResetFogOfWar()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xD9664C", Offset = "0xD9664C", VA = "0xD9664C")]
		private void AddFowOfWarTransitionSlot(int x, int y, byte initialAlpha, byte targetAlpha, float delay, float duration)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xD970CC", Offset = "0xD970CC", VA = "0xD970CC")]
		public VolumetricFog()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera), typeof(VolumetricFog))]
	public class VolumetricFogPosT : MonoBehaviour, IVolumetricFogRenderComponent
	{
		[Token(Token = "0x17000142")]
		public VolumetricFog fog
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xD974AC", Offset = "0xD974AC", VA = "0xD974AC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xD974B4", Offset = "0xD974B4", VA = "0xD974B4", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xD974BC", Offset = "0xD974BC", VA = "0xD974BC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xD975D0", Offset = "0xD975D0", VA = "0xD975D0", Slot = "6")]
		public void DestroySelf()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xD97628", Offset = "0xD97628", VA = "0xD97628")]
		public VolumetricFogPosT()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	[RequireComponent(typeof(Camera), typeof(VolumetricFog))]
	[ExecuteInEditMode]
	public class VolumetricFogPreT : MonoBehaviour, IVolumetricFogRenderComponent
	{
		[Token(Token = "0x17000143")]
		public VolumetricFog fog
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0xD97630", Offset = "0xD97630", VA = "0xD97630", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0xD97638", Offset = "0xD97638", VA = "0xD97638", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xD97640", Offset = "0xD97640", VA = "0xD97640")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xD976C4", Offset = "0xD976C4", VA = "0xD976C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xD977A8", Offset = "0xD977A8", VA = "0xD977A8")]
		private IEnumerator OnPostRender()
		{
			return null;
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xD97844", Offset = "0xD97844", VA = "0xD97844", Slot = "6")]
		public void DestroySelf()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xD9789C", Offset = "0xD9789C", VA = "0xD9789C")]
		public VolumetricFogPreT()
		{
		}
	}
}
namespace DynamicFogAndMist
{
	[Token(Token = "0x20001CA")]
	public enum FOG_TYPE
	{
		[Token(Token = "0x4000C95")]
		DesktopFogWithSkyHaze,
		[Token(Token = "0x4000C96")]
		MobileFogWithSkyHaze,
		[Token(Token = "0x4000C97")]
		MobileFogOnlyGround,
		[Token(Token = "0x4000C98")]
		DesktopFogPlusWithSkyHaze,
		[Token(Token = "0x4000C99")]
		MobileFogSimple,
		[Token(Token = "0x4000C9A")]
		MobileFogBasic
	}
	[Token(Token = "0x20001CB")]
	internal static class FOG_TYPE_Ext
	{
		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xD97A30", Offset = "0xD97A30", VA = "0xD97A30")]
		public static bool isPlus(this FOG_TYPE fogType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001CC")]
	public enum FOG_PRESET
	{
		[Token(Token = "0x4000C9C")]
		Clear,
		[Token(Token = "0x4000C9D")]
		Mist,
		[Token(Token = "0x4000C9E")]
		WindyMist,
		[Token(Token = "0x4000C9F")]
		GroundFog,
		[Token(Token = "0x4000CA0")]
		Fog,
		[Token(Token = "0x4000CA1")]
		HeavyFog,
		[Token(Token = "0x4000CA2")]
		SandStorm,
		[Token(Token = "0x4000CA3")]
		Custom
	}
	[Token(Token = "0x20001CD")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class DynamicFog : MonoBehaviour
	{
		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOG_TYPE effectType;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FOG_PRESET preset;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useFogVolumes;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool enableDithering;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float alpha;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float noiseStrength;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float distance;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float distanceFallOff;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDistance;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxDistanceFallOff;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float height;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float heightFallOff;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float baselineHeight;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool clipUnderBaseline;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float turbulence;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color color;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color color2;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float skyHaze;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float skySpeed;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float skyNoiseStrength;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float skyAlpha;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject sun;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool fogOfWarEnabled;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 fogOfWarCenter;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 fogOfWarSize;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int fogOfWarTextureSize;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool useSinglePassStereoRenderingMatrix;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material fogMatAdv;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material fogMatFogSky;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material fogMatOnlyFog;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material fogMatVol;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material fogMatSimple;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material fogMatBasic;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Material fogMat;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float initialFogAlpha;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float targetFogAlpha;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float initialSkyHazeAlpha;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float targetSkyHazeAlpha;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float transitionDuration;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float transitionStartTime;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float currentFogAlpha;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float currentSkyHazeAlpha;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Camera currentCamera;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Texture2D fogOfWarTexture;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Color32[] fogOfWarColorBuffer;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Light sunLight;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 sunDirection;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Color sunColor;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float sunIntensity;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DynamicFog _fog;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private List<string> shaderKeywords;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool matOrtho;

		[Token(Token = "0x17000146")]
		public static DynamicFog instance
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xD97A50", Offset = "0xD97A50", VA = "0xD97A50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public Camera fogCamera
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0xD97C84", Offset = "0xD97C84", VA = "0xD97C84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xD97BA0", Offset = "0xD97BA0", VA = "0xD97BA0")]
		public string GetCurrentPresetName()
		{
			return null;
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xD97C8C", Offset = "0xD97C8C", VA = "0xD97C8C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xD98838", Offset = "0xD98838", VA = "0xD98838")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xD9883C", Offset = "0xD9883C", VA = "0xD9883C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xD97CA4", Offset = "0xD97CA4", VA = "0xD97CA4")]
		private void Init()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xD98C20", Offset = "0xD98C20", VA = "0xD98C20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xD9928C", Offset = "0xD9928C", VA = "0xD9928C")]
		public void CheckPreset()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xD994F8", Offset = "0xD994F8", VA = "0xD994F8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xD99810", Offset = "0xD99810", VA = "0xD99810")]
		private void ResetMaterial()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xD97D50", Offset = "0xD97D50", VA = "0xD97D50")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xD98F30", Offset = "0xD98F30", VA = "0xD98F30")]
		private void SetSkyData()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xD98F90", Offset = "0xD98F90", VA = "0xD98F90")]
		private void UpdateFogColor()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xD99890", Offset = "0xD99890", VA = "0xD99890")]
		public void SetTargetAlpha(float newFogAlpha, float newSkyHazeAlpha, float duration)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xD998CC", Offset = "0xD998CC", VA = "0xD998CC")]
		public void ClearTargetAlpha(float duration)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xD98B24", Offset = "0xD98B24", VA = "0xD98B24")]
		private void UpdateFogOfWarTexture()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xD99A9C", Offset = "0xD99A9C", VA = "0xD99A9C")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha)
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xD99E9C", Offset = "0xD99E9C", VA = "0xD99E9C")]
		public void ResetFogOfWarAlpha(Vector3 worldPosition, float radius)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xD99948", Offset = "0xD99948", VA = "0xD99948")]
		public void ResetFogOfWar()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xD99908", Offset = "0xD99908", VA = "0xD99908")]
		private int GetScaledSize(int size, float factor)
		{
			return default(int);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xD9A1E8", Offset = "0xD9A1E8", VA = "0xD9A1E8")]
		public DynamicFog()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	[ExecuteInEditMode]
	public class DynamicFogManager : MonoBehaviour
	{
		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float alpha;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float noiseStrength;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float distanceFallOff;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float height;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float heightFallOff;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float baselineHeight;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject sun;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Light sunLight;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 sunDirection;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color sunColor;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float sunIntensity;

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xD9A2E4", Offset = "0xD9A2E4", VA = "0xD9A2E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xD9A314", Offset = "0xD9A314", VA = "0xD9A314")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xD9A32C", Offset = "0xD9A32C", VA = "0xD9A32C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xD9A2FC", Offset = "0xD9A2FC", VA = "0xD9A2FC")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xD9A6FC", Offset = "0xD9A6FC", VA = "0xD9A6FC")]
		private void UpdateFogData()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xD9A4A4", Offset = "0xD9A4A4", VA = "0xD9A4A4")]
		private void UpdateFogColor()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xD9A7C4", Offset = "0xD9A7C4", VA = "0xD9A7C4")]
		public DynamicFogManager()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[ExecuteInEditMode]
	public class DynamicFogOfWar : MonoBehaviour
	{
		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int fogOfWarTextureSize;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material fogMat;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DynamicFogOfWar _instance;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D fogOfWarTexture;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color32[] fogOfWarColorBuffer;

		[Token(Token = "0x17000148")]
		public static DynamicFogOfWar instance
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xD9A854", Offset = "0xD9A854", VA = "0xD9A854")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xD9A928", Offset = "0xD9A928", VA = "0xD9A928")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xD9AA94", Offset = "0xD9AA94", VA = "0xD9AA94")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xD9AB34", Offset = "0xD9AB34", VA = "0xD9AB34")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xD9A998", Offset = "0xD9A998", VA = "0xD9A998")]
		private void UpdateFogOfWarTexture()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xD9AC18", Offset = "0xD9AC18", VA = "0xD9AC18")]
		private int GetScaledSize(int size, float factor)
		{
			return default(int);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xD9ADAC", Offset = "0xD9ADAC", VA = "0xD9ADAC")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xD9AC58", Offset = "0xD9AC58", VA = "0xD9AC58")]
		public void ResetFogOfWar()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xD9B1F4", Offset = "0xD9B1F4", VA = "0xD9B1F4")]
		public void SetFogOfWarTerrainBoundary(Terrain terrain, float borderWidth)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xD9B46C", Offset = "0xD9B46C", VA = "0xD9B46C")]
		public DynamicFogOfWar()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class FogVolume : MonoBehaviour
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float targetFogAlpha;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float targetSkyHazeAlpha;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float transitionDuration;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DynamicFog fog;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool cameraInside;

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xD9B47C", Offset = "0xD9B47C", VA = "0xD9B47C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xD9B49C", Offset = "0xD9B49C", VA = "0xD9B49C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xD9B59C", Offset = "0xD9B59C", VA = "0xD9B59C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xD9B698", Offset = "0xD9B698", VA = "0xD9B698")]
		public FogVolume()
		{
		}
	}
}
namespace UnityEngine.EventSystems
{
	[Token(Token = "0x20001D1")]
	public class GamePadInputModule : BaseInputModule
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_PrevActionTime;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector2 m_LastMoveVector;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_ConsecutiveMoveCount;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string m_HorizontalAxis;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private string m_VerticalAxis;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private string m_SubmitButton;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private string m_CancelButton;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private float m_InputActionsPerSecond;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private float m_RepeatDelay;

		[Token(Token = "0x17000149")]
		public float inputActionsPerSecond
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xD9B790", Offset = "0xD9B790", VA = "0xD9B790")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xD9B798", Offset = "0xD9B798", VA = "0xD9B798")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public float repeatDelay
		{
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xD9B7A0", Offset = "0xD9B7A0", VA = "0xD9B7A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xD9B7A8", Offset = "0xD9B7A8", VA = "0xD9B7A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public string horizontalAxis
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xD9B7B0", Offset = "0xD9B7B0", VA = "0xD9B7B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0xD9B7B8", Offset = "0xD9B7B8", VA = "0xD9B7B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public string verticalAxis
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xD9B7C0", Offset = "0xD9B7C0", VA = "0xD9B7C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0xD9B7C8", Offset = "0xD9B7C8", VA = "0xD9B7C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public string submitButton
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xD9B7D0", Offset = "0xD9B7D0", VA = "0xD9B7D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A33")]
			[Address(RVA = "0xD9B7D8", Offset = "0xD9B7D8", VA = "0xD9B7D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public string cancelButton
		{
			[Token(Token = "0x6000A34")]
			[Address(RVA = "0xD9B7E0", Offset = "0xD9B7E0", VA = "0xD9B7E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xD9B7E8", Offset = "0xD9B7E8", VA = "0xD9B7E8")]
			set
			{
			}
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xD9B6B0", Offset = "0xD9B6B0", VA = "0xD9B6B0")]
		protected GamePadInputModule()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xD9B7F0", Offset = "0xD9B7F0", VA = "0xD9B7F0", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xD9B88C", Offset = "0xD9B88C", VA = "0xD9B88C", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xD9B9E8", Offset = "0xD9B9E8", VA = "0xD9B9E8", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xD9B9F0", Offset = "0xD9B9F0", VA = "0xD9B9F0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xD9BDFC", Offset = "0xD9BDFC", VA = "0xD9BDFC")]
		protected bool SendSubmitEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xD9BFE4", Offset = "0xD9BFE4", VA = "0xD9BFE4")]
		private Vector2 GetRawMoveVector()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xD9BB84", Offset = "0xD9BB84", VA = "0xD9BB84")]
		protected bool SendMoveEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xD9BA3C", Offset = "0xD9BA3C", VA = "0xD9BA3C")]
		protected bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}
	}
}
namespace UnityEngine.EventSystems.Extensions
{
	[Token(Token = "0x20001D2")]
	[RequireComponent(typeof(EventSystem))]
	public class AimerInputModule : PointerInputModule
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string activateAxis;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 aimerOffset;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GameObject objectUnderAimer;

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xD9C0A0", Offset = "0xD9C0A0", VA = "0xD9C0A0")]
		protected AimerInputModule()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xD9C0FC", Offset = "0xD9C0FC", VA = "0xD9C0FC", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xD9C1F8", Offset = "0xD9C1F8", VA = "0xD9C1F8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xD9C96C", Offset = "0xD9C96C", VA = "0xD9C96C", Slot = "31")]
		protected virtual PointerEventData GetAimerPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xD9C298", Offset = "0xD9C298", VA = "0xD9C298")]
		private void ProcessInteraction(PointerEventData pointer, bool pressed, bool released)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xD9CACC", Offset = "0xD9CACC", VA = "0xD9CACC", Slot = "22")]
		public override void DeactivateModule()
		{
		}
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x20001D3")]
	[RequireComponent(typeof(RectTransform))]
	public class ExtensionsToggle : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICanvasElement
	{
		[Token(Token = "0x20001D4")]
		public enum ToggleTransition
		{
			[Token(Token = "0x4000D04")]
			None,
			[Token(Token = "0x4000D05")]
			Fade
		}

		[Serializable]
		[Token(Token = "0x20001D5")]
		public class ToggleEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0xD9CE3C", Offset = "0xD9CE3C", VA = "0xD9CE3C")]
			public ToggleEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D6")]
		public class ToggleEventObject : UnityEvent<ExtensionsToggle>
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0xD9CE84", Offset = "0xD9CE84", VA = "0xD9CE84")]
			public ToggleEventObject()
			{
			}
		}

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string UniqueID;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public ToggleTransition toggleTransition;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Graphic graphic;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private ExtensionsToggleGroup m_Group;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ToggleEvent onValueChanged;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public ToggleEventObject onToggleChanged;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[FormerlySerializedAs("m_IsActive")]
		[SerializeField]
		private bool m_IsOn;

		[Token(Token = "0x1700014F")]
		public ExtensionsToggleGroup Group
		{
			[Token(Token = "0x6000A44")]
			[Address(RVA = "0xD9CAEC", Offset = "0xD9CAEC", VA = "0xD9CAEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xD9CAF4", Offset = "0xD9CAF4", VA = "0xD9CAF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public bool IsOn
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0xD9D420", Offset = "0xD9D420", VA = "0xD9D420")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xD9D428", Offset = "0xD9D428", VA = "0xD9D428")]
			set
			{
			}
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xD9CD68", Offset = "0xD9CD68", VA = "0xD9CD68")]
		protected ExtensionsToggle()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xD9CECC", Offset = "0xD9CECC", VA = "0xD9CECC", Slot = "46")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xD9CED0", Offset = "0xD9CED0", VA = "0xD9CED0", Slot = "47")]
		public virtual void LayoutComplete()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xD9CED4", Offset = "0xD9CED4", VA = "0xD9CED4", Slot = "48")]
		public virtual void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xD9CED8", Offset = "0xD9CED8", VA = "0xD9CED8", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xD9CF08", Offset = "0xD9CF08", VA = "0xD9CF08", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xD9CF2C", Offset = "0xD9CF2C", VA = "0xD9CF2C", Slot = "13")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xD9CB28", Offset = "0xD9CB28", VA = "0xD9CB28")]
		private void SetToggleGroup(ExtensionsToggleGroup newGroup, bool setMemberValue)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xD9D054", Offset = "0xD9D054", VA = "0xD9D054")]
		private void Set(bool value)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xD9D434", Offset = "0xD9D434", VA = "0xD9D434")]
		private void Set(bool value, bool sendCallback)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xD9CCA4", Offset = "0xD9CCA4", VA = "0xD9CCA4")]
		private void PlayEffect(bool instant)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xD9D6D8", Offset = "0xD9D6D8", VA = "0xD9D6D8", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xD9D6E0", Offset = "0xD9D6E0", VA = "0xD9D6E0")]
		private void InternalToggle()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xD9D734", Offset = "0xD9D734", VA = "0xD9D734", Slot = "49")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xD9D758", Offset = "0xD9D758", VA = "0xD9D758", Slot = "50")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[SpecialName]
		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xD9D75C", Offset = "0xD9D75C", VA = "0xD9D75C", Slot = "42")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20001D7")]
	[DisallowMultipleComponent]
	public class ExtensionsToggleGroup : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001D8")]
		public class ToggleGroupEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xD9D86C", Offset = "0xD9D86C", VA = "0xD9D86C")]
			public ToggleGroupEvent()
			{
			}
		}

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_AllowSwitchOff;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ExtensionsToggle> m_Toggles;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToggleGroupEvent onToggleGroupChanged;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToggleGroupEvent onToggleGroupToggleChanged;

		[Token(Token = "0x17000151")]
		public bool AllowSwitchOff
		{
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0xD9D764", Offset = "0xD9D764", VA = "0xD9D764")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0xD9D76C", Offset = "0xD9D76C", VA = "0xD9D76C")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public ExtensionsToggle SelectedToggle
		{
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0xD9D778", Offset = "0xD9D778", VA = "0xD9D778")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0xD9D780", Offset = "0xD9D780", VA = "0xD9D780")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xD9D788", Offset = "0xD9D788", VA = "0xD9D788")]
		protected ExtensionsToggleGroup()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xD9D8B4", Offset = "0xD9D8B4", VA = "0xD9D8B4")]
		private void ValidateToggleIsInGroup(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xD9D2C8", Offset = "0xD9D2C8", VA = "0xD9D2C8")]
		public void NotifyToggleOn(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xD9D060", Offset = "0xD9D060", VA = "0xD9D060")]
		public void UnregisterToggle(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xD9DA0C", Offset = "0xD9DA0C", VA = "0xD9DA0C")]
		private void NotifyToggleChanged(bool isOn)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xD9D168", Offset = "0xD9D168", VA = "0xD9D168")]
		public void RegisterToggle(ExtensionsToggle toggle)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xD9D594", Offset = "0xD9D594", VA = "0xD9D594")]
		public bool AnyTogglesOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xD9DA64", Offset = "0xD9DA64", VA = "0xD9DA64")]
		public IEnumerable<ExtensionsToggle> ActiveToggles()
		{
			return null;
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xD9DB68", Offset = "0xD9DB68", VA = "0xD9DB68")]
		public void SetAllTogglesOff()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xD9DC10", Offset = "0xD9DC10", VA = "0xD9DC10")]
		public void HasTheGroupToggle(bool value)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xD9DCCC", Offset = "0xD9DCCC", VA = "0xD9DCCC")]
		public void HasAToggleFlipped(bool value)
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[RequireComponent(typeof(InputField))]
	public class ReturnKeyTriggersButton : MonoBehaviour, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EventSystem _system;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool highlight;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float highlightDuration;

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xD9DE30", Offset = "0xD9DE30", VA = "0xD9DE30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xD9DE94", Offset = "0xD9DE94", VA = "0xD9DE94")]
		private void RemoveHighlight()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xD9DF10", Offset = "0xD9DF10", VA = "0xD9DF10", Slot = "4")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xD9E018", Offset = "0xD9E018", VA = "0xD9E018")]
		public ReturnKeyTriggersButton()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions
{
	[Token(Token = "0x20001DB")]
	[RequireComponent(typeof(VerticalLayoutGroup), typeof(ContentSizeFitter), typeof(ToggleGroup))]
	public class Accordion : MonoBehaviour
	{
		[Token(Token = "0x20001DC")]
		public enum Transition
		{
			[Token(Token = "0x4000D15")]
			Instant,
			[Token(Token = "0x4000D16")]
			Tween
		}

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transition m_Transition;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_TransitionDuration;

		[Token(Token = "0x17000153")]
		public Transition transition
		{
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0xD9E034", Offset = "0xD9E034", VA = "0xD9E034")]
			get
			{
				return default(Transition);
			}
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0xD9E03C", Offset = "0xD9E03C", VA = "0xD9E03C")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public float transitionDuration
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0xD9E044", Offset = "0xD9E044", VA = "0xD9E044")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0xD9E04C", Offset = "0xD9E04C", VA = "0xD9E04C")]
			set
			{
			}
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xD9E054", Offset = "0xD9E054", VA = "0xD9E054")]
		public Accordion()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[RequireComponent(typeof(RectTransform), typeof(LayoutElement))]
	public class AccordionElement : Toggle
	{
		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private float m_MinHeight;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Accordion m_Accordion;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private RectTransform m_RectTransform;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private LayoutElement m_LayoutElement;

		[NonSerialized]
		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly TweenRunner<FloatTween> m_FloatTweenRunner;

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xD9E068", Offset = "0xD9E068", VA = "0xD9E068")]
		protected AccordionElement()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xD9E124", Offset = "0xD9E124", VA = "0xD9E124", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xD9E2BC", Offset = "0xD9E2BC", VA = "0xD9E2BC")]
		public void OnValueChanged(bool state)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xD9E40C", Offset = "0xD9E40C", VA = "0xD9E40C")]
		protected float GetExpandedHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xD9E4F0", Offset = "0xD9E4F0", VA = "0xD9E4F0")]
		protected void StartTween(float startFloat, float targetFloat)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xD9E640", Offset = "0xD9E640", VA = "0xD9E640")]
		protected void SetHeight(float height)
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[RequireComponent(typeof(RectTransform))]
	public class BoxSlider : Selectable, IDragHandler, IEventSystemHandler, IInitializePotentialDragHandler, ICanvasElement
	{
		[Serializable]
		[Token(Token = "0x20001DF")]
		public class BoxSliderEvent : UnityEvent<float, float>
		{
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0xD9F01C", Offset = "0xD9F01C", VA = "0xD9F01C")]
			public BoxSliderEvent()
			{
			}
		}

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private RectTransform m_HandleRect;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private float m_MinValue;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private float m_MaxValue;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private bool m_WholeNumbers;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private float m_ValueX;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float m_ValueY;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private BoxSliderEvent m_OnValueChanged;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform m_HandleTransform;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private RectTransform m_HandleContainerRect;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector2 m_Offset;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x17000155")]
		public RectTransform HandleRect
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xD9E6E0", Offset = "0xD9E6E0", VA = "0xD9E6E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xD9E6E8", Offset = "0xD9E6E8", VA = "0xD9E6E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public float MinValue
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xD9E9B4", Offset = "0xD9E9B4", VA = "0xD9E9B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xD9E9BC", Offset = "0xD9E9BC", VA = "0xD9E9BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public float MaxValue
		{
			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xD9EA60", Offset = "0xD9EA60", VA = "0xD9EA60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xD9EA68", Offset = "0xD9EA68", VA = "0xD9EA68")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public bool WholeNumbers
		{
			[Token(Token = "0x6000A83")]
			[Address(RVA = "0xD9EAFC", Offset = "0xD9EAFC", VA = "0xD9EAFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xD9EB04", Offset = "0xD9EB04", VA = "0xD9EB04")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public float ValueX
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xD9EB98", Offset = "0xD9EB98", VA = "0xD9EB98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xD9EC38", Offset = "0xD9EC38", VA = "0xD9EC38")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public float NormalizedValueX
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xD9EC40", Offset = "0xD9EC40", VA = "0xD9EC40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xD9ED18", Offset = "0xD9ED18", VA = "0xD9ED18")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public float ValueY
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0xD9ED48", Offset = "0xD9ED48", VA = "0xD9ED48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0xD9EDE8", Offset = "0xD9EDE8", VA = "0xD9EDE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public float NormalizedValueY
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xD9EDF0", Offset = "0xD9EDF0", VA = "0xD9EDF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xD9EEC8", Offset = "0xD9EEC8", VA = "0xD9EEC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public BoxSliderEvent OnValueChanged
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xD9EEF8", Offset = "0xD9EEF8", VA = "0xD9EEF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0xD9EF00", Offset = "0xD9EF00", VA = "0xD9EF00")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		private float StepSize
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xD9EF10", Offset = "0xD9EF10", VA = "0xD9EF10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xD9EF3C", Offset = "0xD9EF3C", VA = "0xD9EF3C")]
		protected BoxSlider()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xD9F064", Offset = "0xD9F064", VA = "0xD9F064", Slot = "46")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xD9F068", Offset = "0xD9F068", VA = "0xD9F068", Slot = "43")]
		public void LayoutComplete()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xD9F06C", Offset = "0xD9F06C", VA = "0xD9F06C", Slot = "44")]
		public void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6000A94")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xD9F070", Offset = "0xD9F070", VA = "0xD9F070", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xD9F318", Offset = "0xD9F318", VA = "0xD9F318", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xD9E764", Offset = "0xD9E764", VA = "0xD9E764")]
		private void UpdateCachedReferences()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xD9EA50", Offset = "0xD9EA50", VA = "0xD9EA50")]
		private void SetX(float input)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xD9F0B4", Offset = "0xD9F0B4", VA = "0xD9F0B4")]
		private void SetX(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xD9EA58", Offset = "0xD9EA58", VA = "0xD9EA58")]
		private void SetY(float input)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xD9F1E8", Offset = "0xD9F1E8", VA = "0xD9F1E8")]
		private void SetY(float input, bool sendCallback)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xD9F33C", Offset = "0xD9F33C", VA = "0xD9F33C", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xD9E884", Offset = "0xD9E884", VA = "0xD9E884")]
		private void UpdateVisuals()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xD9F358", Offset = "0xD9F358", VA = "0xD9F358")]
		private void UpdateDrag(PointerEventData eventData, Camera cam)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xD9F564", Offset = "0xD9F564", VA = "0xD9F564")]
		private bool CanDrag(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xD9F5C8", Offset = "0xD9F5C8", VA = "0xD9F5C8", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xD9F7A4", Offset = "0xD9F7A4", VA = "0xD9F7A4", Slot = "47")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xD9F7F4", Offset = "0xD9F7F4", VA = "0xD9F7F4", Slot = "48")]
		public virtual void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[SpecialName]
		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xD9F80C", Offset = "0xD9F80C", VA = "0xD9F80C", Slot = "42")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E0")]
	public class TiltWindow : MonoBehaviour
	{
		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 range;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform mTrans;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion mStart;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mRot;

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xD9F814", Offset = "0xD9F814", VA = "0xD9F814")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xD9F864", Offset = "0xD9F864", VA = "0xD9F864")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xD9F9D8", Offset = "0xD9F9D8", VA = "0xD9F9D8")]
		public TiltWindow()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public enum AutoCompleteSearchType
	{
		[Token(Token = "0x4000D2C")]
		ArraySort,
		[Token(Token = "0x4000D2D")]
		Linq
	}
	[Token(Token = "0x20001E2")]
	[RequireComponent(typeof(RectTransform))]
	public class AutoCompleteComboBox : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E3")]
		public class SelectionChangedEvent : UnityEvent<string, bool>
		{
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0xDA1644", Offset = "0xDA1644", VA = "0xDA1644")]
			public SelectionChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E4")]
		public class SelectionTextChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0xDA168C", Offset = "0xDA168C", VA = "0xDA168C")]
			public SelectionTextChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E5")]
		public class SelectionValidityChangedEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0xDA16D4", Offset = "0xDA16D4", VA = "0xDA16D4")]
			public SelectionValidityChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<string> AvailableOptions;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _isPanelActive;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputField _mainInput;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _inputRT;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _overlayRT;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Canvas _canvas;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _canvasRT;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<string> _panelItems;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<string> _prunedPanelItems;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, GameObject> panelObjects;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject itemTemplate;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool SelectFirstItemOnStart;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		private bool _ChangeInputTextColorBasedOnMatchingItems;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Color ValidSelectionTextColor;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Color MatchingItemsRemainingTextColor;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Color NoItemsRemainingTextColor;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public AutoCompleteSearchType autocompleteSearchType;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _selectionIsValid;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public SelectionTextChangedEvent OnSelectionTextChanged;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SelectionValidityChangedEvent OnSelectionValidityChanged;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x1700015F")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xD9FA3C", Offset = "0xD9FA3C", VA = "0xD9FA3C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xD9FA44", Offset = "0xD9FA44", VA = "0xD9FA44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public string Text
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xD9FA4C", Offset = "0xD9FA4C", VA = "0xD9FA4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xD9FA54", Offset = "0xD9FA54", VA = "0xD9FA54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xD9FA5C", Offset = "0xD9FA5C", VA = "0xD9FA5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xD9FA64", Offset = "0xD9FA64", VA = "0xD9FA64")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xD9FE24", Offset = "0xD9FE24", VA = "0xD9FE24")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xD9FE2C", Offset = "0xD9FE2C", VA = "0xD9FE2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public bool InputColorMatching
		{
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0xD9FE34", Offset = "0xD9FE34", VA = "0xD9FE34")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0xD9FE3C", Offset = "0xD9FE3C", VA = "0xD9FE3C")]
			set
			{
			}
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xD9FF14", Offset = "0xD9FF14", VA = "0xD9FF14")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xDA0528", Offset = "0xDA0528", VA = "0xDA0528")]
		public void Start()
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xD9FF18", Offset = "0xD9FF18", VA = "0xD9FF18")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xDA0674", Offset = "0xDA0674", VA = "0xDA0674")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xDA062C", Offset = "0xDA062C", VA = "0xDA062C")]
		private void OnItemClicked(string item)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xD9FA6C", Offset = "0xD9FA6C", VA = "0xD9FA6C")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xDA0DF8", Offset = "0xDA0DF8", VA = "0xDA0DF8")]
		public void OnValueChanged(string currText)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xD9FE50", Offset = "0xD9FE50", VA = "0xD9FE50")]
		private void SetInputTextColor()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xDA05C8", Offset = "0xDA05C8", VA = "0xDA05C8")]
		public void ToggleDropdownPanel(bool directClick)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xDA0F78", Offset = "0xDA0F78", VA = "0xDA0F78")]
		private void PruneItems(string currText)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xDA0F8C", Offset = "0xDA0F8C", VA = "0xDA0F8C")]
		private void PruneItemsLinq(string currText)
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xDA131C", Offset = "0xDA131C", VA = "0xDA131C")]
		private void PruneItemsArray(string currText)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xDA1608", Offset = "0xDA1608", VA = "0xDA1608")]
		public AutoCompleteComboBox()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	[RequireComponent(typeof(RectTransform))]
	public class ComboBox : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E9")]
		public class SelectionChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xDA2A34", Offset = "0xDA2A34", VA = "0xDA2A34")]
			public SelectionChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<string> AvailableOptions;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _isPanelActive;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InputField _mainInput;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _inputRT;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _overlayRT;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Canvas _canvas;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RectTransform _canvasRT;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<string> _panelItems;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Dictionary<string, GameObject> panelObjects;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject itemTemplate;

		[Token(Token = "0x17000164")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0xDA1790", Offset = "0xDA1790", VA = "0xDA1790")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xDA1798", Offset = "0xDA1798", VA = "0xDA1798")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public string Text
		{
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0xDA17A0", Offset = "0xDA17A0", VA = "0xDA17A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xDA17A8", Offset = "0xDA17A8", VA = "0xDA17A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xDA17B0", Offset = "0xDA17B0", VA = "0xDA17B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0xDA17B8", Offset = "0xDA17B8", VA = "0xDA17B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xDA1B78", Offset = "0xDA1B78", VA = "0xDA1B78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xDA1B80", Offset = "0xDA1B80", VA = "0xDA1B80")]
			set
			{
			}
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xDA1B88", Offset = "0xDA1B88", VA = "0xDA1B88")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xDA1B8C", Offset = "0xDA1B8C", VA = "0xDA1B8C")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xDA2154", Offset = "0xDA2154", VA = "0xDA2154")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xDA28C8", Offset = "0xDA28C8", VA = "0xDA28C8")]
		private void OnItemClicked(string item)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xDA17C0", Offset = "0xDA17C0", VA = "0xDA17C0")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xDA2974", Offset = "0xDA2974", VA = "0xDA2974")]
		public void OnValueChanged(string currText)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xDA2910", Offset = "0xDA2910", VA = "0xDA2910")]
		public void ToggleDropdownPanel(bool directClick)
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xDA2A24", Offset = "0xDA2A24", VA = "0xDA2A24")]
		public ComboBox()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[RequireComponent(typeof(RectTransform))]
	public class DropDownList : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001EC")]
		public class SelectionChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xDA3F48", Offset = "0xDA3F48", VA = "0xDA3F48")]
			public SelectionChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color disabledTextColor;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<DropDownListItem> Items;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OverrideHighlighted;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _isPanelActive;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _hasDrawnOnce;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DropDownListButton _mainButton;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _overlayRT;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _scrollPanelRT;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _scrollBarRT;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _slidingAreaRT;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _itemsPanelRT;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Canvas _canvas;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _canvasRT;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<DropDownListButton> _panelItems;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject _itemTemplate;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float _scrollBarWidth;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int _selectedIndex;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private int _itemsToDisplay;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool SelectFirstItemOnStart;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SelectionChangedEvent OnSelectionChanged;

		[Token(Token = "0x17000168")]
		public DropDownListItem SelectedItem
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xDA2A9C", Offset = "0xDA2A9C", VA = "0xDA2A9C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xDA2AA4", Offset = "0xDA2AA4", VA = "0xDA2AA4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public float ScrollBarWidth
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xDA2AAC", Offset = "0xDA2AAC", VA = "0xDA2AAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xDA2AB4", Offset = "0xDA2AB4", VA = "0xDA2AB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public int ItemsToDisplay
		{
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xDA2E84", Offset = "0xDA2E84", VA = "0xDA2E84")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xDA2E8C", Offset = "0xDA2E8C", VA = "0xDA2E8C")]
			set
			{
			}
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xDA2E94", Offset = "0xDA2E94", VA = "0xDA2E94")]
		public void Start()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xDA2F14", Offset = "0xDA2F14", VA = "0xDA2F14")]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xDA3778", Offset = "0xDA3778", VA = "0xDA3778")]
		private void RebuildPanel()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xDA3560", Offset = "0xDA3560", VA = "0xDA3560")]
		private void OnItemClicked(int indx)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xDA3D18", Offset = "0xDA3D18", VA = "0xDA3D18")]
		private void UpdateSelected()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xDA2ABC", Offset = "0xDA2ABC", VA = "0xDA2ABC")]
		private void RedrawPanel()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xDA34AC", Offset = "0xDA34AC", VA = "0xDA34AC")]
		public void ToggleDropdownPanel(bool directClick)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xDA3F2C", Offset = "0xDA3F2C", VA = "0xDA3F2C")]
		public DropDownList()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[RequireComponent(typeof(RectTransform), typeof(Button))]
	public class DropDownListButton
	{
		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RectTransform rectTransform;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button btn;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text txt;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image btnImg;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image img;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject gameobject;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xDA35D8", Offset = "0xDA35D8", VA = "0xDA35D8")]
		public DropDownListButton(GameObject btnObj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EF")]
	public class DropDownListItem
	{
		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string _caption;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Sprite _image;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _isDisabled;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _id;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action OnSelect;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Action OnUpdate;

		[Token(Token = "0x1700016B")]
		public string Caption
		{
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xDA3FD8", Offset = "0xDA3FD8", VA = "0xDA3FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		public Sprite Image
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0xDA3FE0", Offset = "0xDA3FE0", VA = "0xDA3FE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public bool IsDisabled
		{
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0xDA3FE8", Offset = "0xDA3FE8", VA = "0xDA3FE8")]
			get
			{
				return default(bool);
			}
		}
	}
	[Token(Token = "0x20001F0")]
	public class CooldownButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
	{
		[Serializable]
		[Token(Token = "0x20001F1")]
		public class CooldownButtonEvent : UnityEvent<PointerEventData.InputButton>
		{
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xDA4260", Offset = "0xDA4260", VA = "0xDA4260")]
			public CooldownButtonEvent()
			{
			}
		}

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float cooldownTimeout;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float cooldownSpeed;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool cooldownActive;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool cooldownInEffect;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float cooldownTimeElapsed;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float cooldownTimeRemaining;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int cooldownPercentRemaining;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int cooldownPercentComplete;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PointerEventData buttonSource;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CooldownButtonEvent OnCooldownStart;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CooldownButtonEvent OnButtonClickDuringCooldown;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CooldownButtonEvent OnCoolDownFinish;

		[Token(Token = "0x1700016E")]
		public float CooldownTimeout
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0xDA3FF0", Offset = "0xDA3FF0", VA = "0xDA3FF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0xDA3FF8", Offset = "0xDA3FF8", VA = "0xDA3FF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public float CooldownSpeed
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0xDA4000", Offset = "0xDA4000", VA = "0xDA4000")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0xDA4008", Offset = "0xDA4008", VA = "0xDA4008")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public bool CooldownInEffect
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0xDA4010", Offset = "0xDA4010", VA = "0xDA4010")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000171")]
		public bool CooldownActive
		{
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0xDA4018", Offset = "0xDA4018", VA = "0xDA4018")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0xDA4020", Offset = "0xDA4020", VA = "0xDA4020")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public float CooldownTimeElapsed
		{
			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0xDA402C", Offset = "0xDA402C", VA = "0xDA402C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xDA4034", Offset = "0xDA4034", VA = "0xDA4034")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public float CooldownTimeRemaining
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0xDA403C", Offset = "0xDA403C", VA = "0xDA403C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000174")]
		public int CooldownPercentRemaining
		{
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0xDA4044", Offset = "0xDA4044", VA = "0xDA4044")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000175")]
		public int CooldownPercentComplete
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0xDA404C", Offset = "0xDA404C", VA = "0xDA404C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xDA4054", Offset = "0xDA4054", VA = "0xDA4054")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xDA4170", Offset = "0xDA4170", VA = "0xDA4170")]
		public void PauseCooldown()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xDA4180", Offset = "0xDA4180", VA = "0xDA4180")]
		public void RestartCooldown()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xDA40F0", Offset = "0xDA40F0", VA = "0xDA40F0")]
		public void StopCooldown()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xDA4194", Offset = "0xDA4194", VA = "0xDA4194")]
		public void CancelCooldown()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xDA419C", Offset = "0xDA419C", VA = "0xDA419C", Slot = "4")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xDA4250", Offset = "0xDA4250", VA = "0xDA4250")]
		public CooldownButton()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[RequireComponent(typeof(InputField))]
	public class InputFocus : MonoBehaviour
	{
		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected InputField _inputField;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _ignoreNextActivation;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xDA42A8", Offset = "0xDA42A8", VA = "0xDA42A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xDA4300", Offset = "0xDA4300", VA = "0xDA4300")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xDA4364", Offset = "0xDA4364", VA = "0xDA4364")]
		public void buttonPressed()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xDA4410", Offset = "0xDA4410", VA = "0xDA4410")]
		public void OnEndEdit(string textString)
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xDA44A4", Offset = "0xDA44A4", VA = "0xDA44A4")]
		public InputFocus()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class MultiTouchScrollRect : ScrollRect
	{
		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int pid;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xDA44AC", Offset = "0xDA44AC", VA = "0xDA44AC", Slot = "44")]
		public override void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xDA44CC", Offset = "0xDA44CC", VA = "0xDA44CC", Slot = "46")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xDA44FC", Offset = "0xDA44FC", VA = "0xDA44FC", Slot = "45")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xDA450C", Offset = "0xDA450C", VA = "0xDA450C")]
		public MultiTouchScrollRect()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[RequireComponent(typeof(Image))]
	public class RadialSlider : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Serializable]
		[Token(Token = "0x20001F5")]
		public class RadialSliderValueChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xDA4D7C", Offset = "0xDA4D7C", VA = "0xDA4D7C")]
			public RadialSliderValueChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001F6")]
		public class RadialSliderTextValueChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xDA4DC4", Offset = "0xDA4DC4", VA = "0xDA4DC4")]
			public RadialSliderTextValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isPointerDown;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isPointerReleased;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool lerpInProgress;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 m_localPos;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_targetAngle;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_lerpTargetAngle;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_startAngle;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_currentLerpTime;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_lerpTime;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Camera m_eventCamera;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Image m_image;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Color m_startColor;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color m_endColor;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool m_lerpToTarget;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AnimationCurve m_lerpCurve;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private RadialSliderValueChangedEvent _onValueChanged;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private RadialSliderTextValueChangedEvent _onTextValueChanged;

		[Token(Token = "0x17000176")]
		public float Angle
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0xDA451C", Offset = "0xDA451C", VA = "0xDA451C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xDA4640", Offset = "0xDA4640", VA = "0xDA4640")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public float Value
		{
			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0xDA4720", Offset = "0xDA4720", VA = "0xDA4720")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B10")]
			[Address(RVA = "0xDA473C", Offset = "0xDA473C", VA = "0xDA473C")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public Color EndColor
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xDA474C", Offset = "0xDA474C", VA = "0xDA474C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0xDA4758", Offset = "0xDA4758", VA = "0xDA4758")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public Color StartColor
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xDA4764", Offset = "0xDA4764", VA = "0xDA4764")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xDA4770", Offset = "0xDA4770", VA = "0xDA4770")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public bool LerpToTarget
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xDA477C", Offset = "0xDA477C", VA = "0xDA477C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xDA4784", Offset = "0xDA4784", VA = "0xDA4784")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public AnimationCurve LerpCurve
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xDA4790", Offset = "0xDA4790", VA = "0xDA4790")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xDA4798", Offset = "0xDA4798", VA = "0xDA4798")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public bool LerpInProgress
		{
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0xDA4820", Offset = "0xDA4820", VA = "0xDA4820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017D")]
		public Image RadialImage
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0xDA4544", Offset = "0xDA4544", VA = "0xDA4544")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		public RadialSliderValueChangedEvent onValueChanged
		{
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0xDA4828", Offset = "0xDA4828", VA = "0xDA4828")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0xDA4830", Offset = "0xDA4830", VA = "0xDA4830")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public RadialSliderTextValueChangedEvent onTextValueChanged
		{
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0xDA4838", Offset = "0xDA4838", VA = "0xDA4838")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0xDA4840", Offset = "0xDA4840", VA = "0xDA4840")]
			set
			{
			}
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xDA4848", Offset = "0xDA4848", VA = "0xDA4848")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xDA48E8", Offset = "0xDA48E8", VA = "0xDA48E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xDA465C", Offset = "0xDA465C", VA = "0xDA465C")]
		private void StartLerp(float targetAngle)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xDA4A64", Offset = "0xDA4A64", VA = "0xDA4A64")]
		private float GetAngleFromMousePoint()
		{
			return default(float);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xDA46A0", Offset = "0xDA46A0", VA = "0xDA46A0")]
		private void UpdateRadialImage(float targetAngle)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xDA4B6C", Offset = "0xDA4B6C", VA = "0xDA4B6C")]
		private void NotifyValueChanged()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xDA4C44", Offset = "0xDA4C44", VA = "0xDA4C44", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xDA4C74", Offset = "0xDA4C74", VA = "0xDA4C74", Slot = "5")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xDA4CB0", Offset = "0xDA4CB0", VA = "0xDA4CB0", Slot = "6")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xDA4CBC", Offset = "0xDA4CBC", VA = "0xDA4CBC")]
		public RadialSlider()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(RectTransform))]
	public class ReorderableList : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F8")]
		public struct ReorderableListEventStruct
		{
			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject DroppedObject;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int FromIndex;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReorderableList FromList;

			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsAClone;

			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject SourceObject;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int ToIndex;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ReorderableList ToList;
		}

		[Serializable]
		[Token(Token = "0x20001F9")]
		public class ReorderableListHandler : UnityEvent<ReorderableListEventStruct>
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xDA5528", Offset = "0xDA5528", VA = "0xDA5528")]
			public ReorderableListHandler()
			{
			}
		}

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayoutGroup ContentLayout;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform DraggableArea;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsDraggable;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool CloneDraggedObject;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool IsDropable;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ReorderableListHandler OnElementDropped;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ReorderableListHandler OnElementGrabbed;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ReorderableListHandler OnElementRemoved;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ReorderableListHandler OnElementAdded;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform _content;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ReorderableListContent _listContent;

		[Token(Token = "0x17000180")]
		public RectTransform Content
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xDA4E0C", Offset = "0xDA4E0C", VA = "0xDA4E0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xDA4EBC", Offset = "0xDA4EBC", VA = "0xDA4EBC")]
		private Canvas GetCanvas()
		{
			return null;
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xDA4FC4", Offset = "0xDA4FC4", VA = "0xDA4FC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xDA5378", Offset = "0xDA5378", VA = "0xDA5378")]
		public void TestReOrderableListTarget(ReorderableListEventStruct item)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xDA5440", Offset = "0xDA5440", VA = "0xDA5440")]
		public ReorderableList()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class ReorderableListContent : MonoBehaviour
	{
		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Transform> _cachedChildren;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ReorderableListElement> _cachedListElement;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ReorderableListElement _ele;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ReorderableList _extList;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform _rect;

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xDA5570", Offset = "0xDA5570", VA = "0xDA5570")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xDA5668", Offset = "0xDA5668", VA = "0xDA5668")]
		public void OnTransformChildrenChanged()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xDA5248", Offset = "0xDA5248", VA = "0xDA5248")]
		public void Init(ReorderableList extList)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xDA55F4", Offset = "0xDA55F4", VA = "0xDA55F4")]
		private IEnumerator RefreshChildren()
		{
			return null;
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xDA56C8", Offset = "0xDA56C8", VA = "0xDA56C8")]
		public ReorderableListContent()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class ReorderableListDebug : MonoBehaviour
	{
		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text DebugLabel;

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xDA5B60", Offset = "0xDA5B60", VA = "0xDA5B60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xDA5C9C", Offset = "0xDA5C9C", VA = "0xDA5C9C")]
		private void ElementDropped(ReorderableList.ReorderableListEventStruct droppedStruct)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xDA5FE8", Offset = "0xDA5FE8", VA = "0xDA5FE8")]
		public ReorderableListDebug()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[RequireComponent(typeof(RectTransform))]
	public class ReorderableListElement : MonoBehaviour, IDragHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler
	{
		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsGrabbable;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsTransferable;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isDroppableInSpace;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<RaycastResult> _raycastResults;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ReorderableList _currentReorderableListRaycasted;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform _draggingObject;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LayoutElement _draggingObjectLE;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 _draggingObjectOriginalSize;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform _fakeElement;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LayoutElement _fakeElementLE;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _fromIndex;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool _isDragging;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _rect;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ReorderableList _reorderableList;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal bool isValid;

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xDA5FF0", Offset = "0xDA5FF0", VA = "0xDA5FF0", Slot = "5")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xDA6958", Offset = "0xDA6958", VA = "0xDA6958", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xDA6E68", Offset = "0xDA6E68", VA = "0xDA6E68", Slot = "6")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xDA6658", Offset = "0xDA6658", VA = "0xDA6658")]
		private void CancelDrag()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xDA6488", Offset = "0xDA6488", VA = "0xDA6488")]
		private void RefreshSizes()
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xDA5A9C", Offset = "0xDA5A9C", VA = "0xDA5A9C")]
		public void Init(ReorderableList reorderableList)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xDA732C", Offset = "0xDA732C", VA = "0xDA732C")]
		public ReorderableListElement()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class RescaleDragPanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 pointerOffset;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform canvasRectTransform;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform panelRectTransform;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform goTransform;

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xDA73BC", Offset = "0xDA73BC", VA = "0xDA73BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xDA7544", Offset = "0xDA7544", VA = "0xDA7544", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xDA75F8", Offset = "0xDA75F8", VA = "0xDA75F8", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xDA7760", Offset = "0xDA7760", VA = "0xDA7760")]
		private Vector2 ClampToWindow(PointerEventData data)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xDA7824", Offset = "0xDA7824", VA = "0xDA7824")]
		public RescaleDragPanel()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class RescalePanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 minSize;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 maxSize;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectTransform;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform goTransform;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 currentPointerPosition;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 previousPointerPosition;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RectTransform thisRectTransform;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 sizeDelta;

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xDA782C", Offset = "0xDA782C", VA = "0xDA782C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xDA7900", Offset = "0xDA7900", VA = "0xDA7900", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xDA79B4", Offset = "0xDA79B4", VA = "0xDA79B4", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xDA7B58", Offset = "0xDA7B58", VA = "0xDA7B58")]
		public RescalePanel()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class ResizePanel : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IDragHandler
	{
		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 minSize;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 maxSize;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectTransform;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 currentPointerPosition;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 previousPointerPosition;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float ratio;

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xB08384", Offset = "0xB08384", VA = "0xB08384")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xB0848C", Offset = "0xB0848C", VA = "0xB0848C", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xB08540", Offset = "0xB08540", VA = "0xB08540", Slot = "5")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xB086A0", Offset = "0xB086A0", VA = "0xB086A0")]
		public ResizePanel()
		{
		}
	}
	[Token(Token = "0x2000201")]
	[RequireComponent(typeof(RectTransform))]
	public class SegmentedControl : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000202")]
		public class SegmentSelectedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0xB091BC", Offset = "0xB091BC", VA = "0xB091BC")]
			public SegmentSelectedEvent()
			{
			}
		}

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Selectable[] m_segments;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Graphic m_separator;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_separatorWidth;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private bool m_allowSwitchingOff;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int m_selectedSegmentIndex;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SegmentSelectedEvent m_onValueChanged;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected internal Selectable selectedSegment;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public Color selectedColor;

		[Token(Token = "0x17000183")]
		protected float SeparatorWidth
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xB086A8", Offset = "0xB086A8", VA = "0xB086A8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000184")]
		public Selectable[] segments
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xB087D0", Offset = "0xB087D0", VA = "0xB087D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public Graphic separator
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xB089AC", Offset = "0xB089AC", VA = "0xB089AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xB089B4", Offset = "0xB089B4", VA = "0xB089B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public bool allowSwitchingOff
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xB08F58", Offset = "0xB08F58", VA = "0xB08F58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xB08F60", Offset = "0xB08F60", VA = "0xB08F60")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public int selectedSegmentIndex
		{
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xB08F6C", Offset = "0xB08F6C", VA = "0xB08F6C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xB08FBC", Offset = "0xB08FBC", VA = "0xB08FBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public SegmentSelectedEvent onValueChanged
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xB09134", Offset = "0xB09134", VA = "0xB09134")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0xB0913C", Offset = "0xB0913C", VA = "0xB0913C")]
			set
			{
			}
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xB09144", Offset = "0xB09144", VA = "0xB09144")]
		protected SegmentedControl()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xB09204", Offset = "0xB09204", VA = "0xB09204", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xB08818", Offset = "0xB08818", VA = "0xB08818")]
		private Selectable[] GetChildSegments()
		{
			return null;
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xB0923C", Offset = "0xB0923C", VA = "0xB0923C")]
		public void SetAllSegmentsOff()
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xB09248", Offset = "0xB09248", VA = "0xB09248")]
		private void RecreateSprites()
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xB089D4", Offset = "0xB089D4", VA = "0xB089D4")]
		public void LayoutSegments()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[RequireComponent(typeof(Selectable))]
	public class Segment : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int index;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Color textColor;

		[Token(Token = "0x17000189")]
		internal bool leftmost
		{
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0xB094DC", Offset = "0xB094DC", VA = "0xB094DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		internal bool rightmost
		{
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0xB094EC", Offset = "0xB094EC", VA = "0xB094EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018B")]
		public bool selected
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0xB09568", Offset = "0xB09568", VA = "0xB09568")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0xB0912C", Offset = "0xB0912C", VA = "0xB0912C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		internal SegmentedControl segmentControl
		{
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0xB09520", Offset = "0xB09520", VA = "0xB09520")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		internal Selectable button
		{
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0xB095E8", Offset = "0xB095E8", VA = "0xB095E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xB09888", Offset = "0xB09888", VA = "0xB09888")]
		protected Segment()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xB09890", Offset = "0xB09890", VA = "0xB09890", Slot = "25")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xB098B8", Offset = "0xB098B8", VA = "0xB098B8", Slot = "26")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xB09958", Offset = "0xB09958", VA = "0xB09958", Slot = "27")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xB0995C", Offset = "0xB0995C", VA = "0xB0995C", Slot = "28")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xB09960", Offset = "0xB09960", VA = "0xB09960", Slot = "29")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xB09964", Offset = "0xB09964", VA = "0xB09964", Slot = "30")]
		public virtual void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xB09968", Offset = "0xB09968", VA = "0xB09968", Slot = "31")]
		public virtual void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xB0996C", Offset = "0xB0996C", VA = "0xB0996C", Slot = "32")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xB09630", Offset = "0xB09630", VA = "0xB09630")]
		private void SetSelected(bool value)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xB09974", Offset = "0xB09974", VA = "0xB09974")]
		private void Deselect()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xB098BC", Offset = "0xB098BC", VA = "0xB098BC")]
		private void MaintainSelection()
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xB099F8", Offset = "0xB099F8", VA = "0xB099F8")]
		internal void TransitionButton()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xB09AB4", Offset = "0xB09AB4", VA = "0xB09AB4")]
		internal void TransitionButton(bool instant)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xB09CDC", Offset = "0xB09CDC", VA = "0xB09CDC")]
		private void StartColorTween(Color targetColor, bool instant)
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xB09A00", Offset = "0xB09A00", VA = "0xB09A00")]
		internal void StoreTextColor()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xB09DE4", Offset = "0xB09DE4", VA = "0xB09DE4")]
		private void ChangeTextColor(Color targetColor)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xB09ED4", Offset = "0xB09ED4", VA = "0xB09ED4")]
		private void DoSpriteSwap(Sprite newSprite)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xB09F88", Offset = "0xB09F88", VA = "0xB09F88")]
		private void TriggerAnimation(string triggername)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class ExampleSelectable : MonoBehaviour, IBoxSelectable
	{
		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _selected;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _preSelected;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image image;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Text text;

		[Token(Token = "0x1700018E")]
		public bool selected
		{
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0xB0A194", Offset = "0xB0A194", VA = "0xB0A194", Slot = "4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0xB0A19C", Offset = "0xB0A19C", VA = "0xB0A19C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public bool preSelected
		{
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xB0A1A8", Offset = "0xB0A1A8", VA = "0xB0A1A8", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xB0A1B0", Offset = "0xB0A1B0", VA = "0xB0A1B0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xB0A1BC", Offset = "0xB0A1BC", VA = "0xB0A1BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xB0A29C", Offset = "0xB0A29C", VA = "0xB0A29C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xB0A4AC", Offset = "0xB0A4AC", VA = "0xB0A4AC")]
		public ExampleSelectable()
		{
		}

		[SpecialName]
		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xB0A4B4", Offset = "0xB0A4B4", VA = "0xB0A4B4", Slot = "8")]
		private Transform UnityEngine.UI.Extensions.IBoxSelectable.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x2000205")]
	public interface IBoxSelectable
	{
		[Token(Token = "0x17000190")]
		bool selected
		{
			[Token(Token = "0x6000B85")]
			get;
			[Token(Token = "0x6000B86")]
			set;
		}

		[Token(Token = "0x17000191")]
		bool preSelected
		{
			[Token(Token = "0x6000B87")]
			get;
			[Token(Token = "0x6000B88")]
			set;
		}

		[Token(Token = "0x17000192")]
		Transform transform
		{
			[Token(Token = "0x6000B89")]
			get;
		}
	}
	[Token(Token = "0x2000206")]
	[RequireComponent(typeof(Canvas))]
	public class SelectionBox : MonoBehaviour
	{
		[Token(Token = "0x2000207")]
		public class SelectionEvent : UnityEvent<IBoxSelectable[]>
		{
			[Token(Token = "0x6000B9B")]
			[Address(RVA = "0xB0C3AC", Offset = "0xB0C3AC", VA = "0xB0C3AC")]
			public SelectionEvent()
			{
			}
		}

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite art;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 origin;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RectTransform selectionMask;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform boxRect;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IBoxSelectable[] selectables;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MonoBehaviour[] selectableGroup;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IBoxSelectable clickedBeforeDrag;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IBoxSelectable clickedAfterDrag;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SelectionEvent onSelectionChange;

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xB0A4BC", Offset = "0xB0A4BC", VA = "0xB0A4BC")]
		private void ValidateCanvas()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xB0A6D8", Offset = "0xB0A6D8", VA = "0xB0A6D8")]
		private void SetSelectableGroup(IEnumerable<MonoBehaviour> behaviourCollection)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xB0AB00", Offset = "0xB0AB00", VA = "0xB0AB00")]
		private void CreateBoxRect()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xB0AC2C", Offset = "0xB0AC2C", VA = "0xB0AC2C")]
		private void ResetBoxRect()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xB0AE14", Offset = "0xB0AE14", VA = "0xB0AE14")]
		private void BeginSelection()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xB0B110", Offset = "0xB0B110", VA = "0xB0B110")]
		private bool PointIsValidAgainstSelectionMask(Vector2 screenPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xB0B1E4", Offset = "0xB0B1E4", VA = "0xB0B1E4")]
		private IBoxSelectable GetSelectableAtMousePosition()
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xB0B954", Offset = "0xB0B954", VA = "0xB0B954")]
		private void DragSelection()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xB0BBEC", Offset = "0xB0BBEC", VA = "0xB0BBEC")]
		private void ApplySingleClickDeselection()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xB0BE8C", Offset = "0xB0BE8C", VA = "0xB0BE8C")]
		private void ApplyPreSelections()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xB0B6F0", Offset = "0xB0B6F0", VA = "0xB0B6F0")]
		private Vector2 GetScreenPointOfSelectable(IBoxSelectable selectable)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xB0B55C", Offset = "0xB0B55C", VA = "0xB0B55C")]
		private Camera GetScreenPointCamera(RectTransform rectTransform)
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xB0C038", Offset = "0xB0C038", VA = "0xB0C038")]
		public IBoxSelectable[] GetAllSelected()
		{
			return null;
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xB0C230", Offset = "0xB0C230", VA = "0xB0C230")]
		private void EndSelection()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xB0C2FC", Offset = "0xB0C2FC", VA = "0xB0C2FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xB0C31C", Offset = "0xB0C31C", VA = "0xB0C31C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xB0C33C", Offset = "0xB0C33C", VA = "0xB0C33C")]
		public SelectionBox()
		{
		}
	}
	[Token(Token = "0x2000208")]
	[RequireComponent(typeof(RectTransform))]
	public class Stepper : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000209")]
		public class StepperValueChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0xB0CCF8", Offset = "0xB0CCF8", VA = "0xB0CCF8")]
			public StepperValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Selectable[] _sides;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int _value;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int _minimum;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int _maximum;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int _step;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _wrap;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Graphic _separator;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _separatorWidth;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private StepperValueChangedEvent _onValueChanged;

		[Token(Token = "0x17000193")]
		private float separatorWidth
		{
			[Token(Token = "0x6000B9C")]
			[Address(RVA = "0xB0C3F4", Offset = "0xB0C3F4", VA = "0xB0C3F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000194")]
		public Selectable[] sides
		{
			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0xB0C51C", Offset = "0xB0C51C", VA = "0xB0C51C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public int value
		{
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xB0C718", Offset = "0xB0C718", VA = "0xB0C718")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0xB0C720", Offset = "0xB0C720", VA = "0xB0C720")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public int minimum
		{
			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0xB0C728", Offset = "0xB0C728", VA = "0xB0C728")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0xB0C730", Offset = "0xB0C730", VA = "0xB0C730")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public int maximum
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xB0C738", Offset = "0xB0C738", VA = "0xB0C738")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xB0C740", Offset = "0xB0C740", VA = "0xB0C740")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public int step
		{
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xB0C748", Offset = "0xB0C748", VA = "0xB0C748")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xB0C750", Offset = "0xB0C750", VA = "0xB0C750")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public bool wrap
		{
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xB0C758", Offset = "0xB0C758", VA = "0xB0C758")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xB0C760", Offset = "0xB0C760", VA = "0xB0C760")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public Graphic separator
		{
			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0xB0C76C", Offset = "0xB0C76C", VA = "0xB0C76C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xB0C774", Offset = "0xB0C774", VA = "0xB0C774")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public StepperValueChangedEvent onValueChanged
		{
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0xB0CC6C", Offset = "0xB0CC6C", VA = "0xB0CC6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xB0CC74", Offset = "0xB0CC74", VA = "0xB0CC74")]
			set
			{
			}
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xB0CC7C", Offset = "0xB0CC7C", VA = "0xB0CC7C")]
		protected Stepper()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xB0C564", Offset = "0xB0C564", VA = "0xB0C564")]
		private Selectable[] GetSides()
		{
			return null;
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xB0CDD8", Offset = "0xB0CDD8", VA = "0xB0CDD8")]
		public void StepUp()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xB0CED8", Offset = "0xB0CED8", VA = "0xB0CED8")]
		public void StepDown()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xB0CDE0", Offset = "0xB0CDE0", VA = "0xB0CDE0")]
		private void Step(int amount)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xB0CD40", Offset = "0xB0CD40", VA = "0xB0CD40")]
		private void DisableAtExtremes(Selectable[] sides)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xB0CEE4", Offset = "0xB0CEE4", VA = "0xB0CEE4")]
		private void RecreateSprites(Selectable[] sides)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xB0C7A0", Offset = "0xB0C7A0", VA = "0xB0C7A0")]
		public void LayoutSides([Optional] Selectable[] sides)
		{
		}
	}
	[Token(Token = "0x200020A")]
	[RequireComponent(typeof(Selectable))]
	public class StepperSide : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler
	{
		[Token(Token = "0x1700019C")]
		private Selectable button
		{
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xB0D11C", Offset = "0xB0D11C", VA = "0xB0D11C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		private Stepper stepper
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0xB0D164", Offset = "0xB0D164", VA = "0xB0D164")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		private bool leftmost
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xB0D1AC", Offset = "0xB0D1AC", VA = "0xB0D1AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xB0D240", Offset = "0xB0D240", VA = "0xB0D240")]
		protected StepperSide()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xB0D248", Offset = "0xB0D248", VA = "0xB0D248", Slot = "19")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xB0D2F0", Offset = "0xB0D2F0", VA = "0xB0D2F0", Slot = "20")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xB0D26C", Offset = "0xB0D26C", VA = "0xB0D26C")]
		private void Press()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[ExecuteInEditMode]
	public class TextPic : Text, IPointerClickHandler, IEventSystemHandler, IPointerExitHandler, IPointerEnterHandler, ISelectHandler
	{
		[Serializable]
		[Token(Token = "0x200020C")]
		public struct IconName
		{
			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4000E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Sprite sprite;

			[Token(Token = "0x4000E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector2 offset;

			[Token(Token = "0x4000E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2 scale;
		}

		[Serializable]
		[Token(Token = "0x200020D")]
		public class HrefClickEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0xB10410", Offset = "0xB10410", VA = "0xB10410")]
			public HrefClickEvent()
			{
			}
		}

		[Token(Token = "0x200020E")]
		private class HrefInfo
		{
			[Token(Token = "0x4000E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int startIndex;

			[Token(Token = "0x4000E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int endIndex;

			[Token(Token = "0x4000E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public readonly List<Rect> boxes;

			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0xB0F5F4", Offset = "0xB0F5F4", VA = "0xB0F5F4")]
			public HrefInfo()
			{
			}
		}

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly List<Image> m_ImagesPool;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly List<GameObject> culled_ImagesPool;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool clearImages;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Object thisLock;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly List<int> m_ImagesVertexIndex;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Regex s_Regex;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private string fixedString;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private bool m_ClickParents;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private string m_OutputText;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public IconName[] inspectorIconList;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float ImageScalingFactor;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public string hyperlinkColor;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		public Vector2 imageOffset;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Button button;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Selectable highlightselectable;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private List<Vector2> positions;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private string previousText;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public bool isCreating_m_HrefInfos;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private readonly List<HrefInfo> m_HrefInfos;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly StringBuilder s_TextBuilder;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Regex s_HrefRegex;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private HrefClickEvent m_OnHrefClick;

		[Token(Token = "0x1700019F")]
		public bool AllowClickParents
		{
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xB0D2F4", Offset = "0xB0D2F4", VA = "0xB0D2F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xB0D2FC", Offset = "0xB0D2FC", VA = "0xB0D2FC")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public HrefClickEvent onHrefClick
		{
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xB0F5DC", Offset = "0xB0F5DC", VA = "0xB0F5DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xB0F5E4", Offset = "0xB0F5E4", VA = "0xB0F5E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xB0D308", Offset = "0xB0D308", VA = "0xB0D308", Slot = "28")]
		public override void SetVerticesDirty()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xB0E0E8", Offset = "0xB0E0E8", VA = "0xB0E0E8")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xB0D324", Offset = "0xB0D324", VA = "0xB0D324")]
		protected void UpdateQuadImage()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xB0EE7C", Offset = "0xB0EE7C", VA = "0xB0EE7C", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper toFill)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xB0E2FC", Offset = "0xB0E2FC", VA = "0xB0E2FC")]
		protected string GetOutputText()
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xB0F67C", Offset = "0xB0F67C", VA = "0xB0F67C", Slot = "81")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xB0F914", Offset = "0xB0F914", VA = "0xB0F914", Slot = "83")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xB0FB10", Offset = "0xB0FB10", VA = "0xB0FB10", Slot = "82")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xB0FD4C", Offset = "0xB0FD4C", VA = "0xB0FD4C", Slot = "84")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xB0FF48", Offset = "0xB0FF48", VA = "0xB0FF48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xB0E268", Offset = "0xB0E268", VA = "0xB0E268")]
		private void Reset_m_HrefInfos()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xB1013C", Offset = "0xB1013C", VA = "0xB1013C")]
		public TextPic()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[RequireComponent(typeof(Image))]
	public class UI_Knob : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, IBeginDragHandler, IDragHandler
	{
		[Token(Token = "0x2000211")]
		public enum Direction
		{
			[Token(Token = "0x4000E3F")]
			CW,
			[Token(Token = "0x4000E40")]
			CCW
		}

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Direction direction;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float knobValue;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxValue;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int loops;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool clampOutput01;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool snapToPosition;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int snapStepsPerLoop;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KnobFloatValueEvent OnValueChanged;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _currentLoops;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _previousValue;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initAngle;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _currentAngle;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 _currentVector;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _initRotation;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _canDrag;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xB1065C", Offset = "0xB1065C", VA = "0xB1065C", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xB10668", Offset = "0xB10668", VA = "0xB10668", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xB10670", Offset = "0xB10670", VA = "0xB10670", Slot = "6")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xB1067C", Offset = "0xB1067C", VA = "0xB1067C", Slot = "7")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xB10684", Offset = "0xB10684", VA = "0xB10684", Slot = "8")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xB10688", Offset = "0xB10688", VA = "0xB10688")]
		private void SetInitPointerData(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xB10714", Offset = "0xB10714", VA = "0xB10714", Slot = "9")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xB10B70", Offset = "0xB10B70", VA = "0xB10B70")]
		private void SnapToPosition(ref float knobValue)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xB10C2C", Offset = "0xB10C2C", VA = "0xB10C2C")]
		private void InvokeEvents(float value)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xB10CA0", Offset = "0xB10CA0", VA = "0xB10CA0")]
		public UI_Knob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000212")]
	public class KnobFloatValueEvent : UnityEvent<float>
	{
		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xB10CB8", Offset = "0xB10CB8", VA = "0xB10CB8")]
		public KnobFloatValueEvent()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class BestFitOutline : Shadow
	{
		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xB10D00", Offset = "0xB10D00", VA = "0xB10D00")]
		protected BestFitOutline()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xB10D08", Offset = "0xB10D08", VA = "0xB10D08", Slot = "19")]
		public override void ModifyMesh(Mesh mesh)
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class CUIBezierCurve : MonoBehaviour
	{
		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int CubicBezierCurvePtNum;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Vector3[] controlPoints;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnRefresh;

		[Token(Token = "0x170001A1")]
		public Vector3[] ControlPoints
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0xB11C2C", Offset = "0xB11C2C", VA = "0xB11C2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xB11C34", Offset = "0xB11C34", VA = "0xB11C34")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xB11C50", Offset = "0xB11C50", VA = "0xB11C50")]
		public Vector3 GetPoint(float _time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xB11D18", Offset = "0xB11D18", VA = "0xB11D18")]
		public Vector3 GetTangent(float _time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xB11DDC", Offset = "0xB11DDC", VA = "0xB11DDC")]
		public void ReportSet()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xB11F14", Offset = "0xB11F14", VA = "0xB11F14")]
		public CUIBezierCurve()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(Graphic))]
	public class CUIGraphic : BaseMeshEffect
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int bottomCurveIdx;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int topCurveIdx;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected bool isCurved;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		protected bool isLockWithRatio;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float resolution;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected RectTransform rectTrans;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Graphic uiGraphic;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected CUIGraphic refCUIGraphic;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected CUIBezierCurve[] refCurves;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected Vector3_Array2D[] refCurvesControlRatioPoints;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected List<UIVertex> reuse_quads;

		[Token(Token = "0x170001A2")]
		public bool IsCurved
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0xB11F68", Offset = "0xB11F68", VA = "0xB11F68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A3")]
		public bool IsLockWithRatio
		{
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0xB11F70", Offset = "0xB11F70", VA = "0xB11F70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A4")]
		public RectTransform RectTrans
		{
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0xB11F78", Offset = "0xB11F78", VA = "0xB11F78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A5")]
		public Graphic UIGraphic
		{
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0xB11F80", Offset = "0xB11F80", VA = "0xB11F80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A6")]
		public CUIGraphic RefCUIGraphic
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xB11F88", Offset = "0xB11F88", VA = "0xB11F88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A7")]
		public CUIBezierCurve[] RefCurves
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0xB11F90", Offset = "0xB11F90", VA = "0xB11F90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		public Vector3_Array2D[] RefCurvesControlRatioPoints
		{
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0xB11F98", Offset = "0xB11F98", VA = "0xB11F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xB11FA0", Offset = "0xB11FA0", VA = "0xB11FA0")]
		protected void solveDoubleEquationWithVector(float _x_1, float _y_1, float _x_2, float _y_2, Vector3 _constant_1, Vector3 _contant_2, out Vector3 _x, out Vector3 _y)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xB120BC", Offset = "0xB120BC", VA = "0xB120BC")]
		protected UIVertex uiVertexLerp(UIVertex _a, UIVertex _b, float _time)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xB12598", Offset = "0xB12598", VA = "0xB12598")]
		protected UIVertex uiVertexBerp(UIVertex v_bottomLeft, UIVertex v_topLeft, UIVertex v_topRight, UIVertex v_bottomRight, float _xTime, float _yTime)
		{
			return default(UIVertex);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xB126A4", Offset = "0xB126A4", VA = "0xB126A4")]
		protected void tessellateQuad(List<UIVertex> _quads, int _thisQuadIdx)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xB13104", Offset = "0xB13104", VA = "0xB13104")]
		protected void tessellateGraphic(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xB13984", Offset = "0xB13984", VA = "0xB13984", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xB13BB4", Offset = "0xB13BB4", VA = "0xB13BB4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xB13E90", Offset = "0xB13E90", VA = "0xB13E90", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xB13EB4", Offset = "0xB13EB4", VA = "0xB13EB4", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xB13ED8", Offset = "0xB13ED8", VA = "0xB13ED8", Slot = "21")]
		public virtual void ReportSet()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xB1440C", Offset = "0xB1440C", VA = "0xB1440C")]
		public void FixTextToRectTrans()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xB1465C", Offset = "0xB1465C", VA = "0xB1465C")]
		public void ReferenceCUIForBCurves()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xB14DB0", Offset = "0xB14DB0", VA = "0xB14DB0", Slot = "19")]
		public override void ModifyMesh(Mesh _mesh)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xB14F74", Offset = "0xB14F74", VA = "0xB14F74", Slot = "20")]
		public override void ModifyMesh(VertexHelper _vh)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xB1504C", Offset = "0xB1504C", VA = "0xB1504C", Slot = "22")]
		protected virtual void modifyVertices(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xB13994", Offset = "0xB13994", VA = "0xB13994")]
		public void UpdateCurveControlPointPositions()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xB14D0C", Offset = "0xB14D0C", VA = "0xB14D0C")]
		public Vector3 GetBCurveSandwichSpacePoint(float _xTime, float _yTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xB152D8", Offset = "0xB152D8", VA = "0xB152D8")]
		public Vector3 GetBCurveSandwichSpaceTangent(float _xTime, float _yTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xB1537C", Offset = "0xB1537C", VA = "0xB1537C")]
		public CUIGraphic()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[RequireComponent(typeof(Image))]
	[RequireComponent(typeof(RectTransform))]
	public class CUIImage : CUIGraphic
	{
		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int SlicedImageCornerRefVertexIdx;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int FilledImageCornerRefVertexIdx;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public Vector2 cornerPosRatio;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected Vector2 oriCornerPosRatio;

		[Token(Token = "0x170001A9")]
		public Vector2 OriCornerPosRatio
		{
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0xB154CC", Offset = "0xB154CC", VA = "0xB154CC")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170001AA")]
		public Image UIImage
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xB154D4", Offset = "0xB154D4", VA = "0xB154D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xB15464", Offset = "0xB15464", VA = "0xB15464")]
		public static int ImageTypeCornerRefVertexIdx(Image.Type _type)
		{
			return default(int);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xB1554C", Offset = "0xB1554C", VA = "0xB1554C", Slot = "21")]
		public override void ReportSet()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xB155F4", Offset = "0xB155F4", VA = "0xB155F4", Slot = "22")]
		protected override void modifyVertices(List<UIVertex> _verts)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xB15CCC", Offset = "0xB15CCC", VA = "0xB15CCC")]
		public CUIImage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000217")]
	public struct Vector3_Array2D
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public Vector3[] array;

		[Token(Token = "0x170001AB")]
		public Vector3 this[int _idx]
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0xB1529C", Offset = "0xB1529C", VA = "0xB1529C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xB13E54", Offset = "0xB13E54", VA = "0xB13E54")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000218")]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(Text))]
	public class CUIText : CUIGraphic
	{
		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xB15DBC", Offset = "0xB15DBC", VA = "0xB15DBC", Slot = "21")]
		public override void ReportSet()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xB15E64", Offset = "0xB15E64", VA = "0xB15E64")]
		public CUIText()
		{
		}
	}
	[Token(Token = "0x2000219")]
	[RequireComponent(typeof(Text), typeof(RectTransform))]
	public class CurvedText : BaseMeshEffect
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AnimationCurve _curveForText;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _curveMultiplier;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rectTrans;

		[Token(Token = "0x170001AC")]
		public AnimationCurve CurveForText
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0xB15EB8", Offset = "0xB15EB8", VA = "0xB15EB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xB15EC0", Offset = "0xB15EC0", VA = "0xB15EC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public float CurveMultiplier
		{
			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xB15EF8", Offset = "0xB15EF8", VA = "0xB15EF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xB15F00", Offset = "0xB15F00", VA = "0xB15F00")]
			set
			{
			}
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xB15F2C", Offset = "0xB15F2C", VA = "0xB15F2C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xB15FA0", Offset = "0xB15FA0", VA = "0xB15FA0", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xB16014", Offset = "0xB16014", VA = "0xB16014", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xB16184", Offset = "0xB16184", VA = "0xB16184", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xB162A4", Offset = "0xB162A4", VA = "0xB162A4")]
		public CurvedText()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[RequireComponent(typeof(Text), typeof(RectTransform))]
	public class CylinderText : BaseMeshEffect
	{
		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform rectTrans;

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xB162EC", Offset = "0xB162EC", VA = "0xB162EC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xB16360", Offset = "0xB16360", VA = "0xB16360", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xB163D4", Offset = "0xB163D4", VA = "0xB163D4", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xB16514", Offset = "0xB16514", VA = "0xB16514")]
		public CylinderText()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class Gradient : BaseMeshEffect
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GradientMode _gradientMode;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private GradientDir _gradientDir;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _overwriteAllColor;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Color _vertex1;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Color _vertex2;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Graphic targetGraphic;

		[Token(Token = "0x170001AE")]
		public GradientMode GradientMode
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xB1651C", Offset = "0xB1651C", VA = "0xB1651C")]
			get
			{
				return default(GradientMode);
			}
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0xB16524", Offset = "0xB16524", VA = "0xB16524")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public GradientDir GradientDir
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xB16550", Offset = "0xB16550", VA = "0xB16550")]
			get
			{
				return default(GradientDir);
			}
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xB16558", Offset = "0xB16558", VA = "0xB16558")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public bool OverwriteAllColor
		{
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xB16584", Offset = "0xB16584", VA = "0xB16584")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xB1658C", Offset = "0xB1658C", VA = "0xB1658C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public Color Vertex1
		{
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xB165BC", Offset = "0xB165BC", VA = "0xB165BC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xB165C8", Offset = "0xB165C8", VA = "0xB165C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public Color Vertex2
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xB165F8", Offset = "0xB165F8", VA = "0xB165F8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0xB16604", Offset = "0xB16604", VA = "0xB16604")]
			set
			{
			}
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xB16634", Offset = "0xB16634", VA = "0xB16634", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xB1668C", Offset = "0xB1668C", VA = "0xB1668C", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xB17378", Offset = "0xB17378", VA = "0xB17378")]
		private bool CompareCarefully(Color col1, Color col2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xB173C0", Offset = "0xB173C0", VA = "0xB173C0")]
		public Gradient()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public enum GradientMode
	{
		[Token(Token = "0x4000E60")]
		Global,
		[Token(Token = "0x4000E61")]
		Local
	}
	[Token(Token = "0x200021D")]
	public enum GradientDir
	{
		[Token(Token = "0x4000E63")]
		Vertical,
		[Token(Token = "0x4000E64")]
		Horizontal,
		[Token(Token = "0x4000E65")]
		DiagonalLeftToRight,
		[Token(Token = "0x4000E66")]
		DiagonalRightToLeft
	}
	[Token(Token = "0x200021E")]
	public class Gradient2 : BaseMeshEffect
	{
		[Token(Token = "0x200021F")]
		public enum Type
		{
			[Token(Token = "0x4000E6C")]
			Horizontal,
			[Token(Token = "0x4000E6D")]
			Vertical,
			[Token(Token = "0x4000E6E")]
			Radial,
			[Token(Token = "0x4000E6F")]
			Diamond
		}

		[Token(Token = "0x2000220")]
		public enum Blend
		{
			[Token(Token = "0x4000E71")]
			Override,
			[Token(Token = "0x4000E72")]
			Add,
			[Token(Token = "0x4000E73")]
			Multiply
		}

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Type _gradientType;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Blend _blendMode;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _offset;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Gradient _effectGradient;

		[Token(Token = "0x170001B3")]
		public Blend BlendMode
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xB173DC", Offset = "0xB173DC", VA = "0xB173DC")]
			get
			{
				return default(Blend);
			}
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xB173E4", Offset = "0xB173E4", VA = "0xB173E4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public UnityEngine.Gradient EffectGradient
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0xB17410", Offset = "0xB17410", VA = "0xB17410")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0xB17418", Offset = "0xB17418", VA = "0xB17418")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public Type GradientType
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0xB17450", Offset = "0xB17450", VA = "0xB17450")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0xB17458", Offset = "0xB17458", VA = "0xB17458")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public float Offset
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0xB17484", Offset = "0xB17484", VA = "0xB17484")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0xB1748C", Offset = "0xB1748C", VA = "0xB1748C")]
			set
			{
			}
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xB174B8", Offset = "0xB174B8", VA = "0xB174B8", Slot = "20")]
		public override void ModifyMesh(VertexHelper helper)
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xB19324", Offset = "0xB19324", VA = "0xB19324")]
		private Color BlendColor(Color colorA, Color colorB)
		{
			return default(Color);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xB19370", Offset = "0xB19370", VA = "0xB19370")]
		public Gradient2()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class LetterSpacing : BaseMeshEffect
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_spacing;

		[Token(Token = "0x170001B7")]
		public float spacing
		{
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0xB194E0", Offset = "0xB194E0", VA = "0xB194E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C34")]
			[Address(RVA = "0xB194E8", Offset = "0xB194E8", VA = "0xB194E8")]
			set
			{
			}
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xB194D8", Offset = "0xB194D8", VA = "0xB194D8")]
		protected LetterSpacing()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xB195AC", Offset = "0xB195AC", VA = "0xB195AC", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}
	}
	[Token(Token = "0x2000222")]
	[RequireComponent(typeof(Text))]
	[RequireComponent(typeof(RectTransform))]
	public class MonoSpacing : BaseMeshEffect
	{
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_spacing;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float HalfCharWidth;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseHalfCharWidth;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rectTransform;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Text text;

		[Token(Token = "0x170001B8")]
		public float Spacing
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0xB19D4C", Offset = "0xB19D4C", VA = "0xB19D4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xB19D54", Offset = "0xB19D54", VA = "0xB19D54")]
			set
			{
			}
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xB19C14", Offset = "0xB19C14", VA = "0xB19C14")]
		protected MonoSpacing()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xB19C24", Offset = "0xB19C24", VA = "0xB19C24", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xB19E18", Offset = "0xB19E18", VA = "0xB19E18", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class NicerOutline : BaseMeshEffect
	{
		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_EffectColor;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2 m_EffectDistance;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool m_UseGraphicAlpha;

		[Token(Token = "0x170001B9")]
		public Color effectColor
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0xB1A4E4", Offset = "0xB1A4E4", VA = "0xB1A4E4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xB1A4F0", Offset = "0xB1A4F0", VA = "0xB1A4F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public Vector2 effectDistance
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xB1A5C4", Offset = "0xB1A5C4", VA = "0xB1A5C4")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0xB1A5CC", Offset = "0xB1A5CC", VA = "0xB1A5CC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public bool useGraphicAlpha
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xB1A6D0", Offset = "0xB1A6D0", VA = "0xB1A6D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xB1A6D8", Offset = "0xB1A6D8", VA = "0xB1A6D8")]
			set
			{
			}
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xB1A790", Offset = "0xB1A790", VA = "0xB1A790")]
		protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xB1AA94", Offset = "0xB1AA94", VA = "0xB1AA94")]
		protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xB1AB70", Offset = "0xB1AB70", VA = "0xB1AB70", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xB1C398", Offset = "0xB1C398", VA = "0xB1C398")]
		public NicerOutline()
		{
		}
	}
	[Token(Token = "0x2000224")]
	[RequireComponent(typeof(Image))]
	[RequireComponent(typeof(RectTransform))]
	public class RaycastMask : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Image _image;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Sprite _sprite;

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xB1C3C0", Offset = "0xB1C3C0", VA = "0xB1C3C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xB1C418", Offset = "0xB1C418", VA = "0xB1C418", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xB1CAB8", Offset = "0xB1CAB8", VA = "0xB1CAB8")]
		public RaycastMask()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class UIAdditiveEffect : MonoBehaviour
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xB1CAC0", Offset = "0xB1CAC0", VA = "0xB1CAC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xB1CAC4", Offset = "0xB1CAC4", VA = "0xB1CAC4")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xB1CCC8", Offset = "0xB1CCC8", VA = "0xB1CCC8")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xB1CCCC", Offset = "0xB1CCCC", VA = "0xB1CCCC")]
		public UIAdditiveEffect()
		{
		}
	}
	[Token(Token = "0x2000226")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	public class UIImageCrop : MonoBehaviour
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material mat;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int XCropProperty;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int YCropProperty;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float XCrop;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float YCrop;

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xB1CCD4", Offset = "0xB1CCD4", VA = "0xB1CCD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xB1CCD8", Offset = "0xB1CCD8", VA = "0xB1CCD8")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xB1CF4C", Offset = "0xB1CF4C", VA = "0xB1CF4C")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xB1CF74", Offset = "0xB1CF74", VA = "0xB1CF74")]
		public void SetXCrop(float xcrop)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xB1CFB0", Offset = "0xB1CFB0", VA = "0xB1CFB0")]
		public void SetYCrop(float ycrop)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xB1CFEC", Offset = "0xB1CFEC", VA = "0xB1CFEC")]
		public UIImageCrop()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	public class UILinearDodgeEffect : MonoBehaviour
	{
		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xB1CFF4", Offset = "0xB1CFF4", VA = "0xB1CFF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xB1CFF8", Offset = "0xB1CFF8", VA = "0xB1CFF8")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xB1D1FC", Offset = "0xB1D1FC", VA = "0xB1D1FC")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xB1D200", Offset = "0xB1D200", VA = "0xB1D200")]
		public UILinearDodgeEffect()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class UIMultiplyEffect : MonoBehaviour
	{
		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xB1D208", Offset = "0xB1D208", VA = "0xB1D208")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xB1D20C", Offset = "0xB1D20C", VA = "0xB1D20C")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xB1D410", Offset = "0xB1D410", VA = "0xB1D410")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xB1D414", Offset = "0xB1D414", VA = "0xB1D414")]
		public UIMultiplyEffect()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	public class UIScreenEffect : MonoBehaviour
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xB1D41C", Offset = "0xB1D41C", VA = "0xB1D41C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xB1D420", Offset = "0xB1D420", VA = "0xB1D420")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xB1D624", Offset = "0xB1D624", VA = "0xB1D624")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xB1D628", Offset = "0xB1D628", VA = "0xB1D628")]
		public UIScreenEffect()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[RequireComponent(typeof(RectTransform))]
	[ExecuteInEditMode]
	public class UISoftAdditiveEffect : MonoBehaviour
	{
		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaskableGraphic mGraphic;

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xB1D630", Offset = "0xB1D630", VA = "0xB1D630")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xB1D634", Offset = "0xB1D634", VA = "0xB1D634")]
		public void SetMaterial()
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xB1D838", Offset = "0xB1D838", VA = "0xB1D838")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xB1D83C", Offset = "0xB1D83C", VA = "0xB1D83C")]
		public UISoftAdditiveEffect()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class ShineEffect : MaskableGraphic
	{
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float yoffset;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private float width;

		[Token(Token = "0x170001BC")]
		public float Yoffset
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xB1D844", Offset = "0xB1D844", VA = "0xB1D844")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xB1D84C", Offset = "0xB1D84C", VA = "0xB1D84C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public float Width
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xB1D87C", Offset = "0xB1D87C", VA = "0xB1D87C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xB1D884", Offset = "0xB1D884", VA = "0xB1D884")]
			set
			{
			}
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xB1D8B4", Offset = "0xB1D8B4", VA = "0xB1D8B4", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xB1DED8", Offset = "0xB1DED8", VA = "0xB1DED8")]
		public void Triangulate(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xB1DFE8", Offset = "0xB1DFE8", VA = "0xB1DFE8")]
		public ShineEffect()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Image))]
	public class ShineEffector : MonoBehaviour
	{
		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShineEffect effector;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject effectRoot;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float yOffset;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float width;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform effectorRect;

		[Token(Token = "0x170001BE")]
		public float YOffset
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0xB1DFFC", Offset = "0xB1DFFC", VA = "0xB1DFFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0xB1E004", Offset = "0xB1E004", VA = "0xB1E004")]
			set
			{
			}
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xB1E0C8", Offset = "0xB1E0C8", VA = "0xB1E0C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xB1E7A0", Offset = "0xB1E7A0", VA = "0xB1E7A0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xB1E028", Offset = "0xB1E028", VA = "0xB1E028")]
		private void ChangeVal(float value)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xB1E85C", Offset = "0xB1E85C", VA = "0xB1E85C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xB1E8D8", Offset = "0xB1E8D8", VA = "0xB1E8D8")]
		public ShineEffector()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[ExecuteInEditMode]
	public class SoftMaskScript : MonoBehaviour
	{
		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material mat;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Canvas cachedCanvas;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform cachedCanvasTransform;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Vector3[] m_WorldCorners;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Vector3[] m_CanvasCorners;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RectTransform MaskArea;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture AlphaMask;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float CutOff;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool HardBlend;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool FlipAlphaMask;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool DontClipMaskScalingRect;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 maskOffset;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 maskScale;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xB1E8EC", Offset = "0xB1E8EC", VA = "0xB1E8EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xB1EC80", Offset = "0xB1EC80", VA = "0xB1EC80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xB1ECF8", Offset = "0xB1ECF8", VA = "0xB1ECF8")]
		private void SetMask()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xB1EE94", Offset = "0xB1EE94", VA = "0xB1EE94")]
		public Rect GetCanvasRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xB1EFD8", Offset = "0xB1EFD8", VA = "0xB1EFD8")]
		public SoftMaskScript()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[RequireComponent(typeof(RectTransform), typeof(Graphic))]
	[DisallowMultipleComponent]
	public class UIFlippable : BaseMeshEffect
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_Horizontal;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool m_Veritical;

		[Token(Token = "0x170001BF")]
		public bool horizontal
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xB1F0BC", Offset = "0xB1F0BC", VA = "0xB1F0BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xB1F0C4", Offset = "0xB1F0C4", VA = "0xB1F0C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public bool vertical
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xB1F0D0", Offset = "0xB1F0D0", VA = "0xB1F0D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xB1F0D8", Offset = "0xB1F0D8", VA = "0xB1F0D8")]
			set
			{
			}
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xB1F0E4", Offset = "0xB1F0E4", VA = "0xB1F0E4", Slot = "20")]
		public override void ModifyMesh(VertexHelper verts)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xB1F298", Offset = "0xB1F298", VA = "0xB1F298")]
		public UIFlippable()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[RequireComponent(typeof(CanvasRenderer), typeof(ParticleSystem))]
	[ExecuteInEditMode]
	public class UIParticleSystem : MaskableGraphic
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool fixedTime;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform _transform;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ParticleSystem pSystem;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private UIVertex[] _quad;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector4 imageUV;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private ParticleSystem.TextureSheetAnimationModule textureSheetAnimation;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int textureSheetAnimationFrames;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 textureSheetAnimationFrameSize;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private ParticleSystemRenderer pRenderer;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Material currentMaterial;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Texture currentTexture;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private ParticleSystem.MainModule mainModule;

		[Token(Token = "0x170001C1")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xB1F2A0", Offset = "0xB1F2A0", VA = "0xB1F2A0", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xB1F2A8", Offset = "0xB1F2A8", VA = "0xB1F2A8")]
		protected bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xB1F7A8", Offset = "0xB1F7A8", VA = "0xB1F7A8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xB1F7E0", Offset = "0xB1F7E0", VA = "0xB1F7E0", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xB20134", Offset = "0xB20134", VA = "0xB20134")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xB2032C", Offset = "0xB2032C", VA = "0xB2032C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xB20598", Offset = "0xB20598", VA = "0xB20598")]
		public UIParticleSystem()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class CurvedLayout : LayoutGroup
	{
		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 CurveOffset;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 itemAxis;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float itemSize;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float centerpoint;

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xB20638", Offset = "0xB20638", VA = "0xB20638", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xB209C8", Offset = "0xB209C8", VA = "0xB209C8", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xB209CC", Offset = "0xB209CC", VA = "0xB209CC", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xB209D0", Offset = "0xB209D0", VA = "0xB209D0", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xB209D4", Offset = "0xB209D4", VA = "0xB209D4", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xB20654", Offset = "0xB20654", VA = "0xB20654")]
		private void CalculateRadial()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xB209D8", Offset = "0xB209D8", VA = "0xB209D8")]
		public CurvedLayout()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class FancyScrollView<TData, TContext> : MonoBehaviour where TContext : class
	{
		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private float cellInterval;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private float cellOffset;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private bool loop;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private GameObject cellBase;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float currentPosition;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<FancyScrollViewCell<TData, TContext>> cells;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected TContext context;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<TData> cellData;

		[Token(Token = "0x6000C89")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000C8A")]
		protected void SetContext(TContext context)
		{
		}

		[Token(Token = "0x6000C8B")]
		private FancyScrollViewCell<TData, TContext> CreateCell()
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		private void UpdateCellForIndex(FancyScrollViewCell<TData, TContext> cell, int dataIndex)
		{
		}

		[Token(Token = "0x6000C8D")]
		private int GetLoopIndex(int index, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6000C8E")]
		protected void UpdateContents()
		{
		}

		[Token(Token = "0x6000C8F")]
		protected void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000C90")]
		public FancyScrollView()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public sealed class FancyScrollViewNullContext
	{
	}
	[Token(Token = "0x2000233")]
	public class FancyScrollView<TData> : FancyScrollView<TData, FancyScrollViewNullContext>
	{
		[Token(Token = "0x6000C91")]
		public FancyScrollView()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class FancyScrollViewCell<TData, TContext> : MonoBehaviour where TContext : class
	{
		[Token(Token = "0x170001C2")]
		public int DataIndex
		{
			[Token(Token = "0x6000C96")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C97")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C92")]
		public virtual void SetContext(TContext context)
		{
		}

		[Token(Token = "0x6000C93")]
		public virtual void UpdateContent(TData itemData)
		{
		}

		[Token(Token = "0x6000C94")]
		public virtual void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000C95")]
		public virtual void SetVisible(bool visible)
		{
		}

		[Token(Token = "0x6000C98")]
		public FancyScrollViewCell()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class FancyScrollViewCell<TData> : FancyScrollViewCell<TData, FancyScrollViewNullContext>
	{
		[Token(Token = "0x6000C99")]
		public FancyScrollViewCell()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class FlowLayoutGroup : LayoutGroup
	{
		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float SpacingX;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float SpacingY;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool ExpandHorizontalSpacing;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool ChildForceExpandWidth;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool ChildForceExpandHeight;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _layoutHeight;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IList<RectTransform> _rowList;

		[Token(Token = "0x170001C3")]
		protected bool IsCenterAlign
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xB21184", Offset = "0xB21184", VA = "0xB21184")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C4")]
		protected bool IsRightAlign
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xB211B0", Offset = "0xB211B0", VA = "0xB211B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		protected bool IsMiddleAlign
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xB211DC", Offset = "0xB211DC", VA = "0xB211DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C6")]
		protected bool IsLowerAlign
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0xB21200", Offset = "0xB21200", VA = "0xB21200")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xB209E8", Offset = "0xB209E8", VA = "0xB209E8", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xB20B0C", Offset = "0xB20B0C", VA = "0xB20B0C", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xB210D0", Offset = "0xB210D0", VA = "0xB210D0", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xB21128", Offset = "0xB21128", VA = "0xB21128", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xB20B64", Offset = "0xB20B64", VA = "0xB20B64")]
		public float SetLayout(float width, int axis, bool layoutInput)
		{
			return default(float);
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xB21224", Offset = "0xB21224", VA = "0xB21224")]
		private float CalculateRowVerticalOffset(float groupHeight, float yOffset, float currentRowHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xB2126C", Offset = "0xB2126C", VA = "0xB2126C")]
		protected void LayoutRow(IList<RectTransform> contents, float rowWidth, float rowHeight, float maxWidth, float xOffset, float yOffset, int axis)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xB20A6C", Offset = "0xB20A6C", VA = "0xB20A6C")]
		public float GetGreatestMinimumChildWidth()
		{
			return default(float);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xB21844", Offset = "0xB21844", VA = "0xB21844")]
		public FlowLayoutGroup()
		{
		}
	}
	[Token(Token = "0x2000237")]
	[RequireComponent(typeof(ScrollRect))]
	public class HorizontalScrollSnap : ScrollSnapBase, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xB218CC", Offset = "0xB218CC", VA = "0xB218CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xB219F0", Offset = "0xB219F0", VA = "0xB219F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xB220A4", Offset = "0xB220A4", VA = "0xB220A4")]
		private bool IsRectMovingSlowerThanThreshold(float startingSpeed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xB22104", Offset = "0xB22104", VA = "0xB22104")]
		private void DistributePages()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xB2232C", Offset = "0xB2232C", VA = "0xB2232C")]
		public void AddChild(GameObject GO)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xB22334", Offset = "0xB22334", VA = "0xB22334")]
		public void AddChild(GameObject GO, bool WorldPositionStays)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xB22A70", Offset = "0xB22A70", VA = "0xB22A70")]
		public void RemoveChild(int index, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xB22A7C", Offset = "0xB22A7C", VA = "0xB22A7C")]
		public void RemoveChild(int index, bool WorldPositionStays, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xB22BD4", Offset = "0xB22BD4", VA = "0xB22BD4")]
		public void RemoveAllChildren(out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xB22BE0", Offset = "0xB22BE0", VA = "0xB22BE0")]
		public void RemoveAllChildren(bool WorldPositionStays, out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xB22A00", Offset = "0xB22A00", VA = "0xB22A00")]
		private void SetScrollContainerPosition()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xB21958", Offset = "0xB21958", VA = "0xB21958")]
		public void UpdateLayout()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xB22DDC", Offset = "0xB22DDC", VA = "0xB22DDC")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xB22E64", Offset = "0xB22E64", VA = "0xB22E64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xB22FAC", Offset = "0xB22FAC", VA = "0xB22FAC", Slot = "10")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xB23244", Offset = "0xB23244", VA = "0xB23244")]
		public HorizontalScrollSnap()
		{
		}
	}
	[Token(Token = "0x2000238")]
	internal interface IScrollSnap
	{
		[Token(Token = "0x6000CB7")]
		void ChangePage(int page);

		[Token(Token = "0x6000CB8")]
		void SetLerp(bool value);

		[Token(Token = "0x6000CB9")]
		int CurrentPage();

		[Token(Token = "0x6000CBA")]
		void StartScreenChange();
	}
	[Token(Token = "0x2000239")]
	public class RadialLayout : LayoutGroup
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float fDistance;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float MinAngle;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MaxAngle;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float StartAngle;

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xB23358", Offset = "0xB23358", VA = "0xB23358", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xB23584", Offset = "0xB23584", VA = "0xB23584", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xB23588", Offset = "0xB23588", VA = "0xB23588", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xB2358C", Offset = "0xB2358C", VA = "0xB2358C", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xB23590", Offset = "0xB23590", VA = "0xB23590", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xB23374", Offset = "0xB23374", VA = "0xB23374")]
		private void CalculateRadial()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xB23594", Offset = "0xB23594", VA = "0xB23594")]
		public RadialLayout()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class ScrollPositionController : UIBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Serializable]
		[Token(Token = "0x200023B")]
		public class UpdatePositionEvent : UnityEvent<float>
		{
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0xB240D8", Offset = "0xB240D8", VA = "0xB240D8")]
			public UpdatePositionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200023C")]
		public class ItemSelectedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xB24120", Offset = "0xB24120", VA = "0xB24120")]
			public ItemSelectedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200023D")]
		private struct Snap
		{
			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool Enable;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float VelocityThreshold;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float Duration;
		}

		[Token(Token = "0x200023E")]
		private enum ScrollDirection
		{
			[Token(Token = "0x4000EDE")]
			Vertical,
			[Token(Token = "0x4000EDF")]
			Horizontal
		}

		[Token(Token = "0x200023F")]
		private enum MovementType
		{
			[Token(Token = "0x4000EE1")]
			Unrestricted,
			[Token(Token = "0x4000EE2")]
			Elastic,
			[Token(Token = "0x4000EE3")]
			Clamped
		}

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform viewport;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollDirection directionOfRecognize;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private MovementType movementType;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float elasticity;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float scrollSensitivity;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool inertia;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float decelerationRate;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Snap snap;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private int dataCount;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UpdatePositionEvent OnUpdatePosition;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemSelectedEvent OnItemSelected;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 pointerStartLocalPosition;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float dragStartScrollPosition;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float currentScrollPosition;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool dragging;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float velocity;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float prevScrollPosition;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool autoScrolling;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float autoScrollDuration;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float autoScrollStartTime;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float autoScrollPosition;

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xB2359C", Offset = "0xB2359C", VA = "0xB2359C", Slot = "17")]
		private void UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xB23698", Offset = "0xB23698", VA = "0xB23698", Slot = "19")]
		private void UnityEngine.EventSystems.IDragHandler.OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xB23968", Offset = "0xB23968", VA = "0xB23968", Slot = "18")]
		private void UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xB2382C", Offset = "0xB2382C", VA = "0xB2382C")]
		private float GetViewportSize()
		{
			return default(float);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xB2387C", Offset = "0xB2387C", VA = "0xB2387C")]
		private float CalculateOffset(float position)
		{
			return default(float);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xB238F8", Offset = "0xB238F8", VA = "0xB238F8")]
		private void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xB238BC", Offset = "0xB238BC", VA = "0xB238BC")]
		private float RubberDelta(float overStretching, float viewSize)
		{
			return default(float);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xB23988", Offset = "0xB23988", VA = "0xB23988")]
		public void SetDataCount(int dataCont)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xB23990", Offset = "0xB23990", VA = "0xB23990")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xB23F54", Offset = "0xB23F54", VA = "0xB23F54")]
		public void ScrollTo(int index, float duration)
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xB23FB4", Offset = "0xB23FB4", VA = "0xB23FB4")]
		private float CalculateClosestPosition(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xB23F08", Offset = "0xB23F08", VA = "0xB23F08")]
		private float GetLoopPosition(float position, int length)
		{
			return default(float);
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xB23EB0", Offset = "0xB23EB0", VA = "0xB23EB0")]
		private float EaseInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xB24094", Offset = "0xB24094", VA = "0xB24094")]
		public ScrollPositionController()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollSnap : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler, IScrollSnap
	{
		[Token(Token = "0x2000241")]
		public enum ScrollDirection
		{
			[Token(Token = "0x4000F05")]
			Horizontal,
			[Token(Token = "0x4000F06")]
			Vertical
		}

		[Token(Token = "0x2000242")]
		public delegate void PageSnapChange(int page);

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScrollRect _scroll_rect;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform _scrollRectTransform;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _listContainerTransform;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _pages;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _startingPage;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] _pageAnchorPositions;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _lerpTarget;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool _lerp;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _listContainerMinPosition;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _listContainerMaxPosition;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _listContainerSize;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RectTransform _listContainerRectTransform;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 _listContainerCachedSize;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _itemSize;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _itemsCount;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _startDrag;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _positionOnDragStart;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _pageOnDragStart;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _fastSwipeTimer;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _fastSwipeCounter;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fastSwipeTarget;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Button NextButton;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Button PrevButton;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int ItemsVisibleAtOnce;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool AutoLayoutItems;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		public bool LinkScrolbarSteps;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		public bool LinkScrolrectScrollSensitivity;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		public bool UseFastSwipe;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int FastSwipeThreshold;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ScrollDirection direction;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool fastSwipe;

		[Token(Token = "0x1400001E")]
		public event PageSnapChange onPageChange
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xB24168", Offset = "0xB24168", VA = "0xB24168")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xB24204", Offset = "0xB24204", VA = "0xB24204")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xB242A0", Offset = "0xB242A0", VA = "0xB242A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xB24618", Offset = "0xB24618", VA = "0xB24618")]
		public void UpdateListItemsSize()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xB24DDC", Offset = "0xB24DDC", VA = "0xB24DDC")]
		public void UpdateListItemPositions()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xB25798", Offset = "0xB25798", VA = "0xB25798")]
		public void ResetPage()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xB25634", Offset = "0xB25634", VA = "0xB25634")]
		private void UpdateScrollbar(bool linkSteps)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xB25814", Offset = "0xB25814", VA = "0xB25814")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xB25A44", Offset = "0xB25A44", VA = "0xB25A44")]
		public void NextScreen()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xB25AE0", Offset = "0xB25AE0", VA = "0xB25AE0")]
		public void PreviousScreen()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xB25B74", Offset = "0xB25B74", VA = "0xB25B74")]
		private void NextScreenCommand()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xB25BEC", Offset = "0xB25BEC", VA = "0xB25BEC")]
		private void PrevScreenCommand()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xB253EC", Offset = "0xB253EC", VA = "0xB253EC", Slot = "9")]
		public int CurrentPage()
		{
			return default(int);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xB25C58", Offset = "0xB25C58", VA = "0xB25C58", Slot = "8")]
		public void SetLerp(bool value)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xB25C64", Offset = "0xB25C64", VA = "0xB25C64", Slot = "7")]
		public void ChangePage(int page)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xB25538", Offset = "0xB25538", VA = "0xB25538")]
		private void PageChanged(int currentPage)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xB25CC8", Offset = "0xB25CC8", VA = "0xB25CC8", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xB25D18", Offset = "0xB25D18", VA = "0xB25D18", Slot = "5")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xB25E60", Offset = "0xB25E60", VA = "0xB25E60", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xB25E84", Offset = "0xB25E84", VA = "0xB25E84", Slot = "10")]
		public void StartScreenChange()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xB25E88", Offset = "0xB25E88", VA = "0xB25E88")]
		public ScrollSnap()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class ScrollSnapBase : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IScrollSnap
	{
		[Serializable]
		[Token(Token = "0x2000244")]
		public class SelectionChangeStartEvent : UnityEvent
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xB26C20", Offset = "0xB26C20", VA = "0xB26C20")]
			public SelectionChangeStartEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000245")]
		public class SelectionPageChangedEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0xB26C28", Offset = "0xB26C28", VA = "0xB26C28")]
			public SelectionPageChangedEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000246")]
		public class SelectionChangeEndEvent : UnityEvent<int>
		{
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xB26C70", Offset = "0xB26C70", VA = "0xB26C70")]
			public SelectionChangeEndEvent()
			{
			}
		}

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Rect panelDimensions;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal RectTransform _screensContainer;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool _isVertical;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int _screens;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float _scrollStartPosition;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float _childSize;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _childPos;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _maskSize;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Vector2 _childAnchorPoint;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal ScrollRect _scroll_rect;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Vector3 _lerp_target;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal bool _lerp;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		internal bool _pointerDown;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		internal bool _settled;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Vector3 _startPosition;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int _currentPage;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int _previousPage;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int _halfNoVisibleItems;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal bool _moveStarted;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int _bottomItem;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _topItem;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		public int StartingScreen;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public float PageStep;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject Pagination;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject PrevButton;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject NextButton;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float transitionSpeed;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool UseFastSwipe;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int FastSwipeThreshold;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public int SwipeVelocityThreshold;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public RectTransform MaskArea;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float MaskBuffer;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool JumpOnEnable;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool RestartOnEnable;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool UseParentTransform;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject[] ChildObjects;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private SelectionChangeStartEvent m_OnSelectionChangeStartEvent;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private SelectionPageChangedEvent m_OnSelectionPageChangedEvent;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private SelectionChangeEndEvent m_OnSelectionChangeEndEvent;

		[Token(Token = "0x170001C7")]
		public int CurrentPage
		{
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xB25FA4", Offset = "0xB25FA4", VA = "0xB25FA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0xB21FB4", Offset = "0xB21FB4", VA = "0xB21FB4")]
			internal set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public SelectionChangeStartEvent OnSelectionChangeStartEvent
		{
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xB26000", Offset = "0xB26000", VA = "0xB26000")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0xB26008", Offset = "0xB26008", VA = "0xB26008")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public SelectionPageChangedEvent OnSelectionPageChangedEvent
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xB26010", Offset = "0xB26010", VA = "0xB26010")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0xB26018", Offset = "0xB26018", VA = "0xB26018")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public SelectionChangeEndEvent OnSelectionChangeEndEvent
		{
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0xB26020", Offset = "0xB26020", VA = "0xB26020")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xB26028", Offset = "0xB26028", VA = "0xB26028")]
			set
			{
			}
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xB26030", Offset = "0xB26030", VA = "0xB26030")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xB2637C", Offset = "0xB2637C", VA = "0xB2637C")]
		internal void InitialiseChildObjects()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xB22400", Offset = "0xB22400", VA = "0xB22400")]
		internal void InitialiseChildObjectsFromScene()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xB26440", Offset = "0xB26440", VA = "0xB26440")]
		internal void InitialiseChildObjectsFromArray()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xB225BC", Offset = "0xB225BC", VA = "0xB225BC")]
		internal void UpdateVisible()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xB23134", Offset = "0xB23134", VA = "0xB23134")]
		public void NextScreen()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xB231C0", Offset = "0xB231C0", VA = "0xB231C0")]
		public void PreviousScreen()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xB22F14", Offset = "0xB22F14", VA = "0xB22F14")]
		public void GoToScreen(int screenIndex)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xB21EA0", Offset = "0xB21EA0", VA = "0xB21EA0")]
		internal int GetPageforPosition(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xB21C80", Offset = "0xB21C80", VA = "0xB21C80")]
		internal bool IsRectSettledOnaPage(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xB266DC", Offset = "0xB266DC", VA = "0xB266DC")]
		internal void GetPositionforPage(int page, ref Vector3 target)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xB21DAC", Offset = "0xB21DAC", VA = "0xB21DAC")]
		internal void ScrollToClosestElement()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xB22DB4", Offset = "0xB22DB4", VA = "0xB22DB4")]
		internal void OnCurrentScreenChange(int currentScreen)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xB26700", Offset = "0xB26700", VA = "0xB26700")]
		private void ChangeBulletsInfo(int targetScreen)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xB267FC", Offset = "0xB267FC", VA = "0xB267FC")]
		private void ToggleNavigationButtons(int targetScreen)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xB26928", Offset = "0xB26928", VA = "0xB26928")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xB266A4", Offset = "0xB266A4", VA = "0xB266A4", Slot = "9")]
		public void StartScreenChange()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xB25FAC", Offset = "0xB25FAC", VA = "0xB25FAC")]
		internal void ScreenChange()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xB21E3C", Offset = "0xB21E3C", VA = "0xB21E3C")]
		internal void EndScreenChange()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xB26B2C", Offset = "0xB26B2C", VA = "0xB26B2C")]
		public Transform CurrentPageObject()
		{
			return null;
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xB26B50", Offset = "0xB26B50", VA = "0xB26B50")]
		public void CurrentPageObject(out Transform returnObject)
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xB26B88", Offset = "0xB26B88", VA = "0xB26B88", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xB26BC0", Offset = "0xB26BC0", VA = "0xB26BC0", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xB26BC8", Offset = "0xB26BC8", VA = "0xB26BC8", Slot = "8")]
		private int UnityEngine.UI.Extensions.IScrollSnap.CurrentPage()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xB26C10", Offset = "0xB26C10", VA = "0xB26C10", Slot = "7")]
		public void SetLerp(bool value)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xB26C1C", Offset = "0xB26C1C", VA = "0xB26C1C", Slot = "6")]
		public void ChangePage(int page)
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xB23248", Offset = "0xB23248", VA = "0xB23248")]
		public ScrollSnapBase()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class ScrollSnapScrollbarHelper : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IBeginDragHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal IScrollSnap ss;

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xB26CC0", Offset = "0xB26CC0", VA = "0xB26CC0", Slot = "6")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xB26DDC", Offset = "0xB26DDC", VA = "0xB26DDC", Slot = "8")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xB26E80", Offset = "0xB26E80", VA = "0xB26E80", Slot = "7")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xB26FF0", Offset = "0xB26FF0", VA = "0xB26FF0", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xB26FF4", Offset = "0xB26FF4", VA = "0xB26FF4", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xB26CC4", Offset = "0xB26CC4", VA = "0xB26CC4")]
		private void OnScrollBarDown()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xB26E84", Offset = "0xB26E84", VA = "0xB26E84")]
		private void OnScrollBarUp()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xB26FF8", Offset = "0xB26FF8", VA = "0xB26FF8")]
		public ScrollSnapScrollbarHelper()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class TableLayoutGroup : LayoutGroup
	{
		[Token(Token = "0x2000249")]
		public enum Corner
		{
			[Token(Token = "0x4000F37")]
			UpperLeft,
			[Token(Token = "0x4000F38")]
			UpperRight,
			[Token(Token = "0x4000F39")]
			LowerLeft,
			[Token(Token = "0x4000F3A")]
			LowerRight
		}

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected Corner startCorner;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected float[] columnWidths;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected float minimumRowHeight;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		protected bool flexibleRowHeight;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected float columnSpacing;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		protected float rowSpacing;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] preferredRowHeights;

		[Token(Token = "0x170001CB")]
		public Corner StartCorner
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xB27000", Offset = "0xB27000", VA = "0xB27000")]
			get
			{
				return default(Corner);
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xB27008", Offset = "0xB27008", VA = "0xB27008")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public float[] ColumnWidths
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xB27064", Offset = "0xB27064", VA = "0xB27064")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xB2706C", Offset = "0xB2706C", VA = "0xB2706C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public float MinimumRowHeight
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xB270C8", Offset = "0xB270C8", VA = "0xB270C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xB270D0", Offset = "0xB270D0", VA = "0xB270D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public bool FlexibleRowHeight
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xB2712C", Offset = "0xB2712C", VA = "0xB2712C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xB27134", Offset = "0xB27134", VA = "0xB27134")]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public float ColumnSpacing
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xB27190", Offset = "0xB27190", VA = "0xB27190")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xB27198", Offset = "0xB27198", VA = "0xB27198")]
			set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public float RowSpacing
		{
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xB271F4", Offset = "0xB271F4", VA = "0xB271F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xB271FC", Offset = "0xB271FC", VA = "0xB271FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xB27258", Offset = "0xB27258", VA = "0xB27258", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xB27334", Offset = "0xB27334", VA = "0xB27334", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xB275E8", Offset = "0xB275E8", VA = "0xB275E8", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xB27824", Offset = "0xB27824", VA = "0xB27824", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xB27A2C", Offset = "0xB27A2C", VA = "0xB27A2C")]
		public TableLayoutGroup()
		{
		}
	}
	[Token(Token = "0x200024A")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RectTransform))]
	public class TileSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector2 m_Border;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector2 m_TileSize;

		[NonSerialized]
		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform m_Rect;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x170001D1")]
		public Vector2 Border
		{
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xB27ABC", Offset = "0xB27ABC", VA = "0xB27ABC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xB27AC4", Offset = "0xB27AC4", VA = "0xB27AC4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public Vector2 TileSize
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xB27B80", Offset = "0xB27B80", VA = "0xB27B80")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xB27B88", Offset = "0xB27B88", VA = "0xB27B88")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		private RectTransform rectTransform
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xB27C18", Offset = "0xB27C18", VA = "0xB27C18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xB27CC0", Offset = "0xB27CC0", VA = "0xB27CC0", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xB27CF8", Offset = "0xB27CF8", VA = "0xB27CF8", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xB27D78", Offset = "0xB27D78", VA = "0xB27D78", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xB27D7C", Offset = "0xB27D7C", VA = "0xB27D7C")]
		private void UpdateRect()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xB27F78", Offset = "0xB27F78", VA = "0xB27F78")]
		private Vector2 GetParentSize()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xB28088", Offset = "0xB28088", VA = "0xB28088", Slot = "19")]
		public virtual void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xB2808C", Offset = "0xB2808C", VA = "0xB2808C", Slot = "20")]
		public virtual void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xB27B54", Offset = "0xB27B54", VA = "0xB27B54")]
		protected void SetDirty()
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xB28090", Offset = "0xB28090", VA = "0xB28090")]
		public TileSizeFitter()
		{
		}
	}
	[Token(Token = "0x200024B")]
	[RequireComponent(typeof(ScrollRect))]
	public class UIVerticalScroller : MonoBehaviour
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform _scrollingPanel;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] _arrayOfElements;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform _center;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int StartingIndex;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ScrollUpButton;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject ScrollDownButton;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent<int> ButtonClicked;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] distReposition;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] distance;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int minElementsNum;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int elementLength;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float deltaY;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string result;

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xB280F4", Offset = "0xB280F4", VA = "0xB280F4")]
		public UIVerticalScroller()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xB28104", Offset = "0xB28104", VA = "0xB28104")]
		public UIVerticalScroller(RectTransform scrollingPanel, GameObject[] arrayOfElements, RectTransform center)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xB2816C", Offset = "0xB2816C", VA = "0xB2816C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xB28378", Offset = "0xB28378", VA = "0xB28378")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xB286C4", Offset = "0xB286C4", VA = "0xB286C4")]
		private void AddListener(GameObject button, int index)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xB288A0", Offset = "0xB288A0", VA = "0xB288A0")]
		private void DoSomething(int index)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xB28900", Offset = "0xB28900", VA = "0xB28900")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xB28C98", Offset = "0xB28C98", VA = "0xB28C98")]
		private void ScrollingElements(float position)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xB28D18", Offset = "0xB28D18", VA = "0xB28D18")]
		public string GetResults()
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xB287CC", Offset = "0xB287CC", VA = "0xB287CC")]
		public void SnapToElement(int element)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xB28D20", Offset = "0xB28D20", VA = "0xB28D20")]
		public void ScrollUp()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xB28E24", Offset = "0xB28E24", VA = "0xB28E24")]
		public void ScrollDown()
		{
		}
	}
	[Token(Token = "0x200024D")]
	[RequireComponent(typeof(ScrollRect))]
	public class VerticalScrollSnap : ScrollSnapBase, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xB28F34", Offset = "0xB28F34", VA = "0xB28F34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xB2905C", Offset = "0xB2905C", VA = "0xB2905C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xB292F0", Offset = "0xB292F0", VA = "0xB292F0")]
		private bool IsRectMovingSlowerThanThreshold(float startingSpeed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xB29350", Offset = "0xB29350", VA = "0xB29350")]
		public void DistributePages()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xB295A8", Offset = "0xB295A8", VA = "0xB295A8")]
		public void AddChild(GameObject GO)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xB295B0", Offset = "0xB295B0", VA = "0xB295B0")]
		public void AddChild(GameObject GO, bool WorldPositionStays)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xB296EC", Offset = "0xB296EC", VA = "0xB296EC")]
		public void RemoveChild(int index, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xB296F8", Offset = "0xB296F8", VA = "0xB296F8")]
		public void RemoveChild(int index, bool WorldPositionStays, out GameObject ChildRemoved)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xB29850", Offset = "0xB29850", VA = "0xB29850")]
		public void RemoveAllChildren(out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xB2985C", Offset = "0xB2985C", VA = "0xB2985C")]
		public void RemoveAllChildren(bool WorldPositionStays, out GameObject[] ChildrenRemoved)
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xB2967C", Offset = "0xB2967C", VA = "0xB2967C")]
		private void SetScrollContainerPosition()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xB28FC4", Offset = "0xB28FC4", VA = "0xB28FC4")]
		public void UpdateLayout()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xB29A30", Offset = "0xB29A30", VA = "0xB29A30")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xB29AB8", Offset = "0xB29AB8", VA = "0xB29AB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xB29B68", Offset = "0xB29B68", VA = "0xB29B68", Slot = "10")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xB29CF8", Offset = "0xB29CF8", VA = "0xB29CF8")]
		public VerticalScrollSnap()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public abstract class AdamKaposMenu<T> : AdamKaposMenu where T : AdamKaposMenu<T>
	{
		[Token(Token = "0x170001D4")]
		public static T Instance
		{
			[Token(Token = "0x6000D5A")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D5B")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D5C")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D5D")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000D5E")]
		protected static void Open()
		{
		}

		[Token(Token = "0x6000D5F")]
		protected static void Close()
		{
		}

		[Token(Token = "0x6000D60")]
		public override void OnBackPressed()
		{
		}

		[Token(Token = "0x6000D61")]
		protected AdamKaposMenu()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public abstract class AdamKaposMenu : MonoBehaviour
	{
		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool DestroyWhenClosed;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool DisableMenusUnderneath;

		[Token(Token = "0x6000D62")]
		public abstract void OnBackPressed();

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xB29CFC", Offset = "0xB29CFC", VA = "0xB29CFC")]
		protected AdamKaposMenu()
		{
		}
	}
	[Token(Token = "0x2000250")]
	[DisallowMultipleComponent]
	public class MenuManager : MonoBehaviour
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdamKaposMenu[] MenuScreens;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int StartScreen;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stack<AdamKaposMenu> menuStack;

		[Token(Token = "0x170001D5")]
		public static MenuManager Instance
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xB29D0C", Offset = "0xB29D0C", VA = "0xB29D0C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xB29D54", Offset = "0xB29D54", VA = "0xB29D54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xB29DAC", Offset = "0xB29DAC", VA = "0xB29DAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xB2A1E0", Offset = "0xB2A1E0", VA = "0xB2A1E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D68")]
		public void CreateInstance<T>() where T : AdamKaposMenu
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xB29ED4", Offset = "0xB29ED4", VA = "0xB29ED4")]
		public void CreateInstance(string MenuName)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xB29F74", Offset = "0xB29F74", VA = "0xB29F74")]
		public void OpenMenu(AdamKaposMenu instance)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xB2A22C", Offset = "0xB2A22C", VA = "0xB2A22C")]
		private GameObject GetPrefab(string PrefabName)
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		private T GetPrefab<T>() where T : AdamKaposMenu
		{
			return null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xB2A324", Offset = "0xB2A324", VA = "0xB2A324")]
		public void CloseMenu(AdamKaposMenu menu)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xB2A510", Offset = "0xB2A510", VA = "0xB2A510")]
		public void CloseTopMenu()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xB2A720", Offset = "0xB2A720", VA = "0xB2A720")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xB2A7B4", Offset = "0xB2A7B4", VA = "0xB2A7B4")]
		public MenuManager()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public abstract class SimpleMenu<T> : AdamKaposMenu<T> where T : SimpleMenu<T>
	{
		[Token(Token = "0x6000D71")]
		public static void Show()
		{
		}

		[Token(Token = "0x6000D72")]
		public static void Hide()
		{
		}

		[Token(Token = "0x6000D73")]
		protected SimpleMenu()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class DiamondGraph : UIPrimitiveBase
	{
		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private float m_a;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private float m_b;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private float m_c;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private float m_d;

		[Token(Token = "0x170001D6")]
		public float A
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xB2A83C", Offset = "0xB2A83C", VA = "0xB2A83C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xB2A844", Offset = "0xB2A844", VA = "0xB2A844")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public float B
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xB2A84C", Offset = "0xB2A84C", VA = "0xB2A84C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xB2A854", Offset = "0xB2A854", VA = "0xB2A854")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public float C
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xB2A85C", Offset = "0xB2A85C", VA = "0xB2A85C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xB2A864", Offset = "0xB2A864", VA = "0xB2A864")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public float D
		{
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xB2A86C", Offset = "0xB2A86C", VA = "0xB2A86C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xB2A874", Offset = "0xB2A874", VA = "0xB2A874")]
			set
			{
			}
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xB2A87C", Offset = "0xB2A87C", VA = "0xB2A87C", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xB2AD8C", Offset = "0xB2AD8C", VA = "0xB2AD8C")]
		public DiamondGraph()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class UICircle : UIPrimitiveBase
	{
		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private int m_fillPercent;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool FixedToSegments;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		[SerializeField]
		private bool m_fill;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private float m_thickness;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private int m_segments;

		[Token(Token = "0x170001DA")]
		public int FillPercent
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xB2AD9C", Offset = "0xB2AD9C", VA = "0xB2AD9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xB2ADA4", Offset = "0xB2ADA4", VA = "0xB2ADA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public bool Fill
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xB2ADB8", Offset = "0xB2ADB8", VA = "0xB2ADB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xB2ADC0", Offset = "0xB2ADC0", VA = "0xB2ADC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public float Thickness
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xB2ADD8", Offset = "0xB2ADD8", VA = "0xB2ADD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xB2ADE0", Offset = "0xB2ADE0", VA = "0xB2ADE0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public int Segments
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xB2AE68", Offset = "0xB2AE68", VA = "0xB2AE68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xB2AE70", Offset = "0xB2AE70", VA = "0xB2AE70")]
			set
			{
			}
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xB2ADF4", Offset = "0xB2ADF4", VA = "0xB2ADF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xB2AE84", Offset = "0xB2AE84", VA = "0xB2AE84", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xB2B44C", Offset = "0xB2B44C", VA = "0xB2B44C")]
		private void StepThroughPointsAndFill(float outer, float inner, ref Vector2 prevX, ref Vector2 prevY, out Vector2 pos0, out Vector2 pos1, out Vector2 pos2, out Vector2 pos3, float c, float s)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xB2B50C", Offset = "0xB2B50C", VA = "0xB2B50C")]
		public UICircle()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class UICornerCut : UIPrimitiveBase
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Vector2 cornerSize;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private bool m_cutUL;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[SerializeField]
		private bool m_cutUR;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		[SerializeField]
		private bool m_cutLL;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		[SerializeField]
		private bool m_cutLR;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private bool m_makeColumns;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		[SerializeField]
		private bool m_useColorUp;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Color32 m_colorUp;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private bool m_useColorDown;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Color32 m_colorDown;

		[Token(Token = "0x170001DE")]
		public bool CutUL
		{
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0xB2B530", Offset = "0xB2B530", VA = "0xB2B530")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0xB2B538", Offset = "0xB2B538", VA = "0xB2B538")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public bool CutUR
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xB2B550", Offset = "0xB2B550", VA = "0xB2B550")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xB2B558", Offset = "0xB2B558", VA = "0xB2B558")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public bool CutLL
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0xB2B570", Offset = "0xB2B570", VA = "0xB2B570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xB2B578", Offset = "0xB2B578", VA = "0xB2B578")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public bool CutLR
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0xB2B590", Offset = "0xB2B590", VA = "0xB2B590")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0xB2B598", Offset = "0xB2B598", VA = "0xB2B598")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public bool MakeColumns
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xB2B5B0", Offset = "0xB2B5B0", VA = "0xB2B5B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xB2B5B8", Offset = "0xB2B5B8", VA = "0xB2B5B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public bool UseColorUp
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xB2B5D0", Offset = "0xB2B5D0", VA = "0xB2B5D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xB2B5D8", Offset = "0xB2B5D8", VA = "0xB2B5D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public Color32 ColorUp
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xB2B5E4", Offset = "0xB2B5E4", VA = "0xB2B5E4")]
			get
			{
				return default(Color32);
			}
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xB2B5EC", Offset = "0xB2B5EC", VA = "0xB2B5EC")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public bool UseColorDown
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xB2B5F4", Offset = "0xB2B5F4", VA = "0xB2B5F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xB2B5FC", Offset = "0xB2B5FC", VA = "0xB2B5FC")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public Color32 ColorDown
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xB2B608", Offset = "0xB2B608", VA = "0xB2B608")]
			get
			{
				return default(Color32);
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xB2B610", Offset = "0xB2B610", VA = "0xB2B610")]
			set
			{
			}
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xB2B618", Offset = "0xB2B618", VA = "0xB2B618", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xB2BFA4", Offset = "0xB2BFA4", VA = "0xB2BFA4")]
		private static void AddSquare(Rect rect, Rect rectUV, Color32 color32, VertexHelper vh)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xB2BE78", Offset = "0xB2BE78", VA = "0xB2BE78")]
		private static void AddSquare(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Rect rectUV, Color32 color32, VertexHelper vh)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xB2C14C", Offset = "0xB2C14C", VA = "0xB2C14C")]
		private static int AddVert(float x, float y, Rect area, Color32 color32, VertexHelper vh)
		{
			return default(int);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xB2C264", Offset = "0xB2C264", VA = "0xB2C264")]
		public UICornerCut()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class UIGridRenderer : UILineRenderer
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private int m_GridColumns;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private int m_GridRows;

		[Token(Token = "0x170001E7")]
		public int GridColumns
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xB2C27C", Offset = "0xB2C27C", VA = "0xB2C27C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xB2C284", Offset = "0xB2C284", VA = "0xB2C284")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public int GridRows
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0xB2C2A8", Offset = "0xB2C2A8", VA = "0xB2C2A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0xB2C2B0", Offset = "0xB2C2B0", VA = "0xB2C2B0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xB2C2D4", Offset = "0xB2C2D4", VA = "0xB2C2D4", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xB2D64C", Offset = "0xB2D64C", VA = "0xB2D64C")]
		public UIGridRenderer()
		{
		}
	}
	[Token(Token = "0x2000256")]
	[RequireComponent(typeof(RectTransform))]
	public class UILineRenderer : UIPrimitiveBase
	{
		[Token(Token = "0x2000257")]
		private enum SegmentType
		{
			[Token(Token = "0x4000F82")]
			Start,
			[Token(Token = "0x4000F83")]
			Middle,
			[Token(Token = "0x4000F84")]
			End,
			[Token(Token = "0x4000F85")]
			Full
		}

		[Token(Token = "0x2000258")]
		public enum JoinType
		{
			[Token(Token = "0x4000F87")]
			Bevel,
			[Token(Token = "0x4000F88")]
			Miter
		}

		[Token(Token = "0x2000259")]
		public enum BezierType
		{
			[Token(Token = "0x4000F8A")]
			None,
			[Token(Token = "0x4000F8B")]
			Quick,
			[Token(Token = "0x4000F8C")]
			Basic,
			[Token(Token = "0x4000F8D")]
			Improved,
			[Token(Token = "0x4000F8E")]
			Catenary
		}

		[Token(Token = "0x4000F6A")]
		private const float MIN_MITER_JOIN = (float)Math.PI / 12f;

		[Token(Token = "0x4000F6B")]
		private const float MIN_BEVEL_NICE_JOIN = (float)Math.PI / 6f;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2 UV_TOP_LEFT;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector2 UV_BOTTOM_LEFT;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector2 UV_TOP_CENTER_LEFT;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector2 UV_TOP_CENTER_RIGHT;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector2 UV_BOTTOM_CENTER_LEFT;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector2 UV_BOTTOM_CENTER_RIGHT;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector2 UV_TOP_RIGHT;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector2 UV_BOTTOM_RIGHT;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Vector2[] startUvs;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Vector2[] middleUvs;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Vector2[] endUvs;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Vector2[] fullUvs;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		internal Vector2[] m_points;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		internal float lineThickness;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		internal bool relativeSize;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		[SerializeField]
		internal bool lineList;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
		[SerializeField]
		internal bool lineCaps;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		internal int bezierSegmentsPerCurve;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public JoinType LineJoins;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public BezierType BezierMode;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool drivenExternally;

		[Token(Token = "0x170001E9")]
		public float LineThickness
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0xB2D684", Offset = "0xB2D684", VA = "0xB2D684")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0xB2D68C", Offset = "0xB2D68C", VA = "0xB2D68C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public bool RelativeSize
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xB2D6A0", Offset = "0xB2D6A0", VA = "0xB2D6A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xB2D6A8", Offset = "0xB2D6A8", VA = "0xB2D6A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public bool LineList
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xB2D6C0", Offset = "0xB2D6C0", VA = "0xB2D6C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xB2D6C8", Offset = "0xB2D6C8", VA = "0xB2D6C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public bool LineCaps
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xB2D6E0", Offset = "0xB2D6E0", VA = "0xB2D6E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xB2D6E8", Offset = "0xB2D6E8", VA = "0xB2D6E8")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public int BezierSegmentsPerCurve
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xB2D700", Offset = "0xB2D700", VA = "0xB2D700")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xB2D708", Offset = "0xB2D708", VA = "0xB2D708")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public Vector2[] Points
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0xB2D710", Offset = "0xB2D710", VA = "0xB2D710")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0xB2D718", Offset = "0xB2D718", VA = "0xB2D718")]
			set
			{
			}
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xB2C518", Offset = "0xB2C518", VA = "0xB2C518", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xB2D754", Offset = "0xB2D754", VA = "0xB2D754")]
		private UIVertex[] CreateLineCap(Vector2 start, Vector2 end, SegmentType type)
		{
			return null;
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xB2D9B0", Offset = "0xB2D9B0", VA = "0xB2D9B0")]
		private UIVertex[] CreateLineSegment(Vector2 start, Vector2 end, SegmentType type)
		{
			return null;
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xB2DC78", Offset = "0xB2DC78", VA = "0xB2DC78", Slot = "71")]
		protected override void GeneratedUVs()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xB2E094", Offset = "0xB2E094", VA = "0xB2E094", Slot = "72")]
		protected override void ResolutionToNativeSize(float distance)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xB2D66C", Offset = "0xB2D66C", VA = "0xB2D66C")]
		public UILineRenderer()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class UILineTextureRenderer : UIPrimitiveBase
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Rect m_UVRect;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Vector2[] m_points;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float LineThickness;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool UseMargins;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Vector2 Margin;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public bool relativeSize;

		[Token(Token = "0x170001EF")]
		public Rect uvRect
		{
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0xB2E150", Offset = "0xB2E150", VA = "0xB2E150")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0xB2E15C", Offset = "0xB2E15C", VA = "0xB2E15C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public Vector2[] Points
		{
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0xB2E1DC", Offset = "0xB2E1DC", VA = "0xB2E1DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xB2E1E4", Offset = "0xB2E1E4", VA = "0xB2E1E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xB2E224", Offset = "0xB2E224", VA = "0xB2E224", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xB2ECC8", Offset = "0xB2ECC8", VA = "0xB2ECC8")]
		public Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xB2ED48", Offset = "0xB2ED48", VA = "0xB2ED48")]
		public UILineTextureRenderer()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class UIPolygon : UIPrimitiveBase
	{
		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		public bool fill;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float thickness;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int sides;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float rotation;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float[] VerticesDistances;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float size;

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xB2ED9C", Offset = "0xB2ED9C", VA = "0xB2ED9C")]
		public void DrawPolygon(int _sides)
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xB2EE64", Offset = "0xB2EE64", VA = "0xB2EE64")]
		public void DrawPolygon(int _sides, float[] _VerticesDistances)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xB2EE9C", Offset = "0xB2EE9C", VA = "0xB2EE9C")]
		public void DrawPolygon(int _sides, float[] _VerticesDistances, float _rotation)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xB2EEE0", Offset = "0xB2EEE0", VA = "0xB2EEE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xB2EFF8", Offset = "0xB2EFF8", VA = "0xB2EFF8", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xB2F838", Offset = "0xB2F838", VA = "0xB2F838")]
		public UIPolygon()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public enum ResolutionMode
	{
		[Token(Token = "0x4000F9C")]
		None,
		[Token(Token = "0x4000F9D")]
		PerSegment,
		[Token(Token = "0x4000F9E")]
		PerLine
	}
	[Token(Token = "0x200025D")]
	public class UIPrimitiveBase : MaskableGraphic, ILayoutElement, ICanvasRaycastFilter
	{
		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Material s_ETC1DefaultUI;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Sprite m_Sprite;

		[NonSerialized]
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Sprite m_OverrideSprite;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal float m_EventAlphaThreshold;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private ResolutionMode m_improveResolution;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		protected float m_Resolution;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool m_useNativeSize;

		[Token(Token = "0x170001F1")]
		public Sprite sprite
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0xB2F8E4", Offset = "0xB2F8E4", VA = "0xB2F8E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xB2F8EC", Offset = "0xB2F8EC", VA = "0xB2F8EC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public Sprite overrideSprite
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xB2F970", Offset = "0xB2F970", VA = "0xB2F970")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xB2F9EC", Offset = "0xB2F9EC", VA = "0xB2F9EC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		protected Sprite activeSprite
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xB2F974", Offset = "0xB2F974", VA = "0xB2F974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F4")]
		public float eventAlphaThreshold
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xB2FA70", Offset = "0xB2FA70", VA = "0xB2FA70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xB2FA78", Offset = "0xB2FA78", VA = "0xB2FA78")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public ResolutionMode ImproveResolution
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xB2FA80", Offset = "0xB2FA80", VA = "0xB2FA80")]
			get
			{
				return default(ResolutionMode);
			}
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xB2FA88", Offset = "0xB2FA88", VA = "0xB2FA88")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public float Resoloution
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xB2FA9C", Offset = "0xB2FA9C", VA = "0xB2FA9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xB2FAA4", Offset = "0xB2FAA4", VA = "0xB2FAA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public bool UseNativeSize
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xB2FAB8", Offset = "0xB2FAB8", VA = "0xB2FAB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xB2FAC0", Offset = "0xB2FAC0", VA = "0xB2FAC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public static Material defaultETC1GraphicMaterial
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xB2FAD8", Offset = "0xB2FAD8", VA = "0xB2FAD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xB2FB88", Offset = "0xB2FB88", VA = "0xB2FB88", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		public bool hasBorder
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xB2FD00", Offset = "0xB2FD00", VA = "0xB2FD00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FB")]
		public float pixelsPerUnit
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xB2FDB8", Offset = "0xB2FDB8", VA = "0xB2FDB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FC")]
		public override Material material
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xB2FEB4", Offset = "0xB2FEB4", VA = "0xB2FEB4", Slot = "32")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xB2FFBC", Offset = "0xB2FFBC", VA = "0xB2FFBC", Slot = "33")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public virtual float minWidth
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xB305C8", Offset = "0xB305C8", VA = "0xB305C8", Slot = "75")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FE")]
		public virtual float preferredWidth
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0xB305D0", Offset = "0xB305D0", VA = "0xB305D0", Slot = "76")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FF")]
		public virtual float flexibleWidth
		{
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0xB30698", Offset = "0xB30698", VA = "0xB30698", Slot = "77")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000200")]
		public virtual float minHeight
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xB306A0", Offset = "0xB306A0", VA = "0xB306A0", Slot = "78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000201")]
		public virtual float preferredHeight
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0xB306A8", Offset = "0xB306A8", VA = "0xB306A8", Slot = "79")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public virtual float flexibleHeight
		{
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0xB30770", Offset = "0xB30770", VA = "0xB30770", Slot = "80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000203")]
		public virtual int layoutPriority
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0xB30778", Offset = "0xB30778", VA = "0xB30778", Slot = "81")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xB2F8C0", Offset = "0xB2F8C0", VA = "0xB2F8C0")]
		protected UIPrimitiveBase()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xB2F3C8", Offset = "0xB2F3C8", VA = "0xB2F3C8")]
		protected UIVertex[] SetVbo(Vector2[] vertices, Vector2[] uvs)
		{
			return null;
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xB2FFC4", Offset = "0xB2FFC4", VA = "0xB2FFC4")]
		protected Vector2[] IncreaseResolution(Vector2[] input)
		{
			return null;
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xB305B8", Offset = "0xB305B8", VA = "0xB305B8", Slot = "71")]
		protected virtual void GeneratedUVs()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xB305BC", Offset = "0xB305BC", VA = "0xB305BC", Slot = "72")]
		protected virtual void ResolutionToNativeSize(float distance)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xB305C0", Offset = "0xB305C0", VA = "0xB305C0", Slot = "73")]
		public virtual void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xB305C4", Offset = "0xB305C4", VA = "0xB305C4", Slot = "74")]
		public virtual void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xB30780", Offset = "0xB30780", VA = "0xB30780", Slot = "82")]
		public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xB30B74", Offset = "0xB30B74", VA = "0xB30B74")]
		private Vector2 MapCoordinate(Vector2 local, Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xB30BE4", Offset = "0xB30BE4", VA = "0xB30BE4")]
		private Vector4 GetAdjustedBorders(Vector4 border, Rect rect)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xB30CBC", Offset = "0xB30CBC", VA = "0xB30CBC", Slot = "5")]
		protected override void OnEnable()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public enum NavigationMode
	{
		[Token(Token = "0x4000FA7")]
		Auto,
		[Token(Token = "0x4000FA8")]
		Manual
	}
	[Token(Token = "0x200025F")]
	[RequireComponent(typeof(EventSystem))]
	public class TabNavigationHelper : MonoBehaviour
	{
		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EventSystem _system;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Selectable StartingObject;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Selectable LastObject;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Selectable[] NavigationPath;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NavigationMode NavigationMode;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool CircularNavigation;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xB30CE4", Offset = "0xB30CE4", VA = "0xB30CE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xB30F3C", Offset = "0xB30F3C", VA = "0xB30F3C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xB30E80", Offset = "0xB30E80", VA = "0xB30E80")]
		private void SelectDefaultObject(out Selectable next)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xB31424", Offset = "0xB31424", VA = "0xB31424")]
		private void selectGameObject(Selectable selectable)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xB315A8", Offset = "0xB315A8", VA = "0xB315A8")]
		public TabNavigationHelper()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class BoundTooltipItem : MonoBehaviour
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text TooltipText;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 ToolTipOffset;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BoundTooltipItem instance;

		[Token(Token = "0x17000204")]
		public bool IsActive
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xB315B0", Offset = "0xB315B0", VA = "0xB315B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000205")]
		public static BoundTooltipItem Instance
		{
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0xB3178C", Offset = "0xB3178C", VA = "0xB3178C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xB315D0", Offset = "0xB315D0", VA = "0xB315D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xB316C8", Offset = "0xB316C8", VA = "0xB316C8")]
		public void ShowTooltip(string text, Vector3 pos)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xB316A4", Offset = "0xB316A4", VA = "0xB316A4")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xB31860", Offset = "0xB31860", VA = "0xB31860")]
		public BoundTooltipItem()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class BoundTooltipTrigger : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useMousePosition;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 offset;

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xB31868", Offset = "0xB31868", VA = "0xB31868", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xB31910", Offset = "0xB31910", VA = "0xB31910", Slot = "6")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xB3193C", Offset = "0xB3193C", VA = "0xB3193C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xB31958", Offset = "0xB31958", VA = "0xB31958", Slot = "7")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xB318C8", Offset = "0xB318C8", VA = "0xB318C8")]
		private void StartHover(Vector3 position)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xB31940", Offset = "0xB31940", VA = "0xB31940")]
		private void StopHover()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xB3195C", Offset = "0xB3195C", VA = "0xB3195C")]
		public BoundTooltipTrigger()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class HoverTooltip : MonoBehaviour
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int horizontalPadding;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int verticalPadding;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text thisText;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HorizontalLayoutGroup hlG;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform bgImage;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image bgImageSource;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool firstUpdate;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool inside;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private RenderMode GUIMode;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera GUICamera;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 lowerLeft;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 upperRight;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float currentYScaleFactor;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float currentXScaleFactor;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float defaultYOffset;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float defaultXOffset;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float tooltipRealHeight;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float tooltipRealWidth;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xB31964", Offset = "0xB31964", VA = "0xB31964")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xB31B74", Offset = "0xB31B74", VA = "0xB31B74")]
		public void SetTooltip(string text)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xB32120", Offset = "0xB32120", VA = "0xB32120")]
		public void SetTooltip(string[] texts)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xB32218", Offset = "0xB32218", VA = "0xB32218")]
		public void SetTooltip(string text, bool test)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xB31CD4", Offset = "0xB31CD4", VA = "0xB31CD4")]
		public void OnScreenSpaceCamera()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xB3225C", Offset = "0xB3225C", VA = "0xB3225C")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xB32318", Offset = "0xB32318", VA = "0xB32318")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xB3234C", Offset = "0xB3234C", VA = "0xB3234C")]
		private void LayoutInit()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xB31BB8", Offset = "0xB31BB8", VA = "0xB31BB8")]
		private void NewTooltip()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xB32490", Offset = "0xB32490", VA = "0xB32490")]
		public void ActivateTooltipVisibility()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xB31AAC", Offset = "0xB31AAC", VA = "0xB31AAC")]
		public void HideTooltipVisibility()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xB3255C", Offset = "0xB3255C", VA = "0xB3255C")]
		public HoverTooltip()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[RequireComponent(typeof(RectTransform))]
	public class ToolTip : MonoBehaviour
	{
		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _inside;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float width;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float height;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float YShift;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float xShift;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RenderMode _guiMode;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera _guiCamera;

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xB32564", Offset = "0xB32564", VA = "0xB32564")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xB32674", Offset = "0xB32674", VA = "0xB32674")]
		public void SetTooltip(string ttext)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xB32950", Offset = "0xB32950", VA = "0xB32950")]
		public void HideTooltip()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xB3298C", Offset = "0xB3298C", VA = "0xB3298C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xB3272C", Offset = "0xB3272C", VA = "0xB3272C")]
		public void OnScreenSpaceCamera()
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xB329A8", Offset = "0xB329A8", VA = "0xB329A8")]
		public ToolTip()
		{
		}
	}
	[Token(Token = "0x2000264")]
	[RequireComponent(typeof(RectTransform))]
	public class UIWindowBase : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
	{
		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RectTransform m_transform;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _isDragging;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool ResetCoords;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 m_originalCoods;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Canvas m_canvas;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform m_canvasRectTransform;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int KeepWindowInCanvas;

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xB329B0", Offset = "0xB329B0", VA = "0xB329B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xB32A7C", Offset = "0xB32A7C", VA = "0xB32A7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xB32B44", Offset = "0xB32B44", VA = "0xB32B44", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xB32F60", Offset = "0xB32F60", VA = "0xB32F60", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xB33010", Offset = "0xB33010", VA = "0xB33010", Slot = "6")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xB32ADC", Offset = "0xB32ADC", VA = "0xB32ADC")]
		private void resetCoordinatePosition()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xB32C00", Offset = "0xB32C00", VA = "0xB32C00")]
		private Vector3 ScreenToCanvas(Vector3 screenPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xB33018", Offset = "0xB33018", VA = "0xB33018")]
		public UIWindowBase()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class BezierPath
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int SegmentsPerCurve;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MINIMUM_SQR_DISTANCE;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DIVISION_THRESHOLD;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vector2> controlPoints;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int curveCount;

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xB33080", Offset = "0xB33080", VA = "0xB33080")]
		public BezierPath()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xB3311C", Offset = "0xB3311C", VA = "0xB3311C")]
		public void SetControlPoints(Vector2[] newControlPoints)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xB331C8", Offset = "0xB331C8", VA = "0xB331C8")]
		public Vector2 CalculateBezierPoint(int curveIndex, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xB33338", Offset = "0xB33338", VA = "0xB33338")]
		public List<Vector2> GetDrawingPoints0()
		{
			return null;
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xB334DC", Offset = "0xB334DC", VA = "0xB334DC")]
		public List<Vector2> GetDrawingPoints1()
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xB3377C", Offset = "0xB3377C", VA = "0xB3377C")]
		public List<Vector2> GetDrawingPoints2()
		{
			return null;
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xB33880", Offset = "0xB33880", VA = "0xB33880")]
		private List<Vector2> FindDrawingPoints(int curveIndex)
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xB33A28", Offset = "0xB33A28", VA = "0xB33A28")]
		private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector2> pointList, int insertionIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xB332CC", Offset = "0xB332CC", VA = "0xB332CC")]
		private Vector2 CalculateBezierPoint(float t, Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000266")]
	public class CableCurve
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector2 m_start;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector2 m_end;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_slack;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int m_steps;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool m_regen;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2[] emptyCurve;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2[] points;

		[Token(Token = "0x17000206")]
		public Vector2 start
		{
			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xB33D00", Offset = "0xB33D00", VA = "0xB33D00")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000207")]
		public Vector2 end
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xB33D08", Offset = "0xB33D08", VA = "0xB33D08")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000208")]
		public float slack
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xB33D10", Offset = "0xB33D10", VA = "0xB33D10")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public int steps
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xB33D34", Offset = "0xB33D34", VA = "0xB33D34")]
			set
			{
			}
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xB33D5C", Offset = "0xB33D5C", VA = "0xB33D5C")]
		public CableCurve()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xB33E5C", Offset = "0xB33E5C", VA = "0xB33E5C")]
		public CableCurve(Vector2[] inputPoints)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xB33ED0", Offset = "0xB33ED0", VA = "0xB33ED0")]
		public Vector2[] Points()
		{
			return null;
		}
	}
	[Token(Token = "0x2000267")]
	public class Circle
	{
		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float xAxis;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float yAxis;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int steps;

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xB3439C", Offset = "0xB3439C", VA = "0xB3439C")]
		public Circle(float xAxis, float yAxis, int steps)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xB343D8", Offset = "0xB343D8", VA = "0xB343D8")]
		public Vector2 Evaluate(float t)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000268")]
	[RequireComponent(typeof(EventSystem))]
	public class DragCorrector : MonoBehaviour
	{
		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int baseTH;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int basePPI;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int dragTH;

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xB34430", Offset = "0xB34430", VA = "0xB34430")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xB34504", Offset = "0xB34504", VA = "0xB34504")]
		public DragCorrector()
		{
		}
	}
	[Token(Token = "0x2000269")]
	[RequireComponent(typeof(InputField))]
	public class InputFieldEnterSubmit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200026A")]
		public class EnterSubmitEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0xB34680", Offset = "0xB34680", VA = "0xB34680")]
			public EnterSubmitEvent()
			{
			}
		}

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EnterSubmitEvent EnterSubmit;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InputField _input;

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xB34518", Offset = "0xB34518", VA = "0xB34518")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xB345F4", Offset = "0xB345F4", VA = "0xB345F4")]
		public void OnEndEdit(string txt)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xB34678", Offset = "0xB34678", VA = "0xB34678")]
		public InputFieldEnterSubmit()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class NonDrawingGraphic : MaskableGraphic
	{
		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xB346C8", Offset = "0xB346C8", VA = "0xB346C8", Slot = "29")]
		public override void SetMaterialDirty()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xB346CC", Offset = "0xB346CC", VA = "0xB346CC", Slot = "28")]
		public override void SetVerticesDirty()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xB346D0", Offset = "0xB346D0", VA = "0xB346D0", Slot = "43")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xB346E8", Offset = "0xB346E8", VA = "0xB346E8")]
		public NonDrawingGraphic()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class PaginationManager : ToggleGroup
	{
		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Toggle> m_PaginationChildren;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ScrollSnapBase scrollSnap;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isAClick;

		[Token(Token = "0x1700020A")]
		public int CurrentPage
		{
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0xB346F0", Offset = "0xB346F0", VA = "0xB346F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xB3470C", Offset = "0xB3470C", VA = "0xB3470C")]
		protected PaginationManager()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xB34714", Offset = "0xB34714", VA = "0xB34714", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xB34B88", Offset = "0xB34B88", VA = "0xB34B88")]
		public void GoToScreen(int pageNo)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xB34BA4", Offset = "0xB34BA4", VA = "0xB34BA4")]
		private void ToggleClick(Toggle target)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xB34C34", Offset = "0xB34C34", VA = "0xB34C34")]
		private void ToggleClick(bool toggle)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xB34CE8", Offset = "0xB34CE8", VA = "0xB34CE8")]
		private void ToggleClick(int target)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xB34B0C", Offset = "0xB34B0C", VA = "0xB34B0C")]
		private void SetToggleGraphics(int pageNo)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xB34D10", Offset = "0xB34D10", VA = "0xB34D10")]
		private void OnPageChangeEnd(int pageNo)
		{
		}
	}
	[Token(Token = "0x200026D")]
	[RequireComponent(typeof(Text))]
	public class PPIViewer : MonoBehaviour
	{
		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text label;

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xB34D18", Offset = "0xB34D18", VA = "0xB34D18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xB34D70", Offset = "0xB34D70", VA = "0xB34D70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xB34E48", Offset = "0xB34E48", VA = "0xB34E48")]
		public PPIViewer()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollConflictManager : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IEndDragHandler, IDragHandler
	{
		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScrollRect ParentScrollRect;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ScrollRect _myScrollRect;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool scrollOther;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool scrollOtherHorizontally;

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xB34E50", Offset = "0xB34E50", VA = "0xB34E50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xB34F90", Offset = "0xB34F90", VA = "0xB34F90", Slot = "4")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xB3501C", Offset = "0xB3501C", VA = "0xB3501C", Slot = "5")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xB35080", Offset = "0xB35080", VA = "0xB35080", Slot = "6")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xB350B4", Offset = "0xB350B4", VA = "0xB350B4")]
		public ScrollConflictManager()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class ScrollRectEx : ScrollRect
	{
		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool routeToParent;

		[Token(Token = "0x6000E45")]
		private void DoForParents<T>(Action<T> action) where T : IEventSystemHandler
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xB350BC", Offset = "0xB350BC", VA = "0xB350BC", Slot = "43")]
		public override void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xB351B4", Offset = "0xB351B4", VA = "0xB351B4", Slot = "46")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xB352C4", Offset = "0xB352C4", VA = "0xB352C4", Slot = "44")]
		public override void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xB35478", Offset = "0xB35478", VA = "0xB35478", Slot = "45")]
		public override void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xB35588", Offset = "0xB35588", VA = "0xB35588", Slot = "42")]
		public override void OnScroll(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xB3573C", Offset = "0xB3573C", VA = "0xB3573C")]
		public ScrollRectEx()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollRectLinker : MonoBehaviour
	{
		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clamp;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollRect controllingScrollRect;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScrollRect scrollRect;

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xB35A8C", Offset = "0xB35A8C", VA = "0xB35A8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xB35BBC", Offset = "0xB35BBC", VA = "0xB35BBC")]
		private void MirrorPos(Vector2 scrollPos)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xB35C08", Offset = "0xB35C08", VA = "0xB35C08")]
		public ScrollRectLinker()
		{
		}
	}
	[Token(Token = "0x2000276")]
	[RequireComponent(typeof(ScrollRect))]
	public class ScrollRectTweener : MonoBehaviour, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 startPos;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 targetPos;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasHorizontal;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasVertical;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool disableDragWhileTweening;

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xB35C18", Offset = "0xB35C18", VA = "0xB35C18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xB35C94", Offset = "0xB35C94", VA = "0xB35C94")]
		public void ScrollHorizontal(float normalizedX)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xB35D1C", Offset = "0xB35D1C", VA = "0xB35D1C")]
		public void ScrollHorizontal(float normalizedX, float duration)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xB35DD4", Offset = "0xB35DD4", VA = "0xB35DD4")]
		public void ScrollVertical(float normalizedY)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xB35E24", Offset = "0xB35E24", VA = "0xB35E24")]
		public void ScrollVertical(float normalizedY, float duration)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xB35CE8", Offset = "0xB35CE8", VA = "0xB35CE8")]
		public void Scroll(Vector2 normalizedPos)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xB35E64", Offset = "0xB35E64", VA = "0xB35E64")]
		private float GetScrollDuration(Vector2 normalizedPos)
		{
			return default(float);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xB35F60", Offset = "0xB35F60", VA = "0xB35F60")]
		private Vector2 DeNormalize(Vector2 normalizedPos)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xB35F18", Offset = "0xB35F18", VA = "0xB35F18")]
		private Vector2 GetCurrentPos()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xB35D60", Offset = "0xB35D60", VA = "0xB35D60")]
		public void Scroll(Vector2 normalizedPos, float duration)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xB3601C", Offset = "0xB3601C", VA = "0xB3601C")]
		private IEnumerator DoMove(float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xB360C8", Offset = "0xB360C8", VA = "0xB360C8")]
		public Vector2 EaseVector(float currentTime, Vector2 startValue, Vector2 changeInValue, float duration)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xB36118", Offset = "0xB36118", VA = "0xB36118", Slot = "4")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xB36128", Offset = "0xB36128", VA = "0xB36128")]
		private void StopScroll()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xB36000", Offset = "0xB36000", VA = "0xB36000")]
		private void LockScrollability()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xB36164", Offset = "0xB36164", VA = "0xB36164")]
		private void RestoreScrollability()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xB3618C", Offset = "0xB3618C", VA = "0xB3618C")]
		public ScrollRectTweener()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[RequireComponent(typeof(Button))]
	public class SelectableScaler : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve animCurve;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initScale;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Selectable selectable;

		[Token(Token = "0x1700020D")]
		public Selectable Target
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xB36330", Offset = "0xB36330", VA = "0xB36330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xB363D8", Offset = "0xB363D8", VA = "0xB363D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xB36484", Offset = "0xB36484", VA = "0xB36484")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xB364AC", Offset = "0xB364AC", VA = "0xB364AC", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xB36588", Offset = "0xB36588", VA = "0xB36588", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xB36664", Offset = "0xB36664", VA = "0xB36664")]
		private IEnumerator ScaleIN()
		{
			return null;
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xB36700", Offset = "0xB36700", VA = "0xB36700")]
		private IEnumerator ScaleOUT()
		{
			return null;
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xB3679C", Offset = "0xB3679C", VA = "0xB3679C")]
		public SelectableScaler()
		{
		}
	}
	[Token(Token = "0x200027B")]
	internal static class SetPropertyUtility
	{
		[Token(Token = "0x6000E84")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000E85")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200027C")]
	public static class UIExtensionMethods
	{
		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xB36BBC", Offset = "0xB36BBC", VA = "0xB36BBC")]
		public static Canvas GetParentCanvas(this RectTransform rt)
		{
			return null;
		}
	}
	[Token(Token = "0x200027D")]
	[RequireComponent(typeof(RectTransform), typeof(Graphic))]
	public class UIHighlightable : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Serializable]
		[Token(Token = "0x200027E")]
		public class InteractableChangedEvent : UnityEvent<bool>
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xB36F84", Offset = "0xB36F84", VA = "0xB36F84")]
			public InteractableChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Graphic m_Graphic;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_Highlighted;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool m_Pressed;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		private bool m_Interactable;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[SerializeField]
		private bool m_ClickToHold;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color NormalColor;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color HighlightedColor;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color PressedColor;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color DisabledColor;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractableChangedEvent OnInteractableChanged;

		[Token(Token = "0x17000212")]
		public bool Interactable
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xB36CF8", Offset = "0xB36CF8", VA = "0xB36CF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xB36D00", Offset = "0xB36D00", VA = "0xB36D00")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public bool ClickToHold
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xB36DD0", Offset = "0xB36DD0", VA = "0xB36DD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xB36DD8", Offset = "0xB36DD8", VA = "0xB36DD8")]
			set
			{
			}
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xB36DE4", Offset = "0xB36DE4", VA = "0xB36DE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xB36E3C", Offset = "0xB36E3C", VA = "0xB36E3C", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xB36E8C", Offset = "0xB36E8C", VA = "0xB36E8C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xB36ED8", Offset = "0xB36ED8", VA = "0xB36ED8", Slot = "6")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xB36F28", Offset = "0xB36F28", VA = "0xB36F28", Slot = "7")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xB36D68", Offset = "0xB36D68", VA = "0xB36D68")]
		private void HighlightInteractable(Graphic graphic)
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xB36F3C", Offset = "0xB36F3C", VA = "0xB36F3C")]
		public UIHighlightable()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[RequireComponent(typeof(UILineRenderer))]
	[ExecuteInEditMode]
	public class UILineConnector : MonoBehaviour
	{
		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform[] transforms;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2[] previousPositions;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform canvas;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform rt;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UILineRenderer lr;

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xB36FCC", Offset = "0xB36FCC", VA = "0xB36FCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xB37098", Offset = "0xB37098", VA = "0xB37098")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xB37450", Offset = "0xB37450", VA = "0xB37450")]
		public UILineConnector()
		{
		}
	}
	[Token(Token = "0x2000280")]
	[RequireComponent(typeof(ScrollRect))]
	public class UIScrollToSelection : MonoBehaviour
	{
		[Token(Token = "0x2000281")]
		public enum ScrollType
		{
			[Token(Token = "0x4001031")]
			VERTICAL,
			[Token(Token = "0x4001032")]
			HORIZONTAL,
			[Token(Token = "0x4001033")]
			BOTH
		}

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ScrollType scrollDirection;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float scrollSpeed;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool cancelScrollOnInput;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<KeyCode> cancelScrollKeycodes;

		[Token(Token = "0x17000214")]
		protected RectTransform LayoutListGroup
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xB37458", Offset = "0xB37458", VA = "0xB37458")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		protected ScrollType ScrollDirection
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xB374D8", Offset = "0xB374D8", VA = "0xB374D8")]
			get
			{
				return default(ScrollType);
			}
		}

		[Token(Token = "0x17000216")]
		protected float ScrollSpeed
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xB374E0", Offset = "0xB374E0", VA = "0xB374E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000217")]
		protected bool CancelScrollOnInput
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xB374E8", Offset = "0xB374E8", VA = "0xB374E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000218")]
		protected List<KeyCode> CancelScrollKeycodes
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xB374F0", Offset = "0xB374F0", VA = "0xB374F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		protected RectTransform ScrollWindow
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xB374F8", Offset = "0xB374F8", VA = "0xB374F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xB37500", Offset = "0xB37500", VA = "0xB37500")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		protected ScrollRect TargetScrollRect
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xB37508", Offset = "0xB37508", VA = "0xB37508")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xB37510", Offset = "0xB37510", VA = "0xB37510")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		protected EventSystem CurrentEventSystem
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xB37518", Offset = "0xB37518", VA = "0xB37518")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		protected GameObject LastCheckedGameObject
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xB37568", Offset = "0xB37568", VA = "0xB37568")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xB37570", Offset = "0xB37570", VA = "0xB37570")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		protected GameObject CurrentSelectedGameObject
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xB37578", Offset = "0xB37578", VA = "0xB37578")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		protected RectTransform CurrentTargetRectTransform
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xB375D8", Offset = "0xB375D8", VA = "0xB375D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xB375E0", Offset = "0xB375E0", VA = "0xB375E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		protected bool IsManualScrollingAvailable
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xB375E8", Offset = "0xB375E8", VA = "0xB375E8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xB375F0", Offset = "0xB375F0", VA = "0xB375F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xB375FC", Offset = "0xB375FC", VA = "0xB375FC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xB37690", Offset = "0xB37690", VA = "0xB37690", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xB376B0", Offset = "0xB376B0", VA = "0xB376B0")]
		private void UpdateReferences()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xB37840", Offset = "0xB37840", VA = "0xB37840")]
		private void CheckIfScrollingShouldBeLocked()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xB378E4", Offset = "0xB378E4", VA = "0xB378E4")]
		private void ScrollRectToLevelSelection()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xB37A98", Offset = "0xB37A98", VA = "0xB37A98")]
		private void UpdateVerticalScrollPosition(RectTransform selection)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xB37C40", Offset = "0xB37C40", VA = "0xB37C40")]
		private void UpdateHorizontalScrollPosition(RectTransform selection)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xB37DEC", Offset = "0xB37DEC", VA = "0xB37DEC")]
		private float GetScrollOffset(float position, float listAnchorPosition, float targetLength, float maskLength)
		{
			return default(float);
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xB37E2C", Offset = "0xB37E2C", VA = "0xB37E2C")]
		public UIScrollToSelection()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[RequireComponent(typeof(ScrollRect))]
	public class UIScrollToSelectionXY : MonoBehaviour
	{
		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float scrollSpeed;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform layoutListGroup;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RectTransform targetScrollObject;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool scrollToSelection;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform scrollWindow;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform currentCanvas;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ScrollRect targetScrollRect;

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xB37EBC", Offset = "0xB37EBC", VA = "0xB37EBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xB37F50", Offset = "0xB37F50", VA = "0xB37F50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xB37F54", Offset = "0xB37F54", VA = "0xB37F54")]
		private void ScrollRectToLevelSelection()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xB382E0", Offset = "0xB382E0", VA = "0xB382E0")]
		public UIScrollToSelectionXY()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[RequireComponent(typeof(Selectable))]
	public class UISelectableExtension : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Serializable]
		[Token(Token = "0x2000284")]
		public class UIButtonEvent : UnityEvent<PointerEventData.InputButton>
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xB3845C", Offset = "0xB3845C", VA = "0xB3845C")]
			public UIButtonEvent()
			{
			}
		}

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UIButtonEvent OnButtonPress;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIButtonEvent OnButtonRelease;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UIButtonEvent OnButtonHeld;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _pressed;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PointerEventData _heldEventData;

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xB382F8", Offset = "0xB382F8", VA = "0xB382F8", Slot = "4")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xB3836C", Offset = "0xB3836C", VA = "0xB3836C", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xB383DC", Offset = "0xB383DC", VA = "0xB383DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xB3844C", Offset = "0xB3844C", VA = "0xB3844C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xB38454", Offset = "0xB38454", VA = "0xB38454")]
		public UISelectableExtension()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class UI_InfiniteScroll : MonoBehaviour
	{
		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool InitByUser;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ContentSizeFitter _contentSizeFitter;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VerticalLayoutGroup _verticalLayoutGroup;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HorizontalLayoutGroup _horizontalLayoutGroup;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup _gridLayoutGroup;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _isVertical;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool _isHorizontal;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _disableMarginX;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _disableMarginY;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _hasDisabledGridComponents;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<RectTransform> items;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 _newAnchoredPosition;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _treshold;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int _itemCount;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _recordOffsetX;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _recordOffsetY;

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xB384A4", Offset = "0xB384A4", VA = "0xB384A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xB384B4", Offset = "0xB384B4", VA = "0xB384B4")]
		public void Init()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xB389B4", Offset = "0xB389B4", VA = "0xB389B4")]
		private void DisableGridComponents()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xB38C14", Offset = "0xB38C14", VA = "0xB38C14")]
		public void OnScroll(Vector2 pos)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xB390C0", Offset = "0xB390C0", VA = "0xB390C0")]
		public UI_InfiniteScroll()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class UI_ScrollRectOcclusion : MonoBehaviour
	{
		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool InitByUser;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ContentSizeFitter _contentSizeFitter;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VerticalLayoutGroup _verticalLayoutGroup;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HorizontalLayoutGroup _horizontalLayoutGroup;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup _gridLayoutGroup;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _isVertical;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool _isHorizontal;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _disableMarginX;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _disableMarginY;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool hasDisabledGridComponents;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<RectTransform> items;

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xB39188", Offset = "0xB39188", VA = "0xB39188")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xB39198", Offset = "0xB39198", VA = "0xB39198")]
		public void Init()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xB39650", Offset = "0xB39650", VA = "0xB39650")]
		private void DisableGridComponents()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xB3988C", Offset = "0xB3988C", VA = "0xB3988C")]
		public void OnScroll(Vector2 pos)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xB39BF0", Offset = "0xB39BF0", VA = "0xB39BF0")]
		public UI_ScrollRectOcclusion()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class UI_TweenScale : MonoBehaviour
	{
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve animCurve;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isLoop;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool playAtAwake;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isUniform;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve animCurveY;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initScale;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform myTransform;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 newScale;

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xB39C78", Offset = "0xB39C78", VA = "0xB39C78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xB39D0C", Offset = "0xB39D0C", VA = "0xB39D0C")]
		public void Play()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xB39D58", Offset = "0xB39D58", VA = "0xB39D58")]
		private IEnumerator Tween()
		{
			return null;
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xB39DF4", Offset = "0xB39DF4", VA = "0xB39DF4")]
		public void ResetTween()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xB39E5C", Offset = "0xB39E5C", VA = "0xB39E5C")]
		public UI_TweenScale()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class VRCursor : MonoBehaviour
	{
		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float xSens;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ySens;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Collider currentCollider;

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xB3A104", Offset = "0xB3A104", VA = "0xB3A104")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xB3A410", Offset = "0xB3A410", VA = "0xB3A410")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xB3A614", Offset = "0xB3A614", VA = "0xB3A614")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xB3A7F8", Offset = "0xB3A7F8", VA = "0xB3A7F8")]
		public VRCursor()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class VRInputModule : BaseInputModule
	{
		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GameObject targetObject;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VRInputModule _singleton;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int counter;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool mouseClicked;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static Vector3 cursorPosition;

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xB3A800", Offset = "0xB3A800", VA = "0xB3A800", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xB3A850", Offset = "0xB3A850", VA = "0xB3A850", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xB3A260", Offset = "0xB3A260", VA = "0xB3A260")]
		public static void PointerSubmit(GameObject obj)
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xB3A648", Offset = "0xB3A648", VA = "0xB3A648")]
		public static void PointerExit(GameObject obj)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xB3A450", Offset = "0xB3A450", VA = "0xB3A450")]
		public static void PointerEnter(GameObject obj)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xB3A8DC", Offset = "0xB3A8DC", VA = "0xB3A8DC")]
		public VRInputModule()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions.ColorPicker
{
	[Token(Token = "0x200028B")]
	[RequireComponent(typeof(Image))]
	public class ColorImage : MonoBehaviour
	{
		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Image image;

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xB3A8E4", Offset = "0xB3A8E4", VA = "0xB3A8E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xB3A9C0", Offset = "0xB3A9C0", VA = "0xB3A9C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xB3AA68", Offset = "0xB3AA68", VA = "0xB3AA68")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xB3AA8C", Offset = "0xB3AA8C", VA = "0xB3AA8C")]
		public ColorImage()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[RequireComponent(typeof(Text))]
	public class ColorLabel : MonoBehaviour
	{
		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string prefix;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minValue;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxValue;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int precision;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text label;

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xB3AA94", Offset = "0xB3AA94", VA = "0xB3AA94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xB3AAEC", Offset = "0xB3AAEC", VA = "0xB3AAEC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xB3AC64", Offset = "0xB3AC64", VA = "0xB3AC64")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xB3ADD0", Offset = "0xB3ADD0", VA = "0xB3ADD0")]
		private void ColorChanged(Color color)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xB3AEC8", Offset = "0xB3AEC8", VA = "0xB3AEC8")]
		private void HSVChanged(float hue, float sateration, float value)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xB3ADD4", Offset = "0xB3ADD4", VA = "0xB3ADD4")]
		private void UpdateValue()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xB3AF80", Offset = "0xB3AF80", VA = "0xB3AF80")]
		private string ConvertToDisplayString(float value)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xB3B080", Offset = "0xB3B080", VA = "0xB3B080")]
		public ColorLabel()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class ColorPickerControl : MonoBehaviour
	{
		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _hue;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _saturation;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _brightness;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _red;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _green;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _blue;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _alpha;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColorChangedEvent onValueChanged;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HSVChangedEvent onHSVChanged;

		[Token(Token = "0x17000222")]
		public Color CurrentColor
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xB3B0E0", Offset = "0xB3B0E0", VA = "0xB3B0E0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0xB3B0EC", Offset = "0xB3B0EC", VA = "0xB3B0EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public float H
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xB3B21C", Offset = "0xB3B21C", VA = "0xB3B21C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0xB3B224", Offset = "0xB3B224", VA = "0xB3B224")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public float S
		{
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0xB3B294", Offset = "0xB3B294", VA = "0xB3B294")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0xB3B29C", Offset = "0xB3B29C", VA = "0xB3B29C")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public float V
		{
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0xB3B2CC", Offset = "0xB3B2CC", VA = "0xB3B2CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0xB3B2D4", Offset = "0xB3B2D4", VA = "0xB3B2D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public float R
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0xB3B304", Offset = "0xB3B304", VA = "0xB3B304")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0xB3B30C", Offset = "0xB3B30C", VA = "0xB3B30C")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public float G
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0xB3B33C", Offset = "0xB3B33C", VA = "0xB3B33C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0xB3B344", Offset = "0xB3B344", VA = "0xB3B344")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float B
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0xB3B374", Offset = "0xB3B374", VA = "0xB3B374")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xB3B37C", Offset = "0xB3B37C", VA = "0xB3B37C")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		private float A
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0xB3B3AC", Offset = "0xB3B3AC", VA = "0xB3B3AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0xB3B3B4", Offset = "0xB3B3B4", VA = "0xB3B3B4")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xB3B218", Offset = "0xB3B218", VA = "0xB3B218")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xB3B158", Offset = "0xB3B158", VA = "0xB3B158")]
		private void RGBChanged()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xB3B254", Offset = "0xB3B254", VA = "0xB3B254")]
		private void HSVChanged()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xB3B194", Offset = "0xB3B194", VA = "0xB3B194")]
		private void SendChangedEvent()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xB3B54C", Offset = "0xB3B54C", VA = "0xB3B54C")]
		public void AssignColor(ColorValues type, float value)
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xB3AECC", Offset = "0xB3AECC", VA = "0xB3AECC")]
		public float GetValue(ColorValues type)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xB3B5A0", Offset = "0xB3B5A0", VA = "0xB3B5A0")]
		public ColorPickerControl()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class ColorPickerPresets : MonoBehaviour
	{
		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] presets;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image createPresetImage;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xB3B658", Offset = "0xB3B658", VA = "0xB3B658")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xB3B700", Offset = "0xB3B700", VA = "0xB3B700")]
		public void CreatePresetButton()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xB3B810", Offset = "0xB3B810", VA = "0xB3B810")]
		public void PresetSelect(Image sender)
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xB3B848", Offset = "0xB3B848", VA = "0xB3B848")]
		private void ColorChanged(Color color)
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xB3B86C", Offset = "0xB3B86C", VA = "0xB3B86C")]
		public ColorPickerPresets()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class ColorPickerTester : MonoBehaviour
	{
		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer pickerRenderer;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorPickerControl picker;

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xB3B874", Offset = "0xB3B874", VA = "0xB3B874")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xB3B8CC", Offset = "0xB3B8CC", VA = "0xB3B8CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xB3B974", Offset = "0xB3B974", VA = "0xB3B974")]
		public ColorPickerTester()
		{
		}
	}
	[Token(Token = "0x2000290")]
	[RequireComponent(typeof(Slider))]
	public class ColorSlider : MonoBehaviour
	{
		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl ColorPicker;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Slider slider;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool listen;

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xB3B9D4", Offset = "0xB3B9D4", VA = "0xB3B9D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xB3BBB0", Offset = "0xB3BBB0", VA = "0xB3BBB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xB3BD50", Offset = "0xB3BD50", VA = "0xB3BD50")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xB3BDCC", Offset = "0xB3BDCC", VA = "0xB3BDCC")]
		private void HSVChanged(float hue, float saturation, float value)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xB3BE30", Offset = "0xB3BE30", VA = "0xB3BE30")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xB3BE74", Offset = "0xB3BE74", VA = "0xB3BE74")]
		public ColorSlider()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(RawImage))]
	public class ColorSliderImage : MonoBehaviour
	{
		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColorValues type;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Slider.Direction direction;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RawImage image;

		[Token(Token = "0x1700022A")]
		private RectTransform RectTransform
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0xB3BE84", Offset = "0xB3BE84", VA = "0xB3BE84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xB3BEE4", Offset = "0xB3BEE4", VA = "0xB3BEE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xB3D0C0", Offset = "0xB3D0C0", VA = "0xB3D0C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xB3D238", Offset = "0xB3D238", VA = "0xB3D238")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xB3D3A4", Offset = "0xB3D3A4", VA = "0xB3D3A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xB3D448", Offset = "0xB3D448", VA = "0xB3D448")]
		private void ColorChanged(Color newColor)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xB3D470", Offset = "0xB3D470", VA = "0xB3D470")]
		private void ColorChanged(float hue, float saturation, float value)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xB3C018", Offset = "0xB3C018", VA = "0xB3C018")]
		private void RegenerateTexture()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xB3D498", Offset = "0xB3D498", VA = "0xB3D498")]
		public ColorSliderImage()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public enum ColorValues
	{
		[Token(Token = "0x4001093")]
		R,
		[Token(Token = "0x4001094")]
		G,
		[Token(Token = "0x4001095")]
		B,
		[Token(Token = "0x4001096")]
		A,
		[Token(Token = "0x4001097")]
		Hue,
		[Token(Token = "0x4001098")]
		Saturation,
		[Token(Token = "0x4001099")]
		Value
	}
	[Token(Token = "0x2000293")]
	[RequireComponent(typeof(InputField))]
	public class HexColorField : MonoBehaviour
	{
		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl ColorPicker;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool displayAlpha;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputField hexInputField;

		[Token(Token = "0x400109D")]
		private const string hexRegex = "^#?(?:[0-9a-fA-F]{3,4}){1,2}$";

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xB3D4A0", Offset = "0xB3D4A0", VA = "0xB3D4A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xB3D5F8", Offset = "0xB3D5F8", VA = "0xB3D5F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xB3D71C", Offset = "0xB3D71C", VA = "0xB3D71C")]
		private void UpdateHex(Color newColor)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xB3DC64", Offset = "0xB3DC64", VA = "0xB3DC64")]
		private void UpdateColor(string newHex)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xB3DA0C", Offset = "0xB3DA0C", VA = "0xB3DA0C")]
		private string ColorToHex(Color32 color)
		{
			return null;
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xB3DD44", Offset = "0xB3DD44", VA = "0xB3DD44")]
		public static bool HexToColor(string hex, out Color32 color)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xB3E174", Offset = "0xB3E174", VA = "0xB3E174")]
		public HexColorField()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public static class HSVUtil
	{
		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xB3B3CC", Offset = "0xB3B3CC", VA = "0xB3B3CC")]
		public static HsvColor ConvertRgbToHsv(Color color)
		{
			return default(HsvColor);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xB3E17C", Offset = "0xB3E17C", VA = "0xB3E17C")]
		public static HsvColor ConvertRgbToHsv(double r, double b, double g)
		{
			return default(HsvColor);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xB3B454", Offset = "0xB3B454", VA = "0xB3B454")]
		public static Color ConvertHsvToRgb(double h, double s, double v, float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x2000295")]
	public struct HsvColor
	{
		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double H;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double S;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double V;

		[Token(Token = "0x1700022B")]
		public float NormalizedH
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0xB3B424", Offset = "0xB3B424", VA = "0xB3B424")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022C")]
		public float NormalizedS
		{
			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0xB3B43C", Offset = "0xB3B43C", VA = "0xB3B43C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022D")]
		public float NormalizedV
		{
			[Token(Token = "0x6000F20")]
			[Address(RVA = "0xB3B448", Offset = "0xB3B448", VA = "0xB3B448")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xB3E2C4", Offset = "0xB3E2C4", VA = "0xB3E2C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000296")]
	[RequireComponent(typeof(BoxSlider), typeof(RawImage))]
	[ExecuteInEditMode]
	public class SVBoxSlider : MonoBehaviour
	{
		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickerControl picker;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoxSlider slider;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RawImage image;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastH;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool listen;

		[Token(Token = "0x1700022E")]
		public RectTransform RectTransform
		{
			[Token(Token = "0x6000F22")]
			[Address(RVA = "0xB3E580", Offset = "0xB3E580", VA = "0xB3E580")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xB3E5E0", Offset = "0xB3E5E0", VA = "0xB3E5E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xB3EB50", Offset = "0xB3EB50", VA = "0xB3EB50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xB3ECC8", Offset = "0xB3ECC8", VA = "0xB3ECC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xB3EE34", Offset = "0xB3EE34", VA = "0xB3EE34")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xB3EED8", Offset = "0xB3EED8", VA = "0xB3EED8")]
		private void SliderChanged(float saturation, float value)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xB3EF24", Offset = "0xB3EF24", VA = "0xB3EF24")]
		private void HSVChanged(float h, float s, float v)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xB3E678", Offset = "0xB3E678", VA = "0xB3E678")]
		private void RegenerateSVTexture()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xB3EFC8", Offset = "0xB3EFC8", VA = "0xB3EFC8")]
		public SVBoxSlider()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions.Tweens
{
	[Token(Token = "0x2000297")]
	public struct FloatTween : ITweenValue
	{
		[Token(Token = "0x2000298")]
		public class FloatTweenCallback : UnityEvent<float>
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xB3F148", Offset = "0xB3F148", VA = "0xB3F148")]
			public FloatTweenCallback()
			{
			}
		}

		[Token(Token = "0x2000299")]
		public class FloatFinishCallback : UnityEvent
		{
		}

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float m_StartFloat;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float m_TargetFloat;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_Duration;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool m_IgnoreTimeScale;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FloatTweenCallback m_Target;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FloatFinishCallback m_Finish;

		[Token(Token = "0x1700022F")]
		public float startFloat
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0xB3EFE0", Offset = "0xB3EFE0", VA = "0xB3EFE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public float targetFloat
		{
			[Token(Token = "0x6000F2C")]
			[Address(RVA = "0xB3EFE8", Offset = "0xB3EFE8", VA = "0xB3EFE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public float duration
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0xB3EFF0", Offset = "0xB3EFF0", VA = "0xB3EFF0", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0xB3EFF8", Offset = "0xB3EFF8", VA = "0xB3EFF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public bool ignoreTimeScale
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0xB3F000", Offset = "0xB3F000", VA = "0xB3F000", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0xB3F008", Offset = "0xB3F008", VA = "0xB3F008")]
			set
			{
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xB3F014", Offset = "0xB3F014", VA = "0xB3F014", Slot = "4")]
		public void TweenValue(float floatPercentage)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xB3F0B0", Offset = "0xB3F0B0", VA = "0xB3F0B0")]
		public void AddOnChangedCallback(UnityAction<float> callback)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xB3F0A0", Offset = "0xB3F0A0", VA = "0xB3F0A0", Slot = "7")]
		public bool ValidTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xB3F190", Offset = "0xB3F190", VA = "0xB3F190", Slot = "8")]
		public void Finished()
		{
		}
	}
	[Token(Token = "0x200029A")]
	internal interface ITweenValue
	{
		[Token(Token = "0x17000233")]
		bool ignoreTimeScale
		{
			[Token(Token = "0x6000F37")]
			get;
		}

		[Token(Token = "0x17000234")]
		float duration
		{
			[Token(Token = "0x6000F38")]
			get;
		}

		[Token(Token = "0x6000F36")]
		void TweenValue(float floatPercentage);

		[Token(Token = "0x6000F39")]
		bool ValidTarget();

		[Token(Token = "0x6000F3A")]
		void Finished();
	}
	[Token(Token = "0x200029B")]
	internal class TweenRunner<T> where T : struct, ITweenValue
	{
		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected MonoBehaviour m_CoroutineContainer;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IEnumerator m_Tween;

		[Token(Token = "0x6000F3B")]
		private static IEnumerator Start(T tweenInfo)
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		public void Init(MonoBehaviour coroutineContainer)
		{
		}

		[Token(Token = "0x6000F3D")]
		public void StartTween(T info)
		{
		}

		[Token(Token = "0x6000F3E")]
		public TweenRunner()
		{
		}
	}
}
namespace UnityEngine.UI.Extensions.Examples
{
	[Token(Token = "0x200029D")]
	public class ComboBoxChanged : MonoBehaviour
	{
		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xB3F1A4", Offset = "0xB3F1A4", VA = "0xB3F1A4")]
		public void ComboBoxChangedEvent(string text)
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xB3F248", Offset = "0xB3F248", VA = "0xB3F248")]
		public void AutoCompleteComboBoxChangedEvent(string text)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xB3F2EC", Offset = "0xB3F2EC", VA = "0xB3F2EC")]
		public void AutoCompleteComboBoxSelectionChangedEvent(string text, bool valid)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xB3F530", Offset = "0xB3F530", VA = "0xB3F530")]
		public void DropDownChangedEvent(int newValue)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xB3F5E8", Offset = "0xB3F5E8", VA = "0xB3F5E8")]
		public ComboBoxChanged()
		{
		}
	}
	[Token(Token = "0x200029E")]
	[RequireComponent(typeof(Image))]
	public class CooldownEffect_Image : MonoBehaviour
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CooldownButton cooldown;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text displayText;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image target;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string originalText;

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xB3F5F0", Offset = "0xB3F5F0", VA = "0xB3F5F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xB3F6C8", Offset = "0xB3F6C8", VA = "0xB3F6C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xB3F7E4", Offset = "0xB3F7E4", VA = "0xB3F7E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xB3F870", Offset = "0xB3F870", VA = "0xB3F870")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xB3F908", Offset = "0xB3F908", VA = "0xB3F908")]
		public CooldownEffect_Image()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[RequireComponent(typeof(SoftMaskScript))]
	public class CooldownEffect_SAUIM : MonoBehaviour
	{
		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CooldownButton cooldown;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SoftMaskScript sauim;

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xB3F910", Offset = "0xB3F910", VA = "0xB3F910")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xB3F9E8", Offset = "0xB3F9E8", VA = "0xB3F9E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xB3FA30", Offset = "0xB3FA30", VA = "0xB3FA30")]
		public CooldownEffect_SAUIM()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class Example01CellDto
	{
		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Message;

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xB3FA38", Offset = "0xB3FA38", VA = "0xB3FA38")]
		public Example01CellDto()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class Example01Scene : MonoBehaviour
	{
		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Example01ScrollView scrollView;

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xB3FA40", Offset = "0xB3FA40", VA = "0xB3FA40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xB3FC14", Offset = "0xB3FC14", VA = "0xB3FC14")]
		public Example01Scene()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class Example01ScrollView : FancyScrollView<Example01CellDto>
	{
		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private ScrollPositionController scrollPositionController;

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xB3FD38", Offset = "0xB3FD38", VA = "0xB3FD38")]
		private new void Awake()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xB3FB8C", Offset = "0xB3FB8C", VA = "0xB3FB8C")]
		public void UpdateData(List<Example01CellDto> data)
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xB3FE00", Offset = "0xB3FE00", VA = "0xB3FE00")]
		public Example01ScrollView()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class Example01ScrollViewCell : FancyScrollViewCell<Example01CellDto>
	{
		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator animator;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text message;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly int scrollTriggerHash;

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xB3FE48", Offset = "0xB3FE48", VA = "0xB3FE48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xB3FF8C", Offset = "0xB3FF8C", VA = "0xB3FF8C", Slot = "5")]
		public override void UpdateContent(Example01CellDto itemData)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xB3FFB8", Offset = "0xB3FFB8", VA = "0xB3FFB8", Slot = "6")]
		public override void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xB3FFF4", Offset = "0xB3FFF4", VA = "0xB3FFF4")]
		public Example01ScrollViewCell()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class Example02CellDto
	{
		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Message;

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xB40068", Offset = "0xB40068", VA = "0xB40068")]
		public Example02CellDto()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class Example02Scene : MonoBehaviour
	{
		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Example02ScrollView scrollView;

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xB40070", Offset = "0xB40070", VA = "0xB40070")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xB40244", Offset = "0xB40244", VA = "0xB40244")]
		public Example02Scene()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class Example02ScrollView : FancyScrollView<Example02CellDto, Example02ScrollViewContext>
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private ScrollPositionController scrollPositionController;

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xB40368", Offset = "0xB40368", VA = "0xB40368")]
		private new void Awake()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xB401BC", Offset = "0xB401BC", VA = "0xB401BC")]
		public void UpdateData(List<Example02CellDto> data)
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xB40564", Offset = "0xB40564", VA = "0xB40564")]
		private void OnPressedCell(Example02ScrollViewCell cell)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xB405F0", Offset = "0xB405F0", VA = "0xB405F0")]
		private void CellSelected(int cellIndex)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xB4064C", Offset = "0xB4064C", VA = "0xB4064C")]
		public Example02ScrollView()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public class Example02ScrollViewCell : FancyScrollViewCell<Example02CellDto, Example02ScrollViewContext>
	{
		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator animator;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text message;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image image;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button button;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int scrollTriggerHash;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Example02ScrollViewContext context;

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xB40694", Offset = "0xB40694", VA = "0xB40694")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xB40840", Offset = "0xB40840", VA = "0xB40840", Slot = "4")]
		public override void SetContext(Example02ScrollViewContext context)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xB40848", Offset = "0xB40848", VA = "0xB40848", Slot = "5")]
		public override void UpdateContent(Example02CellDto itemData)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xB40914", Offset = "0xB40914", VA = "0xB40914", Slot = "6")]
		public override void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xB40950", Offset = "0xB40950", VA = "0xB40950")]
		public void OnPressedCell()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xB40988", Offset = "0xB40988", VA = "0xB40988")]
		public Example02ScrollViewCell()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class Example02ScrollViewContext
	{
		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<Example02ScrollViewCell> OnPressedCell;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SelectedIndex;

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xB4055C", Offset = "0xB4055C", VA = "0xB4055C")]
		public Example02ScrollViewContext()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class Example03CellDto
	{
		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Message;

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xB409FC", Offset = "0xB409FC", VA = "0xB409FC")]
		public Example03CellDto()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class Example03Scene : MonoBehaviour
	{
		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Example03ScrollView scrollView;

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xB40A04", Offset = "0xB40A04", VA = "0xB40A04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xB40BD8", Offset = "0xB40BD8", VA = "0xB40BD8")]
		public Example03Scene()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public class Example03ScrollView : FancyScrollView<Example03CellDto, Example03ScrollViewContext>
	{
		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private ScrollPositionController scrollPositionController;

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xB40CFC", Offset = "0xB40CFC", VA = "0xB40CFC")]
		private new void Awake()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xB40B50", Offset = "0xB40B50", VA = "0xB40B50")]
		public void UpdateData(List<Example03CellDto> data)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xB40EF0", Offset = "0xB40EF0", VA = "0xB40EF0")]
		private void OnPressedCell(Example03ScrollViewCell cell)
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xB40F7C", Offset = "0xB40F7C", VA = "0xB40F7C")]
		private void CellSelected(int cellIndex)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xB40FD8", Offset = "0xB40FD8", VA = "0xB40FD8")]
		public Example03ScrollView()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class Example03ScrollViewCell : FancyScrollViewCell<Example03CellDto, Example03ScrollViewContext>
	{
		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator animator;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text message;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image image;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button button;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int scrollTriggerHash;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Example03ScrollViewContext context;

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xB41020", Offset = "0xB41020", VA = "0xB41020")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xB411CC", Offset = "0xB411CC", VA = "0xB411CC", Slot = "4")]
		public override void SetContext(Example03ScrollViewContext context)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xB411D4", Offset = "0xB411D4", VA = "0xB411D4", Slot = "5")]
		public override void UpdateContent(Example03CellDto itemData)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xB412A0", Offset = "0xB412A0", VA = "0xB412A0", Slot = "6")]
		public override void UpdatePosition(float position)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xB412DC", Offset = "0xB412DC", VA = "0xB412DC")]
		public void OnPressedCell()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xB41314", Offset = "0xB41314", VA = "0xB41314")]
		public Example03ScrollViewCell()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class Example03ScrollViewContext
	{
		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<Example03ScrollViewCell> OnPressedCell;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SelectedIndex;

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xB41388", Offset = "0xB41388", VA = "0xB41388")]
		public Example03ScrollViewContext()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class PaginationScript : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HorizontalScrollSnap hss;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int Page;

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xB41390", Offset = "0xB41390", VA = "0xB41390", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xB41418", Offset = "0xB41418", VA = "0xB41418")]
		public PaginationScript()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class UpdateScrollSnap : MonoBehaviour
	{
		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HorizontalScrollSnap HSS;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VerticalScrollSnap VSS;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HorizontalPagePrefab;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject VerticalPagePrefab;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InputField JumpPage;

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xB41420", Offset = "0xB41420", VA = "0xB41420")]
		public void AddButton()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xB41544", Offset = "0xB41544", VA = "0xB41544")]
		public void RemoveButton()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xB41634", Offset = "0xB41634", VA = "0xB41634")]
		public void JumpToPage()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xB41718", Offset = "0xB41718", VA = "0xB41718")]
		public void SelectionStartChange()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xB41780", Offset = "0xB41780", VA = "0xB41780")]
		public void SelectionEndChange()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xB417E8", Offset = "0xB417E8", VA = "0xB417E8")]
		public void PageChange(int page)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xB418A8", Offset = "0xB418A8", VA = "0xB418A8")]
		public void RemoveAll()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xB418F0", Offset = "0xB418F0", VA = "0xB418F0")]
		public void JumpToSelectedToggle(int page)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xB4190C", Offset = "0xB4190C", VA = "0xB4190C")]
		public UpdateScrollSnap()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public class AwesomeMenu : AdamKaposMenu<AwesomeMenu>
	{
		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image Background;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Title;

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xB41914", Offset = "0xB41914", VA = "0xB41914")]
		public static void Show(float awesomeness)
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xB41AE0", Offset = "0xB41AE0", VA = "0xB41AE0")]
		public static void Hide()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xB41B20", Offset = "0xB41B20", VA = "0xB41B20")]
		public AwesomeMenu()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class GameMenu : SimpleMenu<GameMenu>
	{
		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xB41B68", Offset = "0xB41B68", VA = "0xB41B68", Slot = "4")]
		public override void OnBackPressed()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xB41BA8", Offset = "0xB41BA8", VA = "0xB41BA8")]
		public GameMenu()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class MainMenu : SimpleMenu<MainMenu>
	{
		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xB41BF0", Offset = "0xB41BF0", VA = "0xB41BF0")]
		public void OnPlayPressed()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xB41C30", Offset = "0xB41C30", VA = "0xB41C30")]
		public void OnOptionsPressed()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xB41C70", Offset = "0xB41C70", VA = "0xB41C70", Slot = "4")]
		public override void OnBackPressed()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xB41C78", Offset = "0xB41C78", VA = "0xB41C78")]
		public MainMenu()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class OptionsMenu : SimpleMenu<OptionsMenu>
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider Slider;

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xB41CC0", Offset = "0xB41CC0", VA = "0xB41CC0")]
		public void OnMagicButtonPressed()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xB41CE8", Offset = "0xB41CE8", VA = "0xB41CE8")]
		public OptionsMenu()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class PauseMenu : SimpleMenu<PauseMenu>
	{
		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xB41D30", Offset = "0xB41D30", VA = "0xB41D30")]
		public void OnQuitPressed()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xB41DDC", Offset = "0xB41DDC", VA = "0xB41DDC")]
		public PauseMenu()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class UpdateRadialValue : MonoBehaviour
	{
		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField input;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RadialSlider slider;

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xB41E24", Offset = "0xB41E24", VA = "0xB41E24")]
		public void UpdateSliderValue()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xB41E70", Offset = "0xB41E70", VA = "0xB41E70")]
		public void UpdateSliderAndle()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xB41EC0", Offset = "0xB41EC0", VA = "0xB41EC0")]
		public UpdateRadialValue()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class AnimateEffects : MonoBehaviour
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LetterSpacing letterSpacing;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float letterSpacingMax;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float letterSpacingMin;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float letterSpacingModifier;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CurvedText curvedText;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float curvedTextMax;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float curvedTextMin;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float curvedTextModifier;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient2 gradient2;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float gradient2Max;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float gradient2Min;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float gradient2Modifier;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CylinderText cylinderText;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform cylinderTextRT;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 cylinderRotation;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SoftMaskScript SAUIM;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float SAUIMMax;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float SAUIMMin;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float SAUIMModifier;

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xB41EC8", Offset = "0xB41EC8", VA = "0xB41EC8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xB41F28", Offset = "0xB41F28", VA = "0xB41F28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xB42070", Offset = "0xB42070", VA = "0xB42070")]
		public AnimateEffects()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class testHref : MonoBehaviour
	{
		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextPic textPic;

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xB420DC", Offset = "0xB420DC", VA = "0xB420DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xB42134", Offset = "0xB42134", VA = "0xB42134")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xB421DC", Offset = "0xB421DC", VA = "0xB421DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xB42284", Offset = "0xB42284", VA = "0xB42284")]
		private void OnHrefClick(string hrefName)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xB42310", Offset = "0xB42310", VA = "0xB42310")]
		public testHref()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	[RequireComponent(typeof(UILineRenderer))]
	public class LineRendererOrbit : MonoBehaviour
	{
		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UILineRenderer lr;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Circle circle;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject OrbitGO;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform orbitGOrt;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float orbitTime;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _xAxis;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _yAxis;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private int _steps;

		[Token(Token = "0x17000237")]
		public float xAxis
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xB42318", Offset = "0xB42318", VA = "0xB42318")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xB42320", Offset = "0xB42320", VA = "0xB42320")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public float yAxis
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xB42534", Offset = "0xB42534", VA = "0xB42534")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xB4253C", Offset = "0xB4253C", VA = "0xB4253C")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public int Steps
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xB42544", Offset = "0xB42544", VA = "0xB42544")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xB4254C", Offset = "0xB4254C", VA = "0xB4254C")]
			set
			{
			}
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xB42554", Offset = "0xB42554", VA = "0xB42554")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xB425F0", Offset = "0xB425F0", VA = "0xB425F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xB42328", Offset = "0xB42328", VA = "0xB42328")]
		private void GenerateOrbit()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xB42660", Offset = "0xB42660", VA = "0xB42660")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xB426D8", Offset = "0xB426D8", VA = "0xB426D8")]
		public LineRendererOrbit()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public class TestAddingPoints : MonoBehaviour
	{
		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UILineRenderer LineRenderer;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text XValue;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text YValue;

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xB426F0", Offset = "0xB426F0", VA = "0xB426F0")]
		public void AddNewPoint()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xB4286C", Offset = "0xB4286C", VA = "0xB4286C")]
		public void ClearPoints()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xB428D0", Offset = "0xB428D0", VA = "0xB428D0")]
		public TestAddingPoints()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class ScrollingCalendar : MonoBehaviour
	{
		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform monthsScrollingPanel;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform yearsScrollingPanel;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform daysScrollingPanel;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject yearsButtonPrefab;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject monthsButtonPrefab;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject daysButtonPrefab;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject[] monthsButtons;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject[] yearsButtons;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject[] daysButtons;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform monthCenter;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RectTransform yearsCenter;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RectTransform daysCenter;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UIVerticalScroller yearsVerticalScroller;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UIVerticalScroller monthsVerticalScroller;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UIVerticalScroller daysVerticalScroller;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public InputField inputFieldDays;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public InputField inputFieldMonths;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public InputField inputFieldYears;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Text dateText;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int daysSet;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int monthsSet;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int yearsSet;

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xB428D8", Offset = "0xB428D8", VA = "0xB428D8")]
		private void InitializeYears()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xB42C60", Offset = "0xB42C60", VA = "0xB42C60")]
		private void InitializeMonths()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xB43090", Offset = "0xB43090", VA = "0xB43090")]
		private void InitializeDays()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xB433A8", Offset = "0xB433A8", VA = "0xB433A8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xB43508", Offset = "0xB43508", VA = "0xB43508")]
		public void SetDate()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xB435AC", Offset = "0xB435AC", VA = "0xB435AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xB43944", Offset = "0xB43944", VA = "0xB43944")]
		public void DaysScrollUp()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xB43960", Offset = "0xB43960", VA = "0xB43960")]
		public void DaysScrollDown()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xB4397C", Offset = "0xB4397C", VA = "0xB4397C")]
		public void MonthsScrollUp()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xB43998", Offset = "0xB43998", VA = "0xB43998")]
		public void MonthsScrollDown()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xB439B4", Offset = "0xB439B4", VA = "0xB439B4")]
		public void YearsScrollUp()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xB439D0", Offset = "0xB439D0", VA = "0xB439D0")]
		public void YearsScrollDown()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xB439EC", Offset = "0xB439EC", VA = "0xB439EC")]
		public ScrollingCalendar()
		{
		}
	}
}
namespace UltimateGameTools.MeshSimplifier
{
	[Serializable]
	[Token(Token = "0x20002BE")]
	public class MeshUniqueVertices
	{
		[Serializable]
		[Token(Token = "0x20002BF")]
		public class ListIndices
		{
			[Token(Token = "0x400111F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<int> m_listIndices;

			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xB4423C", Offset = "0xB4423C", VA = "0xB4423C")]
			public ListIndices()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C0")]
		public class SerializableBoneWeight
		{
			[Token(Token = "0x4001120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int _boneIndex0;

			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int _boneIndex1;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int _boneIndex2;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int _boneIndex3;

			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float _boneWeight0;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float _boneWeight1;

			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float _boneWeight2;

			[Token(Token = "0x4001127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float _boneWeight3;

			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xB44504", Offset = "0xB44504", VA = "0xB44504")]
			public SerializableBoneWeight(BoneWeight boneWeight)
			{
			}

			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xB445B0", Offset = "0xB445B0", VA = "0xB445B0")]
			public BoneWeight ToBoneWeight()
			{
				return default(BoneWeight);
			}
		}

		[Token(Token = "0x20002C1")]
		public class UniqueVertex
		{
			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int m_nFixedX;

			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int m_nFixedY;

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int m_nFixedZ;

			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xB44664", Offset = "0xB44664", VA = "0xB44664", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xB44714", Offset = "0xB44714", VA = "0xB44714", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xB442C4", Offset = "0xB442C4", VA = "0xB442C4")]
			public UniqueVertex(Vector3 v3Vertex)
			{
			}

			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xB44728", Offset = "0xB44728", VA = "0xB44728")]
			private void FromVertex(Vector3 vertex)
			{
			}

			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xB44768", Offset = "0xB44768", VA = "0xB44768")]
			private int CoordToFixed(float fCoord)
			{
				return default(int);
			}
		}

		[Token(Token = "0x20002C2")]
		private class RepeatedVertex
		{
			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _nFaceIndex;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int _nOriginalVertexIndex;

			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xB44308", Offset = "0xB44308", VA = "0xB44308")]
			public RepeatedVertex(int nFaceIndex, int nOriginalVertexIndex)
			{
			}
		}

		[Token(Token = "0x20002C3")]
		private class RepeatedVertexList
		{
			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int m_nUniqueIndex;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<RepeatedVertex> m_listRepeatedVertices;

			[Token(Token = "0x1700023E")]
			public int UniqueIndex
			{
				[Token(Token = "0x6000FD0")]
				[Address(RVA = "0xB4484C", Offset = "0xB4484C", VA = "0xB4484C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0xB443E4", Offset = "0xB443E4", VA = "0xB443E4")]
			public RepeatedVertexList(int nUniqueIndex, RepeatedVertex repeatedVertex)
			{
			}

			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0xB44334", Offset = "0xB44334", VA = "0xB44334")]
			public void Add(RepeatedVertex repeatedVertex)
			{
			}
		}

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<Vector3> m_listVertices;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<Vector3> m_listVerticesWorld;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<SerializableBoneWeight> m_listBoneWeights;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ListIndices[] m_aFaceList;

		[Token(Token = "0x1700023A")]
		public ListIndices[] SubmeshesFaceList
		{
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xB439F4", Offset = "0xB439F4", VA = "0xB439F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023B")]
		public List<Vector3> ListVertices
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xB439FC", Offset = "0xB439FC", VA = "0xB439FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023C")]
		public List<Vector3> ListVerticesWorld
		{
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xB43A04", Offset = "0xB43A04", VA = "0xB43A04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023D")]
		public List<SerializableBoneWeight> ListBoneWeights
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xB43A0C", Offset = "0xB43A0C", VA = "0xB43A0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xB43A14", Offset = "0xB43A14", VA = "0xB43A14")]
		public void BuildData(Mesh sourceMesh, Vector3[] av3VerticesWorld)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xB445A8", Offset = "0xB445A8", VA = "0xB445A8")]
		public MeshUniqueVertices()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C4")]
	public class RelevanceSphere
	{
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bExpanded;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 m_v3Position;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 m_v3Rotation;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 m_v3Scale;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_fRelevance;

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xB44854", Offset = "0xB44854", VA = "0xB44854")]
		public RelevanceSphere()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class Simplifier : MonoBehaviour
	{
		[Token(Token = "0x20002C6")]
		public delegate void ProgressDelegate(string strTitle, string strProgressMessage, float fT);

		[Token(Token = "0x20002C7")]
		private class Triangle
		{
			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vertex[] m_aVertices;

			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool m_bUVData;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int[] m_aUV;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int[] m_aIndices;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 m_v3Normal;

			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int m_nSubMesh;

			[Token(Token = "0x17000246")]
			public Vertex[] Vertices
			{
				[Token(Token = "0x6000FF9")]
				[Address(RVA = "0xB47F04", Offset = "0xB47F04", VA = "0xB47F04")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000247")]
			public bool HasUVData
			{
				[Token(Token = "0x6000FFA")]
				[Address(RVA = "0xB47F0C", Offset = "0xB47F0C", VA = "0xB47F0C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000248")]
			public int[] IndicesUV
			{
				[Token(Token = "0x6000FFB")]
				[Address(RVA = "0xB47F14", Offset = "0xB47F14", VA = "0xB47F14")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000249")]
			public Vector3 Normal
			{
				[Token(Token = "0x6000FFC")]
				[Address(RVA = "0xB47F1C", Offset = "0xB47F1C", VA = "0xB47F1C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700024A")]
			public int[] Indices
			{
				[Token(Token = "0x6000FFD")]
				[Address(RVA = "0xB47F28", Offset = "0xB47F28", VA = "0xB47F28")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xB47558", Offset = "0xB47558", VA = "0xB47558")]
			public Triangle(Simplifier simplifier, int nSubMesh, Vertex v0, Vertex v1, Vertex v2, bool bUVData, int nIndex1, int nIndex2, int nIndex3)
			{
			}

			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xB467AC", Offset = "0xB467AC", VA = "0xB467AC")]
			public void Destructor(Simplifier simplifier)
			{
			}

			[Token(Token = "0x6001000")]
			[Address(RVA = "0xB45A44", Offset = "0xB45A44", VA = "0xB45A44")]
			public bool HasVertex(Vertex v)
			{
				return default(bool);
			}

			[Token(Token = "0x6001001")]
			[Address(RVA = "0xB47F30", Offset = "0xB47F30", VA = "0xB47F30")]
			public void ComputeNormal()
			{
			}

			[Token(Token = "0x6001002")]
			[Address(RVA = "0xB45BCC", Offset = "0xB45BCC", VA = "0xB45BCC")]
			public int TexAt(Vertex vertex)
			{
				return default(int);
			}

			[Token(Token = "0x6001003")]
			[Address(RVA = "0xB466C8", Offset = "0xB466C8", VA = "0xB466C8")]
			public void SetTexAt(Vertex vertex, int uv)
			{
			}

			[Token(Token = "0x6001004")]
			[Address(RVA = "0xB4690C", Offset = "0xB4690C", VA = "0xB4690C")]
			public void ReplaceVertex(Vertex vold, Vertex vnew)
			{
			}
		}

		[Token(Token = "0x20002C8")]
		private class TriangleList
		{
			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<Triangle> m_listTriangles;

			[Token(Token = "0x6001005")]
			[Address(RVA = "0xB48200", Offset = "0xB48200", VA = "0xB48200")]
			public TriangleList()
			{
			}
		}

		[Token(Token = "0x20002C9")]
		private class Vertex
		{
			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 m_v3Position;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 m_v3PositionWorld;

			[Token(Token = "0x400114E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool m_bHasBoneWeight;

			[Token(Token = "0x400114F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public BoneWeight m_boneWeight;

			[Token(Token = "0x4001150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int m_nID;

			[Token(Token = "0x4001151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<Vertex> m_listNeighbors;

			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<Triangle> m_listFaces;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public float m_fObjDist;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Vertex m_collapse;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int m_nHeapSpot;

			[Token(Token = "0x6001006")]
			[Address(RVA = "0xB47114", Offset = "0xB47114", VA = "0xB47114")]
			public Vertex(Simplifier simplifier, Vector3 v, Vector3 v3World, bool bHasBoneWeight, BoneWeight boneWeight, int nID)
			{
			}

			[Token(Token = "0x6001007")]
			[Address(RVA = "0xB465CC", Offset = "0xB465CC", VA = "0xB465CC")]
			public void Destructor(Simplifier simplifier)
			{
			}

			[Token(Token = "0x6001008")]
			[Address(RVA = "0xB48100", Offset = "0xB48100", VA = "0xB48100")]
			public void RemoveIfNonNeighbor(Vertex n)
			{
			}

			[Token(Token = "0x6001009")]
			[Address(RVA = "0xB45AA4", Offset = "0xB45AA4", VA = "0xB45AA4")]
			public bool IsBorder()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002CA")]
		private class VertexDataHashComparer : IEqualityComparer<VertexDataHash>
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xB48288", Offset = "0xB48288", VA = "0xB48288", Slot = "4")]
			public bool Equals(VertexDataHash a, VertexDataHash b)
			{
				return default(bool);
			}

			[Token(Token = "0x600100B")]
			[Address(RVA = "0xB4832C", Offset = "0xB4832C", VA = "0xB4832C", Slot = "5")]
			public int GetHashCode(VertexDataHash vdata)
			{
				return default(int);
			}

			[Token(Token = "0x600100C")]
			[Address(RVA = "0xB4834C", Offset = "0xB4834C", VA = "0xB4834C")]
			public VertexDataHashComparer()
			{
			}
		}

		[Token(Token = "0x20002CB")]
		private class VertexDataHash
		{
			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector3 _v3Vertex;

			[Token(Token = "0x4001157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Vector3 _v3Normal;

			[Token(Token = "0x4001158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector2 _v2Mapping1;

			[Token(Token = "0x4001159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2 _v2Mapping2;

			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Color32 _color;

			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private MeshUniqueVertices.UniqueVertex _uniqueVertex;

			[Token(Token = "0x1700024B")]
			public Vector3 Vertex
			{
				[Token(Token = "0x600100D")]
				[Address(RVA = "0xB48354", Offset = "0xB48354", VA = "0xB48354")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700024C")]
			public Vector2 UV1
			{
				[Token(Token = "0x600100E")]
				[Address(RVA = "0xB48360", Offset = "0xB48360", VA = "0xB48360")]
				get
				{
					return default(Vector2);
				}
			}

			[Token(Token = "0x1700024D")]
			public Vector2 UV2
			{
				[Token(Token = "0x600100F")]
				[Address(RVA = "0xB48368", Offset = "0xB48368", VA = "0xB48368")]
				get
				{
					return default(Vector2);
				}
			}

			[Token(Token = "0x1700024E")]
			public Color32 Color
			{
				[Token(Token = "0x6001010")]
				[Address(RVA = "0xB48370", Offset = "0xB48370", VA = "0xB48370")]
				get
				{
					return default(Color32);
				}
			}

			[Token(Token = "0x6001011")]
			[Address(RVA = "0xB48378", Offset = "0xB48378", VA = "0xB48378")]
			public VertexDataHash(Vector3 v3Vertex, Vector3 v3Normal, Vector2 v2Mapping1, Vector2 v2Mapping2, Color32 color)
			{
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0xB48470", Offset = "0xB48470", VA = "0xB48470", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001013")]
			[Address(RVA = "0xB485A4", Offset = "0xB485A4", VA = "0xB485A4", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int m_nCoroutineFrameMiliseconds;

		[Token(Token = "0x4001137")]
		private const float MAX_VERTEX_COLLAPSE_COST = 10000000f;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vertex> m_listVertices;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vertex> m_listHeap;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TriangleList[] m_aListTriangles;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int m_nOriginalMeshVertexCount;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_fOriginalMeshSize;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<int> m_listVertexMap;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<int> m_listVertexPermutationBack;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MeshUniqueVertices m_meshUniqueVertices;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Mesh m_meshOriginal;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private bool m_bUseEdgeLength;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[SerializeField]
		private bool m_bUseCurvature;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[SerializeField]
		private bool m_bProtectTexture;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		[SerializeField]
		private bool m_bLockBorder;

		[Token(Token = "0x1700023F")]
		public static bool Cancelled
		{
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0xB448B4", Offset = "0xB448B4", VA = "0xB448B4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0xB448FC", Offset = "0xB448FC", VA = "0xB448FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public static int CoroutineFrameMiliseconds
		{
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0xB44948", Offset = "0xB44948", VA = "0xB44948")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xB44990", Offset = "0xB44990", VA = "0xB44990")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public bool CoroutineEnded
		{
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xB449DC", Offset = "0xB449DC", VA = "0xB449DC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xB449E4", Offset = "0xB449E4", VA = "0xB449E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public bool UseEdgeLength
		{
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xB449F0", Offset = "0xB449F0", VA = "0xB449F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xB449F8", Offset = "0xB449F8", VA = "0xB449F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public bool UseCurvature
		{
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xB44A04", Offset = "0xB44A04", VA = "0xB44A04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xB44A0C", Offset = "0xB44A0C", VA = "0xB44A0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public bool ProtectTexture
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xB44A18", Offset = "0xB44A18", VA = "0xB44A18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xB44A20", Offset = "0xB44A20", VA = "0xB44A20")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public bool LockBorder
		{
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xB44A2C", Offset = "0xB44A2C", VA = "0xB44A2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xB44A34", Offset = "0xB44A34", VA = "0xB44A34")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xB44A40", Offset = "0xB44A40", VA = "0xB44A40")]
		public IEnumerator ProgressiveMesh(GameObject gameObject, Mesh sourceMesh, RelevanceSphere[] aRelevanceSpheres, string strProgressDisplayObjectName = "", [Optional] ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xB44B58", Offset = "0xB44B58", VA = "0xB44B58")]
		public IEnumerator ComputeMeshWithVertexCount(GameObject gameObject, Mesh meshOut, int nVertices, string strProgressDisplayObjectName = "", [Optional] ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xB44C64", Offset = "0xB44C64", VA = "0xB44C64")]
		public int GetOriginalMeshUniqueVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xB44C6C", Offset = "0xB44C6C", VA = "0xB44C6C")]
		public int GetOriginalMeshTriangleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xB44CAC", Offset = "0xB44CAC", VA = "0xB44CAC")]
		public static Vector3[] GetWorldVertices(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xB45480", Offset = "0xB45480", VA = "0xB45480")]
		private IEnumerator ConsolidateMesh(GameObject gameObject, Mesh meshIn, Mesh meshOut, TriangleList[] aListTriangles, Vector3[] av3Vertices, string strProgressDisplayObjectName = "", [Optional] ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xB45598", Offset = "0xB45598", VA = "0xB45598")]
		private int MapVertex(int nVertex, int nMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xB45628", Offset = "0xB45628", VA = "0xB45628")]
		private float ComputeEdgeCollapseCost(Vertex u, Vertex v, float fRelevanceBias)
		{
			return default(float);
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xB45CA0", Offset = "0xB45CA0", VA = "0xB45CA0")]
		private void ComputeEdgeCostAtVertex(Vertex v, Transform transform, RelevanceSphere[] aRelevanceSpheres)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xB45FC0", Offset = "0xB45FC0", VA = "0xB45FC0")]
		private IEnumerator ComputeAllEdgeCollapseCosts(string strProgressDisplayObjectName, Transform transform, RelevanceSphere[] aRelevanceSpheres, [Optional] ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xB460BC", Offset = "0xB460BC", VA = "0xB460BC")]
		private void Collapse(Vertex u, Vertex v, bool bRecompute, Transform transform, RelevanceSphere[] aRelevanceSpheres)
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xB46F48", Offset = "0xB46F48", VA = "0xB46F48")]
		private void AddVertices(List<Vector3> listVertices, List<Vector3> listVerticesWorld, List<MeshUniqueVertices.SerializableBoneWeight> listBoneWeights)
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xB472F4", Offset = "0xB472F4", VA = "0xB472F4")]
		private void AddFaceListSubMesh(int nSubMesh, List<int> listTriangles, int[] anIndices, Vector2[] v2Mapping)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xB47A08", Offset = "0xB47A08", VA = "0xB47A08")]
		private void ShareUV(Vector2[] aMapping, Triangle t)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xB47BCC", Offset = "0xB47BCC", VA = "0xB47BCC")]
		private Vertex MinimumCostEdge()
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xB47C74", Offset = "0xB47C74", VA = "0xB47C74")]
		private float HeapValue(int i)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xB46C30", Offset = "0xB46C30", VA = "0xB46C30")]
		private void HeapSortUp(int k)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xB46DA8", Offset = "0xB46DA8", VA = "0xB46DA8")]
		private void HeapSortDown(int k)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xB47D20", Offset = "0xB47D20", VA = "0xB47D20")]
		private void HeapAdd(Vertex v)
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xB47BD0", Offset = "0xB47BD0", VA = "0xB47BD0")]
		private Vertex HeapPop()
		{
			return null;
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xB47DEC", Offset = "0xB47DEC", VA = "0xB47DEC")]
		public Simplifier()
		{
		}
	}
}
namespace THOR
{
	[Token(Token = "0x20002D0")]
	public class THOR_DemoCameraController : MonoBehaviour
	{
		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lookSensitivity;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float moveSensitivity;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 worldLimits;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slowMotionFactor;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float slowMotionLerpDuration;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject terrain;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture logo;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture guiBG;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture gui;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string infoText;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string controlsText;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float targetValue;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform t;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform child;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform camT;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RaycastHit hit;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Ray ray;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Rect r;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Color linkColor;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool showInfo;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private string buttonTextTerrain;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private string buttonTextInfo;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private THOR_Thunderstorm rt;

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xB4B6E4", Offset = "0xB4B6E4", VA = "0xB4B6E4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xB4BEE4", Offset = "0xB4BEE4", VA = "0xB4BEE4")]
		private void Start()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xB4C278", Offset = "0xB4C278", VA = "0xB4C278")]
		private void Update()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xB4C324", Offset = "0xB4C324", VA = "0xB4C324")]
		private void CameraControl()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xB4BF78", Offset = "0xB4BF78", VA = "0xB4BF78")]
		private void SetupCameraRig()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xB4C914", Offset = "0xB4C914", VA = "0xB4C914")]
		private IEnumerator LerpTimeScale()
		{
			return null;
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xB4C9B0", Offset = "0xB4C9B0", VA = "0xB4C9B0")]
		public THOR_DemoCameraController()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class THOR_Lightning : MonoBehaviour
	{
		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform lightningBoltT;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform lightningCloudT;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform spotLightT;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilter lightningBoltMF;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshRenderer lightningBoltMR;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshRenderer lightningCloudMR;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material lightningBoltMaterial;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material lightningCloudMaterial;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource audioSource;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Light spotLight;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private THOR_Thunderstorm rt;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform t;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initScale;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lightdist;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float duration;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float distance;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float distanceFlat;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float pan;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool noSound;

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xB4CBD4", Offset = "0xB4CBD4", VA = "0xB4CBD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xB4CE6C", Offset = "0xB4CE6C", VA = "0xB4CE6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xB4D3B8", Offset = "0xB4D3B8", VA = "0xB4D3B8")]
		private IEnumerator LerpEvolution()
		{
			return null;
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xB4D42C", Offset = "0xB4D42C", VA = "0xB4D42C")]
		private IEnumerator LerpAudio()
		{
			return null;
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xB4D4F0", Offset = "0xB4D4F0", VA = "0xB4D4F0")]
		private void BackToPool()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xB4D640", Offset = "0xB4D640", VA = "0xB4D640")]
		public THOR_Lightning()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class THOR_SheetLightning : MonoBehaviour
	{
		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material lightningCloudMaterial;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer lightningCloudMR;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float distance;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private THOR_Thunderstorm rt;

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xB4E0BC", Offset = "0xB4E0BC", VA = "0xB4E0BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xB4E1C0", Offset = "0xB4E1C0", VA = "0xB4E1C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xB4E2D4", Offset = "0xB4E2D4", VA = "0xB4E2D4")]
		private IEnumerator LerpEvolution()
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xB4E370", Offset = "0xB4E370", VA = "0xB4E370")]
		public THOR_SheetLightning()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class THOR_Thunderstorm : MonoBehaviour
	{
		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static THOR_Thunderstorm instance;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform camT;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool followCamera;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool followCameraVertically;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float probability;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flickerProbability;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float preferCameraView;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minDuration;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDuration;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color colorLightningCore;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color colorLightningGlow;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color colorCloudCore;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color colorCloudGlow;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float minDistance;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float maxDistance;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float spawnHeight;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float scaleMulti;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool enableDepthBlending;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float depthBlend;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve distanceToMultiBolts;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationCurve distanceToMultiClouds;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AnimationCurve flickerBolts;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationCurve flickerClouds;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool useLight;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float lightIntensityMulti;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Gradient lightColor;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float maxLightDistance;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AnimationCurve lightIntensityCurve;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AnimationCurve lightDistanceCurve;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float lightRange;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float lightAngle;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Texture lightCookie;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public LightShadows lightShadows;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public LightShadowResolution shadowResolution;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float shadowStrength;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float shadowBias;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float shadowNormalBias;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float shadowNearPlane;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip thunderLoop;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AnimationCurve thunderLoopVolume;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip[] thunderClipsVeryClose;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float thunderVeryCloseDistance;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioClip[] thunderClipsClose;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float thunderCloseDistance;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioClip[] thunderClipsMedium;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float thunderMediumDistance;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioClip[] thunderClipsFar;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float thunderFarDistance;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AnimationCurve distanceToVolume;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AnimationCurve audioFade;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AnimationCurve panMulti;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float SpeedOfSound;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float lerpSpeedUp;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float lerpSpeedDown;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject R_LightningPrefab;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public int poolSize;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public List<GameObject> poolUnused;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public List<GameObject> poolUsed;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GameObject R_SheetLightningPrefab;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public int poolSizeSheetLightning;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public List<GameObject> poolSheetLightningUnused;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<GameObject> poolSheetLightningUsed;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public int layer;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Mesh[] lightningBoltMeshes;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private AnimationCurve minDelayCurve;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private AnimationCurve maxDelayCurve;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool lightIsActive;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Vector3 spawnPos;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Vector3 camPos;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float nextLightningIn;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float nextSheetLightningIn;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private float timeSinceLastLightning;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float timeSinceLastSheetLightning;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private AudioSource aS;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float loopVol;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public IEnumerator fadeUp;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private IEnumerator fadeDown;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public IEnumerator ctrlThunderstorm;

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xB4E76C", Offset = "0xB4E76C", VA = "0xB4E76C")]
		private THOR_Thunderstorm()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xB4F79C", Offset = "0xB4F79C", VA = "0xB4F79C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xB4F898", Offset = "0xB4F898", VA = "0xB4F898")]
		private void Start()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xB4FE28", Offset = "0xB4FE28", VA = "0xB4FE28")]
		private void OnDetroy()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xB4FE7C", Offset = "0xB4FE7C", VA = "0xB4FE7C")]
		private void Update()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xB50464", Offset = "0xB50464", VA = "0xB50464")]
		private void Lightning()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xB50514", Offset = "0xB50514", VA = "0xB50514")]
		private void CameraLightning()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xB50664", Offset = "0xB50664", VA = "0xB50664")]
		private void RandomPosLightning()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xB50730", Offset = "0xB50730", VA = "0xB50730")]
		private void ActivateLightning()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xB50170", Offset = "0xB50170", VA = "0xB50170")]
		private void SheetLightning()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xB4DFF8", Offset = "0xB4DFF8", VA = "0xB4DFF8")]
		public IEnumerator FadeUp()
		{
			return null;
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xB508E0", Offset = "0xB508E0", VA = "0xB508E0")]
		private IEnumerator FadeDown()
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xB4D568", Offset = "0xB4D568", VA = "0xB4D568")]
		public void BackToPool(GameObject go)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xB4E644", Offset = "0xB4E644", VA = "0xB4E644")]
		public void BackToPoolSheetLightning(GameObject go)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xB5097C", Offset = "0xB5097C", VA = "0xB5097C")]
		public static void ControlThunderstorm(float targetIntensity = 1f, float transitionDuration = 20f)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xB50B24", Offset = "0xB50B24", VA = "0xB50B24")]
		public IEnumerator CtrlThunderstorm(float targetIntensity, float transitionDuration)
		{
			return null;
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xB50BD4", Offset = "0xB50BD4", VA = "0xB50BD4")]
		public static void SetProbability(float value)
		{
		}
	}
}
namespace StylizedWaterShader
{
	[Token(Token = "0x20002DB")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class EnableDepthBuffer : MonoBehaviour
	{
		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xB5111C", Offset = "0xB5111C", VA = "0xB5111C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xB511C8", Offset = "0xB511C8", VA = "0xB511C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xB512C0", Offset = "0xB512C0", VA = "0xB512C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xB51344", Offset = "0xB51344", VA = "0xB51344")]
		public EnableDepthBuffer()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[RequireComponent(typeof(MeshRenderer))]
	[ExecuteInEditMode]
	public class StylizedWater : MonoBehaviour
	{
		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] shaderNames;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int shaderIndex;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Shader DesktopShader;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Shader MobileAdvancedShader;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int renderQueue;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool enableVertexColors;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool enableDepthTex;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool isUnlit;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool enableGradient;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient colorGradient;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color waterShallowColor;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float depth;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color waterColor;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color fresnelColor;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fresnel;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color rimColor;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float waveTint;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float transparency;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float glossiness;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float metallicness;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float edgeFade;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string[] tilingMethodNames;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float worldSpaceTiling;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float refractionAmount;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool enableNormalMap;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float normalStrength;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enableMacroNormals;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float macroNormalsDistance;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float normalTiling;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int intersectionSolver;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string[] intersectionSolverNames;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float rimSize;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float rimFalloff;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float rimTiling;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float rimDistortion;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool enableVCIntersection;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int foamSolver;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string[] foamSolverNames;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float foamOpacity;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float foamTiling;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float foamSize;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float foamDistortion;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float foamSpeed;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float waveFoam;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float reflectionStrength;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float reflectionFresnel;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool showReflection;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float reflectionRefraction;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float waveSpeed;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float waveStrength;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Vector4 waveDirectionXZ;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool enableSecondaryWaves;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Texture2D customIntersection;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Texture2D customNormal;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Texture2D customHeightmap;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string[] intersectionStyleNames;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int intersectionStyle;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string[] waveStyleNames;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public int waveStyle;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string[] waveHeightmapNames;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public int waveHeightmapStyle;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float waveSize;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool useCustomIntersection;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool useCustomNormals;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool useCustomHeightmap;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Texture2D normals;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Texture2D shadermap;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Texture2D colorGradientTex;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool useCompression;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool EnableReflections;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Camera reflectionCamera;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Camera refractCamera;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useReflection;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useRefractionCam;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool enableReflectionBlur;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float reflectionBlurLength;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public int reflectionBlurPasses;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private StylizedWaterBlur reflectionBlurRenderer;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public string[] refractionSolverNames;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public int refractionSolver;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public string[] resolutionNames;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int reflectionRes;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public int refractRes;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public int reflectionTextureSize;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public int refractTextureSize;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float clipPlaneOffset;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public LayerMask refractLayers;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Dictionary<Camera, StylizedWaterBlur> m_BlurRenderers;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Dictionary<Camera, Camera> m_RefractCameras;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private RenderTexture m_RefractTexture;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private int m_OldRefractTextureSize;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool s_InsideRendering;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int lightingMethod;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public string[] lightingMethodNames;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool enableShadows;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private StylizedWaterShadowCaster shadowRenderer;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Light shadowCaster;

		[NonSerialized]
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public Material material;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public bool isMobileAdvanced;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		public bool isMobilePlatform;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public string shaderName;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool isWaterLayer;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
		public bool hasShaderParams;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
		public bool hasMaterial;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x293")]
		public bool usingSinglePassRendering;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public bool hideMeshRenderer;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xB5134C", Offset = "0xB5134C", VA = "0xB5134C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xB513E8", Offset = "0xB513E8", VA = "0xB513E8")]
		public void GetProperties()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xB51470", Offset = "0xB51470", VA = "0xB51470")]
		private void GetShaderProperties()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xB51EE0", Offset = "0xB51EE0", VA = "0xB51EE0")]
		private void GetShaderType()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xB51EE4", Offset = "0xB51EE4", VA = "0xB51EE4")]
		private void SetShaderType()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xB513EC", Offset = "0xB513EC", VA = "0xB513EC")]
		public void SetProperties()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xB52190", Offset = "0xB52190", VA = "0xB52190")]
		private void SetShaderProperties()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xB52E8C", Offset = "0xB52E8C", VA = "0xB52E8C")]
		public void DisableReflectionCam()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xB52C78", Offset = "0xB52C78", VA = "0xB52C78")]
		public void DisableRefractionCam()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xB51EE8", Offset = "0xB51EE8", VA = "0xB51EE8")]
		private void EnableShadowRendering()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xB51FC4", Offset = "0xB51FC4", VA = "0xB51FC4")]
		private void DisableShadowRendering()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xB53104", Offset = "0xB53104", VA = "0xB53104")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xB53F50", Offset = "0xB53F50", VA = "0xB53F50")]
		public void CreateReflectionTexture()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xB5408C", Offset = "0xB5408C", VA = "0xB5408C")]
		public void CreateRefractionTexture()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xB53808", Offset = "0xB53808", VA = "0xB53808")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractCamera)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xB5423C", Offset = "0xB5423C", VA = "0xB5423C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xB542D8", Offset = "0xB542D8", VA = "0xB542D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xB542DC", Offset = "0xB542DC", VA = "0xB542DC")]
		public StylizedWater()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class StylizedWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int passes;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader m_BlurRenderShader;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material m_BlurRenderMat;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CommandBuffer cmd;

		[Token(Token = "0x17000265")]
		private static Shader BlurRenderShader
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0xB55460", Offset = "0xB55460", VA = "0xB55460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000266")]
		private static Material BlurRenderMat
		{
			[Token(Token = "0x600108F")]
			[Address(RVA = "0xB55528", Offset = "0xB55528", VA = "0xB55528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xB55624", Offset = "0xB55624", VA = "0xB55624")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xB55B04", Offset = "0xB55B04", VA = "0xB55B04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xB556C8", Offset = "0xB556C8", VA = "0xB556C8")]
		public void Render()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xB55BA0", Offset = "0xB55BA0", VA = "0xB55BA0")]
		public StylizedWaterBlur()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[RequireComponent(typeof(Light))]
	[ExecuteInEditMode]
	public class StylizedWaterShadowCaster : MonoBehaviour
	{
		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CommandBuffer cmd;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light dirLight;

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xB55BB4", Offset = "0xB55BB4", VA = "0xB55BB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xB55D80", Offset = "0xB55D80", VA = "0xB55D80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xB55E00", Offset = "0xB55E00", VA = "0xB55E00")]
		public StylizedWaterShadowCaster()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public static class StylizedWaterUtilities
	{
		[Token(Token = "0x20002E0")]
		public static class CameraUtils
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0xB55E08", Offset = "0xB55E08", VA = "0xB55E08")]
			public static Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign, float clipPlaneOffset)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6001098")]
			[Address(RVA = "0xB55FB0", Offset = "0xB55FB0", VA = "0xB55FB0")]
			public static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
			{
			}

			[Token(Token = "0x6001099")]
			[Address(RVA = "0xB56044", Offset = "0xB56044", VA = "0xB56044")]
			public static void CopyCameraSettings(Camera src, Camera dest)
			{
			}
		}
	}
}
namespace sourcenity
{
	[Token(Token = "0x20002E1")]
	[ExecuteInEditMode]
	public class ShowLaserEffect : MonoBehaviour
	{
		[Token(Token = "0x20002E2")]
		public enum ScLaserEffectType
		{
			[Token(Token = "0x40012DC")]
			Plane,
			[Token(Token = "0x40012DD")]
			Fan,
			[Token(Token = "0x40012DE")]
			Cone
		}

		[Token(Token = "0x20002E3")]
		public enum ScLaserEffectVisual
		{
			[Token(Token = "0x40012E0")]
			Plain,
			[Token(Token = "0x40012E1")]
			Textured,
			[Token(Token = "0x40012E2")]
			CustomMaterial
		}

		[Token(Token = "0x20002E4")]
		public enum ScLaserEffectVisualTextured
		{
			[Token(Token = "0x40012E4")]
			Clouds,
			[Token(Token = "0x40012E5")]
			Smoke,
			[Token(Token = "0x40012E6")]
			Custom
		}

		[Token(Token = "0x20002E5")]
		public enum ScLaserEffectAlignment
		{
			[Token(Token = "0x40012E8")]
			Left,
			[Token(Token = "0x40012E9")]
			Center
		}

		[Serializable]
		[Token(Token = "0x20002E6")]
		private class Shadow
		{
			[Token(Token = "0x40012EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScLaserEffectType type;

			[Token(Token = "0x40012EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ScLaserEffectAlignment alignment;

			[Token(Token = "0x40012EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float width;

			[Token(Token = "0x40012ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float length;

			[Token(Token = "0x40012EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float radius;

			[Token(Token = "0x40012EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Color mainColor;

			[Token(Token = "0x40012F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float fill;

			[Token(Token = "0x40012F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int numberOfElements;

			[Token(Token = "0x40012F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float gapBetweenElements;

			[Token(Token = "0x40012F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float leftSideOffset;

			[Token(Token = "0x40012F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Color leftSideColor;

			[Token(Token = "0x40012F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float rightSideOffset;

			[Token(Token = "0x40012F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Color rightSideColor;

			[Token(Token = "0x40012F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public ScLaserEffectVisual visualization;

			[Token(Token = "0x40012F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public ScLaserEffectVisualTextured textureType;

			[Token(Token = "0x40012F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Texture2D customTexture;

			[Token(Token = "0x40012FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float noiseScaling;

			[Token(Token = "0x40012FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public float timeScaling;

			[Token(Token = "0x40012FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public float distortionStrength;

			[Token(Token = "0x40012FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public float fadeOutValue;

			[Token(Token = "0x40012FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public float gammaValue;

			[Token(Token = "0x40012FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float generalTransparency;

			[Token(Token = "0x60010AB")]
			[Address(RVA = "0xB58900", Offset = "0xB58900", VA = "0xB58900")]
			public Shadow()
			{
			}
		}

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool show;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ScLaserEffectType type;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScLaserEffectAlignment alignment;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float width;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float length;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float radius;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color mainColor;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fill;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[FormerlySerializedAs("numberOfElements")]
		public int numberOfSegments;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("gapBetweenElements")]
		public float gapBetweenSegments;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float leftSideOffset;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color leftSideColor;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rightSideOffset;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color rightSideColor;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ScLaserEffectVisual visualization;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ScLaserEffectVisualTextured textureType;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D customTexture;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float noiseScaling;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float timeScaling;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float distortionStrength;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float fadeOutValue;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float gammaValue;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float generalTransparency;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly int MAX_FACES;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float prevWidth;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float prevGap;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int prevNumberOfElements;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool prevShow;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Shadow shadow;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Mesh cachedMesh;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material cachedMaterial;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MeshFilter meshFilter;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Texture2D cloudsTexture;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Texture2D smokeTexture;

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xB561CC", Offset = "0xB561CC", VA = "0xB561CC")]
		private void Start()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xB56E98", Offset = "0xB56E98", VA = "0xB56E98")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xB57160", Offset = "0xB57160", VA = "0xB57160")]
		private void Update()
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xB564A0", Offset = "0xB564A0", VA = "0xB564A0")]
		private void RefreshMesh()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xB5672C", Offset = "0xB5672C", VA = "0xB5672C")]
		private void RefreshMaterial()
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xB56CA4", Offset = "0xB56CA4", VA = "0xB56CA4")]
		private void ApplyMeshAndMaterialToGameObject()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xB57460", Offset = "0xB57460", VA = "0xB57460")]
		private float GetStartForEffect()
		{
			return default(float);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xB574D0", Offset = "0xB574D0", VA = "0xB574D0")]
		private float GetWidthPerElement()
		{
			return default(float);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xB57128", Offset = "0xB57128", VA = "0xB57128")]
		private float GetFullWidth()
		{
			return default(float);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xB5748C", Offset = "0xB5748C", VA = "0xB5748C")]
		private Mesh GenerateElement(float startPosition)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xB57538", Offset = "0xB57538", VA = "0xB57538")]
		private Mesh GenerateRectangle(float rectStart, float rectWidth, float rectLength)
		{
			return null;
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xB57B30", Offset = "0xB57B30", VA = "0xB57B30")]
		private Mesh GenerateArc(float fromAngle, float toAngle, float beamLength)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xB58218", Offset = "0xB58218", VA = "0xB58218")]
		private Mesh GenerateCone(float fromAngle, float toAngle, float outerRadius, float beamLength)
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xB56DB8", Offset = "0xB56DB8", VA = "0xB56DB8")]
		private Shadow CloneValues()
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xB571F4", Offset = "0xB571F4", VA = "0xB571F4")]
		private bool IsMeshBasedValuesChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xB57294", Offset = "0xB57294", VA = "0xB57294")]
		private bool IsMaterialRelevantValuesChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xB58908", Offset = "0xB58908", VA = "0xB58908")]
		public ShowLaserEffect()
		{
		}
	}
}
namespace RhythmTool
{
	[Token(Token = "0x20002E7")]
	public abstract class Analysis : MonoBehaviour
	{
		[Token(Token = "0x17000267")]
		public Track track
		{
			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xB58960", Offset = "0xB58960", VA = "0xB58960")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010AD")]
			[Address(RVA = "0xB58968", Offset = "0xB58968", VA = "0xB58968")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public int sampleRate
		{
			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xB58970", Offset = "0xB58970", VA = "0xB58970")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xB58978", Offset = "0xB58978", VA = "0xB58978")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public int frameSize
		{
			[Token(Token = "0x60010B0")]
			[Address(RVA = "0xB58980", Offset = "0xB58980", VA = "0xB58980")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010B1")]
			[Address(RVA = "0xB58988", Offset = "0xB58988", VA = "0xB58988")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public int hopSize
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xB58990", Offset = "0xB58990", VA = "0xB58990")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010B3")]
			[Address(RVA = "0xB58998", Offset = "0xB58998", VA = "0xB58998")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public new abstract string name
		{
			[Token(Token = "0x60010B4")]
			get;
		}

		[Token(Token = "0x1700026C")]
		protected int frameIndex
		{
			[Token(Token = "0x60010B5")]
			[Address(RVA = "0xB589A0", Offset = "0xB589A0", VA = "0xB589A0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0xB589A8", Offset = "0xB589A8", VA = "0xB589A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xB589B0", Offset = "0xB589B0", VA = "0xB589B0", Slot = "5")]
		public virtual void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xB589BC", Offset = "0xB589BC", VA = "0xB589BC", Slot = "6")]
		public virtual void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xB589C4", Offset = "0xB589C4", VA = "0xB589C4")]
		protected float FrameIndexToSeconds(float frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xB589E0", Offset = "0xB589E0", VA = "0xB589E0")]
		protected Analysis()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	[ExecuteInEditMode]
	public abstract class Analysis<T> : Analysis where T : IFeature
	{
		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T> toAdd;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T> toRemove;

		[Token(Token = "0x1700026D")]
		public new Track<T> track
		{
			[Token(Token = "0x60010BB")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010BD")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x60010BE")]
		protected void AddFeature(T feature)
		{
		}

		[Token(Token = "0x60010BF")]
		protected void RemoveFeature(T feature)
		{
		}

		[Token(Token = "0x60010C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010C1")]
		protected Analysis()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class BeatTrack : Track<Beat>
	{
		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xB589E8", Offset = "0xB589E8", VA = "0xB589E8")]
		public BeatTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EA")]
	public struct Beat : IFeature
	{
		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timestamp;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float bpm;

		[Token(Token = "0x1700026E")]
		private float RhythmTool.IFeature.timestamp
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0xB58A54", Offset = "0xB58A54", VA = "0xB58A54", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026F")]
		private float RhythmTool.IFeature.length
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xB58A5C", Offset = "0xB58A5C", VA = "0xB58A5C", Slot = "5")]
			get
			{
				return default(float);
			}
		}
	}
	[Token(Token = "0x20002EB")]
	[DisallowMultipleComponent]
	public class BeatTracker : Analysis<Beat>
	{
		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] signalBuffer;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] signal;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] smoothedSignal;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] autoCorrelation;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] combFilter;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] lengthScore;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] offsetScore;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] signalWindow;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] offsetWindow;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] kernel;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float[] prevMagnitude;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float prevSpectralFlux;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int maxBeatLength;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int minBeatLength;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int beatLength;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int prevBeatLength;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int beatOffset;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int updateOffset;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int bufferSize;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int resolution;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int combElements;

		[Token(Token = "0x17000270")]
		public override string name
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xB58A64", Offset = "0xB58A64", VA = "0xB58A64", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xB58AA4", Offset = "0xB58AA4", VA = "0xB58AA4", Slot = "5")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xB58FFC", Offset = "0xB58FFC", VA = "0xB58FFC", Slot = "6")]
		public override void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xB5911C", Offset = "0xB5911C", VA = "0xB5911C")]
		private float GetSample(float[] magnitude)
		{
			return default(float);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xB591D0", Offset = "0xB591D0", VA = "0xB591D0")]
		private void UpdateSignal()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xB593D4", Offset = "0xB593D4", VA = "0xB593D4")]
		private void UpdateOffset()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xB59348", Offset = "0xB59348", VA = "0xB59348")]
		private void UpdateLength()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xB59B14", Offset = "0xB59B14", VA = "0xB59B14")]
		private void UpdateAutoCorrelation()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xB59C94", Offset = "0xB59C94", VA = "0xB59C94")]
		private void UpdateLengthScore()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xB59EEC", Offset = "0xB59EEC", VA = "0xB59EEC")]
		public BeatTracker()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class Chromagram : Analysis<Chroma>
	{
		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int startNote;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int endNote;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int bufferSize;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int downsampleFactor;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int chromaInterval;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] noteIndices;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] downsampled;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] spectrum;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] magnitude;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] window;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] pitchWindow;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float[] pitch;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float[] chroma;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int offset;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int[] chromaHistory;

		[Token(Token = "0x17000271")]
		public override string name
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xB59F40", Offset = "0xB59F40", VA = "0xB59F40", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xB59F80", Offset = "0xB59F80", VA = "0xB59F80", Slot = "5")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xB5A444", Offset = "0xB5A444", VA = "0xB5A444", Slot = "6")]
		public override void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xB5A488", Offset = "0xB5A488", VA = "0xB5A488")]
		private void Downsample(float[] samples)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xB5A5B0", Offset = "0xB5A5B0", VA = "0xB5A5B0")]
		private void UpdateChroma()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xB5A2D0", Offset = "0xB5A2D0", VA = "0xB5A2D0")]
		private static int FrequencyToIndex(float frequency, int length, int samplerate)
		{
			return default(int);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xB5A2A4", Offset = "0xB5A2A4", VA = "0xB5A2A4")]
		private static float GetMidiFrequency(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xB5AC54", Offset = "0xB5AC54", VA = "0xB5AC54")]
		public Chromagram()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class ChromaTrack : Track<Chroma>
	{
		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xB5ACB0", Offset = "0xB5ACB0", VA = "0xB5ACB0")]
		public ChromaTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EE")]
	public struct Chroma : IFeature
	{
		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timestamp;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float length;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Note note;

		[Token(Token = "0x17000272")]
		private float RhythmTool.IFeature.timestamp
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xB5AD1C", Offset = "0xB5AD1C", VA = "0xB5AD1C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000273")]
		private float RhythmTool.IFeature.length
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xB5AD24", Offset = "0xB5AD24", VA = "0xB5AD24", Slot = "5")]
			get
			{
				return default(float);
			}
		}
	}
	[Token(Token = "0x20002EF")]
	public enum Note
	{
		[Token(Token = "0x4001332")]
		A,
		[Token(Token = "0x4001333")]
		ASharp,
		[Token(Token = "0x4001334")]
		B,
		[Token(Token = "0x4001335")]
		C,
		[Token(Token = "0x4001336")]
		CSHARP,
		[Token(Token = "0x4001337")]
		D,
		[Token(Token = "0x4001338")]
		DSHARP,
		[Token(Token = "0x4001339")]
		E,
		[Token(Token = "0x400133A")]
		F,
		[Token(Token = "0x400133B")]
		FSHARP,
		[Token(Token = "0x400133C")]
		G,
		[Token(Token = "0x400133D")]
		GSHARP
	}
	[Token(Token = "0x20002F0")]
	[RequireComponent(typeof(RhythmPlayer))]
	public class DebugDrawer : MonoBehaviour
	{
		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float width;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float height;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float padding;

		[Token(Token = "0x17000274")]
		public RhythmPlayer rhythmPlayer
		{
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xB5AD2C", Offset = "0xB5AD2C", VA = "0xB5AD2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xB5AD34", Offset = "0xB5AD34", VA = "0xB5AD34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xB5AD3C", Offset = "0xB5AD3C", VA = "0xB5AD3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xB5AD94", Offset = "0xB5AD94", VA = "0xB5AD94")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xB5B11C", Offset = "0xB5B11C", VA = "0xB5B11C")]
		public DebugDrawer()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public abstract class TrackDrawer
	{
		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Type, TrackDrawer> trackDrawers;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Texture2D texture;

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xB5B138", Offset = "0xB5B138", VA = "0xB5B138")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void Initialize()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xB5AF90", Offset = "0xB5AF90", VA = "0xB5AF90")]
		public static void Draw(Track track, Rect rect, float start, float end)
		{
		}

		[Token(Token = "0x60010E1")]
		protected abstract void DrawTrack(Track track, Rect rect, float start, float end);

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xB5B260", Offset = "0xB5B260", VA = "0xB5B260")]
		public static TrackDrawer GetTrackDrawer(Track track)
		{
			return null;
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xB5B55C", Offset = "0xB5B55C", VA = "0xB5B55C")]
		protected static float GetFeaturePosition(IFeature feature, Rect rect, float start, float end)
		{
			return default(float);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xB5B644", Offset = "0xB5B644", VA = "0xB5B644")]
		protected static void DrawRect(Rect position)
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xB5B3B0", Offset = "0xB5B3B0", VA = "0xB5B3B0")]
		private static Type GetTrackDrawerType(Type featureType)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F2")]
	public class TrackDrawer<T> : TrackDrawer where T : IFeature
	{
		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> features;

		[Token(Token = "0x60010E6")]
		protected override void DrawTrack(Track track, Rect rect, float start, float end)
		{
		}

		[Token(Token = "0x60010E7")]
		protected virtual void DrawTrack(Track<T> track, Rect rect, float start, float end)
		{
		}

		[Token(Token = "0x60010E8")]
		protected virtual void DrawFeature(T feature, Rect rect, float start, float end)
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public interface IFeature
	{
		[Token(Token = "0x17000275")]
		float timestamp
		{
			[Token(Token = "0x60010E9")]
			get;
		}

		[Token(Token = "0x17000276")]
		float length
		{
			[Token(Token = "0x60010EA")]
			get;
		}
	}
	[Token(Token = "0x20002F4")]
	public class LomontFFT
	{
		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[] cosTable;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] sinTable;

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xB5B6E8", Offset = "0xB5B6E8", VA = "0xB5B6E8")]
		public void FFT(float[] data, bool forward)
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xB5BB68", Offset = "0xB5BB68", VA = "0xB5BB68")]
		public void RealFFT(float[] data, bool forward)
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xB5BC14", Offset = "0xB5BC14", VA = "0xB5BC14")]
		private void Reconstruct(float[] data, bool forward)
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xB5B9D4", Offset = "0xB5B9D4", VA = "0xB5B9D4")]
		private void InitializeTables(int length)
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xB5B944", Offset = "0xB5B944", VA = "0xB5B944")]
		private static void BitReverse(float[] data)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xB5BDB8", Offset = "0xB5BDB8", VA = "0xB5BDB8")]
		private static void Swap(float[] data, int a, int b)
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xB5BDF8", Offset = "0xB5BDF8", VA = "0xB5BDF8")]
		public LomontFFT()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class OnsetDetector : Analysis<Onset>
	{
		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float normalization;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float threshold;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int bufferSize;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int start;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int end;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] buffer;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float mean;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m2;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] prevMagnitude;

		[Token(Token = "0x17000277")]
		public override string name
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xB5BE00", Offset = "0xB5BE00", VA = "0xB5BE00", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xB5BE40", Offset = "0xB5BE40", VA = "0xB5BE40", Slot = "5")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xB5BF14", Offset = "0xB5BF14", VA = "0xB5BF14", Slot = "6")]
		public override void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xB5C0A4", Offset = "0xB5C0A4", VA = "0xB5C0A4")]
		private float SpectralDifference(float[] magnitude)
		{
			return default(float);
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xB5C158", Offset = "0xB5C158", VA = "0xB5C158")]
		private float Normalize(float sample)
		{
			return default(float);
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xB5C1BC", Offset = "0xB5C1BC", VA = "0xB5C1BC")]
		public OnsetDetector()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class OnsetTrack : Track<Onset>
	{
		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xB5C220", Offset = "0xB5C220", VA = "0xB5C220")]
		public OnsetTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F7")]
	public struct Onset : IFeature
	{
		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timestamp;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float strength;

		[Token(Token = "0x17000278")]
		private float RhythmTool.IFeature.timestamp
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xB5C28C", Offset = "0xB5C28C", VA = "0xB5C28C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000279")]
		private float RhythmTool.IFeature.length
		{
			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xB5C294", Offset = "0xB5C294", VA = "0xB5C294", Slot = "5")]
			get
			{
				return default(float);
			}
		}
	}
	[Token(Token = "0x20002F8")]
	[ExecuteInEditMode]
	public class RhythmAnalyzer : MonoBehaviour
	{
		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioClip audioClip;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int hopSize;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int frameSize;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int bufferCount;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int channels;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int sampleRate;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int totalFrames;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int lastFrame;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] buffer;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] window;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] samples;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] monoSamples;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] spectrum;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] magnitude;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Thread analyze;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AutoResetEvent waitForMainThread;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool getData;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool abort;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int initialLength;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<Analysis> analyses;

		[Token(Token = "0x1700027A")]
		public RhythmData rhythmData
		{
			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xB5C3FC", Offset = "0xB5C3FC", VA = "0xB5C3FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xB5C404", Offset = "0xB5C404", VA = "0xB5C404")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public float progress
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xB5C40C", Offset = "0xB5C40C", VA = "0xB5C40C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xB5C414", Offset = "0xB5C414", VA = "0xB5C414")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027C")]
		public bool isDone
		{
			[Token(Token = "0x6001101")]
			[Address(RVA = "0xB5C41C", Offset = "0xB5C41C", VA = "0xB5C41C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xB5C424", Offset = "0xB5C424", VA = "0xB5C424")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027D")]
		public bool initialized
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xB5C430", Offset = "0xB5C430", VA = "0xB5C430")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xB5C438", Offset = "0xB5C438", VA = "0xB5C438")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event Action<RhythmData> Initialized
		{
			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xB5C29C", Offset = "0xB5C29C", VA = "0xB5C29C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xB5C34C", Offset = "0xB5C34C", VA = "0xB5C34C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xB5C444", Offset = "0xB5C444", VA = "0xB5C444")]
		public RhythmData Analyze(AudioClip audioClip, int initialLength = 5)
		{
			return null;
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xB5C488", Offset = "0xB5C488", VA = "0xB5C488")]
		public void Abort()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xB5C4E4", Offset = "0xB5C4E4", VA = "0xB5C4E4")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xB5C97C", Offset = "0xB5C97C", VA = "0xB5C97C")]
		private void StartAnalyze()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xB5CB8C", Offset = "0xB5CB8C", VA = "0xB5CB8C")]
		private void Analyze()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xB5CE38", Offset = "0xB5CE38", VA = "0xB5CE38")]
		private void OnAnalysisDone()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xB5CC78", Offset = "0xB5CC78", VA = "0xB5CC78")]
		private void ProcessFrame(float[] samples)
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xB5CC4C", Offset = "0xB5CC4C", VA = "0xB5CC4C")]
		private void FillBuffer()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xB5D010", Offset = "0xB5D010", VA = "0xB5D010")]
		private void GetData()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xB5D0BC", Offset = "0xB5D0BC", VA = "0xB5D0BC")]
		private void Update()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xB5D11C", Offset = "0xB5D11C", VA = "0xB5D11C")]
		public RhythmAnalyzer()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class RhythmData : ScriptableObject, IEnumerable<Track>, IEnumerable
	{
		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _name;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Track> _tracks;

		[Token(Token = "0x1700027E")]
		public new string name
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xB5D278", Offset = "0xB5D278", VA = "0xB5D278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		public List<Track> tracks
		{
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xB5D280", Offset = "0xB5D280", VA = "0xB5D280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001116")]
		public Track<T> GetTrack<T>() where T : IFeature
		{
			return null;
		}

		[Token(Token = "0x6001117")]
		public Track<T> GetTrack<T>(string trackName) where T : IFeature
		{
			return null;
		}

		[Token(Token = "0x6001118")]
		public void GetTracks<T>(List<Track<T>> tracks) where T : IFeature
		{
		}

		[Token(Token = "0x6001119")]
		public void GetTracks<T>(List<Track<T>> tracks, string trackName) where T : IFeature
		{
		}

		[Token(Token = "0x600111A")]
		public void GetFeatures<T>(List<T> features, float start, float end) where T : IFeature
		{
		}

		[Token(Token = "0x600111B")]
		public void GetFeatures<T>(List<T> features, float start, float end, string trackName) where T : IFeature
		{
		}

		[Token(Token = "0x600111C")]
		public void GetIntersectingFeatures<T>(List<T> features, float start, float end) where T : IFeature
		{
		}

		[Token(Token = "0x600111D")]
		public void GetIntersectingFeatures<T>(List<T> features, float start, float end, string trackName) where T : IFeature
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xB5D288", Offset = "0xB5D288", VA = "0xB5D288", Slot = "4")]
		public IEnumerator<Track> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xB5D324", Offset = "0xB5D324", VA = "0xB5D324", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xB5D3B4", Offset = "0xB5D3B4", VA = "0xB5D3B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xB5C8B8", Offset = "0xB5C8B8", VA = "0xB5C8B8")]
		public static RhythmData Create(string name, IEnumerable<Track> tracks)
		{
			return null;
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xB5D548", Offset = "0xB5D548", VA = "0xB5D548")]
		public RhythmData()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class RhythmEventProvider : RhythmTarget
	{
		[Token(Token = "0x20002FD")]
		private abstract class RhythmEvent : IDisposable
		{
			[Token(Token = "0x6001134")]
			public abstract void Process(RhythmData rhythmData, float start, float end);

			[Token(Token = "0x6001135")]
			public abstract void Dispose();

			[Token(Token = "0x6001136")]
			[Address(RVA = "0xB5DC6C", Offset = "0xB5DC6C", VA = "0xB5DC6C")]
			protected RhythmEvent()
			{
			}
		}

		[Token(Token = "0x20002FE")]
		private class RhythmEvent<T> : RhythmEvent where T : IFeature
		{
			[Token(Token = "0x4001376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Action<T> _action;

			[Token(Token = "0x4001377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private List<T> _features;

			[Token(Token = "0x4001378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private string trackName;

			[Token(Token = "0x6001137")]
			public RhythmEvent(string trackName)
			{
			}

			[Token(Token = "0x6001138")]
			public override void Process(RhythmData rhythmData, float start, float end)
			{
			}

			[Token(Token = "0x6001139")]
			public void Register(Action<T> action)
			{
			}

			[Token(Token = "0x600113A")]
			public void Unregister(Action<T> action)
			{
			}

			[Token(Token = "0x600113B")]
			public override void Dispose()
			{
			}
		}

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float offset;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, RhythmEvent> _events;

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xB5D834", Offset = "0xB5D834", VA = "0xB5D834", Slot = "4")]
		public override void Process(RhythmData rhythmData, float start, float end)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xB5D9B0", Offset = "0xB5D9B0", VA = "0xB5D9B0", Slot = "5")]
		public override void Reset(RhythmData rhythmData, float time)
		{
		}

		[Token(Token = "0x600112C")]
		public void Register<T>(Action<T> action) where T : IFeature
		{
		}

		[Token(Token = "0x600112D")]
		public void Unregister<T>(Action<T> action) where T : IFeature
		{
		}

		[Token(Token = "0x600112E")]
		public void Register<T>(Action<T> action, string trackName) where T : IFeature
		{
		}

		[Token(Token = "0x600112F")]
		public void Unregister<T>(Action<T> action, string trackName) where T : IFeature
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xB5D9D4", Offset = "0xB5D9D4", VA = "0xB5D9D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xB5DB70", Offset = "0xB5DB70", VA = "0xB5DB70")]
		private static int GetHashCode(Type type, string trackName)
		{
			return default(int);
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xB5DBD0", Offset = "0xB5DBD0", VA = "0xB5DBD0")]
		private static int CombineHashCodes(int h1, int h2)
		{
			return default(int);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xB5DBDC", Offset = "0xB5DBDC", VA = "0xB5DBDC")]
		public RhythmEventProvider()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	[RequireComponent(typeof(AudioSource))]
	public class RhythmPlayer : MonoBehaviour
	{
		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RhythmData rhythmData;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<RhythmTarget> targets;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioClip _audioClip;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _time;

		[Token(Token = "0x17000282")]
		public AudioSource audioSource
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0xB5E01C", Offset = "0xB5E01C", VA = "0xB5E01C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001143")]
			[Address(RVA = "0xB5E024", Offset = "0xB5E024", VA = "0xB5E024")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000283")]
		public AudioClip audioClip
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0xB5E02C", Offset = "0xB5E02C", VA = "0xB5E02C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001145")]
			[Address(RVA = "0xB5E034", Offset = "0xB5E034", VA = "0xB5E034")]
			set
			{
			}
		}

		[Token(Token = "0x17000284")]
		public float time
		{
			[Token(Token = "0x6001146")]
			[Address(RVA = "0xB5E050", Offset = "0xB5E050", VA = "0xB5E050")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001147")]
			[Address(RVA = "0xB5E058", Offset = "0xB5E058", VA = "0xB5E058")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public float volume
		{
			[Token(Token = "0x6001148")]
			[Address(RVA = "0xB5E07C", Offset = "0xB5E07C", VA = "0xB5E07C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001149")]
			[Address(RVA = "0xB5E098", Offset = "0xB5E098", VA = "0xB5E098")]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public float pitch
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0xB5E0B4", Offset = "0xB5E0B4", VA = "0xB5E0B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xB5E0D0", Offset = "0xB5E0D0", VA = "0xB5E0D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000287")]
		public bool isPlaying
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0xB5E0EC", Offset = "0xB5E0EC", VA = "0xB5E0EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000288")]
		public float prevTime
		{
			[Token(Token = "0x600114D")]
			[Address(RVA = "0xB5E108", Offset = "0xB5E108", VA = "0xB5E108")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600114E")]
			[Address(RVA = "0xB5E110", Offset = "0xB5E110", VA = "0xB5E110")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event Action SongLoaded
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0xB5DC74", Offset = "0xB5DC74", VA = "0xB5DC74")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600113D")]
			[Address(RVA = "0xB5DD10", Offset = "0xB5DD10", VA = "0xB5DD10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event Action SongEnded
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xB5DDAC", Offset = "0xB5DDAC", VA = "0xB5DDAC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600113F")]
			[Address(RVA = "0xB5DE48", Offset = "0xB5DE48", VA = "0xB5DE48")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event Action Reset
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0xB5DEE4", Offset = "0xB5DEE4", VA = "0xB5DEE4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001141")]
			[Address(RVA = "0xB5DF80", Offset = "0xB5DF80", VA = "0xB5DF80")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xB5E118", Offset = "0xB5E118", VA = "0xB5E118")]
		public void Play()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xB5E380", Offset = "0xB5E380", VA = "0xB5E380")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xB5E39C", Offset = "0xB5E39C", VA = "0xB5E39C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xB5E3B8", Offset = "0xB5E3B8", VA = "0xB5E3B8")]
		public void UnPause()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xB5E3D4", Offset = "0xB5E3D4", VA = "0xB5E3D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xB5E42C", Offset = "0xB5E42C", VA = "0xB5E42C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xB5E7BC", Offset = "0xB5E7BC", VA = "0xB5E7BC")]
		private void OnSongLoaded()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xB5E858", Offset = "0xB5E858", VA = "0xB5E858")]
		private void OnSongEnded()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xB5E1BC", Offset = "0xB5E1BC", VA = "0xB5E1BC")]
		private void OnReset()
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xB5E874", Offset = "0xB5E874", VA = "0xB5E874")]
		public RhythmPlayer()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public abstract class RhythmTarget : ScriptableObject
	{
		[Token(Token = "0x6001159")]
		public abstract void Process(RhythmData rhythmData, float start, float end);

		[Token(Token = "0x600115A")]
		public abstract void Reset(RhythmData rhythmData, float time);

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xB5DC64", Offset = "0xB5DC64", VA = "0xB5DC64")]
		protected RhythmTarget()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class Segmenter : Analysis<Value>
	{
		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float threshold;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int smoothing;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 changeWeight;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float changeStartSlope;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float changeEndSlope;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int iterations;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int bufferSize;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[][] buffer;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] kernel;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float w;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float current;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float next;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool change;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float changeSign;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector2 changeStart;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float maxSlope;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int maxSlopeIndex;

		[Token(Token = "0x17000289")]
		public override string name
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xB5E87C", Offset = "0xB5E87C", VA = "0xB5E87C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xB5E8BC", Offset = "0xB5E8BC", VA = "0xB5E8BC", Slot = "5")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xB5EA98", Offset = "0xB5EA98", VA = "0xB5EA98", Slot = "6")]
		public override void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xB5ED58", Offset = "0xB5ED58", VA = "0xB5ED58")]
		private void FindSegments()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xB5EDB8", Offset = "0xB5EDB8", VA = "0xB5EDB8")]
		private void FindChangeEnd(float slope)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xB5EEFC", Offset = "0xB5EEFC", VA = "0xB5EEFC")]
		private void FindChangeStart(float slope)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xB5EF60", Offset = "0xB5EF60", VA = "0xB5EF60")]
		public Segmenter()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public abstract class Track : ScriptableObject
	{
		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string _name;

		[Token(Token = "0x1700028A")]
		public new string name
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xB5EFD8", Offset = "0xB5EFD8", VA = "0xB5EFD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xB5EFE0", Offset = "0xB5EFE0", VA = "0xB5EFE0")]
		protected Track()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public abstract class Track<T> : Track where T : IFeature
	{
		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<T> _features;

		[NonSerialized]
		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<int> cachedTimestamps;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<int, int> cachedIndices;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Type concreteType;

		[Token(Token = "0x1700028B")]
		public T this[int index]
		{
			[Token(Token = "0x6001165")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x1700028C")]
		public int count
		{
			[Token(Token = "0x6001166")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001167")]
		static Track()
		{
		}

		[Token(Token = "0x6001168")]
		public void Add(T feature)
		{
		}

		[Token(Token = "0x6001169")]
		public void Remove(T feature)
		{
		}

		[Token(Token = "0x600116A")]
		public void Sort()
		{
		}

		[Token(Token = "0x600116B")]
		public void GetFeatures(List<T> features, float start, float end)
		{
		}

		[Token(Token = "0x600116C")]
		public void GetIntersectingFeatures(List<T> features, float start, float end)
		{
		}

		[Token(Token = "0x600116D")]
		public int GetIndex(float timestamp)
		{
			return default(int);
		}

		[Token(Token = "0x600116E")]
		private int BinarySearch(float timestamp)
		{
			return default(int);
		}

		[Token(Token = "0x600116F")]
		private int GetIntersectingIndex(float timestamp)
		{
			return default(int);
		}

		[Token(Token = "0x6001170")]
		private int GetCacheIndex(int timestamp)
		{
			return default(int);
		}

		[Token(Token = "0x6001171")]
		private void ClearCache(float timestamp)
		{
		}

		[Token(Token = "0x6001172")]
		public static Track<T> Create(string name)
		{
			return null;
		}

		[Token(Token = "0x6001173")]
		protected Track()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class Util
	{
		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LomontFFT fft;

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xB5CE44", Offset = "0xB5CE44", VA = "0xB5CE44")]
		public static void GetMono(float[] samples, float[] monoSamples, int channels = 0)
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xB5AA3C", Offset = "0xB5AA3C", VA = "0xB5AA3C")]
		public static void GetSpectrum(float[] samples)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xB5AAA8", Offset = "0xB5AAA8", VA = "0xB5AAA8")]
		public static void GetSpectrumMagnitude(float[] spectrum, float[] magnitude)
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xB5A9D0", Offset = "0xB5A9D0", VA = "0xB5A9D0")]
		internal static void ApplyWindow(float[] array, float[] window)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xB5ABE8", Offset = "0xB5ABE8", VA = "0xB5ABE8")]
		public static float Mean(float[] array, int start = 0, int end = 0)
		{
			return default(float);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xB5ECB4", Offset = "0xB5ECB4", VA = "0xB5ECB4")]
		public static float WeightedSum(float[] array, float[] kernel, int index)
		{
			return default(float);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xB59A94", Offset = "0xB59A94", VA = "0xB59A94")]
		public static int MaxIndex(float[] array, int start = 0, int end = 0)
		{
			return default(int);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xB59E5C", Offset = "0xB59E5C", VA = "0xB59E5C")]
		public static float Max(float[] array, int start = 0, int end = 0)
		{
			return default(float);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xB59940", Offset = "0xB59940", VA = "0xB59940")]
		public static void Smooth(float[] array, float[] smoothedArray, float[] kernel)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xB59A0C", Offset = "0xB59A0C", VA = "0xB59A0C")]
		public static float Interpolate(float[] array, float index)
		{
			return default(float);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xB5EFE8", Offset = "0xB5EFE8", VA = "0xB5EFE8")]
		public static void HannWindow(float[] array)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xB5A3B8", Offset = "0xB5A3B8", VA = "0xB5A3B8")]
		public static float[] HannWindow(int length)
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xB58FC0", Offset = "0xB58FC0", VA = "0xB58FC0")]
		public static float HannWindow(int n, int windowSize)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000306")]
	public class ValueTrack : Track<Value>
	{
		[Token(Token = "0x6001185")]
		[Address(RVA = "0xB5F144", Offset = "0xB5F144", VA = "0xB5F144")]
		public ValueTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public struct Value : IFeature
	{
		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timestamp;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float length;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float value;

		[Token(Token = "0x1700028D")]
		private float RhythmTool.IFeature.timestamp
		{
			[Token(Token = "0x6001186")]
			[Address(RVA = "0xB5F1B0", Offset = "0xB5F1B0", VA = "0xB5F1B0", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700028E")]
		private float RhythmTool.IFeature.length
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0xB5F1B8", Offset = "0xB5F1B8", VA = "0xB5F1B8", Slot = "5")]
			get
			{
				return default(float);
			}
		}
	}
	[Token(Token = "0x2000308")]
	public class VolumeSampler : Analysis<Value>
	{
		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int _interval;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private int _smoothing;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int bufferSize;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int smoothingBufferSize;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] buffer;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] smoothingBuffer;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] smoothingKernel;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float w;

		[Token(Token = "0x1700028F")]
		public override string name
		{
			[Token(Token = "0x6001188")]
			[Address(RVA = "0xB5F1C0", Offset = "0xB5F1C0", VA = "0xB5F1C0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		public int interval
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0xB5F200", Offset = "0xB5F200", VA = "0xB5F200")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600118A")]
			[Address(RVA = "0xB5F208", Offset = "0xB5F208", VA = "0xB5F208")]
			set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public int smoothing
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0xB5F224", Offset = "0xB5F224", VA = "0xB5F224")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600118C")]
			[Address(RVA = "0xB5F22C", Offset = "0xB5F22C", VA = "0xB5F22C")]
			set
			{
			}
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xB5F244", Offset = "0xB5F244", VA = "0xB5F244", Slot = "5")]
		public override void Initialize(int sampleRate, int frameSize, int hopSize)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xB5F3B8", Offset = "0xB5F3B8", VA = "0xB5F3B8", Slot = "6")]
		public override void Process(float[] samples, float[] magnitude, int frameIndex)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xB5F594", Offset = "0xB5F594", VA = "0xB5F594")]
		public VolumeSampler()
		{
		}
	}
}
namespace RhythmTool.Examples
{
	[Token(Token = "0x2000309")]
	public abstract class SongSelector : MonoBehaviour
	{
		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RhythmAnalyzer analyzer;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RhythmPlayer player;

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xB5F5E8", Offset = "0xB5F5E8", VA = "0xB5F5E8", Slot = "4")]
		public virtual void NextSong()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xB5F60C", Offset = "0xB5F60C", VA = "0xB5F60C")]
		protected SongSelector()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class AudioClipSelector : SongSelector
	{
		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AudioClip> songs;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int currentSong;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xB5F614", Offset = "0xB5F614", VA = "0xB5F614")]
		private void Start()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xB5F620", Offset = "0xB5F620", VA = "0xB5F620", Slot = "4")]
		public override void NextSong()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xB5F730", Offset = "0xB5F730", VA = "0xB5F730")]
		public AudioClipSelector()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class Line : MonoBehaviour
	{
		[Token(Token = "0x17000292")]
		public float timestamp
		{
			[Token(Token = "0x6001195")]
			[Address(RVA = "0xB5F740", Offset = "0xB5F740", VA = "0xB5F740")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001196")]
			[Address(RVA = "0xB5F748", Offset = "0xB5F748", VA = "0xB5F748")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xB5F750", Offset = "0xB5F750", VA = "0xB5F750")]
		public void Init(Color color, float opacity, float timestamp)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xB5F834", Offset = "0xB5F834", VA = "0xB5F834")]
		public Line()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class Visualizer : MonoBehaviour
	{
		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RhythmAnalyzer analyzer;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RhythmPlayer player;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RhythmEventProvider eventProvider;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text textBPM;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Line linePrefab;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Line> lines;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Chroma> chromaFeatures;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Note lastNote;

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xB5F83C", Offset = "0xB5F83C", VA = "0xB5F83C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xB5FB3C", Offset = "0xB5FB3C", VA = "0xB5FB3C")]
		private void Update()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xB5FB78", Offset = "0xB5FB78", VA = "0xB5FB78")]
		private void UpdateLines()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xB60004", Offset = "0xB60004", VA = "0xB60004")]
		private void OnInitialized(RhythmData rhythmData)
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xB6001C", Offset = "0xB6001C", VA = "0xB6001C")]
		private void OnReset()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xB601D4", Offset = "0xB601D4", VA = "0xB601D4")]
		private void OnBeat(Beat beat)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xB60504", Offset = "0xB60504", VA = "0xB60504")]
		private void OnOnset(Onset onset)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xB60798", Offset = "0xB60798", VA = "0xB60798")]
		private void OnSegment(Value segment)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xB6034C", Offset = "0xB6034C", VA = "0xB6034C")]
		private void CreateLine(float timestamp, float position, float scale, Color color, float opacity)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xB607BC", Offset = "0xB607BC", VA = "0xB607BC")]
		public Visualizer()
		{
		}
	}
}
namespace DigitalRuby.ThunderAndLightning
{
	[Token(Token = "0x200030D")]
	public class DemoConfigureScript : MonoBehaviour
	{
		[Token(Token = "0x40013B3")]
		private const string scriptTemplate = "// Important, make sure this script is assigned properly, or you will get null ref exceptions.\r\n    DigitalRuby.ThunderAndLightning.LightningBoltScript script = gameObject.GetComponent<DigitalRuby.ThunderAndLightning.LightningBoltScript>();\r\n    int count = {0};\r\n    float duration = {1}f;\r\n    float delay = 0.0f;\r\n    int seed = {2};\r\n    System.Random r = new System.Random(seed);\r\n    Vector3 start = new Vector3({3}f, {4}f, {5}f);\r\n    Vector3 end = new Vector3({6}f, {7}f, {8}f);\r\n    int generations = {9};\r\n    float chaosFactor = {10}f;\r\n    float trunkWidth = {11}f;\r\n    float intensity = {12}f;\r\n    float glowIntensity = {13}f;\r\n    float glowWidthMultiplier = {14}f;\r\n    float forkedness = {15}f;\r\n    float singleDuration = Mathf.Max(1.0f / 30.0f, (duration / (float)count));\r\n    float fadePercent = {16}f;\r\n    float growthMultiplier = {17}f;\r\n    System.Collections.Generic.List<LightningBoltParameters> paramList = new System.Collections.Generic.List<LightningBoltParameters>();\r\n    while (count-- > 0)\r\n    {{\r\n        DigitalRuby.ThunderAndLightning.LightningBoltParameters parameters = new DigitalRuby.ThunderAndLightning.LightningBoltParameters\r\n        {{\r\n            Start = start,\r\n            End = end,\r\n            Generations = generations,\r\n            LifeTime = (count == 1 ? singleDuration : (singleDuration * (((float)r.NextDouble() * 0.4f) + 0.8f))),\r\n            Delay = delay,\r\n            ChaosFactor = chaosFactor,\r\n            ChaosFactorForks = chaosFactor,\r\n            TrunkWidth = trunkWidth,\r\n            GlowIntensity = glowIntensity,\r\n            GlowWidthMultiplier = glowWidthMultiplier,\r\n            Forkedness = forkedness,\r\n            Random = r,\r\n            FadePercent = fadePercent, // set to 0 to disable fade in / out\r\n            GrowthMultiplier = growthMultiplier\r\n        }};\r\n        paramList.Add(parameters);\r\n        delay += (singleDuration * (((float)r.NextDouble() * 0.8f) + 0.4f));\r\n    }}\r\n    script.CreateLightningBolts(paramList);\r\n";

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int lastSeed;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 lastStart;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 lastEnd;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LightningBoltScript LightningBoltScript;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider GenerationsSlider;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Slider BoltCountSlider;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Slider DurationSlider;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider ChaosSlider;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Slider TrunkWidthSlider;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Slider ForkednessSlider;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Slider IntensitySlider;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text IntensityValueLabel;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Slider GlowIntensitySlider;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Slider GlowWidthSlider;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Slider FadePercentSlider;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Slider GrowthMultiplierSlider;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Slider DistanceSlider;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Text GenerationsValueLabel;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Text BoltCountValueLabel;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Text DurationValueLabel;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Text ChaosValueLabel;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Text TrunkWidthValueLabel;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Text ForkednessValueLabel;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Text GlowIntensityValueLabel;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Text GlowWidthValueLabel;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Text FadePercentValueLabel;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Text GrowthMultiplierValueLabel;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Text DistanceValueLabel;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text SeedLabel;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public RawImage StartImage;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public RawImage EndImage;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Button CopySeedButton;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public InputField SeedInputField;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Text SpaceBarLabel;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Toggle OrthographicToggle;

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xB607CC", Offset = "0xB607CC", VA = "0xB607CC")]
		public void GenerationsSliderChanged(float value)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xB60BC4", Offset = "0xB60BC4", VA = "0xB60BC4")]
		public void BoltCountSliderChanged(float value)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xB60BC8", Offset = "0xB60BC8", VA = "0xB60BC8")]
		public void DurationSliderChanged(float value)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xB60BCC", Offset = "0xB60BCC", VA = "0xB60BCC")]
		public void LengthSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xB60BD0", Offset = "0xB60BD0", VA = "0xB60BD0")]
		public void TrunkSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xB60BD4", Offset = "0xB60BD4", VA = "0xB60BD4")]
		public void IntensitySliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xB60BD8", Offset = "0xB60BD8", VA = "0xB60BD8")]
		public void GlowSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xB60BDC", Offset = "0xB60BDC", VA = "0xB60BDC")]
		public void FadePercentValueChanged(float value)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xB60BE0", Offset = "0xB60BE0", VA = "0xB60BE0")]
		public void GrowthMultiplierValueChanged(float value)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xB60BE4", Offset = "0xB60BE4", VA = "0xB60BE4")]
		public void DistanceValueChanged(float value)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xB60BE8", Offset = "0xB60BE8", VA = "0xB60BE8")]
		public void StartLightningDrag()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xB60C20", Offset = "0xB60C20", VA = "0xB60C20")]
		public void EndLightningDrag()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xB60C58", Offset = "0xB60C58", VA = "0xB60C58")]
		public void CreateButtonClicked()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xB612C4", Offset = "0xB612C4", VA = "0xB612C4")]
		public void OrthographicToggleClicked()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xB61370", Offset = "0xB61370", VA = "0xB61370")]
		public void CopyButtonClicked()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xB61AC0", Offset = "0xB61AC0", VA = "0xB61AC0")]
		public void ClearButtonClicked()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xB607D0", Offset = "0xB607D0", VA = "0xB607D0")]
		private void UpdateUI()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xB60C5C", Offset = "0xB60C5C", VA = "0xB60C5C")]
		private void CallLightning()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xB61E44", Offset = "0xB61E44", VA = "0xB61E44")]
		private void UpdateStatusLabel(TimeSpan time)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xB62550", Offset = "0xB62550", VA = "0xB62550")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xB625B8", Offset = "0xB625B8", VA = "0xB625B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xB625F8", Offset = "0xB625F8", VA = "0xB625F8")]
		public DemoConfigureScript()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class DemoMeshScript : MonoBehaviour
	{
		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xB62600", Offset = "0xB62600", VA = "0xB62600")]
		public DemoMeshScript()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class DemoPathScript : MonoBehaviour
	{
		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Crate;

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xB62608", Offset = "0xB62608", VA = "0xB62608")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xB6267C", Offset = "0xB6267C", VA = "0xB6267C")]
		public DemoPathScript()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class DemoPlayerControllerScript : MonoBehaviour
	{
		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text SpellLabel;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Speed;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateSpeed;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LightningSpellScript[] Spells;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int spellIndex;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool spellMouseButtonDown;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject rightHand;

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xB62684", Offset = "0xB62684", VA = "0xB62684")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xB6282C", Offset = "0xB6282C", VA = "0xB6282C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xB62970", Offset = "0xB62970", VA = "0xB62970")]
		private void Update()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xB62F44", Offset = "0xB62F44", VA = "0xB62F44")]
		private bool GuiElementShouldPassThrough()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xB628DC", Offset = "0xB628DC", VA = "0xB628DC")]
		private void UpdateSpell()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xB63290", Offset = "0xB63290", VA = "0xB63290")]
		private void ChangeSpell(int dir)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xB62F3C", Offset = "0xB62F3C", VA = "0xB62F3C")]
		public void PreviousSpell()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xB62F34", Offset = "0xB62F34", VA = "0xB62F34")]
		public void NextSpell()
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xB6334C", Offset = "0xB6334C", VA = "0xB6334C")]
		public DemoPlayerControllerScript()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x2000312")]
		private enum RotationAxes
		{
			[Token(Token = "0x40013F4")]
			MouseXAndY,
			[Token(Token = "0x40013F5")]
			MouseX,
			[Token(Token = "0x40013F6")]
			MouseY
		}

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ThunderAndLightningScript ThunderAndLightningScript;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LightningBoltScript LightningBoltScript;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem CloudParticleSystem;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MoveSpeed;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool EnableMouseLook;

		[Token(Token = "0x40013E4")]
		private const float fastCloudSpeed = 50f;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float deltaTime;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fpsIncrement;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string fpsText;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RotationAxes axes;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float sensitivityX;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float sensitivityY;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float minimumX;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float maximumX;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float minimumY;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float maximumY;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float rotationX;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float rotationY;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion originalRotation;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly GUIStyle style;

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xB6335C", Offset = "0xB6335C", VA = "0xB6335C")]
		private void UpdateThunder()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xB63494", Offset = "0xB63494", VA = "0xB63494")]
		private void UpdateMovement()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xB63634", Offset = "0xB63634", VA = "0xB63634")]
		private void UpdateMouseLook()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xB63B9C", Offset = "0xB63B9C", VA = "0xB63B9C")]
		private void UpdateQuality()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xB63C40", Offset = "0xB63C40", VA = "0xB63C40")]
		private void UpdateOther()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xB63D38", Offset = "0xB63D38", VA = "0xB63D38")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xB64058", Offset = "0xB64058", VA = "0xB64058")]
		private void Update()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xB64084", Offset = "0xB64084", VA = "0xB64084")]
		private void Start()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xB63B60", Offset = "0xB63B60", VA = "0xB63B60")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xB62EDC", Offset = "0xB62EDC", VA = "0xB62EDC")]
		public static void ReloadCurrentScene()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xB6413C", Offset = "0xB6413C", VA = "0xB6413C")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class DemoScript2D : MonoBehaviour
	{
		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject SpriteToRotate;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LightningBoltPrefabScriptBase LightningScript;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xB641F0", Offset = "0xB641F0", VA = "0xB641F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xB642FC", Offset = "0xB642FC", VA = "0xB642FC")]
		public DemoScript2D()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class DemoScriptManualAutomatic : MonoBehaviour
	{
		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject LightningPrefab;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle AutomaticToggle;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform a;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform b;

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xB64304", Offset = "0xB64304", VA = "0xB64304")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xB64408", Offset = "0xB64408", VA = "0xB64408")]
		public void AutomaticToggled()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xB64474", Offset = "0xB64474", VA = "0xB64474")]
		public void ManualTriggerClicked()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xB644D0", Offset = "0xB644D0", VA = "0xB644D0")]
		public DemoScriptManualAutomatic()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class DemoScriptMoveRandomly : MonoBehaviour
	{
		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float elapsed;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 startStartPos;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 startEndPos;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 endStartPos;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 endEndPos;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform Transform1;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform Transform2;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MoveTimeSeconds;

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xB644D8", Offset = "0xB644D8", VA = "0xB644D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xB64758", Offset = "0xB64758", VA = "0xB64758")]
		public DemoScriptMoveRandomly()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class DemoScriptPrefabTutorial : MonoBehaviour
	{
		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LightningBoltPrefabScript LightningScript;

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xB64770", Offset = "0xB64770", VA = "0xB64770")]
		private void Update()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xB647A8", Offset = "0xB647A8", VA = "0xB647A8")]
		public DemoScriptPrefabTutorial()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class DemoScriptReloadSceneEsc : MonoBehaviour
	{
		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xB647B0", Offset = "0xB647B0", VA = "0xB647B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xB64814", Offset = "0xB64814", VA = "0xB64814")]
		public DemoScriptReloadSceneEsc()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class DemoScriptRotate : MonoBehaviour
	{
		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Rotation;

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xB6481C", Offset = "0xB6481C", VA = "0xB6481C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xB648FC", Offset = "0xB648FC", VA = "0xB648FC")]
		public DemoScriptRotate()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class DemoScriptTriggerPath : MonoBehaviour
	{
		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LightningSplineScript Script;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle SplineToggle;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<Vector3> points;

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xB64904", Offset = "0xB64904", VA = "0xB64904")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xB64924", Offset = "0xB64924", VA = "0xB64924")]
		private void Update()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xB64BCC", Offset = "0xB64BCC", VA = "0xB64BCC")]
		public DemoScriptTriggerPath()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public enum LightningBoltQualitySetting
	{
		[Token(Token = "0x400140B")]
		UseScript,
		[Token(Token = "0x400140C")]
		LimitToQualitySetting
	}
	[Token(Token = "0x200031B")]
	public enum CameraMode
	{
		[Token(Token = "0x400140E")]
		Auto,
		[Token(Token = "0x400140F")]
		Perspective,
		[Token(Token = "0x4001410")]
		OrthographicXY,
		[Token(Token = "0x4001411")]
		OrthographicXZ,
		[Token(Token = "0x4001412")]
		Unknown
	}
	[Token(Token = "0x200031C")]
	public enum LightningCustomTransformState
	{
		[Token(Token = "0x4001414")]
		Started,
		[Token(Token = "0x4001415")]
		Executing,
		[Token(Token = "0x4001416")]
		Ended
	}
	[Token(Token = "0x200031D")]
	public class LightningCustomTransformStateInfo
	{
		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 BoltStartPosition;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 BoltEndPosition;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform Transform;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform StartTransform;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform EndTransform;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public object UserInfo;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<LightningCustomTransformStateInfo> cache;

		[Token(Token = "0x17000293")]
		public LightningCustomTransformState State
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0xB64C54", Offset = "0xB64C54", VA = "0xB64C54")]
			[CompilerGenerated]
			get
			{
				return default(LightningCustomTransformState);
			}
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0xB64C5C", Offset = "0xB64C5C", VA = "0xB64C5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public LightningBoltParameters Parameters
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0xB64C64", Offset = "0xB64C64", VA = "0xB64C64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xB64C6C", Offset = "0xB64C6C", VA = "0xB64C6C")]
		public static LightningCustomTransformStateInfo GetOrCreateStateInfo()
		{
			return null;
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xB64D84", Offset = "0xB64D84", VA = "0xB64D84")]
		public static void ReturnStateInfoToCache(LightningCustomTransformStateInfo info)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xB64D7C", Offset = "0xB64D7C", VA = "0xB64D7C")]
		public LightningCustomTransformStateInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031E")]
	public class LightningCustomTransformDelegate : UnityEvent<LightningCustomTransformStateInfo>
	{
		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xB64F44", Offset = "0xB64F44", VA = "0xB64F44")]
		public LightningCustomTransformDelegate()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031F")]
	public class LightningLightParameters
	{
		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LightRenderMode RenderMode;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color LightColor;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LightPercent;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LightShadowPercent;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LightIntensity;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LightMultiplier;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float BounceIntensity;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float ShadowStrength;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float ShadowBias;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ShadowNormalBias;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LightRange;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask CullingMask;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float OrthographicOffset;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float FadeInMultiplier;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float FadeFullyLitMultiplier;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float FadeOutMultiplier;

		[Token(Token = "0x17000295")]
		public bool HasLight
		{
			[Token(Token = "0x60011EA")]
			[Address(RVA = "0xB64F8C", Offset = "0xB64F8C", VA = "0xB64F8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xB64FD8", Offset = "0xB64FD8", VA = "0xB64FD8")]
		public LightningLightParameters()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000320")]
	public sealed class LightningBoltParameters
	{
		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int randomSeed;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<LightningBoltParameters> cache;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int generationWhereForksStop;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int forkednessCalculated;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal LightningBoltQualitySetting quality;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float delaySeconds;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int maxLights;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float Scale;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Dictionary<int, LightningQualityMaximum> QualityMaximums;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LightningGenerator Generator;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 Start;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 End;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 StartVariance;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 EndVariance;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<LightningCustomTransformStateInfo> CustomTransform;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int generations;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float LifeTime;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float Delay;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public RangeOfFloats DelayRange;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float ChaosFactor;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float ChaosFactorForks;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float TrunkWidth;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float EndWidthMultiplier;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float Intensity;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float GlowIntensity;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float GlowWidthMultiplier;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float Forkedness;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int GenerationWhereForksStopSubtractor;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color32 Color;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Color32 MainTrunkTintColor;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private System.Random random;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private System.Random currentRandom;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private System.Random randomOverride;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float FadePercent;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float FadeInMultiplier;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float FadeFullyLitMultiplier;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float FadeOutMultiplier;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float growthMultiplier;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float ForkLengthMultiplier;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float ForkLengthVariance;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float ForkEndWidthMultiplier;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int SmoothingFactor;

		[Token(Token = "0x17000296")]
		public int Generations
		{
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0xB653EC", Offset = "0xB653EC", VA = "0xB653EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xB61C7C", Offset = "0xB61C7C", VA = "0xB61C7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000297")]
		public System.Random Random
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0xB653F4", Offset = "0xB653F4", VA = "0xB653F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000298")]
		public System.Random RandomOverride
		{
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0xB61DE8", Offset = "0xB61DE8", VA = "0xB61DE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public float GrowthMultiplier
		{
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0xB653FC", Offset = "0xB653FC", VA = "0xB653FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0xB61E24", Offset = "0xB61E24", VA = "0xB61E24")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public List<Vector3> Points
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0xB65404", Offset = "0xB65404", VA = "0xB65404")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0xB6540C", Offset = "0xB6540C", VA = "0xB6540C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xB65048", Offset = "0xB65048", VA = "0xB65048")]
		static LightningBoltParameters()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xB61B1C", Offset = "0xB61B1C", VA = "0xB61B1C")]
		public LightningBoltParameters()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xB65414", Offset = "0xB65414", VA = "0xB65414")]
		public float ForkMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xB6544C", Offset = "0xB6544C", VA = "0xB6544C")]
		public Vector3 ApplyVariance(Vector3 pos, Vector3 variance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xB6551C", Offset = "0xB6551C", VA = "0xB6551C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xB655DC", Offset = "0xB655DC", VA = "0xB655DC")]
		public static LightningBoltParameters GetOrCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xB656E8", Offset = "0xB656E8", VA = "0xB656E8")]
		public static void ReturnParametersToCache(LightningBoltParameters p)
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class LightningBoltSegmentGroup
	{
		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float LineWidth;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int StartIndex;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Generation;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Delay;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float PeakStart;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float PeakEnd;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LifeTime;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float EndWidthMultiplier;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color32 Color;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly List<LightningBoltSegment> Segments;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly List<Light> Lights;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x1700029B")]
		public int SegmentCount
		{
			[Token(Token = "0x60011FB")]
			[Address(RVA = "0xB6581C", Offset = "0xB6581C", VA = "0xB6581C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xB6586C", Offset = "0xB6586C", VA = "0xB6586C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xB6590C", Offset = "0xB6590C", VA = "0xB6590C")]
		public LightningBoltSegmentGroup()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public struct LightningBoltSegment
	{
		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Start;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 End;

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xB659E4", Offset = "0xB659E4", VA = "0xB659E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000323")]
	public class LightningQualityMaximum
	{
		[Token(Token = "0x1700029C")]
		public int MaximumGenerations
		{
			[Token(Token = "0x60011FF")]
			[Address(RVA = "0xB65A50", Offset = "0xB65A50", VA = "0xB65A50")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001200")]
			[Address(RVA = "0xB65A58", Offset = "0xB65A58", VA = "0xB65A58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public float MaximumLightPercent
		{
			[Token(Token = "0x6001201")]
			[Address(RVA = "0xB65A60", Offset = "0xB65A60", VA = "0xB65A60")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001202")]
			[Address(RVA = "0xB65A68", Offset = "0xB65A68", VA = "0xB65A68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public float MaximumShadowPercent
		{
			[Token(Token = "0x6001203")]
			[Address(RVA = "0xB65A70", Offset = "0xB65A70", VA = "0xB65A70")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001204")]
			[Address(RVA = "0xB65A78", Offset = "0xB65A78", VA = "0xB65A78")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xB653E4", Offset = "0xB653E4", VA = "0xB653E4")]
		public LightningQualityMaximum()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class LightningBoltDependencies
	{
		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Parent;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material LightningMaterialMesh;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material LightningMaterialMeshNoGlow;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem OriginParticleSystem;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem DestParticleSystem;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 CameraPos;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool CameraIsOrthographic;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CameraMode CameraMode;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool UseWorldSpace;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LevelOfDetailDistance;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string SortLayerName;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int SortOrderInLayer;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ICollection<LightningBoltParameters> Parameters;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LightningThreadState ThreadState;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Func<IEnumerator, Coroutine> StartCoroutine;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action<Light> LightAdded;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action<Light> LightRemoved;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action<LightningBolt> AddActiveBolt;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action<LightningBoltDependencies> ReturnToCache;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningBoltStarted;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningBoltEnded;

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xB65A80", Offset = "0xB65A80", VA = "0xB65A80")]
		public LightningBoltDependencies()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class LightningBolt
	{
		[Token(Token = "0x2000326")]
		public class LineRendererMesh
		{
			[Token(Token = "0x4001499")]
			private const int defaultListCapacity = 2048;

			[Token(Token = "0x400149A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Vector2 uv1;

			[Token(Token = "0x400149B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static readonly Vector2 uv2;

			[Token(Token = "0x400149C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static readonly Vector2 uv3;

			[Token(Token = "0x400149D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private static readonly Vector2 uv4;

			[Token(Token = "0x400149E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly List<int> indices;

			[Token(Token = "0x400149F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly List<Vector3> vertices;

			[Token(Token = "0x40014A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private readonly List<Vector4> lineDirs;

			[Token(Token = "0x40014A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private readonly List<Color32> colors;

			[Token(Token = "0x40014A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private readonly List<Vector3> ends;

			[Token(Token = "0x40014A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private readonly List<Vector4> texCoordsAndGlowModifiers;

			[Token(Token = "0x40014A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private readonly List<Vector4> fadeLifetimes;

			[Token(Token = "0x40014A5")]
			private const int boundsPadder = 1000000000;

			[Token(Token = "0x40014A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int currentBoundsMinX;

			[Token(Token = "0x40014A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private int currentBoundsMinY;

			[Token(Token = "0x40014A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private int currentBoundsMinZ;

			[Token(Token = "0x40014A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private int currentBoundsMaxX;

			[Token(Token = "0x40014AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int currentBoundsMaxY;

			[Token(Token = "0x40014AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private int currentBoundsMaxZ;

			[Token(Token = "0x40014AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Mesh mesh;

			[Token(Token = "0x40014AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private MeshFilter meshFilterGlow;

			[Token(Token = "0x40014AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private MeshFilter meshFilterBolt;

			[Token(Token = "0x40014AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private MeshRenderer meshRendererGlow;

			[Token(Token = "0x40014B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private MeshRenderer meshRendererBolt;

			[Token(Token = "0x170002A3")]
			public GameObject GameObject
			{
				[Token(Token = "0x6001228")]
				[Address(RVA = "0xB6A978", Offset = "0xB6A978", VA = "0xB6A978")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001229")]
				[Address(RVA = "0xB6A980", Offset = "0xB6A980", VA = "0xB6A980")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170002A4")]
			public Material MaterialGlow
			{
				[Token(Token = "0x600122A")]
				[Address(RVA = "0xB6A988", Offset = "0xB6A988", VA = "0xB6A988")]
				set
				{
				}
			}

			[Token(Token = "0x170002A5")]
			public Material MaterialBolt
			{
				[Token(Token = "0x600122B")]
				[Address(RVA = "0xB6A9A4", Offset = "0xB6A9A4", VA = "0xB6A9A4")]
				set
				{
				}
			}

			[Token(Token = "0x170002A6")]
			public MeshRenderer MeshRendererGlow
			{
				[Token(Token = "0x600122C")]
				[Address(RVA = "0xB6A9C0", Offset = "0xB6A9C0", VA = "0xB6A9C0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A7")]
			public MeshRenderer MeshRendererBolt
			{
				[Token(Token = "0x600122D")]
				[Address(RVA = "0xB6A9C8", Offset = "0xB6A9C8", VA = "0xB6A9C8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A8")]
			public int Tag
			{
				[Token(Token = "0x600122E")]
				[Address(RVA = "0xB6A9D0", Offset = "0xB6A9D0", VA = "0xB6A9D0")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600122F")]
				[Address(RVA = "0xB6A9D8", Offset = "0xB6A9D8", VA = "0xB6A9D8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170002A9")]
			public Action<LightningCustomTransformStateInfo> CustomTransform
			{
				[Token(Token = "0x6001230")]
				[Address(RVA = "0xB6A9E0", Offset = "0xB6A9E0", VA = "0xB6A9E0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001231")]
				[Address(RVA = "0xB6A9E8", Offset = "0xB6A9E8", VA = "0xB6A9E8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170002AA")]
			public Transform Transform
			{
				[Token(Token = "0x6001232")]
				[Address(RVA = "0xB6A9F0", Offset = "0xB6A9F0", VA = "0xB6A9F0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001233")]
				[Address(RVA = "0xB6A9F8", Offset = "0xB6A9F8", VA = "0xB6A9F8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170002AB")]
			public bool Empty
			{
				[Token(Token = "0x6001234")]
				[Address(RVA = "0xB6AA00", Offset = "0xB6AA00", VA = "0xB6AA00")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001235")]
			[Address(RVA = "0xB6AA50", Offset = "0xB6AA50", VA = "0xB6AA50")]
			public LineRendererMesh(LightningBoltDependencies dependencies)
			{
			}

			[Token(Token = "0x6001236")]
			[Address(RVA = "0xB6AF00", Offset = "0xB6AF00", VA = "0xB6AF00")]
			public void PopulateMesh()
			{
			}

			[Token(Token = "0x6001237")]
			[Address(RVA = "0xB6B118", Offset = "0xB6B118", VA = "0xB6B118")]
			public bool PrepareForLines(int lineCount)
			{
				return default(bool);
			}

			[Token(Token = "0x6001238")]
			[Address(RVA = "0xB6B174", Offset = "0xB6B174", VA = "0xB6B174")]
			public void BeginLine(Vector3 start, Vector3 end, float radius, Color32 color, float colorIntensity, Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}

			[Token(Token = "0x6001239")]
			[Address(RVA = "0xB6BD08", Offset = "0xB6BD08", VA = "0xB6BD08")]
			public void AppendLine(Vector3 start, Vector3 end, float radius, Color32 color, float colorIntensity, Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}

			[Token(Token = "0x600123A")]
			[Address(RVA = "0xB6BE50", Offset = "0xB6BE50", VA = "0xB6BE50")]
			public void Reset()
			{
			}

			[Token(Token = "0x600123B")]
			[Address(RVA = "0xB6AF68", Offset = "0xB6AF68", VA = "0xB6AF68")]
			private void PopulateMeshInternal()
			{
			}

			[Token(Token = "0x600123C")]
			[Address(RVA = "0xB6BFA0", Offset = "0xB6BFA0", VA = "0xB6BFA0")]
			private void UpdateBounds(ref Vector3 point1, ref Vector3 point2)
			{
			}

			[Token(Token = "0x600123D")]
			[Address(RVA = "0xB6C074", Offset = "0xB6C074", VA = "0xB6C074")]
			private void AddIndices()
			{
			}

			[Token(Token = "0x600123E")]
			[Address(RVA = "0xB6B1E8", Offset = "0xB6B1E8", VA = "0xB6B1E8")]
			private void AppendLineInternal(ref Vector3 start, ref Vector3 end, ref Vector4 dir, ref Vector4 dirPrev1, ref Vector4 dirPrev2, Color32 color, float colorIntensity, ref Vector4 fadeLifeTime, float glowWidthModifier, float glowIntensity)
			{
			}
		}

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int MaximumLightCount;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int MaximumLightsPerBatch;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DateTime startTimeOffset;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LightningBoltDependencies dependencies;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float elapsedTime;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lifeTime;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float maxLifeTime;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool hasLight;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float timeSinceLevelLoad;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<LightningBoltSegmentGroup> segmentGroups;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<LightningBoltSegmentGroup> segmentGroupsWithLight;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<LineRendererMesh> activeLineRenderers;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lightCount;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly List<LineRendererMesh> lineRendererCache;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly List<LightningBoltSegmentGroup> groupCache;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly List<Light> lightCache;

		[Token(Token = "0x1700029F")]
		public float MinimumDelay
		{
			[Token(Token = "0x6001207")]
			[Address(RVA = "0xB65A88", Offset = "0xB65A88", VA = "0xB65A88")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001208")]
			[Address(RVA = "0xB65A90", Offset = "0xB65A90", VA = "0xB65A90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public bool HasGlow
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0xB65A98", Offset = "0xB65A98", VA = "0xB65A98")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600120A")]
			[Address(RVA = "0xB65AA0", Offset = "0xB65AA0", VA = "0xB65AA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002A1")]
		public bool IsActive
		{
			[Token(Token = "0x600120B")]
			[Address(RVA = "0xB65AAC", Offset = "0xB65AAC", VA = "0xB65AAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A2")]
		public CameraMode CameraMode
		{
			[Token(Token = "0x600120C")]
			[Address(RVA = "0xB65ABC", Offset = "0xB65ABC", VA = "0xB65ABC")]
			[CompilerGenerated]
			get
			{
				return default(CameraMode);
			}
			[Token(Token = "0x600120D")]
			[Address(RVA = "0xB65AC4", Offset = "0xB65AC4", VA = "0xB65AC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xB65ACC", Offset = "0xB65ACC", VA = "0xB65ACC")]
		public LightningBolt()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xB65BD4", Offset = "0xB65BD4", VA = "0xB65BD4")]
		public void SetupLightningBolt(LightningBoltDependencies dependencies)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xB66C90", Offset = "0xB66C90", VA = "0xB66C90")]
		public bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xB66EB0", Offset = "0xB66EB0", VA = "0xB66EB0")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xB677FC", Offset = "0xB677FC", VA = "0xB677FC")]
		public LightningBoltSegmentGroup AddGroup()
		{
			return null;
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xB67AC0", Offset = "0xB67AC0", VA = "0xB67AC0")]
		public static void ClearCache()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xB67684", Offset = "0xB67684", VA = "0xB67684")]
		private void CleanupLight(Light l)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xB67F6C", Offset = "0xB67F6C", VA = "0xB67F6C")]
		private void EnableLineRenderer(LineRendererMesh lineRenderer, int tag)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xB68018", Offset = "0xB68018", VA = "0xB68018")]
		private IEnumerator EnableLastRendererCoRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xB6808C", Offset = "0xB6808C", VA = "0xB6808C")]
		private LineRendererMesh GetOrCreateLineRenderer()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xB68360", Offset = "0xB68360", VA = "0xB68360")]
		private void RenderGroup(LightningBoltSegmentGroup group, LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xB68914", Offset = "0xB68914", VA = "0xB68914")]
		private static IEnumerator NotifyBolt(LightningBoltDependencies dependencies, LightningBoltParameters p, Transform transform, Vector3 start, Vector3 end)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xB689F4", Offset = "0xB689F4", VA = "0xB689F4")]
		private void ProcessParameters(LightningBoltParameters p, RangeOfFloats delay, LightningBoltDependencies depends)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xB66174", Offset = "0xB66174", VA = "0xB66174")]
		private void ProcessAllLightningParameters()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xB6943C", Offset = "0xB6943C", VA = "0xB6943C")]
		private void EnableCurrentLineRendererFromThread(bool inDestroy)
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xB6882C", Offset = "0xB6882C", VA = "0xB6882C")]
		private void EnableCurrentLineRenderer()
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xB69480", Offset = "0xB69480", VA = "0xB69480")]
		private void RenderParticleSystems(Vector3 start, Vector3 end, float trunkWidth, float lifeTime, float delaySeconds)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xB68E60", Offset = "0xB68E60", VA = "0xB68E60")]
		private Transform RenderLightningBolt(LightningBoltQualitySetting quality, int generations, int startGroupIndex, int endGroupIndex, LightningBoltParameters parameters)
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xB696B8", Offset = "0xB696B8", VA = "0xB696B8")]
		private void CreateLightsForGroup(LightningBoltSegmentGroup group, LightningLightParameters lp, LightningBoltQualitySetting quality, int maxLights)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xB69A0C", Offset = "0xB69A0C", VA = "0xB69A0C")]
		private bool AddLightToGroup(LightningBoltSegmentGroup group, LightningLightParameters lp, int segmentIndex, int nthLight, int nthShadows, ref int maxLights, ref int nthShadowCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xB69CB8", Offset = "0xB69CB8", VA = "0xB69CB8")]
		private Light GetOrCreateLight(LightningLightParameters lp)
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xB69FA0", Offset = "0xB69FA0", VA = "0xB69FA0")]
		private void UpdateLight(LightningLightParameters lp, IEnumerable<Light> lights, float delay, float peakStart, float peakEnd, float lifeTime)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xB66D58", Offset = "0xB66D58", VA = "0xB66D58")]
		private void UpdateLights()
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xB69618", Offset = "0xB69618", VA = "0xB69618")]
		private IEnumerator GenerateParticleCoRoutine(ParticleSystem p, Vector3 pos, float delay)
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xB65E48", Offset = "0xB65E48", VA = "0xB65E48")]
		private void CheckForGlow(IEnumerable<LightningBoltParameters> parameters)
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class LightningThreadState
	{
		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly int mainThreadId;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal readonly bool multiThreaded;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Thread lightningThread;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AutoResetEvent lightningThreadEvent;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Queue<Action> actionsForBackgroundThread;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Queue<KeyValuePair<Action<bool>, ManualResetEvent>> actionsForMainThread;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool Running;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool isTerminating;

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xB6D67C", Offset = "0xB6D67C", VA = "0xB6D67C")]
		private bool UpdateMainThreadActionsOnce(bool inDestroy)
		{
			return default(bool);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xB6D888", Offset = "0xB6D888", VA = "0xB6D888")]
		private void BackgroundThreadMethod()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xB6DBA0", Offset = "0xB6DBA0", VA = "0xB6DBA0")]
		public LightningThreadState(bool multiThreaded)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xB6DDB8", Offset = "0xB6DDB8", VA = "0xB6DDB8")]
		public void TerminateAndWaitForEnd(bool inDestroy)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xB6DEF8", Offset = "0xB6DEF8", VA = "0xB6DEF8")]
		public void UpdateMainThreadActions()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xB6ACFC", Offset = "0xB6ACFC", VA = "0xB6ACFC")]
		public bool AddActionForMainThread(Action<bool> action, bool waitForAction = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xB6DF20", Offset = "0xB6DF20", VA = "0xB6DF20")]
		public bool AddActionForBackgroundThread(Action action)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000331")]
	public abstract class LightningBoltPathScriptBase : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public List<GameObject> LightningPath;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private readonly List<GameObject> currentPathObjects;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xB6E07C", Offset = "0xB6E07C", VA = "0xB6E07C")]
		protected List<GameObject> GetCurrentPathObjects()
		{
			return null;
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xB6E2F8", Offset = "0xB6E2F8", VA = "0xB6E2F8", Slot = "9")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xB6E3C4", Offset = "0xB6E3C4", VA = "0xB6E3C4")]
		protected LightningBoltPathScriptBase()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class LightningBoltPathScript : LightningBoltPathScriptBase
	{
		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float Speed;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public RangeOfFloats SpeedIntervalRange;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public bool Repeat;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float nextInterval;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private int nextIndex;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Vector3? lastPoint;

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xB6E5AC", Offset = "0xB6E5AC", VA = "0xB6E5AC", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xB6E984", Offset = "0xB6E984", VA = "0xB6E984")]
		public void Reset()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xB6E9A0", Offset = "0xB6E9A0", VA = "0xB6E9A0")]
		public LightningBoltPathScript()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public abstract class LightningBoltPrefabScriptBase : LightningBoltScript
	{
		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly List<LightningBoltParameters> batchParameters;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly System.Random random;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public RangeOfFloats IntervalRange;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public RangeOfIntegers CountRange;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float CountProbabilityModifier;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public RangeOfFloats DelayRange;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public RangeOfFloats DurationRange;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public RangeOfFloats TrunkWidthRange;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float LifeTime;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public int Generations;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public float ChaosFactor;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float ChaosFactorForks;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float Intensity;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float GlowIntensity;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float GlowWidthMultiplier;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float FadePercent;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float FadeInMultiplier;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float FadeFullyLitMultiplier;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float FadeOutMultiplier;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float GrowthMultiplier;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float EndWidthMultiplier;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public float Forkedness;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float ForkLengthMultiplier;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float ForkLengthVariance;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float ForkEndWidthMultiplier;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public LightningLightParameters LightParameters;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public int MaximumLightsPerBatch;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool ManualMode;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float AutomaticModeSeconds;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public LightningCustomTransformDelegate CustomTransformHandler;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private float nextLightningTimestamp;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private float lifeTimeRemaining;

		[Token(Token = "0x170002B2")]
		public System.Random RandomOverride
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0xB6E9C4", Offset = "0xB6E9C4", VA = "0xB6E9C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600126C")]
			[Address(RVA = "0xB6E9CC", Offset = "0xB6E9CC", VA = "0xB6E9CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xB6E9DC", Offset = "0xB6E9DC", VA = "0xB6E9DC")]
		private void CalculateNextLightningTimestamp(float offset)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xB6EA28", Offset = "0xB6EA28", VA = "0xB6EA28")]
		private void CustomTransform(LightningCustomTransformStateInfo state)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xB6EA88", Offset = "0xB6EA88", VA = "0xB6EA88")]
		private void CallLightning()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xB6EA9C", Offset = "0xB6EA9C", VA = "0xB6EA9C")]
		private void CallLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xB6ED0C", Offset = "0xB6ED0C", VA = "0xB6ED0C")]
		protected void CreateLightningBoltsNow()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xB6EEEC", Offset = "0xB6EEEC", VA = "0xB6EEEC", Slot = "10")]
		protected override void PopulateParameters(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xB6F2EC", Offset = "0xB6F2EC", VA = "0xB6F2EC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xB6F44C", Offset = "0xB6F44C", VA = "0xB6F44C", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xB6E8D4", Offset = "0xB6E8D4", VA = "0xB6E8D4", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xB6F9F8", Offset = "0xB6F9F8", VA = "0xB6F9F8")]
		public void Trigger()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xB6FA0C", Offset = "0xB6FA0C", VA = "0xB6FA0C")]
		public void Trigger(float seconds)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xB6FA50", Offset = "0xB6FA50", VA = "0xB6FA50")]
		public void Trigger(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xB6E448", Offset = "0xB6E448", VA = "0xB6E448")]
		protected LightningBoltPrefabScriptBase()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class LightningBoltPrefabScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public GameObject Source;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public GameObject Destination;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public Vector3 StartVariance;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public Vector3 EndVariance;

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xB6FC14", Offset = "0xB6FC14", VA = "0xB6FC14", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xB6FD48", Offset = "0xB6FD48", VA = "0xB6FD48")]
		public LightningBoltPrefabScript()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class LightningBoltScript : MonoBehaviour
	{
		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraMode CameraMode;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal CameraMode calculatedCameraMode;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseWorldSpace;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool CompensateForParentTransform;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightningBoltQualitySetting QualitySetting;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool MultiThreaded;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LevelOfDetailDistance;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool UseGameTime;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string SortLayerName;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int SortOrderInLayer;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float SoftParticlesFactor;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int RenderQueue;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material LightningMaterialMesh;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material LightningMaterialMeshNoGlow;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D LightningTexture;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D LightningGlowTexture;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ParticleSystem LightningOriginParticleSystem;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ParticleSystem LightningDestinationParticleSystem;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color LightningTintColor;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color GlowTintColor;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color MainTrunkTintColor;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public BlendMode SourceBlendMode;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public BlendMode DestinationBlendMode;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BlendMode SourceBlendModeGlow;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public BlendMode DestinationBlendModeGlow;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float JitterMultiplier;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float Turbulence;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector3 TurbulenceVelocity;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Vector2 IntensityFlicker;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static float TimeScale;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static bool needsTimeUpdate;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Texture2D lastLightningTexture;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Texture2D lastLightningGlowTexture;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly List<LightningBolt> activeBolts;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly LightningBoltParameters[] oneParameterArray;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly List<LightningBolt> lightningBoltCache;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly List<LightningBoltDependencies> dependenciesCache;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private LightningThreadState threadState;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int shaderId_MainTex;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static int shaderId_TintColor;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static int shaderId_JitterMultiplier;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static int shaderId_Turbulence;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static int shaderId_TurbulenceVelocity;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int shaderId_SrcBlendMode;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static int shaderId_DstBlendMode;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static int shaderId_InvFade;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static int shaderId_LightningTime;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static int shaderId_IntensityFlicker;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static int shaderId_RenderMode;

		[Token(Token = "0x170002B3")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningStartedCallback
		{
			[Token(Token = "0x600127C")]
			[Address(RVA = "0xB6FD4C", Offset = "0xB6FD4C", VA = "0xB6FD4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600127D")]
			[Address(RVA = "0xB6FD54", Offset = "0xB6FD54", VA = "0xB6FD54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002B4")]
		public Action<LightningBoltParameters, Vector3, Vector3> LightningEndedCallback
		{
			[Token(Token = "0x600127E")]
			[Address(RVA = "0xB6FD5C", Offset = "0xB6FD5C", VA = "0xB6FD5C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600127F")]
			[Address(RVA = "0xB6FD64", Offset = "0xB6FD64", VA = "0xB6FD64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public Action<Light> LightAddedCallback
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0xB6FD6C", Offset = "0xB6FD6C", VA = "0xB6FD6C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001281")]
			[Address(RVA = "0xB6FD74", Offset = "0xB6FD74", VA = "0xB6FD74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public Action<Light> LightRemovedCallback
		{
			[Token(Token = "0x6001282")]
			[Address(RVA = "0xB6FD7C", Offset = "0xB6FD7C", VA = "0xB6FD7C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001283")]
			[Address(RVA = "0xB6FD84", Offset = "0xB6FD84", VA = "0xB6FD84")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public bool HasActiveBolts
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0xB6FD94", Offset = "0xB6FD94", VA = "0xB6FD94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B8")]
		public static Vector4 TimeVectorSinceStart
		{
			[Token(Token = "0x6001285")]
			[Address(RVA = "0xB6FDE4", Offset = "0xB6FDE4", VA = "0xB6FDE4")]
			[CompilerGenerated]
			get
			{
				return default(Vector4);
			}
			[Token(Token = "0x6001286")]
			[Address(RVA = "0xB6FE40", Offset = "0xB6FE40", VA = "0xB6FE40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public static float TimeSinceStart
		{
			[Token(Token = "0x6001287")]
			[Address(RVA = "0xB6FEBC", Offset = "0xB6FEBC", VA = "0xB6FEBC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001288")]
			[Address(RVA = "0xB6FF14", Offset = "0xB6FF14", VA = "0xB6FF14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public static float DeltaTime
		{
			[Token(Token = "0x6001289")]
			[Address(RVA = "0xB6FF78", Offset = "0xB6FF78", VA = "0xB6FF78")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600128A")]
			[Address(RVA = "0xB6FFD0", Offset = "0xB6FFD0", VA = "0xB6FFD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002BB")]
		internal Material lightningMaterialMeshInternal
		{
			[Token(Token = "0x6001294")]
			[Address(RVA = "0xB71284", Offset = "0xB71284", VA = "0xB71284")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001295")]
			[Address(RVA = "0xB7128C", Offset = "0xB7128C", VA = "0xB7128C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		internal Material lightningMaterialMeshNoGlowInternal
		{
			[Token(Token = "0x6001296")]
			[Address(RVA = "0xB7129C", Offset = "0xB7129C", VA = "0xB7129C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001297")]
			[Address(RVA = "0xB712A4", Offset = "0xB712A4", VA = "0xB712A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xB70034", Offset = "0xB70034", VA = "0xB70034", Slot = "4")]
		public virtual void CreateLightningBolt(LightningBoltParameters p)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xB6EDCC", Offset = "0xB6EDCC", VA = "0xB6EDCC")]
		public void CreateLightningBolts(ICollection<LightningBoltParameters> parameters)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xB7071C", Offset = "0xB7071C", VA = "0xB7071C", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xB6F33C", Offset = "0xB6F33C", VA = "0xB6F33C", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xB6F664", Offset = "0xB6F664", VA = "0xB6F664", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xB71228", Offset = "0xB71228", VA = "0xB71228", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xB6E374", Offset = "0xB6E374", VA = "0xB6E374", Slot = "9")]
		protected virtual LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xB6ECBC", Offset = "0xB6ECBC", VA = "0xB6ECBC")]
		protected LightningBoltParameters CreateParameters()
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xB6EFCC", Offset = "0xB6EFCC", VA = "0xB6EFCC", Slot = "10")]
		protected virtual void PopulateParameters(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xB712B4", Offset = "0xB712B4", VA = "0xB712B4")]
		private Coroutine StartCoroutineWrapper(IEnumerator routine)
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xB712F8", Offset = "0xB712F8", VA = "0xB712F8")]
		private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xB70328", Offset = "0xB70328", VA = "0xB70328")]
		private LightningBoltDependencies CreateLightningBoltDependencies(ICollection<LightningBoltParameters> parameters)
		{
			return null;
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xB71348", Offset = "0xB71348", VA = "0xB71348")]
		private void ReturnLightningDependenciesToCache(LightningBoltDependencies d)
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xB7144C", Offset = "0xB7144C", VA = "0xB7144C")]
		internal void OnLightAdded(Light l)
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xB71468", Offset = "0xB71468", VA = "0xB71468")]
		internal void OnLightRemoved(Light l)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xB71484", Offset = "0xB71484", VA = "0xB71484")]
		internal void AddActiveBolt(LightningBolt bolt)
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xB70720", Offset = "0xB70720", VA = "0xB70720")]
		private void UpdateShaderIds()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xB70A78", Offset = "0xB70A78", VA = "0xB70A78")]
		private void UpdateMaterialsForLastTexture()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xB70128", Offset = "0xB70128", VA = "0xB70128")]
		private void UpdateTexture()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xB715F4", Offset = "0xB715F4", VA = "0xB715F4")]
		private void SetMaterialPerspective()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xB716A8", Offset = "0xB716A8", VA = "0xB716A8")]
		private void SetMaterialOrthographicXY()
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xB7175C", Offset = "0xB7175C", VA = "0xB7175C")]
		private void SetMaterialOrthographicXZ()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xB71534", Offset = "0xB71534", VA = "0xB71534")]
		private void SetupMaterialCamera()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xB70C40", Offset = "0xB70C40", VA = "0xB70C40")]
		private void UpdateShaderParameters()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xB70F78", Offset = "0xB70F78", VA = "0xB70F78")]
		private void CheckCompensateForParentTransform()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xB709A0", Offset = "0xB709A0", VA = "0xB709A0")]
		private void UpdateCamera()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xB70254", Offset = "0xB70254", VA = "0xB70254")]
		private LightningBolt GetOrCreateLightningBolt()
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xB710D4", Offset = "0xB710D4", VA = "0xB710D4")]
		private void UpdateActiveBolts()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xB71810", Offset = "0xB71810", VA = "0xB71810")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xB71834", Offset = "0xB71834", VA = "0xB71834")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xB719B8", Offset = "0xB719B8", VA = "0xB719B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xB71AA8", Offset = "0xB71AA8", VA = "0xB71AA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xB6FA54", Offset = "0xB6FA54", VA = "0xB6FA54")]
		public LightningBoltScript()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class WaitForSecondsLightning : CustomYieldInstruction
	{
		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float remaining;

		[Token(Token = "0x170002BD")]
		public override bool keepWaiting
		{
			[Token(Token = "0x60012B2")]
			[Address(RVA = "0xB71B08", Offset = "0xB71B08", VA = "0xB71B08", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xB6C884", Offset = "0xB6C884", VA = "0xB6C884")]
		public WaitForSecondsLightning(float time)
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class LightningBoltShapeConeScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float InnerRadius;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public float OuterRadius;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float Length;

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xB71BBC", Offset = "0xB71BBC", VA = "0xB71BBC", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xB71CE8", Offset = "0xB71CE8", VA = "0xB71CE8")]
		public LightningBoltShapeConeScript()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class LightningBoltShapeSphereScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float InnerRadius;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public float Radius;

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xB71D00", Offset = "0xB71D00", VA = "0xB71D00", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xB71D84", Offset = "0xB71D84", VA = "0xB71D84")]
		public LightningBoltShapeSphereScript()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class LightningBoltTransformTrackerScript : MonoBehaviour
	{
		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LightningBoltPrefabScript LightningScript;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform StartTarget;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform EndTarget;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RangeOfFloats ScaleLimit;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Dictionary<Transform, LightningCustomTransformStateInfo> transformStartPositions;

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xB71D94", Offset = "0xB71D94", VA = "0xB71D94")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xB71E9C", Offset = "0xB71E9C", VA = "0xB71E9C")]
		private static float AngleBetweenVector2(Vector2 vec1, Vector2 vec2)
		{
			return default(float);
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xB72068", Offset = "0xB72068", VA = "0xB72068")]
		private static void UpdateTransform(LightningCustomTransformStateInfo state, LightningBoltPrefabScript script, RangeOfFloats scaleLimit)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xB7274C", Offset = "0xB7274C", VA = "0xB7274C")]
		public void CustomTransformHandler(LightningCustomTransformStateInfo state)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xB728E8", Offset = "0xB728E8", VA = "0xB728E8")]
		public LightningBoltTransformTrackerScript()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033A")]
	public struct RangeOfIntegers
	{
		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Minimum;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Maximum;

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xB6EC90", Offset = "0xB6EC90", VA = "0xB6EC90")]
		public int Random(System.Random r)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200033B")]
	public struct RangeOfFloats
	{
		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Minimum;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Maximum;

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xB6EA1C", Offset = "0xB6EA1C", VA = "0xB6EA1C")]
		public float Random()
		{
			return default(float);
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xB6F2A0", Offset = "0xB6F2A0", VA = "0xB6F2A0")]
		public float Random(System.Random r)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200033C")]
	public class LightningFieldScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float MinimumLength;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float minimumLengthSquared;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Bounds FieldBounds;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Light Light;

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xB7297C", Offset = "0xB7297C", VA = "0xB7297C")]
		private Vector3 RandomPointInBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xB72A30", Offset = "0xB72A30", VA = "0xB72A30", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xB72AC0", Offset = "0xB72AC0", VA = "0xB72AC0", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xB72BA8", Offset = "0xB72BA8", VA = "0xB72BA8", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xB72CB0", Offset = "0xB72CB0", VA = "0xB72CB0")]
		public LightningFieldScript()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class LightningGenerator
	{
		[Token(Token = "0x4001558")]
		internal const float oneOver255 = 0.003921569f;

		[Token(Token = "0x4001559")]
		internal const float mainTrunkMultiplier = 0.003921569f;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LightningGenerator GeneratorInstance;

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xB72CC0", Offset = "0xB72CC0", VA = "0xB72CC0")]
		private void GetPerpendicularVector(ref Vector3 directionNormalized, out Vector3 side)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xB72EAC", Offset = "0xB72EAC", VA = "0xB72EAC", Slot = "4")]
		protected virtual void OnGenerateLightningBolt(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xB73440", Offset = "0xB73440", VA = "0xB73440")]
		public bool ShouldCreateFork(LightningBoltParameters parameters, int generation, int totalGenerations)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xB734A0", Offset = "0xB734A0", VA = "0xB734A0")]
		public void CreateFork(LightningBolt bolt, LightningBoltParameters parameters, int generation, int totalGenerations, Vector3 start, Vector3 midPoint)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xB72ED0", Offset = "0xB72ED0", VA = "0xB72ED0")]
		public void GenerateLightningBoltStandard(LightningBolt bolt, Vector3 start, Vector3 end, int generation, int totalGenerations, float offsetAmount, LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xB73B0C", Offset = "0xB73B0C", VA = "0xB73B0C")]
		public Vector3 RandomDirection3D(System.Random random)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xB73B70", Offset = "0xB73B70", VA = "0xB73B70")]
		public Vector3 RandomDirection2D(System.Random random)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xB73BBC", Offset = "0xB73BBC", VA = "0xB73BBC")]
		public Vector3 RandomDirection2DXZ(System.Random random)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xB7358C", Offset = "0xB7358C", VA = "0xB7358C")]
		public void RandomVector(LightningBolt bolt, ref Vector3 start, ref Vector3 end, float offsetAmount, System.Random random, out Vector3 result)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xB73C08", Offset = "0xB73C08", VA = "0xB73C08")]
		public void GenerateLightningBolt(LightningBolt bolt, LightningBoltParameters parameters, out Vector3 start, out Vector3 end)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xB73CB0", Offset = "0xB73CB0", VA = "0xB73CB0")]
		public LightningGenerator()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class LightningGeneratorPath : LightningGenerator
	{
		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LightningGeneratorPath PathGeneratorInstance;

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xB73D28", Offset = "0xB73D28", VA = "0xB73D28")]
		public void GenerateLightningBoltPath(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xB742C0", Offset = "0xB742C0", VA = "0xB742C0", Slot = "4")]
		protected override void OnGenerateLightningBolt(LightningBolt bolt, Vector3 start, Vector3 end, LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xB742C4", Offset = "0xB742C4", VA = "0xB742C4")]
		public LightningGeneratorPath()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class LightningGizmoScript : MonoBehaviour
	{
		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xB74388", Offset = "0xB74388", VA = "0xB74388")]
		public LightningGizmoScript()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class LightningLightsabreScript : LightningBoltPrefabScript
	{
		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float BladeHeight;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public float ActivationTime;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public AudioSource StartSound;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public AudioSource StopSound;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public AudioSource ConstantSound;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private int state;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private Vector3 bladeStart;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Vector3 bladeDir;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private float bladeTime;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float bladeIntensity;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xB74390", Offset = "0xB74390", VA = "0xB74390", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xB74394", Offset = "0xB74394", VA = "0xB74394", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xB74544", Offset = "0xB74544", VA = "0xB74544")]
		public bool TurnOn(bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xB746B8", Offset = "0xB746B8", VA = "0xB746B8")]
		public void TurnOnGUI(bool value)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xB746C0", Offset = "0xB746C0", VA = "0xB746C0")]
		public LightningLightsabreScript()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class LightningMeshSurfaceScript : LightningBoltPrefabScriptBase
	{
		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public MeshFilter MeshFilter;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Collider MeshCollider;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public RangeOfFloats MeshOffsetRange;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public RangeOfIntegers PathLengthCount;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public RangeOfFloats MinimumPathDistanceRange;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float MaximumPathDistance;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private float maximumPathDistanceSquared;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public bool Spline;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public float DistancePerSegmentHint;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<Vector3> sourcePoints;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Mesh previousMesh;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private MeshHelper meshHelper;

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xB746D0", Offset = "0xB746D0", VA = "0xB746D0")]
		private void CheckMesh()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xB748C8", Offset = "0xB748C8", VA = "0xB748C8", Slot = "9")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xB74944", Offset = "0xB74944", VA = "0xB74944", Slot = "11")]
		protected virtual void PopulateSourcePoints(List<Vector3> points)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xB74954", Offset = "0xB74954", VA = "0xB74954")]
		public void CreateRandomLightningPath(List<Vector3> points)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xB750A4", Offset = "0xB750A4", VA = "0xB750A4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xB750A8", Offset = "0xB750A8", VA = "0xB750A8", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xB750D4", Offset = "0xB750D4", VA = "0xB750D4", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xB7535C", Offset = "0xB7535C", VA = "0xB7535C")]
		public LightningMeshSurfaceScript()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class LightningSplineScript : LightningBoltPathScriptBase
	{
		[Token(Token = "0x4001572")]
		public const int MaxSplineGenerations = 5;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float DistancePerSegmentHint;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly List<Vector3> prevSourcePoints;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<Vector3> sourcePoints;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private List<Vector3> savedSplinePoints;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private int previousGenerations;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float previousDistancePerSegment;

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xB75404", Offset = "0xB75404", VA = "0xB75404")]
		private bool SourceChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xB75510", Offset = "0xB75510", VA = "0xB75510", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xB75514", Offset = "0xB75514", VA = "0xB75514", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xB75518", Offset = "0xB75518", VA = "0xB75518", Slot = "4")]
		public override void CreateLightningBolt(LightningBoltParameters parameters)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xB759F0", Offset = "0xB759F0", VA = "0xB759F0", Slot = "9")]
		protected override LightningBoltParameters OnCreateParameters()
		{
			return null;
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xB75A94", Offset = "0xB75A94", VA = "0xB75A94")]
		public void Trigger(List<Vector3> points, bool spline)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xB75224", Offset = "0xB75224", VA = "0xB75224")]
		public static void PopulateSpline(List<Vector3> splinePoints, List<Vector3> sourcePoints, int generations, float distancePerSegmentHit, Camera camera)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xB76708", Offset = "0xB76708", VA = "0xB76708")]
		public LightningSplineScript()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[RequireComponent(typeof(AudioSource))]
	public class LightningWhipScript : MonoBehaviour
	{
		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip WhipCrack;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip WhipCrackThunder;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource audioSource;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject whipStart;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject whipEndStrike;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject whipHandle;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject whipSpring;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 prevDrag;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool dragging;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool canWhip;

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xB7687C", Offset = "0xB7687C", VA = "0xB7687C")]
		private IEnumerator WhipForward()
		{
			return null;
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xB76918", Offset = "0xB76918", VA = "0xB76918")]
		private void Start()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xB76A40", Offset = "0xB76A40", VA = "0xB76A40")]
		private void Update()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xB76C6C", Offset = "0xB76C6C", VA = "0xB76C6C")]
		public LightningWhipScript()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class MeshHelper
	{
		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] triangles;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] vertices;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] normals;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] normalizedAreaWeights;

		[Token(Token = "0x170002C0")]
		public int[] Triangles
		{
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0xB77398", Offset = "0xB77398", VA = "0xB77398")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xB74834", Offset = "0xB74834", VA = "0xB74834")]
		public MeshHelper(Mesh mesh)
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xB74D08", Offset = "0xB74D08", VA = "0xB74D08")]
		public void GenerateRandomPoint(ref RaycastHit hit, out int triangleIndex)
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xB74D3C", Offset = "0xB74D3C", VA = "0xB74D3C")]
		public void GetRaycastFromTriangleIndex(int triangleIndex, ref RaycastHit hit)
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xB773A0", Offset = "0xB773A0", VA = "0xB773A0")]
		private float[] CalculateSurfaceAreas(out float totalSurfaceArea)
		{
			return null;
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xB771D4", Offset = "0xB771D4", VA = "0xB771D4")]
		private void CalculateNormalizedAreaWeights()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xB7724C", Offset = "0xB7724C", VA = "0xB7724C")]
		private int SelectRandomTriangle()
		{
			return default(int);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xB772D8", Offset = "0xB772D8", VA = "0xB772D8")]
		private Vector3 GenerateRandomBarycentricCoordinates()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000346")]
	public static class PathGenerator
	{
		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool Is2D;

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xB74264", Offset = "0xB74264", VA = "0xB74264")]
		public static float SquareRoot(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xB775B0", Offset = "0xB775B0", VA = "0xB775B0")]
		private static float Distance2D(ref Vector3 point1, ref Vector3 point2)
		{
			return default(float);
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xB775C8", Offset = "0xB775C8", VA = "0xB775C8")]
		private static float Distance3D(ref Vector3 point1, ref Vector3 point2)
		{
			return default(float);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xB775F8", Offset = "0xB775F8", VA = "0xB775F8")]
		private static void CalculateNonuniformCatmullRom(float p1, float p2, float p3, float p4, float distance1, float distance2, float distance3, out Vector4 point)
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xB7767C", Offset = "0xB7767C", VA = "0xB7767C")]
		private static float CalculatePolynomial(ref Vector4 point, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xB776A8", Offset = "0xB776A8", VA = "0xB776A8")]
		private static void ClampSplineDistances(ref float distance1, ref float distance2, ref float distance3)
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xB776F4", Offset = "0xB776F4", VA = "0xB776F4")]
		private static void GetSplinePoint2D(ref Vector3 point1, ref Vector3 point2, ref Vector3 point3, ref Vector3 point4, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xB77874", Offset = "0xB77874", VA = "0xB77874")]
		private static void GetSplinePoint3D(ref Vector3 point1, ref Vector3 point2, ref Vector3 point3, ref Vector3 point4, float t, out Vector3 point)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xB7617C", Offset = "0xB7617C", VA = "0xB7617C")]
		public static bool CreateSpline(ICollection<Vector3> path, IList<Vector3> points, int numberOfSegments, bool closePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xB75BC4", Offset = "0xB75BC4", VA = "0xB75BC4")]
		public static bool CreateSplineWithSegmentDistance(ICollection<Vector3> path, IList<Vector3> points, float distancePerSegment, bool closePath)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000347")]
	public class LightningBeamSpellScript : LightningSpellScript
	{
		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LightningBoltPathScriptBase LightningPathScript;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float EndPointRandomization;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<RaycastHit> CollisionCallback;

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xB77AD4", Offset = "0xB77AD4", VA = "0xB77AD4")]
		private void CheckCollision()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xB780E4", Offset = "0xB780E4", VA = "0xB780E4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xB78194", Offset = "0xB78194", VA = "0xB78194", Slot = "6")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xB781A8", Offset = "0xB781A8", VA = "0xB781A8", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xB781C4", Offset = "0xB781C4", VA = "0xB781C4", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xB781E4", Offset = "0xB781E4", VA = "0xB781E4")]
		public LightningBeamSpellScript()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public interface ICollisionHandler
	{
		[Token(Token = "0x600130C")]
		void HandleCollision(GameObject obj, List<ParticleCollisionEvent> collision, int collisionCount);
	}
	[Token(Token = "0x2000349")]
	[RequireComponent(typeof(ParticleSystem))]
	public class LightningParticleCollisionForwarder : MonoBehaviour
	{
		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MonoBehaviour CollisionHandler;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem _particleSystem;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<ParticleCollisionEvent> collisionEvents;

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB78240", Offset = "0xB78240", VA = "0xB78240")]
		private void Start()
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB78298", Offset = "0xB78298", VA = "0xB78298")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB78384", Offset = "0xB78384", VA = "0xB78384")]
		public LightningParticleCollisionForwarder()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class LightningParticleSpellScript : LightningSpellScript, ICollisionHandler
	{
		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ParticleSystem ParticleSystem;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float CollisionInterval;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float collisionTimer;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<GameObject, List<ParticleCollisionEvent>, int> CollisionCallback;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool EnableParticleLights;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public RangeOfFloats ParticleLightRange;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public RangeOfFloats ParticleLightIntensity;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Color ParticleLightColor1;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Color ParticleLightColor2;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public LayerMask ParticleLightCullingMask;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly List<GameObject> particleLights;

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xB7840C", Offset = "0xB7840C", VA = "0xB7840C")]
		private void PopulateParticleLight(Light src)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB7850C", Offset = "0xB7850C", VA = "0xB7850C")]
		private void UpdateParticleLights()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xB787C8", Offset = "0xB787C8", VA = "0xB787C8")]
		private void UpdateParticleSystems()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xB78964", Offset = "0xB78964", VA = "0xB78964", Slot = "7")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xB78AC8", Offset = "0xB78AC8", VA = "0xB78AC8", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xB78ACC", Offset = "0xB78ACC", VA = "0xB78ACC", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xB78C7C", Offset = "0xB78C7C", VA = "0xB78C7C", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xB78D08", Offset = "0xB78D08", VA = "0xB78D08", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xB78D8C", Offset = "0xB78D8C", VA = "0xB78D8C", Slot = "12")]
		private void DigitalRuby.ThunderAndLightning.ICollisionHandler.HandleCollision(GameObject obj, List<ParticleCollisionEvent> collisions, int collisionCount)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xB78EAC", Offset = "0xB78EAC", VA = "0xB78EAC")]
		public LightningParticleSpellScript()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public abstract class LightningSpellScript : MonoBehaviour
	{
		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject SpellStart;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SpellEnd;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Direction;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxDistance;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool CollisionIsExplosion;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float CollisionRadius;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CollisionForce;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ForceMode CollisionForceMode;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem CollisionParticleSystem;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask CollisionMask;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource CollisionAudioSource;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip[] CollisionAudioClips;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RangeOfFloats CollisionVolumeRange;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float Duration;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float Cooldown;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioSource EmissionSound;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ParticleSystem EmissionParticleSystem;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Light EmissionLight;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int stopToken;

		[Token(Token = "0x170002C1")]
		protected float DurationTimer
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0xB79044", Offset = "0xB79044", VA = "0xB79044")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600131C")]
			[Address(RVA = "0xB7904C", Offset = "0xB7904C", VA = "0xB7904C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		protected float CooldownTimer
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0xB79054", Offset = "0xB79054", VA = "0xB79054")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600131E")]
			[Address(RVA = "0xB7905C", Offset = "0xB7905C", VA = "0xB7905C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public bool Casting
		{
			[Token(Token = "0x600132F")]
			[Address(RVA = "0xB79498", Offset = "0xB79498", VA = "0xB79498")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001330")]
			[Address(RVA = "0xB794A0", Offset = "0xB794A0", VA = "0xB794A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public bool CanCastSpell
		{
			[Token(Token = "0x6001331")]
			[Address(RVA = "0xB79204", Offset = "0xB79204", VA = "0xB79204")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xB78F98", Offset = "0xB78F98", VA = "0xB78F98")]
		private IEnumerator StopAfterSecondsCoRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xB77F44", Offset = "0xB77F44", VA = "0xB77F44")]
		protected void ApplyCollisionForce(Vector3 point)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xB77E1C", Offset = "0xB77E1C", VA = "0xB77E1C")]
		protected void PlayCollisionSound(Vector3 pos)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xB7810C", Offset = "0xB7810C", VA = "0xB7810C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xB78B7C", Offset = "0xB78B7C", VA = "0xB78B7C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xB781A4", Offset = "0xB781A4", VA = "0xB781A4", Slot = "6")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xB78AC4", Offset = "0xB78AC4", VA = "0xB78AC4", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001325")]
		protected abstract void OnCastSpell();

		[Token(Token = "0x6001326")]
		protected abstract void OnStopSpell();

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xB79064", Offset = "0xB79064", VA = "0xB79064", Slot = "10")]
		protected virtual void OnActivated()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xB79068", Offset = "0xB79068", VA = "0xB79068", Slot = "11")]
		protected virtual void OnDeactivated()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xB7906C", Offset = "0xB7906C", VA = "0xB7906C")]
		public bool CastSpell()
		{
			return default(bool);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xB79244", Offset = "0xB79244", VA = "0xB79244")]
		public void StopSpell()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xB7937C", Offset = "0xB7937C", VA = "0xB7937C")]
		public void ActivateSpell()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xB79388", Offset = "0xB79388", VA = "0xB79388")]
		public void DeactivateSpell()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xB79224", Offset = "0xB79224", VA = "0xB79224")]
		public void StopAfterSeconds(float seconds)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xB79394", Offset = "0xB79394", VA = "0xB79394")]
		public static GameObject FindChildRecursively(Transform t, string name)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xB781F0", Offset = "0xB781F0", VA = "0xB781F0")]
		protected LightningSpellScript()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class LightningWhipSpell : LightningSpellScript
	{
		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject AttachTo;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject RotateWith;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject WhipHandle;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject WhipStart;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject WhipSpring;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioSource WhipCrackAudioSource;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Action<Vector3> CollisionCallback;

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xB795CC", Offset = "0xB795CC", VA = "0xB795CC")]
		private IEnumerator WhipForward()
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xB79668", Offset = "0xB79668", VA = "0xB79668", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xB796A4", Offset = "0xB796A4", VA = "0xB796A4", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xB79758", Offset = "0xB79758", VA = "0xB79758", Slot = "8")]
		protected override void OnCastSpell()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xB79778", Offset = "0xB79778", VA = "0xB79778", Slot = "9")]
		protected override void OnStopSpell()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xB7977C", Offset = "0xB7977C", VA = "0xB7977C", Slot = "10")]
		protected override void OnActivated()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xB7979C", Offset = "0xB7979C", VA = "0xB7979C", Slot = "11")]
		protected override void OnDeactivated()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xB797BC", Offset = "0xB797BC", VA = "0xB797BC")]
		public LightningWhipSpell()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public class ThunderAndLightningScript : MonoBehaviour
	{
		[Token(Token = "0x2000350")]
		private class LightningBoltHandler
		{
			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ThunderAndLightningScript script;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly System.Random random;

			[Token(Token = "0x170002CB")]
			public float VolumeMultiplier
			{
				[Token(Token = "0x6001351")]
				[Address(RVA = "0xB7A3E8", Offset = "0xB7A3E8", VA = "0xB7A3E8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001352")]
				[Address(RVA = "0xB7A3F0", Offset = "0xB7A3F0", VA = "0xB7A3F0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6001353")]
			[Address(RVA = "0xB7A174", Offset = "0xB7A174", VA = "0xB7A174")]
			public LightningBoltHandler(ThunderAndLightningScript script)
			{
			}

			[Token(Token = "0x6001354")]
			[Address(RVA = "0xB7A52C", Offset = "0xB7A52C", VA = "0xB7A52C")]
			private void UpdateLighting()
			{
			}

			[Token(Token = "0x6001355")]
			[Address(RVA = "0xB7A3F8", Offset = "0xB7A3F8", VA = "0xB7A3F8")]
			private void CalculateNextLightningTime()
			{
			}

			[Token(Token = "0x6001356")]
			[Address(RVA = "0xB7A27C", Offset = "0xB7A27C", VA = "0xB7A27C")]
			public IEnumerator ProcessLightning(Vector3? _start, Vector3? _end, bool intense, bool visible)
			{
				return null;
			}

			[Token(Token = "0x6001357")]
			[Address(RVA = "0xB7A6D0", Offset = "0xB7A6D0", VA = "0xB7A6D0")]
			private void Strike(Vector3? _start, Vector3? _end, bool intense, float intensity, Camera camera, Camera visibleInCamera)
			{
			}

			[Token(Token = "0x6001358")]
			[Address(RVA = "0xB7A620", Offset = "0xB7A620", VA = "0xB7A620")]
			private void CheckForLightning()
			{
			}

			[Token(Token = "0x6001359")]
			[Address(RVA = "0xB7A230", Offset = "0xB7A230", VA = "0xB7A230")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LightningBoltPrefabScript LightningBoltScript;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera Camera;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RangeOfFloats LightningIntervalTimeRange;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LightningIntenseProbability;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] ThunderSoundsNormal;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip[] ThunderSoundsIntense;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LightningAlwaysVisible;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float CloudLightningChance;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool ModifySkyboxExposure;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float BaseLightRange;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float LightningYStart;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float VolumeMultiplier;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BoxCollider AreaOveride;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float skyboxExposureOriginal;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float skyboxExposureStorm;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float nextLightningTime;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool lightningInProgress;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AudioSource audioSourceThunder;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LightningBoltHandler lightningBoltHandler;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material skyboxMaterial;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioClip lastThunderSound;

		[Token(Token = "0x170002C9")]
		public float SkyboxExposureOriginal
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0xB7A388", Offset = "0xB7A388", VA = "0xB7A388")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002CA")]
		public bool EnableLightning
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0xB7A390", Offset = "0xB7A390", VA = "0xB7A390")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600134F")]
			[Address(RVA = "0xB7A398", Offset = "0xB7A398", VA = "0xB7A398")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xB79F44", Offset = "0xB79F44", VA = "0xB79F44")]
		private void Start()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xB7A20C", Offset = "0xB7A20C", VA = "0xB7A20C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xB7A234", Offset = "0xB7A234", VA = "0xB7A234")]
		public void CallNormalLightning()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xB7A248", Offset = "0xB7A248", VA = "0xB7A248")]
		public void CallNormalLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xB7A340", Offset = "0xB7A340", VA = "0xB7A340")]
		public void CallIntenseLightning()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xB7A354", Offset = "0xB7A354", VA = "0xB7A354")]
		public void CallIntenseLightning(Vector3? start, Vector3? end)
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xB7A3A4", Offset = "0xB7A3A4", VA = "0xB7A3A4")]
		public ThunderAndLightningScript()
		{
		}
	}
}
namespace TriangleNet
{
	[Token(Token = "0x2000352")]
	internal class Behavior
	{
		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool poly;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool quality;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool varArea;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool convex;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool boundaryMarkers;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool noHoles;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool conformDel;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<ITriangle, double, bool> usertest;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int noBisect;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double minAngle;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double maxAngle;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double maxArea;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool fixedArea;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool useSegments;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		internal bool useRegions;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal double goodAngle;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal double maxGoodAngle;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal double offconstant;

		[Token(Token = "0x170002CE")]
		public static bool NoExact
		{
			[Token(Token = "0x6001362")]
			[Address(RVA = "0xB7B654", Offset = "0xB7B654", VA = "0xB7B654")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002CF")]
		public bool Quality
		{
			[Token(Token = "0x6001363")]
			[Address(RVA = "0xB7B69C", Offset = "0xB7B69C", VA = "0xB7B69C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001364")]
			[Address(RVA = "0xB7B6A4", Offset = "0xB7B6A4", VA = "0xB7B6A4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		public double MinAngle
		{
			[Token(Token = "0x6001365")]
			[Address(RVA = "0xB7B6B8", Offset = "0xB7B6B8", VA = "0xB7B6B8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001366")]
			[Address(RVA = "0xB7B6C0", Offset = "0xB7B6C0", VA = "0xB7B6C0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public double MaxAngle
		{
			[Token(Token = "0x6001367")]
			[Address(RVA = "0xB7B6C8", Offset = "0xB7B6C8", VA = "0xB7B6C8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001368")]
			[Address(RVA = "0xB7B6D0", Offset = "0xB7B6D0", VA = "0xB7B6D0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public double MaxArea
		{
			[Token(Token = "0x6001369")]
			[Address(RVA = "0xB7B6D8", Offset = "0xB7B6D8", VA = "0xB7B6D8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600136A")]
			[Address(RVA = "0xB7B6E0", Offset = "0xB7B6E0", VA = "0xB7B6E0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public bool VarArea
		{
			[Token(Token = "0x600136B")]
			[Address(RVA = "0xB7B6F4", Offset = "0xB7B6F4", VA = "0xB7B6F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600136C")]
			[Address(RVA = "0xB7B6FC", Offset = "0xB7B6FC", VA = "0xB7B6FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public bool Poly
		{
			[Token(Token = "0x600136D")]
			[Address(RVA = "0xB7B708", Offset = "0xB7B708", VA = "0xB7B708")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600136E")]
			[Address(RVA = "0xB7B710", Offset = "0xB7B710", VA = "0xB7B710")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x600136F")]
			[Address(RVA = "0xB7B71C", Offset = "0xB7B71C", VA = "0xB7B71C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001370")]
			[Address(RVA = "0xB7B724", Offset = "0xB7B724", VA = "0xB7B724")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public bool Convex
		{
			[Token(Token = "0x6001371")]
			[Address(RVA = "0xB7B72C", Offset = "0xB7B72C", VA = "0xB7B72C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001372")]
			[Address(RVA = "0xB7B734", Offset = "0xB7B734", VA = "0xB7B734")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x6001373")]
			[Address(RVA = "0xB7B740", Offset = "0xB7B740", VA = "0xB7B740")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001374")]
			[Address(RVA = "0xB7B748", Offset = "0xB7B748", VA = "0xB7B748")]
			set
			{
			}
		}

		[Token(Token = "0x170002D8")]
		public int NoBisect
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0xB7B754", Offset = "0xB7B754", VA = "0xB7B754")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001376")]
			[Address(RVA = "0xB7B75C", Offset = "0xB7B75C", VA = "0xB7B75C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D9")]
		public bool NoHoles
		{
			[Token(Token = "0x6001377")]
			[Address(RVA = "0xB7B76C", Offset = "0xB7B76C", VA = "0xB7B76C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xB7B290", Offset = "0xB7B290", VA = "0xB7B290")]
		public Behavior(bool quality = false, double minAngle = 20.0)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xB7B2F4", Offset = "0xB7B2F4", VA = "0xB7B2F4")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000353")]
	public class Configuration
	{
		[Token(Token = "0x170002DA")]
		public Func<IPredicates> Predicates
		{
			[Token(Token = "0x600137A")]
			[Address(RVA = "0xB7B938", Offset = "0xB7B938", VA = "0xB7B938")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xB7B940", Offset = "0xB7B940", VA = "0xB7B940")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		public Func<TrianglePool> TrianglePool
		{
			[Token(Token = "0x600137C")]
			[Address(RVA = "0xB7B948", Offset = "0xB7B948", VA = "0xB7B948")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600137D")]
			[Address(RVA = "0xB7B950", Offset = "0xB7B950", VA = "0xB7B950")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xB7B774", Offset = "0xB7B774", VA = "0xB7B774")]
		public Configuration()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xB7B8F4", Offset = "0xB7B8F4", VA = "0xB7B8F4")]
		public Configuration(Func<IPredicates> predicates, Func<TrianglePool> trianglePool)
		{
		}
	}
	[Token(Token = "0x2000355")]
	public enum VertexType
	{
		[Token(Token = "0x40015FF")]
		InputVertex,
		[Token(Token = "0x4001600")]
		SegmentVertex,
		[Token(Token = "0x4001601")]
		FreeVertex,
		[Token(Token = "0x4001602")]
		DeadVertex,
		[Token(Token = "0x4001603")]
		UndeadVertex
	}
	[Token(Token = "0x2000356")]
	public enum LocateResult
	{
		[Token(Token = "0x4001605")]
		InTriangle,
		[Token(Token = "0x4001606")]
		OnEdge,
		[Token(Token = "0x4001607")]
		OnVertex,
		[Token(Token = "0x4001608")]
		Outside
	}
	[Token(Token = "0x2000357")]
	internal enum InsertVertexResult
	{
		[Token(Token = "0x400160A")]
		Successful,
		[Token(Token = "0x400160B")]
		Encroaching,
		[Token(Token = "0x400160C")]
		Violating,
		[Token(Token = "0x400160D")]
		Duplicate
	}
	[Token(Token = "0x2000358")]
	internal enum FindDirectionResult
	{
		[Token(Token = "0x400160F")]
		Within,
		[Token(Token = "0x4001610")]
		Leftcollinear,
		[Token(Token = "0x4001611")]
		Rightcollinear
	}
	[Token(Token = "0x2000359")]
	public interface IPredicates
	{
		[Token(Token = "0x6001382")]
		double CounterClockwise(Point a, Point b, Point c);

		[Token(Token = "0x6001383")]
		double InCircle(Point a, Point b, Point c, Point p);

		[Token(Token = "0x6001384")]
		Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta);

		[Token(Token = "0x6001385")]
		Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta, double offconstant);
	}
	[Token(Token = "0x200035A")]
	public sealed class Log : ILog<LogItem>
	{
		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<LogItem> log;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Log instance;

		[Token(Token = "0x170002DC")]
		public static bool Verbose
		{
			[Token(Token = "0x6001386")]
			[Address(RVA = "0xB7BA7C", Offset = "0xB7BA7C", VA = "0xB7BA7C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DD")]
		public static ILog<LogItem> Instance
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0xB7BBC0", Offset = "0xB7BBC0", VA = "0xB7BBC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xB7BAD4", Offset = "0xB7BAD4", VA = "0xB7BAD4")]
		static Log()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xB7BB38", Offset = "0xB7BB38", VA = "0xB7BB38")]
		private Log()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xB7BC18", Offset = "0xB7BC18", VA = "0xB7BC18", Slot = "5")]
		public void Warning(string message, string location)
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xB7BD10", Offset = "0xB7BD10", VA = "0xB7BD10", Slot = "4")]
		public void Error(string message, string location)
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class Mesh : IMesh
	{
		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ILog<LogItem> logger;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private QualityMesher qualityMesher;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stack<Otri> flipstack;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal TrianglePool triangles;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Dictionary<int, SubSegment> subsegs;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Dictionary<int, Vertex> vertices;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int hash_vtx;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal int hash_seg;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal List<Point> holes;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal List<RegionPointer> regions;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal Rectangle bounds;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int invertices;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int insegments;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int undeads;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int mesh_dim;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int hullsize;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int steinerleft;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal bool checksegments;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		internal bool checkquality;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal Vertex infvertex1;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal Vertex infvertex2;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal Vertex infvertex3;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal TriangleLocator locator;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal Behavior behavior;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal Triangle dummytri;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal SubSegment dummysub;

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xB7BE08", Offset = "0xB7BE08", VA = "0xB7BE08")]
		private void Initialize()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xB7BFE4", Offset = "0xB7BFE4", VA = "0xB7BFE4")]
		public Mesh(Configuration config)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xB7C31C", Offset = "0xB7C31C", VA = "0xB7C31C")]
		internal void SetQualityMesher(QualityMesher qmesher)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xB7C324", Offset = "0xB7C324", VA = "0xB7C324")]
		internal void TransferNodes(IList<Vertex> points)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xB7C924", Offset = "0xB7C924", VA = "0xB7C924")]
		internal void MakeVertexMap()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xB7CBFC", Offset = "0xB7CBFC", VA = "0xB7CBFC")]
		internal void MakeTriangle(ref Otri newotri)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xB7CD04", Offset = "0xB7CD04", VA = "0xB7CD04")]
		internal void MakeSegment(ref Osub newsubseg)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xB7CE34", Offset = "0xB7CE34", VA = "0xB7CE34")]
		internal InsertVertexResult InsertVertex(Vertex newvertex, ref Otri searchtri, ref Osub splitseg, bool segmentflaws, bool triflaws)
		{
			return default(InsertVertexResult);
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xB7DF10", Offset = "0xB7DF10", VA = "0xB7DF10")]
		internal void InsertSubseg(ref Otri tri, int subsegmark)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xB7E054", Offset = "0xB7E054", VA = "0xB7E054")]
		internal void Flip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xB7E358", Offset = "0xB7E358", VA = "0xB7E358")]
		internal void Unflip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xB7E65C", Offset = "0xB7E65C", VA = "0xB7E65C")]
		private void TriangulatePolygon(Otri firstedge, Otri lastedge, int edgecount, bool doflip, bool triflaws)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xB7E8E4", Offset = "0xB7E8E4", VA = "0xB7E8E4")]
		internal void DeleteVertex(ref Otri deltri)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xB7EBFC", Offset = "0xB7EBFC", VA = "0xB7EBFC")]
		internal void UndoVertex()
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xB7EB80", Offset = "0xB7EB80", VA = "0xB7EB80")]
		internal void TriangleDealloc(Triangle dyingtriangle)
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xB7EB1C", Offset = "0xB7EB1C", VA = "0xB7EB1C")]
		internal void VertexDealloc(Vertex dyingvertex)
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xB7EF50", Offset = "0xB7EF50", VA = "0xB7EF50")]
		internal void SubsegDealloc(SubSegment dyingsubseg)
		{
		}
	}
	[Token(Token = "0x200035C")]
	internal class NewLocation
	{
		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Behavior behavior;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double[] petalx;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double[] petaly;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double[] petalr;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] wedges;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double[] initialConvexPoly;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double[] points_p;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double[] points_q;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double[] points_r;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double[] poly1;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double[] poly2;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private double[][] polys;

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xB7EFB8", Offset = "0xB7EFB8", VA = "0xB7EFB8")]
		public NewLocation(Mesh mesh, IPredicates predicates)
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xB7F198", Offset = "0xB7F198", VA = "0xB7F198")]
		public Point FindLocation(Vertex org, Vertex dest, Vertex apex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xB7F1D8", Offset = "0xB7F1D8", VA = "0xB7F1D8")]
		private Point FindNewLocationWithoutMaxAngle(Vertex torg, Vertex tdest, Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xB802D8", Offset = "0xB802D8", VA = "0xB802D8")]
		private Point FindNewLocation(Vertex torg, Vertex tdest, Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xB8202C", Offset = "0xB8202C", VA = "0xB8202C")]
		private int LongestShortestEdge(double aodist, double dadist, double dodist)
		{
			return default(int);
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xB820B8", Offset = "0xB820B8", VA = "0xB820B8")]
		private int DoSmoothing(Otri badotri, Vertex torg, Vertex tdest, Vertex tapex, ref double[] newloc)
		{
			return default(int);
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xB83318", Offset = "0xB83318", VA = "0xB83318")]
		private int GetStarPoints(Otri badotri, Vertex p, Vertex q, Vertex r, int whichPoint, ref double[] points)
		{
			return default(int);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xB824CC", Offset = "0xB824CC", VA = "0xB824CC")]
		private bool GetNeighborsVertex(Otri badotri, double first_x, double first_y, double second_x, double second_y, ref double[] thirdpoint, ref Otri neighotri)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xB83778", Offset = "0xB83778", VA = "0xB83778")]
		private bool GetWedgeIntersectionWithoutMaxAngle(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xB84324", Offset = "0xB84324", VA = "0xB84324")]
		private bool GetWedgeIntersection(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xB835C0", Offset = "0xB835C0", VA = "0xB835C0")]
		private bool ValidPolygonAngles(int numpoints, double[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xB860AC", Offset = "0xB860AC", VA = "0xB860AC")]
		private bool IsBadPolygonAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xB82E64", Offset = "0xB82E64", VA = "0xB82E64")]
		private void LineLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xB85D7C", Offset = "0xB85D7C", VA = "0xB85D7C")]
		private int HalfPlaneIntersection(int numvertices, ref double[] convexPoly, double x1, double y1, double x2, double y2)
		{
			return default(int);
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xB861B0", Offset = "0xB861B0", VA = "0xB861B0")]
		private int SplitConvexPolygon(int numvertices, double[] convexPoly, double x1, double y1, double x2, double y2, double[][] polys)
		{
			return default(int);
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xB86CCC", Offset = "0xB86CCC", VA = "0xB86CCC")]
		private int LinePointLocation(double x1, double y1, double x2, double y2, double x, double y)
		{
			return default(int);
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xB86AFC", Offset = "0xB86AFC", VA = "0xB86AFC")]
		private void LineLineSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xB85FFC", Offset = "0xB85FFC", VA = "0xB85FFC")]
		private void FindPolyCentroid(int numpoints, double[] points, ref double[] centroid)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xB82954", Offset = "0xB82954", VA = "0xB82954")]
		private void CircleLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double r, ref double[] p)
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xB82BA8", Offset = "0xB82BA8", VA = "0xB82BA8")]
		private bool ChooseCorrectPoint(double x1, double y1, double x2, double y2, double x3, double y3, bool isObtuse)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xB82BE8", Offset = "0xB82BE8", VA = "0xB82BE8")]
		private void PointBetweenPoints(double x1, double y1, double x2, double y2, double x, double y, ref double[] p)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xB82CAC", Offset = "0xB82CAC", VA = "0xB82CAC")]
		private bool IsBadTriangleAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xB83020", Offset = "0xB83020", VA = "0xB83020")]
		private double MinDistanceToNeighbor(double newlocX, double newlocY, ref Otri searchtri)
		{
			return default(double);
		}
	}
	[Token(Token = "0x200035D")]
	public class RobustPredicates : IPredicates
	{
		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object creationLock;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RobustPredicates _default;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static double epsilon;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static double splitter;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static double resulterrbound;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static double ccwerrboundA;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static double ccwerrboundB;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static double ccwerrboundC;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static double iccerrboundA;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static double iccerrboundB;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static double iccerrboundC;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double[] fin1;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double[] fin2;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double[] abdet;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double[] axbc;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double[] axxbc;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double[] aybc;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] ayybc;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double[] adet;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double[] bxca;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double[] bxxca;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double[] byca;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double[] byyca;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double[] bdet;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private double[] cxab;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private double[] cxxab;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private double[] cyab;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private double[] cyyab;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private double[] cdet;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private double[] temp8;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private double[] temp16a;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private double[] temp16b;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private double[] temp16c;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private double[] temp32a;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private double[] temp32b;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private double[] temp48;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private double[] temp64;

		[Token(Token = "0x170002DE")]
		public static RobustPredicates Default
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xB86E24", Offset = "0xB86E24", VA = "0xB86E24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xB86FD8", Offset = "0xB86FD8", VA = "0xB86FD8")]
		static RobustPredicates()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xB86FBC", Offset = "0xB86FBC", VA = "0xB86FBC")]
		public RobustPredicates()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xB87468", Offset = "0xB87468", VA = "0xB87468", Slot = "4")]
		public double CounterClockwise(Point pa, Point pb, Point pc)
		{
			return default(double);
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xB87DD4", Offset = "0xB87DD4", VA = "0xB87DD4", Slot = "5")]
		public double InCircle(Point pa, Point pb, Point pc, Point pd)
		{
			return default(double);
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xB8ADD0", Offset = "0xB8ADD0", VA = "0xB8ADD0", Slot = "7")]
		public Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta, double offconstant)
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xB8B11C", Offset = "0xB8B11C", VA = "0xB8B11C", Slot = "6")]
		public Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta)
		{
			return null;
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xB8B324", Offset = "0xB8B324", VA = "0xB8B324")]
		private int FastExpansionSumZeroElim(int elen, double[] e, int flen, double[] f, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xB8B5EC", Offset = "0xB8B5EC", VA = "0xB8B5EC")]
		private int ScaleExpansionZeroElim(int elen, double[] e, double b, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xB8B820", Offset = "0xB8B820", VA = "0xB8B820")]
		private double Estimate(int elen, double[] e)
		{
			return default(double);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xB87634", Offset = "0xB87634", VA = "0xB87634")]
		private double CounterClockwiseAdapt(Point pa, Point pb, Point pc, double detsum)
		{
			return default(double);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xB8807C", Offset = "0xB8807C", VA = "0xB8807C")]
		private double InCircleAdapt(Point pa, Point pb, Point pc, Point pd, double permanent)
		{
			return default(double);
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xB87154", Offset = "0xB87154", VA = "0xB87154")]
		private void AllocateWorkspace()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class TriangleLocator
	{
		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TriangleSampler sampler;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IPredicates predicates;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Otri recenttri;

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xB8B878", Offset = "0xB8B878", VA = "0xB8B878")]
		public TriangleLocator(Mesh mesh, IPredicates predicates)
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xB8B998", Offset = "0xB8B998", VA = "0xB8B998")]
		public void Update(ref Otri otri)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xB8BA04", Offset = "0xB8BA04", VA = "0xB8BA04")]
		public LocateResult PreciseLocate(Point searchpoint, ref Otri searchtri, bool stopatsubsegment)
		{
			return default(LocateResult);
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xB8C188", Offset = "0xB8C188", VA = "0xB8C188")]
		public LocateResult Locate(Point searchpoint, ref Otri searchtri)
		{
			return default(LocateResult);
		}
	}
	[Token(Token = "0x200035F")]
	public class TrianglePool : ICollection<Triangle>, IEnumerable<Triangle>, IEnumerable
	{
		[Token(Token = "0x2000360")]
		private class Enumerator : IEnumerator<Triangle>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400166B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int count;

			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Triangle[][] pool;

			[Token(Token = "0x400166D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Triangle current;

			[Token(Token = "0x400166E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int index;

			[Token(Token = "0x400166F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int offset;

			[Token(Token = "0x170002E1")]
			public Triangle Current
			{
				[Token(Token = "0x60013D4")]
				[Address(RVA = "0xB8D448", Offset = "0xB8D448", VA = "0xB8D448", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D6")]
				[Address(RVA = "0xB8D454", Offset = "0xB8D454", VA = "0xB8D454", Slot = "7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0xB8D3F8", Offset = "0xB8D3F8", VA = "0xB8D3F8")]
			public Enumerator(TrianglePool pool)
			{
			}

			[Token(Token = "0x60013D5")]
			[Address(RVA = "0xB8D450", Offset = "0xB8D450", VA = "0xB8D450", Slot = "5")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60013D7")]
			[Address(RVA = "0xB8D45C", Offset = "0xB8D45C", VA = "0xB8D45C", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D8")]
			[Address(RVA = "0xB8D51C", Offset = "0xB8D51C", VA = "0xB8D51C", Slot = "8")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int size;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int count;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Triangle[][] pool;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Stack<Triangle> stack;

		[Token(Token = "0x170002DF")]
		public int Count
		{
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0xB8D360", Offset = "0xB8D360", VA = "0xB8D360", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E0")]
		public bool IsReadOnly
		{
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0xB8D3B0", Offset = "0xB8D3B0", VA = "0xB8D3B0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xB8C8C8", Offset = "0xB8C8C8", VA = "0xB8C8C8")]
		public TrianglePool()
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xB8CA38", Offset = "0xB8CA38", VA = "0xB8CA38")]
		public Triangle Get()
		{
			return null;
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xB8CE58", Offset = "0xB8CE58", VA = "0xB8CE58")]
		public void Release(Triangle triangle)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xB8CEC4", Offset = "0xB8CEC4", VA = "0xB8CEC4")]
		internal IEnumerable<Triangle> Sample(int k, System.Random random)
		{
			return null;
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xB8CCD8", Offset = "0xB8CCD8", VA = "0xB8CCD8")]
		private void Cleanup(Triangle triangle)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xB8CFA0", Offset = "0xB8CFA0", VA = "0xB8CFA0", Slot = "6")]
		public void Add(Triangle item)
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xB8CFE0", Offset = "0xB8CFE0", VA = "0xB8CFE0", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xB8D0F8", Offset = "0xB8D0F8", VA = "0xB8D0F8", Slot = "8")]
		public bool Contains(Triangle item)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xB8D178", Offset = "0xB8D178", VA = "0xB8D178", Slot = "9")]
		public void CopyTo(Triangle[] array, int index)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xB8D3B8", Offset = "0xB8D3B8", VA = "0xB8D3B8", Slot = "10")]
		public bool Remove(Triangle item)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xB8D300", Offset = "0xB8D300", VA = "0xB8D300", Slot = "11")]
		public IEnumerator<Triangle> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xB8D444", Offset = "0xB8D444", VA = "0xB8D444", Slot = "12")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000362")]
	internal class TriangleSampler : IEnumerable<Triangle>, IEnumerable
	{
		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private System.Random random;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int samples;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int triangleCount;

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xB8B91C", Offset = "0xB8B91C", VA = "0xB8B91C")]
		public TriangleSampler(Mesh mesh)
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xB8D750", Offset = "0xB8D750", VA = "0xB8D750")]
		public TriangleSampler(Mesh mesh, System.Random random)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xB8C74C", Offset = "0xB8C74C", VA = "0xB8C74C")]
		public void Update()
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xB8C7C4", Offset = "0xB8C7C4", VA = "0xB8C7C4", Slot = "4")]
		public IEnumerator<Triangle> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xB8D79C", Offset = "0xB8D79C", VA = "0xB8D79C", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
namespace TriangleNet.Topology
{
	[Token(Token = "0x2000363")]
	public struct Osub
	{
		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal SubSegment seg;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int orient;

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xB8D7A0", Offset = "0xB8D7A0", VA = "0xB8D7A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xB8D840", Offset = "0xB8D840", VA = "0xB8D840")]
		public void Sym(ref Osub os)
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xB8D880", Offset = "0xB8D880", VA = "0xB8D880")]
		public void Sym()
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xB8D894", Offset = "0xB8D894", VA = "0xB8D894")]
		public void Pivot(ref Osub os)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xB8D8E0", Offset = "0xB8D8E0", VA = "0xB8D8E0")]
		internal void Pivot(ref Otri ot)
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xB8D92C", Offset = "0xB8D92C", VA = "0xB8D92C")]
		public void Next()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xB8D978", Offset = "0xB8D978", VA = "0xB8D978")]
		public Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xB8D9B4", Offset = "0xB8D9B4", VA = "0xB8D9B4")]
		public Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xB8D9F8", Offset = "0xB8D9F8", VA = "0xB8D9F8")]
		internal void SetOrg(Vertex vertex)
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xB8DA68", Offset = "0xB8DA68", VA = "0xB8DA68")]
		internal void SetDest(Vertex vertex)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xB8DAE0", Offset = "0xB8DAE0", VA = "0xB8DAE0")]
		internal Vertex SegOrg()
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xB8DB20", Offset = "0xB8DB20", VA = "0xB8DB20")]
		internal Vertex SegDest()
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xB8DB64", Offset = "0xB8DB64", VA = "0xB8DB64")]
		internal void SetSegOrg(Vertex vertex)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xB8DBD8", Offset = "0xB8DBD8", VA = "0xB8DBD8")]
		internal void SetSegDest(Vertex vertex)
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xB8DC50", Offset = "0xB8DC50", VA = "0xB8DC50")]
		internal void Bond(ref Osub os)
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xB8DCD8", Offset = "0xB8DCD8", VA = "0xB8DCD8")]
		internal void Dissolve(SubSegment dummy)
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xB8DD14", Offset = "0xB8DD14", VA = "0xB8DD14")]
		internal void TriDissolve(Triangle dummy)
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xB8DD50", Offset = "0xB8DD50", VA = "0xB8DD50")]
		internal static bool IsDead(SubSegment sub)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xB8DD84", Offset = "0xB8DD84", VA = "0xB8DD84")]
		internal static void Kill(SubSegment sub)
		{
		}
	}
	[Token(Token = "0x2000364")]
	public struct Otri
	{
		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Triangle tri;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int orient;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] minus1Mod3;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xB8DDD8", Offset = "0xB8DDD8", VA = "0xB8DDD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xB8C0B8", Offset = "0xB8C0B8", VA = "0xB8C0B8")]
		public void Sym(ref Otri ot)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xB8C880", Offset = "0xB8C880", VA = "0xB8C880")]
		public void Sym()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xB8C018", Offset = "0xB8C018", VA = "0xB8C018")]
		public void Lnext(ref Otri ot)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xB8BEF4", Offset = "0xB8BEF4", VA = "0xB8BEF4")]
		public void Lnext()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xB8BF78", Offset = "0xB8BF78", VA = "0xB8BF78")]
		public void Lprev(ref Otri ot)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xB8BE70", Offset = "0xB8BE70", VA = "0xB8BE70")]
		public void Lprev()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xB8DE78", Offset = "0xB8DE78", VA = "0xB8DE78")]
		public void Onext(ref Otri ot)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xB8DF4C", Offset = "0xB8DF4C", VA = "0xB8DF4C")]
		public void Onext()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xB8E004", Offset = "0xB8E004", VA = "0xB8E004")]
		public void Oprev(ref Otri ot)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xB8E0EC", Offset = "0xB8E0EC", VA = "0xB8E0EC")]
		public void Oprev()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xB8E1AC", Offset = "0xB8E1AC", VA = "0xB8E1AC")]
		public void Dnext(ref Otri ot)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xB8E294", Offset = "0xB8E294", VA = "0xB8E294")]
		public void Dnext()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xB8E354", Offset = "0xB8E354", VA = "0xB8E354")]
		public void Dprev(ref Otri ot)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xB8BCEC", Offset = "0xB8BCEC", VA = "0xB8BCEC")]
		public Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xB8BD90", Offset = "0xB8BD90", VA = "0xB8BD90")]
		public Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xB8BE34", Offset = "0xB8BE34", VA = "0xB8BE34")]
		public Vertex Apex()
		{
			return null;
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xB8B9CC", Offset = "0xB8B9CC", VA = "0xB8B9CC")]
		public void Copy(ref Otri ot)
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xB8E428", Offset = "0xB8E428", VA = "0xB8E428")]
		public bool Equals(Otri ot)
		{
			return default(bool);
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xB8E44C", Offset = "0xB8E44C", VA = "0xB8E44C")]
		internal void SetOrg(Vertex v)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xB8E524", Offset = "0xB8E524", VA = "0xB8E524")]
		internal void SetDest(Vertex v)
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xB8E5FC", Offset = "0xB8E5FC", VA = "0xB8E5FC")]
		internal void SetApex(Vertex v)
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xB8E66C", Offset = "0xB8E66C", VA = "0xB8E66C")]
		internal void Bond(ref Otri ot)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xB8E744", Offset = "0xB8E744", VA = "0xB8E744")]
		internal void Dissolve(Triangle dummy)
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xB8E7B0", Offset = "0xB8E7B0", VA = "0xB8E7B0")]
		internal void Infect()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xB8E7D0", Offset = "0xB8E7D0", VA = "0xB8E7D0")]
		internal void Uninfect()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xB8E7EC", Offset = "0xB8E7EC", VA = "0xB8E7EC")]
		internal bool IsInfected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xB8C13C", Offset = "0xB8C13C", VA = "0xB8C13C")]
		internal void Pivot(ref Osub os)
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xB8E808", Offset = "0xB8E808", VA = "0xB8E808")]
		internal void SegBond(ref Osub os)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xB8E890", Offset = "0xB8E890", VA = "0xB8E890")]
		internal void SegDissolve(SubSegment dummy)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xB8C718", Offset = "0xB8C718", VA = "0xB8C718")]
		internal static bool IsDead(Triangle tria)
		{
			return default(bool);
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xB8E8CC", Offset = "0xB8E8CC", VA = "0xB8E8CC")]
		internal static void Kill(Triangle tri)
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class SubSegment : ISegment, IEdge
	{
		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Osub[] subsegs;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Vertex[] vertices;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Otri[] triangles;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int boundary;

		[Token(Token = "0x170002E5")]
		public int Label
		{
			[Token(Token = "0x600141B")]
			[Address(RVA = "0xB8EAD4", Offset = "0xB8EAD4", VA = "0xB8EAD4", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xB8EA04", Offset = "0xB8EA04", VA = "0xB8EA04")]
		public SubSegment()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xB8EADC", Offset = "0xB8EADC", VA = "0xB8EADC", Slot = "4")]
		public Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xB8EB0C", Offset = "0xB8EB0C", VA = "0xB8EB0C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xB8EB14", Offset = "0xB8EB14", VA = "0xB8EB14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000366")]
	public class Triangle : ITriangle
	{
		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int id;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Otri[] neighbors;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Vertex[] vertices;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Osub[] subsegs;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int label;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal double area;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool infected;

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xB8CD8C", Offset = "0xB8CD8C", VA = "0xB8CD8C")]
		public Triangle()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xB8EB98", Offset = "0xB8EB98", VA = "0xB8EB98", Slot = "4")]
		public Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xB8EBC8", Offset = "0xB8EBC8", VA = "0xB8EBC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xB8EBD0", Offset = "0xB8EBD0", VA = "0xB8EBD0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Tools
{
	[Token(Token = "0x2000367")]
	public static class Interpolation
	{
		[Token(Token = "0x6001423")]
		[Address(RVA = "0xB8EC54", Offset = "0xB8EC54", VA = "0xB8EC54")]
		public static void InterpolateZ(Point p, ITriangle triangle)
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class Statistic
	{
		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static long InCircleCount;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static long InCircleAdaptCount;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static long CounterClockwiseCount;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static long CounterClockwiseAdaptCount;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static long Orient3dCount;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static long HyperbolaCount;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static long CircumcenterCount;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static long CircleTopCount;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static long RelocationCount;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly int[] minus1Mod3;
	}
	[Token(Token = "0x2000369")]
	public class VertexSorter
	{
		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private System.Random rand;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vertex[] points;

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xB8EF50", Offset = "0xB8EF50", VA = "0xB8EF50")]
		private VertexSorter(Vertex[] points, int seed)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xB8EFE8", Offset = "0xB8EFE8", VA = "0xB8EFE8")]
		public static void Sort(Vertex[] array, int seed = 57113)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xB8F3A0", Offset = "0xB8F3A0", VA = "0xB8F3A0")]
		public static void Alternate(Vertex[] array, int length, int seed = 57113)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xB8F068", Offset = "0xB8F068", VA = "0xB8F068")]
		private void QuickSort(int left, int right)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xB8F45C", Offset = "0xB8F45C", VA = "0xB8F45C")]
		private void AlternateAxes(int left, int right, int axis)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xB8F514", Offset = "0xB8F514", VA = "0xB8F514")]
		private void VertexMedianX(int left, int right, int median)
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xB8F824", Offset = "0xB8F824", VA = "0xB8F824")]
		private void VertexMedianY(int left, int right, int median)
		{
		}
	}
}
namespace TriangleNet.Meshing
{
	[Token(Token = "0x200036A")]
	internal class ConstraintMesher
	{
		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Behavior behavior;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TriangleLocator locator;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Triangle> viri;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ILog<LogItem> logger;

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xB8FB34", Offset = "0xB8FB34", VA = "0xB8FB34")]
		public ConstraintMesher(Mesh mesh, Configuration config)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xB8FC98", Offset = "0xB8FC98", VA = "0xB8FC98")]
		public void Apply(IPolygon input, ConstraintOptions options)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xB907E4", Offset = "0xB907E4", VA = "0xB907E4")]
		private void CarveHoles()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xB90004", Offset = "0xB90004", VA = "0xB90004")]
		private void FormSkeleton(IPolygon input)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xB9101C", Offset = "0xB9101C", VA = "0xB9101C")]
		private void InfectHull()
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xB91214", Offset = "0xB91214", VA = "0xB91214")]
		private void Plague()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xB91B1C", Offset = "0xB91B1C", VA = "0xB91B1C")]
		private FindDirectionResult FindDirection(ref Otri searchtri, Vertex searchpoint)
		{
			return default(FindDirectionResult);
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xB91F18", Offset = "0xB91F18", VA = "0xB91F18")]
		private void SegmentIntersection(ref Otri splittri, ref Osub splitsubseg, Vertex endpoint2)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xB92304", Offset = "0xB92304", VA = "0xB92304")]
		private bool ScoutSegment(ref Otri searchtri, Vertex endpoint2, int newmark)
		{
			return default(bool);
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xB924BC", Offset = "0xB924BC", VA = "0xB924BC")]
		private void DelaunayFixup(ref Otri fixuptri, bool leftside)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xB927B8", Offset = "0xB927B8", VA = "0xB927B8")]
		private void ConstrainedEdge(ref Otri starttri, Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xB917AC", Offset = "0xB917AC", VA = "0xB917AC")]
		private void InsertSegment(Vertex endpoint1, Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xB91A40", Offset = "0xB91A40", VA = "0xB91A40")]
		private void MarkHull()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public class ConstraintOptions
	{
		[Token(Token = "0x170002E6")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x6001439")]
			[Address(RVA = "0xB93A54", Offset = "0xB93A54", VA = "0xB93A54")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600143A")]
			[Address(RVA = "0xB93A5C", Offset = "0xB93A5C", VA = "0xB93A5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public bool Convex
		{
			[Token(Token = "0x600143B")]
			[Address(RVA = "0xB93A68", Offset = "0xB93A68", VA = "0xB93A68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E8")]
		public int SegmentSplitting
		{
			[Token(Token = "0x600143C")]
			[Address(RVA = "0xB93A70", Offset = "0xB93A70", VA = "0xB93A70")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xB93A78", Offset = "0xB93A78", VA = "0xB93A78")]
		public ConstraintOptions()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class GenericMesher
	{
		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Configuration config;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ITriangulator triangulator;

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xB93A80", Offset = "0xB93A80", VA = "0xB93A80")]
		public GenericMesher()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xB93B2C", Offset = "0xB93B2C", VA = "0xB93B2C")]
		public GenericMesher(ITriangulator triangulator, Configuration config)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xB93B70", Offset = "0xB93B70", VA = "0xB93B70")]
		public IMesh Triangulate(IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}
	}
	[Token(Token = "0x200036D")]
	public interface IMesh
	{
	}
	[Token(Token = "0x200036E")]
	public interface ITriangulator
	{
		[Token(Token = "0x6001441")]
		IMesh Triangulate(IList<Vertex> points, Configuration config);
	}
	[Token(Token = "0x200036F")]
	internal class QualityMesher
	{
		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Queue<BadSubseg> badsubsegs;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BadTriQueue queue;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Behavior behavior;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NewLocation newLocation;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ILog<LogItem> logger;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Triangle newvertex_tri;

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xB93DB0", Offset = "0xB93DB0", VA = "0xB93DB0")]
		public QualityMesher(Mesh mesh, Configuration config)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xB93FC4", Offset = "0xB93FC4", VA = "0xB93FC4")]
		public void Apply(QualityOptions quality, bool delaunay = false)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xB9444C", Offset = "0xB9444C", VA = "0xB9444C")]
		public void AddBadSubseg(BadSubseg badseg)
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xB944A4", Offset = "0xB944A4", VA = "0xB944A4")]
		public int CheckSeg4Encroach(ref Osub testsubseg)
		{
			return default(int);
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xB947AC", Offset = "0xB947AC", VA = "0xB947AC")]
		public void TestTriangle(ref Otri testtri)
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xB94DD8", Offset = "0xB94DD8", VA = "0xB94DD8")]
		private void TallyEncs()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xB94F58", Offset = "0xB94F58", VA = "0xB94F58")]
		private void SplitEncSegs(bool triflaws)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xB9589C", Offset = "0xB9589C", VA = "0xB9589C")]
		private void TallyFaces()
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xB95B2C", Offset = "0xB95B2C", VA = "0xB95B2C")]
		private void SplitTriangle(BadTriangle badtri)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xB941FC", Offset = "0xB941FC", VA = "0xB941FC")]
		private void EnforceQuality()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public class QualityOptions
	{
		[Token(Token = "0x170002E9")]
		public double MaximumAngle
		{
			[Token(Token = "0x600144C")]
			[Address(RVA = "0xB9649C", Offset = "0xB9649C", VA = "0xB9649C")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170002EA")]
		public double MinimumAngle
		{
			[Token(Token = "0x600144D")]
			[Address(RVA = "0xB964A4", Offset = "0xB964A4", VA = "0xB964A4")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600144E")]
			[Address(RVA = "0xB964AC", Offset = "0xB964AC", VA = "0xB964AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public double MaximumArea
		{
			[Token(Token = "0x600144F")]
			[Address(RVA = "0xB964B4", Offset = "0xB964B4", VA = "0xB964B4")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001450")]
			[Address(RVA = "0xB964BC", Offset = "0xB964BC", VA = "0xB964BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x6001451")]
			[Address(RVA = "0xB964C4", Offset = "0xB964C4", VA = "0xB964C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002ED")]
		public bool VariableArea
		{
			[Token(Token = "0x6001452")]
			[Address(RVA = "0xB964CC", Offset = "0xB964CC", VA = "0xB964CC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EE")]
		public int SteinerPoints
		{
			[Token(Token = "0x6001453")]
			[Address(RVA = "0xB964D4", Offset = "0xB964D4", VA = "0xB964D4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xB964DC", Offset = "0xB964DC", VA = "0xB964DC")]
		public QualityOptions()
		{
		}
	}
}
namespace TriangleNet.Meshing.Iterators
{
	[Token(Token = "0x2000371")]
	public class RegionIterator
	{
		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Triangle> region;

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xB964E4", Offset = "0xB964E4", VA = "0xB964E4")]
		public RegionIterator(Mesh mesh)
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xB9656C", Offset = "0xB9656C", VA = "0xB9656C")]
		public void Process(Triangle triangle, int boundary = 0)
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xB96658", Offset = "0xB96658", VA = "0xB96658")]
		public void Process(Triangle triangle, Action<Triangle> action, int boundary = 0)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xB968E4", Offset = "0xB968E4", VA = "0xB968E4")]
		private void ProcessRegion(Action<Triangle> action, Func<SubSegment, bool> protector)
		{
		}
	}
}
namespace TriangleNet.Meshing.Data
{
	[Token(Token = "0x2000375")]
	internal class BadSubseg
	{
		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Osub subseg;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vertex org;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vertex dest;

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xB96CD0", Offset = "0xB96CD0", VA = "0xB96CD0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xB96CEC", Offset = "0xB96CEC", VA = "0xB96CEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xB947A4", Offset = "0xB947A4", VA = "0xB947A4")]
		public BadSubseg()
		{
		}
	}
	[Token(Token = "0x2000376")]
	internal class BadTriangle
	{
		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Otri poortri;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double key;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vertex org;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vertex dest;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vertex apex;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BadTriangle next;

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xB96D74", Offset = "0xB96D74", VA = "0xB96D74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xB96DFC", Offset = "0xB96DFC", VA = "0xB96DFC")]
		public BadTriangle()
		{
		}
	}
	[Token(Token = "0x2000377")]
	internal class BadTriQueue
	{
		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BadTriangle[] queuefront;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BadTriangle[] queuetail;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] nextnonemptyq;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int firstnonemptyq;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int count;

		[Token(Token = "0x170002EF")]
		public int Count
		{
			[Token(Token = "0x6001465")]
			[Address(RVA = "0xB96E04", Offset = "0xB96E04", VA = "0xB96E04")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xB94138", Offset = "0xB94138", VA = "0xB94138")]
		public BadTriQueue()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xB96274", Offset = "0xB96274", VA = "0xB96274")]
		public void Enqueue(BadTriangle badtri)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xB94CB4", Offset = "0xB94CB4", VA = "0xB94CB4")]
		public void Enqueue(ref Otri enqtri, double minedge, Vertex apex, Vertex org, Vertex dest)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xB96178", Offset = "0xB96178", VA = "0xB96178")]
		public BadTriangle Dequeue()
		{
			return null;
		}
	}
}
namespace TriangleNet.Meshing.Algorithm
{
	[Token(Token = "0x2000378")]
	public class Dwyer : ITriangulator
	{
		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPredicates predicates;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseDwyer;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vertex[] sortarray;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xB96E0C", Offset = "0xB96E0C", VA = "0xB96E0C", Slot = "4")]
		public IMesh Triangulate(IList<Vertex> points, Configuration config)
		{
			return null;
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xB97FC8", Offset = "0xB97FC8", VA = "0xB97FC8")]
		private void MergeHulls(ref Otri farleft, ref Otri innerleft, ref Otri innerright, ref Otri farright, int axis)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xB975B0", Offset = "0xB975B0", VA = "0xB975B0")]
		private void DivconqRecurse(int left, int right, int axis, ref Otri farleft, ref Otri farright)
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xB97E54", Offset = "0xB97E54", VA = "0xB97E54")]
		private int RemoveGhosts(ref Otri startghost)
		{
			return default(int);
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xB93B1C", Offset = "0xB93B1C", VA = "0xB93B1C")]
		public Dwyer()
		{
		}
	}
}
namespace TriangleNet.Logging
{
	[Token(Token = "0x2000379")]
	public enum LogLevel
	{
		[Token(Token = "0x40016CE")]
		Info,
		[Token(Token = "0x40016CF")]
		Warning,
		[Token(Token = "0x40016D0")]
		Error
	}
	[Token(Token = "0x200037A")]
	public interface ILog<T> where T : ILogItem
	{
		[Token(Token = "0x600146F")]
		void Error(string message, string info);

		[Token(Token = "0x6001470")]
		void Warning(string message, string info);
	}
	[Token(Token = "0x200037B")]
	public interface ILogItem
	{
	}
	[Token(Token = "0x200037C")]
	public class LogItem : ILogItem
	{
		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTime time;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LogLevel level;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string message;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string info;

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xB98DA8", Offset = "0xB98DA8", VA = "0xB98DA8")]
		public LogItem(LogLevel level, string message, string info)
		{
		}
	}
}
namespace TriangleNet.Geometry
{
	[Token(Token = "0x200037D")]
	public class Contour
	{
		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int marker;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool convex;

		[Token(Token = "0x170002F0")]
		public List<Vertex> Points
		{
			[Token(Token = "0x6001472")]
			[Address(RVA = "0xB98E4C", Offset = "0xB98E4C", VA = "0xB98E4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001473")]
			[Address(RVA = "0xB98E54", Offset = "0xB98E54", VA = "0xB98E54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xB98E5C", Offset = "0xB98E5C", VA = "0xB98E5C")]
		public Contour(IEnumerable<Vertex> points)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xB98E94", Offset = "0xB98E94", VA = "0xB98E94")]
		public Contour(IEnumerable<Vertex> points, int marker, bool convex)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xB99028", Offset = "0xB99028", VA = "0xB99028")]
		public List<ISegment> GetSegments()
		{
			return null;
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xB992F8", Offset = "0xB992F8", VA = "0xB992F8")]
		public Point FindInteriorPoint(int limit = 5, double eps = 2E-05)
		{
			return null;
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xB98EDC", Offset = "0xB98EDC", VA = "0xB98EDC")]
		private void AddPoints(IEnumerable<Vertex> points)
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xB99480", Offset = "0xB99480", VA = "0xB99480")]
		private static Point FindPointInPolygon(List<Vertex> contour, int limit, double eps)
		{
			return null;
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xB99BF0", Offset = "0xB99BF0", VA = "0xB99BF0")]
		private static bool IsPointInPolygon(Point point, List<Vertex> poly)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200037F")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x600147E")]
		[Address(RVA = "0xB99EA0", Offset = "0xB99EA0", VA = "0xB99EA0")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}
	}
	[Token(Token = "0x2000380")]
	public interface IEdge
	{
		[Token(Token = "0x170002F1")]
		int Label
		{
			[Token(Token = "0x600147F")]
			get;
		}
	}
	[Token(Token = "0x2000381")]
	public interface IPolygon
	{
		[Token(Token = "0x170002F2")]
		List<Vertex> Points
		{
			[Token(Token = "0x6001480")]
			get;
		}

		[Token(Token = "0x170002F3")]
		List<ISegment> Segments
		{
			[Token(Token = "0x6001481")]
			get;
		}

		[Token(Token = "0x170002F4")]
		List<Point> Holes
		{
			[Token(Token = "0x6001482")]
			get;
		}

		[Token(Token = "0x170002F5")]
		List<RegionPointer> Regions
		{
			[Token(Token = "0x6001483")]
			get;
		}
	}
	[Token(Token = "0x2000382")]
	public interface ISegment : IEdge
	{
		[Token(Token = "0x6001484")]
		Vertex GetVertex(int index);
	}
	[Token(Token = "0x2000383")]
	public interface ITriangle
	{
		[Token(Token = "0x6001485")]
		Vertex GetVertex(int index);
	}
	[Token(Token = "0x2000384")]
	public class Point : IComparable<Point>, IEquatable<Point>
	{
		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int label;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal double x;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double y;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal double z;

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xB99B78", Offset = "0xB99B78", VA = "0xB99B78")]
		public Point()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xB99450", Offset = "0xB99450", VA = "0xB99450")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xB99F18", Offset = "0xB99F18", VA = "0xB99F18")]
		public Point(double x, double y, int label)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xB95810", Offset = "0xB95810", VA = "0xB95810")]
		public static bool operator ==(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xB94D8C", Offset = "0xB94D8C", VA = "0xB94D8C")]
		public static bool operator !=(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xB99F84", Offset = "0xB99F84", VA = "0xB99F84", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xB99F54", Offset = "0xB99F54", VA = "0xB99F54", Slot = "5")]
		public bool Equals(Point p)
		{
			return default(bool);
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xB9A02C", Offset = "0xB9A02C", VA = "0xB9A02C", Slot = "4")]
		public int CompareTo(Point other)
		{
			return default(int);
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xB9A090", Offset = "0xB9A090", VA = "0xB9A090", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xB9A178", Offset = "0xB9A178", VA = "0xB9A178", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000385")]
	public class Polygon : IPolygon
	{
		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vertex> points;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Point> holes;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<RegionPointer> regions;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ISegment> segments;

		[Token(Token = "0x170002F6")]
		public List<Vertex> Points
		{
			[Token(Token = "0x6001490")]
			[Address(RVA = "0xB9A220", Offset = "0xB9A220", VA = "0xB9A220", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public List<Point> Holes
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0xB9A228", Offset = "0xB9A228", VA = "0xB9A228", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F8")]
		public List<RegionPointer> Regions
		{
			[Token(Token = "0x6001492")]
			[Address(RVA = "0xB9A230", Offset = "0xB9A230", VA = "0xB9A230", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F9")]
		public List<ISegment> Segments
		{
			[Token(Token = "0x6001493")]
			[Address(RVA = "0xB9A238", Offset = "0xB9A238", VA = "0xB9A238", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		public bool HasPointMarkers
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0xB9A240", Offset = "0xB9A240", VA = "0xB9A240", Slot = "8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public bool HasSegmentMarkers
		{
			[Token(Token = "0x6001495")]
			[Address(RVA = "0xB9A24C", Offset = "0xB9A24C", VA = "0xB9A24C", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xB9A258", Offset = "0xB9A258", VA = "0xB9A258")]
		public Polygon()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xB9A264", Offset = "0xB9A264", VA = "0xB9A264")]
		public Polygon(int capacity, bool markers)
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xB9A400", Offset = "0xB9A400", VA = "0xB9A400", Slot = "10")]
		public void Add(Contour contour, bool hole = false)
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xB9A4D4", Offset = "0xB9A4D4", VA = "0xB9A4D4", Slot = "11")]
		public void Add(Contour contour, Point hole)
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class Rectangle
	{
		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double xmin;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double ymin;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double xmax;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double ymax;

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xB99874", Offset = "0xB99874", VA = "0xB99874")]
		public Rectangle()
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xB9A5F4", Offset = "0xB9A5F4", VA = "0xB9A5F4")]
		public void Expand(Point p)
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xB998A0", Offset = "0xB998A0", VA = "0xB998A0")]
		public void Expand(IEnumerable<Point> points)
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xB9A6B0", Offset = "0xB9A6B0", VA = "0xB9A6B0")]
		public bool Contains(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xB99B9C", Offset = "0xB99B9C", VA = "0xB99B9C")]
		public bool Contains(Point pt)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000387")]
	public class RegionPointer
	{
		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Point point;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int id;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double area;
	}
	[Token(Token = "0x2000388")]
	public class Segment : ISegment, IEdge
	{
		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vertex v0;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vertex v1;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int label;

		[Token(Token = "0x170002FC")]
		public int Label
		{
			[Token(Token = "0x600149F")]
			[Address(RVA = "0xB9A6EC", Offset = "0xB9A6EC", VA = "0xB9A6EC", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xB992A0", Offset = "0xB992A0", VA = "0xB992A0")]
		public Segment(Vertex v0, Vertex v1, int label)
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xB9A6F4", Offset = "0xB9A6F4", VA = "0xB9A6F4", Slot = "4")]
		public Vertex GetVertex(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x2000389")]
	[DefaultMember("Item")]
	public class Vertex : Point
	{
		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int hash;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal VertexType type;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Otri tri;

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xB9A758", Offset = "0xB9A758", VA = "0xB9A758")]
		public Vertex(double x, double y)
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xB9585C", Offset = "0xB9585C", VA = "0xB9585C")]
		public Vertex(double x, double y, int mark)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xB9A78C", Offset = "0xB9A78C", VA = "0xB9A78C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace MTAssets
{
	[Token(Token = "0x200038A")]
	public class CombinedMeshesManager : MonoBehaviour
	{
		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xB9A794", Offset = "0xB9A794", VA = "0xB9A794")]
		public CombinedMeshesManager()
		{
		}
	}
}
namespace Microsoft.MixedReality.Toolkit.Rendering
{
	[Token(Token = "0x200038B")]
	[ExecuteInEditMode]
	public class DepthBufferRenderer : MonoBehaviour
	{
		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RenderTexture outputTexture;

		[Token(Token = "0x40016F3")]
		private const string DepthShaderName = "Mixed Reality Toolkit/Depth Buffer Viewer";

		[Token(Token = "0x170002FD")]
		public RenderTexture OutputTexture
		{
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0xB9A79C", Offset = "0xB9A79C", VA = "0xB9A79C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0xB9A7A4", Offset = "0xB9A7A4", VA = "0xB9A7A4")]
			set
			{
			}
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xB9A7AC", Offset = "0xB9A7AC", VA = "0xB9A7AC")]
		public DepthBufferRenderer()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public interface IMaterialInstanceOwner
	{
		[Token(Token = "0x60014A9")]
		void OnMaterialChanged(MaterialInstance materialInstance);
	}
	[Token(Token = "0x200038D")]
	[ExecuteAlways]
	[RequireComponent(typeof(Renderer))]
	public class MaterialInstance : MonoBehaviour
	{
		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer cachedRenderer;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material[] defaultMaterials;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material[] instanceMaterials;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool initialized;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool materialsInstanced;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly HashSet<UnityEngine.Object> materialOwners;

		[Token(Token = "0x40016FA")]
		private const string instancePostfix = " (Instance)";

		[Token(Token = "0x170002FE")]
		public Material Material
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0xB9AB04", Offset = "0xB9AB04", VA = "0xB9AB04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FF")]
		public Material[] Materials
		{
			[Token(Token = "0x60014AE")]
			[Address(RVA = "0xB9AB10", Offset = "0xB9AB10", VA = "0xB9AB10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000300")]
		private Renderer CachedRenderer
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0xB9AB1C", Offset = "0xB9AB1C", VA = "0xB9AB1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xB9A7B4", Offset = "0xB9A7B4", VA = "0xB9A7B4")]
		public Material AcquireMaterial([Optional] UnityEngine.Object owner, bool instance = true)
		{
			return null;
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xB9A924", Offset = "0xB9A924", VA = "0xB9A924")]
		public Material[] AcquireMaterials([Optional] UnityEngine.Object owner, bool instance = true)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xB9A9D4", Offset = "0xB9A9D4", VA = "0xB9A9D4")]
		public void ReleaseMaterial(UnityEngine.Object owner, bool autoDestroy = true)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xB9ABC4", Offset = "0xB9ABC4", VA = "0xB9ABC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xB9ACA8", Offset = "0xB9ACA8", VA = "0xB9ACA8")]
		private void Update()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xB9B340", Offset = "0xB9B340", VA = "0xB9B340")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xB9ABC8", Offset = "0xB9ABC8", VA = "0xB9ABC8")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xB9A87C", Offset = "0xB9A87C", VA = "0xB9A87C")]
		private void AcquireInstances()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xB9B274", Offset = "0xB9B274", VA = "0xB9B274")]
		private void CreateInstances()
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xB9B028", Offset = "0xB9B028", VA = "0xB9B028")]
		private static bool MaterialsMatch(Material[] a, Material[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xB9B4F8", Offset = "0xB9B4F8", VA = "0xB9B4F8")]
		private static Material[] InstanceMaterials(Material[] source)
		{
			return null;
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xB9B3EC", Offset = "0xB9B3EC", VA = "0xB9B3EC")]
		private static void DestroyMaterials(Material[] materials)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xB9B1CC", Offset = "0xB9B1CC", VA = "0xB9B1CC")]
		private static bool IsInstanceMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xB9B444", Offset = "0xB9B444", VA = "0xB9B444")]
		private static bool HasValidMaterial(Material[] materials)
		{
			return default(bool);
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xB9AA70", Offset = "0xB9AA70", VA = "0xB9AA70")]
		private static void DestorySafe(UnityEngine.Object toDestroy)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xB9B774", Offset = "0xB9B774", VA = "0xB9B774")]
		public MaterialInstance()
		{
		}
	}
}
namespace Microsoft.MixedReality.Toolkit.Utilities
{
	[Token(Token = "0x200038E")]
	public abstract class BaseMeshOutline : MonoBehaviour
	{
		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Material outlineMaterial;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected float outlineWidth;

		[Token(Token = "0x17000301")]
		public Material OutlineMaterial
		{
			[Token(Token = "0x60014BD")]
			[Address(RVA = "0xB9B7FC", Offset = "0xB9B7FC", VA = "0xB9B7FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014BE")]
			[Address(RVA = "0xB9B804", Offset = "0xB9B804", VA = "0xB9B804")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public float OutlineWidth
		{
			[Token(Token = "0x60014BF")]
			[Address(RVA = "0xB9B8A8", Offset = "0xB9B8A8", VA = "0xB9B8A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60014C0")]
			[Address(RVA = "0xB9B8B0", Offset = "0xB9B8B0", VA = "0xB9B8B0")]
			set
			{
			}
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xB9B8D0", Offset = "0xB9B8D0", VA = "0xB9B8D0", Slot = "4")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x60014C2")]
		protected abstract void ApplyOutlineMaterial();

		[Token(Token = "0x60014C3")]
		protected abstract void ApplyOutlineWidth();

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xB9B8F8", Offset = "0xB9B8F8", VA = "0xB9B8F8")]
		protected BaseMeshOutline()
		{
		}
	}
	[Token(Token = "0x200038F")]
	[ExecuteInEditMode]
	public class ClippingBox : ClippingPrimitive
	{
		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clipBoxSizeID;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected int clipBoxInverseTransformID;

		[Token(Token = "0x17000303")]
		protected override string Keyword
		{
			[Token(Token = "0x60014C5")]
			[Address(RVA = "0xB9B90C", Offset = "0xB9B90C", VA = "0xB9B90C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000304")]
		protected override string ClippingSideProperty
		{
			[Token(Token = "0x60014C6")]
			[Address(RVA = "0xB9B94C", Offset = "0xB9B94C", VA = "0xB9B94C", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xB9B98C", Offset = "0xB9B98C", VA = "0xB9B98C")]
		protected void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xB9BA84", Offset = "0xB9BA84", VA = "0xB9BA84", Slot = "7")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xB9BB90", Offset = "0xB9BB90", VA = "0xB9BB90", Slot = "9")]
		protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xB9BD38", Offset = "0xB9BD38", VA = "0xB9BD38")]
		public ClippingBox()
		{
		}
	}
	[Token(Token = "0x2000390")]
	[ExecuteInEditMode]
	public class ClippingPlane : ClippingPrimitive
	{
		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clipPlaneID;

		[Token(Token = "0x17000305")]
		protected override string Keyword
		{
			[Token(Token = "0x60014CB")]
			[Address(RVA = "0xB9BDCC", Offset = "0xB9BDCC", VA = "0xB9BDCC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000306")]
		protected override string ClippingSideProperty
		{
			[Token(Token = "0x60014CC")]
			[Address(RVA = "0xB9BE0C", Offset = "0xB9BE0C", VA = "0xB9BE0C", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xB9BE4C", Offset = "0xB9BE4C", VA = "0xB9BE4C")]
		protected void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xB9BF94", Offset = "0xB9BF94", VA = "0xB9BF94", Slot = "7")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xB9BFEC", Offset = "0xB9BFEC", VA = "0xB9BFEC", Slot = "9")]
		protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock)
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xB9C084", Offset = "0xB9C084", VA = "0xB9C084")]
		public ClippingPlane()
		{
		}
	}
	[Token(Token = "0x2000391")]
	[ExecuteAlways]
	public abstract class ClippingPrimitive : MonoBehaviour, IMaterialInstanceOwner
	{
		[Token(Token = "0x2000392")]
		public enum Side
		{
			[Token(Token = "0x4001707")]
			Inside = 1,
			[Token(Token = "0x4001708")]
			Outside = -1
		}

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected List<Renderer> renderers;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Side clippingSide;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool useOnPreRender;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int clippingSideID;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CameraEventRouter cameraMethods;

		[Token(Token = "0x17000307")]
		public Side ClippingSide
		{
			[Token(Token = "0x60014D1")]
			[Address(RVA = "0xB9C088", Offset = "0xB9C088", VA = "0xB9C088")]
			get
			{
				return default(Side);
			}
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0xB9C090", Offset = "0xB9C090", VA = "0xB9C090")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public bool UseOnPreRender
		{
			[Token(Token = "0x60014D3")]
			[Address(RVA = "0xB9C098", Offset = "0xB9C098", VA = "0xB9C098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0xB9C0A0", Offset = "0xB9C0A0", VA = "0xB9C0A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		protected abstract string Keyword
		{
			[Token(Token = "0x60014D5")]
			get;
		}

		[Token(Token = "0x1700030A")]
		protected abstract string ClippingSideProperty
		{
			[Token(Token = "0x60014D6")]
			get;
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xB9C32C", Offset = "0xB9C32C", VA = "0xB9C32C")]
		public void AddRenderer(Renderer _renderer)
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xB9C530", Offset = "0xB9C530", VA = "0xB9C530")]
		public void RemoveRenderer(Renderer _renderer)
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xB9C650", Offset = "0xB9C650", VA = "0xB9C650")]
		public void ClearRenderers()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xB9C6DC", Offset = "0xB9C6DC", VA = "0xB9C6DC")]
		public IEnumerable<Renderer> GetRenderersCopy()
		{
			return null;
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xB9C758", Offset = "0xB9C758", VA = "0xB9C758")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xB9C988", Offset = "0xB9C988", VA = "0xB9C988")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xB9CA74", Offset = "0xB9CA74", VA = "0xB9CA74")]
		protected void LateUpdate()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xB9CA8C", Offset = "0xB9CA8C", VA = "0xB9CA8C")]
		protected void OnCameraPreRender(CameraEventRouter router)
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xB9CA98", Offset = "0xB9CA98", VA = "0xB9CA98")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xB9CA9C", Offset = "0xB9CA9C", VA = "0xB9CA9C", Slot = "4")]
		public void OnMaterialChanged(MaterialInstance materialInstance)
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xB9BB08", Offset = "0xB9BB08", VA = "0xB9BB08", Slot = "7")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xB9CB5C", Offset = "0xB9CB5C", VA = "0xB9CB5C", Slot = "8")]
		protected virtual void UpdateRenderers()
		{
		}

		[Token(Token = "0x60014E3")]
		protected abstract void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock);

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xB9C864", Offset = "0xB9C864", VA = "0xB9C864")]
		protected void ToggleClippingFeature(bool keywordOn)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xB9C4C0", Offset = "0xB9C4C0", VA = "0xB9C4C0")]
		protected void ToggleClippingFeature(Material[] materials, bool keywordOn)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xB9CC78", Offset = "0xB9CC78", VA = "0xB9CC78")]
		protected void ToggleClippingFeature(Material material, bool keywordOn)
		{
		}

		[Token(Token = "0x60014E7")]
		private static T EnsureComponent<T>(GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xB9BD3C", Offset = "0xB9BD3C", VA = "0xB9BD3C")]
		protected ClippingPrimitive()
		{
		}
	}
	[Token(Token = "0x2000393")]
	[ExecuteInEditMode]
	public class ClippingSphere : ClippingPrimitive
	{
		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clipSphereID;

		[Token(Token = "0x1700030B")]
		public float Radius
		{
			[Token(Token = "0x60014E9")]
			[Address(RVA = "0xB9CD34", Offset = "0xB9CD34", VA = "0xB9CD34")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700030C")]
		protected override string Keyword
		{
			[Token(Token = "0x60014EA")]
			[Address(RVA = "0xB9CD78", Offset = "0xB9CD78", VA = "0xB9CD78", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030D")]
		protected override string ClippingSideProperty
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0xB9CDB8", Offset = "0xB9CDB8", VA = "0xB9CDB8", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xB9CDF8", Offset = "0xB9CDF8", VA = "0xB9CDF8")]
		protected void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xB9CE78", Offset = "0xB9CE78", VA = "0xB9CE78", Slot = "7")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xB9CED0", Offset = "0xB9CED0", VA = "0xB9CED0", Slot = "9")]
		protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xB9CF48", Offset = "0xB9CF48", VA = "0xB9CF48")]
		public ClippingSphere()
		{
		}
	}
	[Token(Token = "0x2000394")]
	[ExecuteInEditMode]
	public class HoverLight : MonoBehaviour
	{
		[Token(Token = "0x400170A")]
		private const int hoverLightCount = 2;

		[Token(Token = "0x400170B")]
		private const int hoverLightDataSize = 2;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<HoverLight> activeHoverLights;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector4[] hoverLightData;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int _HoverLightDataID;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int lastHoverLightUpdate;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float radius;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Color color;

		[Token(Token = "0x1700030E")]
		public float Radius
		{
			[Token(Token = "0x60014F0")]
			[Address(RVA = "0xB9CF4C", Offset = "0xB9CF4C", VA = "0xB9CF4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0xB9CF54", Offset = "0xB9CF54", VA = "0xB9CF54")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public Color Color
		{
			[Token(Token = "0x60014F2")]
			[Address(RVA = "0xB9CF5C", Offset = "0xB9CF5C", VA = "0xB9CF5C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xB9CF68", Offset = "0xB9CF68", VA = "0xB9CF68")]
			set
			{
			}
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xB9CF74", Offset = "0xB9CF74", VA = "0xB9CF74")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xB9D178", Offset = "0xB9D178", VA = "0xB9D178")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xB9D53C", Offset = "0xB9D53C", VA = "0xB9D53C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xB9D544", Offset = "0xB9D544", VA = "0xB9D544")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xB9CF7C", Offset = "0xB9CF7C", VA = "0xB9CF7C")]
		private void AddHoverLight(HoverLight light)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xB9D198", Offset = "0xB9D198", VA = "0xB9D198")]
		private void RemoveHoverLight(HoverLight light)
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xB9D930", Offset = "0xB9D930", VA = "0xB9D930")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xB9D218", Offset = "0xB9D218", VA = "0xB9D218")]
		private void UpdateHoverLights(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xB9D9B0", Offset = "0xB9D9B0", VA = "0xB9D9B0")]
		public HoverLight()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[RequireComponent(typeof(MeshRenderer))]
	public class MeshOutline : BaseMeshOutline
	{
		[Token(Token = "0x4001712")]
		private const string vertexExtrusionKeyword = "_VERTEX_EXTRUSION";

		[Token(Token = "0x4001713")]
		private const string vertexExtrusionSmoothNormalsKeyword = "_VERTEX_EXTRUSION_SMOOTH_NORMALS";

		[Token(Token = "0x4001714")]
		private const string vertexExtrusionValueName = "_VertexExtrusionValue";

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MaterialPropertyBlock propertyBlock;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int vertexExtrusionValueID;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material[] defaultMaterials;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshSmoother createdMeshSmoother;

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xB9DAB4", Offset = "0xB9DAB4", VA = "0xB9DAB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xB9DBA0", Offset = "0xB9DBA0", VA = "0xB9DBA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xB9DBAC", Offset = "0xB9DBAC", VA = "0xB9DBAC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xB9DBD0", Offset = "0xB9DBD0", VA = "0xB9DBD0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xB9DC2C", Offset = "0xB9DC2C", VA = "0xB9DC2C", Slot = "5")]
		protected override void ApplyOutlineMaterial()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xB9E09C", Offset = "0xB9E09C", VA = "0xB9E09C", Slot = "6")]
		protected override void ApplyOutlineWidth()
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xB9DEF4", Offset = "0xB9DEF4", VA = "0xB9DEF4")]
		private static int GetMinRenderQueue(Material[] materials)
		{
			return default(int);
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xB9E168", Offset = "0xB9E168", VA = "0xB9E168")]
		public MeshOutline()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class MeshOutlineHierarchy : BaseMeshOutline
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshOutline[] meshOutlines;

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xB9E17C", Offset = "0xB9E17C", VA = "0xB9E17C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xB9E2FC", Offset = "0xB9E2FC", VA = "0xB9E2FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xB9E3A4", Offset = "0xB9E3A4", VA = "0xB9E3A4", Slot = "5")]
		protected override void ApplyOutlineMaterial()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xB9E46C", Offset = "0xB9E46C", VA = "0xB9E46C", Slot = "6")]
		protected override void ApplyOutlineWidth()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xB9E54C", Offset = "0xB9E54C", VA = "0xB9E54C")]
		public MeshOutlineHierarchy()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[RequireComponent(typeof(MeshFilter))]
	public class MeshSmoother : MonoBehaviour
	{
		[Token(Token = "0x2000398")]
		private class MeshReference
		{
			[Token(Token = "0x400171F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Mesh Mesh;

			[Token(Token = "0x4001720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int referenceCount;

			[Token(Token = "0x6001513")]
			[Address(RVA = "0xB9F51C", Offset = "0xB9F51C", VA = "0xB9F51C")]
			public MeshReference(Mesh mesh)
			{
			}

			[Token(Token = "0x6001514")]
			[Address(RVA = "0xB9F50C", Offset = "0xB9F50C", VA = "0xB9F50C")]
			public void Increment()
			{
			}

			[Token(Token = "0x6001515")]
			[Address(RVA = "0xB9F4EC", Offset = "0xB9F4EC", VA = "0xB9F4EC")]
			public void Decrement()
			{
			}

			[Token(Token = "0x6001516")]
			[Address(RVA = "0xB9F4FC", Offset = "0xB9F4FC", VA = "0xB9F4FC")]
			public bool IsReferenced()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400171B")]
		private const int smoothNormalUVChannel = 2;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool smoothNormalsOnAwake;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshFilter meshFilter;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, MeshReference> processedMeshes;

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xB9DFDC", Offset = "0xB9DFDC", VA = "0xB9DFDC")]
		public void SmoothNormals()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xB9F0C0", Offset = "0xB9F0C0", VA = "0xB9F0C0")]
		public Task SmoothNormalsAsync()
		{
			return null;
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xB9F310", Offset = "0xB9F310", VA = "0xB9F310")]
		private void Awake()
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xB9F388", Offset = "0xB9F388", VA = "0xB9F388")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xB9E560", Offset = "0xB9E560", VA = "0xB9E560")]
		private bool AcquirePreprocessedMesh(out Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xB9E79C", Offset = "0xB9E79C", VA = "0xB9E79C")]
		private static List<Vector3> CalculateSmoothNormals(Vector3[] vertices, Vector3[] normals)
		{
			return null;
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xB9F558", Offset = "0xB9F558", VA = "0xB9F558")]
		public MeshSmoother()
		{
		}
	}
	[Token(Token = "0x200039A")]
	[ExecuteInEditMode]
	public class ProximityLight : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200039B")]
		public class LightSettings
		{
			[Token(Token = "0x400172D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private float nearRadius;

			[Token(Token = "0x400172E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private float farRadius;

			[Token(Token = "0x400172F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private float nearDistance;

			[Token(Token = "0x4001730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private float minNearSizePercentage;

			[Token(Token = "0x4001731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Color centerColor;

			[Token(Token = "0x4001732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private Color middleColor;

			[Token(Token = "0x4001733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[SerializeField]
			private Color outerColor;

			[Token(Token = "0x17000311")]
			public float NearRadius
			{
				[Token(Token = "0x6001528")]
				[Address(RVA = "0xBA05B4", Offset = "0xBA05B4", VA = "0xBA05B4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000312")]
			public float FarRadius
			{
				[Token(Token = "0x6001529")]
				[Address(RVA = "0xBA05BC", Offset = "0xBA05BC", VA = "0xBA05BC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000313")]
			public float NearDistance
			{
				[Token(Token = "0x600152A")]
				[Address(RVA = "0xBA05C4", Offset = "0xBA05C4", VA = "0xBA05C4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000314")]
			public float MinNearSizePercentage
			{
				[Token(Token = "0x600152B")]
				[Address(RVA = "0xBA05CC", Offset = "0xBA05CC", VA = "0xBA05CC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000315")]
			public Color CenterColor
			{
				[Token(Token = "0x600152C")]
				[Address(RVA = "0xBA05D4", Offset = "0xBA05D4", VA = "0xBA05D4")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x17000316")]
			public Color MiddleColor
			{
				[Token(Token = "0x600152D")]
				[Address(RVA = "0xBA05E0", Offset = "0xBA05E0", VA = "0xBA05E0")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x17000317")]
			public Color OuterColor
			{
				[Token(Token = "0x600152E")]
				[Address(RVA = "0xBA05EC", Offset = "0xBA05EC", VA = "0xBA05EC")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x600152F")]
			[Address(RVA = "0xBA049C", Offset = "0xBA049C", VA = "0xBA049C")]
			public LightSettings()
			{
			}
		}

		[Token(Token = "0x4001724")]
		private const int proximityLightCount = 2;

		[Token(Token = "0x4001725")]
		private const int proximityLightDataSize = 6;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ProximityLight> activeProximityLights;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector4[] proximityLightData;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int proximityLightDataID;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int lastProximityLightUpdate;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LightSettings settings;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float pulseTime;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float pulseFade;

		[Token(Token = "0x17000310")]
		public LightSettings Settings
		{
			[Token(Token = "0x600151A")]
			[Address(RVA = "0xB9F6C4", Offset = "0xB9F6C4", VA = "0xB9F6C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600151B")]
			[Address(RVA = "0xB9F6CC", Offset = "0xB9F6CC", VA = "0xB9F6CC")]
			set
			{
			}
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xB9F6D4", Offset = "0xB9F6D4", VA = "0xB9F6D4")]
		public void Pulse(float pulseDuration = 0.2f, float fadeBegin = 0.8f, float fadeSpeed = 10f)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xB9F7A0", Offset = "0xB9F7A0", VA = "0xB9F7A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xB9F9F0", Offset = "0xB9F9F0", VA = "0xB9F9F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xB9FF50", Offset = "0xB9FF50", VA = "0xB9FF50")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xB9FFA0", Offset = "0xB9FFA0", VA = "0xB9FFA0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xB9F7F4", Offset = "0xB9F7F4", VA = "0xB9F7F4")]
		private static void AddProximityLight(ProximityLight light)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xB9FA4C", Offset = "0xB9FA4C", VA = "0xB9FA4C")]
		private static void RemoveProximityLight(ProximityLight light)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xBA0384", Offset = "0xBA0384", VA = "0xBA0384")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xB9FACC", Offset = "0xB9FACC", VA = "0xB9FACC")]
		private static void UpdateProximityLights(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xB9F708", Offset = "0xB9F708", VA = "0xB9F708")]
		private IEnumerator PulseRoutine(float pulseDuration, float fadeBegin, float fadeSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xBA042C", Offset = "0xBA042C", VA = "0xBA042C")]
		public ProximityLight()
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class CameraEventRouter : MonoBehaviour
	{
		[Token(Token = "0x14000023")]
		public event Action<CameraEventRouter> OnCameraPreRender
		{
			[Token(Token = "0x6001536")]
			[Address(RVA = "0xB9C1CC", Offset = "0xB9C1CC", VA = "0xB9C1CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001537")]
			[Address(RVA = "0xB9C27C", Offset = "0xB9C27C", VA = "0xB9C27C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xBA07DC", Offset = "0xBA07DC", VA = "0xBA07DC")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xBA07FC", Offset = "0xBA07FC", VA = "0xBA07FC")]
		public CameraEventRouter()
		{
		}
	}
}
namespace MirzaBeig.Shaders.ImageEffects
{
	[Serializable]
	[Token(Token = "0x200039E")]
	[ExecuteInEditMode]
	public class Sharpen : IEBase
	{
		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float strength;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeMult;

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xBA0804", Offset = "0xBA0804", VA = "0xBA0804")]
		private void Awake()
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xBA085C", Offset = "0xBA085C", VA = "0xBA085C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xBA0A58", Offset = "0xBA0A58", VA = "0xBA0A58")]
		public Sharpen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200039F")]
	[ExecuteInEditMode]
	public class IEBase : MonoBehaviour
	{
		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material _material;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _camera;

		[Token(Token = "0x1700031A")]
		protected Material material
		{
			[Token(Token = "0x600153D")]
			[Address(RVA = "0xBA0908", Offset = "0xBA0908", VA = "0xBA0908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		protected Shader shader
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0xBA0A74", Offset = "0xBA0A74", VA = "0xBA0A74")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600153F")]
			[Address(RVA = "0xBA0A7C", Offset = "0xBA0A7C", VA = "0xBA0A7C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		protected Camera camera
		{
			[Token(Token = "0x6001540")]
			[Address(RVA = "0xBA0A84", Offset = "0xBA0A84", VA = "0xBA0A84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xBA09D8", Offset = "0xBA09D8", VA = "0xBA09D8")]
		protected void blit(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xBA0B28", Offset = "0xBA0B28", VA = "0xBA0B28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xBA0A6C", Offset = "0xBA0A6C", VA = "0xBA0A6C")]
		public IEBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A0")]
	[ExecuteInEditMode]
	public class MirzaPostProcessing : MonoBehaviour
	{
		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xBA0BB4", Offset = "0xBA0BB4", VA = "0xBA0BB4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xBA0C28", Offset = "0xBA0C28", VA = "0xBA0C28")]
		public MirzaPostProcessing()
		{
		}
	}
}
namespace MirzaBeig.Scripting.Effects
{
	[Token(Token = "0x20003A1")]
	public class AttractionParticleAffector : ParticleAffector
	{
		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float arrivalRadius;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float arrivedRadius;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xBA0C30", Offset = "0xBA0C30", VA = "0xBA0C30", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xBA0C38", Offset = "0xBA0C38", VA = "0xBA0C38", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xBA0C94", Offset = "0xBA0C94", VA = "0xBA0C94", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xBA0C9C", Offset = "0xBA0C9C", VA = "0xBA0C9C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xBA1A9C", Offset = "0xBA1A9C", VA = "0xBA1A9C", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xBA1C64", Offset = "0xBA1C64", VA = "0xBA1C64", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xBA1DF8", Offset = "0xBA1DF8", VA = "0xBA1DF8")]
		public AttractionParticleAffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A2")]
	public static class Noise
	{
		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xBA1FF0", Offset = "0xBA1FF0", VA = "0xBA1FF0")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xBA28E8", Offset = "0xBA28E8", VA = "0xBA28E8")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xBA3088", Offset = "0xBA3088", VA = "0xBA3088")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xBA3194", Offset = "0xBA3194", VA = "0xBA3194")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003A3")]
	public abstract class ParticleAffector : MonoBehaviour
	{
		[Token(Token = "0x20003A4")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x400175C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToAffectorCenterSqr;

			[Token(Token = "0x400175D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToAffectorCenter;

			[Token(Token = "0x400175E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float forceDeltaTime;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 transformPosition;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve scaleForceByDistance;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particleSystemsCount;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GetForceParameters parameters;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool alwaysUpdate;

		[Token(Token = "0x1700031D")]
		public float scaledRadius
		{
			[Token(Token = "0x6001552")]
			[Address(RVA = "0xBA334C", Offset = "0xBA334C", VA = "0xBA334C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xBA0C34", Offset = "0xBA0C34", VA = "0xBA0C34", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xBA0C3C", Offset = "0xBA0C3C", VA = "0xBA0C3C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xBA3380", Offset = "0xBA3380", VA = "0xBA3380", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xBA3384", Offset = "0xBA3384", VA = "0xBA3384", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xBA0C98", Offset = "0xBA0C98", VA = "0xBA0C98", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xBA33C8", Offset = "0xBA33C8", VA = "0xBA33C8")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xBA3478", Offset = "0xBA3478", VA = "0xBA3478")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xBA0CD8", Offset = "0xBA0CD8", VA = "0xBA0CD8", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xBA1D74", Offset = "0xBA1D74", VA = "0xBA1D74", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xBA1E08", Offset = "0xBA1E08", VA = "0xBA1E08")]
		protected ParticleAffector()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class TurbulenceParticleAffector : ParticleAffector
	{
		[Token(Token = "0x20003A6")]
		public enum NoiseType
		{
			[Token(Token = "0x400176D")]
			PseudoPerlin,
			[Token(Token = "0x400176E")]
			Perlin,
			[Token(Token = "0x400176F")]
			Simplex,
			[Token(Token = "0x4001770")]
			OctavePerlin,
			[Token(Token = "0x4001771")]
			OctaveSimplex
		}

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float speed;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float frequency;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public NoiseType noiseType;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int octaves;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float lacunarity;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float persistence;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float time;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomX;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float randomY;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float randomZ;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetX;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float offsetZ;

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xBA34D0", Offset = "0xBA34D0", VA = "0xBA34D0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xBA34D8", Offset = "0xBA34D8", VA = "0xBA34D8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xBA3544", Offset = "0xBA3544", VA = "0xBA3544", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xBA3568", Offset = "0xBA3568", VA = "0xBA3568", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xBA3598", Offset = "0xBA3598", VA = "0xBA3598", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xBA39B8", Offset = "0xBA39B8", VA = "0xBA39B8", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xBA39E4", Offset = "0xBA39E4", VA = "0xBA39E4")]
		public TurbulenceParticleAffector()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class VortexParticleAffector : ParticleAffector
	{
		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xBA3A04", Offset = "0xBA3A04", VA = "0xBA3A04", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xBA3A0C", Offset = "0xBA3A0C", VA = "0xBA3A0C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xBA3A14", Offset = "0xBA3A14", VA = "0xBA3A14", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xBA3A1C", Offset = "0xBA3A1C", VA = "0xBA3A1C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xBA3A24", Offset = "0xBA3A24", VA = "0xBA3A24")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xBA3AC0", Offset = "0xBA3AC0", VA = "0xBA3AC0", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xBA3AC4", Offset = "0xBA3AC4", VA = "0xBA3AC4", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xBA3BCC", Offset = "0xBA3BCC", VA = "0xBA3BCC", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xBA3D9C", Offset = "0xBA3D9C", VA = "0xBA3D9C")]
		public VortexParticleAffector()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleFlocking : MonoBehaviour
	{
		[Token(Token = "0x20003A9")]
		public struct Voxel
		{
			[Token(Token = "0x4001785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bounds bounds;

			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] particles;

			[Token(Token = "0x4001787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int particleCount;
		}

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cohesion;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float separation;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool useVoxels;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool voxelLocalCenterFromBounds;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float voxelVolume;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int voxelsPerAxis;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int previousVoxelsPerAxisValue;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Voxel[] voxels;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float delay;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float timer;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool alwaysUpdate;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool visible;

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xBA3DFC", Offset = "0xBA3DFC", VA = "0xBA3DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xBA3E7C", Offset = "0xBA3E7C", VA = "0xBA3E7C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xBA3E88", Offset = "0xBA3E88", VA = "0xBA3E88")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xBA3E90", Offset = "0xBA3E90", VA = "0xBA3E90")]
		private void buildVoxelGrid()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xBA40C4", Offset = "0xBA40C4", VA = "0xBA40C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xBA4A90", Offset = "0xBA4A90", VA = "0xBA4A90")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xBA4C70", Offset = "0xBA4C70", VA = "0xBA4C70")]
		public ParticleFlocking()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class AttractionParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float arrivalRadius;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float arrivedRadius;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xBA4C9C", Offset = "0xBA4C9C", VA = "0xBA4C9C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xBA4CA4", Offset = "0xBA4CA4", VA = "0xBA4CA4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xBA4D00", Offset = "0xBA4D00", VA = "0xBA4D00", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xBA4D08", Offset = "0xBA4D08", VA = "0xBA4D08", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xBA5B38", Offset = "0xBA5B38", VA = "0xBA5B38", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xBA5D00", Offset = "0xBA5D00", VA = "0xBA5D00", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xBA5E94", Offset = "0xBA5E94", VA = "0xBA5E94")]
		public AttractionParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AB")]
	public static class Noise2
	{
		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xBA608C", Offset = "0xBA608C", VA = "0xBA608C")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xBA6984", Offset = "0xBA6984", VA = "0xBA6984")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xBA7124", Offset = "0xBA7124", VA = "0xBA7124")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xBA7230", Offset = "0xBA7230", VA = "0xBA7230")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003AC")]
	public abstract class ParticleForceField : MonoBehaviour
	{
		[Token(Token = "0x20003AD")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x40017A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToForceFieldCenterSqr;

			[Token(Token = "0x40017A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToForceFieldCenter;

			[Token(Token = "0x40017A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 center;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 transformPosition;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve forceOverDistance;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int particleSystemsCount;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GetForceParameters parameters;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool alwaysUpdate;

		[Token(Token = "0x1700031E")]
		public float scaledRadius
		{
			[Token(Token = "0x6001580")]
			[Address(RVA = "0xBA73E8", Offset = "0xBA73E8", VA = "0xBA73E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xBA4CA0", Offset = "0xBA4CA0", VA = "0xBA4CA0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xBA4CA8", Offset = "0xBA4CA8", VA = "0xBA4CA8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xBA741C", Offset = "0xBA741C", VA = "0xBA741C", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xBA7420", Offset = "0xBA7420", VA = "0xBA7420", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xBA4D04", Offset = "0xBA4D04", VA = "0xBA4D04", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xBA7464", Offset = "0xBA7464", VA = "0xBA7464")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xBA7514", Offset = "0xBA7514", VA = "0xBA7514")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xBA4D44", Offset = "0xBA4D44", VA = "0xBA4D44", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xBA5E10", Offset = "0xBA5E10", VA = "0xBA5E10", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xBA5EA4", Offset = "0xBA5EA4", VA = "0xBA5EA4")]
		protected ParticleForceField()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class TurbulenceParticleForceField : ParticleForceField
	{
		[Token(Token = "0x20003AF")]
		public enum NoiseType
		{
			[Token(Token = "0x40017B2")]
			PseudoPerlin,
			[Token(Token = "0x40017B3")]
			Perlin,
			[Token(Token = "0x40017B4")]
			Simplex,
			[Token(Token = "0x40017B5")]
			OctavePerlin,
			[Token(Token = "0x40017B6")]
			OctaveSimplex
		}

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float scrollSpeed;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float frequency;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public NoiseType noiseType;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public int octaves;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float octaveMultiplier;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float octaveScale;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float time;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float randomX;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float randomY;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomZ;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float offsetX;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float offsetY;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetZ;

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xBA756C", Offset = "0xBA756C", VA = "0xBA756C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xBA7570", Offset = "0xBA7570", VA = "0xBA7570", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xBA75D8", Offset = "0xBA75D8", VA = "0xBA75D8", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xBA75F4", Offset = "0xBA75F4", VA = "0xBA75F4", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xBA7620", Offset = "0xBA7620", VA = "0xBA7620", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xBA7A10", Offset = "0xBA7A10", VA = "0xBA7A10", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xBA7A38", Offset = "0xBA7A38", VA = "0xBA7A38")]
		public TurbulenceParticleForceField()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class VortexParticleForceField : ParticleForceField
	{
		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xBA7A54", Offset = "0xBA7A54", VA = "0xBA7A54", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xBA7A58", Offset = "0xBA7A58", VA = "0xBA7A58", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xBA7A5C", Offset = "0xBA7A5C", VA = "0xBA7A5C", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xBA7A60", Offset = "0xBA7A60", VA = "0xBA7A60", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xBA7A64", Offset = "0xBA7A64", VA = "0xBA7A64")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xBA7B00", Offset = "0xBA7B00", VA = "0xBA7B00", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xBA7B04", Offset = "0xBA7B04", VA = "0xBA7B04", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xBA7C0C", Offset = "0xBA7C0C", VA = "0xBA7C0C", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xBA7D80", Offset = "0xBA7D80", VA = "0xBA7D80")]
		public VortexParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B1")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleLights : MonoBehaviour
	{
		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem ps;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Light> lights;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scale;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color colour;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float colourFromParticle;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LightShadows shadows;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject template;

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xBA7DDC", Offset = "0xBA7DDC", VA = "0xBA7DDC")]
		private void Start()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xBA7EDC", Offset = "0xBA7EDC", VA = "0xBA7EDC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xBA83C4", Offset = "0xBA83C4", VA = "0xBA83C4")]
		public ParticleLights()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticlePlexus : MonoBehaviour
	{
		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxConnections;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxLineRenderers;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float widthFromParticle;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float colourFromParticle;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float alphaFromParticle;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve alphaOverNormalizedDistance;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] particlePositions;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color[] particleColours;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] particleSizes;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LineRenderer lineRendererTemplate;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _transform;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MeshFilter trianglesMeshFilter;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Mesh trianglesMesh;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int[]> allConnectedParticles;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxDistanceTriangleBias;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool trianglesDistanceCheck;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float triangleColourFromParticle;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float triangleAlphaFromParticle;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float delay;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float timer;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool alwaysUpdate;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool visible;

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xBA8468", Offset = "0xBA8468", VA = "0xBA8468")]
		private void Start()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xBA85A0", Offset = "0xBA85A0", VA = "0xBA85A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xBA8630", Offset = "0xBA8630", VA = "0xBA8630")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xBA863C", Offset = "0xBA863C", VA = "0xBA863C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xBA8644", Offset = "0xBA8644", VA = "0xBA8644")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xBAA0D4", Offset = "0xBAA0D4", VA = "0xBAA0D4")]
		public ParticlePlexus()
		{
		}
	}
}
namespace MirzaBeig.Demos
{
	[Token(Token = "0x20003B3")]
	public class MouseRotateCamera : MonoBehaviour
	{
		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRotation;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xBAA208", Offset = "0xBAA208", VA = "0xBAA208")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xBAA3D8", Offset = "0xBAA3D8", VA = "0xBAA3D8")]
		public MouseRotateCamera()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems
{
	[Token(Token = "0x20003B4")]
	[RequireComponent(typeof(Light))]
	public class AnimatedLight : MonoBehaviour
	{
		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light light;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool evaluating;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colourOverLifetime;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve intensityOverLifetime;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool loop;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool autoDestruct;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color startColour;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float startIntensity;

		[Token(Token = "0x1700031F")]
		public float time
		{
			[Token(Token = "0x60015A6")]
			[Address(RVA = "0xBAA3EC", Offset = "0xBAA3EC", VA = "0xBAA3EC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015A7")]
			[Address(RVA = "0xBAA3F4", Offset = "0xBAA3F4", VA = "0xBAA3F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xBAA3FC", Offset = "0xBAA3FC", VA = "0xBAA3FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xBAA454", Offset = "0xBAA454", VA = "0xBAA454")]
		private void Start()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xBAA518", Offset = "0xBAA518", VA = "0xBAA518")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xBAA5E8", Offset = "0xBAA5E8", VA = "0xBAA5E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xBAA764", Offset = "0xBAA764", VA = "0xBAA764")]
		public AnimatedLight()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xBAA910", Offset = "0xBAA910", VA = "0xBAA910")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xBAA958", Offset = "0xBAA958", VA = "0xBAA958")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class DestroyAfterTime : MonoBehaviour
	{
		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xBAA960", Offset = "0xBAA960", VA = "0xBAA960")]
		private void Start()
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xBAA9DC", Offset = "0xBAA9DC", VA = "0xBAA9DC")]
		public DestroyAfterTime()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class DestroyOnParticlesDead : ParticleSystems
	{
		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xBAA9EC", Offset = "0xBAA9EC", VA = "0xBAA9EC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xBAAA48", Offset = "0xBAAA48", VA = "0xBAAA48", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xBAAA50", Offset = "0xBAAA50", VA = "0xBAAA50")]
		private void onParticleSystemsDead()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xBAAABC", Offset = "0xBAAABC", VA = "0xBAAABC", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xBAAAC4", Offset = "0xBAAAC4", VA = "0xBAAAC4", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xBAAACC", Offset = "0xBAAACC", VA = "0xBAAACC")]
		public DestroyOnParticlesDead()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class DestroyOnTrailsDestroyed : TrailRenderers
	{
		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xBAAADC", Offset = "0xBAAADC", VA = "0xBAAADC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xBAAAE4", Offset = "0xBAAAE4", VA = "0xBAAAE4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xBAAB40", Offset = "0xBAAB40", VA = "0xBAAB40", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xBAAC28", Offset = "0xBAAC28", VA = "0xBAAC28")]
		public DestroyOnTrailsDestroyed()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class ParticleSystems : MonoBehaviour
	{
		[Token(Token = "0x17000320")]
		public ParticleSystem[] particleSystems
		{
			[Token(Token = "0x60015BB")]
			[Address(RVA = "0xBAAC38", Offset = "0xBAAC38", VA = "0xBAAC38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60015BC")]
			[Address(RVA = "0xBAAC40", Offset = "0xBAAC40", VA = "0xBAAC40")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xBAA9F0", Offset = "0xBAA9F0", VA = "0xBAA9F0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xBAAA4C", Offset = "0xBAAA4C", VA = "0xBAAA4C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xBAAAC0", Offset = "0xBAAAC0", VA = "0xBAAAC0", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xBAAAC8", Offset = "0xBAAAC8", VA = "0xBAAAC8", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xBAAC48", Offset = "0xBAAC48", VA = "0xBAAC48")]
		public void Reset()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xBAACAC", Offset = "0xBAACAC", VA = "0xBAACAC")]
		public void Play()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xBAAD10", Offset = "0xBAAD10", VA = "0xBAAD10")]
		public void Pause()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xBAAD74", Offset = "0xBAAD74", VA = "0xBAAD74")]
		public void Stop()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xBAADD8", Offset = "0xBAADD8", VA = "0xBAADD8")]
		public void Clear()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xBAAE3C", Offset = "0xBAAE3C", VA = "0xBAAE3C")]
		public void SetLoop(bool loop)
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xBAAEC0", Offset = "0xBAAEC0", VA = "0xBAAEC0")]
		public void SetPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xBAAF4C", Offset = "0xBAAF4C", VA = "0xBAAF4C")]
		public void Simulate(float time, bool reset = false)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xBAAFC8", Offset = "0xBAAFC8", VA = "0xBAAFC8")]
		public bool IsAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xBAB0A0", Offset = "0xBAB0A0", VA = "0xBAB0A0")]
		public bool IsPlaying(bool checkAll = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xBAB0E8", Offset = "0xBAB0E8", VA = "0xBAB0E8")]
		public int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xBAAAD4", Offset = "0xBAAAD4", VA = "0xBAAAD4")]
		public ParticleSystems()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BA")]
	public class PerlinNoise
	{
		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 offset;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float amplitude;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float frequency;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xBAB1C4", Offset = "0xBAB1C4", VA = "0xBAB1C4")]
		public void init()
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xBAB214", Offset = "0xBAB214", VA = "0xBAB214")]
		public float GetValue(float time)
		{
			return default(float);
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xBAB250", Offset = "0xBAB250", VA = "0xBAB250")]
		public PerlinNoise()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BB")]
	public class PerlinNoiseXYZ
	{
		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerlinNoise x;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoise y;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoise z;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float amplitudeScale;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float frequencyScale;

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xBAB260", Offset = "0xBAB260", VA = "0xBAB260")]
		public void init()
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xBAB344", Offset = "0xBAB344", VA = "0xBAB344")]
		public Vector3 GetXYZ(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xBAB420", Offset = "0xBAB420", VA = "0xBAB420")]
		public PerlinNoiseXYZ()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	[RequireComponent(typeof(Renderer))]
	[ExecuteInEditMode]
	public class RendererSortingOrder : MonoBehaviour
	{
		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sortingOrder;

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xBAB430", Offset = "0xBAB430", VA = "0xBAB430")]
		private void Start()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xBAB48C", Offset = "0xBAB48C", VA = "0xBAB48C")]
		public RendererSortingOrder()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationSpeed;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 worldRotationSpeed;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xBAB494", Offset = "0xBAB494", VA = "0xBAB494")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xBAB654", Offset = "0xBAB654", VA = "0xBAB654")]
		private void Update()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xBAB4C4", Offset = "0xBAB4C4", VA = "0xBAB4C4")]
		private void rotate()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xBAB67C", Offset = "0xBAB67C", VA = "0xBAB67C")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class TrailRenderers : MonoBehaviour
	{
		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrailRenderer[] trailRenderers;

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xBAAAE0", Offset = "0xBAAAE0", VA = "0xBAAAE0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xBAAAE8", Offset = "0xBAAAE8", VA = "0xBAAAE8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xBAAC24", Offset = "0xBAAC24", VA = "0xBAAC24", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xBAB684", Offset = "0xBAB684", VA = "0xBAB684")]
		public void setAutoDestruct(bool value)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xBAAC30", Offset = "0xBAAC30", VA = "0xBAAC30")]
		public TrailRenderers()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class TransformNoise : MonoBehaviour
	{
		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoiseXYZ positionNoise;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoiseXYZ rotationNoise;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float time;

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xBAB6EC", Offset = "0xBAB6EC", VA = "0xBAB6EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xBAB714", Offset = "0xBAB714", VA = "0xBAB714")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xBAB7B4", Offset = "0xBAB7B4", VA = "0xBAB7B4")]
		public TransformNoise()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems.Demos
{
	[Serializable]
	[Token(Token = "0x20003C0")]
	public class DemoManager_XPTitles : MonoBehaviour
	{
		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LoopingParticleSystemsManager list;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text particleCountText;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text currentParticleSystemText;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rotator cameraRotator;

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xBAB7BC", Offset = "0xBAB7BC", VA = "0xBAB7BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xBABA34", Offset = "0xBABA34", VA = "0xBABA34")]
		private void Start()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xBABB40", Offset = "0xBABB40", VA = "0xBABB40")]
		public void ToggleRotation()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xBABB74", Offset = "0xBABB74", VA = "0xBABB74")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xBABBE4", Offset = "0xBABBE4", VA = "0xBABBE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xBABCC4", Offset = "0xBABCC4", VA = "0xBABCC4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xBABC6C", Offset = "0xBABC6C", VA = "0xBABC6C")]
		public void Next()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xBABC98", Offset = "0xBABC98", VA = "0xBABC98")]
		public void previous()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xBABAA0", Offset = "0xBABAA0", VA = "0xBABAA0")]
		private void updateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xBAC1BC", Offset = "0xBAC1BC", VA = "0xBAC1BC")]
		public DemoManager_XPTitles()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public enum CameraShakeTarget
	{
		[Token(Token = "0x4001804")]
		Position,
		[Token(Token = "0x4001805")]
		Rotation
	}
	[Token(Token = "0x20003C2")]
	public enum CameraShakeAmplitudeCurve
	{
		[Token(Token = "0x4001807")]
		Constant,
		[Token(Token = "0x4001808")]
		FadeInOut25,
		[Token(Token = "0x4001809")]
		FadeInOut50,
		[Token(Token = "0x400180A")]
		FadeInOut75
	}
	[Token(Token = "0x20003C3")]
	public class CameraShake : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003C4")]
		public class Shake
		{
			[Token(Token = "0x4001811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float amplitude;

			[Token(Token = "0x4001812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float frequency;

			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public CameraShakeTarget target;

			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float timeRemaining;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Vector2 perlinNoiseX;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector2 perlinNoiseY;

			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector2 perlinNoiseZ;

			[Token(Token = "0x4001819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 noise;

			[Token(Token = "0x400181A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public AnimationCurve amplitudeOverLifetimeCurve;

			[Token(Token = "0x60015EF")]
			[Address(RVA = "0xBAD140", Offset = "0xBAD140", VA = "0xBAD140")]
			private void Init(float amplitude, float frequency, float duration, CameraShakeTarget target)
			{
			}

			[Token(Token = "0x60015F0")]
			[Address(RVA = "0xBAD154", Offset = "0xBAD154", VA = "0xBAD154")]
			public void ApplyRandomSeed()
			{
			}

			[Token(Token = "0x60015F1")]
			[Address(RVA = "0xBAC2E4", Offset = "0xBAC2E4", VA = "0xBAC2E4")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x60015F2")]
			[Address(RVA = "0xBAC5A8", Offset = "0xBAC5A8", VA = "0xBAC5A8")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x60015F3")]
			[Address(RVA = "0xBAD1F4", Offset = "0xBAD1F4", VA = "0xBAD1F4")]
			public bool IsAlive()
			{
				return default(bool);
			}

			[Token(Token = "0x60015F4")]
			[Address(RVA = "0xBACFB4", Offset = "0xBACFB4", VA = "0xBACFB4")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothDampTime;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 smoothDampPositionVelocity;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float smoothDampRotationVelocityX;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float smoothDampRotationVelocityY;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float smoothDampRotationVelocityZ;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Shake> shakes;

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xBAC1C4", Offset = "0xBAC1C4", VA = "0xBAC1C4")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xBAC488", Offset = "0xBAC488", VA = "0xBAC488")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xBACAF4", Offset = "0xBACAF4", VA = "0xBACAF4")]
		private void Update()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xBAD0AC", Offset = "0xBAD0AC", VA = "0xBAD0AC")]
		public CameraShake()
		{
		}
	}
	[Token(Token = "0x20003C6")]
	public class DemoManager : MonoBehaviour
	{
		[Token(Token = "0x20003C7")]
		public enum ParticleMode
		{
			[Token(Token = "0x4001843")]
			looping,
			[Token(Token = "0x4001844")]
			oneshot
		}

		[Token(Token = "0x20003C8")]
		public enum Level
		{
			[Token(Token = "0x4001846")]
			none,
			[Token(Token = "0x4001847")]
			basic
		}

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform cameraRotationTransform;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTranslationTransform;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraLookAtPosition;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MouseFollow mouse;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetCameraPosition;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 targetCameraRotation;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cameraPositionStart;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 cameraRotationStart;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 input;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 cameraRotation;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float cameraMoveAmount;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float cameraRotateAmount;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cameraMoveSpeed;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float cameraRotationSpeed;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector2 cameraAngleLimits;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] levels;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Level currentLevel;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ParticleMode particleMode;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool advancedRendering;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Toggle loopingParticleModeToggle;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Toggle oneshotParticleModeToggle;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Toggle advancedRenderingToggle;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle mouseParticlesToggle;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Toggle[] levelToggles;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ToggleGroup levelTogglesContainer;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private LoopingParticleSystemsManager loopingParticleSystems;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private OneshotParticleSystemsManager oneshotParticleSystems;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject ui;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text particleCountText;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Text currentParticleSystemText;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Text particleSpawnInstructionText;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Slider timeScaleSlider;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Text timeScaleSliderValueText;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Camera mainCamera;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MonoBehaviour[] mainCameraPostEffects;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector3 cameraPositionSmoothDampVelocity;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 cameraRotationSmoothDampVelocity;

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xBAD29C", Offset = "0xBAD29C", VA = "0xBAD29C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xBAD360", Offset = "0xBAD360", VA = "0xBAD360")]
		private void Start()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xBAD910", Offset = "0xBAD910", VA = "0xBAD910")]
		public void OnTimeScaleSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xBAD68C", Offset = "0xBAD68C", VA = "0xBAD68C")]
		public void SetToLoopingParticleMode(bool set)
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xBAD720", Offset = "0xBAD720", VA = "0xBAD720")]
		public void SetToOneshotParticleMode(bool set)
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xBADB04", Offset = "0xBADB04", VA = "0xBADB04")]
		public void SetLevel(Level level)
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xBADB74", Offset = "0xBADB74", VA = "0xBADB74")]
		public void SetLevelFromToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xBAD7B8", Offset = "0xBAD7B8", VA = "0xBAD7B8")]
		public void SetAdvancedRendering(bool value)
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xBADBEC", Offset = "0xBADBEC", VA = "0xBADBEC")]
		public void SetMouseParticlesRendering(bool value)
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xBADC1C", Offset = "0xBADC1C", VA = "0xBADC1C")]
		public static Vector3 DampVector3(Vector3 from, Vector3 to, float speed, float dt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xBADC9C", Offset = "0xBADC9C", VA = "0xBADC9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xBAE574", Offset = "0xBAE574", VA = "0xBAE574")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xBAD668", Offset = "0xBAD668", VA = "0xBAD668")]
		private void ResetCameraTransformTargets()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xBAD8AC", Offset = "0xBAD8AC", VA = "0xBAD8AC")]
		private void UpdateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xBAE180", Offset = "0xBAE180", VA = "0xBAE180")]
		public void Next()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xBAE1C4", Offset = "0xBAE1C4", VA = "0xBAE1C4")]
		public void Previous()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xBAE680", Offset = "0xBAE680", VA = "0xBAE680")]
		public DemoManager()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class FPSDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float updateTime;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frameCount;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float fpsAccum;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text fpsText;

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xBAE6BC", Offset = "0xBAE6BC", VA = "0xBAE6BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xBAE714", Offset = "0xBAE714", VA = "0xBAE714")]
		private void Update()
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xBAE8C8", Offset = "0xBAE8C8", VA = "0xBAE8C8")]
		public FPSDisplay()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	public class FPSTest : MonoBehaviour
	{
		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int targetFPS1;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int targetFPS2;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int previousVSyncCount;

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xBAE8D8", Offset = "0xBAE8D8", VA = "0xBAE8D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xBAE948", Offset = "0xBAE948", VA = "0xBAE948")]
		public FPSTest()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class LoopingParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x600160E")]
		[Address(RVA = "0xBAE95C", Offset = "0xBAE95C", VA = "0xBAE95C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xBAE964", Offset = "0xBAE964", VA = "0xBAE964", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xBAEA08", Offset = "0xBAEA08", VA = "0xBAEA08", Slot = "6")]
		public override void Next()
		{
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xBAEB38", Offset = "0xBAEB38", VA = "0xBAEB38", Slot = "7")]
		public override void Previous()
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xBAEC64", Offset = "0xBAEC64", VA = "0xBAEC64", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xBAEC6C", Offset = "0xBAEC6C", VA = "0xBAEC6C", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xBAED20", Offset = "0xBAED20", VA = "0xBAED20")]
		public LoopingParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class MouseFollow : MonoBehaviour
	{
		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distanceFromCamera;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ignoreTimeScale;

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xBAED50", Offset = "0xBAED50", VA = "0xBAED50")]
		private void Update()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xBAEE60", Offset = "0xBAEE60", VA = "0xBAEE60")]
		public MouseFollow()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	public class OneshotParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask mouseRaycastLayerMask;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<ParticleSystem[]> spawnedPrefabs;

		[Token(Token = "0x17000321")]
		public bool disableSpawn
		{
			[Token(Token = "0x6001617")]
			[Address(RVA = "0xBAEE74", Offset = "0xBAEE74", VA = "0xBAEE74")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001618")]
			[Address(RVA = "0xBAEE7C", Offset = "0xBAEE7C", VA = "0xBAEE7C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xBAEE88", Offset = "0xBAEE88", VA = "0xBAEE88", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xBAEE8C", Offset = "0xBAEE8C", VA = "0xBAEE8C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xBAD9A0", Offset = "0xBAD9A0", VA = "0xBAD9A0")]
		public void Clear()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xBAEF1C", Offset = "0xBAEF1C", VA = "0xBAEF1C", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xBAE208", Offset = "0xBAE208", VA = "0xBAE208")]
		public void InstantiateParticlePrefab(Vector2 mousePosition, float maxDistance)
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xBAEF20", Offset = "0xBAEF20", VA = "0xBAEF20")]
		public void Randomize()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xBAEF78", Offset = "0xBAEF78", VA = "0xBAEF78", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xBAF100", Offset = "0xBAF100", VA = "0xBAF100")]
		public OneshotParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class ParticleManager : MonoBehaviour
	{
		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<ParticleSystem[]> particlePrefabs;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentParticlePrefabIndex;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int prefabNameUnderscoreCountCutoff;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool disableChildrenAtStart;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool initialized;

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xBAB828", Offset = "0xBAB828", VA = "0xBAB828")]
		public void Init()
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xBAE960", Offset = "0xBAE960", VA = "0xBAE960", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xBAE9F8", Offset = "0xBAE9F8", VA = "0xBAE9F8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xBAEAD4", Offset = "0xBAEAD4", VA = "0xBAEAD4", Slot = "6")]
		public virtual void Next()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xBAEC04", Offset = "0xBAEC04", VA = "0xBAEC04", Slot = "7")]
		public virtual void Previous()
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xBABDD8", Offset = "0xBABDD8", VA = "0xBABDD8")]
		public string GetCurrentPrefabName(bool shorten = false)
		{
			return null;
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xBAF138", Offset = "0xBAF138", VA = "0xBAF138", Slot = "8")]
		public virtual int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xBAEC68", Offset = "0xBAEC68", VA = "0xBAEC68", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xBAED38", Offset = "0xBAED38", VA = "0xBAED38")]
		public ParticleManager()
		{
		}
	}
}
namespace JBooth.MicroSplat
{
	[Token(Token = "0x20003CF")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Light))]
	public class GlitterLight : MonoBehaviour
	{
		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light lght;

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xBAF140", Offset = "0xBAF140", VA = "0xBAF140")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xBAF198", Offset = "0xBAF198", VA = "0xBAF198")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xBAF1F0", Offset = "0xBAF1F0", VA = "0xBAF1F0")]
		private void Update()
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xBAF318", Offset = "0xBAF318", VA = "0xBAF318")]
		public GlitterLight()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	[ExecuteInEditMode]
	public class TextureArrayConfig : ScriptableObject
	{
		[Token(Token = "0x20003D1")]
		public enum AllTextureChannel
		{
			[Token(Token = "0x400187F")]
			R,
			[Token(Token = "0x4001880")]
			G,
			[Token(Token = "0x4001881")]
			B,
			[Token(Token = "0x4001882")]
			A,
			[Token(Token = "0x4001883")]
			Custom
		}

		[Token(Token = "0x20003D2")]
		public enum TextureChannel
		{
			[Token(Token = "0x4001885")]
			R,
			[Token(Token = "0x4001886")]
			G,
			[Token(Token = "0x4001887")]
			B,
			[Token(Token = "0x4001888")]
			A
		}

		[Token(Token = "0x20003D3")]
		public enum Compression
		{
			[Token(Token = "0x400188A")]
			AutomaticCompressed,
			[Token(Token = "0x400188B")]
			ForceDXT,
			[Token(Token = "0x400188C")]
			ForcePVR,
			[Token(Token = "0x400188D")]
			ForceETC2,
			[Token(Token = "0x400188E")]
			ForceASTC,
			[Token(Token = "0x400188F")]
			ForceCrunch,
			[Token(Token = "0x4001890")]
			Uncompressed
		}

		[Token(Token = "0x20003D4")]
		public enum TextureSize
		{
			[Token(Token = "0x4001892")]
			k4096 = 4096,
			[Token(Token = "0x4001893")]
			k2048 = 2048,
			[Token(Token = "0x4001894")]
			k1024 = 1024,
			[Token(Token = "0x4001895")]
			k512 = 512,
			[Token(Token = "0x4001896")]
			k256 = 256,
			[Token(Token = "0x4001897")]
			k128 = 128,
			[Token(Token = "0x4001898")]
			k64 = 64,
			[Token(Token = "0x4001899")]
			k32 = 32
		}

		[Serializable]
		[Token(Token = "0x20003D5")]
		public class TextureArraySettings
		{
			[Token(Token = "0x400189A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TextureSize textureSize;

			[Token(Token = "0x400189B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Compression compression;

			[Token(Token = "0x400189C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FilterMode filterMode;

			[Token(Token = "0x400189D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int Aniso;

			[Token(Token = "0x6001632")]
			[Address(RVA = "0xBAF724", Offset = "0xBAF724", VA = "0xBAF724")]
			public TextureArraySettings(TextureSize s, Compression c, FilterMode f, int a = 1)
			{
			}
		}

		[Token(Token = "0x20003D6")]
		public enum PBRWorkflow
		{
			[Token(Token = "0x400189F")]
			Metallic,
			[Token(Token = "0x40018A0")]
			Specular
		}

		[Token(Token = "0x20003D7")]
		public enum PackingMode
		{
			[Token(Token = "0x40018A2")]
			Fastest,
			[Token(Token = "0x40018A3")]
			Quality
		}

		[Token(Token = "0x20003D8")]
		public enum SourceTextureSize
		{
			[Token(Token = "0x40018A5")]
			Unchanged = 0,
			[Token(Token = "0x40018A6")]
			k32 = 0x20,
			[Token(Token = "0x40018A7")]
			k256 = 0x100
		}

		[Token(Token = "0x20003D9")]
		public enum TextureMode
		{
			[Token(Token = "0x40018A9")]
			Basic,
			[Token(Token = "0x40018AA")]
			PBR
		}

		[Token(Token = "0x20003DA")]
		public enum ClusterMode
		{
			[Token(Token = "0x40018AC")]
			None,
			[Token(Token = "0x40018AD")]
			TwoVariations,
			[Token(Token = "0x40018AE")]
			ThreeVariations
		}

		[Serializable]
		[Token(Token = "0x20003DB")]
		public class TextureArrayGroup
		{
			[Token(Token = "0x40018AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TextureArraySettings diffuseSettings;

			[Token(Token = "0x40018B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TextureArraySettings normalSettings;

			[Token(Token = "0x40018B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextureArraySettings smoothSettings;

			[Token(Token = "0x40018B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TextureArraySettings antiTileSettings;

			[Token(Token = "0x40018B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public TextureArraySettings emissiveSettings;

			[Token(Token = "0x40018B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TextureArraySettings specularSettings;

			[Token(Token = "0x40018B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TextureArraySettings traxDiffuseSettings;

			[Token(Token = "0x40018B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public TextureArraySettings traxNormalSettings;

			[Token(Token = "0x40018B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public TextureArraySettings decalSplatSettings;

			[Token(Token = "0x6001633")]
			[Address(RVA = "0xBAF4BC", Offset = "0xBAF4BC", VA = "0xBAF4BC")]
			public TextureArrayGroup()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DC")]
		public class PlatformTextureOverride
		{
			[Token(Token = "0x40018B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TextureArrayGroup settings;

			[Token(Token = "0x6001634")]
			[Address(RVA = "0xBAF76C", Offset = "0xBAF76C", VA = "0xBAF76C")]
			public PlatformTextureOverride()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DD")]
		public class TextureEntry
		{
			[Token(Token = "0x40018B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D diffuse;

			[Token(Token = "0x40018BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Texture2D height;

			[Token(Token = "0x40018BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextureChannel heightChannel;

			[Token(Token = "0x40018BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Texture2D normal;

			[Token(Token = "0x40018BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Texture2D smoothness;

			[Token(Token = "0x40018BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TextureChannel smoothnessChannel;

			[Token(Token = "0x40018BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool isRoughness;

			[Token(Token = "0x40018C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Texture2D ao;

			[Token(Token = "0x40018C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public TextureChannel aoChannel;

			[Token(Token = "0x40018C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Texture2D emis;

			[Token(Token = "0x40018C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Texture2D metal;

			[Token(Token = "0x40018C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public TextureChannel metalChannel;

			[Token(Token = "0x40018C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Texture2D specular;

			[Token(Token = "0x40018C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Texture2D noiseNormal;

			[Token(Token = "0x40018C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Texture2D detailNoise;

			[Token(Token = "0x40018C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public TextureChannel detailChannel;

			[Token(Token = "0x40018C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Texture2D distanceNoise;

			[Token(Token = "0x40018CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public TextureChannel distanceChannel;

			[Token(Token = "0x40018CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Texture2D traxDiffuse;

			[Token(Token = "0x40018CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Texture2D traxHeight;

			[Token(Token = "0x40018CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public TextureChannel traxHeightChannel;

			[Token(Token = "0x40018CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Texture2D traxNormal;

			[Token(Token = "0x40018CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public Texture2D traxSmoothness;

			[Token(Token = "0x40018D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public TextureChannel traxSmoothnessChannel;

			[Token(Token = "0x40018D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			public bool traxIsRoughness;

			[Token(Token = "0x40018D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public Texture2D traxAO;

			[Token(Token = "0x40018D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public TextureChannel traxAOChannel;

			[Token(Token = "0x40018D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public Texture2D splat;

			[Token(Token = "0x6001635")]
			[Address(RVA = "0xBAF7DC", Offset = "0xBAF7DC", VA = "0xBAF7DC")]
			public TextureEntry()
			{
			}
		}

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool diffuseIsLinear;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool antiTileArray;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool emisMetalArray;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool traxArray;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextureMode textureMode;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ClusterMode clusterMode;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PackingMode packingMode;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PBRWorkflow pbrWorkflow;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int hash;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2DArray splatArray;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture2DArray diffuseArray;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2DArray normalSAOArray;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2DArray smoothAOArray;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture2DArray specularArray;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2DArray diffuseArray2;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2DArray normalSAOArray2;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2DArray smoothAOArray2;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2DArray specularArray2;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture2DArray diffuseArray3;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2DArray normalSAOArray3;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture2DArray smoothAOArray3;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2DArray specularArray3;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2DArray emisArray;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2DArray emisArray2;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture2DArray emisArray3;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextureArrayGroup defaultTextureSettings;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<PlatformTextureOverride> platformOverrides;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SourceTextureSize sourceTextureSize;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public AllTextureChannel allTextureChannelHeight;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AllTextureChannel allTextureChannelSmoothness;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public AllTextureChannel allTextureChannelAO;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<TextureEntry> sourceTextures;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<TextureEntry> sourceTextures2;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<TextureEntry> sourceTextures3;

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xBAF320", Offset = "0xBAF320", VA = "0xBAF320")]
		public bool IsScatter()
		{
			return default(bool);
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xBAF328", Offset = "0xBAF328", VA = "0xBAF328")]
		public bool IsDecal()
		{
			return default(bool);
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xBAF330", Offset = "0xBAF330", VA = "0xBAF330")]
		public bool IsDecalSplat()
		{
			return default(bool);
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xBAF338", Offset = "0xBAF338", VA = "0xBAF338")]
		public TextureArrayConfig()
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x20003DE")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x20003DF")]
		public enum Mode
		{
			[Token(Token = "0x40018DB")]
			Trigger,
			[Token(Token = "0x40018DC")]
			Replace,
			[Token(Token = "0x40018DD")]
			Activate,
			[Token(Token = "0x40018DE")]
			Enable,
			[Token(Token = "0x40018DF")]
			Animate,
			[Token(Token = "0x40018E0")]
			Deactivate
		}

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xBAF80C", Offset = "0xBAF80C", VA = "0xBAF80C")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xBAFC48", Offset = "0xBAFC48", VA = "0xBAFC48")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xBAFC4C", Offset = "0xBAFC4C", VA = "0xBAFC4C")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003E1")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x40018E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x40018E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x600163B")]
			[Address(RVA = "0xBC1AB8", Offset = "0xBC1AB8", VA = "0xBC1AB8")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003E2")]
		public class ReplacementList
		{
			[Token(Token = "0x40018E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x600163C")]
			[Address(RVA = "0xBC1AC0", Offset = "0xBC1AC0", VA = "0xBC1AC0")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xBAFC64", Offset = "0xBAFC64", VA = "0xBAFC64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xBB07A0", Offset = "0xBB07A0", VA = "0xBB07A0")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003E4")]
		public class Vector3andSpace
		{
			[Token(Token = "0x40018E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x40018EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x6001640")]
			[Address(RVA = "0xBC1C0C", Offset = "0xBC1C0C", VA = "0xBC1C0C")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xBC1B24", Offset = "0xBC1B24", VA = "0xBC1B24")]
		private void Start()
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xBC1B40", Offset = "0xBC1B40", VA = "0xBC1B40")]
		private void Update()
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xBC1C04", Offset = "0xBC1C04", VA = "0xBC1C04")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x40018EB")]
		private const float k_Spring = 50f;

		[Token(Token = "0x40018EC")]
		private const float k_Damper = 5f;

		[Token(Token = "0x40018ED")]
		private const float k_Drag = 10f;

		[Token(Token = "0x40018EE")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x40018EF")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x40018F0")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xBC1C1C", Offset = "0xBC1C1C", VA = "0xBC1C1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xBC2074", Offset = "0xBC2074", VA = "0xBC2074")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xBC1FC8", Offset = "0xBC1FC8", VA = "0xBC1FC8")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xBC2120", Offset = "0xBC2120", VA = "0xBC2120")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xBC23BC", Offset = "0xBC23BC", VA = "0xBC23BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xBC23E4", Offset = "0xBC23E4", VA = "0xBC23E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xBC2608", Offset = "0xBC2608", VA = "0xBC2608")]
		public DynamicShadowSettings()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xBC263C", Offset = "0xBC263C", VA = "0xBC263C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xBC2698", Offset = "0xBC2698", VA = "0xBC2698")]
		public FollowTarget()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	[RequireComponent(typeof(Text))]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4001906")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x400190A")]
		private const string display = "{0} FPS";

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_Text;

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xBC26B0", Offset = "0xBC26B0", VA = "0xBC26B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xBC271C", Offset = "0xBC271C", VA = "0xBC271C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xBC2810", Offset = "0xBC2810", VA = "0xBC2810")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xBC2818", Offset = "0xBC2818", VA = "0xBC2818")]
		private void Start()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xBC2938", Offset = "0xBC2938", VA = "0xBC2938")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xBC2958", Offset = "0xBC2958", VA = "0xBC2958")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xBC2A04", Offset = "0xBC2A04", VA = "0xBC2A04")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xBC2CEC", Offset = "0xBC2CEC", VA = "0xBC2CEC")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xBC2D88", Offset = "0xBC2D88", VA = "0xBC2D88")]
		public void Stop()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xBC2D94", Offset = "0xBC2D94", VA = "0xBC2D94")]
		public ParticleSystemDestroyer()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x4001922")]
			Standalone,
			[Token(Token = "0x4001923")]
			Mobile
		}

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xBC3134", Offset = "0xBC3134", VA = "0xBC3134")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xBC3138", Offset = "0xBC3138", VA = "0xBC3138")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xBC3148", Offset = "0xBC3148", VA = "0xBC3148")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xBC3534", Offset = "0xBC3534", VA = "0xBC3534")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	public class SimpleActivatorMenu : MonoBehaviour
	{
		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text camSwitchButton;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] objects;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_CurrentActiveObject;

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xBC35D0", Offset = "0xBC35D0", VA = "0xBC35D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xBC3628", Offset = "0xBC3628", VA = "0xBC3628")]
		public void NextCamera()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xBC36E8", Offset = "0xBC36E8", VA = "0xBC36E8")]
		public SimpleActivatorMenu()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xBC36F0", Offset = "0xBC36F0", VA = "0xBC36F0")]
		private void Start()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xBC3720", Offset = "0xBC3720", VA = "0xBC3720")]
		private void Update()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xBC3B14", Offset = "0xBC3B14", VA = "0xBC3B14")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xBC3B34", Offset = "0xBC3B34", VA = "0xBC3B34")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xBC3E68", Offset = "0xBC3E68", VA = "0xBC3E68")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x20003F4")]
		public enum Action
		{
			[Token(Token = "0x4001938")]
			Activate,
			[Token(Token = "0x4001939")]
			Deactivate,
			[Token(Token = "0x400193A")]
			Destroy,
			[Token(Token = "0x400193B")]
			ReloadLevel,
			[Token(Token = "0x400193C")]
			Call
		}

		[Serializable]
		[Token(Token = "0x20003F5")]
		public class Entry
		{
			[Token(Token = "0x400193D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x400193E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x400193F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x6001677")]
			[Address(RVA = "0xBC41E4", Offset = "0xBC41E4", VA = "0xBC41E4")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003F6")]
		public class Entries
		{
			[Token(Token = "0x4001940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x6001678")]
			[Address(RVA = "0xBC41DC", Offset = "0xBC41DC", VA = "0xBC41DC")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xBC3E7C", Offset = "0xBC3E7C", VA = "0xBC3E7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xBC3F94", Offset = "0xBC3F94", VA = "0xBC3F94")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xBC4008", Offset = "0xBC4008", VA = "0xBC4008")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xBC407C", Offset = "0xBC407C", VA = "0xBC407C")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xBC4168", Offset = "0xBC4168", VA = "0xBC4168")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xBC4594", Offset = "0xBC4594", VA = "0xBC4594")]
		private void Awake()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xBC45E4", Offset = "0xBC45E4", VA = "0xBC45E4")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xBC4674", Offset = "0xBC4674", VA = "0xBC4674")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003FC")]
		public class WaypointList
		{
			[Token(Token = "0x400195C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x400195D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x600169A")]
			[Address(RVA = "0xBC5194", Offset = "0xBC5194", VA = "0xBC5194")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x20003FD")]
		public struct RoutePoint
		{
			[Token(Token = "0x400195E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x400195F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x600169B")]
			[Address(RVA = "0xBC4D70", Offset = "0xBC4D70", VA = "0xBC4D70")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x1700032E")]
		public float Length
		{
			[Token(Token = "0x600168E")]
			[Address(RVA = "0xBC4684", Offset = "0xBC4684", VA = "0xBC4684")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600168F")]
			[Address(RVA = "0xBC468C", Offset = "0xBC468C", VA = "0xBC468C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700032F")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x6001690")]
			[Address(RVA = "0xBC4694", Offset = "0xBC4694", VA = "0xBC4694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xBC46B0", Offset = "0xBC46B0", VA = "0xBC46B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xBC49E0", Offset = "0xBC49E0", VA = "0xBC49E0")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xBC4B10", Offset = "0xBC4B10", VA = "0xBC4B10")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xBC4D80", Offset = "0xBC4D80", VA = "0xBC4D80")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xBC4700", Offset = "0xBC4700", VA = "0xBC4700")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xBC4E8C", Offset = "0xBC4E8C", VA = "0xBC4E8C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xBC510C", Offset = "0xBC510C", VA = "0xBC510C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xBC4E94", Offset = "0xBC4E94", VA = "0xBC4E94")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xBC5114", Offset = "0xBC5114", VA = "0xBC5114")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x20003FF")]
		public enum ProgressStyle
		{
			[Token(Token = "0x4001970")]
			SmoothAlongRoute,
			[Token(Token = "0x4001971")]
			PointToPoint
		}

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x17000330")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x600169C")]
			[Address(RVA = "0xBC51F8", Offset = "0xBC51F8", VA = "0xBC51F8")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x600169D")]
			[Address(RVA = "0xBC520C", Offset = "0xBC520C", VA = "0xBC520C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000331")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x600169E")]
			[Address(RVA = "0xBC5220", Offset = "0xBC5220", VA = "0xBC5220")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x600169F")]
			[Address(RVA = "0xBC5234", Offset = "0xBC5234", VA = "0xBC5234")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000332")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x60016A0")]
			[Address(RVA = "0xBC5248", Offset = "0xBC5248", VA = "0xBC5248")]
			[CompilerGenerated]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60016A1")]
			[Address(RVA = "0xBC525C", Offset = "0xBC525C", VA = "0xBC525C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xBC5270", Offset = "0xBC5270", VA = "0xBC5270")]
		private void Start()
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xBC536C", Offset = "0xBC536C", VA = "0xBC536C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xBC5438", Offset = "0xBC5438", VA = "0xBC5438")]
		private void Update()
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xBC5910", Offset = "0xBC5910", VA = "0xBC5910")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xBC5A6C", Offset = "0xBC5A6C", VA = "0xBC5A6C")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.Effects
{
	[Token(Token = "0x2000400")]
	[RequireComponent(typeof(SphereCollider))]
	public class AfterburnerPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float effectAngle;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float effectWidth;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float effectDistance;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float force;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider[] m_Cols;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SphereCollider m_Sphere;

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xBC5A88", Offset = "0xBC5A88", VA = "0xBC5A88")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xBC5B60", Offset = "0xBC5B60", VA = "0xBC5B60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xBC60CC", Offset = "0xBC60CC", VA = "0xBC60CC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xBC661C", Offset = "0xBC661C", VA = "0xBC661C")]
		public AfterburnerPhysicsForce()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class ExplosionFireAndDebris : MonoBehaviour
	{
		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] debrisPrefabs;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform firePrefab;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numDebrisPieces;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int numFires;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xBC6630", Offset = "0xBC6630", VA = "0xBC6630")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xBC66CC", Offset = "0xBC66CC", VA = "0xBC66CC")]
		private void AddFire(Transform t, Vector3 pos, Vector3 normal)
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xBC6818", Offset = "0xBC6818", VA = "0xBC6818")]
		public ExplosionFireAndDebris()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class ExplosionPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float explosionForce;

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xBC6DA0", Offset = "0xBC6DA0", VA = "0xBC6DA0")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xBC6E3C", Offset = "0xBC6E3C", VA = "0xBC6E3C")]
		public ExplosionPhysicsForce()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform explosionPrefab;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float detonationImpactVelocity;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sizeMultiplier;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool reset;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float resetTimeDelay;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_Exploded;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObjectResetter m_ObjectResetter;

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xBC7284", Offset = "0xBC7284", VA = "0xBC7284")]
		private void Start()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xBC72DC", Offset = "0xBC72DC", VA = "0xBC72DC")]
		private IEnumerator OnCollisionEnter(Collision col)
		{
			return null;
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xBC7394", Offset = "0xBC7394", VA = "0xBC7394")]
		public void Reset()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xBC739C", Offset = "0xBC739C", VA = "0xBC739C")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class ExtinguishableParticleSystem : MonoBehaviour
	{
		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem[] m_Systems;

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xBC7788", Offset = "0xBC7788", VA = "0xBC7788")]
		private void Start()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xBC77E0", Offset = "0xBC77E0", VA = "0xBC77E0")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xBC7858", Offset = "0xBC7858", VA = "0xBC7858")]
		public ExtinguishableParticleSystem()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class FireLight : MonoBehaviour
	{
		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Rnd;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_Burning;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light m_Light;

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xBC7868", Offset = "0xBC7868", VA = "0xBC7868")]
		private void Start()
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xBC78D8", Offset = "0xBC78D8", VA = "0xBC78D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xBC7AC0", Offset = "0xBC7AC0", VA = "0xBC7AC0")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xBC7AE8", Offset = "0xBC7AE8", VA = "0xBC7AE8")]
		public FireLight()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class Hose : MonoBehaviour
	{
		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxPower;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minPower;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float changeSpeed;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem[] hoseWaterSystems;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer systemRenderer;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_Power;

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xBC7AF8", Offset = "0xBC7AF8", VA = "0xBC7AF8")]
		private void Update()
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xBC7C78", Offset = "0xBC7C78", VA = "0xBC7C78")]
		public Hose()
		{
		}
	}
	[Token(Token = "0x200040A")]
	public class ParticleSystemMultiplier : MonoBehaviour
	{
		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xBC7C94", Offset = "0xBC7C94", VA = "0xBC7C94")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xBC7DD4", Offset = "0xBC7DD4", VA = "0xBC7DD4")]
		public ParticleSystemMultiplier()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class SmokeParticles : MonoBehaviour
	{
		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] extinguishSounds;

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xBC7DE4", Offset = "0xBC7DE4", VA = "0xBC7DE4")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xBC7E94", Offset = "0xBC7E94", VA = "0xBC7E94")]
		public SmokeParticles()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public class WaterHoseParticles : MonoBehaviour
	{
		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float lastSoundTime;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ParticleCollisionEvent> m_CollisionEvents;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem m_ParticleSystem;

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xBC7E9C", Offset = "0xBC7E9C", VA = "0xBC7E9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xBC7EF4", Offset = "0xBC7EF4", VA = "0xBC7EF4")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xBC8114", Offset = "0xBC8114", VA = "0xBC8114")]
		public WaterHoseParticles()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x200040D")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xBC81A4", Offset = "0xBC81A4", VA = "0xBC81A4")]
		private void Update()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xBC83A0", Offset = "0xBC83A0", VA = "0xBC83A0")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x200040E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xBC83A8", Offset = "0xBC83A8", VA = "0xBC83A8")]
		public void Awake()
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xBC83C8", Offset = "0xBC83C8", VA = "0xBC83C8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xBC842C", Offset = "0xBC842C", VA = "0xBC842C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xBC8490", Offset = "0xBC8490", VA = "0xBC8490")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x200040F")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xBC8498", Offset = "0xBC8498", VA = "0xBC8498")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x2000410")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(WaterBase))]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xBC84A0", Offset = "0xBC84A0", VA = "0xBC84A0")]
		public void Start()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xBC859C", Offset = "0xBC859C", VA = "0xBC859C")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xBC88AC", Offset = "0xBC88AC", VA = "0xBC88AC")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xBC8960", Offset = "0xBC8960", VA = "0xBC8960")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xBC8AB8", Offset = "0xBC8AB8", VA = "0xBC8AB8")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xBC932C", Offset = "0xBC932C", VA = "0xBC932C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xBC9384", Offset = "0xBC9384", VA = "0xBC9384")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xBC9464", Offset = "0xBC9464", VA = "0xBC9464")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xBC94C8", Offset = "0xBC94C8", VA = "0xBC94C8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xBC8C74", Offset = "0xBC8C74", VA = "0xBC8C74")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xBC952C", Offset = "0xBC952C", VA = "0xBC952C")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xBC97E0", Offset = "0xBC97E0", VA = "0xBC97E0")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xBC958C", Offset = "0xBC958C", VA = "0xBC958C")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xBC994C", Offset = "0xBC994C", VA = "0xBC994C")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xBC9630", Offset = "0xBC9630", VA = "0xBC9630")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xBC996C", Offset = "0xBC996C", VA = "0xBC996C")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x2000411")]
	[RequireComponent(typeof(WaterBase))]
	[ExecuteInEditMode]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xBC99DC", Offset = "0xBC99DC", VA = "0xBC99DC")]
		public void Start()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xBC9B04", Offset = "0xBC9B04", VA = "0xBC9B04")]
		public void Update()
		{
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0xBC9D1C", Offset = "0xBC9D1C", VA = "0xBC9D1C")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x2000412")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x2000413")]
		public enum WaterMode
		{
			[Token(Token = "0x40019BA")]
			Simple,
			[Token(Token = "0x40019BB")]
			Reflective,
			[Token(Token = "0x40019BC")]
			Refractive
		}

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xBC9D24", Offset = "0xBC9D24", VA = "0xBC9D24")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xBCB658", Offset = "0xBCB658", VA = "0xBCB658")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xBCB9C0", Offset = "0xBCB9C0", VA = "0xBCB9C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xBCB1D8", Offset = "0xBCB1D8", VA = "0xBCB1D8")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xBCA86C", Offset = "0xBCA86C", VA = "0xBCA86C")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xBCA858", Offset = "0xBCA858", VA = "0xBCA858")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xBCA6F8", Offset = "0xBCA6F8", VA = "0xBCA6F8")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xBCB4A8", Offset = "0xBCB4A8", VA = "0xBCB4A8")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xBCB414", Offset = "0xBCB414", VA = "0xBCB414")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xBCBC6C", Offset = "0xBCBC6C", VA = "0xBCBC6C")]
		public Water()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public enum WaterQuality
	{
		[Token(Token = "0x40019BE")]
		High = 2,
		[Token(Token = "0x40019BF")]
		Medium = 1,
		[Token(Token = "0x40019C0")]
		Low = 0
	}
	[Token(Token = "0x2000415")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xBCBD6C", Offset = "0xBCBD6C", VA = "0xBCBD6C")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xBCBEE4", Offset = "0xBCBEE4", VA = "0xBCBEE4")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xBCBF88", Offset = "0xBCBF88", VA = "0xBCBF88")]
		public void Update()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xBCBFFC", Offset = "0xBCBFFC", VA = "0xBCBFFC")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x2000416")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xBCC014", Offset = "0xBCC014", VA = "0xBCC014")]
		public void Start()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xBCC018", Offset = "0xBCC018", VA = "0xBCC018")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xBCC1D8", Offset = "0xBCC1D8", VA = "0xBCC1D8")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xBCC2BC", Offset = "0xBCC2BC", VA = "0xBCC2BC")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000417")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xBCC2C4", Offset = "0xBCC2C4", VA = "0xBCC2C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xBCC54C", Offset = "0xBCC54C", VA = "0xBCC54C")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xBCC6D0", Offset = "0xBCC6D0", VA = "0xBCC6D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xBCC740", Offset = "0xBCC740", VA = "0xBCC740", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xBCC80C", Offset = "0xBCC80C", VA = "0xBCC80C", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xBCC870", Offset = "0xBCC870", VA = "0xBCC870")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xBCC8DC", Offset = "0xBCC8DC", VA = "0xBCC8DC")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xBCC9A4", Offset = "0xBCC9A4", VA = "0xBCC9A4")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xBCCA6C", Offset = "0xBCCA6C", VA = "0xBCCA6C")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xBCCB34", Offset = "0xBCCB34", VA = "0xBCCB34")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xBCCBFC", Offset = "0xBCCBFC", VA = "0xBCCBFC")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xBCCCC4", Offset = "0xBCCCC4", VA = "0xBCCCC4")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x200041A")]
		public class VirtualAxis
		{
			[Token(Token = "0x40019D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x17000339")]
			public string name
			{
				[Token(Token = "0x6001720")]
				[Address(RVA = "0xBCD648", Offset = "0xBCD648", VA = "0xBCD648")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001721")]
				[Address(RVA = "0xBCD650", Offset = "0xBCD650", VA = "0xBCD650")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700033A")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6001722")]
				[Address(RVA = "0xBCD658", Offset = "0xBCD658", VA = "0xBCD658")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001723")]
				[Address(RVA = "0xBCD660", Offset = "0xBCD660", VA = "0xBCD660")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700033B")]
			public float GetValue
			{
				[Token(Token = "0x6001728")]
				[Address(RVA = "0xBCD6B4", Offset = "0xBCD6B4", VA = "0xBCD6B4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001724")]
			[Address(RVA = "0xBCC440", Offset = "0xBCC440", VA = "0xBCC440")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x6001725")]
			[Address(RVA = "0xBCD66C", Offset = "0xBCD66C", VA = "0xBCD66C")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6001726")]
			[Address(RVA = "0xBCC6E8", Offset = "0xBCC6E8", VA = "0xBCC6E8")]
			public void Remove()
			{
			}

			[Token(Token = "0x6001727")]
			[Address(RVA = "0xBCD6AC", Offset = "0xBCD6AC", VA = "0xBCD6AC")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x200041B")]
		public class VirtualButton
		{
			[Token(Token = "0x40019D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x40019D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x40019D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x1700033C")]
			public string name
			{
				[Token(Token = "0x6001729")]
				[Address(RVA = "0xBCD6BC", Offset = "0xBCD6BC", VA = "0xBCD6BC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600172A")]
				[Address(RVA = "0xBCD6C4", Offset = "0xBCD6C4", VA = "0xBCD6C4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700033D")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600172B")]
				[Address(RVA = "0xBCD6CC", Offset = "0xBCD6CC", VA = "0xBCD6CC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600172C")]
				[Address(RVA = "0xBCD6D4", Offset = "0xBCD6D4", VA = "0xBCD6D4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700033E")]
			public bool GetButtonDown
			{
				[Token(Token = "0x6001731")]
				[Address(RVA = "0xBCD7B8", Offset = "0xBCD7B8", VA = "0xBCD7B8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600172D")]
			[Address(RVA = "0xBCD6E0", Offset = "0xBCD6E0", VA = "0xBCD6E0")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x600172E")]
			[Address(RVA = "0xBCD724", Offset = "0xBCD724", VA = "0xBCD724")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x600172F")]
			[Address(RVA = "0xBCD76C", Offset = "0xBCD76C", VA = "0xBCD76C")]
			public void Pressed()
			{
			}

			[Token(Token = "0x6001730")]
			[Address(RVA = "0xBCD798", Offset = "0xBCD798", VA = "0xBCD798")]
			public void Released()
			{
			}
		}

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xBCCCCC", Offset = "0xBCCCCC", VA = "0xBCCCCC")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xBCC3D8", Offset = "0xBCC3D8", VA = "0xBCC3D8")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xBCC47C", Offset = "0xBCC47C", VA = "0xBCC47C")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xBCCF94", Offset = "0xBCCF94", VA = "0xBCCF94")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xBCD194", Offset = "0xBCD194", VA = "0xBCD194")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xBCC4E4", Offset = "0xBCC4E4", VA = "0xBCC4E4")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xBC3ABC", Offset = "0xBC3ABC", VA = "0xBC3ABC")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xBCD370", Offset = "0xBCD370", VA = "0xBCD370")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xBCD3F0", Offset = "0xBCD3F0", VA = "0xBCD3F0")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xBCC934", Offset = "0xBCC934", VA = "0xBCC934")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xBCC9FC", Offset = "0xBCC9FC", VA = "0xBCC9FC")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xBCCAC4", Offset = "0xBCCAC4", VA = "0xBCCAC4")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xBCCC54", Offset = "0xBCCC54", VA = "0xBCCC54")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xBCCB8C", Offset = "0xBCCB8C", VA = "0xBCCB8C")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xBCD460", Offset = "0xBCD460", VA = "0xBCD460")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xBCD4E0", Offset = "0xBCD4E0", VA = "0xBCD4E0")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xBCD558", Offset = "0xBCD558", VA = "0xBCD558")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xBCD5D0", Offset = "0xBCD5D0", VA = "0xBCD5D0")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xBCD7DC", Offset = "0xBCD7DC", VA = "0xBCD7DC")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xBCD84C", Offset = "0xBCD84C", VA = "0xBCD84C")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x200041E")]
		public enum AxisOption
		{
			[Token(Token = "0x40019E3")]
			Both,
			[Token(Token = "0x40019E4")]
			OnlyHorizontal,
			[Token(Token = "0x40019E5")]
			OnlyVertical
		}

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xBCD854", Offset = "0xBCD854", VA = "0xBCD854")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xBCD9B8", Offset = "0xBCD9B8", VA = "0xBCD9B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xBCD9E8", Offset = "0xBCD9E8", VA = "0xBCD9E8")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xBCD858", Offset = "0xBCD858", VA = "0xBCD858")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xBCDA48", Offset = "0xBCDA48", VA = "0xBCDA48", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xBCDB94", Offset = "0xBCDB94", VA = "0xBCDB94", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xBCDBD0", Offset = "0xBCDBD0", VA = "0xBCDBD0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xBCDBD4", Offset = "0xBCDBD4", VA = "0xBCDBD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xBCDC14", Offset = "0xBCDC14", VA = "0xBCDC14")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x200041F")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x600173D")]
		[Address(RVA = "0xBCDCA0", Offset = "0xBCDCA0", VA = "0xBCDCA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xBCDCB0", Offset = "0xBCDCB0", VA = "0xBCDCB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xBCDCA8", Offset = "0xBCDCA8", VA = "0xBCDCA8")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xBCDDB8", Offset = "0xBCDDB8", VA = "0xBCDDB8")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xBCE0B0", Offset = "0xBCE0B0", VA = "0xBCE0B0")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x2000421")]
		public enum AxisOptions
		{
			[Token(Token = "0x40019EC")]
			ForwardAxis,
			[Token(Token = "0x40019ED")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x2000422")]
		public class AxisMapping
		{
			[Token(Token = "0x2000423")]
			public enum MappingType
			{
				[Token(Token = "0x40019F1")]
				NamedAxis,
				[Token(Token = "0x40019F2")]
				MousePositionX,
				[Token(Token = "0x40019F3")]
				MousePositionY,
				[Token(Token = "0x40019F4")]
				MousePositionZ
			}

			[Token(Token = "0x40019EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x40019EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x6001746")]
			[Address(RVA = "0xBCE40C", Offset = "0xBCE40C", VA = "0xBCE40C")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xBCE0B8", Offset = "0xBCE0B8", VA = "0xBCE0B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xBCE194", Offset = "0xBCE194", VA = "0xBCE194")]
		private void Update()
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xBCE3E4", Offset = "0xBCE3E4", VA = "0xBCE3E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xBCE3FC", Offset = "0xBCE3FC", VA = "0xBCE3FC")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x2000424")]
	[RequireComponent(typeof(Image))]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000425")]
		public enum AxisOption
		{
			[Token(Token = "0x4001A08")]
			Both,
			[Token(Token = "0x4001A09")]
			OnlyHorizontal,
			[Token(Token = "0x4001A0A")]
			OnlyVertical
		}

		[Token(Token = "0x2000426")]
		public enum ControlStyle
		{
			[Token(Token = "0x4001A0C")]
			Absolute,
			[Token(Token = "0x4001A0D")]
			Relative,
			[Token(Token = "0x4001A0E")]
			Swipe
		}

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xBCE414", Offset = "0xBCE414", VA = "0xBCE414")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xBCE578", Offset = "0xBCE578", VA = "0xBCE578")]
		private void Start()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xBCE418", Offset = "0xBCE418", VA = "0xBCE418")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xBCE600", Offset = "0xBCE600", VA = "0xBCE600")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xBCE700", Offset = "0xBCE700", VA = "0xBCE700", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xBCE738", Offset = "0xBCE738", VA = "0xBCE738")]
		private void Update()
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xBCE910", Offset = "0xBCE910", VA = "0xBCE910", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xBCE970", Offset = "0xBCE970", VA = "0xBCE970")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xBCEA30", Offset = "0xBCEA30", VA = "0xBCEA30")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x1700033F")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x6001750")]
			[Address(RVA = "0xBCEAC4", Offset = "0xBCEAC4", VA = "0xBCEAC4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001751")]
			[Address(RVA = "0xBCEAD0", Offset = "0xBCEAD0", VA = "0xBCEAD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xBCCDA4", Offset = "0xBCCDA4", VA = "0xBCCDA4")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xBCCDFC", Offset = "0xBCCDFC", VA = "0xBCCDFC")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xBCCFFC", Offset = "0xBCCFFC", VA = "0xBCCFFC")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xBCD24C", Offset = "0xBCD24C", VA = "0xBCD24C")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xBCD2DC", Offset = "0xBCD2DC", VA = "0xBCD2DC")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xBCD550", Offset = "0xBCD550", VA = "0xBCD550")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xBCD5C8", Offset = "0xBCD5C8", VA = "0xBCD5C8")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xBCD640", Offset = "0xBCD640", VA = "0xBCD640")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x600175A")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x600175B")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x600175C")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x600175D")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x600175E")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x600175F")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x6001760")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x6001761")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xBCEADC", Offset = "0xBCEADC", VA = "0xBCEADC")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x2000428")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x6001763")]
		[Address(RVA = "0xBCEC04", Offset = "0xBCEC04", VA = "0xBCEC04")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xBCECB4", Offset = "0xBCECB4", VA = "0xBCECB4")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xBCED5C", Offset = "0xBCED5C", VA = "0xBCED5C", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xBCEDF4", Offset = "0xBCEDF4", VA = "0xBCEDF4", Slot = "6")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xBCEEA8", Offset = "0xBCEEA8", VA = "0xBCEEA8", Slot = "7")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xBCEF50", Offset = "0xBCEF50", VA = "0xBCEF50", Slot = "8")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xBCEFEC", Offset = "0xBCEFEC", VA = "0xBCEFEC", Slot = "9")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xBCF088", Offset = "0xBCF088", VA = "0xBCF088", Slot = "10")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xBCF120", Offset = "0xBCF120", VA = "0xBCF120", Slot = "11")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xBCF1C4", Offset = "0xBCF1C4", VA = "0xBCF1C4", Slot = "5")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xBCCD9C", Offset = "0xBCCD9C", VA = "0xBCCD9C")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x600176E")]
		[Address(RVA = "0xBCF270", Offset = "0xBCF270", VA = "0xBCF270", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xBCF284", Offset = "0xBCF284", VA = "0xBCF284", Slot = "5")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xBCF290", Offset = "0xBCF290", VA = "0xBCF290", Slot = "6")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xBCF2E0", Offset = "0xBCF2E0", VA = "0xBCF2E0", Slot = "7")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xBCF330", Offset = "0xBCF330", VA = "0xBCF330", Slot = "8")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xBCF380", Offset = "0xBCF380", VA = "0xBCF380", Slot = "9")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xBCF3D0", Offset = "0xBCF3D0", VA = "0xBCF3D0", Slot = "10")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xBCF420", Offset = "0xBCF420", VA = "0xBCF420", Slot = "11")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xBCCDA0", Offset = "0xBCCDA0", VA = "0xBCCDA0")]
		public StandaloneInput()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x200042A")]
	public enum AAMode
	{
		[Token(Token = "0x4001A14")]
		FXAA2,
		[Token(Token = "0x4001A15")]
		FXAA3Console,
		[Token(Token = "0x4001A16")]
		FXAA1PresetA,
		[Token(Token = "0x4001A17")]
		FXAA1PresetB,
		[Token(Token = "0x4001A18")]
		NFAA,
		[Token(Token = "0x4001A19")]
		SSAA,
		[Token(Token = "0x4001A1A")]
		DLAA
	}
	[Token(Token = "0x200042B")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xBCF470", Offset = "0xBCF470", VA = "0xBCF470")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xBCF4D8", Offset = "0xBCF4D8", VA = "0xBCF4D8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xBCF648", Offset = "0xBCF648", VA = "0xBCF648")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xBCFB0C", Offset = "0xBCFB0C", VA = "0xBCFB0C")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x200042C")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x200042D")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001A50")]
			Ghosting,
			[Token(Token = "0x4001A51")]
			Anamorphic,
			[Token(Token = "0x4001A52")]
			Combined
		}

		[Token(Token = "0x200042E")]
		public enum TweakMode
		{
			[Token(Token = "0x4001A54")]
			Basic,
			[Token(Token = "0x4001A55")]
			Complex
		}

		[Token(Token = "0x200042F")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4001A57")]
			Auto,
			[Token(Token = "0x4001A58")]
			On,
			[Token(Token = "0x4001A59")]
			Off
		}

		[Token(Token = "0x2000430")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4001A5B")]
			Screen,
			[Token(Token = "0x4001A5C")]
			Add
		}

		[Token(Token = "0x2000431")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001A5E")]
			Cheap,
			[Token(Token = "0x4001A5F")]
			High
		}

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xBCFB30", Offset = "0xBCFB30", VA = "0xBCFB30", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xBCFC1C", Offset = "0xBCFC1C", VA = "0xBCFC1C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xBD0D8C", Offset = "0xBD0D8C", VA = "0xBD0D8C")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xBD0BF4", Offset = "0xBD0BF4", VA = "0xBD0BF4")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xBD0948", Offset = "0xBD0948", VA = "0xBD0948")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xBD0874", Offset = "0xBD0874", VA = "0xBD0874")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xBD0A08", Offset = "0xBD0A08", VA = "0xBD0A08")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xBD0E50", Offset = "0xBD0E50", VA = "0xBD0E50")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x2000432")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4001A61")]
		Ghosting,
		[Token(Token = "0x4001A62")]
		Anamorphic,
		[Token(Token = "0x4001A63")]
		Combined
	}
	[Token(Token = "0x2000433")]
	public enum TweakMode34
	{
		[Token(Token = "0x4001A65")]
		Basic,
		[Token(Token = "0x4001A66")]
		Complex
	}
	[Token(Token = "0x2000434")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x4001A68")]
		Auto,
		[Token(Token = "0x4001A69")]
		On,
		[Token(Token = "0x4001A6A")]
		Off
	}
	[Token(Token = "0x2000435")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4001A6C")]
		Screen,
		[Token(Token = "0x4001A6D")]
		Add
	}
	[Token(Token = "0x2000436")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xBD0ED8", Offset = "0xBD0ED8", VA = "0xBD0ED8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xBD1038", Offset = "0xBD1038", VA = "0xBD1038")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xBD1DF8", Offset = "0xBD1DF8", VA = "0xBD1DF8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xBD1C70", Offset = "0xBD1C70", VA = "0xBD1C70")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xBD1A18", Offset = "0xBD1A18", VA = "0xBD1A18")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xBD1B20", Offset = "0xBD1B20", VA = "0xBD1B20")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xBD1EA8", Offset = "0xBD1EA8", VA = "0xBD1EA8")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x2000437")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000438")]
		public enum Resolution
		{
			[Token(Token = "0x4001A99")]
			Low,
			[Token(Token = "0x4001A9A")]
			High
		}

		[Token(Token = "0x2000439")]
		public enum BlurType
		{
			[Token(Token = "0x4001A9C")]
			Standard,
			[Token(Token = "0x4001A9D")]
			Sgx
		}

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float threshold;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blurSize;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int blurIterations;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xBD1F1C", Offset = "0xBD1F1C", VA = "0xBD1F1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xBD1F90", Offset = "0xBD1F90", VA = "0xBD1F90")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xBD201C", Offset = "0xBD201C", VA = "0xBD201C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xBD238C", Offset = "0xBD238C", VA = "0xBD238C")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x200043A")]
	[ExecuteInEditMode]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blurSpread;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000340")]
		protected Material material
		{
			[Token(Token = "0x600178E")]
			[Address(RVA = "0xBD23B0", Offset = "0xBD23B0", VA = "0xBD23B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xBD24B8", Offset = "0xBD24B8", VA = "0xBD24B8")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xBD2564", Offset = "0xBD2564", VA = "0xBD2564")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xBD2614", Offset = "0xBD2614", VA = "0xBD2614")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xBD2724", Offset = "0xBD2724", VA = "0xBD2724")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xBD2820", Offset = "0xBD2820", VA = "0xBD2820")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xBD297C", Offset = "0xBD297C", VA = "0xBD297C")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x200043B")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x200043C")]
		public enum BlurType
		{
			[Token(Token = "0x4001AA9")]
			StandardGauss,
			[Token(Token = "0x4001AAA")]
			SgxGauss
		}

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int downsample;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float blurSize;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int blurIterations;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xBD2994", Offset = "0xBD2994", VA = "0xBD2994", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xBD2A08", Offset = "0xBD2A08", VA = "0xBD2A08")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xBD2A94", Offset = "0xBD2A94", VA = "0xBD2A94")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xBD2DBC", Offset = "0xBD2DBC", VA = "0xBD2DBC")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x200043D")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x200043E")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4001ACA")]
			CameraMotion,
			[Token(Token = "0x4001ACB")]
			LocalBlur,
			[Token(Token = "0x4001ACC")]
			Reconstruction,
			[Token(Token = "0x4001ACD")]
			ReconstructionDX11,
			[Token(Token = "0x4001ACE")]
			ReconstructionDisc
		}

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xBD2DD8", Offset = "0xBD2DD8", VA = "0xBD2DD8")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xBD2EDC", Offset = "0xBD2EDC", VA = "0xBD2EDC")]
		private new void Start()
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xBD3060", Offset = "0xBD3060", VA = "0xBD3060")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xBD3120", Offset = "0xBD3120", VA = "0xBD3120")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xBD3284", Offset = "0xBD3284", VA = "0xBD3284", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xBD3844", Offset = "0xBD3844", VA = "0xBD3844")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xBD2FC0", Offset = "0xBD2FC0", VA = "0xBD2FC0")]
		private void Remember()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xBD4FF4", Offset = "0xBD4FF4", VA = "0xBD4FF4")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xBD4F70", Offset = "0xBD4F70", VA = "0xBD4F70")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xBD4FE4", Offset = "0xBD4FE4", VA = "0xBD4FE4")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xBD5388", Offset = "0xBD5388", VA = "0xBD5388")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x200043F")]
	[ExecuteInEditMode]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000440")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4001AE8")]
			Simple,
			[Token(Token = "0x4001AE9")]
			Advanced
		}

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0xBD5548", Offset = "0xBD5548", VA = "0xBD5548")]
		private new void Start()
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xBD5578", Offset = "0xBD5578", VA = "0xBD5578", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xBD592C", Offset = "0xBD592C", VA = "0xBD592C")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xBD5C20", Offset = "0xBD5C20", VA = "0xBD5C20")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xBD5C24", Offset = "0xBD5C24", VA = "0xBD5C24")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xBD5F30", Offset = "0xBD5F30", VA = "0xBD5F30")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000441")]
	[ExecuteInEditMode]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xBD65C8", Offset = "0xBD65C8", VA = "0xBD65C8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xBD662C", Offset = "0xBD662C", VA = "0xBD662C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xBD66C8", Offset = "0xBD66C8", VA = "0xBD66C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xBD6758", Offset = "0xBD6758", VA = "0xBD6758")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xBD6954", Offset = "0xBD6954", VA = "0xBD6954")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xBD6A54", Offset = "0xBD6A54", VA = "0xBD6A54")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xBD6D9C", Offset = "0xBD6D9C", VA = "0xBD6D9C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xBD6F90", Offset = "0xBD6F90", VA = "0xBD6F90")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000442")]
	[ExecuteInEditMode]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xBD6FF4", Offset = "0xBD6FF4", VA = "0xBD6FF4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xBD717C", Offset = "0xBD717C", VA = "0xBD717C")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000443")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float threshold;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurSpread;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xBD718C", Offset = "0xBD718C", VA = "0xBD718C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xBD7218", Offset = "0xBD7218", VA = "0xBD7218")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xBD7544", Offset = "0xBD7544", VA = "0xBD7544")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x2000444")]
	[ExecuteInEditMode]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000341")]
		protected Material materialLum
		{
			[Token(Token = "0x60017B8")]
			[Address(RVA = "0xBD7568", Offset = "0xBD7568", VA = "0xBD7568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000342")]
		protected Material materialReduce
		{
			[Token(Token = "0x60017B9")]
			[Address(RVA = "0xBD763C", Offset = "0xBD763C", VA = "0xBD763C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000343")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60017BA")]
			[Address(RVA = "0xBD7710", Offset = "0xBD7710", VA = "0xBD7710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000344")]
		protected Material materialApply
		{
			[Token(Token = "0x60017BB")]
			[Address(RVA = "0xBD77E4", Offset = "0xBD77E4", VA = "0xBD77E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xBD78B8", Offset = "0xBD78B8", VA = "0xBD78B8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xBD793C", Offset = "0xBD793C", VA = "0xBD793C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xBD7A88", Offset = "0xBD7A88", VA = "0xBD7A88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xBD7C64", Offset = "0xBD7C64", VA = "0xBD7C64")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xBD7EA4", Offset = "0xBD7EA4", VA = "0xBD7EA4")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xBD805C", Offset = "0xBD805C", VA = "0xBD805C")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x2000445")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xBD80D8", Offset = "0xBD80D8", VA = "0xBD80D8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xBD8188", Offset = "0xBD8188", VA = "0xBD8188")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xBD8500", Offset = "0xBD8500", VA = "0xBD8500")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x2000446")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000447")]
		public enum BlurType
		{
			[Token(Token = "0x4001B26")]
			DiscBlur,
			[Token(Token = "0x4001B27")]
			DX11
		}

		[Token(Token = "0x2000448")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4001B29")]
			Low,
			[Token(Token = "0x4001B2A")]
			Medium,
			[Token(Token = "0x4001B2B")]
			High
		}

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera cachedCamera;

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xBD8528", Offset = "0xBD8528", VA = "0xBD8528", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xBD8718", Offset = "0xBD8718", VA = "0xBD8718")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xBD8798", Offset = "0xBD8798", VA = "0xBD8798")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xBD8890", Offset = "0xBD8890", VA = "0xBD8890")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xBD85D0", Offset = "0xBD85D0", VA = "0xBD85D0")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xBD88E8", Offset = "0xBD88E8", VA = "0xBD88E8")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xBD89D4", Offset = "0xBD89D4", VA = "0xBD89D4")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xBD8CA4", Offset = "0xBD8CA4", VA = "0xBD8CA4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xBD9FA4", Offset = "0xBD9FA4", VA = "0xBD9FA4")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000449")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x200044A")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4001B58")]
			OnlyBackground = 1,
			[Token(Token = "0x4001B59")]
			BackgroundAndForeground
		}

		[Token(Token = "0x200044B")]
		public enum DofResolution
		{
			[Token(Token = "0x4001B5B")]
			High = 2,
			[Token(Token = "0x4001B5C")]
			Medium,
			[Token(Token = "0x4001B5D")]
			Low
		}

		[Token(Token = "0x200044C")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4001B5F")]
			Low = 1,
			[Token(Token = "0x4001B60")]
			High = 2,
			[Token(Token = "0x4001B61")]
			VeryHigh = 4
		}

		[Token(Token = "0x200044D")]
		public enum BokehDestination
		{
			[Token(Token = "0x4001B63")]
			Background = 1,
			[Token(Token = "0x4001B64")]
			Foreground,
			[Token(Token = "0x4001B65")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xBDA008", Offset = "0xBDA008", VA = "0xBDA008")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xBDA108", Offset = "0xBDA108", VA = "0xBDA108", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xBDA230", Offset = "0xBDA230", VA = "0xBDA230")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xBDA398", Offset = "0xBDA398", VA = "0xBDA398")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xBDA418", Offset = "0xBDA418", VA = "0xBDA418")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xBDA504", Offset = "0xBDA504", VA = "0xBDA504")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xBDA528", Offset = "0xBDA528", VA = "0xBDA528")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xBDA54C", Offset = "0xBDA54C", VA = "0xBDA54C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xBDB2B8", Offset = "0xBDB2B8", VA = "0xBDB2B8")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xBDB868", Offset = "0xBDB868", VA = "0xBDB868")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xBDBBDC", Offset = "0xBDBBDC", VA = "0xBDBBDC")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xBDB190", Offset = "0xBDB190", VA = "0xBDB190")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xBDB498", Offset = "0xBDB498", VA = "0xBDB498")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xBDBA74", Offset = "0xBDBA74", VA = "0xBDBA74")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xBDADE0", Offset = "0xBDADE0", VA = "0xBDADE0")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xBDBFB4", Offset = "0xBDBFB4", VA = "0xBDBFB4")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x200044E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x200044F")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4001B72")]
			TriangleDepthNormals,
			[Token(Token = "0x4001B73")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4001B74")]
			SobelDepth,
			[Token(Token = "0x4001B75")]
			SobelDepthThin,
			[Token(Token = "0x4001B76")]
			TriangleLuminance
		}

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xBDC084", Offset = "0xBDC084", VA = "0xBDC084", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xBDC1BC", Offset = "0xBDC1BC", VA = "0xBDC1BC")]
		private new void Start()
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xBDC10C", Offset = "0xBDC10C", VA = "0xBDC10C")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xBDC1C8", Offset = "0xBDC1C8", VA = "0xBDC1C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xBDC1CC", Offset = "0xBDC1CC", VA = "0xBDC1CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xBDC3A0", Offset = "0xBDC3A0", VA = "0xBDC3A0")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000450")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strengthX;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float strengthY;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xBDC3DC", Offset = "0xBDC3DC", VA = "0xBDC3DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xBDC444", Offset = "0xBDC444", VA = "0xBDC444")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xBDC578", Offset = "0xBDC578", VA = "0xBDC578")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000451")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool distanceFog;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool excludeFarPixels;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool useRadialDistance;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool heightFog;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float height;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float heightDensity;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startDistance;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xBDC59C", Offset = "0xBDC59C", VA = "0xBDC59C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xBDC604", Offset = "0xBDC604", VA = "0xBDC604")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xBDCF3C", Offset = "0xBDCF3C", VA = "0xBDCF3C")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xBDD09C", Offset = "0xBDD09C", VA = "0xBDD09C")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x2000452")]
	[ExecuteInEditMode]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rampOffset;

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xBDD0C8", Offset = "0xBDD0C8", VA = "0xBDD0C8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xBDD1AC", Offset = "0xBDD1AC", VA = "0xBDD1AC")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x2000453")]
	[RequireComponent(typeof(Camera))]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000345")]
		protected Material material
		{
			[Token(Token = "0x60017EF")]
			[Address(RVA = "0xBD70A8", Offset = "0xBD70A8", VA = "0xBD70A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xBDD1B4", Offset = "0xBDD1B4", VA = "0xBDD1B4", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xBDD254", Offset = "0xBDD254", VA = "0xBDD254", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xBD7184", Offset = "0xBD7184", VA = "0xBD7184")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public class ImageEffects
	{
		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xBDD2E0", Offset = "0xBDD2E0", VA = "0xBDD2E0")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}
	}
	[Token(Token = "0x2000455")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurAmount;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xBDD550", Offset = "0xBDD550", VA = "0xBDD550", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xBDD584", Offset = "0xBDD584", VA = "0xBDD584", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xBDD5E8", Offset = "0xBDD5E8", VA = "0xBDD5E8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xBDD950", Offset = "0xBDD950", VA = "0xBDD950")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000456")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xBDD964", Offset = "0xBDD964", VA = "0xBDD964", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xBDDA00", Offset = "0xBDDA00", VA = "0xBDDA00")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xBDE200", Offset = "0xBDE200", VA = "0xBDE200")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xBDE540", Offset = "0xBDE540", VA = "0xBDE540")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000457")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grainIntensityMin;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float grainIntensityMax;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grainSize;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scratchIntensityMin;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scratchIntensityMax;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scratchFPS;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scratchJitter;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000346")]
		protected Material material
		{
			[Token(Token = "0x60017FD")]
			[Address(RVA = "0xBDE708", Offset = "0xBDE708", VA = "0xBDE708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xBDE5DC", Offset = "0xBDE5DC", VA = "0xBDE5DC")]
		protected void Start()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xBDE870", Offset = "0xBDE870", VA = "0xBDE870")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xBDE940", Offset = "0xBDE940", VA = "0xBDE940")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xBDE9E4", Offset = "0xBDE9E4", VA = "0xBDE9E4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xBDED0C", Offset = "0xBDED0C", VA = "0xBDED0C")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000458")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xBD3380", Offset = "0xBD3380", VA = "0xBD3380")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xBDED60", Offset = "0xBDED60", VA = "0xBDED60")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xBDEF44", Offset = "0xBDEF44", VA = "0xBDEF44")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xBDEF50", Offset = "0xBDEF50", VA = "0xBDEF50")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xBDEF58", Offset = "0xBDEF58", VA = "0xBDEF58", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xBD556C", Offset = "0xBD556C", VA = "0xBD556C")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xBD5828", Offset = "0xBD5828", VA = "0xBD5828")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xBD3328", Offset = "0xBD3328", VA = "0xBD3328")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xBDF018", Offset = "0xBDF018", VA = "0xBDF018")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xBD378C", Offset = "0xBD378C", VA = "0xBD378C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xBDF020", Offset = "0xBDF020", VA = "0xBDF020")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xBDED40", Offset = "0xBDED40", VA = "0xBDED40")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xBDF2A4", Offset = "0xBDF2A4", VA = "0xBDF2A4")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xBD54E8", Offset = "0xBD54E8", VA = "0xBD54E8")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000459")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6001810")]
		[Address(RVA = "0xBDF61C", Offset = "0xBDF61C", VA = "0xBDF61C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xBDF684", Offset = "0xBDF684", VA = "0xBDF684")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xBDF8D0", Offset = "0xBDF8D0", VA = "0xBDF8D0")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xBDFC44", Offset = "0xBDFC44", VA = "0xBDFC44")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xBDFDE8", Offset = "0xBDFDE8", VA = "0xBDFDE8")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x200045A")]
	internal class Quads
	{
		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xBDFDF0", Offset = "0xBDFDF0", VA = "0xBDFDF0")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xBDA234", Offset = "0xBDA234", VA = "0xBDA234")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xBDBD7C", Offset = "0xBDBD7C", VA = "0xBDBD7C")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xBDFEC0", Offset = "0xBDFEC0", VA = "0xBDFEC0")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}
	}
	[Token(Token = "0x200045B")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x200045C")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4001BBA")]
			Additive,
			[Token(Token = "0x4001BBB")]
			ScreenBlend,
			[Token(Token = "0x4001BBC")]
			Multiply,
			[Token(Token = "0x4001BBD")]
			Overlay,
			[Token(Token = "0x4001BBE")]
			AlphaBlend
		}

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xBE0244", Offset = "0xBE0244", VA = "0xBE0244", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xBE02AC", Offset = "0xBE02AC", VA = "0xBE02AC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xBE03FC", Offset = "0xBE03FC", VA = "0xBE03FC")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x200045D")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int blurIterations;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurFilterDistance;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int downsample;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xBE041C", Offset = "0xBE041C", VA = "0xBE041C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xBE0484", Offset = "0xBE0484", VA = "0xBE0484")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xBE0514", Offset = "0xBE0514", VA = "0xBE0514")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xBE0AC4", Offset = "0xBE0AC4", VA = "0xBE0AC4")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x200045E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x200045F")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4001BD3")]
			Low,
			[Token(Token = "0x4001BD4")]
			Medium,
			[Token(Token = "0x4001BD5")]
			High
		}

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_Radius;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_Blur;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Downsampling;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_MinZ;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xBE0AF0", Offset = "0xBE0AF0", VA = "0xBE0AF0")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xBE0B9C", Offset = "0xBE0B9C", VA = "0xBE0B9C")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xBE0C20", Offset = "0xBE0C20", VA = "0xBE0C20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xBE0C28", Offset = "0xBE0C28", VA = "0xBE0C28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xBE0DC8", Offset = "0xBE0DC8", VA = "0xBE0DC8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xBE0CF0", Offset = "0xBE0CF0", VA = "0xBE0CF0")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xBE0E34", Offset = "0xBE0E34", VA = "0xBE0E34")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xBE1408", Offset = "0xBE1408", VA = "0xBE1408")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000460")]
	[ExecuteInEditMode]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6001828")]
		[Address(RVA = "0xBE143C", Offset = "0xBE143C", VA = "0xBE143C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xBE14BC", Offset = "0xBE14BC", VA = "0xBE14BC")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x2000461")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x2000462")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4001BE5")]
			Low,
			[Token(Token = "0x4001BE6")]
			Normal,
			[Token(Token = "0x4001BE7")]
			High
		}

		[Token(Token = "0x2000463")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4001BE9")]
			Screen,
			[Token(Token = "0x4001BEA")]
			Add
		}

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xBE14C4", Offset = "0xBE14C4", VA = "0xBE14C4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xBE1550", Offset = "0xBE1550", VA = "0xBE1550")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xBE1C0C", Offset = "0xBE1C0C", VA = "0xBE1C0C")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x2000464")]
	[RequireComponent(typeof(Camera))]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x2000465")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4001BF3")]
			TiltShiftMode,
			[Token(Token = "0x4001BF4")]
			IrisMode
		}

		[Token(Token = "0x2000466")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4001BF6")]
			Preview,
			[Token(Token = "0x4001BF7")]
			Normal,
			[Token(Token = "0x4001BF8")]
			High
		}

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blurArea;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxBlurSize;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int downsample;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xBE1C5C", Offset = "0xBE1C5C", VA = "0xBE1C5C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xBE1CD0", Offset = "0xBE1CD0", VA = "0xBE1CD0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xBE1F60", Offset = "0xBE1F60", VA = "0xBE1F60")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x2000467")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x2000468")]
		public enum TonemapperType
		{
			[Token(Token = "0x4001C07")]
			SimpleReinhard,
			[Token(Token = "0x4001C08")]
			UserCurve,
			[Token(Token = "0x4001C09")]
			Hable,
			[Token(Token = "0x4001C0A")]
			Photographic,
			[Token(Token = "0x4001C0B")]
			OptimizedHejiDawson,
			[Token(Token = "0x4001C0C")]
			AdaptiveReinhard,
			[Token(Token = "0x4001C0D")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x2000469")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4001C0F")]
			Square16 = 0x10,
			[Token(Token = "0x4001C10")]
			Square32 = 0x20,
			[Token(Token = "0x4001C11")]
			Square64 = 0x40,
			[Token(Token = "0x4001C12")]
			Square128 = 0x80,
			[Token(Token = "0x4001C13")]
			Square256 = 0x100,
			[Token(Token = "0x4001C14")]
			Square512 = 0x200,
			[Token(Token = "0x4001C15")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xBE1F7C", Offset = "0xBE1F7C", VA = "0xBE1F7C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xBE20EC", Offset = "0xBE20EC", VA = "0xBE20EC")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xBE236C", Offset = "0xBE236C", VA = "0xBE236C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xBE24C4", Offset = "0xBE24C4", VA = "0xBE24C4")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xBE25C4", Offset = "0xBE25C4", VA = "0xBE25C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xBE2D64", Offset = "0xBE2D64", VA = "0xBE2D64")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x200046A")]
	[ExecuteInEditMode]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xBE2D94", Offset = "0xBE2D94", VA = "0xBE2D94")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xBE2DD4", Offset = "0xBE2DD4", VA = "0xBE2DD4")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x200046B")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x200046C")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001C28")]
			Simple,
			[Token(Token = "0x4001C29")]
			Advanced
		}

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xBE2DFC", Offset = "0xBE2DFC", VA = "0xBE2DFC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xBE2EC0", Offset = "0xBE2EC0", VA = "0xBE2EC0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xBE3414", Offset = "0xBE3414", VA = "0xBE3414")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x200046D")]
	[ExecuteInEditMode]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xBE3444", Offset = "0xBE3444", VA = "0xBE3444")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xBE3484", Offset = "0xBE3484", VA = "0xBE3484")]
		public Vortex()
		{
		}
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x200046E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class ME_Bloom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200046F")]
		public struct Settings
		{
			[Token(Token = "0x4001C3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public float threshold;

			[Token(Token = "0x4001C3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public float softKnee;

			[Token(Token = "0x4001C3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public float radius;

			[Token(Token = "0x4001C3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public float intensity;

			[Token(Token = "0x4001C3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public bool highQuality;

			[Token(Token = "0x4001C40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[SerializeField]
			public bool antiFlicker;

			[Token(Token = "0x4001C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Texture dirtTexture;

			[Token(Token = "0x4001C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float dirtIntensity;

			[Token(Token = "0x17000349")]
			public float thresholdGamma
			{
				[Token(Token = "0x6001844")]
				[Address(RVA = "0xBE442C", Offset = "0xBE442C", VA = "0xBE442C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034A")]
			public float thresholdLinear
			{
				[Token(Token = "0x6001845")]
				[Address(RVA = "0xBE42D4", Offset = "0xBE42D4", VA = "0xBE42D4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034B")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001846")]
				[Address(RVA = "0xBE43D0", Offset = "0xBE43D0", VA = "0xBE43D0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x4001C30")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x17000347")]
		public Shader shader
		{
			[Token(Token = "0x600183D")]
			[Address(RVA = "0xBE34AC", Offset = "0xBE34AC", VA = "0xBE34AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000348")]
		public Material material
		{
			[Token(Token = "0x600183E")]
			[Address(RVA = "0xBE3548", Offset = "0xBE3548", VA = "0xBE3548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xBE36A4", Offset = "0xBE36A4", VA = "0xBE36A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xBE3810", Offset = "0xBE3810", VA = "0xBE3810")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xBE3AB8", Offset = "0xBE3AB8", VA = "0xBE3AB8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xBE3B4C", Offset = "0xBE3B4C", VA = "0xBE3B4C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xBE42E8", Offset = "0xBE42E8", VA = "0xBE42E8")]
		public ME_Bloom()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public static class ME_ImageEffectHelper_ME
	{
		[Token(Token = "0x6001847")]
		[Address(RVA = "0xBE384C", Offset = "0xBE384C", VA = "0xBE384C")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xBE35DC", Offset = "0xBE35DC", VA = "0xBE35DC")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000471")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class Bloom_RFX4 : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000472")]
		public struct Settings
		{
			[Token(Token = "0x4001C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public float threshold;

			[Token(Token = "0x4001C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public float softKnee;

			[Token(Token = "0x4001C53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public float radius;

			[Token(Token = "0x4001C54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public float intensity;

			[Token(Token = "0x4001C55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public bool highQuality;

			[Token(Token = "0x4001C56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[SerializeField]
			public bool antiFlicker;

			[Token(Token = "0x4001C57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Texture dirtTexture;

			[Token(Token = "0x4001C58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float dirtIntensity;

			[Token(Token = "0x1700034E")]
			public float thresholdGamma
			{
				[Token(Token = "0x6001850")]
				[Address(RVA = "0xBE53BC", Offset = "0xBE53BC", VA = "0xBE53BC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034F")]
			public float thresholdLinear
			{
				[Token(Token = "0x6001851")]
				[Address(RVA = "0xBE5264", Offset = "0xBE5264", VA = "0xBE5264")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000350")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001852")]
				[Address(RVA = "0xBE5360", Offset = "0xBE5360", VA = "0xBE5360")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x4001C46")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x1700034C")]
		public Shader shader
		{
			[Token(Token = "0x6001849")]
			[Address(RVA = "0xBE443C", Offset = "0xBE443C", VA = "0xBE443C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034D")]
		public Material material
		{
			[Token(Token = "0x600184A")]
			[Address(RVA = "0xBE44D8", Offset = "0xBE44D8", VA = "0xBE44D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xBE4634", Offset = "0xBE4634", VA = "0xBE4634")]
		private void Awake()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xBE47A0", Offset = "0xBE47A0", VA = "0xBE47A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xBE4A48", Offset = "0xBE4A48", VA = "0xBE4A48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xBE4ADC", Offset = "0xBE4ADC", VA = "0xBE4ADC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xBE5278", Offset = "0xBE5278", VA = "0xBE5278")]
		public Bloom_RFX4()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public static class ImageEffectHelper_RFX4
	{
		[Token(Token = "0x6001853")]
		[Address(RVA = "0xBE47DC", Offset = "0xBE47DC", VA = "0xBE47DC")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xBE456C", Offset = "0xBE456C", VA = "0xBE456C")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
}
namespace BeautifulTransitions._Demo.Transitions.Scripts
{
	[Token(Token = "0x2000474")]
	public class ScreenCameraController : MonoBehaviour
	{
		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FadeCamera FadeCamera;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WipeCamera WipeCamera;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FadeScreen FadeScreen;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WipeScreen WipeScreen;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture2D OverlayTexture;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D[] WipeTextures;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color _color;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _showTexture;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _effect;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _softness;

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xBE53CC", Offset = "0xBE53CC", VA = "0xBE53CC")]
		public void SetColorWhite()
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xBE5504", Offset = "0xBE5504", VA = "0xBE5504")]
		public void SetColorRed()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xBE5518", Offset = "0xBE5518", VA = "0xBE5518")]
		public void SetColorBlue()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xBE552C", Offset = "0xBE552C", VA = "0xBE552C")]
		public void SetColorGreen()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xBE5540", Offset = "0xBE5540", VA = "0xBE5540")]
		public void SetColorBlack()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xBE53E0", Offset = "0xBE53E0", VA = "0xBE53E0")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xBE5554", Offset = "0xBE5554", VA = "0xBE5554")]
		public void SetEffect(int effect)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xBE555C", Offset = "0xBE555C", VA = "0xBE555C")]
		public void SetSoftness(float softness)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xBE55B0", Offset = "0xBE55B0", VA = "0xBE55B0")]
		public void SetShowTexture(bool showTexture)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xBE56C0", Offset = "0xBE56C0", VA = "0xBE56C0")]
		public void SetWipeTexture()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xBE5784", Offset = "0xBE5784", VA = "0xBE5784")]
		public void DemoScreen()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xBE5868", Offset = "0xBE5868", VA = "0xBE5868")]
		public void DemoCamera()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xBE57D8", Offset = "0xBE57D8", VA = "0xBE57D8")]
		public IEnumerator DemoCameraInternal(TransitionBase transitionBase)
		{
			return null;
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xBE5918", Offset = "0xBE5918", VA = "0xBE5918")]
		public void ShowRatePage()
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xBE595C", Offset = "0xBE595C", VA = "0xBE595C")]
		public ScreenCameraController()
		{
		}
	}
	[Token(Token = "0x2000476")]
	public class ScriptingDemo : MonoBehaviour
	{
		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject TestGameObject;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject TestGameObject2;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject TestGameObject3;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text Counter;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject TestGameObject5;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Text Description;

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xBE5D14", Offset = "0xBE5D14", VA = "0xBE5D14")]
		private void Start()
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xBE66C8", Offset = "0xBE66C8", VA = "0xBE66C8")]
		private void Step2LinkedTransitionsInOneCall(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xBE69F4", Offset = "0xBE69F4", VA = "0xBE69F4")]
		private void Step3TransitionWithCallback(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xBE6ADC", Offset = "0xBE6ADC", VA = "0xBE6ADC")]
		public void Step4CustomTransitionStep()
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xBE7080", Offset = "0xBE7080", VA = "0xBE7080")]
		private void CustomTransitionStepUpdateCallback(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xBE70D4", Offset = "0xBE70D4", VA = "0xBE70D4")]
		private void Step5FadeAndScale(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xBE6100", Offset = "0xBE6100", VA = "0xBE6100")]
		private void ShowTransitionedDescription(string text)
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xBE7264", Offset = "0xBE7264", VA = "0xBE7264")]
		private void LogStart(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xBE72CC", Offset = "0xBE72CC", VA = "0xBE72CC")]
		private void LogUpdate(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xBE7378", Offset = "0xBE7378", VA = "0xBE7378")]
		private void LogComplete(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xBE7438", Offset = "0xBE7438", VA = "0xBE7438")]
		private void LogComplete2(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xBE74A0", Offset = "0xBE74A0", VA = "0xBE74A0")]
		public void ShowRatePage()
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xBE74E4", Offset = "0xBE74E4", VA = "0xBE74E4")]
		public ScriptingDemo()
		{
		}
	}
	[Token(Token = "0x2000477")]
	public class TestController : MonoBehaviour
	{
		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject TransitionFromButtons;

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xBE74EC", Offset = "0xBE74EC", VA = "0xBE74EC")]
		public void TransitionIn()
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xBE74F8", Offset = "0xBE74F8", VA = "0xBE74F8")]
		public void TransitionOut()
		{
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xBE7598", Offset = "0xBE7598", VA = "0xBE7598")]
		public void ShowRatePage()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xBE75DC", Offset = "0xBE75DC", VA = "0xBE75DC")]
		public TestController()
		{
		}
	}
	[Token(Token = "0x2000478")]
	public class TransitionEvents : MonoBehaviour
	{
		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject TransitionGameobject;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text Status;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Progress;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image ProgressFill;

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xBE75E4", Offset = "0xBE75E4", VA = "0xBE75E4")]
		public void TransitionIn()
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xBE75F0", Offset = "0xBE75F0", VA = "0xBE75F0")]
		public void TransitionOut()
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xBE75FC", Offset = "0xBE75FC", VA = "0xBE75FC")]
		public void TransitionInStarted()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xBE7658", Offset = "0xBE7658", VA = "0xBE7658")]
		public void TransitionInCompleted()
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xBE76B4", Offset = "0xBE76B4", VA = "0xBE76B4")]
		public void TransitionOutStarted()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xBE7710", Offset = "0xBE7710", VA = "0xBE7710")]
		public void TransitionOutCompleted()
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xBE776C", Offset = "0xBE776C", VA = "0xBE776C")]
		public void UpdateProgress(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xBE783C", Offset = "0xBE783C", VA = "0xBE783C")]
		public void ShowRatePage()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xBE7880", Offset = "0xBE7880", VA = "0xBE7880")]
		public TransitionEvents()
		{
		}
	}
}
namespace BeautifulTransitions._Demo.Shake.Scripts
{
	[Token(Token = "0x2000479")]
	public class ShakeController : MonoBehaviour
	{
		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text DurationText;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider DurationSlider;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text DecayStartText;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider DecayStartSlider;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InputField XInput;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InputField YInput;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InputField ZInput;

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xBE7888", Offset = "0xBE7888", VA = "0xBE7888")]
		private void Start()
		{
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xBE7A3C", Offset = "0xBE7A3C", VA = "0xBE7A3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xBE7B68", Offset = "0xBE7B68", VA = "0xBE7B68")]
		public void Shake()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xBE7E1C", Offset = "0xBE7E1C", VA = "0xBE7E1C")]
		public ShakeController()
		{
		}
	}
}
namespace BeautifulTransitions._Demo.DisplayItem.Scripts
{
	[Token(Token = "0x200047A")]
	public class DisplayItemController : MonoBehaviour
	{
		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button TestButton;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button ShowButton;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button HideButton;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button EnableButton;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button DisableButton;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button AttentionButton;

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xBE7E24", Offset = "0xBE7E24", VA = "0xBE7E24")]
		public void Start()
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xBE7E4C", Offset = "0xBE7E4C", VA = "0xBE7E4C")]
		public void ShowClicked()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xBE7F00", Offset = "0xBE7F00", VA = "0xBE7F00")]
		public void HideClicked()
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xBE7F64", Offset = "0xBE7F64", VA = "0xBE7F64")]
		public void EnableClicked()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xBE7F90", Offset = "0xBE7F90", VA = "0xBE7F90")]
		public void DisableClicked()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xBE7EB0", Offset = "0xBE7EB0", VA = "0xBE7EB0")]
		private void SetEnableButtonStates()
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xBE7FBC", Offset = "0xBE7FBC", VA = "0xBE7FBC")]
		public void ShowRatePage()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xBE8000", Offset = "0xBE8000", VA = "0xBE8000")]
		public DisplayItemController()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions
{
	[Token(Token = "0x200047B")]
	public class TransitionHelper
	{
		[Token(Token = "0x200047C")]
		public enum TweenType
		{
			[Token(Token = "0x4001C80")]
			none = 0,
			[Token(Token = "0x4001C81")]
			easeInQuad = 1,
			[Token(Token = "0x4001C82")]
			easeOutQuad = 2,
			[Token(Token = "0x4001C83")]
			easeInOutQuad = 3,
			[Token(Token = "0x4001C84")]
			easeInCubic = 4,
			[Token(Token = "0x4001C85")]
			easeOutCubic = 5,
			[Token(Token = "0x4001C86")]
			easeInOutCubic = 6,
			[Token(Token = "0x4001C87")]
			easeInQuart = 7,
			[Token(Token = "0x4001C88")]
			easeOutQuart = 8,
			[Token(Token = "0x4001C89")]
			easeInOutQuart = 9,
			[Token(Token = "0x4001C8A")]
			easeInQuint = 10,
			[Token(Token = "0x4001C8B")]
			easeOutQuint = 11,
			[Token(Token = "0x4001C8C")]
			easeInOutQuint = 12,
			[Token(Token = "0x4001C8D")]
			easeInSine = 13,
			[Token(Token = "0x4001C8E")]
			easeOutSine = 14,
			[Token(Token = "0x4001C8F")]
			easeInOutSine = 15,
			[Token(Token = "0x4001C90")]
			easeInExpo = 16,
			[Token(Token = "0x4001C91")]
			easeOutExpo = 17,
			[Token(Token = "0x4001C92")]
			easeInOutExpo = 18,
			[Token(Token = "0x4001C93")]
			easeInCirc = 19,
			[Token(Token = "0x4001C94")]
			easeOutCirc = 20,
			[Token(Token = "0x4001C95")]
			easeInOutCirc = 21,
			[Token(Token = "0x4001C96")]
			linear = 22,
			[Token(Token = "0x4001C97")]
			spring = 23,
			[Token(Token = "0x4001C98")]
			easeInBounce = 24,
			[Token(Token = "0x4001C99")]
			easeOutBounce = 25,
			[Token(Token = "0x4001C9A")]
			easeInOutBounce = 26,
			[Token(Token = "0x4001C9B")]
			easeInBack = 27,
			[Token(Token = "0x4001C9C")]
			easeOutBack = 28,
			[Token(Token = "0x4001C9D")]
			easeInOutBack = 29,
			[Token(Token = "0x4001C9E")]
			easeInElastic = 30,
			[Token(Token = "0x4001C9F")]
			easeOutElastic = 31,
			[Token(Token = "0x4001CA0")]
			easeInOutElastic = 32,
			[Token(Token = "0x4001CA1")]
			AnimationCurve = 999
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xBE8008", Offset = "0xBE8008", VA = "0xBE8008")]
		public static TweenMethods.TweenFunction GetTweenFunction(TweenType progressMode)
		{
			return null;
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xBE6A48", Offset = "0xBE6A48", VA = "0xBE6A48")]
		public static List<TransitionBase> TransitionIn(GameObject gameObject, [Optional] Action onComplete)
		{
			return null;
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xBE8510", Offset = "0xBE8510", VA = "0xBE8510")]
		private static List<TransitionBase> TransitionIn(GameObject gameObject, bool isRecursiveCall)
		{
			return null;
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xBE7504", Offset = "0xBE7504", VA = "0xBE7504")]
		public static List<TransitionBase> TransitionOut(GameObject gameObject, [Optional] Action onComplete)
		{
			return null;
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xBE8AA8", Offset = "0xBE8AA8", VA = "0xBE8AA8")]
		private static List<TransitionBase> TransitionOut(GameObject gameObject, bool isRecursiveCall)
		{
			return null;
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xBE88B4", Offset = "0xBE88B4", VA = "0xBE88B4")]
		public static float GetTransitionInTime(List<TransitionBase> transitionBases)
		{
			return default(float);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xBE5B54", Offset = "0xBE5B54", VA = "0xBE5B54")]
		public static float GetTransitionOutTime(List<TransitionBase> transitionBases)
		{
			return default(float);
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xBE8A24", Offset = "0xBE8A24", VA = "0xBE8A24")]
		public static IEnumerator CallActionAfterDelay(float delay, Action action)
		{
			return null;
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xBE8D2C", Offset = "0xBE8D2C", VA = "0xBE8D2C")]
		public static Texture2D TakeScreenshot()
		{
			return null;
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xBE8E20", Offset = "0xBE8E20", VA = "0xBE8E20")]
		public static void LoadScene(string sceneName)
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.TransitionSteps
{
	[Token(Token = "0x200047E")]
	public class ColorTransition : TransitionStep
	{
		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Color _startValue;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Color _endValue;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Image[] _images;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private RawImage[] _rawImages;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Text[] _texts;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SpriteRenderer[] _spriteRenderers;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material[] _materials;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _hasComponentReferences;

		[Token(Token = "0x17000355")]
		public Color StartValue
		{
			[Token(Token = "0x60018A0")]
			[Address(RVA = "0xBE8F90", Offset = "0xBE8F90", VA = "0xBE8F90")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018A1")]
			[Address(RVA = "0xBE8F9C", Offset = "0xBE8F9C", VA = "0xBE8F9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000356")]
		public Color EndValue
		{
			[Token(Token = "0x60018A2")]
			[Address(RVA = "0xBE93B0", Offset = "0xBE93B0", VA = "0xBE93B0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0xBE93BC", Offset = "0xBE93BC", VA = "0xBE93BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public Color OriginalValue
		{
			[Token(Token = "0x60018A4")]
			[Address(RVA = "0xBE9900", Offset = "0xBE9900", VA = "0xBE9900")]
			[CompilerGenerated]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60018A5")]
			[Address(RVA = "0xBE990C", Offset = "0xBE990C", VA = "0xBE990C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public Gradient Gradient
		{
			[Token(Token = "0x60018A6")]
			[Address(RVA = "0xBE9918", Offset = "0xBE9918", VA = "0xBE9918")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018A7")]
			[Address(RVA = "0xBE9920", Offset = "0xBE9920", VA = "0xBE9920")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xBE9928", Offset = "0xBE9928", VA = "0xBE9928")]
		public ColorTransition(GameObject target, [Optional] Gradient gradient, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xBE9BD4", Offset = "0xBE9BD4", VA = "0xBE9BD4")]
		public Color GetCurrent()
		{
			return default(Color);
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xBEA248", Offset = "0xBEA248", VA = "0xBEA248")]
		public void SetCurrent(Color color)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xBE9CAC", Offset = "0xBE9CAC", VA = "0xBE9CAC")]
		private void SetupComponentReferences()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xBEA454", Offset = "0xBEA454", VA = "0xBEA454", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xBEA514", Offset = "0xBEA514", VA = "0xBEA514", Slot = "10")]
		protected override void ProgressUpdated()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class Fade : TransitionStepFloat
	{
		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private CanvasGroup[] _canvasGroups;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Image[] _images;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RawImage[] _rawImages;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Text[] _texts;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private SpriteRenderer[] _spriteRenderers;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material[] _materials;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool _hasComponentReferences;

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xBE6D68", Offset = "0xBE6D68", VA = "0xBE6D68")]
		public Fade(GameObject target, float startTransparency = 0f, float endTransparency = 1f, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xBEA670", Offset = "0xBEA670", VA = "0xBEA670", Slot = "11")]
		public override float GetCurrent()
		{
			return default(float);
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xBEAE00", Offset = "0xBEAE00", VA = "0xBEAE00", Slot = "12")]
		public override void SetCurrent(float transparency)
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xBEA768", Offset = "0xBEA768", VA = "0xBEA768")]
		private void SetupComponentReferences()
		{
		}
	}
	[Token(Token = "0x2000480")]
	public static class FadeExtensions
	{
		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xBEB174", Offset = "0xBEB174", VA = "0xBEB174")]
		public static Fade Fade(this TransitionStep transitionStep, float startTransparency, float endTransparency, float delay = 0f, float duration = 0.5f, TransitionStep.TransitionModeType transitionMode = TransitionStep.TransitionModeType.Specified, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xBE7214", Offset = "0xBE7214", VA = "0xBE7214")]
		public static Fade FadeFromCurrent(this TransitionStep transitionStep, float endTransparency, float delay = 0f, float duration = 0.5f, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}
	}
	[Token(Token = "0x2000481")]
	public class Move : TransitionStepVector3
	{
		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xBE6224", Offset = "0xBE6224", VA = "0xBE6224")]
		public Move(GameObject target, [Optional] Vector3? startPosition, [Optional] Vector3? endPosition, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xBEB420", Offset = "0xBEB420", VA = "0xBEB420", Slot = "11")]
		public override Vector3 GetCurrent()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xBEB4D4", Offset = "0xBEB4D4", VA = "0xBEB4D4", Slot = "12")]
		public override void SetCurrent(Vector3 position)
		{
		}
	}
	[Token(Token = "0x2000482")]
	public class Rotate : TransitionStepVector3
	{
		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xBEB5D4", Offset = "0xBEB5D4", VA = "0xBEB5D4")]
		public Rotate(GameObject target, [Optional] Vector3? startRotation, [Optional] Vector3? endRotation, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xBEB604", Offset = "0xBEB604", VA = "0xBEB604", Slot = "11")]
		public override Vector3 GetCurrent()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xBEB640", Offset = "0xBEB640", VA = "0xBEB640", Slot = "12")]
		public override void SetCurrent(Vector3 rotation)
		{
		}
	}
	[Token(Token = "0x2000483")]
	public static class RotateExtensions
	{
		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xBEB6AC", Offset = "0xBEB6AC", VA = "0xBEB6AC")]
		public static Rotate Rotate(this TransitionStep transitionStep, Vector3 startRotation, Vector3 endRotation, float delay = 0f, float duration = 0.5f, TransitionStep.TransitionModeType transitionMode = TransitionStep.TransitionModeType.Specified, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, TransitionStep.CoordinateSpaceType coordinateMode = TransitionStep.CoordinateSpaceType.Global, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xBE64E4", Offset = "0xBE64E4", VA = "0xBE64E4")]
		public static Rotate RotateToOriginal(this TransitionStep transitionStep, Vector3 startRotation, float delay = 0f, float duration = 0.5f, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, TransitionStep.CoordinateSpaceType coordinateMode = TransitionStep.CoordinateSpaceType.Global, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xBE63F4", Offset = "0xBE63F4", VA = "0xBE63F4")]
		public static Rotate RotateFromCurrent(this TransitionStep transitionStep, Vector3 endRotation, float delay = 0f, float duration = 0.5f, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, TransitionStep.CoordinateSpaceType coordinateMode = TransitionStep.CoordinateSpaceType.Global, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}
	}
	[Token(Token = "0x2000484")]
	public class Scale : TransitionStepVector3
	{
		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xBE6994", Offset = "0xBE6994", VA = "0xBE6994")]
		public Scale(GameObject target, [Optional] Vector3? startScale, [Optional] Vector3? endScale, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xBEB820", Offset = "0xBEB820", VA = "0xBEB820", Slot = "11")]
		public override Vector3 GetCurrent()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xBEB848", Offset = "0xBEB848", VA = "0xBEB848", Slot = "12")]
		public override void SetCurrent(Vector3 scale)
		{
		}
	}
	[Token(Token = "0x2000485")]
	public static class ScaleExtensions
	{
		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xBEB898", Offset = "0xBEB898", VA = "0xBEB898")]
		public static Scale Scale(this TransitionStep transitionStep, Vector3 startScale, Vector3 endScale, float delay = 0f, float duration = 0.5f, TransitionStep.TransitionModeType transitionMode = TransitionStep.TransitionModeType.Specified, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xBE6300", Offset = "0xBE6300", VA = "0xBE6300")]
		public static Scale ScaleToOriginal(this TransitionStep transitionStep, Vector3 startScale, float delay = 0f, float duration = 0.5f, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xBE65D4", Offset = "0xBE65D4", VA = "0xBE65D4")]
		public static Scale ScaleFromCurrent(this TransitionStep transitionStep, Vector3 endScale, float delay = 0f, float duration = 0.5f, TransitionStep.TimeUpdateMethodType timeUpdateMethod = TransitionStep.TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}
	}
	[Token(Token = "0x2000486")]
	public class ScreenFade : TransitionStepScreen
	{
		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D Texture;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Color Color;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly ScreenFadeComponents _screenFadeComponents;

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xBEBA10", Offset = "0xBEBA10", VA = "0xBEBA10")]
		public ScreenFade(GameObject target, [Optional] Color? color, [Optional] Texture2D texture, float delay = 0f, float duration = 0.5f, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xBEBBF8", Offset = "0xBEBBF8", VA = "0xBEBBF8", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xBEBD68", Offset = "0xBEBD68", VA = "0xBEBD68", Slot = "12")]
		public override void SetCurrent(float progress)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xBEBC1C", Offset = "0xBEBC1C", VA = "0xBEBC1C")]
		private void SetConfiguration(Texture2D texture, Color color)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xBEBEFC", Offset = "0xBEBEFC", VA = "0xBEBEFC", Slot = "14")]
		protected override void SetTransitionDisplayedState(bool isDisplayed)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xBEBE54", Offset = "0xBEBE54", VA = "0xBEBE54")]
		private ScreenFadeComponents TargetComponents()
		{
			return null;
		}
	}
	[Token(Token = "0x2000487")]
	public class ScreenFadeComponents
	{
		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject _baseGameObject;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RawImage _fadeRawImage;

		[Token(Token = "0x17000359")]
		public bool PersistantAcrossScenes
		{
			[Token(Token = "0x60018C9")]
			[Address(RVA = "0xBEC1B4", Offset = "0xBEC1B4", VA = "0xBEC1B4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018CA")]
			[Address(RVA = "0xBEC1BC", Offset = "0xBEC1BC", VA = "0xBEC1BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public GameObject BaseGameObject
		{
			[Token(Token = "0x60018CB")]
			[Address(RVA = "0xBEC098", Offset = "0xBEC098", VA = "0xBEC098")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018CC")]
			[Address(RVA = "0xBEC338", Offset = "0xBEC338", VA = "0xBEC338")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035B")]
		public RawImage FadeRawImage
		{
			[Token(Token = "0x60018CD")]
			[Address(RVA = "0xBEBE88", Offset = "0xBEBE88", VA = "0xBEBE88")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018CE")]
			[Address(RVA = "0xBEC340", Offset = "0xBEC340", VA = "0xBEC340")]
			set
			{
			}
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xBEC1C8", Offset = "0xBEC1C8", VA = "0xBEC1C8")]
		private void CreateComponents()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xBEC10C", Offset = "0xBEC10C", VA = "0xBEC10C")]
		public void DeleteComponents()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xBEBBF0", Offset = "0xBEBBF0", VA = "0xBEBBF0")]
		public ScreenFadeComponents()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class ScreenWipe : TransitionStepScreen
	{
		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D Texture;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Color Color;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Texture2D MaskTexture;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool InvertMask;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float Softness;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly ScreenWipeComponents _screenWipeComponents;

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xBEC348", Offset = "0xBEC348", VA = "0xBEC348")]
		public ScreenWipe(GameObject target, Texture2D maskTexture, bool invertMask = false, [Optional] Color? color, [Optional] Texture2D texture, float softness = 0f, float delay = 0f, float duration = 0.5f, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xBEC4E0", Offset = "0xBEC4E0", VA = "0xBEC4E0", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xBEC690", Offset = "0xBEC690", VA = "0xBEC690", Slot = "12")]
		public override void SetCurrent(float progress)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xBEC510", Offset = "0xBEC510", VA = "0xBEC510")]
		private void SetConfiguration(Texture2D texture, Color color, Texture2D maskTexture, bool invertMask, float softness = 0f)
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xBEC81C", Offset = "0xBEC81C", VA = "0xBEC81C", Slot = "14")]
		protected override void SetTransitionDisplayedState(bool isDisplayed)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xBEC700", Offset = "0xBEC700", VA = "0xBEC700")]
		private ScreenWipeComponents TargetComponents()
		{
			return null;
		}
	}
	[Token(Token = "0x2000489")]
	public class ScreenWipeComponents
	{
		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject _baseGameObject;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RawImage _wipeRawImage;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _wipeMaterial;

		[Token(Token = "0x1700035C")]
		public bool PersistantAcrossScenes
		{
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0xBECA3C", Offset = "0xBECA3C", VA = "0xBECA3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0xBECA44", Offset = "0xBECA44", VA = "0xBECA44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public GameObject BaseGameObject
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0xBEC920", Offset = "0xBEC920", VA = "0xBEC920")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xBECCF8", Offset = "0xBECCF8", VA = "0xBECCF8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700035E")]
		public RawImage WipeRawImage
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0xBEC7A8", Offset = "0xBEC7A8", VA = "0xBEC7A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xBECD00", Offset = "0xBECD00", VA = "0xBECD00")]
			set
			{
			}
		}

		[Token(Token = "0x1700035F")]
		public Material WipeMaterial
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xBEC734", Offset = "0xBEC734", VA = "0xBEC734")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xBECD08", Offset = "0xBECD08", VA = "0xBECD08")]
			set
			{
			}
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0xBECA50", Offset = "0xBECA50", VA = "0xBECA50")]
		private void CreateComponents()
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xBEC994", Offset = "0xBEC994", VA = "0xBEC994")]
		public void DeleteComponents()
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0xBEC4D8", Offset = "0xBEC4D8", VA = "0xBEC4D8")]
		public ScreenWipeComponents()
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class TransitionController : MonoBehaviour
	{
		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TransitionController _instance;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _newSceneLoaded;

		[Token(Token = "0x17000360")]
		public Texture2D ScreenSnapshot
		{
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xBECD10", Offset = "0xBECD10", VA = "0xBECD10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xBECD18", Offset = "0xBECD18", VA = "0xBECD18")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000361")]
		public bool IsInCrossTransition
		{
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xBECD20", Offset = "0xBECD20", VA = "0xBECD20")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xBECD28", Offset = "0xBECD28", VA = "0xBECD28")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000362")]
		public ScreenWipeComponents SharedScreenWipeComponents
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xBECD34", Offset = "0xBECD34", VA = "0xBECD34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xBECD3C", Offset = "0xBECD3C", VA = "0xBECD3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000363")]
		public ScreenFadeComponents SharedScreenFadeComponents
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xBECD44", Offset = "0xBECD44", VA = "0xBECD44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0xBECD4C", Offset = "0xBECD4C", VA = "0xBECD4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000364")]
		public static TransitionController Instance
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0xBE876C", Offset = "0xBE876C", VA = "0xBE876C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0xBECDF8", Offset = "0xBECDF8", VA = "0xBECDF8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000365")]
		public static bool IsActive
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xBECE50", Offset = "0xBECE50", VA = "0xBECE50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xBECD54", Offset = "0xBECD54", VA = "0xBECD54")]
		private void Setup()
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xBECEB4", Offset = "0xBECEB4", VA = "0xBECEB4")]
		public IEnumerator LoadSceneAndWaitForLoad(string sceneToLoad)
		{
			return null;
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xBECF6C", Offset = "0xBECF6C", VA = "0xBECF6C")]
		private void OnSceneFinishedLoading(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xBECF78", Offset = "0xBECF78", VA = "0xBECF78")]
		public void TakeScreenshot()
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0xBECF98", Offset = "0xBECF98", VA = "0xBECF98")]
		public IEnumerator TakeScreenshotCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xBED034", Offset = "0xBED034", VA = "0xBED034")]
		public TransitionController()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class TransitionStepFloat : TransitionStepValue<float>
	{
		[Token(Token = "0x6001900")]
		[Address(RVA = "0xBEA540", Offset = "0xBEA540", VA = "0xBEA540")]
		public TransitionStepFloat([Optional] GameObject target, [Optional] float? startValue, [Optional] float? endValue, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xBEBCA8", Offset = "0xBEBCA8", VA = "0xBEBCA8", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xBED2F4", Offset = "0xBED2F4", VA = "0xBED2F4", Slot = "10")]
		protected override void ProgressUpdated()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class TransitionStepScreen : TransitionStepFloat
	{
		[Token(Token = "0x200048F")]
		public enum SceneChangeModeType
		{
			[Token(Token = "0x4001CD9")]
			None,
			[Token(Token = "0x4001CDA")]
			CrossTransition,
			[Token(Token = "0x4001CDB")]
			End
		}

		[Token(Token = "0x1700036A")]
		protected RawImage SiblingRawImage
		{
			[Token(Token = "0x6001903")]
			[Address(RVA = "0xBED388", Offset = "0xBED388", VA = "0xBED388")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xBED390", Offset = "0xBED390", VA = "0xBED390")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700036B")]
		public SceneChangeModeType SceneChangeMode
		{
			[Token(Token = "0x6001905")]
			[Address(RVA = "0xBED398", Offset = "0xBED398", VA = "0xBED398")]
			[CompilerGenerated]
			get
			{
				return default(SceneChangeModeType);
			}
			[Token(Token = "0x6001906")]
			[Address(RVA = "0xBED3A0", Offset = "0xBED3A0", VA = "0xBED3A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700036C")]
		public string SceneToLoad
		{
			[Token(Token = "0x6001907")]
			[Address(RVA = "0xBED3A8", Offset = "0xBED3A8", VA = "0xBED3A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xBED3B0", Offset = "0xBED3B0", VA = "0xBED3B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700036D")]
		public bool SkipOnCrossTransition
		{
			[Token(Token = "0x6001909")]
			[Address(RVA = "0xBED3B8", Offset = "0xBED3B8", VA = "0xBED3B8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600190A")]
			[Address(RVA = "0xBED3C0", Offset = "0xBED3C0", VA = "0xBED3C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xBEBB6C", Offset = "0xBEBB6C", VA = "0xBEBB6C")]
		public TransitionStepScreen(GameObject target, SceneChangeModeType sceneChangeMode = SceneChangeModeType.None, [Optional] string sceneToLoad, bool skipOnCrossTransition = true, float delay = 0f, float duration = 0.5f, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] TransitionStep onCompleteItem, [Optional] Action<TransitionStep> onComplete, [Optional] Action<object> onCompleteWithData, [Optional] object onCompleteData)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xBED3CC", Offset = "0xBED3CC", VA = "0xBED3CC", Slot = "7")]
		protected override IEnumerator TransitionLoop()
		{
			return null;
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xBED468", Offset = "0xBED468", VA = "0xBED468", Slot = "9")]
		protected override void TransitionCompleted()
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xBED598", Offset = "0xBED598", VA = "0xBED598", Slot = "13")]
		protected virtual void SetupComponents()
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xBEC000", Offset = "0xBEC000", VA = "0xBEC000", Slot = "14")]
		protected virtual void SetTransitionDisplayedState(bool isDisplayed)
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class TransitionStepVector3 : TransitionStepValue<Vector3>
	{
		[Token(Token = "0x6001916")]
		[Address(RVA = "0xBEB2C8", Offset = "0xBEB2C8", VA = "0xBEB2C8")]
		public TransitionStepVector3([Optional] GameObject target, [Optional] Vector3? startValue, [Optional] Vector3? endValue, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xBEDC28", Offset = "0xBEDC28", VA = "0xBEDC28", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xBEDD00", Offset = "0xBEDD00", VA = "0xBEDD00", Slot = "10")]
		protected override void ProgressUpdated()
		{
		}
	}
	[Token(Token = "0x2000492")]
	public class TriggerAnimation : TransitionStepFloat
	{
		[Token(Token = "0x17000370")]
		public float Speed
		{
			[Token(Token = "0x6001919")]
			[Address(RVA = "0xBEDDA0", Offset = "0xBEDDA0", VA = "0xBEDDA0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191A")]
			[Address(RVA = "0xBEDDA8", Offset = "0xBEDDA8", VA = "0xBEDDA8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000371")]
		public Animator Animator
		{
			[Token(Token = "0x600191B")]
			[Address(RVA = "0xBEDDB0", Offset = "0xBEDDB0", VA = "0xBEDDB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600191C")]
			[Address(RVA = "0xBEDDB8", Offset = "0xBEDDB8", VA = "0xBEDDB8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000372")]
		public string Trigger
		{
			[Token(Token = "0x600191D")]
			[Address(RVA = "0xBEDDC0", Offset = "0xBEDDC0", VA = "0xBEDDC0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600191E")]
			[Address(RVA = "0xBEDDC8", Offset = "0xBEDDC8", VA = "0xBEDDC8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000373")]
		public string TargetState
		{
			[Token(Token = "0x600191F")]
			[Address(RVA = "0xBEDDD0", Offset = "0xBEDDD0", VA = "0xBEDDD0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001920")]
			[Address(RVA = "0xBEDDD8", Offset = "0xBEDDD8", VA = "0xBEDDD8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0xBEDDE0", Offset = "0xBEDDE0", VA = "0xBEDDE0")]
		public TriggerAnimation(GameObject target, float speed = 1f, float delay = 0f, float duration = 0.5f, string trigger = "TransitionIn", string targetState = "TransitionOut", [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xBEDEE4", Offset = "0xBEDEE4", VA = "0xBEDEE4", Slot = "7")]
		protected override IEnumerator TransitionLoop()
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xBEDE84", Offset = "0xBEDE84", VA = "0xBEDE84")]
		private void SetupComponentReferences()
		{
		}
	}
	[Token(Token = "0x2000494")]
	public class VolumeTransition : TransitionStepFloat
	{
		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource[] _audioSources;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool _hasComponentReferences;

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xBEE390", Offset = "0xBEE390", VA = "0xBEE390")]
		public VolumeTransition(GameObject target, float startVolume = 0f, float endVolume = 1f, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xBEE4C4", Offset = "0xBEE4C4", VA = "0xBEE4C4", Slot = "11")]
		public override float GetCurrent()
		{
			return default(float);
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xBEE670", Offset = "0xBEE670", VA = "0xBEE670", Slot = "12")]
		public override void SetCurrent(float volume)
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xBEE518", Offset = "0xBEE518", VA = "0xBEE518")]
		private void SetupComponentReferences()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.TransitionSteps.AbstractClasses
{
	[Token(Token = "0x2000495")]
	public class TransitionStep
	{
		[Token(Token = "0x2000496")]
		public enum TimeUpdateMethodType
		{
			[Token(Token = "0x4001CFE")]
			GameTime,
			[Token(Token = "0x4001CFF")]
			UnscaledGameTime
		}

		[Token(Token = "0x2000497")]
		public enum CoordinateSpaceType
		{
			[Token(Token = "0x4001D01")]
			Global,
			[Token(Token = "0x4001D02")]
			Local,
			[Token(Token = "0x4001D03")]
			AnchoredPosition
		}

		[Token(Token = "0x2000498")]
		public enum TransitionModeType
		{
			[Token(Token = "0x4001D05")]
			Specified,
			[Token(Token = "0x4001D06")]
			ToOriginal,
			[Token(Token = "0x4001D07")]
			FromCurrent,
			[Token(Token = "0x4001D08")]
			FromOriginal,
			[Token(Token = "0x4001D09")]
			ToCurrent
		}

		[Token(Token = "0x2000499")]
		public enum LoopModeType
		{
			[Token(Token = "0x4001D0B")]
			None,
			[Token(Token = "0x4001D0C")]
			Loop,
			[Token(Token = "0x4001D0D")]
			PingPong
		}

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TransitionHelper.TweenType _tweenType;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TweenMethods.TweenFunction _tweenFunction;

		[Token(Token = "0x17000376")]
		public GameObject Target
		{
			[Token(Token = "0x600192E")]
			[Address(RVA = "0xBEE6F4", Offset = "0xBEE6F4", VA = "0xBEE6F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600192F")]
			[Address(RVA = "0xBEE6FC", Offset = "0xBEE6FC", VA = "0xBEE6FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000377")]
		public float Progress
		{
			[Token(Token = "0x6001930")]
			[Address(RVA = "0xBEE704", Offset = "0xBEE704", VA = "0xBEE704")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001931")]
			[Address(RVA = "0xBEE70C", Offset = "0xBEE70C", VA = "0xBEE70C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000378")]
		public float ProgressTweened
		{
			[Token(Token = "0x6001932")]
			[Address(RVA = "0xBEE714", Offset = "0xBEE714", VA = "0xBEE714")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001933")]
			[Address(RVA = "0xBEE71C", Offset = "0xBEE71C", VA = "0xBEE71C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000379")]
		public float Delay
		{
			[Token(Token = "0x6001934")]
			[Address(RVA = "0xBEE724", Offset = "0xBEE724", VA = "0xBEE724")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001935")]
			[Address(RVA = "0xBEE72C", Offset = "0xBEE72C", VA = "0xBEE72C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037A")]
		public float Duration
		{
			[Token(Token = "0x6001936")]
			[Address(RVA = "0xBEE734", Offset = "0xBEE734", VA = "0xBEE734")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001937")]
			[Address(RVA = "0xBEE73C", Offset = "0xBEE73C", VA = "0xBEE73C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037B")]
		public TransitionHelper.TweenType TweenType
		{
			[Token(Token = "0x6001938")]
			[Address(RVA = "0xBEE744", Offset = "0xBEE744", VA = "0xBEE744")]
			get
			{
				return default(TransitionHelper.TweenType);
			}
			[Token(Token = "0x6001939")]
			[Address(RVA = "0xBEE74C", Offset = "0xBEE74C", VA = "0xBEE74C")]
			set
			{
			}
		}

		[Token(Token = "0x1700037C")]
		public TimeUpdateMethodType TimeUpdateMethod
		{
			[Token(Token = "0x600193A")]
			[Address(RVA = "0xBEE774", Offset = "0xBEE774", VA = "0xBEE774")]
			[CompilerGenerated]
			get
			{
				return default(TimeUpdateMethodType);
			}
			[Token(Token = "0x600193B")]
			[Address(RVA = "0xBEE77C", Offset = "0xBEE77C", VA = "0xBEE77C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037D")]
		public LoopModeType LoopMode
		{
			[Token(Token = "0x600193C")]
			[Address(RVA = "0xBEE784", Offset = "0xBEE784", VA = "0xBEE784")]
			[CompilerGenerated]
			get
			{
				return default(LoopModeType);
			}
			[Token(Token = "0x600193D")]
			[Address(RVA = "0xBEE78C", Offset = "0xBEE78C", VA = "0xBEE78C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037E")]
		public TransitionModeType TransitionMode
		{
			[Token(Token = "0x600193E")]
			[Address(RVA = "0xBEE794", Offset = "0xBEE794", VA = "0xBEE794")]
			[CompilerGenerated]
			get
			{
				return default(TransitionModeType);
			}
			[Token(Token = "0x600193F")]
			[Address(RVA = "0xBEE79C", Offset = "0xBEE79C", VA = "0xBEE79C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public AnimationCurve AnimationCurve
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0xBEE7A4", Offset = "0xBEE7A4", VA = "0xBEE7A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001941")]
			[Address(RVA = "0xBEE7AC", Offset = "0xBEE7AC", VA = "0xBEE7AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public CoordinateSpaceType CoordinateSpace
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0xBEE7B4", Offset = "0xBEE7B4", VA = "0xBEE7B4")]
			[CompilerGenerated]
			get
			{
				return default(CoordinateSpaceType);
			}
			[Token(Token = "0x6001943")]
			[Address(RVA = "0xBEE7BC", Offset = "0xBEE7BC", VA = "0xBEE7BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public TransitionStep Parent
		{
			[Token(Token = "0x6001944")]
			[Address(RVA = "0xBEE7C4", Offset = "0xBEE7C4", VA = "0xBEE7C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001945")]
			[Address(RVA = "0xBEE7CC", Offset = "0xBEE7CC", VA = "0xBEE7CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public Action<TransitionStep> OnStart
		{
			[Token(Token = "0x6001946")]
			[Address(RVA = "0xBEE7D4", Offset = "0xBEE7D4", VA = "0xBEE7D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001947")]
			[Address(RVA = "0xBEE7DC", Offset = "0xBEE7DC", VA = "0xBEE7DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000383")]
		public Action<TransitionStep> OnUpdate
		{
			[Token(Token = "0x6001948")]
			[Address(RVA = "0xBEE7E4", Offset = "0xBEE7E4", VA = "0xBEE7E4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xBEE7EC", Offset = "0xBEE7EC", VA = "0xBEE7EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000384")]
		public Action<TransitionStep> OnComplete
		{
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xBEE7F4", Offset = "0xBEE7F4", VA = "0xBEE7F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600194B")]
			[Address(RVA = "0xBEE7FC", Offset = "0xBEE7FC", VA = "0xBEE7FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public object UserData
		{
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xBEE804", Offset = "0xBEE804", VA = "0xBEE804")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600194D")]
			[Address(RVA = "0xBEE80C", Offset = "0xBEE80C", VA = "0xBEE80C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public bool IsStopped
		{
			[Token(Token = "0x600194E")]
			[Address(RVA = "0xBEE814", Offset = "0xBEE814", VA = "0xBEE814")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600194F")]
			[Address(RVA = "0xBEE81C", Offset = "0xBEE81C", VA = "0xBEE81C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000387")]
		public bool IsPaused
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xBEE828", Offset = "0xBEE828", VA = "0xBEE828")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xBEE830", Offset = "0xBEE830", VA = "0xBEE830")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xBE9AE4", Offset = "0xBE9AE4", VA = "0xBE9AE4")]
		public TransitionStep([Optional] GameObject target, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xBEE83C", Offset = "0xBEE83C", VA = "0xBEE83C")]
		public TransitionStep AddOnStartAction(Action<TransitionStep> action)
		{
			return null;
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xBEE8D8", Offset = "0xBEE8D8", VA = "0xBEE8D8")]
		public TransitionStep AddOnUpdateAction(Action<TransitionStep> action)
		{
			return null;
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xBEE974", Offset = "0xBEE974", VA = "0xBEE974")]
		public TransitionStep AddOnCompleteAction(Action<TransitionStep> action)
		{
			return null;
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xBE6250", Offset = "0xBE6250", VA = "0xBE6250")]
		public TransitionStep AddOnCompleteAction(Action<TransitionStep> action, object userData)
		{
			return null;
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xBEEA10", Offset = "0xBEEA10", VA = "0xBEEA10")]
		public TransitionStep AddOnStartTransitionStep(TransitionStep transitionStep)
		{
			return null;
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xBEEAE4", Offset = "0xBEEAE4", VA = "0xBEEAE4")]
		public TransitionStep AddOnCompleteTransitionStep(TransitionStep transitionStep)
		{
			return null;
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xBE6F90", Offset = "0xBE6F90", VA = "0xBE6F90")]
		public TransitionStep ChainCustomTransitionStep(float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, bool runAtStart = false, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
			return null;
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xBE69D0", Offset = "0xBE69D0", VA = "0xBE69D0")]
		public TransitionStep GetChainRoot()
		{
			return null;
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xBEB280", Offset = "0xBEB280", VA = "0xBEB280")]
		public void AddToChain(TransitionStep parent, bool runAtStart)
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xBEA4CC", Offset = "0xBEA4CC", VA = "0xBEA4CC", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xBEEBB8", Offset = "0xBEEBB8", VA = "0xBEEBB8", Slot = "5")]
		public virtual void Start(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xBEEBC4", Offset = "0xBEEBC4", VA = "0xBEEBC4", Slot = "6")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xBEEBD0", Offset = "0xBEEBD0", VA = "0xBEEBD0", Slot = "7")]
		protected virtual IEnumerator TransitionLoop()
		{
			return null;
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xBEEC6C", Offset = "0xBEEC6C", VA = "0xBEEC6C", Slot = "8")]
		protected virtual void TransitionStarted()
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xBED578", Offset = "0xBED578", VA = "0xBED578", Slot = "9")]
		protected virtual void TransitionCompleted()
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xBEDAE4", Offset = "0xBEDAE4", VA = "0xBEDAE4")]
		public void SetProgressToStart()
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xBEDADC", Offset = "0xBEDADC", VA = "0xBEDADC")]
		public void SetProgressToEnd()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xBEDAEC", Offset = "0xBEDAEC", VA = "0xBEDAEC")]
		public void SetProgress(float progress)
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xBEECC0", Offset = "0xBEECC0", VA = "0xBEECC0", Slot = "10")]
		protected virtual void ProgressUpdated()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xBED374", Offset = "0xBED374", VA = "0xBED374")]
		protected float ValueFromProgressTweened(float start, float end)
		{
			return default(float);
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xBEEC8C", Offset = "0xBEEC8C", VA = "0xBEEC8C")]
		protected float ValueFromProgress(float start, float end)
		{
			return default(float);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xBEECC4", Offset = "0xBEECC4", VA = "0xBEECC4")]
		private float ValueFromProgressAnimationCurve(float start, float end)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200049B")]
	public abstract class TransitionStepValue<T> : TransitionStep where T : struct
	{
		[Token(Token = "0x1700038A")]
		public T StartValue
		{
			[Token(Token = "0x600196F")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001970")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700038B")]
		public T EndValue
		{
			[Token(Token = "0x6001971")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001972")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700038C")]
		public T Value
		{
			[Token(Token = "0x6001973")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001974")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700038D")]
		public T OriginalValue
		{
			[Token(Token = "0x6001975")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001976")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001977")]
		public TransitionStepValue([Optional] GameObject target, float delay = 0f, float duration = 0.5f, TransitionModeType transitionMode = TransitionModeType.Specified, TimeUpdateMethodType timeUpdateMethod = TimeUpdateMethodType.GameTime, TransitionHelper.TweenType tweenType = TransitionHelper.TweenType.linear, [Optional] AnimationCurve animationCurve, CoordinateSpaceType coordinateSpace = CoordinateSpaceType.Global, [Optional] Action<TransitionStep> onStart, [Optional] Action<TransitionStep> onUpdate, [Optional] Action<TransitionStep> onComplete)
		{
		}

		[Token(Token = "0x6001978")]
		public virtual T GetCurrent()
		{
			return (T)null;
		}

		[Token(Token = "0x6001979")]
		public virtual void SetCurrent(T value)
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components
{
	[Token(Token = "0x200049C")]
	public abstract class TransitionBase : MonoBehaviour
	{
		[Token(Token = "0x200049D")]
		public enum TransitionModeType
		{
			[Token(Token = "0x4001D20")]
			None,
			[Token(Token = "0x4001D21")]
			In,
			[Token(Token = "0x4001D22")]
			Out
		}

		[Serializable]
		[Token(Token = "0x200049E")]
		public class TransitionSettings
		{
			[Token(Token = "0x4001D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool AutoRun;

			[Token(Token = "0x4001D24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool TransitionChildren;

			[Token(Token = "0x4001D25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool MustTriggerDirect;

			[Token(Token = "0x4001D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Delay;

			[Token(Token = "0x4001D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Duration;

			[Token(Token = "0x4001D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public TransitionStep.TimeUpdateMethodType TimeUpdateMethod;

			[Token(Token = "0x4001D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TransitionHelper.TweenType TransitionType;

			[Token(Token = "0x4001D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve AnimationCurve;

			[Token(Token = "0x4001D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public TransitionStep.LoopModeType LoopMode;

			[Token(Token = "0x4001D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TransitionStepEvent OnTransitionStart;

			[Token(Token = "0x4001D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TransitionStepEvent OnTransitionUpdate;

			[Token(Token = "0x4001D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public TransitionStepEvent OnTransitionComplete;

			[Token(Token = "0x6001993")]
			[Address(RVA = "0xBEF9F8", Offset = "0xBEF9F8", VA = "0xBEF9F8")]
			public TransitionSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200049F")]
		public class TransitionStepEvent : UnityEvent<TransitionStep>
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0xBEFA4C", Offset = "0xBEFA4C", VA = "0xBEFA4C")]
			public TransitionStepEvent()
			{
			}
		}

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool InitForTransitionIn;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool AutoRun;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool RepeatWhenEnabled;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TransitionSettings TransitionInConfig;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TransitionSettings TransitionOutConfig;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _isInitialStateSet;

		[Token(Token = "0x1700038E")]
		public TransitionModeType TransitionMode
		{
			[Token(Token = "0x600197A")]
			[Address(RVA = "0xBEF1F4", Offset = "0xBEF1F4", VA = "0xBEF1F4")]
			[CompilerGenerated]
			get
			{
				return default(TransitionModeType);
			}
			[Token(Token = "0x600197B")]
			[Address(RVA = "0xBEF1FC", Offset = "0xBEF1FC", VA = "0xBEF1FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700038F")]
		public TransitionStep CurrentTransitionStep
		{
			[Token(Token = "0x600197C")]
			[Address(RVA = "0xBEF204", Offset = "0xBEF204", VA = "0xBEF204")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600197D")]
			[Address(RVA = "0xBEF20C", Offset = "0xBEF20C", VA = "0xBEF20C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xBEF214", Offset = "0xBEF214", VA = "0xBEF214", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xBEF278", Offset = "0xBEF278", VA = "0xBEF278", Slot = "5")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xBEF22C", Offset = "0xBEF22C", VA = "0xBEF22C")]
		private void Setup()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xBEF27C", Offset = "0xBEF27C", VA = "0xBEF27C", Slot = "6")]
		public virtual void InitTransitionIn()
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xBEF308", Offset = "0xBEF308", VA = "0xBEF308", Slot = "7")]
		public virtual void TransitionIn()
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xBEF35C", Offset = "0xBEF35C", VA = "0xBEF35C", Slot = "8")]
		public virtual void InitTransitionOut()
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xBEF3C8", Offset = "0xBEF3C8", VA = "0xBEF3C8", Slot = "9")]
		public virtual void TransitionOut()
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xBEF2E8", Offset = "0xBEF2E8", VA = "0xBEF2E8")]
		private void SetupInitialStateOnce()
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xBEF41C", Offset = "0xBEF41C", VA = "0xBEF41C", Slot = "10")]
		public virtual void SetupInitialState()
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xBEF420", Offset = "0xBEF420", VA = "0xBEF420", Slot = "11")]
		protected virtual void TransitionInStart(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xBEF48C", Offset = "0xBEF48C", VA = "0xBEF48C", Slot = "12")]
		protected virtual void TransitionOutStart(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xBEF4F8", Offset = "0xBEF4F8", VA = "0xBEF4F8", Slot = "13")]
		protected virtual void TransitionInUpdate(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xBEF564", Offset = "0xBEF564", VA = "0xBEF564", Slot = "14")]
		protected virtual void TransitionOutUpdate(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xBEF5D0", Offset = "0xBEF5D0", VA = "0xBEF5D0", Slot = "15")]
		protected virtual void TransitionInComplete(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xBEF644", Offset = "0xBEF644", VA = "0xBEF644", Slot = "16")]
		protected virtual void TransitionOutComplete(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x600198D")]
		public abstract TransitionStep CreateTransitionStep();

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xBEF6B0", Offset = "0xBEF6B0", VA = "0xBEF6B0", Slot = "18")]
		public virtual TransitionStep CreateTransitionStepIn()
		{
			return null;
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xBEF704", Offset = "0xBEF704", VA = "0xBEF704", Slot = "19")]
		public virtual void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xBEF84C", Offset = "0xBEF84C", VA = "0xBEF84C", Slot = "20")]
		public virtual TransitionStep CreateTransitionStepOut()
		{
			return null;
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xBEF8A0", Offset = "0xBEF8A0", VA = "0xBEF8A0", Slot = "21")]
		public virtual void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xBEF9E8", Offset = "0xBEF9E8", VA = "0xBEF9E8")]
		protected TransitionBase()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public class TransitionManager : MonoBehaviour
	{
		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject[] DefaultSceneTransitions;

		[Token(Token = "0x17000390")]
		public static TransitionManager Instance
		{
			[Token(Token = "0x6001995")]
			[Address(RVA = "0xBEFA94", Offset = "0xBEFA94", VA = "0xBEFA94")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001996")]
			[Address(RVA = "0xBEFADC", Offset = "0xBEFADC", VA = "0xBEFADC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000391")]
		public static bool IsActive
		{
			[Token(Token = "0x6001997")]
			[Address(RVA = "0xBEFB34", Offset = "0xBEFB34", VA = "0xBEFB34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xBEFBC0", Offset = "0xBEFBC0", VA = "0xBEFBC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xBEFD30", Offset = "0xBEFD30", VA = "0xBEFD30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xBEFDC0", Offset = "0xBEFDC0", VA = "0xBEFDC0")]
		public void TransitionOutAndLoadScene(string sceneName)
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xBEFE94", Offset = "0xBEFE94", VA = "0xBEFE94")]
		public void TransitionOutAndLoadScene(string sceneName, params UnityEngine.GameObject[] transitionGameObjects)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xBF005C", Offset = "0xBF005C", VA = "0xBF005C")]
		public void TransitionOut()
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xBEFEC0", Offset = "0xBEFEC0", VA = "0xBEFEC0")]
		public float TransitionOut(UnityEngine.GameObject[] transitionGameObjects)
		{
			return default(float);
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xBEFFA4", Offset = "0xBEFFA4", VA = "0xBEFFA4")]
		public void LoadSceneDelayed(string sceneName, float delay = 0f)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xBF0118", Offset = "0xBF0118", VA = "0xBF0118")]
		private static IEnumerator LoadSceneDelayedCoroutine(string sceneName, float delay)
		{
			return null;
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xBF01C4", Offset = "0xBF01C4", VA = "0xBF01C4")]
		public TransitionManager()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.Screen
{
	[Token(Token = "0x20004A2")]
	[ExecuteInEditMode]
	public class FadeScreen : TransitionScreenBase
	{
		[Serializable]
		[Token(Token = "0x20004A3")]
		public class InSettings
		{
			[Token(Token = "0x4001D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool SkipOnCrossTransition;

			[Token(Token = "0x60019AB")]
			[Address(RVA = "0xBF0668", Offset = "0xBF0668", VA = "0xBF0668")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004A4")]
		public class OutSettings
		{
			[Token(Token = "0x4001D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TransitionStepScreen.SceneChangeModeType SceneChangeMode;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string SceneToLoad;

			[Token(Token = "0x60019AC")]
			[Address(RVA = "0xBF0684", Offset = "0xBF0684", VA = "0xBF0684")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InSettings InConfig;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OutSettings OutConfig;

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xBF02D4", Offset = "0xBF02D4", VA = "0xBF02D4", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xBF0388", Offset = "0xBF0388", VA = "0xBF0388", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xBF04E0", Offset = "0xBF04E0", VA = "0xBF04E0", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xBF0648", Offset = "0xBF0648", VA = "0xBF0648")]
		public FadeScreen()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	[ExecuteInEditMode]
	public class WipeScreen : TransitionScreenBase
	{
		[Serializable]
		[Token(Token = "0x20004A6")]
		public class InSettings
		{
			[Token(Token = "0x4001D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Texture2D MaskTexture;

			[Token(Token = "0x4001D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool InvertMask;

			[Token(Token = "0x4001D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float Softness;

			[Token(Token = "0x4001D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool SkipOnCrossTransition;

			[Token(Token = "0x60019B1")]
			[Address(RVA = "0xBF0934", Offset = "0xBF0934", VA = "0xBF0934")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004A7")]
		public class OutSettings
		{
			[Token(Token = "0x4001D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Texture2D MaskTexture;

			[Token(Token = "0x4001D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool InvertMask;

			[Token(Token = "0x4001D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float Softness;

			[Token(Token = "0x4001D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TransitionStepScreen.SceneChangeModeType SceneChangeMode;

			[Token(Token = "0x4001D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string SceneToLoad;

			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xBF094C", Offset = "0xBF094C", VA = "0xBF094C")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InSettings InConfig;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OutSettings OutConfig;

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xBF0698", Offset = "0xBF0698", VA = "0xBF0698", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xBF0754", Offset = "0xBF0754", VA = "0xBF0754", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xBF0834", Offset = "0xBF0834", VA = "0xBF0834", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xBF0924", Offset = "0xBF0924", VA = "0xBF0924")]
		public WipeScreen()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.Screen.AbstractClasses
{
	[Token(Token = "0x20004A8")]
	[ExecuteInEditMode]
	public abstract class TransitionScreenBase : TransitionBase
	{
		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xBF0440", Offset = "0xBF0440", VA = "0xBF0440", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xBF05A8", Offset = "0xBF05A8", VA = "0xBF05A8", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xBF0658", Offset = "0xBF0658", VA = "0xBF0658")]
		protected TransitionScreenBase()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.GameObject
{
	[Token(Token = "0x20004A9")]
	public class TransitionAnimation : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004AA")]
		public class InSettings
		{
			[Token(Token = "0x4001D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float Speed;

			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xBF0D0C", Offset = "0xBF0D0C", VA = "0xBF0D0C")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004AB")]
		public class OutSettings
		{
			[Token(Token = "0x4001D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float Speed;

			[Token(Token = "0x60019BD")]
			[Address(RVA = "0xBF0D1C", Offset = "0xBF0D1C", VA = "0xBF0D1C")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings InConfig;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings OutConfig;

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xBF095C", Offset = "0xBF095C", VA = "0xBF095C", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xBF0A08", Offset = "0xBF0A08", VA = "0xBF0A08", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xBF0ACC", Offset = "0xBF0ACC", VA = "0xBF0ACC", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xBF0B90", Offset = "0xBF0B90", VA = "0xBF0B90", Slot = "6")]
		public override void InitTransitionIn()
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xBF0C48", Offset = "0xBF0C48", VA = "0xBF0C48", Slot = "8")]
		public override void InitTransitionOut()
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xBF0CEC", Offset = "0xBF0CEC", VA = "0xBF0CEC")]
		public TransitionAnimation()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	public class TransitionColor : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004AD")]
		public class InSettings
		{
			[Token(Token = "0x4001D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Gradient Gradient;

			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xBF0FB0", Offset = "0xBF0FB0", VA = "0xBF0FB0")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004AE")]
		public class OutSettings
		{
			[Token(Token = "0x4001D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Gradient Gradient;

			[Token(Token = "0x60019C4")]
			[Address(RVA = "0xBF0FB8", Offset = "0xBF0FB8", VA = "0xBF0FB8")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings InConfig;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color _originalColor;

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xBF0D2C", Offset = "0xBF0D2C", VA = "0xBF0D2C", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xBF0DC0", Offset = "0xBF0DC0", VA = "0xBF0DC0", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xBF0E50", Offset = "0xBF0E50", VA = "0xBF0E50", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xBF0EF8", Offset = "0xBF0EF8", VA = "0xBF0EF8", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0xBF0FA0", Offset = "0xBF0FA0", VA = "0xBF0FA0")]
		public TransitionColor()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	public class TransitionCustom : TransitionGameObjectBase
	{
		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xBF0FC0", Offset = "0xBF0FC0", VA = "0xBF0FC0", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xBF1050", Offset = "0xBF1050", VA = "0xBF1050")]
		public TransitionCustom()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	public class TransitionFade : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004B1")]
		public class InSettings
		{
			[Token(Token = "0x4001D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float StartTransparency;

			[Token(Token = "0x60019CC")]
			[Address(RVA = "0xBF1310", Offset = "0xBF1310", VA = "0xBF1310")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004B2")]
		public class OutSettings
		{
			[Token(Token = "0x4001D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float EndTransparency;

			[Token(Token = "0x60019CD")]
			[Address(RVA = "0xBF1318", Offset = "0xBF1318", VA = "0xBF1318")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings FadeInConfig;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings FadeOutConfig;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _originalTransparency;

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xBF1060", Offset = "0xBF1060", VA = "0xBF1060", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xBF1100", Offset = "0xBF1100", VA = "0xBF1100", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xBF1198", Offset = "0xBF1198", VA = "0xBF1198", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xBF1248", Offset = "0xBF1248", VA = "0xBF1248", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xBF1300", Offset = "0xBF1300", VA = "0xBF1300")]
		public TransitionFade()
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public class TransitionMove : TransitionGameObjectBase
	{
		[Token(Token = "0x20004B4")]
		public enum MoveModeType
		{
			[Token(Token = "0x4001D60")]
			Global,
			[Token(Token = "0x4001D61")]
			Local,
			[Token(Token = "0x4001D62")]
			AnchoredPosition
		}

		[Token(Token = "0x20004B5")]
		public enum MoveType
		{
			[Token(Token = "0x4001D64")]
			FixedPosition,
			[Token(Token = "0x4001D65")]
			Delta
		}

		[Serializable]
		[Token(Token = "0x20004B6")]
		public class InSettings
		{
			[Token(Token = "0x4001D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MoveType StartPositionType;

			[Token(Token = "0x4001D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 StartPosition;

			[Token(Token = "0x60019D4")]
			[Address(RVA = "0xBF16C0", Offset = "0xBF16C0", VA = "0xBF16C0")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004B7")]
		public class OutSettings
		{
			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MoveType EndPositionType;

			[Token(Token = "0x4001D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 EndPosition;

			[Token(Token = "0x60019D5")]
			[Address(RVA = "0xBF16D0", Offset = "0xBF16D0", VA = "0xBF16D0")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MoveModeType MoveMode;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InSettings InConfig;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _originalPosition;

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xBF1320", Offset = "0xBF1320", VA = "0xBF1320", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xBF13C8", Offset = "0xBF13C8", VA = "0xBF13C8", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xBF14AC", Offset = "0xBF14AC", VA = "0xBF14AC", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xBF15AC", Offset = "0xBF15AC", VA = "0xBF15AC", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xBF148C", Offset = "0xBF148C", VA = "0xBF148C")]
		private TransitionStep.CoordinateSpaceType ConvertMoveMode()
		{
			return default(TransitionStep.CoordinateSpaceType);
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xBF16B0", Offset = "0xBF16B0", VA = "0xBF16B0")]
		public TransitionMove()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public class TransitionMoveTraget : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004B9")]
		public class InSettings
		{
			[Token(Token = "0x4001D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.GameObject StartTarget;

			[Token(Token = "0x4001D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool MoveX;

			[Token(Token = "0x4001D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool MoveY;

			[Token(Token = "0x4001D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			public bool MoveZ;

			[Token(Token = "0x60019DB")]
			[Address(RVA = "0xBF1B1C", Offset = "0xBF1B1C", VA = "0xBF1B1C")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004BA")]
		public class OutSettings
		{
			[Token(Token = "0x4001D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.GameObject EndTarget;

			[Token(Token = "0x4001D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool MoveX;

			[Token(Token = "0x4001D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool MoveY;

			[Token(Token = "0x4001D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			public bool MoveZ;

			[Token(Token = "0x60019DC")]
			[Address(RVA = "0xBF1B34", Offset = "0xBF1B34", VA = "0xBF1B34")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings MoveInConfig;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings MoveOutConfig;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _originalPosition;

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xBF16E0", Offset = "0xBF16E0", VA = "0xBF16E0", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xBF1788", Offset = "0xBF1788", VA = "0xBF1788", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xBF182C", Offset = "0xBF182C", VA = "0xBF182C", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xBF1988", Offset = "0xBF1988", VA = "0xBF1988", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xBF1B0C", Offset = "0xBF1B0C", VA = "0xBF1B0C")]
		public TransitionMoveTraget()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	public class TransitionRotate : TransitionGameObjectBase
	{
		[Token(Token = "0x20004BC")]
		public enum RotationModeType
		{
			[Token(Token = "0x4001D7A")]
			Global,
			[Token(Token = "0x4001D7B")]
			Local
		}

		[Serializable]
		[Token(Token = "0x20004BD")]
		public class InSettings
		{
			[Token(Token = "0x4001D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 StartRotation;

			[Token(Token = "0x60019E3")]
			[Address(RVA = "0xBF1E74", Offset = "0xBF1E74", VA = "0xBF1E74")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004BE")]
		public class OutSettings
		{
			[Token(Token = "0x4001D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 EndRotation;

			[Token(Token = "0x60019E4")]
			[Address(RVA = "0xBF1E84", Offset = "0xBF1E84", VA = "0xBF1E84")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RotationModeType RotationMode;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InSettings InConfig;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _originalRotation;

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xBF1B4C", Offset = "0xBF1B4C", VA = "0xBF1B4C", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xBF1BF4", Offset = "0xBF1BF4", VA = "0xBF1BF4", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xBF1CBC", Offset = "0xBF1CBC", VA = "0xBF1CBC", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xBF1D8C", Offset = "0xBF1D8C", VA = "0xBF1D8C", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xBF1CAC", Offset = "0xBF1CAC", VA = "0xBF1CAC")]
		private TransitionStep.CoordinateSpaceType ConvertRotationMode()
		{
			return default(TransitionStep.CoordinateSpaceType);
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xBF1E60", Offset = "0xBF1E60", VA = "0xBF1E60")]
		public TransitionRotate()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class TransitionScale : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004C0")]
		public class InSettings
		{
			[Token(Token = "0x4001D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 StartScale;

			[Token(Token = "0x60019EA")]
			[Address(RVA = "0xBF2174", Offset = "0xBF2174", VA = "0xBF2174")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004C1")]
		public class OutSettings
		{
			[Token(Token = "0x4001D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 EndScale;

			[Token(Token = "0x60019EB")]
			[Address(RVA = "0xBF2184", Offset = "0xBF2184", VA = "0xBF2184")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings InConfig;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _originalScale;

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xBF1E94", Offset = "0xBF1E94", VA = "0xBF1E94", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xBF1F3C", Offset = "0xBF1F3C", VA = "0xBF1F3C", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xBF1FE0", Offset = "0xBF1FE0", VA = "0xBF1FE0", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xBF20A0", Offset = "0xBF20A0", VA = "0xBF20A0", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xBF2164", Offset = "0xBF2164", VA = "0xBF2164")]
		public TransitionScale()
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public class TransitionVolume : TransitionGameObjectBase
	{
		[Serializable]
		[Token(Token = "0x20004C3")]
		public class InSettings
		{
			[Token(Token = "0x4001D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float StartVolume;

			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xBF2444", Offset = "0xBF2444", VA = "0xBF2444")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004C4")]
		public class OutSettings
		{
			[Token(Token = "0x4001D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float EndVolume;

			[Token(Token = "0x60019F2")]
			[Address(RVA = "0xBF244C", Offset = "0xBF244C", VA = "0xBF244C")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InSettings InConfig;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _originalVolume;

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xBF2194", Offset = "0xBF2194", VA = "0xBF2194", Slot = "10")]
		public override void SetupInitialState()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0xBF2234", Offset = "0xBF2234", VA = "0xBF2234", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0xBF22CC", Offset = "0xBF22CC", VA = "0xBF22CC", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0xBF237C", Offset = "0xBF237C", VA = "0xBF237C", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0xBF2434", Offset = "0xBF2434", VA = "0xBF2434")]
		public TransitionVolume()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.GameObject.AbstractClasses
{
	[Token(Token = "0x20004C5")]
	public abstract class TransitionGameObjectBase : TransitionBase
	{
		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.GameObject Target;

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xBF2454", Offset = "0xBF2454", VA = "0xBF2454")]
		public void Awake()
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xBF0CFC", Offset = "0xBF0CFC", VA = "0xBF0CFC")]
		protected TransitionGameObjectBase()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.Camera
{
	[Token(Token = "0x20004C6")]
	[ExecuteInEditMode]
	public class FadeCamera : TransitionCameraBase
	{
		[Serializable]
		[Token(Token = "0x20004C7")]
		public class InSettings
		{
			[Token(Token = "0x4001D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x60019F8")]
			[Address(RVA = "0xBF2920", Offset = "0xBF2920", VA = "0xBF2920")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004C8")]
		public class OutSettings
		{
			[Token(Token = "0x4001D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xBF2928", Offset = "0xBF2928", VA = "0xBF2928")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InSettings InConfig;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material _material;

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xBF24F0", Offset = "0xBF24F0", VA = "0xBF24F0")]
		public void Awake()
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xBF2628", Offset = "0xBF2628", VA = "0xBF2628")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0xBF2900", Offset = "0xBF2900", VA = "0xBF2900")]
		public FadeCamera()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	[ExecuteInEditMode]
	public class WipeCamera : TransitionCameraBase
	{
		[Serializable]
		[Token(Token = "0x20004CA")]
		public class InSettings
		{
			[Token(Token = "0x4001D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Texture2D MaskTexture;

			[Token(Token = "0x4001D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool InvertMask;

			[Token(Token = "0x4001D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float Softness;

			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xBF2E4C", Offset = "0xBF2E4C", VA = "0xBF2E4C")]
			public InSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004CB")]
		public class OutSettings
		{
			[Token(Token = "0x4001D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D Texture;

			[Token(Token = "0x4001D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color Color;

			[Token(Token = "0x4001D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Texture2D MaskTexture;

			[Token(Token = "0x4001D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool InvertMask;

			[Token(Token = "0x4001D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float Softness;

			[Token(Token = "0x60019FE")]
			[Address(RVA = "0xBF2E5C", Offset = "0xBF2E5C", VA = "0xBF2E5C")]
			public OutSettings()
			{
			}
		}

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InSettings InConfig;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OutSettings OutConfig;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material _material;

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0xBF2930", Offset = "0xBF2930", VA = "0xBF2930")]
		public void Awake()
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xBF2A68", Offset = "0xBF2A68", VA = "0xBF2A68")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xBF2E3C", Offset = "0xBF2E3C", VA = "0xBF2E3C")]
		public WipeCamera()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Transitions.Components.Camera.AbstractClasses
{
	[Token(Token = "0x20004CC")]
	[RequireComponent(typeof(UnityEngine.Camera))]
	[ExecuteInEditMode]
	public abstract class TransitionCameraBase : TransitionBase
	{
		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool SkipIdleRendering;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected RenderTexture CrossTransitionRenderTexture;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected UnityEngine.Camera CrossTransitionTarget;

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xBF2E6C", Offset = "0xBF2E6C", VA = "0xBF2E6C")]
		public void CrossTransition(UnityEngine.Camera target)
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xBF2E90", Offset = "0xBF2E90", VA = "0xBF2E90", Slot = "12")]
		protected override void TransitionOutStart(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xBF2FAC", Offset = "0xBF2FAC", VA = "0xBF2FAC", Slot = "16")]
		protected override void TransitionOutComplete(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xBF31C8", Offset = "0xBF31C8", VA = "0xBF31C8", Slot = "17")]
		public override TransitionStep CreateTransitionStep()
		{
			return null;
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xBF3258", Offset = "0xBF3258", VA = "0xBF3258", Slot = "19")]
		public override void SetupTransitionStepIn(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xBF32F8", Offset = "0xBF32F8", VA = "0xBF32F8", Slot = "21")]
		public override void SetupTransitionStepOut(TransitionStep transitionStep)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xBF2910", Offset = "0xBF2910", VA = "0xBF2910")]
		protected TransitionCameraBase()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Shake
{
	[Token(Token = "0x20004CD")]
	public class ShakeHelper
	{
		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<int> ActiveShakes;

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xBF3398", Offset = "0xBF3398", VA = "0xBF3398")]
		public static void Shake(MonoBehaviour caller, Transform transform, float duration, Vector3 range, float decayStart = 1f)
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xBF3450", Offset = "0xBF3450", VA = "0xBF3450")]
		private static IEnumerator ShakeCoroutine(Transform transform, float duration, Vector3 range, float decayStart = 1f)
		{
			return null;
		}
	}
}
namespace BeautifulTransitions.Scripts.Shake.Components
{
	[Token(Token = "0x20004CF")]
	public class ShakeCamera : MonoBehaviour
	{
		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Camera> Cameras;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Duration;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float DecayStart;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Range;

		[Token(Token = "0x17000396")]
		public static ShakeCamera Instance
		{
			[Token(Token = "0x6001A0F")]
			[Address(RVA = "0xBF39F0", Offset = "0xBF39F0", VA = "0xBF39F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A10")]
			[Address(RVA = "0xBF3A38", Offset = "0xBF3A38", VA = "0xBF3A38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000397")]
		public static bool IsActive
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0xBF3A90", Offset = "0xBF3A90", VA = "0xBF3A90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xBF3B1C", Offset = "0xBF3B1C", VA = "0xBF3B1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xBF3E90", Offset = "0xBF3E90", VA = "0xBF3E90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xBF3C94", Offset = "0xBF3C94", VA = "0xBF3C94")]
		private void Setup()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xBF3F20", Offset = "0xBF3F20", VA = "0xBF3F20")]
		public void Shake()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xBE7C60", Offset = "0xBE7C60", VA = "0xBE7C60")]
		public void Shake(float duration, Vector3 range, float decayStart)
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xBF3F30", Offset = "0xBF3F30", VA = "0xBF3F30")]
		public ShakeCamera()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.Helper
{
	[Token(Token = "0x20004D0")]
	public class TweenMethods : MonoBehaviour
	{
		[Token(Token = "0x20004D1")]
		public delegate float TweenFunction(float start, float end, float value);

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xBF3F9C", Offset = "0xBF3F9C", VA = "0xBF3F9C")]
		public static float linear(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xBF3FC0", Offset = "0xBF3FC0", VA = "0xBF3FC0")]
		public static float clerp(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xBF4024", Offset = "0xBF4024", VA = "0xBF4024")]
		public static float spring(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xBF40D4", Offset = "0xBF40D4", VA = "0xBF40D4")]
		public static float easeInQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xBF40E8", Offset = "0xBF40E8", VA = "0xBF40E8")]
		public static float easeOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xBF4104", Offset = "0xBF4104", VA = "0xBF4104")]
		public static float easeInOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xBF4158", Offset = "0xBF4158", VA = "0xBF4158")]
		public static float easeInCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xBF4170", Offset = "0xBF4170", VA = "0xBF4170")]
		public static float easeOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xBF4198", Offset = "0xBF4198", VA = "0xBF4198")]
		public static float easeInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xBF41F0", Offset = "0xBF41F0", VA = "0xBF41F0")]
		public static float easeInQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xBF420C", Offset = "0xBF420C", VA = "0xBF420C")]
		public static float easeOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xBF4234", Offset = "0xBF4234", VA = "0xBF4234")]
		public static float easeInOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xBF4290", Offset = "0xBF4290", VA = "0xBF4290")]
		public static float easeInQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xBF42B0", Offset = "0xBF42B0", VA = "0xBF42B0")]
		public static float easeOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xBF42E0", Offset = "0xBF42E0", VA = "0xBF42E0")]
		public static float easeInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xBF4348", Offset = "0xBF4348", VA = "0xBF4348")]
		public static float easeInSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xBF4380", Offset = "0xBF4380", VA = "0xBF4380")]
		public static float easeOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xBF43B4", Offset = "0xBF43B4", VA = "0xBF43B4")]
		public static float easeInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xBF43F8", Offset = "0xBF43F8", VA = "0xBF43F8")]
		public static float easeInExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xBF4430", Offset = "0xBF4430", VA = "0xBF4430")]
		public static float easeOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xBF4468", Offset = "0xBF4468", VA = "0xBF4468")]
		public static float easeInOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xBF44D8", Offset = "0xBF44D8", VA = "0xBF44D8")]
		public static float easeInCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xBF4500", Offset = "0xBF4500", VA = "0xBF4500")]
		public static float easeOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xBF4528", Offset = "0xBF4528", VA = "0xBF4528")]
		public static float easeInOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xBF457C", Offset = "0xBF457C", VA = "0xBF457C")]
		public static float easeInBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xBF45B4", Offset = "0xBF45B4", VA = "0xBF45B4")]
		public static float easeOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xBF467C", Offset = "0xBF467C", VA = "0xBF467C")]
		public static float easeInOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xBF46FC", Offset = "0xBF46FC", VA = "0xBF46FC")]
		public static float easeInBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xBF472C", Offset = "0xBF472C", VA = "0xBF472C")]
		public static float easeOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xBF476C", Offset = "0xBF476C", VA = "0xBF476C")]
		public static float easeInOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xBF47F0", Offset = "0xBF47F0", VA = "0xBF47F0")]
		public static float punch(float amplitude, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xBF4860", Offset = "0xBF4860", VA = "0xBF4860")]
		public static float easeInElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xBF48F0", Offset = "0xBF48F0", VA = "0xBF48F0")]
		public static float easeOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xBF4980", Offset = "0xBF4980", VA = "0xBF4980")]
		public static float easeInOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xBF4A7C", Offset = "0xBF4A7C", VA = "0xBF4A7C")]
		public TweenMethods()
		{
		}
	}
}
namespace BeautifulTransitions.Scripts.DisplayItem
{
	[Token(Token = "0x20004D2")]
	internal class DisplayItemHelper
	{
		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xBF4B6C", Offset = "0xBF4B6C", VA = "0xBF4B6C")]
		public static void SetAttention(GameObject gameObject, bool attention)
		{
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xBF4BE8", Offset = "0xBF4BE8", VA = "0xBF4BE8")]
		public static void SetActiveAnimated(MonoBehaviour caller, GameObject gameObject, bool value)
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xBF4C1C", Offset = "0xBF4C1C", VA = "0xBF4C1C")]
		public static IEnumerator SetActiveAnimatedCoroutine(GameObject gameObject, bool value)
		{
			return null;
		}
	}
}
namespace ffmpegaudioimport
{
	[Token(Token = "0x20004D4")]
	public class FFMPEGAudioImporter : MonoBehaviour
	{
		[Token(Token = "0x20004D5")]
		public enum AudioImportStatus
		{
			[Token(Token = "0x4001DCB")]
			Initialized,
			[Token(Token = "0x4001DCC")]
			LoadingCanPlay,
			[Token(Token = "0x4001DCD")]
			Done_OK,
			[Token(Token = "0x4001DCE")]
			Done_Canceled,
			[Token(Token = "0x4001DCF")]
			Done_Error
		}

		[Token(Token = "0x20004D6")]
		private class ExecuteCallback : AndroidJavaProxy
		{
			[Token(Token = "0x4001DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private FFMPEGAudioImporter load;

			[Token(Token = "0x6001A63")]
			[Address(RVA = "0xBF7ECC", Offset = "0xBF7ECC", VA = "0xBF7ECC")]
			public ExecuteCallback(FFMPEGAudioImporter l)
			{
			}

			[Token(Token = "0x6001A64")]
			[Address(RVA = "0xBFA380", Offset = "0xBFA380", VA = "0xBFA380")]
			public void apply(long executionID, int returnCode)
			{
			}
		}

		[Token(Token = "0x20004D7")]
		private class ImportException : Exception
		{
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0xBF9F14", Offset = "0xBF9F14", VA = "0xBF9F14")]
			public ImportException(string message)
			{
			}
		}

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string filePath;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object userData;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<FFMPEGAudioImporter> callbackOnFinishedLoading;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AndroidJavaObject context;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string namedPipe;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long newExecutionId;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float file_duration;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int file_sample_rate;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int file_channel_count;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int file_total_samples_all_channels;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioClip audioClip;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Stopwatch stopwatch;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int overallPosition;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool isInitialized;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool isCanceled;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		private bool isFullyCanceled;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Queue<Action> executionQueue;

		[Token(Token = "0x1700039A")]
		public AudioImportStatus Status
		{
			[Token(Token = "0x6001A46")]
			[Address(RVA = "0xBF4F1C", Offset = "0xBF4F1C", VA = "0xBF4F1C")]
			[CompilerGenerated]
			get
			{
				return default(AudioImportStatus);
			}
			[Token(Token = "0x6001A47")]
			[Address(RVA = "0xBF4F24", Offset = "0xBF4F24", VA = "0xBF4F24")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700039B")]
		public string Error
		{
			[Token(Token = "0x6001A48")]
			[Address(RVA = "0xBF4F2C", Offset = "0xBF4F2C", VA = "0xBF4F2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A49")]
			[Address(RVA = "0xBF4F34", Offset = "0xBF4F34", VA = "0xBF4F34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xBF4F3C", Offset = "0xBF4F3C", VA = "0xBF4F3C")]
		public AudioClip GetAudioClip()
		{
			return null;
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0xBF4F44", Offset = "0xBF4F44", VA = "0xBF4F44")]
		public string GetID()
		{
			return null;
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0xBF4FB0", Offset = "0xBF4FB0", VA = "0xBF4FB0")]
		public object GetUserData()
		{
			return null;
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0xBF4FB8", Offset = "0xBF4FB8", VA = "0xBF4FB8")]
		public void LoadSong(string filePath, object userData, Action<FFMPEGAudioImporter> callback)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xBF81A4", Offset = "0xBF81A4", VA = "0xBF81A4")]
		public void Cancel()
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0xBF81B0", Offset = "0xBF81B0", VA = "0xBF81B0")]
		private void DoImport()
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xBF7F58", Offset = "0xBF7F58", VA = "0xBF7F58")]
		private void NotifyOfTime(string s)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xBF92C4", Offset = "0xBF92C4", VA = "0xBF92C4")]
		private void CreateClip()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xBF92F8", Offset = "0xBF92F8", VA = "0xBF92F8")]
		private void CancelFFMPEG()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xBF96F0", Offset = "0xBF96F0", VA = "0xBF96F0")]
		private void NoteDone()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xBF91D4", Offset = "0xBF91D4", VA = "0xBF91D4")]
		private void NoteError(Exception e)
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xBF9720", Offset = "0xBF9720", VA = "0xBF9720")]
		private void SetData(float[] floatSampleBuffer)
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0xBF5B88", Offset = "0xBF5B88", VA = "0xBF5B88")]
		private static AndroidJavaObject GetAndroidContext()
		{
			return null;
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xBF5AC8", Offset = "0xBF5AC8", VA = "0xBF5AC8")]
		private void LogImport(string msg)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xBF9DB4", Offset = "0xBF9DB4", VA = "0xBF9DB4")]
		private void LogImportWarning(string msg)
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xBF9114", Offset = "0xBF9114", VA = "0xBF9114")]
		private void LogImportError(string msg)
		{
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xBF5CD4", Offset = "0xBF5CD4", VA = "0xBF5CD4")]
		private void GrabFileInformation()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xBF9E74", Offset = "0xBF9E74", VA = "0xBF9E74")]
		private void CheckNull(string name, object o)
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0xBF9F7C", Offset = "0xBF9F7C", VA = "0xBF9F7C")]
		public void Enqueue(IEnumerator action)
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0xBF90F8", Offset = "0xBF90F8", VA = "0xBF90F8")]
		public void Enqueue(Action action)
		{
		}

		[Token(Token = "0x6001A5E")]
		public void Enqueue<T1>(Action<T1> action, T1 param1)
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0xBFA128", Offset = "0xBFA128", VA = "0xBFA128")]
		private IEnumerator ActionWrapper(Action action)
		{
			return null;
		}

		[Token(Token = "0x6001A60")]
		private IEnumerator ActionWrapper<T1>(Action<T1> action, T1 param1)
		{
			return null;
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0xBFA1C4", Offset = "0xBFA1C4", VA = "0xBFA1C4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0xBFA2F8", Offset = "0xBFA2F8", VA = "0xBFA2F8")]
		public FFMPEGAudioImporter()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x20004DB")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x6001A74")]
		[Address(RVA = "0xBFA71C", Offset = "0xBFA71C", VA = "0xBFA71C")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20004DD")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xBFA908", Offset = "0xBFA908", VA = "0xBFA908")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xBFAADC", Offset = "0xBFAADC", VA = "0xBFAADC")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x20004E0")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0xBFADF4", Offset = "0xBFADF4", VA = "0xBFADF4")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0xBFAF80", Offset = "0xBFAF80", VA = "0xBFAF80")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xBFB10C", Offset = "0xBFB10C", VA = "0xBFB10C")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xBFB2BC", Offset = "0xBFB2BC", VA = "0xBFB2BC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xBFB468", Offset = "0xBFB468", VA = "0xBFB468")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20004E6")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x20004E7")]
		public static class Physics
		{
			[Token(Token = "0x6001A95")]
			[Address(RVA = "0xBFB898", Offset = "0xBFB898", VA = "0xBFB898")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6001A96")]
			[Address(RVA = "0xBFB998", Offset = "0xBFB998", VA = "0xBFB998")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A97")]
			[Address(RVA = "0xBFBA24", Offset = "0xBFBA24", VA = "0xBFBA24")]
			[Preserve]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xBFB73C", Offset = "0xBFB73C", VA = "0xBFB73C")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xBFB7F0", Offset = "0xBFB7F0", VA = "0xBFB7F0")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
namespace ColliderView
{
	[Token(Token = "0x20004E8")]
	internal static class Box2D
	{
		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector2[] verts;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] quads;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector2[] xformVerts;

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xBFBB68", Offset = "0xBFBB68", VA = "0xBFBB68")]
		private static Vector2 Transform(Vector2 vert, BoxCollider2D collider)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xBFBBF8", Offset = "0xBFBBF8", VA = "0xBFBBF8")]
		private static void TransformGeometry(BoxCollider2D collider)
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xBFBD48", Offset = "0xBFBD48", VA = "0xBFBD48")]
		public static void Render(List<Collider2D> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xBFC260", Offset = "0xBFC260", VA = "0xBFC260")]
		private static void RenderLines(List<Collider2D> colliders)
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xBFC3AC", Offset = "0xBFC3AC", VA = "0xBFC3AC")]
		private static void RenderQuads(List<Collider2D> colliders)
		{
		}
	}
	[Token(Token = "0x20004E9")]
	internal static class Box3D
	{
		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] verts;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] quads;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector3[] xformVerts;

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xBFC95C", Offset = "0xBFC95C", VA = "0xBFC95C")]
		private static Vector3 Transform(Vector3 vert, BoxCollider collider)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xBFCA34", Offset = "0xBFCA34", VA = "0xBFCA34")]
		private static Vector3 Transform(Vector3 vert, Bounds bounds)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xBFCAA0", Offset = "0xBFCAA0", VA = "0xBFCAA0")]
		public static void Render(List<Collider> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xBFCEE8", Offset = "0xBFCEE8", VA = "0xBFCEE8")]
		private static void TransformGeometry(BoxCollider collider)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xBFCC10", Offset = "0xBFCC10", VA = "0xBFCC10")]
		private static void RenderLines(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xBFCD7C", Offset = "0xBFCD7C", VA = "0xBFCD7C")]
		private static void RenderQuads(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xBFD4C4", Offset = "0xBFD4C4", VA = "0xBFD4C4")]
		public static void RenderLines(Bounds bounds)
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0xBFD820", Offset = "0xBFD820", VA = "0xBFD820")]
		public static void RenderQuads(Bounds bounds)
		{
		}
	}
	[Token(Token = "0x20004EA")]
	internal static class Capsule3D
	{
		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] cylinder;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] xformCylinder;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] cylinderQuads;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Vector3[] halfSphere;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector3[] xformHalfSphere;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector3[] xformHalfSphereFlipped;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int[] halfSphereQuads;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int[] halfSphereTris;

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xBFDD3C", Offset = "0xBFDD3C", VA = "0xBFDD3C")]
		private static Vector3 CylinderScale(CapsuleCollider collider, float fOffset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xBFDE54", Offset = "0xBFDE54", VA = "0xBFDE54")]
		private static Quaternion CylinderQuat(CapsuleCollider collider)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xBFDF80", Offset = "0xBFDF80", VA = "0xBFDF80")]
		private static Vector3 TransformCylinderVert(Vector3 vert, CapsuleCollider collider, Vector3 scale, Quaternion q)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xBFE0A4", Offset = "0xBFE0A4", VA = "0xBFE0A4")]
		private static Quaternion HalfSphereQuat(CapsuleCollider collider)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xBFE1D8", Offset = "0xBFE1D8", VA = "0xBFE1D8")]
		private static Quaternion HalfSphereQuatFlipped(CapsuleCollider collider)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xBFE30C", Offset = "0xBFE30C", VA = "0xBFE30C")]
		private static float HalfSphereOffset(CapsuleCollider collider, out Vector3 vOffset)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xBFE430", Offset = "0xBFE430", VA = "0xBFE430")]
		private static Vector3 TransformHalfSphereVert(Vector3 vert, CapsuleCollider collider, Quaternion q, Vector3 offset, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xBFE55C", Offset = "0xBFE55C", VA = "0xBFE55C")]
		public static void Render(List<Collider> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xBFEBA0", Offset = "0xBFEBA0", VA = "0xBFEBA0")]
		private static void TransformGeometry(CapsuleCollider collider)
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xBFE6D4", Offset = "0xBFE6D4", VA = "0xBFE6D4")]
		private static void RenderLines(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xBFE88C", Offset = "0xBFE88C", VA = "0xBFE88C")]
		private static void RenderQuads(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xBFEA1C", Offset = "0xBFEA1C", VA = "0xBFEA1C")]
		private static void RenderTris(List<Collider> colliders)
		{
		}
	}
	[Token(Token = "0x20004EB")]
	internal static class Character3D
	{
		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] cylinder;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] xformCylinder;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] cylinderQuads;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Vector3[] halfSphere;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector3[] xformHalfSphere;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector3[] xformHalfSphereFlipped;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int[] halfSphereQuads;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int[] halfSphereTris;

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xBFFE2C", Offset = "0xBFFE2C", VA = "0xBFFE2C")]
		private static Vector3 CylinderScale(CharacterController collider, float fOffset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xBFFE84", Offset = "0xBFFE84", VA = "0xBFFE84")]
		private static Quaternion CylinderQuat()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xBFFED4", Offset = "0xBFFED4", VA = "0xBFFED4")]
		private static Vector3 TransformCylinderVert(Vector3 vert, CharacterController collider, Vector3 scale, Quaternion q)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xBFFFF8", Offset = "0xBFFFF8", VA = "0xBFFFF8")]
		private static Quaternion HalfSphereQuat()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xC00044", Offset = "0xC00044", VA = "0xC00044")]
		private static Quaternion HalfSphereQuatFlipped()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xC00094", Offset = "0xC00094", VA = "0xC00094")]
		private static float HalfSphereOffset(CharacterController collider, out Vector3 vOffset)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xC00134", Offset = "0xC00134", VA = "0xC00134")]
		private static Vector3 TransformHalfSphereVert(Vector3 vert, CharacterController collider, Quaternion q, Vector3 offset, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xC00260", Offset = "0xC00260", VA = "0xC00260")]
		public static void Render(List<Collider> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xC008A4", Offset = "0xC008A4", VA = "0xC008A4")]
		private static void TransformGeometry(CharacterController collider)
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xC003D8", Offset = "0xC003D8", VA = "0xC003D8")]
		private static void RenderLines(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xC00590", Offset = "0xC00590", VA = "0xC00590")]
		private static void RenderQuads(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xC00720", Offset = "0xC00720", VA = "0xC00720")]
		private static void RenderTris(List<Collider> colliders)
		{
		}
	}
	[Token(Token = "0x20004EC")]
	internal static class Circle2D
	{
		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float STEP;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector2[] verts;

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xC01880", Offset = "0xC01880", VA = "0xC01880")]
		public static void Render(List<Collider2D> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xC01D24", Offset = "0xC01D24", VA = "0xC01D24")]
		private static Vector2 TransformGeometry(CircleCollider2D collider)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xC019F0", Offset = "0xC019F0", VA = "0xC019F0")]
		private static void RenderLines(List<Collider2D> colliders)
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xC01B30", Offset = "0xC01B30", VA = "0xC01B30")]
		private static void RenderTris(List<Collider2D> colliders)
		{
		}
	}
	[Token(Token = "0x20004ED")]
	internal static class CV_Common
	{
		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xC01FD4", Offset = "0xC01FD4", VA = "0xC01FD4")]
		public static float ObjectMaxScale(Transform xform)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xBFDE18", Offset = "0xBFDE18", VA = "0xBFDE18")]
		public static void CapsuleObjectScale(Transform xform, out float radiusScale, out float cylinderScale)
		{
		}

		[Token(Token = "0x6001AC8")]
		public static T SafeGetComponent<T>(GameObject go) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x20004EE")]
	internal static class Display
	{
		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material material;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material materialNoDepthTest;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Color lastColor;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int lastFrame;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static bool lastNoDepth;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static float lastAlpha;

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xBFBEB8", Offset = "0xBFBEB8", VA = "0xBFBEB8")]
		public static bool SetColor(Color color, float alpha, bool noDepthTest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xC01EC0", Offset = "0xC01EC0", VA = "0xC01EC0")]
		public static void RenderLineList(Vector2[] verts)
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xBFD178", Offset = "0xBFD178", VA = "0xBFD178")]
		public static void RenderWireframeQuads(Vector3[] verts, int[] quads)
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xBFC4F8", Offset = "0xBFC4F8", VA = "0xBFC4F8")]
		public static void RenderWireframeQuads(Vector2[] verts, int[] quads)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xBFD34C", Offset = "0xBFD34C", VA = "0xBFD34C")]
		public static void RenderSolidQuads(Vector3[] verts, int[] quads)
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xBFC6AC", Offset = "0xBFC6AC", VA = "0xBFC6AC")]
		public static void RenderSolidQuads(Vector2[] verts, int[] quads)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xBFEEE0", Offset = "0xBFEEE0", VA = "0xBFEEE0")]
		public static void RenderWireframeTris(Vector3[] verts, int[] tris)
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xBFF060", Offset = "0xBFF060", VA = "0xBFF060")]
		public static void RenderSolidTris(Vector3[] verts, int[] tris)
		{
		}
	}
	[Token(Token = "0x20004EF")]
	internal static class Edge2D
	{
		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xC0208C", Offset = "0xC0208C", VA = "0xC0208C")]
		public static void Render(List<Collider2D> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xC02168", Offset = "0xC02168", VA = "0xC02168")]
		private static void RenderLines(List<Collider2D> colliders)
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xC022B4", Offset = "0xC022B4", VA = "0xC022B4")]
		private static Vector2[] TransformGeometry(EdgeCollider2D collider)
		{
			return null;
		}
	}
	[Token(Token = "0x20004F0")]
	internal static class Mesh2D
	{
		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xC0235C", Offset = "0xC0235C", VA = "0xC0235C")]
		public static void Render(List<Collider2D> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xC02438", Offset = "0xC02438", VA = "0xC02438")]
		private static void RenderLines(List<Collider2D> colliders)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xC02500", Offset = "0xC02500", VA = "0xC02500")]
		private static void RenderPath(PolygonCollider2D collider)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xC025AC", Offset = "0xC025AC", VA = "0xC025AC")]
		private static Vector2[] TransformGeometry(PolygonCollider2D collider, int path)
		{
			return null;
		}
	}
	[Token(Token = "0x20004F1")]
	internal static class Mesh3D
	{
		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int MAX_MESH_VERTS;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] xformVerts;

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xC0265C", Offset = "0xC0265C", VA = "0xC0265C")]
		public static void Render(List<Collider> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xC02D10", Offset = "0xC02D10", VA = "0xC02D10")]
		private static void TransformGeometry(MeshCollider collider)
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xC027D4", Offset = "0xC027D4", VA = "0xC027D4")]
		private static void RenderLines(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xC029E4", Offset = "0xC029E4", VA = "0xC029E4")]
		private static void RenderTris(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xC02B84", Offset = "0xC02B84", VA = "0xC02B84")]
		private static void RenderQuads(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xC02E28", Offset = "0xC02E28", VA = "0xC02E28")]
		private static bool RenderAABB(MeshCollider collider)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004F2")]
	internal static class Sphere3D
	{
		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3[] verts;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] xformVerts;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] quads;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int[] tris;

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xC02FA0", Offset = "0xC02FA0", VA = "0xC02FA0")]
		private static Vector3 Transform(Vector3 vert, SphereCollider collider, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xC030CC", Offset = "0xC030CC", VA = "0xC030CC")]
		public static void Render(List<Collider> colliders, Color edgeColor, float edgeAlpha, Color faceColor, float faceAlpha, bool noDepth)
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xC036A0", Offset = "0xC036A0", VA = "0xC036A0")]
		private static void TransformGeometry(SphereCollider collider)
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xC03244", Offset = "0xC03244", VA = "0xC03244")]
		private static void RenderLines(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xC033C4", Offset = "0xC033C4", VA = "0xC033C4")]
		private static void RenderQuads(List<Collider> colliders)
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xC03530", Offset = "0xC03530", VA = "0xC03530")]
		private static void RenderTris(List<Collider> colliders)
		{
		}
	}
}
namespace BlueprintReality.Utility
{
	[Token(Token = "0x20004F3")]
	public class OpenWebsiteControls : MonoBehaviour
	{
		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string url;

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xC0467C", Offset = "0xC0467C", VA = "0xC0467C")]
		public void Open()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xC04688", Offset = "0xC04688", VA = "0xC04688")]
		public OpenWebsiteControls()
		{
		}
	}
}
namespace BlueprintReality.GameObjects
{
	[Token(Token = "0x20004F4")]
	public class GameObjectStack : MonoBehaviour
	{
		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string id;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObjectStackElement> stack;

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xC046E0", Offset = "0xC046E0", VA = "0xC046E0")]
		public void SpawnObject(GameObject prefab)
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0xC04AC0", Offset = "0xC04AC0", VA = "0xC04AC0")]
		public void PopTopElement()
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xC04BB0", Offset = "0xC04BB0", VA = "0xC04BB0")]
		public void RemoveElement(GameObject element)
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xC04DA8", Offset = "0xC04DA8", VA = "0xC04DA8")]
		public GameObjectStack()
		{
		}
	}
	[Token(Token = "0x20004F6")]
	public class GameObjectStackElement : MonoBehaviour
	{
		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> tags;

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xC04EC8", Offset = "0xC04EC8", VA = "0xC04EC8")]
		public GameObjectStackElement()
		{
		}
	}
	[Token(Token = "0x20004F7")]
	public class PopFromGameObjectStack : MonoBehaviour
	{
		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool all;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string stackId;

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xC04F50", Offset = "0xC04F50", VA = "0xC04F50")]
		public void PopTopElement()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xC05014", Offset = "0xC05014", VA = "0xC05014")]
		private GameObjectStack FindStack()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xC05124", Offset = "0xC05124", VA = "0xC05124")]
		public PopFromGameObjectStack()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public class OpenPopupWindow : PushToGameObjectStack
	{
		[Serializable]
		[Token(Token = "0x20004F9")]
		public class BtnData
		{
			[Token(Token = "0x4001E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string btnText;

			[Token(Token = "0x4001E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool btnUseLoc;

			[Token(Token = "0x4001E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool btnToUpper;

			[Token(Token = "0x4001E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Button.ButtonClickedEvent btnClick;

			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0xC05CC8", Offset = "0xC05CC8", VA = "0xC05CC8")]
			public BtnData()
			{
			}
		}

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string titleText;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool titleUseLoc;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool titleToUpper;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string contentText;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool contentUseLoc;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool contentToUpper;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool showCloseButton;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button.ButtonClickedEvent onCloseButtonClicked;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<BtnData> btnData;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PopupWindow popupWindow;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObjectStack popupStack;

		[Token(Token = "0x170003A0")]
		public bool isShowing
		{
			[Token(Token = "0x6001AF3")]
			[Address(RVA = "0xC0517C", Offset = "0xC0517C", VA = "0xC0517C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A1")]
		public float PopupAlpha
		{
			[Token(Token = "0x6001AF4")]
			[Address(RVA = "0xC05210", Offset = "0xC05210", VA = "0xC05210")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AF5")]
			[Address(RVA = "0xC052B8", Offset = "0xC052B8", VA = "0xC052B8")]
			set
			{
			}
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xC05370", Offset = "0xC05370", VA = "0xC05370")]
		public void Open()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xC05AFC", Offset = "0xC05AFC", VA = "0xC05AFC")]
		public void Close()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0xC05BA0", Offset = "0xC05BA0", VA = "0xC05BA0")]
		public OpenPopupWindow()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	public class PopupWindow : MonoBehaviour
	{
		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Text title;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject closeButton;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.UI.Text content;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform buttons;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject btnPrefab;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Button.ButtonClickedEvent onCloseClicked;

		[Token(Token = "0x170003A2")]
		public float Alpha
		{
			[Token(Token = "0x6001B01")]
			[Address(RVA = "0xC060DC", Offset = "0xC060DC", VA = "0xC060DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B02")]
			[Address(RVA = "0xC06134", Offset = "0xC06134", VA = "0xC06134")]
			set
			{
			}
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xC05CD8", Offset = "0xC05CD8", VA = "0xC05CD8")]
		private void CompleteText(UnityEngine.UI.Text uitext, string text, bool useLoc, bool toUpper)
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0xC05934", Offset = "0xC05934", VA = "0xC05934")]
		public void CompleteTitle(string titleText, bool titleUseLoc, bool titleToUpper)
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0xC059FC", Offset = "0xC059FC", VA = "0xC059FC")]
		public void CompleteContent(string contentText, bool contentUseLoc, bool contentToUpper)
		{
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0xC05A18", Offset = "0xC05A18", VA = "0xC05A18")]
		public void CompleteButton(string btnText, bool btnUseLoc, bool btnToUpper, Button.ButtonClickedEvent btnClick)
		{
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0xC05950", Offset = "0xC05950", VA = "0xC05950")]
		public void SetCloseButtonActive(bool active, Button.ButtonClickedEvent onClicked)
		{
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0xC05DC4", Offset = "0xC05DC4", VA = "0xC05DC4")]
		private GameObject AddPrefab(Transform parent, GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0xC05FB8", Offset = "0xC05FB8", VA = "0xC05FB8")]
		public void HandleCloseButtonClicked()
		{
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0xC0619C", Offset = "0xC0619C", VA = "0xC0619C")]
		public PopupWindow()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public class PushToGameObjectStack : MonoBehaviour
	{
		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool popFirst;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string stackId;

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0xC0563C", Offset = "0xC0563C", VA = "0xC0563C")]
		public void PushElement()
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0xC056E4", Offset = "0xC056E4", VA = "0xC056E4")]
		protected GameObjectStack FindStack()
		{
			return null;
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0xC05C70", Offset = "0xC05C70", VA = "0xC05C70")]
		public PushToGameObjectStack()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	public class SetActiveFromOnTopOfStack : MonoBehaviour
	{
		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string stackId;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> active;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<GameObject> inactive;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObjectStack stack;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObjectStackElement element;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool lastState;

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0xC061A4", Offset = "0xC061A4", VA = "0xC061A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0xC065A0", Offset = "0xC065A0", VA = "0xC065A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xC06378", Offset = "0xC06378", VA = "0xC06378")]
		private bool CalculateNewState()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xC06460", Offset = "0xC06460", VA = "0xC06460")]
		private void ApplyState(bool newState)
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xC061C8", Offset = "0xC061C8", VA = "0xC061C8")]
		private void FindStack()
		{
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0xC065D8", Offset = "0xC065D8", VA = "0xC065D8")]
		public SetActiveFromOnTopOfStack()
		{
		}
	}
}
namespace BlueprintReality.UI
{
	[Token(Token = "0x20004FE")]
	[ExecuteInEditMode]
	public class SetRectFromChildRects : MonoBehaviour
	{
		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform group;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool setWidth;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float widthPadding;

		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool setHeight;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float heightPadding;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool setPosX;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool setPosY;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool updateEveryFrame;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool leaveIfNoChildren;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] worldCoords;

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0xC06704", Offset = "0xC06704", VA = "0xC06704")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0xC06D84", Offset = "0xC06D84", VA = "0xC06D84")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0xC06708", Offset = "0xC06708", VA = "0xC06708")]
		private void UpdateRect()
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0xC06D94", Offset = "0xC06D94", VA = "0xC06D94")]
		public SetRectFromChildRects()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	[ExecuteInEditMode]
	public class SetRectFromParentRect : MonoBehaviour
	{
		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool setWidth;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool setHeight;

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool setPosX;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool setPosY;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sizeYOffset;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float posYOffset;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool updateEveryFrame;

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0xC06DF8", Offset = "0xC06DF8", VA = "0xC06DF8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0xC06FF8", Offset = "0xC06FF8", VA = "0xC06FF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0xC06DFC", Offset = "0xC06DFC", VA = "0xC06DFC")]
		private void UpdateRect()
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0xC07008", Offset = "0xC07008", VA = "0xC07008")]
		public SetRectFromParentRect()
		{
		}
	}
	[Token(Token = "0x2000500")]
	public class SpawnPrefabAsChild : MonoBehaviour
	{
		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x170003A3")]
		public bool Spawned
		{
			[Token(Token = "0x6001B18")]
			[Address(RVA = "0xC07010", Offset = "0xC07010", VA = "0xC07010")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B19")]
			[Address(RVA = "0xC07018", Offset = "0xC07018", VA = "0xC07018")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0xC07024", Offset = "0xC07024", VA = "0xC07024")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0xC0727C", Offset = "0xC0727C", VA = "0xC0727C")]
		public SpawnPrefabAsChild()
		{
		}
	}
	[Token(Token = "0x2000501")]
	public class SetInteractableFromActive : MonoBehaviour
	{
		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Selectable button;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> targets;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool all;

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0xC07284", Offset = "0xC07284", VA = "0xC07284")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0xC07334", Offset = "0xC07334", VA = "0xC07334")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xC0735C", Offset = "0xC0735C", VA = "0xC0735C")]
		private bool CalculateNewState()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0xC07440", Offset = "0xC07440", VA = "0xC07440")]
		public SetInteractableFromActive()
		{
		}
	}
	[Token(Token = "0x2000502")]
	public class SetSelectableFromActiveAndInactive : MonoBehaviour
	{
		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Selectable button;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> activeTargets;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<GameObject> inactiveTargets;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool all;

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0xC074C8", Offset = "0xC074C8", VA = "0xC074C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xC07570", Offset = "0xC07570", VA = "0xC07570")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xC07918", Offset = "0xC07918", VA = "0xC07918")]
		public SetSelectableFromActiveAndInactive()
		{
		}
	}
	[Token(Token = "0x2000504")]
	public class TooltipEntry : MonoBehaviour
	{
		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string groupId;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltipTextId;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string nonLocTextString;

		[Token(Token = "0x170003A4")]
		public TooltipGroup AttachedTo
		{
			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xC07AD8", Offset = "0xC07AD8", VA = "0xC07AD8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xC07AE0", Offset = "0xC07AE0", VA = "0xC07AE0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0xC07AE8", Offset = "0xC07AE8", VA = "0xC07AE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xC07B8C", Offset = "0xC07B8C", VA = "0xC07B8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xC07AEC", Offset = "0xC07AEC", VA = "0xC07AEC")]
		private void AttachToGroup()
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xC07B90", Offset = "0xC07B90", VA = "0xC07B90")]
		private void RemoveFromGroup()
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xC07C64", Offset = "0xC07C64", VA = "0xC07C64")]
		private TooltipGroup FindClosestEntry()
		{
			return null;
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xC0807C", Offset = "0xC0807C", VA = "0xC0807C")]
		public TooltipEntry()
		{
		}
	}
	[Token(Token = "0x2000505")]
	public class TooltipGroup : MonoBehaviour
	{
		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string groupId;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject tooltipGroup;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SetTextFromLocalization tooltipLabel;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TooltipEntry currentEntry;

		[Token(Token = "0x170003A5")]
		public static List<TooltipGroup> ActiveGroups
		{
			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xC08134", Offset = "0xC08134", VA = "0xC08134")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B33")]
			[Address(RVA = "0xC0818C", Offset = "0xC0818C", VA = "0xC0818C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170003A6")]
		public TooltipEntry CurrentEntry
		{
			[Token(Token = "0x6001B35")]
			[Address(RVA = "0xC082B0", Offset = "0xC082B0", VA = "0xC082B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B36")]
			[Address(RVA = "0xC07F24", Offset = "0xC07F24", VA = "0xC07F24")]
			set
			{
			}
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0xC081F4", Offset = "0xC081F4", VA = "0xC081F4")]
		static TooltipGroup()
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0xC082B8", Offset = "0xC082B8", VA = "0xC082B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0xC083CC", Offset = "0xC083CC", VA = "0xC083CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0xC0847C", Offset = "0xC0847C", VA = "0xC0847C")]
		public TooltipGroup()
		{
		}
	}
}
namespace BlueprintReality.Text
{
	[Token(Token = "0x2000506")]
	public static class Localization
	{
		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string curLanguage;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<string, Dictionary<string, string>> languageTable;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string checkedLanguage;

		[Token(Token = "0x170003A7")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0xC084D4", Offset = "0xC084D4", VA = "0xC084D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000024")]
		public static event Action LanguageChanged
		{
			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0xC08818", Offset = "0xC08818", VA = "0xC08818")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001B3C")]
			[Address(RVA = "0xC088D4", Offset = "0xC088D4", VA = "0xC088D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xC08990", Offset = "0xC08990", VA = "0xC08990")]
		public static List<string> GetSupportedLanguages()
		{
			return null;
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xC08A60", Offset = "0xC08A60", VA = "0xC08A60")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xC08B5C", Offset = "0xC08B5C", VA = "0xC08B5C")]
		private static void ParseLocalizationData(string text)
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xC09190", Offset = "0xC09190", VA = "0xC09190")]
		private static bool ParseLine(string line, out string key, out List<string> vals)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xC09520", Offset = "0xC09520", VA = "0xC09520")]
		public static string Get(string key)
		{
			return null;
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xC0957C", Offset = "0xC0957C", VA = "0xC0957C")]
		public static string Get(string lang, string key)
		{
			return null;
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xC08560", Offset = "0xC08560", VA = "0xC08560")]
		private static string GetCheckedLanguage(string language)
		{
			return null;
		}
	}
	[Token(Token = "0x2000507")]
	[RequireComponent(typeof(UnityEngine.UI.Text))]
	public class SetTextFromLocalization : MonoBehaviour
	{
		[Token(Token = "0x4001E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string id;

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool toUpper;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useNewlines;

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool autoLocalize;

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xC096A0", Offset = "0xC096A0", VA = "0xC096A0")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xC09838", Offset = "0xC09838", VA = "0xC09838")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xC09728", Offset = "0xC09728", VA = "0xC09728")]
		public void RefreshText()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xC098B8", Offset = "0xC098B8", VA = "0xC098B8")]
		public SetTextFromLocalization()
		{
		}
	}
}
namespace BezierSolution
{
	[Token(Token = "0x2000508")]
	public class BezierPoint : MonoBehaviour
	{
		[Token(Token = "0x2000509")]
		public enum HandleMode
		{
			[Token(Token = "0x4001E65")]
			Free,
			[Token(Token = "0x4001E66")]
			Aligned,
			[Token(Token = "0x4001E67")]
			Mirrored
		}

		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector3 m_position;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 m_precedingControlPointLocalPosition;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3 m_precedingControlPointPosition;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Vector3 m_followingControlPointLocalPosition;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Vector3 m_followingControlPointPosition;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private HandleMode m_handleMode;

		[Token(Token = "0x170003A8")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6001B48")]
			[Address(RVA = "0xC098C8", Offset = "0xC098C8", VA = "0xC098C8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B49")]
			[Address(RVA = "0xC098E8", Offset = "0xC098E8", VA = "0xC098E8")]
			set
			{
			}
		}

		[Token(Token = "0x170003A9")]
		public Vector3 position
		{
			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0xC09930", Offset = "0xC09930", VA = "0xC09930")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0xC09A04", Offset = "0xC09A04", VA = "0xC09A04")]
			set
			{
			}
		}

		[Token(Token = "0x170003AA")]
		public Quaternion localRotation
		{
			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0xC09A4C", Offset = "0xC09A4C", VA = "0xC09A4C")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0xC09A6C", Offset = "0xC09A6C", VA = "0xC09A6C")]
			set
			{
			}
		}

		[Token(Token = "0x170003AB")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001B4E")]
			[Address(RVA = "0xC09ABC", Offset = "0xC09ABC", VA = "0xC09ABC")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0xC09ADC", Offset = "0xC09ADC", VA = "0xC09ADC")]
			set
			{
			}
		}

		[Token(Token = "0x170003AC")]
		public Vector3 localEulerAngles
		{
			[Token(Token = "0x6001B50")]
			[Address(RVA = "0xC09B2C", Offset = "0xC09B2C", VA = "0xC09B2C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xC09B4C", Offset = "0xC09B4C", VA = "0xC09B4C")]
			set
			{
			}
		}

		[Token(Token = "0x170003AD")]
		public Vector3 eulerAngles
		{
			[Token(Token = "0x6001B52")]
			[Address(RVA = "0xC09B94", Offset = "0xC09B94", VA = "0xC09B94")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xC09BB4", Offset = "0xC09BB4", VA = "0xC09BB4")]
			set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		public Vector3 localScale
		{
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0xC09BFC", Offset = "0xC09BFC", VA = "0xC09BFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xC09C1C", Offset = "0xC09C1C", VA = "0xC09C1C")]
			set
			{
			}
		}

		[Token(Token = "0x170003AF")]
		public Vector3 precedingControlPointLocalPosition
		{
			[Token(Token = "0x6001B56")]
			[Address(RVA = "0xC09C64", Offset = "0xC09C64", VA = "0xC09C64")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xC09C70", Offset = "0xC09C70", VA = "0xC09C70")]
			set
			{
			}
		}

		[Token(Token = "0x170003B0")]
		public Vector3 precedingControlPointPosition
		{
			[Token(Token = "0x6001B58")]
			[Address(RVA = "0xC09E48", Offset = "0xC09E48", VA = "0xC09E48")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xC09E84", Offset = "0xC09E84", VA = "0xC09E84")]
			set
			{
			}
		}

		[Token(Token = "0x170003B1")]
		public Vector3 followingControlPointLocalPosition
		{
			[Token(Token = "0x6001B5A")]
			[Address(RVA = "0xC0A10C", Offset = "0xC0A10C", VA = "0xC0A10C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B5B")]
			[Address(RVA = "0xC0A118", Offset = "0xC0A118", VA = "0xC0A118")]
			set
			{
			}
		}

		[Token(Token = "0x170003B2")]
		public Vector3 followingControlPointPosition
		{
			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0xC0A2F0", Offset = "0xC0A2F0", VA = "0xC0A2F0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0xC0A32C", Offset = "0xC0A32C", VA = "0xC0A32C")]
			set
			{
			}
		}

		[Token(Token = "0x170003B3")]
		public HandleMode handleMode
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0xC0A5B4", Offset = "0xC0A5B4", VA = "0xC0A5B4")]
			get
			{
				return default(HandleMode);
			}
			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xC0A5BC", Offset = "0xC0A5BC", VA = "0xC0A5BC")]
			set
			{
			}
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0xC0A5DC", Offset = "0xC0A5DC", VA = "0xC0A5DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xC0A600", Offset = "0xC0A600", VA = "0xC0A600")]
		public void CopyTo(BezierPoint other)
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xC0996C", Offset = "0xC0996C", VA = "0xC0996C")]
		private void Revalidate()
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xC0A6F4", Offset = "0xC0A6F4", VA = "0xC0A6F4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xC0A850", Offset = "0xC0A850", VA = "0xC0A850")]
		public BezierPoint()
		{
		}
	}
	[Token(Token = "0x200050A")]
	[ExecuteInEditMode]
	public class BezierSpline : MonoBehaviour
	{
		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material gizmoMaterial;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color gizmoColor;

		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float gizmoStep;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<BezierPoint> endPoints;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool loop;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool drawGizmos;

		[Token(Token = "0x170003B4")]
		public int Count
		{
			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xC0A8EC", Offset = "0xC0A8EC", VA = "0xC0A8EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003B5")]
		public float Length
		{
			[Token(Token = "0x6001B66")]
			[Address(RVA = "0xC0A934", Offset = "0xC0A934", VA = "0xC0A934")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B6")]
		public BezierPoint this[int index]
		{
			[Token(Token = "0x6001B67")]
			[Address(RVA = "0xC0AB34", Offset = "0xC0AB34", VA = "0xC0AB34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0xC0AC64", Offset = "0xC0AC64", VA = "0xC0AC64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0xC0ACF0", Offset = "0xC0ACF0", VA = "0xC0ACF0")]
		public void Initialize(int endPointsCount)
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xC0AC68", Offset = "0xC0AC68", VA = "0xC0AC68")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xC0AEC8", Offset = "0xC0AEC8", VA = "0xC0AEC8")]
		public BezierPoint InsertNewPointAt(int index)
		{
			return null;
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xC0B300", Offset = "0xC0B300", VA = "0xC0B300")]
		public BezierPoint DuplicatePointAt(int index)
		{
			return null;
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xC0B5E4", Offset = "0xC0B5E4", VA = "0xC0B5E4")]
		public void RemovePointAt(int index)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xC0B948", Offset = "0xC0B948", VA = "0xC0B948")]
		public void SwapPointsAt(int index1, int index2)
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0xC0BBB4", Offset = "0xC0BBB4", VA = "0xC0BBB4")]
		public int IndexOf(BezierPoint point)
		{
			return default(int);
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xC0BC0C", Offset = "0xC0BC0C", VA = "0xC0BC0C")]
		public void DrawGizmos(Color color, int smoothness = 4)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xC0BCB0", Offset = "0xC0BCB0", VA = "0xC0BCB0")]
		public void HideGizmos()
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0xC0BCB8", Offset = "0xC0BCB8", VA = "0xC0BCB8")]
		public Vector3 GetPoint(float normalizedT)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0xC0BEA4", Offset = "0xC0BEA4", VA = "0xC0BEA4")]
		public Vector3 GetTangent(float normalizedT)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0xC0A948", Offset = "0xC0A948", VA = "0xC0A948")]
		public float GetLengthApproximately(float startNormalizedT, float endNormalizedT, float accuracy = 50f)
		{
			return default(float);
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xC0C1B0", Offset = "0xC0C1B0", VA = "0xC0C1B0")]
		public Vector3 FindNearestPointTo(Vector3 worldPos, float accuracy = 100f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xC0C1C8", Offset = "0xC0C1C8", VA = "0xC0C1C8")]
		public Vector3 FindNearestPointTo(Vector3 worldPos, out float normalizedT, float accuracy = 100f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0xC0C2F8", Offset = "0xC0C2F8", VA = "0xC0C2F8")]
		public Vector3 MoveAlongSpline(ref float normalizedT, float deltaMovement, int accuracy = 3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0xC0C418", Offset = "0xC0C418", VA = "0xC0C418")]
		public void ConstructLinearPath()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xC0C628", Offset = "0xC0C628", VA = "0xC0C628")]
		public void AutoConstructSpline()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xC0CF3C", Offset = "0xC0CF3C", VA = "0xC0CF3C")]
		private static Vector3[] GetFirstControlPoints(Vector3[] rhs)
		{
			return null;
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xC0D13C", Offset = "0xC0D13C", VA = "0xC0D13C")]
		public void AutoConstructSpline2()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xC0C174", Offset = "0xC0C174", VA = "0xC0C174")]
		private float AccuracyToStepSize(float accuracy)
		{
			return default(float);
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xC0D474", Offset = "0xC0D474", VA = "0xC0D474")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xC0D788", Offset = "0xC0D788", VA = "0xC0D788")]
		public BezierSpline()
		{
		}
	}
	[Token(Token = "0x200050B")]
	public class BezierWalkerWithSpeed : MonoBehaviour
	{
		[Token(Token = "0x200050C")]
		public enum TravelMode
		{
			[Token(Token = "0x4001E7B")]
			Once,
			[Token(Token = "0x4001E7C")]
			Loop,
			[Token(Token = "0x4001E7D")]
			PingPong
		}

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cachedTransform;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BezierSpline spline;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TravelMode travelMode;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float progress;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float relaxationAtEndPoints;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationLerpModifier;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool lookForward;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool isGoingForward;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onPathCompleted;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool onPathCompletedCalledAt1;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool onPathCompletedCalledAt0;

		[Token(Token = "0x170003B7")]
		public float NormalizedT
		{
			[Token(Token = "0x6001B7F")]
			[Address(RVA = "0xC0D824", Offset = "0xC0D824", VA = "0xC0D824")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B80")]
			[Address(RVA = "0xC0D82C", Offset = "0xC0D82C", VA = "0xC0D82C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xC0D834", Offset = "0xC0D834", VA = "0xC0D834")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0xC0D858", Offset = "0xC0D858", VA = "0xC0D858")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xC0DA9C", Offset = "0xC0DA9C", VA = "0xC0DA9C")]
		public BezierWalkerWithSpeed()
		{
		}
	}
	[Token(Token = "0x200050D")]
	public class BezierWalkerWithTime : MonoBehaviour
	{
		[Token(Token = "0x200050E")]
		public enum TravelMode
		{
			[Token(Token = "0x4001E8B")]
			Once,
			[Token(Token = "0x4001E8C")]
			Loop,
			[Token(Token = "0x4001E8D")]
			PingPong
		}

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cachedTransform;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BezierSpline spline;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TravelMode travelMode;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float travelTime;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float progress;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float movementLerpModifier;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationLerpModifier;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool lookForward;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool isGoingForward;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onPathCompleted;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool onPathCompletedCalledAt1;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool onPathCompletedCalledAt0;

		[Token(Token = "0x170003B8")]
		public float NormalizedT
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0xC0DB2C", Offset = "0xC0DB2C", VA = "0xC0DB2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0xC0DB34", Offset = "0xC0DB34", VA = "0xC0DB34")]
			set
			{
			}
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xC0DB3C", Offset = "0xC0DB3C", VA = "0xC0DB3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xC0DB60", Offset = "0xC0DB60", VA = "0xC0DB60")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xC0DDEC", Offset = "0xC0DDEC", VA = "0xC0DDEC")]
		public BezierWalkerWithTime()
		{
		}
	}
	[Token(Token = "0x200050F")]
	[ExecuteInEditMode]
	public class ParticlesFollowBezier : MonoBehaviour
	{
		[Token(Token = "0x2000510")]
		public enum FollowMode
		{
			[Token(Token = "0x4001E97")]
			Relaxed,
			[Token(Token = "0x4001E98")]
			Strict
		}

		[Token(Token = "0x4001E8E")]
		private const int MAX_PARTICLE_COUNT = 25000;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BezierSpline spline;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FollowMode followMode;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform cachedTransform;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem cachedPS;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem.MainModule cachedMainModule;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector4> particleData;

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xC0DE78", Offset = "0xC0DE78", VA = "0xC0DE78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xC0DFCC", Offset = "0xC0DFCC", VA = "0xC0DFCC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xC0E4B8", Offset = "0xC0E4B8", VA = "0xC0E4B8")]
		public ParticlesFollowBezier()
		{
		}
	}
}
namespace BeautifyEffect
{
	[Token(Token = "0x2000511")]
	public class CameraAnimator : MonoBehaviour
	{
		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xC0E4C0", Offset = "0xC0E4C0", VA = "0xC0E4C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xC0E504", Offset = "0xC0E504", VA = "0xC0E504")]
		public CameraAnimator()
		{
		}
	}
	[Token(Token = "0x2000512")]
	public class Demo1 : MonoBehaviour
	{
		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float deltaTime;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool benchmarkEnabled;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GUIStyle style;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rect rect;

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xC0E50C", Offset = "0xC0E50C", VA = "0xC0E50C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xC0E7C8", Offset = "0xC0E7C8", VA = "0xC0E7C8")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xC0E8B8", Offset = "0xC0E8B8", VA = "0xC0E8B8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xC0EADC", Offset = "0xC0EADC", VA = "0xC0EADC")]
		public Demo1()
		{
		}
	}
	[Token(Token = "0x2000513")]
	public class Demo2 : MonoBehaviour
	{
		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int demoMode;

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xC0EAE4", Offset = "0xC0EAE4", VA = "0xC0EAE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xC0EEE0", Offset = "0xC0EEE0", VA = "0xC0EEE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xC0EAE8", Offset = "0xC0EAE8", VA = "0xC0EAE8")]
		private void UpdateDemoMode()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0xC0F314", Offset = "0xC0F314", VA = "0xC0F314")]
		public Demo2()
		{
		}
	}
	[Token(Token = "0x2000514")]
	public class Demo4 : MonoBehaviour
	{
		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xC0F31C", Offset = "0xC0F31C", VA = "0xC0F31C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xC0F468", Offset = "0xC0F468", VA = "0xC0F468")]
		public Demo4()
		{
		}
	}
	[Token(Token = "0x2000515")]
	public class FreeCameraMove : MonoBehaviour
	{
		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cameraSensitivity;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float climbSpeed;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float normalMoveSpeed;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoveFactor;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fastMoveFactor;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rotationX;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float rotationY;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion originalRotation;

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xC0F470", Offset = "0xC0F470", VA = "0xC0F470")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xC0F4B8", Offset = "0xC0F4B8", VA = "0xC0F4B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xC0FD44", Offset = "0xC0FD44", VA = "0xC0FD44")]
		public FreeCameraMove()
		{
		}
	}
	[Token(Token = "0x2000516")]
	public class SphereAnimator : MonoBehaviour
	{
		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xC0FD60", Offset = "0xC0FD60", VA = "0xC0FD60")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xC0FDB8", Offset = "0xC0FDB8", VA = "0xC0FDB8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xC0FEAC", Offset = "0xC0FEAC", VA = "0xC0FEAC")]
		public SphereAnimator()
		{
		}
	}
	[Token(Token = "0x2000517")]
	public delegate float OnBeforeFocusEvent(float currentFocusDistance);
	[Token(Token = "0x2000518")]
	public enum BEAUTIFY_QUALITY
	{
		[Token(Token = "0x4001EA8")]
		BestQuality,
		[Token(Token = "0x4001EA9")]
		BestPerformance,
		[Token(Token = "0x4001EAA")]
		Basic
	}
	[Token(Token = "0x2000519")]
	public enum BEAUTIFY_PRESET
	{
		[Token(Token = "0x4001EAC")]
		Soft = 10,
		[Token(Token = "0x4001EAD")]
		Medium = 20,
		[Token(Token = "0x4001EAE")]
		Strong = 30,
		[Token(Token = "0x4001EAF")]
		Exaggerated = 40,
		[Token(Token = "0x4001EB0")]
		Custom = 999
	}
	[Token(Token = "0x200051A")]
	public enum BEAUTIFY_TMO
	{
		[Token(Token = "0x4001EB2")]
		Linear = 0,
		[Token(Token = "0x4001EB3")]
		ACES = 10
	}
	[Token(Token = "0x200051B")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class Beautify : MonoBehaviour
	{
		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BEAUTIFY_PRESET _preset;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private BEAUTIFY_QUALITY _quality;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private BeautifyProfile _profile;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _compareMode;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _compareLineAngle;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _compareLineWidth;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float _dither;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _ditherDepth;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _sharpenMinDepth;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _sharpenMaxDepth;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _sharpen;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _sharpenDepthThreshold;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private Color _tintColor;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float _sharpenRelaxation;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float _sharpenClamp;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float _sharpenMotionSensibility;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _saturate;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float _contrast;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float _brightness;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _daltonize;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _vignetting;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Color _vignettingColor;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private float _vignettingFade;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool _vignettingCircularShape;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private float _vignettingAspectRatio;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private float _vignettingBlink;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Texture2D _vignettingMask;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool _frame;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private Color _frameColor;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Texture2D _frameMask;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private bool _lut;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float _lutIntensity;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Texture2D _lutTexture;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool _nightVision;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private Color _nightVisionColor;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool _outline;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Color _outlineColor;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private bool _thermalVision;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		[SerializeField]
		private bool _lensDirt;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private float _lensDirtThreshold;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private float _lensDirtIntensity;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Texture2D _lensDirtTexture;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private bool _bloom;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private LayerMask _bloomCullingMask;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private float _bloomLayerMaskDownsampling;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private float _bloomIntensity;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private float _bloomMaxBrightness;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		private float _bloomBoost0;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private float _bloomBoost1;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		private float _bloomBoost2;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private float _bloomBoost3;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		private float _bloomBoost4;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private float _bloomBoost5;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[SerializeField]
		private bool _bloomAntiflicker;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
		[SerializeField]
		private bool _bloomUltra;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private float _bloomThreshold;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[SerializeField]
		private bool _bloomCustomize;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		[SerializeField]
		private bool _bloomDebug;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private float _bloomWeight0;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[SerializeField]
		private float _bloomWeight1;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private float _bloomWeight2;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[SerializeField]
		private float _bloomWeight3;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private float _bloomWeight4;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		private float _bloomWeight5;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private bool _bloomBlur;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[SerializeField]
		private float _bloomDepthAtten;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private float _bloomLayerZBias;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[SerializeField]
		private bool _anamorphicFlares;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private float _anamorphicFlaresIntensity;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[SerializeField]
		private bool _anamorphicFlaresAntiflicker;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17D")]
		[SerializeField]
		private bool _anamorphicFlaresUltra;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private float _anamorphicFlaresThreshold;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[SerializeField]
		private float _anamorphicFlaresSpread;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private bool _anamorphicFlaresVertical;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[SerializeField]
		private Color _anamorphicFlaresTint;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[SerializeField]
		private bool _anamorphicFlaresBlur;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19D")]
		[SerializeField]
		private bool _depthOfField;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19E")]
		[SerializeField]
		private bool _depthOfFieldTransparencySupport;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private LayerMask _depthOfFieldTransparencyLayerMask;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private Transform _depthOfFieldTargetFocus;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private bool _depthOfFieldDebug;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B1")]
		[SerializeField]
		private bool _depthOfFieldAutofocus;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[SerializeField]
		private Vector2 _depthofFieldAutofocusViewportPoint;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[SerializeField]
		private float _depthOfFieldAutofocusMinDistance;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[SerializeField]
		private float _depthOfFieldAutofocusMaxDistance;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[SerializeField]
		private LayerMask _depthOfFieldAutofocusLayerMask;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		private LayerMask _depthOfFieldExclusionLayerMask;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[SerializeField]
		private float _depthOfFieldExclusionLayerMaskDownsampling;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private float _depthOfFieldTransparencySupportDownsampling;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[SerializeField]
		private float _depthOfFieldExclusionBias;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private float _depthOfFieldDistance;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[SerializeField]
		private float _depthOfFieldFocusSpeed;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[SerializeField]
		private int _depthOfFieldDownsampling;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		private int _depthOfFieldMaxSamples;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private float _depthOfFieldFocalLength;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[SerializeField]
		private float _depthOfFieldAperture;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		private bool _depthOfFieldForegroundBlur;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		[SerializeField]
		private bool _depthOfFieldForegroundBlurHQ;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[SerializeField]
		private float _depthOfFieldForegroundDistance;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private bool _depthOfFieldBokeh;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[SerializeField]
		private float _depthOfFieldBokehThreshold;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[SerializeField]
		private float _depthOfFieldBokehIntensity;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[SerializeField]
		private float _depthOfFieldMaxBrightness;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		private float _depthOfFieldMaxDistance;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[SerializeField]
		private FilterMode _depthOfFieldFilterMode;

		[NonSerialized]
		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public OnBeforeFocusEvent OnBeforeFocus;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[SerializeField]
		private bool _eyeAdaptation;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		[SerializeField]
		private float _eyeAdaptationMinExposure;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[SerializeField]
		private float _eyeAdaptationMaxExposure;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		[SerializeField]
		private float _eyeAdaptationSpeedToLight;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[SerializeField]
		private float _eyeAdaptationSpeedToDark;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		[SerializeField]
		private bool _purkinje;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[SerializeField]
		private float _purkinjeAmount;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		[SerializeField]
		private float _purkinjeLuminanceThreshold;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		[SerializeField]
		private BEAUTIFY_TMO _tonemap;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		[SerializeField]
		private bool _sunFlares;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		[SerializeField]
		private Transform _sun;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[SerializeField]
		private LayerMask _sunFlaresLayerMask;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		[SerializeField]
		private float _sunFlaresIntensity;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[SerializeField]
		private float _sunFlaresSolarWindSpeed;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		[SerializeField]
		private Color _sunFlaresTint;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		[SerializeField]
		private int _sunFlaresDownsampling;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[SerializeField]
		private float _sunFlaresSunIntensity;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[SerializeField]
		private float _sunFlaresSunDiskSize;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[SerializeField]
		private float _sunFlaresSunRayDiffractionIntensity;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		[SerializeField]
		private float _sunFlaresSunRayDiffractionThreshold;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[SerializeField]
		private float _sunFlaresCoronaRays1Length;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		[SerializeField]
		private int _sunFlaresCoronaRays1Streaks;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[SerializeField]
		private float _sunFlaresCoronaRays1Spread;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[SerializeField]
		private float _sunFlaresCoronaRays1AngleOffset;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[SerializeField]
		private float _sunFlaresCoronaRays2Length;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		[SerializeField]
		private int _sunFlaresCoronaRays2Streaks;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[SerializeField]
		private float _sunFlaresCoronaRays2Spread;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		[SerializeField]
		private float _sunFlaresCoronaRays2AngleOffset;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		[SerializeField]
		private float _sunFlaresGhosts1Size;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		[SerializeField]
		private float _sunFlaresGhosts1Offset;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[SerializeField]
		private float _sunFlaresGhosts1Brightness;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		[SerializeField]
		private float _sunFlaresGhosts2Size;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[SerializeField]
		private float _sunFlaresGhosts2Offset;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[SerializeField]
		private float _sunFlaresGhosts2Brightness;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[SerializeField]
		private float _sunFlaresGhosts3Size;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		[SerializeField]
		private float _sunFlaresGhosts3Brightness;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[SerializeField]
		private float _sunFlaresGhosts3Offset;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		[SerializeField]
		private float _sunFlaresGhosts4Size;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		private float _sunFlaresGhosts4Offset;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		[SerializeField]
		private float _sunFlaresGhosts4Brightness;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		[SerializeField]
		private float _sunFlaresHaloOffset;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		[SerializeField]
		private float _sunFlaresHaloAmplitude;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		[SerializeField]
		private float _sunFlaresHaloIntensity;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		[SerializeField]
		private bool _sunFlaresRotationDeadZone;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D5")]
		[SerializeField]
		private bool _blur;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		[SerializeField]
		private float _blurIntensity;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		[SerializeField]
		private int _pixelateAmount;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		[SerializeField]
		private bool _pixelateDownscale;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		[SerializeField]
		private float _antialiasStrength;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		[SerializeField]
		private float _antialiasDepthThreshold;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		public bool isDirty;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Beautify _beautify;

		[Token(Token = "0x4001F52")]
		public const string SKW_BLOOM = "BEAUTIFY_BLOOM";

		[Token(Token = "0x4001F53")]
		public const string SKW_LUT = "BEAUTIFY_LUT";

		[Token(Token = "0x4001F54")]
		public const string SKW_NIGHT_VISION = "BEAUTIFY_NIGHT_VISION";

		[Token(Token = "0x4001F55")]
		public const string SKW_THERMAL_VISION = "BEAUTIFY_THERMAL_VISION";

		[Token(Token = "0x4001F56")]
		public const string SKW_OUTLINE = "BEAUTIFY_OUTLINE";

		[Token(Token = "0x4001F57")]
		public const string SKW_FRAME = "BEAUTIFY_FRAME";

		[Token(Token = "0x4001F58")]
		public const string SKW_FRAME_MASK = "BEAUTIFY_FRAME_MASK";

		[Token(Token = "0x4001F59")]
		public const string SKW_DALTONIZE = "BEAUTIFY_DALTONIZE";

		[Token(Token = "0x4001F5A")]
		public const string SKW_DIRT = "BEAUTIFY_DIRT";

		[Token(Token = "0x4001F5B")]
		public const string SKW_VIGNETTING = "BEAUTIFY_VIGNETTING";

		[Token(Token = "0x4001F5C")]
		public const string SKW_VIGNETTING_MASK = "BEAUTIFY_VIGNETTING_MASK";

		[Token(Token = "0x4001F5D")]
		public const string SKW_DEPTH_OF_FIELD = "BEAUTIFY_DEPTH_OF_FIELD";

		[Token(Token = "0x4001F5E")]
		public const string SKW_DEPTH_OF_FIELD_TRANSPARENT = "BEAUTIFY_DEPTH_OF_FIELD_TRANSPARENT";

		[Token(Token = "0x4001F5F")]
		public const string SKW_EYE_ADAPTATION = "BEAUTIFY_EYE_ADAPTATION";

		[Token(Token = "0x4001F60")]
		public const string SKW_TONEMAP_ACES = "BEAUTIFY_TONEMAP_ACES";

		[Token(Token = "0x4001F61")]
		public const string SKW_PURKINJE = "BEAUTIFY_PURKINJE";

		[Token(Token = "0x4001F62")]
		public const string SKW_BLOOM_USE_DEPTH = "BEAUTIFY_BLOOM_USE_DEPTH";

		[Token(Token = "0x4001F63")]
		public const string SKW_BLOOM_USE_LAYER = "BEAUTIFY_BLOOM_USE_LAYER";

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private Material bMatDesktop;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private Material bMatMobile;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Material bMatBasic;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[SerializeField]
		private Material bMat;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Camera currentCamera;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private Vector3 camPrevForward;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private Vector3 camPrevPos;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private float currSens;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		private int renderPass;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private RenderTexture[] rt;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private RenderTexture[] rtAF;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private RenderTexture[] rtEA;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private RenderTexture rtEAacum;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private RenderTexture rtEAHist;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private float dofPrevDistance;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private float dofLastAutofocusDistance;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private Vector4 dofLastBokehData;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private Camera sceneCamera;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private Camera depthCam;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private GameObject depthCamObj;

		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private List<string> shaderKeywords;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private Shader depthShader;

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private Shader dofExclusionShader;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private bool shouldUpdateMaterialProperties;

		[Token(Token = "0x4001F7D")]
		private const string BEAUTIFY_BUILD_HINT = "BeautifyBuildHint702b2";

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		private float sunFlareCurrentIntensity;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private Vector4 sunLastScrPos;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private float sunLastRot;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private Texture2D flareNoise;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private RenderTexture dofDepthTexture;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private RenderTexture dofExclusionTexture;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private RenderTexture bloomSourceTexture;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private RenderTexture bloomSourceDepthTexture;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		private RenderTexture pixelateTexture;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private RenderTextureDescriptor rtDescBase;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		private float sunFlareTime;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private int dofCurrentLayerMaskValue;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private int bloomCurrentLayerMaskValue;

		[Token(Token = "0x170003B9")]
		public BEAUTIFY_PRESET preset
		{
			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0xC0FF9C", Offset = "0xC0FF9C", VA = "0xC0FF9C")]
			get
			{
				return default(BEAUTIFY_PRESET);
			}
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0xC0FFA4", Offset = "0xC0FFA4", VA = "0xC0FFA4")]
			set
			{
			}
		}

		[Token(Token = "0x170003BA")]
		public BEAUTIFY_QUALITY quality
		{
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0xC10014", Offset = "0xC10014", VA = "0xC10014")]
			get
			{
				return default(BEAUTIFY_QUALITY);
			}
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0xC1001C", Offset = "0xC1001C", VA = "0xC1001C")]
			set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public BeautifyProfile profile
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0xC100CC", Offset = "0xC100CC", VA = "0xC100CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0xC100D4", Offset = "0xC100D4", VA = "0xC100D4")]
			set
			{
			}
		}

		[Token(Token = "0x170003BC")]
		public bool compareMode
		{
			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0xC101A4", Offset = "0xC101A4", VA = "0xC101A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BA7")]
			[Address(RVA = "0xC101AC", Offset = "0xC101AC", VA = "0xC101AC")]
			set
			{
			}
		}

		[Token(Token = "0x170003BD")]
		public float compareLineAngle
		{
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0xC101F0", Offset = "0xC101F0", VA = "0xC101F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0xC101F8", Offset = "0xC101F8", VA = "0xC101F8")]
			set
			{
			}
		}

		[Token(Token = "0x170003BE")]
		public float compareLineWidth
		{
			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0xC10238", Offset = "0xC10238", VA = "0xC10238")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0xC10240", Offset = "0xC10240", VA = "0xC10240")]
			set
			{
			}
		}

		[Token(Token = "0x170003BF")]
		public float dither
		{
			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0xC10280", Offset = "0xC10280", VA = "0xC10280")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0xC10288", Offset = "0xC10288", VA = "0xC10288")]
			set
			{
			}
		}

		[Token(Token = "0x170003C0")]
		public float ditherDepth
		{
			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0xC102D0", Offset = "0xC102D0", VA = "0xC102D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0xC102D8", Offset = "0xC102D8", VA = "0xC102D8")]
			set
			{
			}
		}

		[Token(Token = "0x170003C1")]
		public float sharpenMinDepth
		{
			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0xC10320", Offset = "0xC10320", VA = "0xC10320")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0xC10328", Offset = "0xC10328", VA = "0xC10328")]
			set
			{
			}
		}

		[Token(Token = "0x170003C2")]
		public float sharpenMaxDepth
		{
			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0xC10368", Offset = "0xC10368", VA = "0xC10368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0xC10370", Offset = "0xC10370", VA = "0xC10370")]
			set
			{
			}
		}

		[Token(Token = "0x170003C3")]
		public float sharpen
		{
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xC103B0", Offset = "0xC103B0", VA = "0xC103B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0xC103B8", Offset = "0xC103B8", VA = "0xC103B8")]
			set
			{
			}
		}

		[Token(Token = "0x170003C4")]
		public float sharpenDepthThreshold
		{
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0xC10400", Offset = "0xC10400", VA = "0xC10400")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0xC10408", Offset = "0xC10408", VA = "0xC10408")]
			set
			{
			}
		}

		[Token(Token = "0x170003C5")]
		public Color tintColor
		{
			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0xC10450", Offset = "0xC10450", VA = "0xC10450")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0xC1045C", Offset = "0xC1045C", VA = "0xC1045C")]
			set
			{
			}
		}

		[Token(Token = "0x170003C6")]
		public float sharpenRelaxation
		{
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0xC104D8", Offset = "0xC104D8", VA = "0xC104D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0xC104E0", Offset = "0xC104E0", VA = "0xC104E0")]
			set
			{
			}
		}

		[Token(Token = "0x170003C7")]
		public float sharpenClamp
		{
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0xC10528", Offset = "0xC10528", VA = "0xC10528")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0xC10530", Offset = "0xC10530", VA = "0xC10530")]
			set
			{
			}
		}

		[Token(Token = "0x170003C8")]
		public float sharpenMotionSensibility
		{
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0xC10578", Offset = "0xC10578", VA = "0xC10578")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BBF")]
			[Address(RVA = "0xC10580", Offset = "0xC10580", VA = "0xC10580")]
			set
			{
			}
		}

		[Token(Token = "0x170003C9")]
		public float saturate
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0xC105C0", Offset = "0xC105C0", VA = "0xC105C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0xC105C8", Offset = "0xC105C8", VA = "0xC105C8")]
			set
			{
			}
		}

		[Token(Token = "0x170003CA")]
		public float contrast
		{
			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0xC10610", Offset = "0xC10610", VA = "0xC10610")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0xC10618", Offset = "0xC10618", VA = "0xC10618")]
			set
			{
			}
		}

		[Token(Token = "0x170003CB")]
		public float brightness
		{
			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0xC10660", Offset = "0xC10660", VA = "0xC10660")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC5")]
			[Address(RVA = "0xC10668", Offset = "0xC10668", VA = "0xC10668")]
			set
			{
			}
		}

		[Token(Token = "0x170003CC")]
		public float daltonize
		{
			[Token(Token = "0x6001BC6")]
			[Address(RVA = "0xC106B0", Offset = "0xC106B0", VA = "0xC106B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0xC106B8", Offset = "0xC106B8", VA = "0xC106B8")]
			set
			{
			}
		}

		[Token(Token = "0x170003CD")]
		public bool vignetting
		{
			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0xC10700", Offset = "0xC10700", VA = "0xC10700")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0xC0F114", Offset = "0xC0F114", VA = "0xC0F114")]
			set
			{
			}
		}

		[Token(Token = "0x170003CE")]
		public Color vignettingColor
		{
			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0xC10708", Offset = "0xC10708", VA = "0xC10708")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0xC0F1E0", Offset = "0xC0F1E0", VA = "0xC0F1E0")]
			set
			{
			}
		}

		[Token(Token = "0x170003CF")]
		public float vignettingFade
		{
			[Token(Token = "0x6001BCC")]
			[Address(RVA = "0xC10714", Offset = "0xC10714", VA = "0xC10714")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BCD")]
			[Address(RVA = "0xC1071C", Offset = "0xC1071C", VA = "0xC1071C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D0")]
		public bool vignettingCircularShape
		{
			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xC1075C", Offset = "0xC1075C", VA = "0xC1075C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0xC10764", Offset = "0xC10764", VA = "0xC10764")]
			set
			{
			}
		}

		[Token(Token = "0x170003D1")]
		public float vignettingAspectRatio
		{
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0xC107A8", Offset = "0xC107A8", VA = "0xC107A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0xC107B0", Offset = "0xC107B0", VA = "0xC107B0")]
			set
			{
			}
		}

		[Token(Token = "0x170003D2")]
		public float vignettingBlink
		{
			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0xC107F0", Offset = "0xC107F0", VA = "0xC107F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BD3")]
			[Address(RVA = "0xC107F8", Offset = "0xC107F8", VA = "0xC107F8")]
			set
			{
			}
		}

		[Token(Token = "0x170003D3")]
		public Texture2D vignettingMask
		{
			[Token(Token = "0x6001BD4")]
			[Address(RVA = "0xC10838", Offset = "0xC10838", VA = "0xC10838")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0xC10840", Offset = "0xC10840", VA = "0xC10840")]
			set
			{
			}
		}

		[Token(Token = "0x170003D4")]
		public bool frame
		{
			[Token(Token = "0x6001BD6")]
			[Address(RVA = "0xC108F0", Offset = "0xC108F0", VA = "0xC108F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BD7")]
			[Address(RVA = "0xC0F158", Offset = "0xC0F158", VA = "0xC0F158")]
			set
			{
			}
		}

		[Token(Token = "0x170003D5")]
		public Color frameColor
		{
			[Token(Token = "0x6001BD8")]
			[Address(RVA = "0xC108F8", Offset = "0xC108F8", VA = "0xC108F8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001BD9")]
			[Address(RVA = "0xC10904", Offset = "0xC10904", VA = "0xC10904")]
			set
			{
			}
		}

		[Token(Token = "0x170003D6")]
		public Texture2D frameMask
		{
			[Token(Token = "0x6001BDA")]
			[Address(RVA = "0xC10980", Offset = "0xC10980", VA = "0xC10980")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BDB")]
			[Address(RVA = "0xC10988", Offset = "0xC10988", VA = "0xC10988")]
			set
			{
			}
		}

		[Token(Token = "0x170003D7")]
		public bool lut
		{
			[Token(Token = "0x6001BDC")]
			[Address(RVA = "0xC10A38", Offset = "0xC10A38", VA = "0xC10A38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BDD")]
			[Address(RVA = "0xC0EF40", Offset = "0xC0EF40", VA = "0xC0EF40")]
			set
			{
			}
		}

		[Token(Token = "0x170003D8")]
		public float lutIntensity
		{
			[Token(Token = "0x6001BDE")]
			[Address(RVA = "0xC10A40", Offset = "0xC10A40", VA = "0xC10A40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BDF")]
			[Address(RVA = "0xC10A48", Offset = "0xC10A48", VA = "0xC10A48")]
			set
			{
			}
		}

		[Token(Token = "0x170003D9")]
		public Texture2D lutTexture
		{
			[Token(Token = "0x6001BE0")]
			[Address(RVA = "0xC10A88", Offset = "0xC10A88", VA = "0xC10A88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BE1")]
			[Address(RVA = "0xC10A90", Offset = "0xC10A90", VA = "0xC10A90")]
			set
			{
			}
		}

		[Token(Token = "0x170003DA")]
		public bool nightVision
		{
			[Token(Token = "0x6001BE2")]
			[Address(RVA = "0xC10B40", Offset = "0xC10B40", VA = "0xC10B40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0xC0EFD4", Offset = "0xC0EFD4", VA = "0xC0EFD4")]
			set
			{
			}
		}

		[Token(Token = "0x170003DB")]
		public Color nightVisionColor
		{
			[Token(Token = "0x6001BE4")]
			[Address(RVA = "0xC10B48", Offset = "0xC10B48", VA = "0xC10B48")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001BE5")]
			[Address(RVA = "0xC10B54", Offset = "0xC10B54", VA = "0xC10B54")]
			set
			{
			}
		}

		[Token(Token = "0x170003DC")]
		public bool outline
		{
			[Token(Token = "0x6001BE6")]
			[Address(RVA = "0xC10BD0", Offset = "0xC10BD0", VA = "0xC10BD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BE7")]
			[Address(RVA = "0xC0EF90", Offset = "0xC0EF90", VA = "0xC0EF90")]
			set
			{
			}
		}

		[Token(Token = "0x170003DD")]
		public Color outlineColor
		{
			[Token(Token = "0x6001BE8")]
			[Address(RVA = "0xC10BD8", Offset = "0xC10BD8", VA = "0xC10BD8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001BE9")]
			[Address(RVA = "0xC10BE4", Offset = "0xC10BE4", VA = "0xC10BE4")]
			set
			{
			}
		}

		[Token(Token = "0x170003DE")]
		public bool thermalVision
		{
			[Token(Token = "0x6001BEA")]
			[Address(RVA = "0xC10C60", Offset = "0xC10C60", VA = "0xC10C60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BEB")]
			[Address(RVA = "0xC0F2A0", Offset = "0xC0F2A0", VA = "0xC0F2A0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DF")]
		public bool lensDirt
		{
			[Token(Token = "0x6001BEC")]
			[Address(RVA = "0xC10C68", Offset = "0xC10C68", VA = "0xC10C68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BED")]
			[Address(RVA = "0xC0F0D0", Offset = "0xC0F0D0", VA = "0xC0F0D0")]
			set
			{
			}
		}

		[Token(Token = "0x170003E0")]
		public float lensDirtThreshold
		{
			[Token(Token = "0x6001BEE")]
			[Address(RVA = "0xC10C70", Offset = "0xC10C70", VA = "0xC10C70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BEF")]
			[Address(RVA = "0xC10C78", Offset = "0xC10C78", VA = "0xC10C78")]
			set
			{
			}
		}

		[Token(Token = "0x170003E1")]
		public float lensDirtIntensity
		{
			[Token(Token = "0x6001BF0")]
			[Address(RVA = "0xC10CB8", Offset = "0xC10CB8", VA = "0xC10CB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BF1")]
			[Address(RVA = "0xC10CC0", Offset = "0xC10CC0", VA = "0xC10CC0")]
			set
			{
			}
		}

		[Token(Token = "0x170003E2")]
		public Texture2D lensDirtTexture
		{
			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0xC10D00", Offset = "0xC10D00", VA = "0xC10D00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0xC10D08", Offset = "0xC10D08", VA = "0xC10D08")]
			set
			{
			}
		}

		[Token(Token = "0x170003E3")]
		public bool bloom
		{
			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0xC10DB4", Offset = "0xC10DB4", VA = "0xC10DB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BF5")]
			[Address(RVA = "0xC0F048", Offset = "0xC0F048", VA = "0xC0F048")]
			set
			{
			}
		}

		[Token(Token = "0x170003E4")]
		public LayerMask bloomCullingMask
		{
			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0xC10DBC", Offset = "0xC10DBC", VA = "0xC10DBC")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001BF7")]
			[Address(RVA = "0xC10DC4", Offset = "0xC10DC4", VA = "0xC10DC4")]
			set
			{
			}
		}

		[Token(Token = "0x170003E5")]
		public float bloomLayerMaskDownsampling
		{
			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0xC10E2C", Offset = "0xC10E2C", VA = "0xC10E2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BF9")]
			[Address(RVA = "0xC10E34", Offset = "0xC10E34", VA = "0xC10E34")]
			set
			{
			}
		}

		[Token(Token = "0x170003E6")]
		public float bloomIntensity
		{
			[Token(Token = "0x6001BFA")]
			[Address(RVA = "0xC10E7C", Offset = "0xC10E7C", VA = "0xC10E7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BFB")]
			[Address(RVA = "0xC0E784", Offset = "0xC0E784", VA = "0xC0E784")]
			set
			{
			}
		}

		[Token(Token = "0x170003E7")]
		public float bloomMaxBrightness
		{
			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0xC10E84", Offset = "0xC10E84", VA = "0xC10E84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BFD")]
			[Address(RVA = "0xC10E8C", Offset = "0xC10E8C", VA = "0xC10E8C")]
			set
			{
			}
		}

		[Token(Token = "0x170003E8")]
		public float bloomBoost0
		{
			[Token(Token = "0x6001BFE")]
			[Address(RVA = "0xC10ED0", Offset = "0xC10ED0", VA = "0xC10ED0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BFF")]
			[Address(RVA = "0xC10ED8", Offset = "0xC10ED8", VA = "0xC10ED8")]
			set
			{
			}
		}

		[Token(Token = "0x170003E9")]
		public float bloomBoost1
		{
			[Token(Token = "0x6001C00")]
			[Address(RVA = "0xC10F18", Offset = "0xC10F18", VA = "0xC10F18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C01")]
			[Address(RVA = "0xC10F20", Offset = "0xC10F20", VA = "0xC10F20")]
			set
			{
			}
		}

		[Token(Token = "0x170003EA")]
		public float bloomBoost2
		{
			[Token(Token = "0x6001C02")]
			[Address(RVA = "0xC10F60", Offset = "0xC10F60", VA = "0xC10F60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C03")]
			[Address(RVA = "0xC10F68", Offset = "0xC10F68", VA = "0xC10F68")]
			set
			{
			}
		}

		[Token(Token = "0x170003EB")]
		public float bloomBoost3
		{
			[Token(Token = "0x6001C04")]
			[Address(RVA = "0xC10FA8", Offset = "0xC10FA8", VA = "0xC10FA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C05")]
			[Address(RVA = "0xC10FB0", Offset = "0xC10FB0", VA = "0xC10FB0")]
			set
			{
			}
		}

		[Token(Token = "0x170003EC")]
		public float bloomBoost4
		{
			[Token(Token = "0x6001C06")]
			[Address(RVA = "0xC10FF0", Offset = "0xC10FF0", VA = "0xC10FF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C07")]
			[Address(RVA = "0xC10FF8", Offset = "0xC10FF8", VA = "0xC10FF8")]
			set
			{
			}
		}

		[Token(Token = "0x170003ED")]
		public float bloomBoost5
		{
			[Token(Token = "0x6001C08")]
			[Address(RVA = "0xC11038", Offset = "0xC11038", VA = "0xC11038")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C09")]
			[Address(RVA = "0xC11040", Offset = "0xC11040", VA = "0xC11040")]
			set
			{
			}
		}

		[Token(Token = "0x170003EE")]
		public bool bloomAntiflicker
		{
			[Token(Token = "0x6001C0A")]
			[Address(RVA = "0xC11080", Offset = "0xC11080", VA = "0xC11080")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0xC11088", Offset = "0xC11088", VA = "0xC11088")]
			set
			{
			}
		}

		[Token(Token = "0x170003EF")]
		public bool bloomUltra
		{
			[Token(Token = "0x6001C0C")]
			[Address(RVA = "0xC110CC", Offset = "0xC110CC", VA = "0xC110CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C0D")]
			[Address(RVA = "0xC110D4", Offset = "0xC110D4", VA = "0xC110D4")]
			set
			{
			}
		}

		[Token(Token = "0x170003F0")]
		public float bloomThreshold
		{
			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0xC11118", Offset = "0xC11118", VA = "0xC11118")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C0F")]
			[Address(RVA = "0xC11120", Offset = "0xC11120", VA = "0xC11120")]
			set
			{
			}
		}

		[Token(Token = "0x170003F1")]
		public bool bloomCustomize
		{
			[Token(Token = "0x6001C10")]
			[Address(RVA = "0xC11160", Offset = "0xC11160", VA = "0xC11160")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C11")]
			[Address(RVA = "0xC11168", Offset = "0xC11168", VA = "0xC11168")]
			set
			{
			}
		}

		[Token(Token = "0x170003F2")]
		public bool bloomDebug
		{
			[Token(Token = "0x6001C12")]
			[Address(RVA = "0xC111AC", Offset = "0xC111AC", VA = "0xC111AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C13")]
			[Address(RVA = "0xC111B4", Offset = "0xC111B4", VA = "0xC111B4")]
			set
			{
			}
		}

		[Token(Token = "0x170003F3")]
		public float bloomWeight0
		{
			[Token(Token = "0x6001C14")]
			[Address(RVA = "0xC111F8", Offset = "0xC111F8", VA = "0xC111F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C15")]
			[Address(RVA = "0xC11200", Offset = "0xC11200", VA = "0xC11200")]
			set
			{
			}
		}

		[Token(Token = "0x170003F4")]
		public float bloomWeight1
		{
			[Token(Token = "0x6001C16")]
			[Address(RVA = "0xC11240", Offset = "0xC11240", VA = "0xC11240")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C17")]
			[Address(RVA = "0xC11248", Offset = "0xC11248", VA = "0xC11248")]
			set
			{
			}
		}

		[Token(Token = "0x170003F5")]
		public float bloomWeight2
		{
			[Token(Token = "0x6001C18")]
			[Address(RVA = "0xC11288", Offset = "0xC11288", VA = "0xC11288")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xC11290", Offset = "0xC11290", VA = "0xC11290")]
			set
			{
			}
		}

		[Token(Token = "0x170003F6")]
		public float bloomWeight3
		{
			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0xC112D0", Offset = "0xC112D0", VA = "0xC112D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C1B")]
			[Address(RVA = "0xC112D8", Offset = "0xC112D8", VA = "0xC112D8")]
			set
			{
			}
		}

		[Token(Token = "0x170003F7")]
		public float bloomWeight4
		{
			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0xC11318", Offset = "0xC11318", VA = "0xC11318")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0xC11320", Offset = "0xC11320", VA = "0xC11320")]
			set
			{
			}
		}

		[Token(Token = "0x170003F8")]
		public float bloomWeight5
		{
			[Token(Token = "0x6001C1E")]
			[Address(RVA = "0xC11360", Offset = "0xC11360", VA = "0xC11360")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C1F")]
			[Address(RVA = "0xC11368", Offset = "0xC11368", VA = "0xC11368")]
			set
			{
			}
		}

		[Token(Token = "0x170003F9")]
		public bool bloomBlur
		{
			[Token(Token = "0x6001C20")]
			[Address(RVA = "0xC113A8", Offset = "0xC113A8", VA = "0xC113A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C21")]
			[Address(RVA = "0xC113B0", Offset = "0xC113B0", VA = "0xC113B0")]
			set
			{
			}
		}

		[Token(Token = "0x170003FA")]
		public float bloomDepthAtten
		{
			[Token(Token = "0x6001C22")]
			[Address(RVA = "0xC113F4", Offset = "0xC113F4", VA = "0xC113F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C23")]
			[Address(RVA = "0xC113FC", Offset = "0xC113FC", VA = "0xC113FC")]
			set
			{
			}
		}

		[Token(Token = "0x170003FB")]
		public float bloomLayerZBias
		{
			[Token(Token = "0x6001C24")]
			[Address(RVA = "0xC1143C", Offset = "0xC1143C", VA = "0xC1143C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C25")]
			[Address(RVA = "0xC11444", Offset = "0xC11444", VA = "0xC11444")]
			set
			{
			}
		}

		[Token(Token = "0x170003FC")]
		public bool anamorphicFlares
		{
			[Token(Token = "0x6001C26")]
			[Address(RVA = "0xC11498", Offset = "0xC11498", VA = "0xC11498")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C27")]
			[Address(RVA = "0xC0F08C", Offset = "0xC0F08C", VA = "0xC0F08C")]
			set
			{
			}
		}

		[Token(Token = "0x170003FD")]
		public float anamorphicFlaresIntensity
		{
			[Token(Token = "0x6001C28")]
			[Address(RVA = "0xC114A0", Offset = "0xC114A0", VA = "0xC114A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C29")]
			[Address(RVA = "0xC114A8", Offset = "0xC114A8", VA = "0xC114A8")]
			set
			{
			}
		}

		[Token(Token = "0x170003FE")]
		public bool anamorphicFlaresAntiflicker
		{
			[Token(Token = "0x6001C2A")]
			[Address(RVA = "0xC114EC", Offset = "0xC114EC", VA = "0xC114EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C2B")]
			[Address(RVA = "0xC114F4", Offset = "0xC114F4", VA = "0xC114F4")]
			set
			{
			}
		}

		[Token(Token = "0x170003FF")]
		public bool anamorphicFlaresUltra
		{
			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0xC11538", Offset = "0xC11538", VA = "0xC11538")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0xC11540", Offset = "0xC11540", VA = "0xC11540")]
			set
			{
			}
		}

		[Token(Token = "0x17000400")]
		public float anamorphicFlaresThreshold
		{
			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0xC11584", Offset = "0xC11584", VA = "0xC11584")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C2F")]
			[Address(RVA = "0xC1158C", Offset = "0xC1158C", VA = "0xC1158C")]
			set
			{
			}
		}

		[Token(Token = "0x17000401")]
		public float anamorphicFlaresSpread
		{
			[Token(Token = "0x6001C30")]
			[Address(RVA = "0xC115CC", Offset = "0xC115CC", VA = "0xC115CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C31")]
			[Address(RVA = "0xC115D4", Offset = "0xC115D4", VA = "0xC115D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000402")]
		public bool anamorphicFlaresVertical
		{
			[Token(Token = "0x6001C32")]
			[Address(RVA = "0xC11614", Offset = "0xC11614", VA = "0xC11614")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C33")]
			[Address(RVA = "0xC0F25C", Offset = "0xC0F25C", VA = "0xC0F25C")]
			set
			{
			}
		}

		[Token(Token = "0x17000403")]
		public Color anamorphicFlaresTint
		{
			[Token(Token = "0x6001C34")]
			[Address(RVA = "0xC1161C", Offset = "0xC1161C", VA = "0xC1161C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001C35")]
			[Address(RVA = "0xC11630", Offset = "0xC11630", VA = "0xC11630")]
			set
			{
			}
		}

		[Token(Token = "0x17000404")]
		public bool anamorphicFlaresBlur
		{
			[Token(Token = "0x6001C36")]
			[Address(RVA = "0xC116BC", Offset = "0xC116BC", VA = "0xC116BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xC116C4", Offset = "0xC116C4", VA = "0xC116C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000405")]
		public bool depthOfField
		{
			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xC11708", Offset = "0xC11708", VA = "0xC11708")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C39")]
			[Address(RVA = "0xC11710", Offset = "0xC11710", VA = "0xC11710")]
			set
			{
			}
		}

		[Token(Token = "0x17000406")]
		public bool depthOfFieldTransparencySupport
		{
			[Token(Token = "0x6001C3A")]
			[Address(RVA = "0xC11754", Offset = "0xC11754", VA = "0xC11754")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C3B")]
			[Address(RVA = "0xC0F424", Offset = "0xC0F424", VA = "0xC0F424")]
			set
			{
			}
		}

		[Token(Token = "0x17000407")]
		public LayerMask depthOfFieldTransparencyLayerMask
		{
			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0xC1175C", Offset = "0xC1175C", VA = "0xC1175C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001C3D")]
			[Address(RVA = "0xC11764", Offset = "0xC11764", VA = "0xC11764")]
			set
			{
			}
		}

		[Token(Token = "0x17000408")]
		public Transform depthOfFieldTargetFocus
		{
			[Token(Token = "0x6001C3E")]
			[Address(RVA = "0xC117CC", Offset = "0xC117CC", VA = "0xC117CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C3F")]
			[Address(RVA = "0xC117D4", Offset = "0xC117D4", VA = "0xC117D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000409")]
		public bool depthOfFieldDebug
		{
			[Token(Token = "0x6001C40")]
			[Address(RVA = "0xC11880", Offset = "0xC11880", VA = "0xC11880")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C41")]
			[Address(RVA = "0xC11888", Offset = "0xC11888", VA = "0xC11888")]
			set
			{
			}
		}

		[Token(Token = "0x1700040A")]
		public bool depthOfFieldAutofocus
		{
			[Token(Token = "0x6001C42")]
			[Address(RVA = "0xC118CC", Offset = "0xC118CC", VA = "0xC118CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C43")]
			[Address(RVA = "0xC118D4", Offset = "0xC118D4", VA = "0xC118D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700040B")]
		public Vector2 depthofFieldAutofocusViewportPoint
		{
			[Token(Token = "0x6001C44")]
			[Address(RVA = "0xC11918", Offset = "0xC11918", VA = "0xC11918")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001C45")]
			[Address(RVA = "0xC11924", Offset = "0xC11924", VA = "0xC11924")]
			set
			{
			}
		}

		[Token(Token = "0x1700040C")]
		public float depthOfFieldAutofocusMinDistance
		{
			[Token(Token = "0x6001C46")]
			[Address(RVA = "0xC11988", Offset = "0xC11988", VA = "0xC11988")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C47")]
			[Address(RVA = "0xC11990", Offset = "0xC11990", VA = "0xC11990")]
			set
			{
			}
		}

		[Token(Token = "0x1700040D")]
		public float depthOfFieldAutofocusMaxDistance
		{
			[Token(Token = "0x6001C48")]
			[Address(RVA = "0xC119D0", Offset = "0xC119D0", VA = "0xC119D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C49")]
			[Address(RVA = "0xC119D8", Offset = "0xC119D8", VA = "0xC119D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700040E")]
		public LayerMask depthOfFieldAutofocusLayerMask
		{
			[Token(Token = "0x6001C4A")]
			[Address(RVA = "0xC11A18", Offset = "0xC11A18", VA = "0xC11A18")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0xC11A20", Offset = "0xC11A20", VA = "0xC11A20")]
			set
			{
			}
		}

		[Token(Token = "0x1700040F")]
		public LayerMask depthOfFieldExclusionLayerMask
		{
			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0xC11A88", Offset = "0xC11A88", VA = "0xC11A88")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0xC11A90", Offset = "0xC11A90", VA = "0xC11A90")]
			set
			{
			}
		}

		[Token(Token = "0x17000410")]
		public float depthOfFieldExclusionLayerMaskDownsampling
		{
			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0xC11AF8", Offset = "0xC11AF8", VA = "0xC11AF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0xC11B00", Offset = "0xC11B00", VA = "0xC11B00")]
			set
			{
			}
		}

		[Token(Token = "0x17000411")]
		public float depthOfFieldTransparencySupportDownsampling
		{
			[Token(Token = "0x6001C50")]
			[Address(RVA = "0xC11B48", Offset = "0xC11B48", VA = "0xC11B48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C51")]
			[Address(RVA = "0xC11B50", Offset = "0xC11B50", VA = "0xC11B50")]
			set
			{
			}
		}

		[Token(Token = "0x17000412")]
		public float depthOfFieldExclusionBias
		{
			[Token(Token = "0x6001C52")]
			[Address(RVA = "0xC11B98", Offset = "0xC11B98", VA = "0xC11B98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C53")]
			[Address(RVA = "0xC11BA0", Offset = "0xC11BA0", VA = "0xC11BA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000413")]
		public float depthOfFieldDistance
		{
			[Token(Token = "0x6001C54")]
			[Address(RVA = "0xC11BF4", Offset = "0xC11BF4", VA = "0xC11BF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C55")]
			[Address(RVA = "0xC11BFC", Offset = "0xC11BFC", VA = "0xC11BFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000414")]
		public float depthOfFieldFocusSpeed
		{
			[Token(Token = "0x6001C56")]
			[Address(RVA = "0xC11C44", Offset = "0xC11C44", VA = "0xC11C44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C57")]
			[Address(RVA = "0xC11C4C", Offset = "0xC11C4C", VA = "0xC11C4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000415")]
		public int depthOfFieldDownsampling
		{
			[Token(Token = "0x6001C58")]
			[Address(RVA = "0xC11CA4", Offset = "0xC11CA4", VA = "0xC11CA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0xC11CAC", Offset = "0xC11CAC", VA = "0xC11CAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000416")]
		public int depthOfFieldMaxSamples
		{
			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0xC11CF4", Offset = "0xC11CF4", VA = "0xC11CF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0xC11CFC", Offset = "0xC11CFC", VA = "0xC11CFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000417")]
		public float depthOfFieldFocalLength
		{
			[Token(Token = "0x6001C5C")]
			[Address(RVA = "0xC11D48", Offset = "0xC11D48", VA = "0xC11D48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C5D")]
			[Address(RVA = "0xC11D50", Offset = "0xC11D50", VA = "0xC11D50")]
			set
			{
			}
		}

		[Token(Token = "0x17000418")]
		public float depthOfFieldAperture
		{
			[Token(Token = "0x6001C5E")]
			[Address(RVA = "0xC11D94", Offset = "0xC11D94", VA = "0xC11D94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C5F")]
			[Address(RVA = "0xC11D9C", Offset = "0xC11D9C", VA = "0xC11D9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000419")]
		public bool depthOfFieldForegroundBlur
		{
			[Token(Token = "0x6001C60")]
			[Address(RVA = "0xC11DE0", Offset = "0xC11DE0", VA = "0xC11DE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C61")]
			[Address(RVA = "0xC11DE8", Offset = "0xC11DE8", VA = "0xC11DE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700041A")]
		public bool depthOfFieldForegroundBlurHQ
		{
			[Token(Token = "0x6001C62")]
			[Address(RVA = "0xC11E2C", Offset = "0xC11E2C", VA = "0xC11E2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C63")]
			[Address(RVA = "0xC11E34", Offset = "0xC11E34", VA = "0xC11E34")]
			set
			{
			}
		}

		[Token(Token = "0x1700041B")]
		public float depthOfFieldForegroundDistance
		{
			[Token(Token = "0x6001C64")]
			[Address(RVA = "0xC11E78", Offset = "0xC11E78", VA = "0xC11E78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C65")]
			[Address(RVA = "0xC11E80", Offset = "0xC11E80", VA = "0xC11E80")]
			set
			{
			}
		}

		[Token(Token = "0x1700041C")]
		public bool depthOfFieldBokeh
		{
			[Token(Token = "0x6001C66")]
			[Address(RVA = "0xC11EC0", Offset = "0xC11EC0", VA = "0xC11EC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C67")]
			[Address(RVA = "0xC11EC8", Offset = "0xC11EC8", VA = "0xC11EC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700041D")]
		public float depthOfFieldBokehThreshold
		{
			[Token(Token = "0x6001C68")]
			[Address(RVA = "0xC11F0C", Offset = "0xC11F0C", VA = "0xC11F0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C69")]
			[Address(RVA = "0xC11F14", Offset = "0xC11F14", VA = "0xC11F14")]
			set
			{
			}
		}

		[Token(Token = "0x1700041E")]
		public float depthOfFieldBokehIntensity
		{
			[Token(Token = "0x6001C6A")]
			[Address(RVA = "0xC11F5C", Offset = "0xC11F5C", VA = "0xC11F5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6B")]
			[Address(RVA = "0xC11F64", Offset = "0xC11F64", VA = "0xC11F64")]
			set
			{
			}
		}

		[Token(Token = "0x1700041F")]
		public float depthOfFieldMaxBrightness
		{
			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0xC11FAC", Offset = "0xC11FAC", VA = "0xC11FAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6D")]
			[Address(RVA = "0xC11FB4", Offset = "0xC11FB4", VA = "0xC11FB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000420")]
		public float depthOfFieldMaxDistance
		{
			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0xC11FF8", Offset = "0xC11FF8", VA = "0xC11FF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6F")]
			[Address(RVA = "0xC12000", Offset = "0xC12000", VA = "0xC12000")]
			set
			{
			}
		}

		[Token(Token = "0x17000421")]
		public FilterMode depthOfFieldFilterMode
		{
			[Token(Token = "0x6001C70")]
			[Address(RVA = "0xC12044", Offset = "0xC12044", VA = "0xC12044")]
			get
			{
				return default(FilterMode);
			}
			[Token(Token = "0x6001C71")]
			[Address(RVA = "0xC1204C", Offset = "0xC1204C", VA = "0xC1204C")]
			set
			{
			}
		}

		[Token(Token = "0x17000422")]
		public bool eyeAdaptation
		{
			[Token(Token = "0x6001C72")]
			[Address(RVA = "0xC1208C", Offset = "0xC1208C", VA = "0xC1208C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C73")]
			[Address(RVA = "0xC12094", Offset = "0xC12094", VA = "0xC12094")]
			set
			{
			}
		}

		[Token(Token = "0x17000423")]
		public float eyeAdaptationMinExposure
		{
			[Token(Token = "0x6001C74")]
			[Address(RVA = "0xC120D8", Offset = "0xC120D8", VA = "0xC120D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C75")]
			[Address(RVA = "0xC120E0", Offset = "0xC120E0", VA = "0xC120E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000424")]
		public float eyeAdaptationMaxExposure
		{
			[Token(Token = "0x6001C76")]
			[Address(RVA = "0xC12134", Offset = "0xC12134", VA = "0xC12134")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C77")]
			[Address(RVA = "0xC1213C", Offset = "0xC1213C", VA = "0xC1213C")]
			set
			{
			}
		}

		[Token(Token = "0x17000425")]
		public float eyeAdaptationSpeedToLight
		{
			[Token(Token = "0x6001C78")]
			[Address(RVA = "0xC12194", Offset = "0xC12194", VA = "0xC12194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C79")]
			[Address(RVA = "0xC1219C", Offset = "0xC1219C", VA = "0xC1219C")]
			set
			{
			}
		}

		[Token(Token = "0x17000426")]
		public float eyeAdaptationSpeedToDark
		{
			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0xC121F0", Offset = "0xC121F0", VA = "0xC121F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0xC121F8", Offset = "0xC121F8", VA = "0xC121F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000427")]
		public bool purkinje
		{
			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0xC1224C", Offset = "0xC1224C", VA = "0xC1224C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C7D")]
			[Address(RVA = "0xC12254", Offset = "0xC12254", VA = "0xC12254")]
			set
			{
			}
		}

		[Token(Token = "0x17000428")]
		public float purkinjeAmount
		{
			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0xC12298", Offset = "0xC12298", VA = "0xC12298")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0xC122A0", Offset = "0xC122A0", VA = "0xC122A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000429")]
		public float purkinjeLuminanceThreshold
		{
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0xC122F4", Offset = "0xC122F4", VA = "0xC122F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0xC122FC", Offset = "0xC122FC", VA = "0xC122FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700042A")]
		public BEAUTIFY_TMO tonemap
		{
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0xC12350", Offset = "0xC12350", VA = "0xC12350")]
			get
			{
				return default(BEAUTIFY_TMO);
			}
			[Token(Token = "0x6001C83")]
			[Address(RVA = "0xC12358", Offset = "0xC12358", VA = "0xC12358")]
			set
			{
			}
		}

		[Token(Token = "0x1700042B")]
		public bool sunFlares
		{
			[Token(Token = "0x6001C84")]
			[Address(RVA = "0xC123AC", Offset = "0xC123AC", VA = "0xC123AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C85")]
			[Address(RVA = "0xC0F19C", Offset = "0xC0F19C", VA = "0xC0F19C")]
			set
			{
			}
		}

		[Token(Token = "0x1700042C")]
		public Transform sun
		{
			[Token(Token = "0x6001C86")]
			[Address(RVA = "0xC123B4", Offset = "0xC123B4", VA = "0xC123B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C87")]
			[Address(RVA = "0xC123BC", Offset = "0xC123BC", VA = "0xC123BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700042D")]
		public LayerMask sunFlaresLayerMask
		{
			[Token(Token = "0x6001C88")]
			[Address(RVA = "0xC12468", Offset = "0xC12468", VA = "0xC12468")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001C89")]
			[Address(RVA = "0xC12470", Offset = "0xC12470", VA = "0xC12470")]
			set
			{
			}
		}

		[Token(Token = "0x1700042E")]
		public float sunFlaresIntensity
		{
			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0xC124D8", Offset = "0xC124D8", VA = "0xC124D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0xC124E0", Offset = "0xC124E0", VA = "0xC124E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700042F")]
		public float sunFlaresSolarWindSpeed
		{
			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0xC12520", Offset = "0xC12520", VA = "0xC12520")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0xC12528", Offset = "0xC12528", VA = "0xC12528")]
			set
			{
			}
		}

		[Token(Token = "0x17000430")]
		public Color sunFlaresTint
		{
			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0xC12568", Offset = "0xC12568", VA = "0xC12568")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001C8F")]
			[Address(RVA = "0xC1257C", Offset = "0xC1257C", VA = "0xC1257C")]
			set
			{
			}
		}

		[Token(Token = "0x17000431")]
		public int sunFlaresDownsampling
		{
			[Token(Token = "0x6001C90")]
			[Address(RVA = "0xC12608", Offset = "0xC12608", VA = "0xC12608")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C91")]
			[Address(RVA = "0xC12610", Offset = "0xC12610", VA = "0xC12610")]
			set
			{
			}
		}

		[Token(Token = "0x17000432")]
		public float sunFlaresSunIntensity
		{
			[Token(Token = "0x6001C92")]
			[Address(RVA = "0xC12658", Offset = "0xC12658", VA = "0xC12658")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C93")]
			[Address(RVA = "0xC12660", Offset = "0xC12660", VA = "0xC12660")]
			set
			{
			}
		}

		[Token(Token = "0x17000433")]
		public float sunFlaresSunDiskSize
		{
			[Token(Token = "0x6001C94")]
			[Address(RVA = "0xC126A0", Offset = "0xC126A0", VA = "0xC126A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C95")]
			[Address(RVA = "0xC126A8", Offset = "0xC126A8", VA = "0xC126A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000434")]
		public float sunFlaresSunRayDiffractionIntensity
		{
			[Token(Token = "0x6001C96")]
			[Address(RVA = "0xC126E8", Offset = "0xC126E8", VA = "0xC126E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C97")]
			[Address(RVA = "0xC126F0", Offset = "0xC126F0", VA = "0xC126F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000435")]
		public float sunFlaresSunRayDiffractionThreshold
		{
			[Token(Token = "0x6001C98")]
			[Address(RVA = "0xC12730", Offset = "0xC12730", VA = "0xC12730")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C99")]
			[Address(RVA = "0xC12738", Offset = "0xC12738", VA = "0xC12738")]
			set
			{
			}
		}

		[Token(Token = "0x17000436")]
		public float sunFlaresCoronaRays1Length
		{
			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0xC12778", Offset = "0xC12778", VA = "0xC12778")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C9B")]
			[Address(RVA = "0xC12780", Offset = "0xC12780", VA = "0xC12780")]
			set
			{
			}
		}

		[Token(Token = "0x17000437")]
		public int sunFlaresCoronaRays1Streaks
		{
			[Token(Token = "0x6001C9C")]
			[Address(RVA = "0xC127C0", Offset = "0xC127C0", VA = "0xC127C0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C9D")]
			[Address(RVA = "0xC127C8", Offset = "0xC127C8", VA = "0xC127C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000438")]
		public float sunFlaresCoronaRays1Spread
		{
			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0xC12808", Offset = "0xC12808", VA = "0xC12808")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C9F")]
			[Address(RVA = "0xC12810", Offset = "0xC12810", VA = "0xC12810")]
			set
			{
			}
		}

		[Token(Token = "0x17000439")]
		public float sunFlaresCoronaRays1AngleOffset
		{
			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0xC12850", Offset = "0xC12850", VA = "0xC12850")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA1")]
			[Address(RVA = "0xC12858", Offset = "0xC12858", VA = "0xC12858")]
			set
			{
			}
		}

		[Token(Token = "0x1700043A")]
		public float sunFlaresCoronaRays2Length
		{
			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0xC12898", Offset = "0xC12898", VA = "0xC12898")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xC128A0", Offset = "0xC128A0", VA = "0xC128A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700043B")]
		public int sunFlaresCoronaRays2Streaks
		{
			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0xC128E0", Offset = "0xC128E0", VA = "0xC128E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0xC128E8", Offset = "0xC128E8", VA = "0xC128E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700043C")]
		public float sunFlaresCoronaRays2Spread
		{
			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0xC12928", Offset = "0xC12928", VA = "0xC12928")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0xC12930", Offset = "0xC12930", VA = "0xC12930")]
			set
			{
			}
		}

		[Token(Token = "0x1700043D")]
		public float sunFlaresCoronaRays2AngleOffset
		{
			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0xC12970", Offset = "0xC12970", VA = "0xC12970")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0xC12978", Offset = "0xC12978", VA = "0xC12978")]
			set
			{
			}
		}

		[Token(Token = "0x1700043E")]
		public float sunFlaresGhosts1Size
		{
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0xC129B8", Offset = "0xC129B8", VA = "0xC129B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAB")]
			[Address(RVA = "0xC129C0", Offset = "0xC129C0", VA = "0xC129C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700043F")]
		public float sunFlaresGhosts1Offset
		{
			[Token(Token = "0x6001CAC")]
			[Address(RVA = "0xC12A00", Offset = "0xC12A00", VA = "0xC12A00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAD")]
			[Address(RVA = "0xC12A08", Offset = "0xC12A08", VA = "0xC12A08")]
			set
			{
			}
		}

		[Token(Token = "0x17000440")]
		public float sunFlaresGhosts1Brightness
		{
			[Token(Token = "0x6001CAE")]
			[Address(RVA = "0xC12A48", Offset = "0xC12A48", VA = "0xC12A48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAF")]
			[Address(RVA = "0xC12A50", Offset = "0xC12A50", VA = "0xC12A50")]
			set
			{
			}
		}

		[Token(Token = "0x17000441")]
		public float sunFlaresGhosts2Size
		{
			[Token(Token = "0x6001CB0")]
			[Address(RVA = "0xC12A90", Offset = "0xC12A90", VA = "0xC12A90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0xC12A98", Offset = "0xC12A98", VA = "0xC12A98")]
			set
			{
			}
		}

		[Token(Token = "0x17000442")]
		public float sunFlaresGhosts2Offset
		{
			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0xC12AD8", Offset = "0xC12AD8", VA = "0xC12AD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB3")]
			[Address(RVA = "0xC12AE0", Offset = "0xC12AE0", VA = "0xC12AE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000443")]
		public float sunFlaresGhosts2Brightness
		{
			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0xC12B20", Offset = "0xC12B20", VA = "0xC12B20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0xC12B28", Offset = "0xC12B28", VA = "0xC12B28")]
			set
			{
			}
		}

		[Token(Token = "0x17000444")]
		public float sunFlaresGhosts3Size
		{
			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0xC12B68", Offset = "0xC12B68", VA = "0xC12B68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0xC12B70", Offset = "0xC12B70", VA = "0xC12B70")]
			set
			{
			}
		}

		[Token(Token = "0x17000445")]
		public float sunFlaresGhosts3Brightness
		{
			[Token(Token = "0x6001CB8")]
			[Address(RVA = "0xC12BB0", Offset = "0xC12BB0", VA = "0xC12BB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB9")]
			[Address(RVA = "0xC12BB8", Offset = "0xC12BB8", VA = "0xC12BB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000446")]
		public float sunFlaresGhosts3Offset
		{
			[Token(Token = "0x6001CBA")]
			[Address(RVA = "0xC12BF8", Offset = "0xC12BF8", VA = "0xC12BF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CBB")]
			[Address(RVA = "0xC12C00", Offset = "0xC12C00", VA = "0xC12C00")]
			set
			{
			}
		}

		[Token(Token = "0x17000447")]
		public float sunFlaresGhosts4Size
		{
			[Token(Token = "0x6001CBC")]
			[Address(RVA = "0xC12C40", Offset = "0xC12C40", VA = "0xC12C40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CBD")]
			[Address(RVA = "0xC12C48", Offset = "0xC12C48", VA = "0xC12C48")]
			set
			{
			}
		}

		[Token(Token = "0x17000448")]
		public float sunFlaresGhosts4Offset
		{
			[Token(Token = "0x6001CBE")]
			[Address(RVA = "0xC12C88", Offset = "0xC12C88", VA = "0xC12C88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CBF")]
			[Address(RVA = "0xC12C90", Offset = "0xC12C90", VA = "0xC12C90")]
			set
			{
			}
		}

		[Token(Token = "0x17000449")]
		public float sunFlaresGhosts4Brightness
		{
			[Token(Token = "0x6001CC0")]
			[Address(RVA = "0xC12CD0", Offset = "0xC12CD0", VA = "0xC12CD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CC1")]
			[Address(RVA = "0xC12CD8", Offset = "0xC12CD8", VA = "0xC12CD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700044A")]
		public float sunFlaresHaloOffset
		{
			[Token(Token = "0x6001CC2")]
			[Address(RVA = "0xC12D18", Offset = "0xC12D18", VA = "0xC12D18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CC3")]
			[Address(RVA = "0xC12D20", Offset = "0xC12D20", VA = "0xC12D20")]
			set
			{
			}
		}

		[Token(Token = "0x1700044B")]
		public float sunFlaresHaloAmplitude
		{
			[Token(Token = "0x6001CC4")]
			[Address(RVA = "0xC12D60", Offset = "0xC12D60", VA = "0xC12D60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0xC12D68", Offset = "0xC12D68", VA = "0xC12D68")]
			set
			{
			}
		}

		[Token(Token = "0x1700044C")]
		public float sunFlaresHaloIntensity
		{
			[Token(Token = "0x6001CC6")]
			[Address(RVA = "0xC12DA8", Offset = "0xC12DA8", VA = "0xC12DA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CC7")]
			[Address(RVA = "0xC12DB0", Offset = "0xC12DB0", VA = "0xC12DB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700044D")]
		public bool sunFlaresRotationDeadZone
		{
			[Token(Token = "0x6001CC8")]
			[Address(RVA = "0xC12DF0", Offset = "0xC12DF0", VA = "0xC12DF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CC9")]
			[Address(RVA = "0xC12DF8", Offset = "0xC12DF8", VA = "0xC12DF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700044E")]
		public bool blur
		{
			[Token(Token = "0x6001CCA")]
			[Address(RVA = "0xC12E3C", Offset = "0xC12E3C", VA = "0xC12E3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CCB")]
			[Address(RVA = "0xC12E44", Offset = "0xC12E44", VA = "0xC12E44")]
			set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public float blurIntensity
		{
			[Token(Token = "0x6001CCC")]
			[Address(RVA = "0xC12E88", Offset = "0xC12E88", VA = "0xC12E88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CCD")]
			[Address(RVA = "0xC12E90", Offset = "0xC12E90", VA = "0xC12E90")]
			set
			{
			}
		}

		[Token(Token = "0x17000450")]
		public int pixelateAmount
		{
			[Token(Token = "0x6001CCE")]
			[Address(RVA = "0xC12ED0", Offset = "0xC12ED0", VA = "0xC12ED0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001CCF")]
			[Address(RVA = "0xC12ED8", Offset = "0xC12ED8", VA = "0xC12ED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000451")]
		public bool pixelateDownscale
		{
			[Token(Token = "0x6001CD0")]
			[Address(RVA = "0xC12F18", Offset = "0xC12F18", VA = "0xC12F18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CD1")]
			[Address(RVA = "0xC12F20", Offset = "0xC12F20", VA = "0xC12F20")]
			set
			{
			}
		}

		[Token(Token = "0x17000452")]
		public float antialiasStrength
		{
			[Token(Token = "0x6001CD2")]
			[Address(RVA = "0xC12F64", Offset = "0xC12F64", VA = "0xC12F64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CD3")]
			[Address(RVA = "0xC12F6C", Offset = "0xC12F6C", VA = "0xC12F6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000453")]
		public float antialiasDepthThreshold
		{
			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0xC12FAC", Offset = "0xC12FAC", VA = "0xC12FAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CD5")]
			[Address(RVA = "0xC12FB4", Offset = "0xC12FB4", VA = "0xC12FB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000454")]
		public static Beautify instance
		{
			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0xC0E634", Offset = "0xC0E634", VA = "0xC0E634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000455")]
		public Camera cameraEffect
		{
			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0xC12FF4", Offset = "0xC12FF4", VA = "0xC12FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000456")]
		public float depthOfFieldCurrentFocalPointDistance
		{
			[Token(Token = "0x6001CF5")]
			[Address(RVA = "0xC19C9C", Offset = "0xC19C9C", VA = "0xC19C9C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xC12FFC", Offset = "0xC12FFC", VA = "0xC12FFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xC14AF0", Offset = "0xC14AF0", VA = "0xC14AF0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xC14EE0", Offset = "0xC14EE0", VA = "0xC14EE0")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xC14EE4", Offset = "0xC14EE4", VA = "0xC14EE4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xC15260", Offset = "0xC15260", VA = "0xC15260")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0xC161F0", Offset = "0xC161F0", VA = "0xC161F0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0xC14D30", Offset = "0xC14D30", VA = "0xC14D30")]
		private void CleanUpRT()
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0xC153E4", Offset = "0xC153E4", VA = "0xC153E4")]
		private void CheckDoFTransparencySupport()
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0xC15834", Offset = "0xC15834", VA = "0xC15834")]
		private void CheckDoFExclusionMask()
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xC15C70", Offset = "0xC15C70", VA = "0xC15C70")]
		private void CheckBloomCullingLayer()
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xC16474", Offset = "0xC16474", VA = "0xC16474", Slot = "4")]
		protected virtual void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xC1999C", Offset = "0xC1999C", VA = "0xC1999C")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0xC194DC", Offset = "0xC194DC", VA = "0xC194DC")]
		private void BlurThis(RenderTexture rt, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0xC19618", Offset = "0xC19618", VA = "0xC19618")]
		private void BlurThisDownscaling(RenderTexture rt, RenderTexture downscaled, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0xC19870", Offset = "0xC19870", VA = "0xC19870")]
		private RenderTexture BlurThisOneDirection(RenderTexture rt, bool vertical, float blurScale = 1f)
		{
			return null;
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0xC19260", Offset = "0xC19260", VA = "0xC19260")]
		private void BlurThisDoF(RenderTexture rt, int renderPass)
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0xC19124", Offset = "0xC19124", VA = "0xC19124")]
		private void BlurThisAlpha(RenderTexture rt, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0xC19B1C", Offset = "0xC19B1C", VA = "0xC19B1C")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0xC10094", Offset = "0xC10094", VA = "0xC10094")]
		public void UpdateQualitySettings()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0xC0FFE4", Offset = "0xC0FFE4", VA = "0xC0FFE4")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0xC130FC", Offset = "0xC130FC", VA = "0xC130FC")]
		public void UpdateMaterialPropertiesNow()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xC1943C", Offset = "0xC1943C", VA = "0xC1943C")]
		private void UpdateMaterialBloomIntensityAndThreshold()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xC197D8", Offset = "0xC197D8", VA = "0xC197D8")]
		private void UpdateMaterialAnamorphicIntensityAndThreshold()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xC151F4", Offset = "0xC151F4", VA = "0xC151F4")]
		private void UpdateSharpenParams(float sharpen)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xC18DFC", Offset = "0xC18DFC", VA = "0xC18DFC")]
		private void UpdateDepthOfFieldData()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xC19A90", Offset = "0xC19A90", VA = "0xC19A90")]
		private void UpdateDepthOfFieldBlurData(Vector2 blurDir)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xC19B28", Offset = "0xC19B28", VA = "0xC19B28")]
		private void UpdateDoFAutofocusDistance()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xC0E88C", Offset = "0xC0E88C", VA = "0xC0E88C")]
		public void Blink(float duration, float maxValue = 1f)
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xC19C10", Offset = "0xC19C10", VA = "0xC19C10")]
		private IEnumerator DoBlink(float duration, float maxValue)
		{
			return null;
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xC19CA4", Offset = "0xC19CA4", VA = "0xC19CA4")]
		public Beautify()
		{
		}
	}
	[Token(Token = "0x200051D")]
	public class BeautifyProfile : ScriptableObject
	{
		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float dither;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ditherDepth;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sharpenMinDepth;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sharpenMaxDepth;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sharpen;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sharpenDepthThreshold;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color tintColor;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float sharpenRelaxation;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float sharpenClamp;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float sharpenMotionSensibility;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float antialiasStrength;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float antialiasDepthThreshold;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float saturate;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float contrast;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float brightness;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float daltonize;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool vignetting;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color vignettingColor;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float vignettingFade;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool vignettingCircularShape;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float vignettingAspectRatio;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float vignettingBlink;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture2D vignettingMask;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool frame;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color frameColor;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture2D frameMask;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool lut;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float lutIntensity;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture2D lutTexture;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool nightVision;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Color nightVisionColor;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool outline;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color outlineColor;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool thermalVision;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		public bool lensDirt;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float lensDirtThreshold;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float lensDirtIntensity;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Texture2D lensDirtTexture;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool bloom;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public LayerMask bloomCullingMask;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float bloomLayerMaskDownsampling;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float bloomIntensity;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float bloomMaxBrightness;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float bloomBoost0;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float bloomBoost1;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float bloomBoost2;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float bloomBoost3;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float bloomBoost4;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float bloomBoost5;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public bool bloomAntiflicker;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		public bool bloomUltra;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float bloomThreshold;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public bool bloomCustomize;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float bloomWeight0;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float bloomWeight1;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float bloomWeight2;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float bloomWeight3;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float bloomWeight4;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float bloomWeight5;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool bloomBlur;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float bloomDepthAtten;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float bloomLayerZBias;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool anamorphicFlares;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float anamorphicFlaresIntensity;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public bool anamorphicFlaresAntiflicker;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
		public bool anamorphicFlaresUltra;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float anamorphicFlaresThreshold;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float anamorphicFlaresSpread;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool anamorphicFlaresVertical;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public Color anamorphicFlaresTint;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public bool anamorphicFlaresBlur;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
		public bool depthOfField;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x186")]
		public bool depthOfFieldTransparencySupport;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Transform depthOfFieldTargetFocus;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool depthOfFieldAutofocus;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public Vector2 depthofFieldAutofocusViewportPoint;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public LayerMask depthOfFieldAutofocusLayerMask;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float depthOfFieldAutofocusMinDistance;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float depthOfFieldAutofocusMaxDistance;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public LayerMask depthOfFieldExclusionLayerMask;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float depthOfFieldExclusionLayerMaskDownsampling;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float depthOfFieldTransparencySupportDownsampling;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float depthOfFieldExclusionBias;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float depthOfFieldDistance;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float depthOfFieldFocusSpeed;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public int depthOfFieldDownsampling;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public int depthOfFieldMaxSamples;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float depthOfFieldFocalLength;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float depthOfFieldAperture;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool depthOfFieldForegroundBlur;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		public bool depthOfFieldForegroundBlurHQ;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float depthOfFieldForegroundDistance;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool depthOfFieldBokeh;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public float depthOfFieldBokehThreshold;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float depthOfFieldBokehIntensity;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float depthOfFieldMaxBrightness;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float depthOfFieldMaxDistance;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public FilterMode depthOfFieldFilterMode;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public LayerMask depthOfFieldTransparencyLayerMask;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public bool eyeAdaptation;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float eyeAdaptationMinExposure;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public float eyeAdaptationMaxExposure;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float eyeAdaptationSpeedToLight;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public float eyeAdaptationSpeedToDark;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public bool purkinje;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public float purkinjeAmount;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float purkinjeLuminanceThreshold;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public BEAUTIFY_TMO tonemap;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public bool sunFlares;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float sunFlaresIntensity;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public float sunFlaresSolarWindSpeed;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public Color sunFlaresTint;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public int sunFlaresDownsampling;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public float sunFlaresSunIntensity;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public float sunFlaresSunDiskSize;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float sunFlaresSunRayDiffractionIntensity;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		public float sunFlaresSunRayDiffractionThreshold;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public float sunFlaresCoronaRays1Length;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int sunFlaresCoronaRays1Streaks;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public float sunFlaresCoronaRays1Spread;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public float sunFlaresCoronaRays1AngleOffset;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public float sunFlaresCoronaRays2Length;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		public int sunFlaresCoronaRays2Streaks;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public float sunFlaresCoronaRays2Spread;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		public float sunFlaresCoronaRays2AngleOffset;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public float sunFlaresGhosts1Size;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		public float sunFlaresGhosts1Offset;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public float sunFlaresGhosts1Brightness;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		public float sunFlaresGhosts2Size;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public float sunFlaresGhosts2Offset;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		public float sunFlaresGhosts2Brightness;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public float sunFlaresGhosts3Size;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public float sunFlaresGhosts3Brightness;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public float sunFlaresGhosts3Offset;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public float sunFlaresGhosts4Size;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public float sunFlaresGhosts4Offset;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public float sunFlaresGhosts4Brightness;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public float sunFlaresHaloOffset;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public float sunFlaresHaloAmplitude;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public float sunFlaresHaloIntensity;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		public bool sunFlaresRotationDeadZone;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A5")]
		public bool blur;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public float blurIntensity;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public int pixelateAmount;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public bool pixelateDownscale;

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xC1B18C", Offset = "0xC1B18C", VA = "0xC1B18C")]
		public void Load(Beautify b)
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xC1BAEC", Offset = "0xC1BAEC", VA = "0xC1BAEC")]
		public void Save(Beautify b)
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xC1BE7C", Offset = "0xC1BE7C", VA = "0xC1BE7C")]
		public BeautifyProfile()
		{
		}
	}
}
namespace BeautifulDissolves
{
	[Token(Token = "0x200051E")]
	public class Dissolve : MonoBehaviour
	{
		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected DissolveSettings m_DissolveSettings;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnDissolveStart;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnDissolveFinish;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Material[] m_Materials;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IEnumerator m_CurrentCoroutine;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool m_Dissolving;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool m_CanDissolve;

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xC1C108", Offset = "0xC1C108", VA = "0xC1C108", Slot = "4")]
		protected virtual Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xC1C1C0", Offset = "0xC1C1C0", VA = "0xC1C1C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xC1C1E8", Offset = "0xC1C1E8", VA = "0xC1C1E8")]
		public void TriggerDissolve()
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xC1C1F0", Offset = "0xC1C1F0", VA = "0xC1C1F0")]
		public void TriggerDissolve(DissolveSettings settings)
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xC1C450", Offset = "0xC1C450", VA = "0xC1C450")]
		public void TriggerReverseDissolve()
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xC1C308", Offset = "0xC1C308", VA = "0xC1C308")]
		public void TriggerDissolve(bool atomic, bool disableAfterDissolve, AnimationCurve dissolveCurve, float dissolveStartPercent, float time, float speed)
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xC1C480", Offset = "0xC1C480", VA = "0xC1C480")]
		private void InvokeDissolveStartEvents()
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xC1C55C", Offset = "0xC1C55C", VA = "0xC1C55C")]
		private void InvokeDissolveEndEvents()
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xC1C570", Offset = "0xC1C570", VA = "0xC1C570")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xC1C64C", Offset = "0xC1C64C", VA = "0xC1C64C")]
		public Dissolve()
		{
		}
	}
	[Token(Token = "0x200051F")]
	public class DissolveGlowUpdate : MonoBehaviour
	{
		[Token(Token = "0x2000520")]
		private enum StartMode
		{
			[Token(Token = "0x4002037")]
			OnAwake,
			[Token(Token = "0x4002038")]
			OnStart,
			[Token(Token = "0x4002039")]
			ByScript
		}

		[Token(Token = "0x2000521")]
		private enum UpdateRate
		{
			[Token(Token = "0x400203B")]
			EveryFrame,
			[Token(Token = "0x400203C")]
			EveryNthFrame,
			[Token(Token = "0x400203D")]
			CustomFixedTimestep
		}

		[Token(Token = "0x2000522")]
		private enum GlowSource
		{
			[Token(Token = "0x400203F")]
			Emissive,
			[Token(Token = "0x4002040")]
			Light
		}

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private StartMode m_StartMode;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private UpdateRate m_UpdateRate;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GlowSource m_GlowSource;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_GlowCutoff;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int m_FrameDelay;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_UpdateTimestep;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Light m_GlowLightSource;

		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer m_Renderer;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_Material;

		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int m_UpdateFrames;

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool m_GlowUpdating;

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xC1C678", Offset = "0xC1C678", VA = "0xC1C678")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xC1C930", Offset = "0xC1C930", VA = "0xC1C930")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xC1C75C", Offset = "0xC1C75C", VA = "0xC1C75C")]
		public void StartGlowUpdate()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xC1CAB4", Offset = "0xC1CAB4", VA = "0xC1CAB4")]
		public void StopGlowUpdate()
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xC1CAC0", Offset = "0xC1CAC0", VA = "0xC1CAC0")]
		private void GlowUpdate()
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xC1C9CC", Offset = "0xC1C9CC", VA = "0xC1C9CC")]
		private IEnumerator FixedGlowUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xC1CA40", Offset = "0xC1CA40", VA = "0xC1CA40")]
		private IEnumerator FrameGlowUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xC1CB08", Offset = "0xC1CB08", VA = "0xC1CB08")]
		private Color GetEmissiveColor(Material mat)
		{
			return default(Color);
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xC1CEE8", Offset = "0xC1CEE8", VA = "0xC1CEE8")]
		public void CreateLightSource()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xC1D150", Offset = "0xC1D150", VA = "0xC1D150")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xC1D1E0", Offset = "0xC1D1E0", VA = "0xC1D1E0")]
		public DissolveGlowUpdate()
		{
		}
	}
	[Token(Token = "0x2000525")]
	public static class DissolveHelper
	{
		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int dissolveMapID;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int tilingXID;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int tilingYID;

		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int directionMapID;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int dissolveMaskID;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int dissolveAmountID;

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int dissolveDelayID;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int dissolveRampUpID;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int subTexID;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int outerEdgeColorID;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int innerEdgeColorID;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static int edgeThicknessID;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static int edgeColorRampUseID;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static int edgeColorRampID;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static int dissolveGlowID;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int dissolveGlowColorID;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static int dissolveGlowIntensityID;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int dissolveGlowFollowID;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int emissionColorID;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string subTexKeyword;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string edgeColorRampUseKeyword;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string dissolveGlowKeyword;

		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string dissolveGlowFollowKeyword;

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xC1D44C", Offset = "0xC1D44C", VA = "0xC1D44C")]
		public static void SetDissolveAmount(Material mat, float value)
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xC1CDC8", Offset = "0xC1CDC8", VA = "0xC1CDC8")]
		public static float GetDissolveAmount(Material mat)
		{
			return default(float);
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xC1CE28", Offset = "0xC1CE28", VA = "0xC1CE28")]
		public static Color GetDissolveGlowColor(Material mat)
		{
			return default(Color);
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xC1CE88", Offset = "0xC1CE88", VA = "0xC1CE88")]
		public static float GetDissolveGlowIntensity(Material mat)
		{
			return default(float);
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xC1D4BC", Offset = "0xC1D4BC", VA = "0xC1D4BC")]
		private static void SetFloat(int propertyID, Material mat, float value)
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0xC1D520", Offset = "0xC1D520", VA = "0xC1D520")]
		private static float GetFloat(int propertyID, Material mat)
		{
			return default(float);
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xC1D574", Offset = "0xC1D574", VA = "0xC1D574")]
		private static Color GetColor(int propertyID, Material mat)
		{
			return default(Color);
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xC1C494", Offset = "0xC1C494", VA = "0xC1C494")]
		public static IEnumerator CurveDissolve(Material[] mats, AnimationCurve dissolveCurve, float time, float curveStartPercentage, float speed, Action callback)
		{
			return null;
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xC1D5F8", Offset = "0xC1D5F8", VA = "0xC1D5F8")]
		public static bool IsInLayerMask(this GameObject obj, LayerMask mask)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000527")]
	public class DissolveOnClick : Dissolve
	{
		[Token(Token = "0x6001D32")]
		[Address(RVA = "0xC1DCC4", Offset = "0xC1DCC4", VA = "0xC1DCC4")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xC1DCCC", Offset = "0xC1DCCC", VA = "0xC1DCCC")]
		public DissolveOnClick()
		{
		}
	}
	[Token(Token = "0x2000528")]
	public class DissolveOnCollision : Dissolve
	{
		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask collisionLayer;

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xC1DCDC", Offset = "0xC1DCDC", VA = "0xC1DCDC")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xC1DD74", Offset = "0xC1DD74", VA = "0xC1DD74")]
		public DissolveOnCollision()
		{
		}
	}
	[Token(Token = "0x2000529")]
	public class DissolveOnCollision2D : Dissolve
	{
		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask collisionLayer;

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xC1DDA4", Offset = "0xC1DDA4", VA = "0xC1DDA4")]
		private void OnCollisionEnter2D(Collision2D col)
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xC1DE3C", Offset = "0xC1DE3C", VA = "0xC1DE3C")]
		public DissolveOnCollision2D()
		{
		}
	}
	[Token(Token = "0x200052A")]
	public class DissolveOnKeyPress : Dissolve
	{
		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KeyCode key;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool isToggle;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool toggle;

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xC1DE6C", Offset = "0xC1DE6C", VA = "0xC1DE6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xC1DED0", Offset = "0xC1DED0", VA = "0xC1DED0")]
		public DissolveOnKeyPress()
		{
		}
	}
	[Token(Token = "0x200052B")]
	public class DissolveOnSpawn : Dissolve
	{
		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xC1DEE0", Offset = "0xC1DEE0", VA = "0xC1DEE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xC1DEE8", Offset = "0xC1DEE8", VA = "0xC1DEE8")]
		public DissolveOnSpawn()
		{
		}
	}
	[Token(Token = "0x200052C")]
	public class DissolveOnTrigger : Dissolve
	{
		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask collisionLayer;

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xC1DEF8", Offset = "0xC1DEF8", VA = "0xC1DEF8")]
		private void OnTriggerEnter(Collider col)
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xC1DF90", Offset = "0xC1DF90", VA = "0xC1DF90")]
		public DissolveOnTrigger()
		{
		}
	}
	[Token(Token = "0x200052D")]
	public class DissolveOnTrigger2D : Dissolve
	{
		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask collisionLayer;

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xC1DFC0", Offset = "0xC1DFC0", VA = "0xC1DFC0")]
		private void OnTriggerEnter2D(Collider2D col)
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0xC1E058", Offset = "0xC1E058", VA = "0xC1E058")]
		public DissolveOnTrigger2D()
		{
		}
	}
	[Token(Token = "0x200052E")]
	public class DissolveSettings : ScriptableObject
	{
		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Atomic;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool DisableAfterDissolve;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve DissolveCurve;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float DissolveStartPercent;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Time;

		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Speed;

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xC1E088", Offset = "0xC1E088", VA = "0xC1E088")]
		public DissolveSettings()
		{
		}
	}
	[Token(Token = "0x200052F")]
	public class DissolveUI : Dissolve
	{
		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xC1E0DC", Offset = "0xC1E0DC", VA = "0xC1E0DC", Slot = "4")]
		protected override Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xC1E294", Offset = "0xC1E294", VA = "0xC1E294")]
		public DissolveUI()
		{
		}
	}
	[Token(Token = "0x2000530")]
	public class DissolveSlider : MonoBehaviour
	{
		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider m_Slider;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Renderer[] m_Renderers;

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xC1E2A4", Offset = "0xC1E2A4", VA = "0xC1E2A4")]
		public void UpdateDissolve()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xC1E37C", Offset = "0xC1E37C", VA = "0xC1E37C")]
		public DissolveSlider()
		{
		}
	}
	[Token(Token = "0x2000531")]
	public class LookAtObject : MonoBehaviour
	{
		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_Transform;

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0xC1E384", Offset = "0xC1E384", VA = "0xC1E384")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xC1E3DC", Offset = "0xC1E3DC", VA = "0xC1E3DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0xC1E400", Offset = "0xC1E400", VA = "0xC1E400")]
		public LookAtObject()
		{
		}
	}
	[Token(Token = "0x2000532")]
	public class RespawnManager : MonoBehaviour
	{
		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] zombies;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] zombiePrefabs;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] spawnPositions;

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xC1E408", Offset = "0xC1E408", VA = "0xC1E408")]
		public void Respawn()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xC1E644", Offset = "0xC1E644", VA = "0xC1E644")]
		public RespawnManager()
		{
		}
	}
	[Token(Token = "0x2000533")]
	public class UpdateLight : MonoBehaviour
	{
		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Renderer m_Renderer;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Light m_Light;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_OriginalValue;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material m_Material;

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xC1E64C", Offset = "0xC1E64C", VA = "0xC1E64C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xC1E690", Offset = "0xC1E690", VA = "0xC1E690")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xC1E72C", Offset = "0xC1E72C", VA = "0xC1E72C")]
		private void OnDestory()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xC1E7BC", Offset = "0xC1E7BC", VA = "0xC1E7BC")]
		public UpdateLight()
		{
		}
	}
	[Token(Token = "0x2000534")]
	public class Zombie : MonoBehaviour
	{
		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animator m_Animator;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource m_Audio;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ParticleSystem m_DeathParticles;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Dissolve m_Dissolve;

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xC1E7C4", Offset = "0xC1E7C4", VA = "0xC1E7C4")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xC1E890", Offset = "0xC1E890", VA = "0xC1E890")]
		private void InvokeDissolve()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xC1E8AC", Offset = "0xC1E8AC", VA = "0xC1E8AC")]
		public void DestroySelf()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xC1E918", Offset = "0xC1E918", VA = "0xC1E918")]
		public Zombie()
		{
		}
	}
}
namespace UnityTemplateProjects
{
	[Token(Token = "0x2000535")]
	public class CameraFly : MonoBehaviour
	{
		[Token(Token = "0x2000536")]
		private class CameraState
		{
			[Token(Token = "0x400208B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yaw;

			[Token(Token = "0x400208C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pitch;

			[Token(Token = "0x400208D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float roll;

			[Token(Token = "0x400208E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float x;

			[Token(Token = "0x400208F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float y;

			[Token(Token = "0x4002090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float z;

			[Token(Token = "0x6001D56")]
			[Address(RVA = "0xC1E974", Offset = "0xC1E974", VA = "0xC1E974")]
			public void SetFromTransform(Transform t)
			{
			}

			[Token(Token = "0x6001D57")]
			[Address(RVA = "0xC1EECC", Offset = "0xC1EECC", VA = "0xC1EECC")]
			public void Translate(Vector3 translation)
			{
			}

			[Token(Token = "0x6001D58")]
			[Address(RVA = "0xC1EF4C", Offset = "0xC1EF4C", VA = "0xC1EF4C")]
			public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)
			{
			}

			[Token(Token = "0x6001D59")]
			[Address(RVA = "0xC1EFD4", Offset = "0xC1EFD4", VA = "0xC1EFD4")]
			public void UpdateTransform(Transform t)
			{
			}

			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0xC1F1F8", Offset = "0xC1F1F8", VA = "0xC1F1F8")]
			public CameraState()
			{
			}
		}

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CameraState m_TargetCameraState;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraState m_InterpolatingCameraState;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float boost;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float positionLerpTime;

		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve mouseSensitivityCurve;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationLerpTime;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool invertY;

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xC1E920", Offset = "0xC1E920", VA = "0xC1E920")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xC1E9F8", Offset = "0xC1E9F8", VA = "0xC1E9F8")]
		private Vector3 GetInputTranslationDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xC1EC28", Offset = "0xC1EC28", VA = "0xC1EC28")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xC1F01C", Offset = "0xC1F01C", VA = "0xC1F01C")]
		public CameraFly()
		{
		}
	}
}
namespace ANT_Managed_Library
{
	[Token(Token = "0x2000537")]
	public class ANT_Channel : IDisposable
	{
		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ANT_Device creatingDevice;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr unmanagedANTFramerPointer;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte channelNumber;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool disposed;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[CompilerGenerated]
		private dRawChannelResponseHandler rawChannelResponse;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[CompilerGenerated]
		private dDeviceNotificationHandler DeviceNotification;

		[Token(Token = "0x14000025")]
		public event dChannelResponseHandler channelResponse
		{
			[Token(Token = "0x6001D5B")]
			[Address(RVA = "0xC1F200", Offset = "0xC1F200", VA = "0xC1F200", Slot = "5")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0xC1F29C", Offset = "0xC1F29C", VA = "0xC1F29C", Slot = "6")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xC1F338", Offset = "0xC1F338", VA = "0xC1F338")]
		private static extern int ANT_AssignChannel(IntPtr FramerPtr, byte ucANTChannel, byte ucChanType, byte ucNetNumber, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xC1F3E4", Offset = "0xC1F3E4", VA = "0xC1F3E4")]
		private static extern int ANT_AssignChannelExt(IntPtr FramerPtr, byte ucANTChannel, byte ucChanType, byte ucNetNumber, byte ucExtFlags, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xC1F498", Offset = "0xC1F498", VA = "0xC1F498")]
		private static extern int ANT_UnAssignChannel(IntPtr FramerPtr, byte ucANTChannel, uint ulResponseTime);

		[PreserveSig]
		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xC1F52C", Offset = "0xC1F52C", VA = "0xC1F52C")]
		private static extern int ANT_SetChannelId(IntPtr FramerPtr, byte ucANTChannel, ushort usDeviceNumber, byte ucDeviceType, byte ucTransmissionType_, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xC1F5E0", Offset = "0xC1F5E0", VA = "0xC1F5E0")]
		private static extern int ANT_SetChannelPeriod(IntPtr FramerPtr, byte ucANTChannel_, ushort usMesgPeriod_, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xC1F67C", Offset = "0xC1F67C", VA = "0xC1F67C")]
		private static extern int ANT_SetChannelRFFreq(IntPtr FramerPtr, byte ucANTChannel_, byte ucRFFreq_, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xC1F718", Offset = "0xC1F718", VA = "0xC1F718")]
		private static extern int ANT_SetChannelSearchTimeout(IntPtr FramerPtr, byte ucANTChannel_, byte ucSearchTimeout_, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xC1F7B4", Offset = "0xC1F7B4", VA = "0xC1F7B4")]
		private static extern int ANT_OpenChannel(IntPtr FramerPtr, byte ucANTChannel, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xC1F848", Offset = "0xC1F848", VA = "0xC1F848")]
		private static extern int ANT_CloseChannel(IntPtr FramerPtr, byte ucANTChannel, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xC1F8DC", Offset = "0xC1F8DC", VA = "0xC1F8DC")]
		private static extern int ANT_SendBroadcastData(IntPtr FramerPtr, byte ucANTChannel, byte[] pucData);

		[PreserveSig]
		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xC1F978", Offset = "0xC1F978", VA = "0xC1F978")]
		private static extern byte ANT_SendAcknowledgedData(IntPtr FramerPtr, byte ucANTChannel, byte[] pucData, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xC1FA1C", Offset = "0xC1FA1C", VA = "0xC1FA1C")]
		private static extern int ANT_SetLowPriorityChannelSearchTimeout(IntPtr FramerPtr, byte ucANTChannel_, byte ucSearchTimeout_, uint ulResponseTime_);

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0xC1FAB8", Offset = "0xC1FAB8", VA = "0xC1FAB8")]
		internal ANT_Channel(ANT_Device creatingDevice, byte ucChannelNumber)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xC1FBB0", Offset = "0xC1FBB0", VA = "0xC1FBB0")]
		internal void NotifyDeviceEvent(ANT_Device.DeviceNotificationCode notification, object notificationInfo)
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0xC1FBCC", Offset = "0xC1FBCC", VA = "0xC1FBCC")]
		internal void MessageReceived(ANT_Device.ANTMessage newMessage, ushort messageSize)
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0xC1FDA4", Offset = "0xC1FDA4", VA = "0xC1FDA4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0xC1FE4C", Offset = "0xC1FE4C", VA = "0xC1FE4C", Slot = "7")]
		public bool assignChannel(ANT_ReferenceLibrary.ChannelType channelTypeByte, byte networkNumber, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0xC1FFE8", Offset = "0xC1FFE8", VA = "0xC1FFE8", Slot = "8")]
		public bool assignChannelExt(ANT_ReferenceLibrary.ChannelType channelTypeByte, byte networkNumber, ANT_ReferenceLibrary.ChannelTypeExtended extAssignByte, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0xC200EC", Offset = "0xC200EC", VA = "0xC200EC", Slot = "9")]
		public bool unassignChannel(uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0xC20168", Offset = "0xC20168", VA = "0xC20168", Slot = "10")]
		public bool setChannelID(ushort deviceNumber, bool pairingEnabled, byte deviceTypeID, byte transmissionTypeID, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0xC20230", Offset = "0xC20230", VA = "0xC20230", Slot = "11")]
		public bool setChannelPeriod(ushort messagePeriod_32768unitspersecond, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0xC202B0", Offset = "0xC202B0", VA = "0xC202B0", Slot = "12")]
		public bool setChannelFreq(byte RFFreqOffset, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0xC20330", Offset = "0xC20330", VA = "0xC20330", Slot = "13")]
		public bool setChannelSearchTimeout(byte searchTimeout, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0xC203B0", Offset = "0xC203B0", VA = "0xC203B0")]
		public void setChannelSearchTimeout(byte searchTimeout)
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0xC203B8", Offset = "0xC203B8", VA = "0xC203B8", Slot = "14")]
		public bool openChannel(uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0xC20434", Offset = "0xC20434", VA = "0xC20434")]
		public void openChannel()
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xC2043C", Offset = "0xC2043C", VA = "0xC2043C", Slot = "15")]
		public bool sendBroadcastData(byte[] data)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xC2058C", Offset = "0xC2058C", VA = "0xC2058C", Slot = "16")]
		public ANT_ReferenceLibrary.MessagingReturnCode sendAcknowledgedData(byte[] data, uint ackWaitTime)
		{
			return default(ANT_ReferenceLibrary.MessagingReturnCode);
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xC206E0", Offset = "0xC206E0", VA = "0xC206E0")]
		public void sendAcknowledgedData(byte[] data)
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xC206E8", Offset = "0xC206E8", VA = "0xC206E8", Slot = "17")]
		public bool closeChannel(uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xC20764", Offset = "0xC20764", VA = "0xC20764")]
		public void closeChannel()
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xC2076C", Offset = "0xC2076C", VA = "0xC2076C", Slot = "18")]
		public bool setLowPrioritySearchTimeout(byte lowPriorityTimeout, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0xC207EC", Offset = "0xC207EC", VA = "0xC207EC")]
		public void setLowPrioritySearchTimeout(byte lowPriorityTimeout)
		{
		}
	}
	[Token(Token = "0x2000538")]
	public static class ANT_Common
	{
		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool autoResetIsEnabled;

		[PreserveSig]
		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0xC207F4", Offset = "0xC207F4", VA = "0xC207F4")]
		private static extern uint ANT_GetNumDevices();

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0xC2085C", Offset = "0xC2085C", VA = "0xC2085C")]
		public static uint getNumDetectedUSBDevices()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000539")]
	public class ANT_Device : IDisposable
	{
		[Token(Token = "0x200053A")]
		private struct ANTMessageItem
		{
			[Token(Token = "0x40020A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public byte dataSize;

			[Token(Token = "0x40020A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ANTMessage antMsgData;
		}

		[Token(Token = "0x200053B")]
		public struct ANTMessage
		{
			[Token(Token = "0x40020AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public byte msgID;

			[Token(Token = "0x40020AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public byte[] ucharBuf;
		}

		[Token(Token = "0x200053C")]
		public enum DeviceNotificationCode : byte
		{
			[Token(Token = "0x40020AD")]
			Reset = 1,
			[Token(Token = "0x40020AE")]
			Shutdown
		}

		[Token(Token = "0x200053D")]
		public delegate void dDeviceResponseHandler(ANT_Response response);

		[Token(Token = "0x200053E")]
		public delegate void dSerialErrorHandler(ANT_Device sender, serialErrorCode error, bool isCritical);

		[Token(Token = "0x200053F")]
		public enum serialErrorCode
		{
			[Token(Token = "0x40020B0")]
			SerialWriteError,
			[Token(Token = "0x40020B1")]
			SerialReadError,
			[Token(Token = "0x40020B2")]
			DeviceConnectionLost,
			[Token(Token = "0x40020B3")]
			MessageLost_CrcError,
			[Token(Token = "0x40020B4")]
			MessageLost_QueueOverflow,
			[Token(Token = "0x40020B5")]
			MessageLost_TooLarge,
			[Token(Token = "0x40020B6")]
			MessageLost_InvalidChannel,
			[Token(Token = "0x40020B7")]
			Unknown
		}

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ANT_ReferenceLibrary.FramerType frameType;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private ANT_ReferenceLibrary.PortType portType;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr unmanagedANTSerialPtr;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IntPtr unmanagedANTFramerPtr;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IntPtr unmanagedCancelBool;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool initializedUSB;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private byte USBDeviceNum;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint USBBaudRate;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ANT_DeviceCapabilities capabilities;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool pollingOn;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int numDeviceChannels;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ANT_Channel[] antChannels;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Thread responsePoller;

		[Token(Token = "0x1700045F")]
		private bool? cancelTxFlag
		{
			[Token(Token = "0x6001D81")]
			[Address(RVA = "0xC208F4", Offset = "0xC208F4", VA = "0xC208F4")]
			set
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event dDeviceResponseHandler deviceResponse
		{
			[Token(Token = "0x6001D82")]
			[Address(RVA = "0xC209F8", Offset = "0xC209F8", VA = "0xC209F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D83")]
			[Address(RVA = "0xC20A94", Offset = "0xC20A94", VA = "0xC20A94")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event dSerialErrorHandler serialError
		{
			[Token(Token = "0x6001D84")]
			[Address(RVA = "0xC20B30", Offset = "0xC20B30", VA = "0xC20B30")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D85")]
			[Address(RVA = "0xC20BCC", Offset = "0xC20BCC", VA = "0xC20BCC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001D86")]
		[Address(RVA = "0xC20C68", Offset = "0xC20C68", VA = "0xC20C68")]
		private static extern int ANT_Init(byte ucUSBDeviceNum, uint usBaudrate, ref IntPtr returnSerialPtr, ref IntPtr returnFramerPtr, byte ucPortType, byte ucHCIFrameTpye);

		[PreserveSig]
		[Token(Token = "0x6001D87")]
		[Address(RVA = "0xC20D1C", Offset = "0xC20D1C", VA = "0xC20D1C")]
		private static extern void ANT_Close(IntPtr SerialPtr, IntPtr FramerPtr);

		[PreserveSig]
		[Token(Token = "0x6001D88")]
		[Address(RVA = "0xC20DA0", Offset = "0xC20DA0", VA = "0xC20DA0")]
		private static extern int ANT_ResetSystem(IntPtr FramerPtr, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xC20E24", Offset = "0xC20E24", VA = "0xC20E24")]
		private static extern void ANT_SetCancelParameter(IntPtr FramerPtr, IntPtr pbCancel);

		[PreserveSig]
		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0xC20EA8", Offset = "0xC20EA8", VA = "0xC20EA8")]
		private static extern int ANT_SetNetworkKey(IntPtr FramerPtr, byte ucNetNumber, byte[] pucKey, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0xC20F4C", Offset = "0xC20F4C", VA = "0xC20F4C")]
		private static extern int ANT_RequestMessage(IntPtr FramerPtr, byte ucANTChannel, byte ucMessageID, ref ANTMessageItem ANT_MESSAGE_ITEM_response, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0xC210A8", Offset = "0xC210A8", VA = "0xC210A8")]
		private static extern ushort ANT_WaitForMessage(IntPtr FramerPtr, uint ulMilliseconds_);

		[PreserveSig]
		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0xC2112C", Offset = "0xC2112C", VA = "0xC2112C")]
		private static extern ushort ANT_GetMessage(IntPtr FramerPtr, ref ANTMessage ANT_MESSAGE_response);

		[PreserveSig]
		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0xC21218", Offset = "0xC21218", VA = "0xC21218")]
		private static extern int ANT_OpenRxScanMode(IntPtr FramerPtr, uint ulResponseTime_);

		[PreserveSig]
		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0xC2129C", Offset = "0xC2129C", VA = "0xC2129C")]
		private static extern int ANT_RxExtMesgsEnable(IntPtr FramerPtr, byte ucEnable_, uint ulResponseTimeout_);

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xC21330", Offset = "0xC21330", VA = "0xC21330")]
		public ANT_Device(byte USBDeviceNum, uint baudRate)
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0xC21344", Offset = "0xC21344", VA = "0xC21344")]
		public ANT_Device(ANT_ReferenceLibrary.PortType portType, byte USBDeviceNum, uint baudRate, ANT_ReferenceLibrary.FramerType frameType)
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0xC21468", Offset = "0xC21468", VA = "0xC21468")]
		private void startUp(byte USBDeviceNum, uint baudRate, ANT_ReferenceLibrary.FramerType frameType, ANT_ReferenceLibrary.PortType portType, bool calledByAutoInit)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0xC22160", Offset = "0xC22160", VA = "0xC22160", Slot = "1")]
		~ANT_Device()
		{
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0xC21B08", Offset = "0xC21B08", VA = "0xC21B08", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0xC21DAC", Offset = "0xC21DAC", VA = "0xC21DAC")]
		private void shutdown()
		{
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0xC1FE18", Offset = "0xC1FE18", VA = "0xC1FE18")]
		internal void channelDisposed(byte channelNumber)
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0xC22280", Offset = "0xC22280", VA = "0xC22280", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0xC1FB4C", Offset = "0xC1FB4C", VA = "0xC1FB4C")]
		internal IntPtr getFramerPtr()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0xC222EC", Offset = "0xC222EC", VA = "0xC222EC")]
		public int getOpenedUSBDeviceNum()
		{
			return default(int);
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0xC222F4", Offset = "0xC222F4", VA = "0xC222F4")]
		public ANT_Channel getChannel(int num)
		{
			return null;
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0xC221F4", Offset = "0xC221F4", VA = "0xC221F4")]
		private void NotifyDeviceEvent(DeviceNotificationCode notification, object notificationInfo)
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0xC22480", Offset = "0xC22480", VA = "0xC22480")]
		private void responsePollFunc()
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0xC21B68", Offset = "0xC21B68", VA = "0xC21B68")]
		public ANT_DeviceCapabilities getDeviceCapabilities(bool forceNewCopy, uint responseWaitTime)
		{
			return null;
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0xC1FF48", Offset = "0xC1FF48", VA = "0xC1FF48")]
		public ANT_DeviceCapabilities getDeviceCapabilities()
		{
			return null;
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xC229D4", Offset = "0xC229D4", VA = "0xC229D4")]
		public bool ResetSystem(uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xC22A64", Offset = "0xC22A64", VA = "0xC22A64")]
		public void ResetSystem()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xC22A6C", Offset = "0xC22A6C", VA = "0xC22A6C")]
		public bool setNetworkKey(byte netNumber, byte[] networkKey, uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xC22B5C", Offset = "0xC22B5C", VA = "0xC22B5C")]
		public ANT_Response requestMessageAndResponse(byte channelNum, ANT_ReferenceLibrary.RequestMessageID messageID, uint responseWaitTime)
		{
			return null;
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xC22800", Offset = "0xC22800", VA = "0xC22800")]
		public ANT_Response requestMessageAndResponse(ANT_ReferenceLibrary.RequestMessageID messageID, uint responseWaitTime)
		{
			return null;
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xC22D24", Offset = "0xC22D24", VA = "0xC22D24")]
		public bool openRxScanMode(uint responseWaitTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xC22D94", Offset = "0xC22D94", VA = "0xC22D94")]
		public void openRxScanMode()
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xC22D9C", Offset = "0xC22D9C", VA = "0xC22D9C")]
		public bool enableRxExtendedMessages(bool IsEnabled, uint responseWaitTime)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000540")]
	public class ANT_DeviceCapabilities
	{
		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte maxANTChannels;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly byte maxNetworks;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public readonly bool NoReceiveChannels;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public readonly bool NoTransmitChannels;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly bool NoReceiveMessages;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public readonly bool NoTransmitMessages;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public readonly bool NoAckMessages;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public readonly bool NoBurstMessages;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool PrivateNetworks;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public readonly bool SerialNumber;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public readonly bool perChannelTransmitPower;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public readonly bool lowPrioritySearch;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool ScriptSupport;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public readonly bool SearchList;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public readonly bool OnboardLED;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public readonly bool ExtendedMessaging;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool ScanModeSupport;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public readonly bool ExtendedChannelAssignment;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public readonly bool ProximitySearch;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public readonly bool FS;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly bool FIT;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public readonly bool AdvancedBurst;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public readonly bool EventBuffering;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public readonly bool EventFiltering;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool HighDutySearch;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public readonly bool SelectiveDataUpdate;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public readonly bool SingleChannelEncryption;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public readonly byte maxDataChannels;

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0xC22810", Offset = "0xC22810", VA = "0xC22810")]
		internal ANT_DeviceCapabilities(byte[] capabilitiesData)
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0xC23120", Offset = "0xC23120", VA = "0xC23120")]
		public string printCapabilities()
		{
			return null;
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0xC236F4", Offset = "0xC236F4", VA = "0xC236F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000541")]
	public class ANT_Exception : Exception
	{
		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0xC1FF54", Offset = "0xC1FF54", VA = "0xC1FF54")]
		public ANT_Exception(string exceptionDetail)
		{
		}
	}
	[Token(Token = "0x2000542")]
	public sealed class ANT_ReferenceLibrary
	{
		[Token(Token = "0x2000543")]
		public enum PortType : byte
		{
			[Token(Token = "0x40020D5")]
			USB,
			[Token(Token = "0x40020D6")]
			COM
		}

		[Token(Token = "0x2000544")]
		public enum FramerType : byte
		{
			[Token(Token = "0x40020D8")]
			basicANT
		}

		[Token(Token = "0x2000545")]
		[Flags]
		public enum ChannelType : byte
		{
			[Token(Token = "0x40020DA")]
			BASE_Slave_Receive_0x00 = 0,
			[Token(Token = "0x40020DB")]
			BASE_Master_Transmit_0x10 = 0x10,
			[Token(Token = "0x40020DC")]
			ADV_Shared_0x20 = 0x20,
			[Token(Token = "0x40020DD")]
			ADV_TxRx_Only_or_RxAlwaysWildCard_0x40 = 0x40
		}

		[Token(Token = "0x2000546")]
		[Flags]
		public enum ChannelTypeExtended : byte
		{
			[Token(Token = "0x40020DF")]
			ADV_AlwaysSearch_0x01 = 1,
			[Token(Token = "0x40020E0")]
			ADV_FrequencyAgility_0x04 = 4,
			[Token(Token = "0x40020E1")]
			ADV_FastStart_0x10 = 0x10,
			[Token(Token = "0x40020E2")]
			ADV_AsyncTx_0x20 = 0x20
		}

		[Token(Token = "0x2000547")]
		public enum MessagingReturnCode
		{
			[Token(Token = "0x40020E4")]
			Fail,
			[Token(Token = "0x40020E5")]
			Pass,
			[Token(Token = "0x40020E6")]
			Timeout,
			[Token(Token = "0x40020E7")]
			Cancelled,
			[Token(Token = "0x40020E8")]
			InvalidParams
		}

		[Token(Token = "0x2000548")]
		public enum RequestMessageID : byte
		{
			[Token(Token = "0x40020EA")]
			VERSION_0x3E = 62,
			[Token(Token = "0x40020EB")]
			CHANNEL_ID_0x51 = 81,
			[Token(Token = "0x40020EC")]
			CHANNEL_STATUS_0x52 = 82,
			[Token(Token = "0x40020ED")]
			CAPABILITIES_0x54 = 84,
			[Token(Token = "0x40020EE")]
			SERIAL_NUMBER_0x61 = 97,
			[Token(Token = "0x40020EF")]
			USER_NVM_0x7C = 124
		}

		[Token(Token = "0x2000549")]
		public enum ANTMessageID : byte
		{
			[Token(Token = "0x40020F1")]
			INVALID_0x00 = 0,
			[Token(Token = "0x40020F2")]
			EVENT_0x01 = 1,
			[Token(Token = "0x40020F3")]
			VERSION_0x3E = 62,
			[Token(Token = "0x40020F4")]
			RESPONSE_EVENT_0x40 = 64,
			[Token(Token = "0x40020F5")]
			UNASSIGN_CHANNEL_0x41 = 65,
			[Token(Token = "0x40020F6")]
			ASSIGN_CHANNEL_0x42 = 66,
			[Token(Token = "0x40020F7")]
			CHANNEL_MESG_PERIOD_0x43 = 67,
			[Token(Token = "0x40020F8")]
			CHANNEL_SEARCH_TIMEOUT_0x44 = 68,
			[Token(Token = "0x40020F9")]
			CHANNEL_RADIO_FREQ_0x45 = 69,
			[Token(Token = "0x40020FA")]
			NETWORK_KEY_0x46 = 70,
			[Token(Token = "0x40020FB")]
			RADIO_TX_POWER_0x47 = 71,
			[Token(Token = "0x40020FC")]
			RADIO_CW_MODE_0x48 = 72,
			[Token(Token = "0x40020FD")]
			SYSTEM_RESET_0x4A = 74,
			[Token(Token = "0x40020FE")]
			OPEN_CHANNEL_0x4B = 75,
			[Token(Token = "0x40020FF")]
			CLOSE_CHANNEL_0x4C = 76,
			[Token(Token = "0x4002100")]
			REQUEST_0x4D = 77,
			[Token(Token = "0x4002101")]
			BROADCAST_DATA_0x4E = 78,
			[Token(Token = "0x4002102")]
			ACKNOWLEDGED_DATA_0x4F = 79,
			[Token(Token = "0x4002103")]
			BURST_DATA_0x50 = 80,
			[Token(Token = "0x4002104")]
			CHANNEL_ID_0x51 = 81,
			[Token(Token = "0x4002105")]
			CHANNEL_STATUS_0x52 = 82,
			[Token(Token = "0x4002106")]
			RADIO_CW_INIT_0x53 = 83,
			[Token(Token = "0x4002107")]
			CAPABILITIES_0x54 = 84,
			[Token(Token = "0x4002108")]
			STACKLIMIT_0x55 = 85,
			[Token(Token = "0x4002109")]
			SCRIPT_DATA_0x56 = 86,
			[Token(Token = "0x400210A")]
			SCRIPT_CMD_0x57 = 87,
			[Token(Token = "0x400210B")]
			ID_LIST_ADD_0x59 = 89,
			[Token(Token = "0x400210C")]
			ID_LIST_CONFIG_0x5A = 90,
			[Token(Token = "0x400210D")]
			OPEN_RX_SCAN_0x5B = 91,
			[Token(Token = "0x400210E")]
			EXT_BROADCAST_DATA_0x5D = 93,
			[Token(Token = "0x400210F")]
			EXT_ACKNOWLEDGED_DATA_0x5E = 94,
			[Token(Token = "0x4002110")]
			EXT_BURST_DATA_0x5F = 95,
			[Token(Token = "0x4002111")]
			CHANNEL_RADIO_TX_POWER_0x60 = 96,
			[Token(Token = "0x4002112")]
			GET_SERIAL_NUM_0x61 = 97,
			[Token(Token = "0x4002113")]
			GET_TEMP_CAL_0x62 = 98,
			[Token(Token = "0x4002114")]
			SET_LP_SEARCH_TIMEOUT_0x63 = 99,
			[Token(Token = "0x4002115")]
			SERIAL_NUM_SET_CHANNEL_ID_0x65 = 101,
			[Token(Token = "0x4002116")]
			RX_EXT_MESGS_ENABLE_0x66 = 102,
			[Token(Token = "0x4002117")]
			ENABLE_LED_FLASH_0x68 = 104,
			[Token(Token = "0x4002118")]
			XTAL_ENABLE_0x6D = 109,
			[Token(Token = "0x4002119")]
			STARTUP_MESG_0x6F = 111,
			[Token(Token = "0x400211A")]
			AUTO_FREQ_CONFIG_0x70 = 112,
			[Token(Token = "0x400211B")]
			PROX_SEARCH_CONFIG_0x71 = 113,
			[Token(Token = "0x400211C")]
			ADV_BURST_DATA_0x72 = 114,
			[Token(Token = "0x400211D")]
			EVENT_BUFFER_CONFIG_0x74 = 116,
			[Token(Token = "0x400211E")]
			HIGH_DUTY_SEARCH_CONFIG_0x77 = 119,
			[Token(Token = "0x400211F")]
			ADV_BURST_CONFIG_0x78 = 120,
			[Token(Token = "0x4002120")]
			EVENT_FILTER_CONFIG_0x79 = 121,
			[Token(Token = "0x4002121")]
			FIT1_SET_AGC_0x8F = 143,
			[Token(Token = "0x4002122")]
			FIT1_SET_EQUIP_STATE_0x91 = 145,
			[Token(Token = "0x4002123")]
			SET_CHANNEL_INPUT_MASK_0x90 = 144,
			[Token(Token = "0x4002124")]
			SET_CHANNEL_DATA_TYPE_0x91 = 145,
			[Token(Token = "0x4002125")]
			READ_PINS_FOR_SECT_0x92 = 146,
			[Token(Token = "0x4002126")]
			TIMER_SELECT_0x93 = 147,
			[Token(Token = "0x4002127")]
			ATOD_SETTINGS_0x94 = 148,
			[Token(Token = "0x4002128")]
			SET_SHARED_ADDRESS_0x95 = 149,
			[Token(Token = "0x4002129")]
			RSSI_POWER_0xC0 = 192,
			[Token(Token = "0x400212A")]
			RSSI_BROADCAST_DATA_0xC1 = 193,
			[Token(Token = "0x400212B")]
			RSSI_ACKNOWLEDGED_DATA_0xC2 = 194,
			[Token(Token = "0x400212C")]
			RSSI_BURST_DATA_0xC3 = 195,
			[Token(Token = "0x400212D")]
			RSSI_SEARCH_THRESHOLD_0xC4 = 196,
			[Token(Token = "0x400212E")]
			SLEEP_0xC5 = 197,
			[Token(Token = "0x400212F")]
			SET_USB_INFO_0xC7 = 199
		}

		[Token(Token = "0x200054A")]
		public enum ANTEventID : byte
		{
			[Token(Token = "0x4002131")]
			RESPONSE_NO_ERROR_0x00 = 0,
			[Token(Token = "0x4002132")]
			NO_EVENT_0x00 = 0,
			[Token(Token = "0x4002133")]
			EVENT_RX_SEARCH_TIMEOUT_0x01 = 1,
			[Token(Token = "0x4002134")]
			EVENT_RX_FAIL_0x02 = 2,
			[Token(Token = "0x4002135")]
			EVENT_TX_0x03 = 3,
			[Token(Token = "0x4002136")]
			EVENT_TRANSFER_RX_FAILED_0x04 = 4,
			[Token(Token = "0x4002137")]
			EVENT_TRANSFER_TX_COMPLETED_0x05 = 5,
			[Token(Token = "0x4002138")]
			EVENT_TRANSFER_TX_FAILED_0x06 = 6,
			[Token(Token = "0x4002139")]
			EVENT_CHANNEL_CLOSED_0x07 = 7,
			[Token(Token = "0x400213A")]
			EVENT_RX_FAIL_GO_TO_SEARCH_0x08 = 8,
			[Token(Token = "0x400213B")]
			EVENT_CHANNEL_COLLISION_0x09 = 9,
			[Token(Token = "0x400213C")]
			EVENT_TRANSFER_TX_START_0x0A = 10,
			[Token(Token = "0x400213D")]
			EVENT_CHANNEL_ACTIVE_0x0F = 15,
			[Token(Token = "0x400213E")]
			EVENT_TRANSFER_TX_COMPLETED_RSSI_0x10 = 16,
			[Token(Token = "0x400213F")]
			CHANNEL_IN_WRONG_STATE_0x15 = 21,
			[Token(Token = "0x4002140")]
			CHANNEL_NOT_OPENED_0x16 = 22,
			[Token(Token = "0x4002141")]
			CHANNEL_ID_NOT_SET_0x18 = 24,
			[Token(Token = "0x4002142")]
			CLOSE_ALL_CHANNELS_0x19 = 25,
			[Token(Token = "0x4002143")]
			TRANSFER_IN_PROGRESS_0x1F = 31,
			[Token(Token = "0x4002144")]
			TRANSFER_SEQUENCE_NUMBER_ERROR_0x20 = 32,
			[Token(Token = "0x4002145")]
			TRANSFER_IN_ERROR_0x21 = 33,
			[Token(Token = "0x4002146")]
			TRANSFER_BUSY_0x22 = 34,
			[Token(Token = "0x4002147")]
			MESSAGE_SIZE_EXCEEDS_LIMIT_0x27 = 39,
			[Token(Token = "0x4002148")]
			INVALID_MESSAGE_0x28 = 40,
			[Token(Token = "0x4002149")]
			INVALID_NETWORK_NUMBER_0x29 = 41,
			[Token(Token = "0x400214A")]
			INVALID_LIST_ID_0x30 = 48,
			[Token(Token = "0x400214B")]
			INVALID_SCAN_TX_CHANNEL_0x31 = 49,
			[Token(Token = "0x400214C")]
			INVALID_PARAMETER_PROVIDED_0x33 = 51,
			[Token(Token = "0x400214D")]
			EVENT_QUE_OVERFLOW_0x35 = 53,
			[Token(Token = "0x400214E")]
			SCRIPT_FULL_ERROR_0x40 = 64,
			[Token(Token = "0x400214F")]
			SCRIPT_WRITE_ERROR_0x41 = 65,
			[Token(Token = "0x4002150")]
			SCRIPT_INVALID_PAGE_ERROR_0x42 = 66,
			[Token(Token = "0x4002151")]
			SCRIPT_LOCKED_ERROR_0x43 = 67,
			[Token(Token = "0x4002152")]
			FIT_ACTIVE_SEARCH_TIMEOUT_0x60 = 96,
			[Token(Token = "0x4002153")]
			FIT_WATCH_PAIR_0x61 = 97,
			[Token(Token = "0x4002154")]
			FIT_WATCH_UNPAIR_0x62 = 98
		}
	}
	[Token(Token = "0x200054B")]
	public class ANT_Response
	{
		[Token(Token = "0x200054C")]
		private enum extMsgParts
		{
			[Token(Token = "0x400215B")]
			DataPayload,
			[Token(Token = "0x400215C")]
			DeviceID
		}

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object sender;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte antChannel;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DateTime timeReceived;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte responseID;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] messageContents;

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xC1FD38", Offset = "0xC1FD38", VA = "0xC1FD38")]
		internal ANT_Response(object sender, byte antChannel, DateTime timeReceived, byte IDcode, byte[] messageContents)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xC236F8", Offset = "0xC236F8", VA = "0xC236F8")]
		public ANT_ReferenceLibrary.ANTEventID getChannelEventCode()
		{
			return default(ANT_ReferenceLibrary.ANTEventID);
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xC23778", Offset = "0xC23778", VA = "0xC23778")]
		public byte[] getDataPayload()
		{
			return null;
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xC23A28", Offset = "0xC23A28", VA = "0xC23A28")]
		public bool isExtended()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xC23818", Offset = "0xC23818", VA = "0xC23818")]
		private byte[] splitExtMessage(extMsgParts whichPart)
		{
			return null;
		}
	}
	[Token(Token = "0x200054D")]
	public delegate void dDeviceNotificationHandler(ANT_Device.DeviceNotificationCode notification, object notificationInfo);
	[Token(Token = "0x200054E")]
	public delegate void dRawChannelResponseHandler(ANT_Device.ANTMessage message, ushort messageSize);
	[Token(Token = "0x200054F")]
	public delegate void dChannelResponseHandler(ANT_Response response);
}
namespace powerbeatsvr
{
	[Token(Token = "0x2000550")]
	public class BoundaryPlotter : MonoBehaviour
	{
		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0xC23D6C", Offset = "0xC23D6C", VA = "0xC23D6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0xC23D8C", Offset = "0xC23D8C", VA = "0xC23D8C")]
		private IEnumerator PlotPoints()
		{
			return null;
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0xC23E14", Offset = "0xC23E14", VA = "0xC23E14")]
		public BoundaryPlotter()
		{
		}
	}
	[Token(Token = "0x2000552")]
	public class LaserPointerScriptable : MonoBehaviour, IPointerOriginProvider
	{
		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform beam;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float dotOffsetX;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float dotOffsetY;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject laserPoint;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 laserPointStart;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 hitPositionIn3D;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float xCorrectionForControllerRotation;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float yCorrectionForControllerRotation;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float controlX;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float controlY;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AlternateTrackedDeviceRaycaster[] rayCasters;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isIncognito;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private LaserPointer origPointer;

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0xC24138", Offset = "0xC24138", VA = "0xC24138")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0xC244B8", Offset = "0xC244B8", VA = "0xC244B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xC249A4", Offset = "0xC249A4", VA = "0xC249A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0xC24A8C", Offset = "0xC24A8C", VA = "0xC24A8C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0xC24B54", Offset = "0xC24B54", VA = "0xC24B54")]
		internal void SetRaycasters(AlternateTrackedDeviceRaycaster[] allRaycasters)
		{
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0xC24B5C", Offset = "0xC24B5C", VA = "0xC24B5C", Slot = "4")]
		public Transform GetOriginTransform()
		{
			return null;
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xC24B64", Offset = "0xC24B64", VA = "0xC24B64")]
		public LaserPointerScriptable()
		{
		}
	}
	[Token(Token = "0x2000553")]
	[ExecuteAlways]
	public class LaserTarget : MonoBehaviour
	{
		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LaserPointerScriptable lps;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool isIncognito;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayableDirector director;

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xC24B6C", Offset = "0xC24B6C", VA = "0xC24B6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xC24BE4", Offset = "0xC24BE4", VA = "0xC24BE4")]
		public void DoClick()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xC24F30", Offset = "0xC24F30", VA = "0xC24F30")]
		public void DoMouseDown()
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xC24F38", Offset = "0xC24F38", VA = "0xC24F38")]
		public void DoMouseUp()
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xC24CB8", Offset = "0xC24CB8", VA = "0xC24CB8")]
		private void FakeTriggerChange(bool isDown)
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xC24F40", Offset = "0xC24F40", VA = "0xC24F40")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xC24F94", Offset = "0xC24F94", VA = "0xC24F94")]
		public LaserTarget()
		{
		}
	}
	[Token(Token = "0x2000554")]
	public class PlaylistAutomator : MonoBehaviour
	{
		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Menu menu;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlaylistAdjuster playlistAdjuster;

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xC24FA4", Offset = "0xC24FA4", VA = "0xC24FA4")]
		public void PreparePlaylist()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xC2508C", Offset = "0xC2508C", VA = "0xC2508C")]
		public PlaylistAutomator()
		{
		}
	}
	[Token(Token = "0x2000555")]
	public class SongListHighlighting : MonoBehaviour
	{
		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuToggleButton volume1Button;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuToggleButton volume2Button;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MenuToggleButton localButton;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SongFileListManager fileListManager;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private OfficialSongListManager officialSongListManager;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float startDelayTime;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float volumeSelectTime;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float songSelectTime;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private string localDir;

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xC25094", Offset = "0xC25094", VA = "0xC25094")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xC25344", Offset = "0xC25344", VA = "0xC25344")]
		public void SetupSongList()
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xC253E8", Offset = "0xC253E8", VA = "0xC253E8")]
		public void ScrollToSecondPage()
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0xC25454", Offset = "0xC25454", VA = "0xC25454")]
		public void SelectSecondSongPack()
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0xC254FC", Offset = "0xC254FC", VA = "0xC254FC")]
		public void PrepareLocalSongs()
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xC255B8", Offset = "0xC255B8", VA = "0xC255B8")]
		public SongListHighlighting()
		{
		}
	}
	[Token(Token = "0x2000557")]
	public class WeaponTooltipDisabler : MonoBehaviour
	{
		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<MenuToggleButton> buttons;

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0xC25654", Offset = "0xC25654", VA = "0xC25654")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0xC257A0", Offset = "0xC257A0", VA = "0xC257A0")]
		public WeaponTooltipDisabler()
		{
		}
	}
	[Token(Token = "0x2000558")]
	public class LLControllerImpl : LLController
	{
		[Token(Token = "0x2000559")]
		private class PulseConfiguration
		{
			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float frequency;

			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float amplitude;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float lengthInSeconds;

			[Token(Token = "0x6001DEC")]
			[Address(RVA = "0xC25934", Offset = "0xC25934", VA = "0xC25934")]
			public PulseConfiguration(float frequency, float amplitude, float hapticLength)
			{
			}
		}

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private LLManager.HandSide handSide;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private OVRInput.Controller oculusSide;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool? _isOculusHomeCurrentlyOpened;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion currentControllerRotation;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion previousControllerRotation;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private JoystickPosition joystickPosition;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float joystickRepetitionTimeout;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float JOYSTICK_HORIZONTAL_REP_TIMEOUT;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly float JOYSTICK_VERTICAL_REP_TIMEOUT;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<PulseType, PulseConfiguration> pulseConfigurations;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float hapticLengthInSeconds;

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0xC257A8", Offset = "0xC257A8", VA = "0xC257A8")]
		public LLControllerImpl(LLManager.HandSide side)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0xC25970", Offset = "0xC25970", VA = "0xC25970", Slot = "8")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xC25A08", Offset = "0xC25A08", VA = "0xC25A08", Slot = "7")]
		public override void Update(Transform controllerTransform)
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xC26028", Offset = "0xC26028", VA = "0xC26028")]
		private static JoystickPosition CheckVector(Vector2 snapturnvector, Vector2 verticalturnvector)
		{
			return default(JoystickPosition);
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0xC2607C", Offset = "0xC2607C", VA = "0xC2607C", Slot = "5")]
		public override void DoHapticPulse(PulseType type)
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0xC261A8", Offset = "0xC261A8", VA = "0xC261A8", Slot = "6")]
		public override ControllerVelocity GetControllerVelocity(Transform playArea)
		{
			return default(ControllerVelocity);
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0xC26430", Offset = "0xC26430", VA = "0xC26430", Slot = "12")]
		internal override Position GetControllerPosition_Internal()
		{
			return null;
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0xC26528", Offset = "0xC26528", VA = "0xC26528", Slot = "9")]
		public override JoystickPosition GetJoystickPosition()
		{
			return default(JoystickPosition);
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0xC26530", Offset = "0xC26530", VA = "0xC26530", Slot = "4")]
		public override VRControllerType GetControllerType()
		{
			return default(VRControllerType);
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0xC265A8", Offset = "0xC265A8", VA = "0xC265A8", Slot = "10")]
		public override GameObject GetVisualControllerRepresentation(GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xC2662C", Offset = "0xC2662C", VA = "0xC2662C", Slot = "11")]
		public override void ConfigureVisualControllerRepresentation(GameObject model)
		{
		}
	}
	[Token(Token = "0x200055A")]
	public class LLHeadsetImpl : LLHeadset
	{
		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hadInputFocus;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool wasUserPresent;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D layerTexture;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntPtr layerIdPtr;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GCHandle layerIdHandle;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int localTrackingSpaceRecenterCount;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int cachedVector3fSize;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static OVRNativeBuffer cachedGeometryNativeBuffer;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float[] cachedGeometryManagedBuffer;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector3> cachedGeometryList;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool oldVRFocus;

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xC26684", Offset = "0xC26684", VA = "0xC26684", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xC26798", Offset = "0xC26798", VA = "0xC26798", Slot = "8")]
		public override FlatRect GetPlayAreaSize()
		{
			return default(FlatRect);
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xC26958", Offset = "0xC26958", VA = "0xC26958", Slot = "9")]
		public override Vector3[] GetPlayAreaPoints()
		{
			return null;
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xC26F8C", Offset = "0xC26F8C", VA = "0xC26F8C", Slot = "14")]
		public override void Update(Transform playAreaTransform)
		{
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xC272A0", Offset = "0xC272A0", VA = "0xC272A0", Slot = "15")]
		public override void FixedUpdate()
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xC272F0", Offset = "0xC272F0", VA = "0xC272F0", Slot = "16")]
		public override void LateUpdate()
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xC27340", Offset = "0xC27340", VA = "0xC27340", Slot = "5")]
		public override IEnumerator FadeToLoadingScreen(GameObject loadingScreen, float cameraVectorY)
		{
			return null;
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xC27408", Offset = "0xC27408", VA = "0xC27408", Slot = "7")]
		public override IEnumerator FadeBackToSceneView()
		{
			return null;
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xC274A4", Offset = "0xC274A4", VA = "0xC274A4", Slot = "12")]
		public override VRMiddlewareType GetVRMiddlewareType()
		{
			return default(VRMiddlewareType);
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xC274AC", Offset = "0xC274AC", VA = "0xC274AC", Slot = "13")]
		public override VRHeadsetType GetVRHeadsetType()
		{
			return default(VRHeadsetType);
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xC27578", Offset = "0xC27578", VA = "0xC27578")]
		private IEnumerator OculusSetHeadsetOverlay(Texture textureToSet, Transform position, float cameraVectorY)
		{
			return null;
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0xC27644", Offset = "0xC27644", VA = "0xC27644")]
		private void OculusKillHeadsetOverlay()
		{
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0xC27754", Offset = "0xC27754", VA = "0xC27754", Slot = "17")]
		public override void SetHeadsetVisualQualityPreset(HeadsetVisualQualityPreset level)
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0xC26710", Offset = "0xC26710", VA = "0xC26710")]
		private void SetFixedFoveationLevel(HeadsetVisualQualityPreset level)
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0xC2777C", Offset = "0xC2777C", VA = "0xC2777C")]
		private void SetEyeResolution(HeadsetVisualQualityPreset level)
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xC277FC", Offset = "0xC277FC", VA = "0xC277FC", Slot = "18")]
		internal override void SetColorSpace(PBVRColorSpace color)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0xC278A4", Offset = "0xC278A4", VA = "0xC278A4")]
		public LLHeadsetImpl()
		{
		}
	}
	[Token(Token = "0x200055E")]
	public class QuestSettings : MonoBehaviour
	{
		[Token(Token = "0x200055F")]
		public enum ProcessorPerformanceLevel
		{
			[Token(Token = "0x40021A8")]
			PowerSavings,
			[Token(Token = "0x40021A9")]
			SustainedLow,
			[Token(Token = "0x40021AA")]
			SustainedHigh,
			[Token(Token = "0x40021AB")]
			Boost
		}

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool setSuggestedCPUAndGPULevel;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ProcessorPerformanceLevel suggestedCPULevel;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProcessorPerformanceLevel suggestedGPULevel;

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xC28990", Offset = "0xC28990", VA = "0xC28990")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xC28B04", Offset = "0xC28B04", VA = "0xC28B04")]
		public QuestSettings()
		{
		}
	}
	[Token(Token = "0x2000560")]
	public class LLPlatformImpl : LLPlatform
	{
		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Feature, string> FEATURE_TO_SKU;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string STAT_EXPERIENCE;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int LEADERBOARD_ENTRIES_MAX_PER_CALL;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object identifier;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, List<LeaderboardEntry>> highscoreCache;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Feature, bool> featureIsBought;

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xC28B14", Offset = "0xC28B14", VA = "0xC28B14", Slot = "5")]
		public override PlatformType GetPlatformType()
		{
			return default(PlatformType);
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xC28B1C", Offset = "0xC28B1C", VA = "0xC28B1C", Slot = "4")]
		public override void InitializePlatform()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xC28EA8", Offset = "0xC28EA8", VA = "0xC28EA8")]
		private void EntitlementCallback(Message message)
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xC29070", Offset = "0xC29070", VA = "0xC29070")]
		private Feature GetFeatureForSku(string sku)
		{
			return default(Feature);
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xC29214", Offset = "0xC29214", VA = "0xC29214")]
		private void RetrieveFeatures(Action callback)
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xC29320", Offset = "0xC29320", VA = "0xC29320", Slot = "9")]
		public override LeaderboardType GetLeaderBoardType()
		{
			return default(LeaderboardType);
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xC29328", Offset = "0xC29328", VA = "0xC29328", Slot = "6")]
		public override void GetExperience(Action<int> callback)
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xC29514", Offset = "0xC29514", VA = "0xC29514", Slot = "7")]
		public override void StoreExperience(int experience)
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xC2973C", Offset = "0xC2973C", VA = "0xC2973C", Slot = "10")]
		public override void SetLeaderboardEntry(LeaderboardSelector selector, LeaderboardEntry entry, Action leaderboardUpdateFinished)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xC299F8", Offset = "0xC299F8", VA = "0xC299F8", Slot = "11")]
		public override void GetLeaderboardEntries(LeaderboardSelector selector, Action<LeaderboardSelector, List<LeaderboardEntry>, bool> highscoresReceived)
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xC29D00", Offset = "0xC29D00", VA = "0xC29D00")]
		private void DownloadLeaderboards(string leaderboardName, int startAfter, LeaderboardSelector selector, Action<LeaderboardSelector, List<LeaderboardEntry>, bool> highscoresReceived, LeaderboardEntry[] entryArray)
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xC2A08C", Offset = "0xC2A08C", VA = "0xC2A08C")]
		private LeaderboardEntry[] ProcessLeaderboardEntryList(LeaderboardEntry[] currentList, LeaderboardEntryList serverSideList)
		{
			return null;
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0xC2A450", Offset = "0xC2A450", VA = "0xC2A450", Slot = "12")]
		public override void GetHighscoreForSong(LeaderboardSelector selector, Action<int> lastHighscoreRetrieved)
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0xC2A76C", Offset = "0xC2A76C", VA = "0xC2A76C", Slot = "14")]
		public override object GetUserId()
		{
			return null;
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0xC2A774", Offset = "0xC2A774", VA = "0xC2A774", Slot = "15")]
		public override void ClosePlatform()
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xC2995C", Offset = "0xC2995C", VA = "0xC2995C")]
		private static string GetLeaderboardName(LeaderboardSelector selector)
		{
			return null;
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xC29018", Offset = "0xC29018", VA = "0xC29018")]
		internal static void LogOculus(string v)
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xC28E50", Offset = "0xC28E50", VA = "0xC28E50")]
		internal static void LogOculusWarning(string v)
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xC2A778", Offset = "0xC2A778", VA = "0xC2A778", Slot = "16")]
		public override bool IsFeaturePurchased(Feature feature)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xC2A80C", Offset = "0xC2A80C", VA = "0xC2A80C", Slot = "17")]
		public override void StartFeaturePurchase(Feature feature, Action<bool> purchaseFunctionFinished)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xC2AA24", Offset = "0xC2AA24", VA = "0xC2AA24")]
		public LLPlatformImpl()
		{
		}
	}
	[Token(Token = "0x200056D")]
	public class AdditionalCameras : MonoBehaviour
	{
		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject defaultStaticAvatarCamera;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject closeStaticAvatarCamera;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject farStaticAvatarCamera;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject closeRotatingAvatarCamera;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject farRotatingAvatarCamera;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GameObject> avatarCameras;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int currentCameraIndex;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool flareLayerAdded;

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xC2D880", Offset = "0xC2D880", VA = "0xC2D880")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xC2DAB8", Offset = "0xC2DAB8", VA = "0xC2DAB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xC2DE60", Offset = "0xC2DE60", VA = "0xC2DE60")]
		private void ApplyBeautifyProfiles()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xC2E14C", Offset = "0xC2E14C", VA = "0xC2E14C")]
		private void AddFlareLayer()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xC2E01C", Offset = "0xC2E01C", VA = "0xC2E01C")]
		private void RemoveFlareLayer()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xC2DF34", Offset = "0xC2DF34", VA = "0xC2DF34")]
		private void SetFarClippingPlane()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xC2E2A0", Offset = "0xC2E2A0", VA = "0xC2E2A0")]
		public AdditionalCameras()
		{
		}
	}
	[Token(Token = "0x200056E")]
	internal class AntHrmDevice : AntDevice
	{
		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool supportsPages;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool toggleBitState;

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xC2E328", Offset = "0xC2E328", VA = "0xC2E328")]
		public AntHrmDevice()
		{
		}
	}
	[Token(Token = "0x200056F")]
	public class ANTPlusAdapter : HRMAdapter
	{
		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string UNKNOWN_PREFIX;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[CompilerGenerated]
		private Action deviceNameChanged;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HRMStatus status;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly float SCAN_TIMEOUT;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float scanStartTime;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<AntHrmDevice> scanResult;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int heartRate;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AntHrmDevice targetDevice;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AntHrmDevice connectedDevice;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AntChannel backgroundScanChannel;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AntChannel deviceChannel;

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xC2E330", Offset = "0xC2E330", VA = "0xC2E330", Slot = "13")]
		public void Start()
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xC2E3F4", Offset = "0xC2E3F4", VA = "0xC2E3F4")]
		private void StartScan()
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xC2E5EC", Offset = "0xC2E5EC", VA = "0xC2E5EC")]
		private void ReceivedBackgroundScanData(byte[] data)
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xC2E9B8", Offset = "0xC2E9B8", VA = "0xC2E9B8")]
		private HRMDevice HrmDeviceFromAntDevice(AntHrmDevice antDevice)
		{
			return null;
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xC2EA44", Offset = "0xC2EA44", VA = "0xC2EA44")]
		private AntHrmDevice AntDeviceFromHrmDevice(HRMDevice hrmDevice)
		{
			return null;
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xC2EAC8", Offset = "0xC2EAC8", VA = "0xC2EAC8")]
		private void ConnectToDevice(AntDevice device)
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xC2EC74", Offset = "0xC2EC74", VA = "0xC2EC74")]
		private void Data(byte[] data)
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xC2EE30", Offset = "0xC2EE30", VA = "0xC2EE30")]
		private void ChannelResponse(ANT_Response response)
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xC2E590", Offset = "0xC2E590", VA = "0xC2E590")]
		private void Disconnect()
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xC2EEA0", Offset = "0xC2EEA0", VA = "0xC2EEA0", Slot = "9")]
		public string GetCurrentDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0xC2EF24", Offset = "0xC2EF24", VA = "0xC2EF24", Slot = "8")]
		public List<HRMDevice> GetDeviceList()
		{
			return null;
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xC2F128", Offset = "0xC2F128", VA = "0xC2F128", Slot = "7")]
		public int GetHeartRate()
		{
			return default(int);
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xC2F130", Offset = "0xC2F130", VA = "0xC2F130", Slot = "6")]
		public HRMStatus GetStatus()
		{
			return default(HRMStatus);
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xC2F138", Offset = "0xC2F138", VA = "0xC2F138", Slot = "5")]
		public void Shutdown()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xC2F14C", Offset = "0xC2F14C", VA = "0xC2F14C", Slot = "11")]
		public void SetCommand(HRMCommand command)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xC2F228", Offset = "0xC2F228", VA = "0xC2F228", Slot = "12")]
		public void SetReconnectDeviceId(long hrmIdLong)
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xC2F2E8", Offset = "0xC2F2E8", VA = "0xC2F2E8", Slot = "10")]
		public void SetTargetDevice(HRMDevice hrmDevice)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xC2F31C", Offset = "0xC2F31C", VA = "0xC2F31C", Slot = "4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xC2F574", Offset = "0xC2F574", VA = "0xC2F574")]
		public ANTPlusAdapter()
		{
		}
	}
	[Token(Token = "0x2000570")]
	public class AudioFader : MonoBehaviour
	{
		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xC2F5FC", Offset = "0xC2F5FC", VA = "0xC2F5FC")]
		public IEnumerator FadeOut(AudioSource audioSource, float fadeDuration)
		{
			return null;
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xC2F6A8", Offset = "0xC2F6A8", VA = "0xC2F6A8")]
		public IEnumerator FadeIn(AudioSource audioSource, float fadeDuration, float targetVolume)
		{
			return null;
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xC2F758", Offset = "0xC2F758", VA = "0xC2F758")]
		public AudioFader()
		{
		}
	}
	[Token(Token = "0x2000573")]
	public class BTAndroid : HRMAdapter
	{
		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string HRM_SERVICE;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string HRM_CHARACTERISTIC;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float SCAN_DURATION;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly float SUBSCRIBE_DELAY;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HRMStatus status;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int heartRate;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float scanStopTime;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, string> devices;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<HRMDevice> scannedDevices;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HRMDevice connectedDevice;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HRMDevice targetDevice;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isScanningToConnect;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float subscribeTime;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isRunning;

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xC2F9D4", Offset = "0xC2F9D4", VA = "0xC2F9D4", Slot = "9")]
		public string GetCurrentDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xC2FA28", Offset = "0xC2FA28", VA = "0xC2FA28", Slot = "8")]
		public List<HRMDevice> GetDeviceList()
		{
			return null;
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xC2FA30", Offset = "0xC2FA30", VA = "0xC2FA30", Slot = "7")]
		public int GetHeartRate()
		{
			return default(int);
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0xC2FA38", Offset = "0xC2FA38", VA = "0xC2FA38", Slot = "6")]
		public HRMStatus GetStatus()
		{
			return default(HRMStatus);
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xC2FA40", Offset = "0xC2FA40", VA = "0xC2FA40", Slot = "11")]
		public void SetCommand(HRMCommand command)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xC2FC34", Offset = "0xC2FC34", VA = "0xC2FC34")]
		private void ScanForDevices()
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xC2FE78", Offset = "0xC2FE78", VA = "0xC2FE78")]
		private void ConnectToDevice()
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0xC300DC", Offset = "0xC300DC", VA = "0xC300DC")]
		private void SubscribeToCharacteristic()
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0xC30298", Offset = "0xC30298", VA = "0xC30298", Slot = "12")]
		public void SetReconnectDeviceId(long hrmIdLong)
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0xC30318", Offset = "0xC30318", VA = "0xC30318", Slot = "10")]
		public void SetTargetDevice(HRMDevice hrmDevice)
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0xC30320", Offset = "0xC30320", VA = "0xC30320", Slot = "5")]
		public void Shutdown()
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xC303A8", Offset = "0xC303A8", VA = "0xC303A8", Slot = "13")]
		public void Start()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xC2FB48", Offset = "0xC2FB48", VA = "0xC2FB48")]
		private void Disconnect()
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xC3047C", Offset = "0xC3047C", VA = "0xC3047C", Slot = "4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xC305E8", Offset = "0xC305E8", VA = "0xC305E8")]
		private void StopScanning()
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xC2FD50", Offset = "0xC2FD50", VA = "0xC2FD50")]
		public void SetState(HRMStatus newState)
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xC30010", Offset = "0xC30010", VA = "0xC30010")]
		private string longAddressToString(long address)
		{
			return null;
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xC30600", Offset = "0xC30600", VA = "0xC30600")]
		private long stringAddressToLong(string address)
		{
			return default(long);
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xC30678", Offset = "0xC30678", VA = "0xC30678")]
		public BTAndroid()
		{
		}
	}
	[Token(Token = "0x2000576")]
	public class GattClient : HRMAdapter
	{
		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HRMStatus status;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int heartRate;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HRMCommand _command;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HRMDevice connectedDevice;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HRMDevice targetDevice;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long reconnectDeviceId;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<HRMDevice> deviceList;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int HEART_RATE_SERVICE;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private readonly int HEART_RATE_CHARACTERISTIC;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int SUBSCRIBE_RETRIES;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BluetoothManager FManager;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<long, GattClientThread> FConnections;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GattClientThread connectedClient;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<HRMDevice, GattCharacteristic> charDict;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int deviceIndex;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool closedown;

		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private object lockHandle;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Thread thread;

		[Token(Token = "0x1700046C")]
		private HRMCommand command
		{
			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0xC3119C", Offset = "0xC3119C", VA = "0xC3119C")]
			get
			{
				return default(HRMCommand);
			}
			[Token(Token = "0x6001E8F")]
			[Address(RVA = "0xC3125C", Offset = "0xC3125C", VA = "0xC3125C")]
			set
			{
			}
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xC31318", Offset = "0xC31318", VA = "0xC31318")]
		private IntPtr GetRadio()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0xC31590", Offset = "0xC31590", VA = "0xC31590")]
		private void ManagerBeforeClose(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0xC315D4", Offset = "0xC315D4", VA = "0xC315D4")]
		private void ManagerAfterOpen(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xC31618", Offset = "0xC31618", VA = "0xC31618")]
		private void ManagerDiscoveringStarted(object sender, IntPtr Radio)
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xC31708", Offset = "0xC31708", VA = "0xC31708")]
		private void ManagerDeviceFound(object sender, IntPtr Radio, long Address)
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xC31850", Offset = "0xC31850", VA = "0xC31850")]
		private void ManagerDiscoveringCompleted(object sender, IntPtr Radio, int Error)
		{
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xC31DB8", Offset = "0xC31DB8", VA = "0xC31DB8")]
		private void ClientChanged(object sender, ushort Handle, byte[] Value)
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xC31E08", Offset = "0xC31E08", VA = "0xC31E08")]
		private void ClientDisconnect(object sender, int Reason)
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xC31E90", Offset = "0xC31E90", VA = "0xC31E90")]
		private void ClientConnect(object sender, int Error)
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xC319AC", Offset = "0xC319AC", VA = "0xC319AC")]
		private void IterateDeviceList(bool increment)
		{
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xC32D4C", Offset = "0xC32D4C", VA = "0xC32D4C")]
		private bool ConnectToDevice(long Address)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xC32400", Offset = "0xC32400", VA = "0xC32400")]
		private GattCharacteristic FindHrmCharacteristic(GattClientThread FClient)
		{
			return default(GattCharacteristic);
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xC32A1C", Offset = "0xC32A1C", VA = "0xC32A1C")]
		private void SubscribeToHrmChar(GattClientThread client)
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xC32888", Offset = "0xC32888", VA = "0xC32888")]
		private string GetDeviceName(long devId)
		{
			return null;
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xC3306C", Offset = "0xC3306C", VA = "0xC3306C")]
		private void StartDiscovery()
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xC33194", Offset = "0xC33194", VA = "0xC33194")]
		private void ConnectToDevice()
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xC32360", Offset = "0xC32360", VA = "0xC32360")]
		private void Disconnect()
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xC3320C", Offset = "0xC3320C", VA = "0xC3320C")]
		private void Unsubscribe()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xC33524", Offset = "0xC33524", VA = "0xC33524")]
		private void Reconnect()
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xC327F4", Offset = "0xC327F4", VA = "0xC327F4")]
		private bool IsHrmChara(GattCharacteristic chara)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xC33614", Offset = "0xC33614", VA = "0xC33614")]
		private void HandleCommand()
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xC33680", Offset = "0xC33680", VA = "0xC33680", Slot = "5")]
		public void Shutdown()
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xC3368C", Offset = "0xC3368C", VA = "0xC3368C", Slot = "6")]
		public HRMStatus GetStatus()
		{
			return default(HRMStatus);
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xC33694", Offset = "0xC33694", VA = "0xC33694", Slot = "7")]
		public int GetHeartRate()
		{
			return default(int);
		}

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0xC3369C", Offset = "0xC3369C", VA = "0xC3369C", Slot = "8")]
		public List<HRMDevice> GetDeviceList()
		{
			return null;
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0xC336A4", Offset = "0xC336A4", VA = "0xC336A4", Slot = "9")]
		public string GetCurrentDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0xC33704", Offset = "0xC33704", VA = "0xC33704", Slot = "10")]
		public void SetTargetDevice(HRMDevice hrmDevice)
		{
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0xC3370C", Offset = "0xC3370C", VA = "0xC3370C", Slot = "11")]
		public void SetCommand(HRMCommand command)
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0xC33710", Offset = "0xC33710", VA = "0xC33710", Slot = "12")]
		public void SetReconnectDeviceId(long hrmIdLong)
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0xC33718", Offset = "0xC33718", VA = "0xC33718", Slot = "13")]
		public void Start()
		{
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0xC337E0", Offset = "0xC337E0", VA = "0xC337E0")]
		private void ThreadRun()
		{
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0xC33C00", Offset = "0xC33C00", VA = "0xC33C00")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0xC33C44", Offset = "0xC33C44", VA = "0xC33C44")]
		private void SetStatus(HRMStatus newStatus)
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xC33C4C", Offset = "0xC33C4C", VA = "0xC33C4C", Slot = "4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xC33C50", Offset = "0xC33C50", VA = "0xC33C50")]
		public GattClient()
		{
		}
	}
	[Token(Token = "0x2000578")]
	public interface HRMAdapter
	{
		[Token(Token = "0x6001EB6")]
		void Update();

		[Token(Token = "0x6001EB7")]
		void Shutdown();

		[Token(Token = "0x6001EB8")]
		HRMStatus GetStatus();

		[Token(Token = "0x6001EB9")]
		int GetHeartRate();

		[Token(Token = "0x6001EBA")]
		List<HRMDevice> GetDeviceList();

		[Token(Token = "0x6001EBB")]
		string GetCurrentDeviceName();

		[Token(Token = "0x6001EBC")]
		void SetTargetDevice(HRMDevice hrmDevice);

		[Token(Token = "0x6001EBD")]
		void SetCommand(HRMCommand command);

		[Token(Token = "0x6001EBE")]
		void SetReconnectDeviceId(long hrmIdLong);
	}
	[Token(Token = "0x2000579")]
	public enum HRMPlatform
	{
		[Token(Token = "0x4002215")]
		BLUETOOTH,
		[Token(Token = "0x4002216")]
		ANT_PLUS
	}
	[Token(Token = "0x200057A")]
	public enum HRMStatus
	{
		[Token(Token = "0x4002218")]
		OFF,
		[Token(Token = "0x4002219")]
		IDLE,
		[Token(Token = "0x400221A")]
		DISCOVERING,
		[Token(Token = "0x400221B")]
		CONNECTING,
		[Token(Token = "0x400221C")]
		SUBSCRIBED,
		[Token(Token = "0x400221D")]
		RECONNECTING,
		[Token(Token = "0x400221E")]
		NO_DEVICE
	}
	[Token(Token = "0x200057B")]
	public enum HRMCommand
	{
		[Token(Token = "0x4002220")]
		NONE,
		[Token(Token = "0x4002221")]
		START_DISCOVERY,
		[Token(Token = "0x4002222")]
		CONNECT,
		[Token(Token = "0x4002223")]
		DISCONNECT,
		[Token(Token = "0x4002224")]
		RECONNECT
	}
	[Token(Token = "0x200057C")]
	public class HRMDevice
	{
		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long devId;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isHRM;

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0xC30310", Offset = "0xC30310", VA = "0xC30310")]
		public HRMDevice()
		{
		}
	}
	[Token(Token = "0x200057D")]
	public class HRMCon : MonoBehaviour
	{
		[Token(Token = "0x200057E")]
		public delegate void OnStatusChanged(HRMStatus newStatus, HRMStatus oldStatus);

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HRMStatus oldStatus;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int oldHeartRate;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HRMPlatform platform;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HRMAdapter hrmThread;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ANTPlusAdapter antPlusAdapter;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GattClient bluetoothAdapter;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BTAndroid btAndroidAdapter;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isOn;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isInitialized;

		[Token(Token = "0x14000028")]
		public event Action<int> HeartRateChanged
		{
			[Token(Token = "0x6001EC0")]
			[Address(RVA = "0xC33DC0", Offset = "0xC33DC0", VA = "0xC33DC0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001EC1")]
			[Address(RVA = "0xC33E70", Offset = "0xC33E70", VA = "0xC33E70")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event OnStatusChanged StatusChanged
		{
			[Token(Token = "0x6001EC2")]
			[Address(RVA = "0xC33F20", Offset = "0xC33F20", VA = "0xC33F20")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001EC3")]
			[Address(RVA = "0xC33FBC", Offset = "0xC33FBC", VA = "0xC33FBC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0xC34058", Offset = "0xC34058", VA = "0xC34058")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0xC34098", Offset = "0xC34098", VA = "0xC34098")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0xC3426C", Offset = "0xC3426C", VA = "0xC3426C")]
		public void SetPower(bool shouldBeOn)
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xC34674", Offset = "0xC34674", VA = "0xC34674")]
		public void SetPlatform(HRMPlatform platform)
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xC34448", Offset = "0xC34448", VA = "0xC34448")]
		private void InitPlatforms()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0xC34808", Offset = "0xC34808", VA = "0xC34808")]
		public int GetHeartRate()
		{
			return default(int);
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0xC348B8", Offset = "0xC348B8", VA = "0xC348B8")]
		public List<HRMDevice> GetDeviceList()
		{
			return null;
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0xC349AC", Offset = "0xC349AC", VA = "0xC349AC")]
		internal HRMStatus GetStatus()
		{
			return default(HRMStatus);
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0xC34A64", Offset = "0xC34A64", VA = "0xC34A64")]
		internal string GetCurrentDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0xC34B28", Offset = "0xC34B28", VA = "0xC34B28")]
		internal void ConnectToDevice(HRMDevice hrmDevice)
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0xC34C54", Offset = "0xC34C54", VA = "0xC34C54")]
		internal void StartDiscovery()
		{
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xC345C4", Offset = "0xC345C4", VA = "0xC345C4")]
		internal void Disconnect()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xC34D04", Offset = "0xC34D04", VA = "0xC34D04")]
		internal void Reconnect(long hrmIdLong)
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xC34E30", Offset = "0xC34E30", VA = "0xC34E30")]
		public HRMCon()
		{
		}
	}
	[Token(Token = "0x200057F")]
	public class CameraPreRender : MonoBehaviour
	{
		[Token(Token = "0x2000580")]
		public delegate void PreCullEvent();

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PreCullEvent onPreCull;

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xC34F20", Offset = "0xC34F20", VA = "0xC34F20")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0xC34F84", Offset = "0xC34F84", VA = "0xC34F84")]
		public CameraPreRender()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class CameraRotator : MonoBehaviour
	{
		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isRotating;

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0xC3506C", Offset = "0xC3506C", VA = "0xC3506C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0xC350CC", Offset = "0xC350CC", VA = "0xC350CC")]
		public void ToggleRotation()
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0xC350F4", Offset = "0xC350F4", VA = "0xC350F4")]
		public void DoRotation(bool isActivated)
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0xC35100", Offset = "0xC35100", VA = "0xC35100")]
		public void IncreaseSpeed()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0xC35194", Offset = "0xC35194", VA = "0xC35194")]
		public void DecreaseSpeed()
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0xC35240", Offset = "0xC35240", VA = "0xC35240")]
		public CameraRotator()
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class Clock : MonoBehaviour
	{
		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string TIME_FORMAT;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI textField;

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0xC35250", Offset = "0xC35250", VA = "0xC35250")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0xC353AC", Offset = "0xC353AC", VA = "0xC353AC")]
		public Clock()
		{
		}
	}
	[Token(Token = "0x2000583")]
	public class DisableInBuild : MonoBehaviour
	{
		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0xC35420", Offset = "0xC35420", VA = "0xC35420")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0xC35444", Offset = "0xC35444", VA = "0xC35444")]
		public DisableInBuild()
		{
		}
	}
	[Token(Token = "0x2000584")]
	public class FMCLog
	{
		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MonoBehaviour monob;

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0xC3544C", Offset = "0xC3544C", VA = "0xC3544C")]
		private static string GetTimestamp()
		{
			return null;
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0xC31454", Offset = "0xC31454", VA = "0xC31454")]
		public static void LogInfo(object obj, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xC32C10", Offset = "0xC32C10", VA = "0xC32C10")]
		public static void LogError(object obj, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0xC333E8", Offset = "0xC333E8", VA = "0xC333E8")]
		public static void LogWarning(object obj, [Optional] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0xC354CC", Offset = "0xC354CC", VA = "0xC354CC")]
		internal static void LogWarningFormat(params object[] args)
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0xC355C0", Offset = "0xC355C0", VA = "0xC355C0")]
		internal static void SetBehaviour(MonoBehaviour mb)
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0xC3569C", Offset = "0xC3569C", VA = "0xC3569C")]
		internal static void LogFormat(params object[] args)
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0xC35790", Offset = "0xC35790", VA = "0xC35790")]
		internal static void DrawRay(Vector3 v1, Vector3 v2, Color color)
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0xC35880", Offset = "0xC35880", VA = "0xC35880")]
		internal static void LogToServer(string v)
		{
		}
	}
	[Token(Token = "0x2000585")]
	public class FrameworkManager : MonoBehaviour
	{
		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string FRAMEWORK_SCENE_NAME;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string GAME_SCENE_NAME;

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string MENU_SCENE_NAME;

		[Token(Token = "0x400223C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string MENU_ENV_SCENE_NAME;

		[Token(Token = "0x400223D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool usePlatformIntegration;

		[Token(Token = "0x400223E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject fpvSpectatorCamera;

		[Token(Token = "0x400223F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject avatarSpectatorCamera;

		[Token(Token = "0x4002240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject genericAvatar;

		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject skycityAvatar;

		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject desertAvatar;

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject spaceAvatar;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject medievalAvatar;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip[] hitAudioClip;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool frameworkWasStarted;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameConfiguration config;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SongManager songManager;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int playerHighscore;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool isWelcomePanelVisible;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool justPlayedASong;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		public bool showPlayspaceSizeWarningDialog;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PauseHandler pauseHandler;

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0xC35884", Offset = "0xC35884", VA = "0xC35884")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0xC35908", Offset = "0xC35908", VA = "0xC35908")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0xC359A4", Offset = "0xC359A4", VA = "0xC359A4")]
		internal void LoadGame()
		{
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0xC35A78", Offset = "0xC35A78", VA = "0xC35A78")]
		internal void LoadEditor()
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0xC35B4C", Offset = "0xC35B4C", VA = "0xC35B4C")]
		internal void RefreshMenu()
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0xC35A04", Offset = "0xC35A04", VA = "0xC35A04")]
		private IEnumerator LaunchGame()
		{
			return null;
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xC35C58", Offset = "0xC35C58", VA = "0xC35C58")]
		private IEnumerator PreloadShaders()
		{
			return null;
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0xC35AD8", Offset = "0xC35AD8", VA = "0xC35AD8")]
		private IEnumerator LaunchEditor()
		{
			return null;
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0xC35D08", Offset = "0xC35D08", VA = "0xC35D08")]
		internal void ReturnFromSong(int songScore, OverallStatistic overallStat)
		{
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0xC35DC0", Offset = "0xC35DC0", VA = "0xC35DC0")]
		internal void ReturnFromEditor()
		{
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0xC35BBC", Offset = "0xC35BBC", VA = "0xC35BBC")]
		private IEnumerator ShowMenu()
		{
			return null;
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0xC35D28", Offset = "0xC35D28", VA = "0xC35D28")]
		private IEnumerator ShowMenuAndAddPoints(int pointsToAdd, OverallStatistic overallStat)
		{
			return null;
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0xC35E30", Offset = "0xC35E30", VA = "0xC35E30")]
		internal void Reset()
		{
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0xC35E50", Offset = "0xC35E50", VA = "0xC35E50")]
		private IEnumerator LaunchMenu()
		{
			return null;
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xC35ED8", Offset = "0xC35ED8", VA = "0xC35ED8")]
		private IEnumerator RemoveAllScenesExcept(List<string> scenesToKeep)
		{
			return null;
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xC35F74", Offset = "0xC35F74", VA = "0xC35F74")]
		public bool IsUsePlatformIntegration()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0xC35F7C", Offset = "0xC35F7C", VA = "0xC35F7C")]
		public void SetWelcomePanelVisibility(bool isVisible)
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0xC35F88", Offset = "0xC35F88", VA = "0xC35F88")]
		public bool IsWelcomePanelVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0xC35F90", Offset = "0xC35F90", VA = "0xC35F90")]
		public void ActivateFpvSpectatorCam(bool isActive)
		{
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0xC35FB0", Offset = "0xC35FB0", VA = "0xC35FB0")]
		public Camera GetFPVSpectatorCam()
		{
			return null;
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0xC36000", Offset = "0xC36000", VA = "0xC36000")]
		public void SetAvatarSpectatorCam(bool isActive)
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0xC36110", Offset = "0xC36110", VA = "0xC36110")]
		public void SetAvatarScale()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0xC36234", Offset = "0xC36234", VA = "0xC36234")]
		public AudioClip GetHitSound(int hitSound)
		{
			return null;
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0xC36264", Offset = "0xC36264", VA = "0xC36264")]
		public int GetNumberOfHitSounds()
		{
			return default(int);
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0xC36280", Offset = "0xC36280", VA = "0xC36280")]
		private void ToggleControllerPausing(bool shouldPause)
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0xC36300", Offset = "0xC36300", VA = "0xC36300")]
		public FrameworkManager()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public class CalorieCalculator
	{
		[Token(Token = "0x6001F37")]
		[Address(RVA = "0xC38060", Offset = "0xC38060", VA = "0xC38060")]
		private static float CalculateEnergyExpenditureInKiloJoule(GameConfiguration.Gender gender, int age, int kilogram, int heartrate)
		{
			return default(float);
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0xC38168", Offset = "0xC38168", VA = "0xC38168")]
		private static float CalculateEnergyExpenditureInKiloCaloriesPerMinute(GameConfiguration.Gender gender, int age, int kilogram, int heartrate)
		{
			return default(float);
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0xC38184", Offset = "0xC38184", VA = "0xC38184")]
		public static float CalculateEnergyExpenditureInKiloCaloriesForOneSecond(GameConfiguration.Gender gender, int age, int kilogram, int heartRate)
		{
			return default(float);
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0xC381CC", Offset = "0xC381CC", VA = "0xC381CC")]
		public static int CalculateHeartRateBasedOnMovement(int age, float movementFactor)
		{
			return default(int);
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0xC381C0", Offset = "0xC381C0", VA = "0xC381C0")]
		private static float GetBaseKiloCaloriePerSecond(GameConfiguration.Gender gender, int age, int kilogram)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200058F")]
	public class EndScreenDisplay : MonoBehaviour
	{
		[Token(Token = "0x4002269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<WeaponType, string> WEAPON_ICON;

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject mainScreen;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject singleChallengePanels;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI songTitleText;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextBasedLocalizedString durationText;

		[Token(Token = "0x4002271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PrefixBasedLocalizedString overallRatingText;

		[Token(Token = "0x4002272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject[] starPlaceholders;

		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Sprite filledStar;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Sprite halfStar;

		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Sprite emptyStar;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI totalPointsLabel;

		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI totalPointsText;

		[Token(Token = "0x4002278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI activityBonusLabel;

		[Token(Token = "0x4002279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI activityBonusText;

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI strengthBonusLabel;

		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TextMeshProUGUI strengthBonusText;

		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI playerHighscoreLabel;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI playerHighscoreText;

		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TextMeshProUGUI maxComboText;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public TextMeshProUGUI streamsCatchedLabel;

		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TextMeshProUGUI streamsCatchedText;

		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Slider streamsCatchedSlider;

		[Token(Token = "0x4002282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public TextMeshProUGUI perfectHitsLabel;

		[Token(Token = "0x4002283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public TextMeshProUGUI perfectHitsText;

		[Token(Token = "0x4002284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public TextMeshProUGUI hitsText;

		[Token(Token = "0x4002285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Slider hitsSlider;

		[Token(Token = "0x4002286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public TextMeshProUGUI missedText;

		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public TextMeshProUGUI failsText;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public TextMeshProUGUI squatsSessionText;

		[Token(Token = "0x4002289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public TextMeshProUGUI hitSpeedText;

		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public TextMeshProUGUI hitSpeedLabel;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public TextMeshProUGUI weaponIconTextSingle;

		[Token(Token = "0x400228C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public GameObject calorieHeartratePanel;

		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public GameObject caloriesPanel;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public PrefixBasedLocalizedString caloriesSongPlaylistLabelText;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public TextMeshProUGUI caloriesSessionText;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public TextMeshProUGUI caloriesSinceResetText;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public TextMeshProUGUI lifetimeCaloriesText;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public GameObject heartratePanel;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public TextMeshProUGUI maximumHeartrateText;

		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public TextMeshProUGUI averageHeartrateText;

		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public PrefixBasedLocalizedString heartRateSubtitleText;

		[Token(Token = "0x4002296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public GameObject playlistPanels;

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public GameObject overviewPanel;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public PlaylistSongInfoLocalizationString numberOfFinishedSongsText;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public TextBasedLocalizedString playlistDurationText;

		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public PlaylistEndscreenManager playlistEndScreenManager;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public TextMeshProUGUI weaponIconTextPlaylist;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GameObject analysisPanel;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public TextMeshProUGUI bestComboText;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public TextMeshProUGUI newHighscoresText;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public TextMeshProUGUI flawlessVictoriesText;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public TextMeshProUGUI totalSquatsText;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public GameObject accuracyInfo;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public TextMeshProUGUI accuracyText;

		[Token(Token = "0x40022A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public AccuracyStrengthLocalizedString accuracyDescriptionText;

		[Token(Token = "0x40022A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public Image accuracyImage;

		[Token(Token = "0x40022A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public GameObject strengthInfo;

		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public TextMeshProUGUI strengthText;

		[Token(Token = "0x40022A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public AccuracyStrengthLocalizedString strengthDetailsText;

		[Token(Token = "0x40022A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Image strengthImage;

		[Token(Token = "0x40022A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public GameObject modifierPanel;

		[Token(Token = "0x40022AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public EndscreenModifierController endscreenModifierController;

		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public GameObject menuButtonPanel;

		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public MenuSelectButton nextSongButton;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public MenuSelectButton playAgainButton;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public MenuSelectButton overviewButton;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public MenuSelectButton playlistAnalysisButton;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public TextMeshProUGUI mainMenuButtonText;

		[Token(Token = "0x40022B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public EndScreenFireworks fireworks;

		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public TextMeshProUGUI date;

		[Token(Token = "0x40022B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Dictionary<MenuSelectButton.Action, MenuSelectButton> allButtons;

		[Token(Token = "0x40022B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private GameManager gameManager;

		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private SongStatistic stat;

		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private OverallStatistic overallStat;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private List<SongStatistic> songStatList;

		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool overviewAlreadyShown;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x289")]
		private bool isMetric;

		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private string strengthFormat;

		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private string disabledText;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private GameConfiguration gameConfig;

		[Token(Token = "0x40022BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x1400002A")]
		public event Action nextSongClicked
		{
			[Token(Token = "0x6001F3C")]
			[Address(RVA = "0xC3821C", Offset = "0xC3821C", VA = "0xC3821C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F3D")]
			[Address(RVA = "0xC382B8", Offset = "0xC382B8", VA = "0xC382B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event Action playAgainClicked
		{
			[Token(Token = "0x6001F3E")]
			[Address(RVA = "0xC38354", Offset = "0xC38354", VA = "0xC38354")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0xC383F0", Offset = "0xC383F0", VA = "0xC383F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event Action overviewClicked
		{
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0xC3848C", Offset = "0xC3848C", VA = "0xC3848C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F41")]
			[Address(RVA = "0xC38528", Offset = "0xC38528", VA = "0xC38528")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0xC385C4", Offset = "0xC385C4", VA = "0xC385C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0xC38AF4", Offset = "0xC38AF4", VA = "0xC38AF4")]
		public void ShowEndScreen(SongStatistic stat, OverallStatistic overallStat, bool showNextSongButton, bool isSingleSong, bool directlyShowPlaylistOverview, bool isMetric)
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0xC3AC6C", Offset = "0xC3AC6C", VA = "0xC3AC6C")]
		private IEnumerator _ApplyStrengthBonus(int strengthBonus, int scoreWithoutAnyBonus, int activityBonus)
		{
			return null;
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0xC3AD2C", Offset = "0xC3AD2C", VA = "0xC3AD2C")]
		private IEnumerator _ApplyActivityBonus(int activityBonus, int scoreWithoutActivityBonus)
		{
			return null;
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0xC3AAC0", Offset = "0xC3AAC0", VA = "0xC3AAC0")]
		private void FillStars(float number)
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0xC3ADDC", Offset = "0xC3ADDC", VA = "0xC3ADDC")]
		public void HideEndMenu()
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0xC3AEDC", Offset = "0xC3AEDC", VA = "0xC3AEDC")]
		public void ShowOverview(int numberOfFinishedSongs, string playlistDuration, List<SongStatistic> songStatList, int playlistSongCount, int playedRounds)
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0xC3B2B0", Offset = "0xC3B2B0", VA = "0xC3B2B0")]
		private void ShowPlaylistAnalysis()
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xC3B458", Offset = "0xC3B458", VA = "0xC3B458")]
		private void DisplayAccuracyInfo(bool isActive)
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xC3B568", Offset = "0xC3B568", VA = "0xC3B568")]
		private void DisplayStrengthInfo(bool isActive)
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xC3B6A4", Offset = "0xC3B6A4", VA = "0xC3B6A4")]
		private void AssembleAccuracyDescription()
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0xC3B754", Offset = "0xC3B754", VA = "0xC3B754")]
		private void Overview_songClicked(int index)
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0xC3B7CC", Offset = "0xC3B7CC", VA = "0xC3B7CC")]
		private void ButtonClicked(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0xC3A2E4", Offset = "0xC3A2E4", VA = "0xC3A2E4")]
		private void AnimatePanel(GameObject panel, Vector3 vectorToShift, float timeToShift)
		{
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0xC3B930", Offset = "0xC3B930", VA = "0xC3B930")]
		private void MenuButtonSelectHoverEnter(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0xC3B914", Offset = "0xC3B914", VA = "0xC3B914")]
		public void PlayClickSound()
		{
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0xC3B94C", Offset = "0xC3B94C", VA = "0xC3B94C")]
		public void PlayHoverSound()
		{
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0xC3B968", Offset = "0xC3B968", VA = "0xC3B968")]
		public EndScreenDisplay()
		{
		}
	}
	[Token(Token = "0x2000592")]
	public class EndScreenFireworks : MonoBehaviour
	{
		[Token(Token = "0x40022CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] fireworksParticleSystems;

		[Token(Token = "0x40022D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SoundPlayTime[] fireworksAudioScripts;

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xC3AE38", Offset = "0xC3AE38", VA = "0xC3AE38")]
		public void EndFireworks()
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0xC3A9F4", Offset = "0xC3A9F4", VA = "0xC3A9F4")]
		public void SetFireworks(bool isActive)
		{
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xC3C194", Offset = "0xC3C194", VA = "0xC3C194")]
		private void StopAudioScriptWithDelay()
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xC3C1DC", Offset = "0xC3C1DC", VA = "0xC3C1DC")]
		public EndScreenFireworks()
		{
		}
	}
	[Token(Token = "0x2000593")]
	public class EndscreenModifierController : MonoBehaviour
	{
		[Token(Token = "0x40022D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject container;

		[Token(Token = "0x40022D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private EndscreenModifierEntry entryTemplate;

		[Token(Token = "0x40022D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject noModifiersActive;

		[Token(Token = "0x40022D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<GameConfiguration.Modifier, EndscreenModifierEntry> modifierToEntry;

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xC3C1E4", Offset = "0xC3C1E4", VA = "0xC3C1E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xC3A494", Offset = "0xC3A494", VA = "0xC3A494")]
		public void PopulatePanel(GameConfiguration config, SongStatistic stat, bool forceActive)
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xC3C98C", Offset = "0xC3C98C", VA = "0xC3C98C")]
		public EndscreenModifierController()
		{
		}
	}
	[Token(Token = "0x2000594")]
	public class BlackPlane : MonoBehaviour
	{
		[Token(Token = "0x40022D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Renderer meshRenderer;

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xC3C994", Offset = "0xC3C994", VA = "0xC3C994")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xC3C9B4", Offset = "0xC3C9B4", VA = "0xC3C9B4")]
		public void Show()
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xC3C9D4", Offset = "0xC3C9D4", VA = "0xC3C9D4")]
		public void Hide()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xC3C9F4", Offset = "0xC3C9F4", VA = "0xC3C9F4")]
		public BlackPlane()
		{
		}
	}
	[Token(Token = "0x2000595")]
	public class EnvironmentSetting : MonoBehaviour
	{
		[Token(Token = "0x40022D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float shatterTrailOpacity;

		[Token(Token = "0x40022D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BeautifyProfile beautifyProfile;

		[Token(Token = "0x40022D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] weaponTrails;

		[Token(Token = "0x40022D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject swingIndicator;

		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 scorePos;

		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 statusLeftPos;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 statusRightPos;

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xC3C9FC", Offset = "0xC3C9FC", VA = "0xC3C9FC")]
		public void DoSomeSkyboxVariation()
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0xC3CAB4", Offset = "0xC3CAB4", VA = "0xC3CAB4")]
		public void SetWeaponTrails(bool isActive)
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xC3CB1C", Offset = "0xC3CB1C", VA = "0xC3CB1C")]
		public EnvironmentSetting()
		{
		}
	}
	[Token(Token = "0x2000596")]
	public class FlockingAnimals : MonoBehaviour
	{
		[Token(Token = "0x40022DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject animals;

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xC3CB30", Offset = "0xC3CB30", VA = "0xC3CB30")]
		public void EnableFlockingAnimals()
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xC3CB50", Offset = "0xC3CB50", VA = "0xC3CB50")]
		public void DisableFlockingAnimals()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xC3CB70", Offset = "0xC3CB70", VA = "0xC3CB70")]
		public FlockingAnimals()
		{
		}
	}
	[Token(Token = "0x2000597")]
	public class DesertHighlighter : EnvironmentHighlighter
	{
		[Token(Token = "0x40022DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float SINGLE_FLASH_DURATION;

		[Token(Token = "0x40022DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float FLOW_DURATION;

		[Token(Token = "0x40022E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> runePilars;

		[Token(Token = "0x40022E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color color;

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xC3CB78", Offset = "0xC3CB78", VA = "0xC3CB78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xC3D048", Offset = "0xC3D048", VA = "0xC3D048")]
		private new void Update()
		{
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xC3D050", Offset = "0xC3D050", VA = "0xC3D050", Slot = "5")]
		public override void HighlightFlush()
		{
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xC3D228", Offset = "0xC3D228", VA = "0xC3D228", Slot = "4")]
		public override void HighlightSingle(float strength)
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xC3D62C", Offset = "0xC3D62C", VA = "0xC3D62C")]
		public DesertHighlighter()
		{
		}
	}
	[Token(Token = "0x2000599")]
	public class DesertHighlighterQuest : EnvironmentHighlighter
	{
		[Token(Token = "0x40022E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float SINGLE_FLASH_DURATION;

		[Token(Token = "0x40022E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float FLOW_DURATION;

		[Token(Token = "0x40022E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> runePilars;

		[Token(Token = "0x40022E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<MeshRenderer> runePilarsRenderer;

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color color;

		[Token(Token = "0x40022E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color whiteFullAlpha;

		[Token(Token = "0x40022EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color whiteZeroAlpha;

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0xC3D750", Offset = "0xC3D750", VA = "0xC3D750")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0xC3DC28", Offset = "0xC3DC28", VA = "0xC3DC28")]
		private new void Update()
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0xC3DC30", Offset = "0xC3DC30", VA = "0xC3DC30", Slot = "5")]
		public override void HighlightFlush()
		{
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0xC3DE08", Offset = "0xC3DE08", VA = "0xC3DE08", Slot = "4")]
		public override void HighlightSingle(float strength)
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0xC3E1FC", Offset = "0xC3E1FC", VA = "0xC3E1FC")]
		public DesertHighlighterQuest()
		{
		}
	}
	[Token(Token = "0x200059A")]
	public class SpaceHighlighter : EnvironmentHighlighter
	{
		[Token(Token = "0x40022EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineRenderer lineRendererTemplate;

		[Token(Token = "0x40022EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x40022ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject> satellites;

		[Token(Token = "0x40022EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool highlightingIsActive;

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0xC3E324", Offset = "0xC3E324", VA = "0xC3E324")]
		public void Start()
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0xC3EA8C", Offset = "0xC3EA8C", VA = "0xC3EA8C", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0xC3EC24", Offset = "0xC3EC24", VA = "0xC3EC24", Slot = "4")]
		public override void HighlightSingle(float strength)
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0xC3EF94", Offset = "0xC3EF94", VA = "0xC3EF94", Slot = "5")]
		public override void HighlightFlush()
		{
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xC3F424", Offset = "0xC3F424", VA = "0xC3F424")]
		public SpaceHighlighter()
		{
		}
	}
	[Token(Token = "0x200059C")]
	public class SpaceHighlighter2 : EnvironmentHighlighter
	{
		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LightningBoltPrefabScript lbs;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<LightningBoltPrefabScript> lightnings;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject> satellites;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool highlightingIsActive;

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0xC3F600", Offset = "0xC3F600", VA = "0xC3F600")]
		public void Start()
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xC3FDAC", Offset = "0xC3FDAC", VA = "0xC3FDAC", Slot = "4")]
		public override void HighlightSingle(float strength)
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xC40038", Offset = "0xC40038", VA = "0xC40038", Slot = "5")]
		public override void HighlightFlush()
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xC4029C", Offset = "0xC4029C", VA = "0xC4029C")]
		public SpaceHighlighter2()
		{
		}
	}
	[Token(Token = "0x200059F")]
	public class MedievalWater : MonoBehaviour
	{
		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject highQualityWater;

		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject lowQualityWater;

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0xC40444", Offset = "0xC40444", VA = "0xC40444")]
		public void EnableHighQualityWater()
		{
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0xC4047C", Offset = "0xC4047C", VA = "0xC4047C")]
		public void EnableLowQualityWater()
		{
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0xC404B4", Offset = "0xC404B4", VA = "0xC404B4")]
		public void DisableWater()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0xC404EC", Offset = "0xC404EC", VA = "0xC404EC")]
		public MedievalWater()
		{
		}
	}
	[Token(Token = "0x20005A0")]
	public class RedFlashPlane : MonoBehaviour
	{
		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0xC404F4", Offset = "0xC404F4", VA = "0xC404F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xC4054C", Offset = "0xC4054C", VA = "0xC4054C")]
		public void Flash()
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0xC405A0", Offset = "0xC405A0", VA = "0xC405A0")]
		public RedFlashPlane()
		{
		}
	}
	[Token(Token = "0x20005A1")]
	public class SceneStartupChecker : MonoBehaviour
	{
		[Token(Token = "0x6001F99")]
		[Address(RVA = "0xC405A8", Offset = "0xC405A8", VA = "0xC405A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xC4062C", Offset = "0xC4062C", VA = "0xC4062C")]
		public SceneStartupChecker()
		{
		}
	}
	[Token(Token = "0x20005A2")]
	public class SoundConfiguration : MonoBehaviour
	{
		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip hitSpeedTooSlow;

		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip getReady;

		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip getReadyFemale;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip hitHarder;

		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip hitHarderFemale;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip flawlessVictory;

		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip flawlessVictoryFemale;

		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip flawlessVictoryJingle;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip activateEndScreen;

		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip newHighscore;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip newHighscoreFemale;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioClip fistCracksBall;

		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioClip fistDestroysBall;

		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioClip fistCracksHardBall;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioClip hammerCracksBall;

		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioClip hammerDestroysBall;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioClip hammerCracksHardBall;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioClip hammerDestroysHardBall;

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioClip shieldMeetsBall;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioClip shieldMeetsHardBall;

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioClip shieldMeetsBallObstacle;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioClip shieldUnfold;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioClip shieldFoldIn;

		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioClip powerFistDestructionSound;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioClip powerFistChargedLoop;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioClip powerFistRelease;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioClip powerFistFullyCharged;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioClip powerFistFullyChargedFemale;

		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioClip streamLoop;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioClip wallApproaches;

		[Token(Token = "0x400231A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip wallPassesLoop;

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioClip wallLeaves;

		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public List<AudioClip> damageSounds;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public List<AudioClip> damageSoundsFemale;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioClip[] combos;

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public AudioClip[] combosFemale;

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0xC40634", Offset = "0xC40634", VA = "0xC40634")]
		public void SetHitAudio(AudioClip selectedAudioClip)
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0xC406C4", Offset = "0xC406C4", VA = "0xC406C4")]
		public SoundConfiguration()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	public class EnvironmentAdjustor : MonoBehaviour
	{
		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private EnvironmentListManager listManager;

		[Token(Token = "0x4002322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image theBigPicture;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI envDescription;

		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LoadSkyboxDialog skyboxDialog;

		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MenuSelectButton editButton;

		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MenuSelectButton deleteButton;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private PurchaseInfo purchaseInfo;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private EnvironmentManager envManager;

		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameEnvironment selectedEnv;

		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameConfiguration config;

		[Token(Token = "0x1400002D")]
		public event Action<GameEnvironment> EnvChanged
		{
			[Token(Token = "0x6001F9D")]
			[Address(RVA = "0xC406CC", Offset = "0xC406CC", VA = "0xC406CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001F9E")]
			[Address(RVA = "0xC4077C", Offset = "0xC4077C", VA = "0xC4077C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0xC4082C", Offset = "0xC4082C", VA = "0xC4082C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0xC40BE0", Offset = "0xC40BE0", VA = "0xC40BE0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0xC40C60", Offset = "0xC40C60", VA = "0xC40C60")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0xC40CF4", Offset = "0xC40CF4", VA = "0xC40CF4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0xC40D74", Offset = "0xC40D74", VA = "0xC40D74")]
		private void PurchaseInfo_cancelClicked()
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0xC40E00", Offset = "0xC40E00", VA = "0xC40E00")]
		private void PurchaseInfo_purchaseFinished(bool wasInFactPurchased)
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xC40E84", Offset = "0xC40E84", VA = "0xC40E84")]
		private void DeleteButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0xC40FA8", Offset = "0xC40FA8", VA = "0xC40FA8")]
		public void HideDialoguesInitially()
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xC4101C", Offset = "0xC4101C", VA = "0xC4101C")]
		private void EditButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0xC40B84", Offset = "0xC40B84", VA = "0xC40B84")]
		private void SetEditButtons(bool v)
		{
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0xC411F4", Offset = "0xC411F4", VA = "0xC411F4")]
		private void SkyboxDialog_DialogClosed(bool okPressed)
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0xC40D9C", Offset = "0xC40D9C", VA = "0xC40D9C")]
		private void SelectPreviouslySelectedElement()
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0xC41578", Offset = "0xC41578", VA = "0xC41578")]
		private void ListManager_EnvClicked(GameEnvironment env)
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0xC416BC", Offset = "0xC416BC", VA = "0xC416BC")]
		internal void SetEnvironment(GameEnvironment selectedEnvironment)
		{
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0xC41468", Offset = "0xC41468", VA = "0xC41468")]
		internal int GetEnvironmentIndex(GameEnvironment obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0xC41754", Offset = "0xC41754", VA = "0xC41754")]
		internal GameEnvironment GetEnvironmentByIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0xC417CC", Offset = "0xC417CC", VA = "0xC417CC")]
		internal void SetGameConfiguration(GameConfiguration config)
		{
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0xC40C64", Offset = "0xC40C64", VA = "0xC40C64")]
		private void UpdateEnvText()
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0xC417D4", Offset = "0xC417D4", VA = "0xC417D4")]
		public EnvironmentAdjustor()
		{
		}
	}
	[Token(Token = "0x20005A4")]
	public class EnvironmentManager : MonoBehaviour
	{
		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Sprite envImg_Space;

		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite envImg_Desert;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite envImg_Medieval;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Sprite envImg_Sky;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sprite envImg_Add;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string ENVIRONMENTS_DIR;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string ENVIRONMENTS_FILE_NAME;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string environmentsDir;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string environmentFile;

		[Token(Token = "0x17000481")]
		public List<GameEnvironment> Environments
		{
			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0xC418D8", Offset = "0xC418D8", VA = "0xC418D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xC418E0", Offset = "0xC418E0", VA = "0xC418E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0xC418E8", Offset = "0xC418E8", VA = "0xC418E8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0xC41878", Offset = "0xC41878", VA = "0xC41878")]
		internal void DeleteEnvironment(GameEnvironment toDelete)
		{
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0xC414C8", Offset = "0xC414C8", VA = "0xC414C8")]
		internal void UpdateEnvironment(GameEnvironment env, string path, Sprite previewImage, float rotation, Vector3 sunRotation)
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0xC41330", Offset = "0xC41330", VA = "0xC41330")]
		internal GameEnvironment AddEnvironment(string path, Sprite previewImage, float rotation, Vector3 sunRotation)
		{
			return null;
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0xC422DC", Offset = "0xC422DC", VA = "0xC422DC")]
		private void SaveThumbnail(Sprite previewImage, string name)
		{
		}

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0xC41EB4", Offset = "0xC41EB4", VA = "0xC41EB4")]
		private void Load()
		{
		}

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0xC42514", Offset = "0xC42514", VA = "0xC42514")]
		private IEnumerator TryLoadPreviewImage(GameEnvironment env)
		{
			return null;
		}

		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0xC420A8", Offset = "0xC420A8", VA = "0xC420A8")]
		public void Save()
		{
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0xC42720", Offset = "0xC42720", VA = "0xC42720")]
		public EnvironmentManager()
		{
		}
	}
	[Token(Token = "0x20005A6")]
	public class GameEnvironment
	{
		[Token(Token = "0x17000484")]
		public GameConfiguration.GameEnvironmentID EnvID
		{
			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0xC42D94", Offset = "0xC42D94", VA = "0xC42D94")]
			[CompilerGenerated]
			get
			{
				return default(GameConfiguration.GameEnvironmentID);
			}
			[Token(Token = "0x6001FC7")]
			[Address(RVA = "0xC42D9C", Offset = "0xC42D9C", VA = "0xC42D9C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000485")]
		public bool IsBuiltIn
		{
			[Token(Token = "0x6001FC8")]
			[Address(RVA = "0xC42DA4", Offset = "0xC42DA4", VA = "0xC42DA4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FC9")]
			[Address(RVA = "0xC42DAC", Offset = "0xC42DAC", VA = "0xC42DAC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000486")]
		public bool IsNew
		{
			[Token(Token = "0x6001FCA")]
			[Address(RVA = "0xC42DB8", Offset = "0xC42DB8", VA = "0xC42DB8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FCB")]
			[Address(RVA = "0xC42DC0", Offset = "0xC42DC0", VA = "0xC42DC0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000487")]
		public bool IsError
		{
			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0xC42DCC", Offset = "0xC42DCC", VA = "0xC42DCC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FCD")]
			[Address(RVA = "0xC42DD4", Offset = "0xC42DD4", VA = "0xC42DD4")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000488")]
		public string Name
		{
			[Token(Token = "0x6001FCE")]
			[Address(RVA = "0xC42DE0", Offset = "0xC42DE0", VA = "0xC42DE0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FCF")]
			[Address(RVA = "0xC42DE8", Offset = "0xC42DE8", VA = "0xC42DE8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000489")]
		public string FilePath
		{
			[Token(Token = "0x6001FD0")]
			[Address(RVA = "0xC42DF0", Offset = "0xC42DF0", VA = "0xC42DF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FD1")]
			[Address(RVA = "0xC42DF8", Offset = "0xC42DF8", VA = "0xC42DF8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700048A")]
		public Sprite PreviewImage
		{
			[Token(Token = "0x6001FD2")]
			[Address(RVA = "0xC42E00", Offset = "0xC42E00", VA = "0xC42E00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0xC42E08", Offset = "0xC42E08", VA = "0xC42E08")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700048B")]
		public float Rotation
		{
			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0xC42E10", Offset = "0xC42E10", VA = "0xC42E10")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FD5")]
			[Address(RVA = "0xC42E18", Offset = "0xC42E18", VA = "0xC42E18")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700048C")]
		public Vector3 SunRotation
		{
			[Token(Token = "0x6001FD6")]
			[Address(RVA = "0xC42E20", Offset = "0xC42E20", VA = "0xC42E20")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001FD7")]
			[Address(RVA = "0xC42E2C", Offset = "0xC42E2C", VA = "0xC42E2C")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xC42384", Offset = "0xC42384", VA = "0xC42384")]
		public static GameEnvironment LoadFromJSON(JSONObject serializedPlaylist)
		{
			return null;
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xC425CC", Offset = "0xC425CC", VA = "0xC425CC")]
		internal JSONObject SaveToJSON()
		{
			return null;
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xC42E38", Offset = "0xC42E38", VA = "0xC42E38")]
		internal bool CheckFileExistence()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xC42E74", Offset = "0xC42E74", VA = "0xC42E74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xC41E4C", Offset = "0xC41E4C", VA = "0xC41E4C")]
		public GameEnvironment()
		{
		}
	}
	[Token(Token = "0x20005A7")]
	public class LoadSkyboxDialog : MonoBehaviour
	{
		[Token(Token = "0x20005A8")]
		public enum Mode
		{
			[Token(Token = "0x4002368")]
			NEW,
			[Token(Token = "0x4002369")]
			EDIT
		}

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject configureDialog;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject fileOpenDialog;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI filenameText;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton config_okButton;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton config_cancelButton;

		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MenuSelectButton config_browseInternalButton;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MenuSelectButton config_browseFromFileButton;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MenuSelectButton file_okButton;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MenuSelectButton file_cancelButton;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MenuSelectButton infoButton;

		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private SkyboxFileListManager fileListManager;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private SkyboxInternalListManager internalListManager;

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader cubemapShader;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Shader panoramicShader;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private SliderAdjustor rotationSlider;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Camera previewCamera;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private SunPositionAndRotationAdjuster sunAdjuster;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject[] toDisable;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private GameObject[] toEnable;

		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Mode currentMode;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameConfiguration gameConfig;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ShuttleEngine shuttle;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private SkyboxLoader loader;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private string pathFromLastLoad;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material materialFromLastLoad;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material originalSkyboxMaterial;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3 originalSunPosition;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private MenuEnvironment environmentToDisable;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private TheSunAndOnly relevantSun;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private string selectedFullPath;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float selectedRotation;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 selectedSunRotation;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Sprite previewImage;

		[Token(Token = "0x1400002E")]
		public event Action<bool> DialogClosed
		{
			[Token(Token = "0x6001FDD")]
			[Address(RVA = "0xC40AD4", Offset = "0xC40AD4", VA = "0xC40AD4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001FDE")]
			[Address(RVA = "0xC432E0", Offset = "0xC432E0", VA = "0xC432E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xC43390", Offset = "0xC43390", VA = "0xC43390")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xC40FE4", Offset = "0xC40FE4", VA = "0xC40FE4")]
		public void HideDialoguesInitially()
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xC40E5C", Offset = "0xC40E5C", VA = "0xC40E5C")]
		internal void Open(GameConfiguration gc)
		{
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xC41054", Offset = "0xC41054", VA = "0xC41054")]
		internal void Open(Mode mode, GameConfiguration gc, string fullPath, float rotation, Vector3 sunRotation)
		{
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xC439F8", Offset = "0xC439F8", VA = "0xC439F8")]
		private void Config_OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xC43AEC", Offset = "0xC43AEC", VA = "0xC43AEC")]
		private void Config_CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xC43B1C", Offset = "0xC43B1C", VA = "0xC43B1C")]
		private void Config_BrowseInternalButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xC43C44", Offset = "0xC43C44", VA = "0xC43C44")]
		private void Config_BrowseFileButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xC43E50", Offset = "0xC43E50", VA = "0xC43E50")]
		private void File_NavigationHappened(string dir)
		{
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xC43F78", Offset = "0xC43F78", VA = "0xC43F78")]
		private void File_FileClicked(int index, string fullPath)
		{
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xC44024", Offset = "0xC44024", VA = "0xC44024")]
		private void InternalListManager_SkyboxSelected(SkyboxInternalListManager.InternalSkybox internalSkybox)
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xC44098", Offset = "0xC44098", VA = "0xC44098")]
		private void File_OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xC44110", Offset = "0xC44110", VA = "0xC44110")]
		private void File_CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xC4430C", Offset = "0xC4430C", VA = "0xC4430C")]
		private void RotationSlider_OnValueChanged(float value)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0xC443B4", Offset = "0xC443B4", VA = "0xC443B4")]
		private void RotationAdjuster_OnScroll(bool left, bool fast)
		{
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0xC444C0", Offset = "0xC444C0", VA = "0xC444C0")]
		private void InfoButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0xC43AB0", Offset = "0xC43AB0", VA = "0xC43AB0")]
		private void CloseDialog()
		{
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0xC44160", Offset = "0xC44160", VA = "0xC44160")]
		private void ResetToOriginalEnvironment()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0xC43968", Offset = "0xC43968", VA = "0xC43968")]
		private IEnumerator LoadAndShowSkyBox(string fullPath)
		{
			return null;
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xC44504", Offset = "0xC44504", VA = "0xC44504")]
		internal string GetFilePath()
		{
			return null;
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0xC4450C", Offset = "0xC4450C", VA = "0xC4450C")]
		internal float GetRotation()
		{
			return default(float);
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0xC44514", Offset = "0xC44514", VA = "0xC44514")]
		internal Vector3 GetSunRotation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xC41320", Offset = "0xC41320", VA = "0xC41320")]
		internal bool IsNewMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0xC44524", Offset = "0xC44524", VA = "0xC44524")]
		internal Sprite GetPreviewImage()
		{
			return null;
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xC4452C", Offset = "0xC4452C", VA = "0xC4452C")]
		public LoadSkyboxDialog()
		{
		}
	}
	[Token(Token = "0x20005AB")]
	public class SunPositionAndRotationAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float xOffset;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly float yOffset;

		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly float STEP_SIZE;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float SCROLLING_DELAY;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly int FAST_SCROLLING_MULTIPLIER;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TheSunAndOnly sun;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Controller[] controllers;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updatePosition;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Controller activeController;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Controller leftController;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Controller rightController;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float scrollTime;

		[Token(Token = "0x400237D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LaserPointer pointer;

		[Token(Token = "0x1400002F")]
		public event Action<bool, bool> OnScroll
		{
			[Token(Token = "0x6002001")]
			[Address(RVA = "0xC57E4C", Offset = "0xC57E4C", VA = "0xC57E4C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002002")]
			[Address(RVA = "0xC57EFC", Offset = "0xC57EFC", VA = "0xC57EFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xC57FAC", Offset = "0xC57FAC", VA = "0xC57FAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xC58050", Offset = "0xC58050", VA = "0xC58050")]
		public void Initialize(TheSunAndOnly sun)
		{
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xC58058", Offset = "0xC58058", VA = "0xC58058")]
		public void SetEnabled(bool shouldEnable)
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0xC581E8", Offset = "0xC581E8", VA = "0xC581E8")]
		private void Controller_takeInteractButtonChanged(Controller sender, bool isPressed)
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xC58234", Offset = "0xC58234", VA = "0xC58234")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xC5823C", Offset = "0xC5823C", VA = "0xC5823C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xC58244", Offset = "0xC58244", VA = "0xC58244")]
		private void Update()
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0xC584F0", Offset = "0xC584F0", VA = "0xC584F0")]
		public SunPositionAndRotationAdjuster()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	public class GameConfiguration
	{
		[Token(Token = "0x20005AD")]
		public enum GameEnvironmentID
		{
			[Token(Token = "0x40023DA")]
			SPACE,
			[Token(Token = "0x40023DB")]
			DESERT,
			[Token(Token = "0x40023DC")]
			MEDIEVAL,
			[Token(Token = "0x40023DD")]
			SKYCITY,
			[Token(Token = "0x40023DE")]
			GENERIC,
			[Token(Token = "0x40023DF")]
			NONE
		}

		[Token(Token = "0x20005AE")]
		public enum GameQuality
		{
			[Token(Token = "0x40023E1")]
			Very_Low,
			[Token(Token = "0x40023E2")]
			Low,
			[Token(Token = "0x40023E3")]
			Medium,
			[Token(Token = "0x40023E4")]
			High,
			[Token(Token = "0x40023E5")]
			Ultra,
			[Token(Token = "0x40023E6")]
			Quest1,
			[Token(Token = "0x40023E7")]
			Quest2
		}

		[Token(Token = "0x20005AF")]
		public enum Gender
		{
			[Token(Token = "0x40023E9")]
			Male,
			[Token(Token = "0x40023EA")]
			Female,
			[Token(Token = "0x40023EB")]
			Diverse
		}

		[Token(Token = "0x20005B0")]
		public enum LaserHand
		{
			[Token(Token = "0x40023ED")]
			LEFT,
			[Token(Token = "0x40023EE")]
			RIGHT
		}

		[Token(Token = "0x20005B1")]
		public enum Settings
		{
			[Token(Token = "0x40023F0")]
			GAMEPLAY,
			[Token(Token = "0x40023F1")]
			VIDEO,
			[Token(Token = "0x40023F2")]
			SOUND,
			[Token(Token = "0x40023F3")]
			PLAYER
		}

		[Token(Token = "0x20005B2")]
		public enum Gameplay
		{
			[Token(Token = "0x40023F5")]
			STYLE,
			[Token(Token = "0x40023F6")]
			MODIFIERS
		}

		[Token(Token = "0x20005B3")]
		public enum Tutorial
		{
			[Token(Token = "0x40023F8")]
			OBJECTS,
			[Token(Token = "0x40023F9")]
			WEAPONS,
			[Token(Token = "0x40023FA")]
			MISC
		}

		[Token(Token = "0x20005B4")]
		public enum SettingsPanelVisibility
		{
			[Token(Token = "0x40023FC")]
			OPTIONS,
			[Token(Token = "0x40023FD")]
			CREDITS,
			[Token(Token = "0x40023FE")]
			OFF,
			[Token(Token = "0x40023FF")]
			GUIDE
		}

		[Token(Token = "0x20005B5")]
		public enum PlayerSize
		{
			[Token(Token = "0x4002401")]
			SMALL,
			[Token(Token = "0x4002402")]
			REGULAR
		}

		[Token(Token = "0x20005B6")]
		public enum OffOn
		{
			[Token(Token = "0x4002404")]
			OFF,
			[Token(Token = "0x4002405")]
			ON
		}

		[Token(Token = "0x20005B7")]
		public enum FlightPaths
		{
			[Token(Token = "0x4002407")]
			STRAIGHT,
			[Token(Token = "0x4002408")]
			CURVED
		}

		[Token(Token = "0x20005B8")]
		public enum ScoreVisualization
		{
			[Token(Token = "0x400240A")]
			MINIMAL,
			[Token(Token = "0x400240B")]
			FULL
		}

		[Token(Token = "0x20005B9")]
		public enum StreamFeedback
		{
			[Token(Token = "0x400240D")]
			MINIMAL,
			[Token(Token = "0x400240E")]
			FULL
		}

		[Token(Token = "0x20005BA")]
		public enum CameraMode
		{
			[Token(Token = "0x4002410")]
			FPV,
			[Token(Token = "0x4002411")]
			AVATAR
		}

		[Token(Token = "0x20005BB")]
		public enum StrengthFormat
		{
			[Token(Token = "0x4002413")]
			METRIC,
			[Token(Token = "0x4002414")]
			IMPERIAL
		}

		[Token(Token = "0x20005BC")]
		public enum Voice
		{
			[Token(Token = "0x4002416")]
			MALE,
			[Token(Token = "0x4002417")]
			FEMALE,
			[Token(Token = "0x4002418")]
			NONE
		}

		[Token(Token = "0x20005BD")]
		public enum ChallengeMode
		{
			[Token(Token = "0x400241A")]
			OFFICIAL_1 = 0,
			[Token(Token = "0x400241B")]
			OFFICIAL_2 = 1,
			[Token(Token = "0x400241C")]
			CUSTOM = -1
		}

		[Token(Token = "0x20005BE")]
		public enum LeaderboardDisplayType
		{
			[Token(Token = "0x400241E")]
			GENERIC,
			[Token(Token = "0x400241F")]
			WEAPONSPECIFIC
		}

		[Token(Token = "0x20005BF")]
		public enum Modifier
		{
			[Token(Token = "0x4002421")]
			No_Horizontal_Walls,
			[Token(Token = "0x4002422")]
			No_Tunnels,
			[Token(Token = "0x4002423")]
			No_Vertical_Walls,
			[Token(Token = "0x4002424")]
			No_BadBalls,
			[Token(Token = "0x4002425")]
			NormalBalls_Only,
			[Token(Token = "0x4002426")]
			PowerBalls_Only,
			[Token(Token = "0x4002427")]
			SuperSpeed,
			[Token(Token = "0x4002428")]
			Smaller_Balls,
			[Token(Token = "0x4002429")]
			No_Streams,
			[Token(Token = "0x400242A")]
			No_Double_Balls
		}

		[Token(Token = "0x400237E")]
		private const float KG_TO_POUNDS = 0.45359236f;

		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int MAX_EXPERIENCE;

		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string[] SCENE_NAMES;

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Dictionary<Modifier, float> MODIFIER_TO_SCORE_MULTIPLICATION;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Dictionary<Modifier, string> MODIFIER_TO_ENGLISH_TEXT;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal GameEnvironment selectedEnvironment;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal WeaponType selectedWeaponType;

		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal Song.Difficulty selectedDifficulty;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ChallengeMode selectedChallengeMode;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int[] selectedSongIndexOfficial;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int selectedSongIndexCustom;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Song selectedSong;

		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool isTestRun;

		[Token(Token = "0x400238B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool isTutorial;

		[Token(Token = "0x400238C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float sizes_height;

		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ScoreVisualization scoreVisualization;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal StreamFeedback streamFeedback;

		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal bool hasComboHighlighting;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal OffOn spectatorCamera;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal OffOn bloom;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal CameraMode cameraMode;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal GameQuality gameQuality;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal Settings settings;

		[Token(Token = "0x4002395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Gameplay gameplay;

		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal Tutorial tutorial;

		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal Dictionary<Modifier, OffOn> modifiers;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal OffOn gameHints;

		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal FlightPaths flightPaths;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal OffOn playspaceWarning;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal OffOn showBounds;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal OffOn playMusicOnReturn;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal OffOn leaderBoardPanel;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal OffOn playlistsPanel;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal LeaderboardDisplayType leaderBoardPanelDisplayType;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal OffOn beautify;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal OffOn trackCalories;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal OffOn trackHeartrate;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal HRMPlatform hrmPlatform;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal Gender gender;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal LaserHand laserHand;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal SettingsPanelVisibility settingsPanelVisibility;

		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		internal OffOn strengthMeter;

		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal StrengthFormat strengthFormat;

		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		internal OffOn playlistButtonPulse;

		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float musicVolume;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float sfxVolume;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int selectedHitSound;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		internal Voice selectedVoice;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int numberOfStarts;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int fileBrowserUsages;

		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal OffOn fileBrowserTutorial;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public int playlistsUsages;

		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal OffOn playlistsTutorial;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public int modifiersUsages;

		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal OffOn modifiersTutorial;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public int optionsUsages;

		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal OffOn optionsTutorial;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int returnsFromSongOverall;

		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int returnsFromSongSinceLastHighlightedFeature;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float previousExperienceSliderValue;

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float previousHammerSliderValue;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float previousShieldSliderValue;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float previousPowerfistSliderValue;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float experienceLevel;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float age;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float dailyCalories;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float kilograms;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string dateLastSession;

		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public int gameStartCount;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float todaysCalories;

		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float caloriesSinceReset;

		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float totalCalories;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float playTimeInSecondsToday;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float playTimeInSecondsSinceReset;

		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float playTimeInSecondsTotal;

		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public int squatsToday;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public int squatsSinceReset;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public int squatsTotal;

		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float playspaceWarningTreshold;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public string songFileDir;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string skyboxFileDir;

		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Playlist playlistToPlay;

		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public int playlistIndex;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public SerializableVector3 palettePosition;

		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public SerializableVector3 paletteEulerAngles;

		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Dictionary<string, int> songFileListPages;

		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Dictionary<string, int> skyboxFileListPages;

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public GeneratorSwitch.Version generatorVersion;

		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GeneratorUserSettings generatorBeginnerSettings;

		[Token(Token = "0x40023D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public GeneratorUserSettings generatorAdvancedSettings;

		[Token(Token = "0x40023D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public GeneratorUserSettings generatorExpertSettings;

		[Token(Token = "0x1700048F")]
		public int pounds
		{
			[Token(Token = "0x600200D")]
			[Address(RVA = "0xC585FC", Offset = "0xC585FC", VA = "0xC585FC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0xC58568", Offset = "0xC58568", VA = "0xC58568")]
		public static string GetModifierLocalizationKey(Modifier modifier)
		{
			return null;
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0xC58628", Offset = "0xC58628", VA = "0xC58628")]
		public static string GetEnvironmentSceneName(GameEnvironmentID environmentToUse)
		{
			return null;
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0xC586A4", Offset = "0xC586A4", VA = "0xC586A4")]
		public GameConfiguration()
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0xC58E00", Offset = "0xC58E00", VA = "0xC58E00")]
		public GeneratorUserSettings GetCurrentGeneratorSettings()
		{
			return null;
		}

		[Token(Token = "0x6002011")]
		[Address(RVA = "0xC58E2C", Offset = "0xC58E2C", VA = "0xC58E2C")]
		public void SetCurrentGeneratorSettings(GeneratorUserSettings setting)
		{
		}
	}
	[Token(Token = "0x20005C0")]
	public class GameManager : MonoBehaviour
	{
		[Token(Token = "0x20005C1")]
		private enum HitLevel
		{
			[Token(Token = "0x4002517")]
			TOOLOW,
			[Token(Token = "0x4002518")]
			MINIMUMIMPACT,
			[Token(Token = "0x4002519")]
			FULLIMPACT
		}

		[Token(Token = "0x20005C2")]
		private struct HitResult
		{
			[Token(Token = "0x400251A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public HitLevel level;

			[Token(Token = "0x400251B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float percentage;

			[Token(Token = "0x600209A")]
			[Address(RVA = "0xC59490", Offset = "0xC59490", VA = "0xC59490")]
			public HitResult(HitLevel level, float percentage)
			{
			}
		}

		[Token(Token = "0x20005C3")]
		public class Combo
		{
			[Token(Token = "0x400251C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int combo;

			[Token(Token = "0x400251D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x400251E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioClip audioToPlay;

			[Token(Token = "0x400251F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool comboReached;

			[Token(Token = "0x600209B")]
			[Address(RVA = "0xC5949C", Offset = "0xC5949C", VA = "0xC5949C")]
			public Combo()
			{
			}
		}

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float STANDARD_POWERFIST_CHARGE_INCREASE_PER_BALL;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int POWERFIST_CHARGE_REDUCTION_ADVANCED;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int POWERFIST_CHARGE_REDUCTION_EXPERT;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int SCORE_NORMAL_BALL_SEMI;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int SCORE_NORMAL_BALL_COMPLETE;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int SCORE_HARD_BALL_SEMI;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int SCORE_HARD_BALL_COMPLETE;

		[Token(Token = "0x4002432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int SCORE_STREAM_PER_BEAT;

		[Token(Token = "0x4002433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int SCORE_STREAM_PER_CYCLE;

		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int SCORE_OBSTACLE_BALL_BLOCK;

		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int MINUS_OBSTACLE_BALL;

		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int MINUS_OBSTACLE_WALL;

		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly float SCORE_MULTIPLIER_PER_HITSPEEDDELTA;

		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static readonly int COMBO_PLUS_PER_HIT;

		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly int MIN_COMBO_FOR_CREDIT;

		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly float HIT_SPEED_SQUARED_BEGINNER_MINIMUM;

		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly float HIT_SPEED_SQUARED_ADVANCED_MINIMUM;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static readonly float HIT_SPEED_SQUARED_EXPERT_LOWER;

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly float HIT_SPEED_SQUARED_EXPERT_UPPER;

		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static readonly float MAX_TIME_DELTA_DESTROY_EFFECT;

		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly Vector3 SMALLER_BALLS_SCALE;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private static readonly float ACTIVITY_BONUS_MULTIPLIER;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly int COUNTDOWN_START_VALUE;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private static readonly float COUNTDOWN_TEXT_SIZE;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly int BALL_FLIGHT_DURATION_DEFAULT;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string TIME_FORMAT;

		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly bool DEBUG_ALLOW_POWERFIST_DEPLOYMENT;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private static HitResult HL_FULLIMPACT;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private static HitResult HL_TOOLOW;

		[Token(Token = "0x400244D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioSource beep;

		[Token(Token = "0x400244E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioSource beepLong;

		[Token(Token = "0x400244F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject comboNotifierTextPrefab;

		[Token(Token = "0x4002450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject hintTextPrefab;

		[Token(Token = "0x4002451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ParticleSystem destroyParticleEffectOnGround;

		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ScoreComboPanel scoreComboPanel;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TMP_Text scoreText;

		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TMP_Text comboText;

		[Token(Token = "0x4002455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public StatusPositioner statusPositioner;

		[Token(Token = "0x4002456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject timePanel;

		[Token(Token = "0x4002457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TMP_Text timeMinutesText;

		[Token(Token = "0x4002458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private GameObject infosLeftPanel;

		[Token(Token = "0x4002459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject caloriesTrackerPanel;

		[Token(Token = "0x400245A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TextBasedLocalizedString caloriesTrackerText;

		[Token(Token = "0x400245B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private TextMeshProUGUI squatsText;

		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private GameObject heartRatePanel;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private TextBasedLocalizedString heartRateText;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private GameObject canvasParent;

		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private PauseMenu pauseMenu;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private EndScreenDisplay endMenu;

		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private LaserPointer laserPointer;

		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private RuntimeAnimatorController menuHandAnimationControllerLeft;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private RuntimeAnimatorController menuHandAnimationControllerRight;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GameObject playlistIndex;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private TMP_Text playlistIndexText;

		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Slider playlistDurationSlider;

		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private TMP_Text playlistDurationText;

		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private TMP_Text playlistPlayedTimeText;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private TextBasedLocalizedString playlistNextSongText;

		[Token(Token = "0x400246A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private GameObject perfectHitScorePrefab;

		[Token(Token = "0x400246B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private GameObject failTextPrefab;

		[Token(Token = "0x400246C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private GameObject scoringTextPrefab;

		[Token(Token = "0x400246D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private GameObject comboScoreTextPrefab;

		[Token(Token = "0x400246E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private FlyPaths flyPaths;

		[Token(Token = "0x400246F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private AudioSource audioSourceForEffects;

		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private AudioSource audioSourceForVoices;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private AudioSource audioSourceForVoiceOvers;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private AudioSource audioSourceForPowerFistLoop;

		[Token(Token = "0x4002473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private AudioSource audioSourceForInStreamLoop;

		[Token(Token = "0x4002474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private AudioSource audioSourceForWallLoop;

		[Token(Token = "0x4002475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private AudioSource audioSourceForMusic;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private GameObject scoreIndicator;

		[Token(Token = "0x4002477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private GameObject pauseMenuHint;

		[Token(Token = "0x4002478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private AudioClip cameraShutter;

		[Token(Token = "0x4002479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private StrengthMeter strengthMeter;

		[Token(Token = "0x400247A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private Shader cubemapShader;

		[Token(Token = "0x400247B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private Shader panoramicShader;

		[Token(Token = "0x400247C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private TutorialUIManager tutorialUIManager;

		[Token(Token = "0x400247D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private GameObject swingIndicator;

		[Token(Token = "0x400247E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private FrameworkManager fm;

		[Token(Token = "0x400247F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private int ballFlightDurationInBeats;

		[Token(Token = "0x4002480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 scoreIndicatorPos;

		[Token(Token = "0x4002481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private PlayspaceBoundaries playspaceBoundary;

		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Material boundaryMaterial;

		[Token(Token = "0x4002483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Color boundariesPositivColor;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Color boundariesNegativeColor;

		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private GameObject hittableNormal;

		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private GameObject hittableSteel;

		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private FakeHead fakeHead;

		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Stream stream;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private StreamElement streamElement;

		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private StreamCollectionSparks streamSparksLeft;

		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private StreamCollectionSparks streamSparksRight;

		[Token(Token = "0x400248C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private GameObject obstacleBall;

		[Token(Token = "0x400248D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private GameObject[] obstacleWall;

		[Token(Token = "0x400248E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PowerFistCharger powerFistCharger;

		[Token(Token = "0x400248F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private EnvironmentHighlighter highlighter;

		[Token(Token = "0x4002490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private bool hasComboHighlighting;

		[Token(Token = "0x4002491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private Dictionary<WeaponType, Dictionary<LLManager.HandSide, CollidableHandObject>> weapons;

		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private SoundConfiguration soundConfiguration;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private Vector3 initialComboTextScale;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private Vector3 initialScoreTextScale;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int combo;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private int comboLevel;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int currentFullBeat;

		[Token(Token = "0x4002498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private int lastFullBeat;

		[Token(Token = "0x4002499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int lastFullBeatForAreaBaseElements;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int countDownTimer;

		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private PlaylistPlaybackManager playbackManager;

		[Token(Token = "0x400249C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private float playlistPlayedTime;

		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private int playedRounds;

		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Song currentSong;

		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Song.Difficulty currentDifficulty;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private Controller leftController;

		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private Controller rightController;

		[Token(Token = "0x40024A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private Dictionary<LLManager.HandSide, CollidableHandObject> attachedHandObjects;

		[Token(Token = "0x40024A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private RedFlashPlane[] redFlashPlanes;

		[Token(Token = "0x40024A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private int damageSoundIndex;

		[Token(Token = "0x40024A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private float timeLeft;

		[Token(Token = "0x40024A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private OverallStatistic overallStat;

		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private SongStatistic songStat;

		[Token(Token = "0x40024A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private List<SongStatistic> songStatList;

		[Token(Token = "0x40024A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private int songNumber;

		[Token(Token = "0x40024AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private float currentlyShownScore;

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float songDuration;

		[Token(Token = "0x40024AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private float powerFistChargeLevel;

		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private float powerFistChargeLevelBeforeIncrement;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private float powerFistChargeIncrease;

		[Token(Token = "0x40024AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private int contactBounceCount;

		[Token(Token = "0x40024B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private bool gameHasBeenStarted;

		[Token(Token = "0x40024B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32D")]
		private bool songIsPlaying;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private HashSet<AreaBasedElement> areasInProgress;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private bool isPaused;

		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x339")]
		private bool isPausedDuringEndscreen;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33A")]
		private bool isEndScreen;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Combo[] combos;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private List<WeaponStartInfo> weaponStartInfos;

		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private bool weaponStartInfoClosed;

		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x351")]
		private bool countdownStarted;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x352")]
		private bool isFirstStreamAction;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Camera mainCamera;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Camera fpvSpectatorCamera;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private GameConfiguration.Gender userGender;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private int userAge;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private int userWeight;

		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private float timeSinceLastSecondMark;

		[Token(Token = "0x40024C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public Vector3 headsetLastPos;

		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		private Vector3 leftControllerLastPos;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private Vector3 rightControllerLastPos;

		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		private float movementLastSecondInMeters;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private bool showGameHints;

		[Token(Token = "0x40024C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private HRMCon hrmCon;

		[Token(Token = "0x40024C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private GameObject loadingScreen;

		[Token(Token = "0x40024C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private bool fullScoreVisualization;

		[Token(Token = "0x40024C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private float debrisDurationBeginner;

		[Token(Token = "0x40024CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private float debrisDurationAdvanced;

		[Token(Token = "0x40024CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private float debrisDurationExpert;

		[Token(Token = "0x40024CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private float currentDebrisDuration;

		[Token(Token = "0x40024CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private Camera[] allCameras;

		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private StreamCounter streamCounterLeft;

		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private bool streamCountersActive;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private StreamCounter streamCounterRight;

		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private PowerFistChargeDisplay powerfistDisplayLeft;

		[Token(Token = "0x40024D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		private PowerFistChargeDisplay powerfistDisplayRight;

		[Token(Token = "0x40024D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private float lastDestroyTimeAudio;

		[Token(Token = "0x40024D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		private float lastDestroyTimeLeft;

		[Token(Token = "0x40024D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private float lastDestroyTimeRight;

		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private Material shatterParticleMaterial;

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private bool playSpaceWarning;

		[Token(Token = "0x40024D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private List<float> squaredHitSpeedList;

		[Token(Token = "0x40024D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		private int lastBeatIndex;

		[Token(Token = "0x40024DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		private bool challengeCompleted;

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private float challengeDuration;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		private bool curvedFlightPaths;

		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private HandState handStateLeft;

		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private Vector3 handRotationLeft;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private Vector3 handPositionLeft;

		[Token(Token = "0x40024E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private GameObject handSkeletonLeft;

		[Token(Token = "0x40024E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private RuntimeAnimatorController handControllerLeft;

		[Token(Token = "0x40024E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private Animator handAnimatorLeft;

		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private HandState handStateRight;

		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
		private Vector3 handRotationRight;

		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		private Vector3 handPositionRight;

		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private GameObject handSkeletonRight;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private RuntimeAnimatorController handControllerRight;

		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		private Animator handAnimatorRight;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		private SongManager songManager;

		[Token(Token = "0x40024EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		private PlaylistManager playlistManager;

		[Token(Token = "0x40024EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		private bool lastBeatExecuted;

		[Token(Token = "0x40024EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4BC")]
		private float movementOfHeadet;

		[Token(Token = "0x40024ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		private float movementOfLC;

		[Token(Token = "0x40024EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C4")]
		private float movementOfRC;

		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		private bool hasStreamInPlayerArea;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4CC")]
		private float startBeat;

		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		private float endBeat;

		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private ScreenshotMaker screenshotMaker;

		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		private bool toMainMenuPressed;

		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		private Vector2 calculatedScaling;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private BeatSequence scaledLayout;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private Beautify[] beautifyScripts;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		private float averagePlayerHeight;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x504")]
		private float playerHeightSum;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private int heightMeasurements;

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50C")]
		private float heightSamplingInterval;

		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private float highSquatTreshhold;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
		private float lowSquatTreshhold;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		private bool belowLowSquatTreshhold;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x519")]
		private bool aboveHighSquatTreshhold;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private MedievalWater medievalWater;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private FlockingAnimals flockingAnimals;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		private SkyWheel skyWheel;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		private BattleIsland battleIsland;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		private float caloriesPerMark;

		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x544")]
		private bool cancelPlaylistButtonHasBeenPressed;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		private EnvironmentSetting setting;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		private bool isMetric;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x551")]
		private bool strengthMeterIsVible;

		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x552")]
		private bool referenceTimeWasGreaterThanZeroBefore;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x553")]
		private bool songEnded;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x554")]
		private float lastUpdateDSPTime;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		private float deltaTimeSinceLastDSPChange;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		private BeatProvider beatProvider;

		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		private bool isTutorial;

		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		private ParticleSystem destroyParticleEffectOnHittable;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		private ParticleSystem shatterParticleEffectOnHittable;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		private AudioFader audioFader;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private int prevFullBeatSendNumber;

		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private PauseHandler pauseHandler;

		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		private bool gameWasPausedBeforeStart;

		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A4")]
		private float previousVolume;

		[Token(Token = "0x14000030")]
		public event Action<int> NotifyCurrentBeat
		{
			[Token(Token = "0x6002013")]
			[Address(RVA = "0xC4558C", Offset = "0xC4558C", VA = "0xC4558C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002014")]
			[Address(RVA = "0xC4563C", Offset = "0xC4563C", VA = "0xC4563C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event Action DamageInflicted
		{
			[Token(Token = "0x6002015")]
			[Address(RVA = "0xC456EC", Offset = "0xC456EC", VA = "0xC456EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002016")]
			[Address(RVA = "0xC45788", Offset = "0xC45788", VA = "0xC45788")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event Action<bool> BallHit
		{
			[Token(Token = "0x6002017")]
			[Address(RVA = "0xC45824", Offset = "0xC45824", VA = "0xC45824")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002018")]
			[Address(RVA = "0xC458D4", Offset = "0xC458D4", VA = "0xC458D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event Action StreamElementSpawned
		{
			[Token(Token = "0x6002019")]
			[Address(RVA = "0xC45984", Offset = "0xC45984", VA = "0xC45984")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600201A")]
			[Address(RVA = "0xC45A20", Offset = "0xC45A20", VA = "0xC45A20")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000034")]
		public event Action StreamElementMissed
		{
			[Token(Token = "0x600201B")]
			[Address(RVA = "0xC45ABC", Offset = "0xC45ABC", VA = "0xC45ABC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600201C")]
			[Address(RVA = "0xC45B58", Offset = "0xC45B58", VA = "0xC45B58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xC45BF4", Offset = "0xC45BF4", VA = "0xC45BF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xC45EF8", Offset = "0xC45EF8", VA = "0xC45EF8")]
		private void PauseMenu_cancelPressed()
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xC45FA4", Offset = "0xC45FA4", VA = "0xC45FA4")]
		private void CancelSong()
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xC47604", Offset = "0xC47604", VA = "0xC47604")]
		private void PauseMenu_continuePressed()
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xC4760C", Offset = "0xC4760C", VA = "0xC4760C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0xC477BC", Offset = "0xC477BC", VA = "0xC477BC")]
		public IEnumerator DoOneTimeAndSongSpecificSetup(GameConfiguration gameConfig)
		{
			return null;
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0xC4784C", Offset = "0xC4784C", VA = "0xC4784C")]
		public IEnumerator PrepareSong()
		{
			return null;
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0xC478C0", Offset = "0xC478C0", VA = "0xC478C0")]
		public float GetCurrentLayoutBasedSongLength()
		{
			return default(float);
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0xC478E8", Offset = "0xC478E8", VA = "0xC478E8")]
		private float GetMusicBasedBeatAtCurrentTime()
		{
			return default(float);
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0xC47998", Offset = "0xC47998", VA = "0xC47998")]
		private IEnumerator OneTimeSetup(GameConfiguration gameConfig)
		{
			return null;
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0xC47A28", Offset = "0xC47A28", VA = "0xC47A28")]
		private IEnumerator LoadCustomSkyBox(GameEnvironment gc)
		{
			return null;
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0xC47AB8", Offset = "0xC47AB8", VA = "0xC47AB8")]
		private IEnumerator DisplayAllElementsShortly()
		{
			return null;
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0xC47B2C", Offset = "0xC47B2C", VA = "0xC47B2C")]
		private static GameObject InstantiateAndShow(GameObject element, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0xC47C04", Offset = "0xC47C04", VA = "0xC47C04")]
		private void SongSpecificSetup()
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0xC48F9C", Offset = "0xC48F9C", VA = "0xC48F9C")]
		private void RetrieveLastHighscore()
		{
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0xC49180", Offset = "0xC49180", VA = "0xC49180")]
		private void lastHighscoreRetrieved(int score)
		{
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0xC48C74", Offset = "0xC48C74", VA = "0xC48C74")]
		private void SetBallFlightDuration()
		{
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0xC49234", Offset = "0xC49234", VA = "0xC49234")]
		private void HrmCon_HeartRateChanged(int heartRate)
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0xC49274", Offset = "0xC49274", VA = "0xC49274")]
		public IEnumerator ChangeQualitySettings(GameConfiguration.GameQuality quality)
		{
			return null;
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0xC492F8", Offset = "0xC492F8", VA = "0xC492F8")]
		private void SetBloom(GameConfiguration.OffOn bloom)
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0xC493AC", Offset = "0xC493AC", VA = "0xC493AC")]
		private void SetBeautify(GameConfiguration.OffOn beautifySetting)
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xC4942C", Offset = "0xC4942C", VA = "0xC4942C")]
		public void StartGame()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xC4952C", Offset = "0xC4952C", VA = "0xC4952C")]
		private void ReallyStartGame()
		{
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xC49710", Offset = "0xC49710", VA = "0xC49710")]
		private void StartCountDown()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xC49798", Offset = "0xC49798", VA = "0xC49798")]
		private void EndMenu_nextSongClicked()
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xC49948", Offset = "0xC49948", VA = "0xC49948")]
		private void EndMenu_playAgainClicked()
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xC49A54", Offset = "0xC49A54", VA = "0xC49A54")]
		private void EndMenu_overviewClicked()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xC498D4", Offset = "0xC498D4", VA = "0xC498D4")]
		private IEnumerator SetupSongAndStart()
		{
			return null;
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xC49EE4", Offset = "0xC49EE4", VA = "0xC49EE4")]
		private void DoCountDown()
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xC49544", Offset = "0xC49544", VA = "0xC49544")]
		private void StartSong()
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0xC4A6B0", Offset = "0xC4A6B0", VA = "0xC4A6B0")]
		private void ShowPauseMenuHint(bool isActive)
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0xC4A338", Offset = "0xC4A338", VA = "0xC4A338")]
		private void ShowWeaponStartInfo(bool shouldShow)
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0xC4A194", Offset = "0xC4A194", VA = "0xC4A194")]
		private void AnimatePanel(GameObject panel, Vector3 vectorToShift, float timeToShift)
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xC4AAC4", Offset = "0xC4AAC4", VA = "0xC4AAC4")]
		private void SetupCombos()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xC4AF68", Offset = "0xC4AF68", VA = "0xC4AF68")]
		private void InitializeWeaponObjects()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xC4B1A4", Offset = "0xC4B1A4", VA = "0xC4B1A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xC4B63C", Offset = "0xC4B63C", VA = "0xC4B63C")]
		private void SwitchToWeapon(WeaponType weaponType)
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xC4B98C", Offset = "0xC4B98C", VA = "0xC4B98C")]
		private void AppButton_Changed(bool isPressed)
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xC4BF7C", Offset = "0xC4BF7C", VA = "0xC4BF7C")]
		private void UseButtonPressed(Controller controller, bool isPressed)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xC4B9B8", Offset = "0xC4B9B8", VA = "0xC4B9B8")]
		private void EnablePauseMode()
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xC4C248", Offset = "0xC4C248", VA = "0xC4C248")]
		private IEnumerator EnableLaserPointer()
		{
			return null;
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xC462A8", Offset = "0xC462A8", VA = "0xC462A8")]
		private void DisablePauseMode(bool continueSong)
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xC4615C", Offset = "0xC4615C", VA = "0xC4615C")]
		internal void ToMainMenuPressed()
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xC46F0C", Offset = "0xC46F0C", VA = "0xC46F0C")]
		private void ToggleMenuHands(bool shouldActivate)
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xC4C8DC", Offset = "0xC4C8DC", VA = "0xC4C8DC")]
		private void ResetComboOnFinish()
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xC4C9F8", Offset = "0xC4C9F8", VA = "0xC4C9F8")]
		private void FinishChallenge()
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xC4D500", Offset = "0xC4D500", VA = "0xC4D500")]
		private IEnumerator StartSongWithoutBreak()
		{
			return null;
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xC4D574", Offset = "0xC4D574", VA = "0xC4D574")]
		private void Update()
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0xC4EDC0", Offset = "0xC4EDC0", VA = "0xC4EDC0")]
		private void CheckAreaBasedElementsPerBeat()
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xC4DD20", Offset = "0xC4DD20", VA = "0xC4DD20")]
		private void HandleBeat()
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xC4C2BC", Offset = "0xC4C2BC", VA = "0xC4C2BC")]
		private float CalculateInterpolatedBeat(float currentDSPTime)
		{
			return default(float);
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xC4F028", Offset = "0xC4F028", VA = "0xC4F028")]
		private void FireActions(Beat beat, float offsetSeconds)
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xC48D9C", Offset = "0xC48D9C", VA = "0xC48D9C")]
		private void UpdateTimeLeftDisplay(float timeLeft)
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xC49B44", Offset = "0xC49B44", VA = "0xC49B44")]
		private string GetFormattedTimeSpan(float timeSpan)
		{
			return null;
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xC4A98C", Offset = "0xC4A98C", VA = "0xC4A98C")]
		private void StartPlaylistDurationSlider()
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xC4E550", Offset = "0xC4E550", VA = "0xC4E550")]
		private void CheckWallEnter()
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xC4E790", Offset = "0xC4E790", VA = "0xC4E790")]
		private void CheckStreamPerFrame()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xC4F270", Offset = "0xC4F270", VA = "0xC4F270")]
		private void FireHittableAction(HittableAction hittableAction, float offsetSeconds)
		{
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xC51968", Offset = "0xC51968", VA = "0xC51968")]
		private Vector2[] GetCornersForIndicator(Vector3 pos, Vector2 size, float rotation)
		{
			return null;
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xC51DF4", Offset = "0xC51DF4", VA = "0xC51DF4")]
		private Vector2 GetRotatedPoint(Vector2 nonRotatedPoint, Vector2 centerOfRotation, double rotation)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xC51AC4", Offset = "0xC51AC4", VA = "0xC51AC4")]
		public Sequence AddDOTWeenToHittable(GameObject obj, bool isSwing, FlyPath flyPath, float secondsSinceActionShouldHaveBeenSent)
		{
			return null;
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xC51ED8", Offset = "0xC51ED8", VA = "0xC51ED8")]
		private Sequence AddDOTWeenToObstacle(GameObject obj, FlyPath flyPath, float secondsSinceActionShouldHaveBeenSent)
		{
			return null;
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xC50B8C", Offset = "0xC50B8C", VA = "0xC50B8C")]
		private void FireStream(StreamAction ca, float secondsSinceActionShouldHaveBeenSent)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xC52238", Offset = "0xC52238", VA = "0xC52238")]
		private float GetBallDurationInSecondsFromZeroToEnd()
		{
			return default(float);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xC50130", Offset = "0xC50130", VA = "0xC50130")]
		private void FireObstacle(ObstacleAction obstacle, float secondsSinceActionShouldHaveBeenSent)
		{
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xC52300", Offset = "0xC52300", VA = "0xC52300")]
		internal void Contact(MovingElement mv, CollidableObject co, CollidableObjectPart cop)
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xC539B8", Offset = "0xC539B8", VA = "0xC539B8")]
		private HitResult GetHitLevel(float velocity)
		{
			return default(HitResult);
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0xC53B8C", Offset = "0xC53B8C", VA = "0xC53B8C")]
		private void ContactDestroy(DestroyableElement mv, CollidableObject co, int scorePlus, bool isPowerFistTriggeredDestruction, bool isFullDestruction, bool isMaxPossible, Vector3 hitSpeed)
		{
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xC53628", Offset = "0xC53628", VA = "0xC53628")]
		private void ContactBounce(DestroyableElement mv, CollidableObject co, bool hittableDeflected)
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xC4EF84", Offset = "0xC4EF84", VA = "0xC4EF84")]
		private void ContactWithWall(WallObstacle wo, bool basedOnBeat)
		{
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xC544BC", Offset = "0xC544BC", VA = "0xC544BC")]
		internal void ContactWithHittableMissed(MovingElement element)
		{
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xC4C0D4", Offset = "0xC4C0D4", VA = "0xC4C0D4")]
		public void DeployerPowerFist(LLManager.HandSide sidePressed)
		{
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xC4C16C", Offset = "0xC4C16C", VA = "0xC4C16C")]
		public void DeployShield(LLManager.HandSide sidePressed, bool enable)
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0xC544E8", Offset = "0xC544E8", VA = "0xC544E8")]
		private void EnablePowerFistChargedAudioSource(bool isEnabled)
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xC54088", Offset = "0xC54088", VA = "0xC54088")]
		private void IndicateDamageToPlayer()
		{
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xC545B8", Offset = "0xC545B8", VA = "0xC545B8")]
		private void WallApproaches()
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xC545E0", Offset = "0xC545E0", VA = "0xC545E0")]
		private void WallOnPlayer()
		{
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xC5469C", Offset = "0xC5469C", VA = "0xC5469C")]
		private void WallLeaves()
		{
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0xC546F4", Offset = "0xC546F4", VA = "0xC546F4")]
		private void AreaBasedElementHitsEnd(AreaBasedElement abe)
		{
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0xC54794", Offset = "0xC54794", VA = "0xC54794")]
		private void ObstacleHitsEnd(BallObstacle obst)
		{
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0xC521F0", Offset = "0xC521F0", VA = "0xC521F0")]
		private void ShowFirstStreamHint()
		{
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0xC54808", Offset = "0xC54808", VA = "0xC54808")]
		public void ShowHint(string hintTextKey)
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0xC54B10", Offset = "0xC54B10", VA = "0xC54B10")]
		public void PlayTutorialDescription(string textKey, int durationInBeats, int delayInSeconds = 0)
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0xC54B34", Offset = "0xC54B34", VA = "0xC54B34")]
		public IEnumerator ShowDescription(string textKey, int durationInBeats, float delayInSeconds)
		{
			return null;
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0xC54BDC", Offset = "0xC54BDC", VA = "0xC54BDC")]
		public void PlayVoiceOver(string clipKey, float delayInSeconds = 0f)
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0xC54CC0", Offset = "0xC54CC0", VA = "0xC54CC0")]
		public IEnumerator PlayVoiceOver(float delayInSeconds)
		{
			return null;
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0xC54D44", Offset = "0xC54D44", VA = "0xC54D44")]
		public void StopVoiceOvers()
		{
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0xC54D60", Offset = "0xC54D60", VA = "0xC54D60")]
		public void SetLastDestroyTimeForAudio(float destroyTime)
		{
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0xC54008", Offset = "0xC54008", VA = "0xC54008")]
		public bool CheckLastDestroyTimeForAudio()
		{
			return default(bool);
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0xC54D68", Offset = "0xC54D68", VA = "0xC54D68")]
		public void SetLastDestroyTimeForEffect(float destroyTime, bool isLeftController)
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0xC54D7C", Offset = "0xC54D7C", VA = "0xC54D7C")]
		public bool CheckLastDestroyTimeForEffect(bool isLeftController)
		{
			return default(bool);
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0xC5422C", Offset = "0xC5422C", VA = "0xC5422C")]
		public void PlayDestroyParticleEffect(DestroyableElement mv, bool isLeftController, Vector3 controllerSpeedVector)
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0xC54E18", Offset = "0xC54E18", VA = "0xC54E18")]
		internal IEnumerator KillParticleEffectOnHittable(float timeToKill, ParticleSystem destroyEffect)
		{
			return null;
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0xC54E9C", Offset = "0xC54E9C", VA = "0xC54E9C")]
		public void ShatterBall(DestroyableElement mv, Vector3 controllerSpeedVector)
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0xC55590", Offset = "0xC55590", VA = "0xC55590")]
		internal IEnumerator KillShatterEffectOnHittable(float timeToKill, ParticleSystem shatterEffect)
		{
			return null;
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0xC51308", Offset = "0xC51308", VA = "0xC51308")]
		private void UpdateScoreAndNotify(int scoreDelta, bool countsForCombo, bool isFromCombo, bool isMaxHitPossible, Vector3 objectOfScorePos)
		{
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0xC4C8E0", Offset = "0xC4C8E0", VA = "0xC4C8E0")]
		private void ResetCombo()
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0xC53EB4", Offset = "0xC53EB4", VA = "0xC53EB4")]
		private void TriggerPlayspaceBoundaryPulse(Color color)
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0xC55E14", Offset = "0xC55E14", VA = "0xC55E14")]
		private void VisualizeScoreChange(int scoreDelta, bool isFromCombo, bool isMaxHitPossible, Vector3 objectOfScorePos)
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0xC55D10", Offset = "0xC55D10", VA = "0xC55D10")]
		private void ShowBigScorePulse()
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xC55614", Offset = "0xC55614", VA = "0xC55614")]
		private void VisualizeComboChange()
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xC568D8", Offset = "0xC568D8", VA = "0xC568D8")]
		public void PlayComboSoundEffect(int comboLevel)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xC5691C", Offset = "0xC5691C", VA = "0xC5691C")]
		private void ShowTextCentered(string text, float size, float durationIn, float durationOut)
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xC4A0D0", Offset = "0xC4A0D0", VA = "0xC4A0D0")]
		private void ShowCountDown()
		{
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xC4A8E8", Offset = "0xC4A8E8", VA = "0xC4A8E8")]
		private void UpdateLabels()
		{
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xC56E80", Offset = "0xC56E80", VA = "0xC56E80")]
		private IEnumerator CountScoreIncrementally()
		{
			return null;
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xC56EF4", Offset = "0xC56EF4", VA = "0xC56EF4")]
		public void ReportStreamElementSpawned()
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0xC56F34", Offset = "0xC56F34", VA = "0xC56F34")]
		public void ReportStreamElementMissed()
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0xC46E4C", Offset = "0xC46E4C", VA = "0xC46E4C")]
		private void SetWarnRegardingPlaySpace(bool enable)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0xC4C364", Offset = "0xC4C364", VA = "0xC4C364")]
		private void DisableAndResetHandDisplays()
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0xC4A680", Offset = "0xC4A680", VA = "0xC4A680")]
		private void ShowNextSongText(bool isActive)
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0xC46ACC", Offset = "0xC46ACC", VA = "0xC46ACC")]
		private void DisplayScoreBoard(bool directlyShowPlaylistOverview)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0xC4CC9C", Offset = "0xC4CC9C", VA = "0xC4CC9C")]
		private void DisplayTutorialEndScreen()
		{
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0xC4CD04", Offset = "0xC4CD04", VA = "0xC4CD04")]
		private void UpdateSongStats()
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0xC4D1F8", Offset = "0xC4D1F8", VA = "0xC4D1F8")]
		private void SetLeaderboardEntry()
		{
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xC56F74", Offset = "0xC56F74", VA = "0xC56F74")]
		private void CalculateStrengthBonus()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xC572F0", Offset = "0xC572F0", VA = "0xC572F0")]
		private void CalculateActivityBonus()
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xC4C3B4", Offset = "0xC4C3B4", VA = "0xC4C3B4")]
		private void UpdateOverallStats()
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xC57474", Offset = "0xC57474", VA = "0xC57474")]
		public void TakeScreenshot()
		{
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xC49488", Offset = "0xC49488", VA = "0xC49488")]
		private void PauseHandlerOnPauseModeChanged(bool shouldPause)
		{
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xC574C4", Offset = "0xC574C4", VA = "0xC574C4")]
		private void ToggleHandVisibility(bool shouldBeVisible)
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xC57554", Offset = "0xC57554", VA = "0xC57554")]
		public GameManager()
		{
		}
	}
	[Token(Token = "0x20005DC")]
	public class GeneratorSwitch : MonoBehaviour
	{
		[Token(Token = "0x20005DD")]
		public enum Version
		{
			[Token(Token = "0x400256F")]
			v10,
			[Token(Token = "0x4002570")]
			v20
		}

		[Token(Token = "0x400256A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Version? version;

		[Token(Token = "0x400256B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static GeneratorSettings10Adjuster ui10;

		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static GeneratorSettings20Adjuster ui20;

		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static string s;

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xC5F840", Offset = "0xC5F840", VA = "0xC5F840")]
		public static void SetVersionAndInitialize(Version v, GeneratorSwitch ui)
		{
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xC5FAFC", Offset = "0xC5FAFC", VA = "0xC5FAFC")]
		private static void ResetParametersAction(Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0xC5FBF0", Offset = "0xC5FBF0", VA = "0xC5FBF0")]
		private static GeneratorUserSettings GetOriginalSettings(Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0xC5FD24", Offset = "0xC5FD24", VA = "0xC5FD24")]
		internal static GeneratorUserSettings PrepopulateGeneratorSettings(Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0xC60530", Offset = "0xC60530", VA = "0xC60530")]
		internal static void ApplyGeneratorSettings(Song.Difficulty difficulty, GeneratorUserSettings gs)
		{
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0xC60AA8", Offset = "0xC60AA8", VA = "0xC60AA8")]
		private static void ApplyGeneratorSettingForAllRanges10(Song.Difficulty difficulty, powerbeatsvr.generator.v10.Pattern pattern, int value)
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0xC60F88", Offset = "0xC60F88", VA = "0xC60F88")]
		internal static SongLayout Generate(Song song, Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0xC61160", Offset = "0xC61160", VA = "0xC61160")]
		private static SongLayout NormalGeneration(Song song, Song.Difficulty difficulty, GeneratorUserSettings config)
		{
			return null;
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0xC611E8", Offset = "0xC611E8", VA = "0xC611E8")]
		private static SongLayout StatisticsGenerationSimple(Song song, Song.Difficulty difficulty, GeneratorUserSettings config)
		{
			return null;
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0xC616D8", Offset = "0xC616D8", VA = "0xC616D8")]
		private static SongLayout StatisticsGeneration600(Song song, Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0xC623FC", Offset = "0xC623FC", VA = "0xC623FC")]
		private static SongLayout GenerateLayoutV2(Song song, Song.Difficulty difficulty, GeneratorUserSettings20 settings)
		{
			return null;
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0xC627F0", Offset = "0xC627F0", VA = "0xC627F0")]
		private static string cmb(string v, params int[] things)
		{
			return null;
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0xC628E8", Offset = "0xC628E8", VA = "0xC628E8")]
		internal static GeneratorUserSettings GetSettingsFromJSON(string json, Version overrideVersion)
		{
			return null;
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0xC5FB40", Offset = "0xC5FB40", VA = "0xC5FB40")]
		internal static GeneratorSettingsAdjuster GetAdjustor()
		{
			return null;
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0xC6298C", Offset = "0xC6298C", VA = "0xC6298C")]
		public GeneratorSwitch()
		{
		}
	}
	[Token(Token = "0x20005DE")]
	public abstract class GeneratorUserSettings
	{
		[Token(Token = "0x6002121")]
		public abstract string Serialize();

		[Token(Token = "0x6002122")]
		public abstract GeneratorUserSettings DeSerialize(string json);

		[Token(Token = "0x6002123")]
		public abstract GeneratorUserSettings ShallowCopy();

		[Token(Token = "0x6002124")]
		public abstract bool IsEmpty();

		[Token(Token = "0x6002125")]
		public abstract void Set(string name, float value);

		[Token(Token = "0x6002126")]
		public abstract float Get(string name);

		[Token(Token = "0x6002127")]
		[Address(RVA = "0xC62994", Offset = "0xC62994", VA = "0xC62994")]
		protected GeneratorUserSettings()
		{
		}
	}
	[Token(Token = "0x20005DF")]
	public class SongBPMAndOffsetDetector : MonoBehaviour
	{
		[Token(Token = "0x20005E0")]
		public enum Algorithm
		{
			[Token(Token = "0x400257A")]
			Algo_1a_MostCommonOffsetBetterVersion,
			[Token(Token = "0x400257B")]
			Algo_1b_MostCommonOffsetAuthorsVersion,
			[Token(Token = "0x400257C")]
			Algo_1c_MostCommonOffsetAuthorsVersionAndRoundedBPM,
			[Token(Token = "0x400257D")]
			Algo_2_AverageFromMainBeat,
			[Token(Token = "0x400257E")]
			Algo_3_SimplisticVolumeBased
		}

		[Token(Token = "0x20005E1")]
		private enum Rounding
		{
			[Token(Token = "0x4002580")]
			Off,
			[Token(Token = "0x4002581")]
			ToPoint5,
			[Token(Token = "0x4002582")]
			ToFull,
			[Token(Token = "0x4002583")]
			To1Decimal,
			[Token(Token = "0x4002584")]
			To2Decimals,
			[Token(Token = "0x4002585")]
			To3Decimals
		}

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly bool DEBUG_WRITE_CSV;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RhythmAnalyzer analyzer;

		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string analysisFile;

		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<RhythmTool.Beat> beatList;

		[Token(Token = "0x170004AC")]
		public float bpm
		{
			[Token(Token = "0x6002128")]
			[Address(RVA = "0xC6299C", Offset = "0xC6299C", VA = "0xC6299C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002129")]
			[Address(RVA = "0xC629A4", Offset = "0xC629A4", VA = "0xC629A4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170004AD")]
		public float offset
		{
			[Token(Token = "0x600212A")]
			[Address(RVA = "0xC629AC", Offset = "0xC629AC", VA = "0xC629AC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600212B")]
			[Address(RVA = "0xC629B4", Offset = "0xC629B4", VA = "0xC629B4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170004AE")]
		public bool isError
		{
			[Token(Token = "0x600212C")]
			[Address(RVA = "0xC629BC", Offset = "0xC629BC", VA = "0xC629BC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600212D")]
			[Address(RVA = "0xC629C4", Offset = "0xC629C4", VA = "0xC629C4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170004AF")]
		public string error
		{
			[Token(Token = "0x600212E")]
			[Address(RVA = "0xC629D0", Offset = "0xC629D0", VA = "0xC629D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600212F")]
			[Address(RVA = "0xC629D8", Offset = "0xC629D8", VA = "0xC629D8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0xC629E0", Offset = "0xC629E0", VA = "0xC629E0")]
		internal IEnumerator Detect(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0xC62A98", Offset = "0xC62A98", VA = "0xC62A98")]
		internal IEnumerator Detect(Algorithm algorithm, AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0xC62B58", Offset = "0xC62B58", VA = "0xC62B58")]
		private IEnumerator AnalyzeUsingRhythmAnalyzerAlgo1Version(AudioClip clip, bool useOriginalAuthorAdaptations, bool useOriginalRoundedBPM)
		{
			return null;
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0xC62C30", Offset = "0xC62C30", VA = "0xC62C30")]
		private IEnumerator AnalyzeUsingRhythmAnalyzerAlgo2Version(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0xC62CE8", Offset = "0xC62CE8", VA = "0xC62CE8")]
		private IEnumerator AnalyzeUsingRhythmAnalyzerAlgo3Version(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0xC62DA0", Offset = "0xC62DA0", VA = "0xC62DA0")]
		private Dictionary<float, List<RhythmTool.Beat>> GroupBeatsByBPMDescending(Rounding rounding)
		{
			return null;
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xC6360C", Offset = "0xC6360C", VA = "0xC6360C")]
		private IEnumerator GetBeatList(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0xC636C4", Offset = "0xC636C4", VA = "0xC636C4")]
		public SongBPMAndOffsetDetector()
		{
		}
	}
	[Token(Token = "0x20005E9")]
	public class CollidableHandObject : CollidableObject
	{
		[Token(Token = "0x40025A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LLManager.HandSide handSide;

		[Token(Token = "0x40025AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public HandState handState;

		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeaponDeployer weaponAnimator;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject handArmature;

		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isMirrored;

		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Controller controller;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform previousParent;

		[Token(Token = "0x40025B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameManager gameManager;

		[Token(Token = "0x40025B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isDeployed;

		[Token(Token = "0x6002165")]
		[Address(RVA = "0xC67674", Offset = "0xC67674", VA = "0xC67674")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0xC67778", Offset = "0xC67778", VA = "0xC67778")]
		public void Attach()
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0xC67944", Offset = "0xC67944", VA = "0xC67944")]
		internal void Detach()
		{
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0xC679E4", Offset = "0xC679E4", VA = "0xC679E4")]
		internal void TriggerDeployment(bool isPressed)
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0xC67A88", Offset = "0xC67A88", VA = "0xC67A88")]
		public bool IsDeployed()
		{
			return default(bool);
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0xC67A90", Offset = "0xC67A90", VA = "0xC67A90", Slot = "6")]
		internal override bool IsController()
		{
			return default(bool);
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0xC67A98", Offset = "0xC67A98", VA = "0xC67A98", Slot = "7")]
		internal override Controller GetController()
		{
			return null;
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0xC67AA0", Offset = "0xC67AA0", VA = "0xC67AA0", Slot = "4")]
		internal override Vector3 GetSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0xC67AE4", Offset = "0xC67AE4", VA = "0xC67AE4", Slot = "5")]
		internal override GameManager GetGameManager()
		{
			return null;
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0xC67AEC", Offset = "0xC67AEC", VA = "0xC67AEC")]
		public CollidableHandObject()
		{
		}
	}
	[Token(Token = "0x20005EA")]
	public class CollidableObjectPart : MonoBehaviour
	{
		[Token(Token = "0x20005EB")]
		public enum Type
		{
			[Token(Token = "0x40025B5")]
			HAND,
			[Token(Token = "0x40025B6")]
			WEAPON
		}

		[Token(Token = "0x40025B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x40025B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CollidableObject parentHandObject;

		[Token(Token = "0x600216F")]
		[Address(RVA = "0xC67AF4", Offset = "0xC67AF4", VA = "0xC67AF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0xC67B4C", Offset = "0xC67B4C", VA = "0xC67B4C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0xC67B74", Offset = "0xC67B74", VA = "0xC67B74")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0xC67B9C", Offset = "0xC67B9C", VA = "0xC67B9C")]
		public CollidableObjectPart()
		{
		}
	}
	[Token(Token = "0x20005EC")]
	public class FakeHead : MonoBehaviour
	{
		[Token(Token = "0x40025B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CollidableHeadObject collidableHeadObject;

		[Token(Token = "0x40025B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CollidableObjectPart collidableObjectPart;

		[Token(Token = "0x6002173")]
		[Address(RVA = "0xC5B930", Offset = "0xC5B930", VA = "0xC5B930")]
		public void Attach(GameManager manager)
		{
		}

		[Token(Token = "0x6002174")]
		[Address(RVA = "0xC67BA4", Offset = "0xC67BA4", VA = "0xC67BA4")]
		public void Detach()
		{
		}

		[Token(Token = "0x6002175")]
		[Address(RVA = "0xC67C0C", Offset = "0xC67C0C", VA = "0xC67C0C")]
		public FakeHead()
		{
		}
	}
	[Token(Token = "0x20005ED")]
	public class Intersections
	{
		[Token(Token = "0x20005EE")]
		private struct Rectangle
		{
			[Token(Token = "0x40025B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 FL;

			[Token(Token = "0x40025BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 FR;

			[Token(Token = "0x40025BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 BL;

			[Token(Token = "0x40025BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 BR;

			[Token(Token = "0x600217D")]
			[Address(RVA = "0xC67DA4", Offset = "0xC67DA4", VA = "0xC67DA4")]
			public Rectangle(Vector3 FL, Vector3 FR, Vector3 BL, Vector3 BR)
			{
			}
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0xC67C14", Offset = "0xC67C14", VA = "0xC67C14")]
		public static bool IsIntersectingOBBRectangleRectangle(Vector3 r1_FL, Vector3 r1_FR, Vector3 r1_BL, Vector3 r1_BR, Vector3 r2_FL, Vector3 r2_FR, Vector3 r2_BL, Vector3 r2_BR)
		{
			return default(bool);
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0xC67DD4", Offset = "0xC67DD4", VA = "0xC67DD4")]
		private static bool IsIntersectingAABB_OBB(Rectangle r1, Rectangle r2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0xC68010", Offset = "0xC68010", VA = "0xC68010")]
		public static bool IsIntersectingAABB(float r1_minX, float r1_maxX, float r1_minZ, float r1_maxZ, float r2_minX, float r2_maxX, float r2_minZ, float r2_maxZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6002179")]
		[Address(RVA = "0xC67EDC", Offset = "0xC67EDC", VA = "0xC67EDC")]
		private static bool SATRectangleRectangle(Rectangle r1, Rectangle r2)
		{
			return default(bool);
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0xC681B0", Offset = "0xC681B0", VA = "0xC681B0")]
		private static bool IsOverlapping(Vector3 normal, Rectangle r1, Rectangle r2)
		{
			return default(bool);
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0xC6803C", Offset = "0xC6803C", VA = "0xC6803C")]
		private static Vector3 GetNormal(Vector3 startPos, Vector3 endPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0xC682AC", Offset = "0xC682AC", VA = "0xC682AC")]
		private static float DotProduct(Vector3 v1, Vector3 v2)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20005EF")]
	internal class LevelLoadingHiccupPrevention : MonoBehaviour
	{
		[Token(Token = "0x600217E")]
		[Address(RVA = "0xC682BC", Offset = "0xC682BC", VA = "0xC682BC")]
		private IEnumerator LoadSceneWithCustomScriptActivation(string sceneName)
		{
			return null;
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0xC68374", Offset = "0xC68374", VA = "0xC68374")]
		private void LoadingScreenUpdate()
		{
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0xC683B4", Offset = "0xC683B4", VA = "0xC683B4")]
		private IEnumerator LoadSceneWithLowerBackgroundPriority(string sceneName)
		{
			return null;
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0xC68450", Offset = "0xC68450", VA = "0xC68450")]
		public LevelLoadingHiccupPrevention()
		{
		}
	}
	[Token(Token = "0x20005F2")]
	public class AreaBasedElement : MovingElement
	{
		[Token(Token = "0x20005F3")]
		public class CurrentCollisionInformation
		{
			[Token(Token = "0x40025CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool leftSide;

			[Token(Token = "0x40025CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			internal bool rightSide;

			[Token(Token = "0x40025CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			internal bool head;

			[Token(Token = "0x40025CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			internal bool leftIsExtendedShield;

			[Token(Token = "0x40025D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool rightIsExtendedShield;

			[Token(Token = "0x6002198")]
			[Address(RVA = "0xC68DA8", Offset = "0xC68DA8", VA = "0xC68DA8")]
			public CurrentCollisionInformation()
			{
			}
		}

		[Token(Token = "0x40025C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float startBeat;

		[Token(Token = "0x40025C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float endBeat;

		[Token(Token = "0x40025C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CollidableObjectPart potPart;

		[Token(Token = "0x40025CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CollidableObject potCon;

		[Token(Token = "0x40025CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CurrentCollisionInformation info;

		[Token(Token = "0x600218E")]
		[Address(RVA = "0xC6882C", Offset = "0xC6882C", VA = "0xC6882C")]
		internal void Setup(float startBeat, float lastBeat)
		{
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0xC68834", Offset = "0xC68834", VA = "0xC68834")]
		internal float GetEndBeat()
		{
			return default(float);
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0xC6883C", Offset = "0xC6883C", VA = "0xC6883C")]
		internal float GetStartBeat()
		{
			return default(float);
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0xC68844", Offset = "0xC68844", VA = "0xC68844")]
		internal bool HasElementInside()
		{
			return default(bool);
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0xC68880", Offset = "0xC68880", VA = "0xC68880")]
		internal CurrentCollisionInformation GetCollisionInformation()
		{
			return null;
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0xC68888", Offset = "0xC68888", VA = "0xC68888")]
		internal bool hasContactLeft()
		{
			return default(bool);
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0xC688A4", Offset = "0xC688A4", VA = "0xC688A4")]
		internal bool hasContactRight()
		{
			return default(bool);
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0xC688C0", Offset = "0xC688C0", VA = "0xC688C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0xC688E0", Offset = "0xC688E0", VA = "0xC688E0")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0xC68D34", Offset = "0xC68D34", VA = "0xC68D34")]
		public AreaBasedElement()
		{
		}
	}
	[Token(Token = "0x20005F4")]
	public class BallObstacle : MovingElement, DestroyableElement
	{
		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject[] destroyedParts;

		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ParticleSystem[] particlesInChildren;

		[Token(Token = "0x40025D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private MeshRenderer[] rendererInRoot;

		[Token(Token = "0x40025D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private SphereCollider sphereColliderInRoot;

		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Rigidbody rigidbodyInRoot;

		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float beatNo;

		[Token(Token = "0x40025D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool hasBeenHit;

		[Token(Token = "0x40025D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Tween flyingTween;

		[Token(Token = "0x6002199")]
		[Address(RVA = "0xC68DB0", Offset = "0xC68DB0", VA = "0xC68DB0")]
		public void Setup(GameManager g, Sequence tween, Vector3 start, Vector3 mid, Vector3 end, float flyTime, Vector3? rotation)
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0xC68E08", Offset = "0xC68E08", VA = "0xC68E08", Slot = "5")]
		public bool HasBeenHit()
		{
			return default(bool);
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0xC68E10", Offset = "0xC68E10", VA = "0xC68E10", Slot = "6")]
		public void SetHit()
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0xC68E1C", Offset = "0xC68E1C", VA = "0xC68E1C", Slot = "12")]
		public Vector3 ReturnPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0xC68E3C", Offset = "0xC68E3C", VA = "0xC68E3C", Slot = "11")]
		public void DeactivateSwingIndicator()
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0xC68E40", Offset = "0xC68E40", VA = "0xC68E40", Slot = "8")]
		public void BounceOff(float objectVelocity)
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0xC68EB4", Offset = "0xC68EB4", VA = "0xC68EB4", Slot = "9")]
		public void DestroyWithEffect(bool completeDestruction, CollidableObject co, float currentDebrisDuration, Vector3 hitSpeed)
		{
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0xC69184", Offset = "0xC69184", VA = "0xC69184", Slot = "10")]
		public void DestroyGameObject(float currentDebrisDuration)
		{
		}

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0xC69100", Offset = "0xC69100", VA = "0xC69100")]
		private IEnumerator DestroyTheWholeThing(float currentDebrisDuration)
		{
			return null;
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0xC691CC", Offset = "0xC691CC", VA = "0xC691CC", Slot = "13")]
		public GameObject GetGameObject()
		{
			return null;
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0xC690E8", Offset = "0xC690E8", VA = "0xC690E8", Slot = "7")]
		public void CancelMovement()
		{
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0xC691D4", Offset = "0xC691D4", VA = "0xC691D4")]
		public BallObstacle()
		{
		}
	}
	[Token(Token = "0x20005F6")]
	public class Hittable : MovingElement, DestroyableElement
	{
		[Token(Token = "0x40025DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private ParticleSystem[] particlesInChildren;

		[Token(Token = "0x40025DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private bool lingeringParticlesOnKill;

		[Token(Token = "0x40025DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private MeshRenderer[] rendererInRoot;

		[Token(Token = "0x40025E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private SphereCollider sphereColliderInRoot;

		[Token(Token = "0x40025E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Rigidbody rigidbodyInRoot;

		[Token(Token = "0x40025E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private bool normalBallLowPoly;

		[Token(Token = "0x40025E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject smallFracture;

		[Token(Token = "0x40025E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private GameObject largeFracture;

		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private bool powerBallLowPoly;

		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject semiFractures;

		[Token(Token = "0x40025E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject fullFractures;

		[Token(Token = "0x40025E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool hasBeenHit;

		[Token(Token = "0x40025E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Controller rightController;

		[Token(Token = "0x40025EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Tween flyingTween;

		[Token(Token = "0x40025EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Controller leftController;

		[Token(Token = "0x40025EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool isSetup;

		[Token(Token = "0x40025ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool missedReported;

		[Token(Token = "0x40025EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject swingIndicator;

		[Token(Token = "0x40025EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float initialColliderSize;

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0xC69324", Offset = "0xC69324", VA = "0xC69324")]
		public void Setup(GameManager g, Controller left, Controller right, Tween flyingTween, GameObject _swingIndicator, Vector3 start, Vector3 mid, Vector3 end, float flyTime, Vector3? rotation)
		{
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0xC693E8", Offset = "0xC693E8", VA = "0xC693E8")]
		public void ScaleColliderUpDuringFlight(float scaling)
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0xC69424", Offset = "0xC69424", VA = "0xC69424")]
		private void FitColliderToVisuals()
		{
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0xC69448", Offset = "0xC69448", VA = "0xC69448", Slot = "5")]
		public bool HasBeenHit()
		{
			return default(bool);
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0xC69450", Offset = "0xC69450", VA = "0xC69450", Slot = "6")]
		public void SetHit()
		{
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0xC6945C", Offset = "0xC6945C", VA = "0xC6945C", Slot = "7")]
		public void CancelMovement()
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0xC69474", Offset = "0xC69474", VA = "0xC69474", Slot = "12")]
		public Vector3 ReturnPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0xC69494", Offset = "0xC69494", VA = "0xC69494", Slot = "11")]
		public void DeactivateSwingIndicator()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0xC6951C", Offset = "0xC6951C", VA = "0xC6951C", Slot = "8")]
		public void BounceOff(float objectVelocity)
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0xC69594", Offset = "0xC69594", VA = "0xC69594", Slot = "9")]
		public void DestroyWithEffect(bool completeDestruction, CollidableObject co, float currentDebrisDuration, Vector3 hitSpeed)
		{
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0xC699BC", Offset = "0xC699BC", VA = "0xC699BC")]
		private void BlastAway(Rigidbody rb, CollidableObject co, bool completeDestruction)
		{
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0xC69C50", Offset = "0xC69C50", VA = "0xC69C50", Slot = "10")]
		public void DestroyGameObject(float currentDebrisDuration)
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0xC69BCC", Offset = "0xC69BCC", VA = "0xC69BCC")]
		internal IEnumerator DestroyTheWholeThing(float currentDebrisDuration)
		{
			return null;
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0xC69C98", Offset = "0xC69C98", VA = "0xC69C98")]
		private void Update()
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0xC69D04", Offset = "0xC69D04", VA = "0xC69D04", Slot = "13")]
		public GameObject GetGameObject()
		{
			return null;
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0xC69D0C", Offset = "0xC69D0C", VA = "0xC69D0C")]
		public Hittable()
		{
		}
	}
	[Token(Token = "0x20005F8")]
	public abstract class MovingElement : MonoBehaviour
	{
		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal GameManager gameManager;

		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Vector3 startPoint;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal Vector3 midPoint;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Vector3 endPoint;

		[Token(Token = "0x40025F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float flyTime;

		[Token(Token = "0x40025F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal Vector3? rotation;

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0xC69E64", Offset = "0xC69E64", VA = "0xC69E64", Slot = "4")]
		public virtual void Setup(GameManager g, Vector3 start, Vector3 mid, Vector3 end, float flyTime, Vector3? rotation)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0xC69EF4", Offset = "0xC69EF4", VA = "0xC69EF4")]
		protected MovingElement()
		{
		}
	}
	[Token(Token = "0x20005F9")]
	public class NormalBall : Hittable
	{
		[Token(Token = "0x60021C3")]
		[Address(RVA = "0xC69EFC", Offset = "0xC69EFC", VA = "0xC69EFC")]
		public NormalBall()
		{
		}
	}
	[Token(Token = "0x20005FA")]
	public class PowerBall : Hittable
	{
		[Token(Token = "0x60021C4")]
		[Address(RVA = "0xC69F04", Offset = "0xC69F04", VA = "0xC69F04")]
		public PowerBall()
		{
		}
	}
	[Token(Token = "0x20005FB")]
	public enum LastContact
	{
		[Token(Token = "0x40025FB")]
		Left,
		[Token(Token = "0x40025FC")]
		Right,
		[Token(Token = "0x40025FD")]
		Nothing
	}
	[Token(Token = "0x20005FC")]
	public class Stream : AreaBasedElement
	{
		[Token(Token = "0x40025FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LastContact lastContact;

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0xC69F0C", Offset = "0xC69F0C", VA = "0xC69F0C")]
		public StreamElement GetActualStreamElement()
		{
			return null;
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0xC69F54", Offset = "0xC69F54", VA = "0xC69F54")]
		public Stream()
		{
		}
	}
	[Token(Token = "0x20005FD")]
	public class StreamCollectionSparks : MonoBehaviour
	{
		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LLManager.HandSide handSide;

		[Token(Token = "0x4002600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private GameConfiguration.StreamFeedback feedbackType;

		[Token(Token = "0x4002601")]
		private const float MAX_TIME_DELTA = 0.2f;

		[Token(Token = "0x4002602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float lastContactTime;

		[Token(Token = "0x4002603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem particles;

		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float time;

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0xC69F64", Offset = "0xC69F64", VA = "0xC69F64")]
		private void Start()
		{
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0xC69FBC", Offset = "0xC69FBC", VA = "0xC69FBC")]
		private void Update()
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0xC6A068", Offset = "0xC6A068", VA = "0xC6A068")]
		public void SetContactTime(float contactTime)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0xC6A070", Offset = "0xC6A070", VA = "0xC6A070")]
		public LLManager.HandSide GetHandSide()
		{
			return default(LLManager.HandSide);
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0xC6A078", Offset = "0xC6A078", VA = "0xC6A078")]
		public GameConfiguration.StreamFeedback GetFeedbackType()
		{
			return default(GameConfiguration.StreamFeedback);
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0xC6A080", Offset = "0xC6A080", VA = "0xC6A080")]
		public StreamCollectionSparks()
		{
		}
	}
	[Token(Token = "0x20005FE")]
	public class StreamElement : MovingElement
	{
		[Token(Token = "0x4002605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject actualStreamVisual;

		[Token(Token = "0x4002606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject colliderGameObject;

		[Token(Token = "0x4002607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Camera cam;

		[Token(Token = "0x4002608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Renderer actualStreamVisualRenderer;

		[Token(Token = "0x4002609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 streamPos;

		[Token(Token = "0x400260A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float dieAtZ;

		[Token(Token = "0x400260B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool isDestroyed;

		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool isDeflected;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool isSongEditor;

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0xC6A088", Offset = "0xC6A088", VA = "0xC6A088")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0xC6A0B4", Offset = "0xC6A0B4", VA = "0xC6A0B4")]
		private void MyPreCull()
		{
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0xC6A130", Offset = "0xC6A130", VA = "0xC6A130")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0xC6A190", Offset = "0xC6A190", VA = "0xC6A190")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0xC6A268", Offset = "0xC6A268", VA = "0xC6A268")]
		public void SetDieAtZ(float z, GameManager gameManager)
		{
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0xC6A274", Offset = "0xC6A274", VA = "0xC6A274")]
		public bool DestroyWithEffect()
		{
			return default(bool);
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0xC6A2BC", Offset = "0xC6A2BC", VA = "0xC6A2BC")]
		public void Deflect(CollidableObject co)
		{
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0xC6A4C4", Offset = "0xC6A4C4", VA = "0xC6A4C4")]
		public StreamElement()
		{
		}
	}
	[Token(Token = "0x20005FF")]
	public class StreamParticleGenerator : MonoBehaviour
	{
		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float stepSize;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int particleEmitCount;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BezierSpline bezier;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float appearancePoint;

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float destructionPoint;

		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float progress;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool isInitialized;

		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isGenerationFinished;

		[Token(Token = "0x4002616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StreamElement streamElementPrefab;

		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameManager gameManager;

		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GameObject> particles;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject prevParticle;

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0xC6A540", Offset = "0xC6A540", VA = "0xC6A540")]
		public void Initialize(BezierSpline bezier, StreamElement streamElement, float appearancePoint, float destructionPoint, GameManager gameManager)
		{
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0xC6A5DC", Offset = "0xC6A5DC", VA = "0xC6A5DC")]
		public void Update()
		{
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0xC6A5F0", Offset = "0xC6A5F0", VA = "0xC6A5F0")]
		private void GenerateParticles(bool generateInstantly)
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0xC6AAD4", Offset = "0xC6AAD4", VA = "0xC6AAD4")]
		public void RegenerateParticles()
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0xC6AB08", Offset = "0xC6AB08", VA = "0xC6AB08")]
		public void DespawnAllParticles()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0xC6ABCC", Offset = "0xC6ABCC", VA = "0xC6ABCC")]
		public StreamParticleGenerator()
		{
		}
	}
	[Token(Token = "0x2000600")]
	public class WallObstacle : AreaBasedElement
	{
		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int wallType;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject frontWallElement;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject sideWallElement;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool elementInsideLastFrame;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float beatNo;

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0xC6AC54", Offset = "0xC6AC54", VA = "0xC6AC54")]
		internal void ScaleWall(Vector2 xyScale, float zScale)
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0xC6AD50", Offset = "0xC6AD50", VA = "0xC6AD50")]
		internal int GetWallType()
		{
			return default(int);
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0xC6AD58", Offset = "0xC6AD58", VA = "0xC6AD58")]
		public bool WasElementInsideLastFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0xC6AD60", Offset = "0xC6AD60", VA = "0xC6AD60")]
		public void SetElementInsideLastFrame(bool isInside)
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0xC6AD6C", Offset = "0xC6AD6C", VA = "0xC6AD6C")]
		public WallObstacle()
		{
		}
	}
	[Token(Token = "0x2000601")]
	public class OverallStatistic
	{
		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool trackCalories;

		[Token(Token = "0x4002620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float caloriesToday;

		[Token(Token = "0x4002621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float caloriesSinceReset;

		[Token(Token = "0x4002622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float lifetimeCalories;

		[Token(Token = "0x4002623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float caloriesSession;

		[Token(Token = "0x4002624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool trackHeartRate;

		[Token(Token = "0x4002625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int totalHeartRate;

		[Token(Token = "0x4002626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int totalHeartRateSeconds;

		[Token(Token = "0x4002627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int maxHeartRate;

		[Token(Token = "0x4002628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float playTimeToday;

		[Token(Token = "0x4002629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float playTimeSinceReset;

		[Token(Token = "0x400262A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float playTimeTotal;

		[Token(Token = "0x400262B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float playTimeSession;

		[Token(Token = "0x400262C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int squatsSession;

		[Token(Token = "0x400262D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int squatsToday;

		[Token(Token = "0x400262E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int squatsSinceReset;

		[Token(Token = "0x400262F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int squatsTotal;

		[Token(Token = "0x4002630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int totalScore;

		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int bestCombo;

		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int newHighscores;

		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int flawlessVictories;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int balls;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int ballsHit;

		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int ballsPerfectlyHit;

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int streamElements;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int streamElementsCatched;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int collisionsPossible;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int collisionsAvoided;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float accuracy;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float strength;

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float maxHitSpeed;

		[Token(Token = "0x400263E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float averageHitSpeed;

		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int hits;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameConfiguration gameConfig;

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xC6AD74", Offset = "0xC6AD74", VA = "0xC6AD74")]
		public void AnalyseAccuracy()
		{
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xC6ADDC", Offset = "0xC6ADDC", VA = "0xC6ADDC")]
		public void AnalyseStrength()
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0xC6AE00", Offset = "0xC6AE00", VA = "0xC6AE00")]
		public OverallStatistic()
		{
		}
	}
	[Token(Token = "0x2000602")]
	public class FlyPath
	{
		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 start;

		[Token(Token = "0x4002642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 middle;

		[Token(Token = "0x4002643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 player;

		[Token(Token = "0x4002644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 end;

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0xC6AE08", Offset = "0xC6AE08", VA = "0xC6AE08")]
		public FlyPath(Vector3 start, Vector3 middle, Vector3 player, Vector3 end)
		{
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0xC6AE8C", Offset = "0xC6AE8C", VA = "0xC6AE8C")]
		public Vector3[] GetFromStartToPlayer()
		{
			return null;
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0xC6AF2C", Offset = "0xC6AF2C", VA = "0xC6AF2C")]
		public Vector3[] GetFromPlayerToEnd()
		{
			return null;
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0xC6AFB4", Offset = "0xC6AFB4", VA = "0xC6AFB4")]
		internal Vector3[] GetFromPlayerToEndObstacle()
		{
			return null;
		}
	}
	[Token(Token = "0x2000603")]
	public class FlyPaths : MonoBehaviour
	{
		[Token(Token = "0x4002645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 APPEARANCE_POINT;

		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 DISAPPEARANCE_POINT;

		[Token(Token = "0x4002647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float zDisplacementToPlayer;

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0xC6B03C", Offset = "0xC6B03C", VA = "0xC6B03C")]
		public FlyPath GetPathForEndPoint(Vector2 endpoint, float zLagOffset, bool curved, Vector2 scaling)
		{
			return null;
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0xC6B260", Offset = "0xC6B260", VA = "0xC6B260")]
		public FlyPaths()
		{
		}
	}
	[Token(Token = "0x2000604")]
	public class Playlist
	{
		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<PlaylistEntry> entries;

		[Token(Token = "0x170004C4")]
		public string Name
		{
			[Token(Token = "0x60021EB")]
			[Address(RVA = "0xC6B2D4", Offset = "0xC6B2D4", VA = "0xC6B2D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60021EC")]
			[Address(RVA = "0xC6B2DC", Offset = "0xC6B2DC", VA = "0xC6B2DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C5")]
		public bool IsAutoGenerated
		{
			[Token(Token = "0x60021ED")]
			[Address(RVA = "0xC6B2E4", Offset = "0xC6B2E4", VA = "0xC6B2E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021EE")]
			[Address(RVA = "0xC6B2EC", Offset = "0xC6B2EC", VA = "0xC6B2EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C6")]
		public bool IsShuffle
		{
			[Token(Token = "0x60021EF")]
			[Address(RVA = "0xC6B2F8", Offset = "0xC6B2F8", VA = "0xC6B2F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021F0")]
			[Address(RVA = "0xC6B300", Offset = "0xC6B300", VA = "0xC6B300")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C7")]
		public bool IsRepeat
		{
			[Token(Token = "0x60021F1")]
			[Address(RVA = "0xC6B30C", Offset = "0xC6B30C", VA = "0xC6B30C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021F2")]
			[Address(RVA = "0xC6B314", Offset = "0xC6B314", VA = "0xC6B314")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C8")]
		public bool IsEndurance
		{
			[Token(Token = "0x60021F3")]
			[Address(RVA = "0xC6B320", Offset = "0xC6B320", VA = "0xC6B320")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021F4")]
			[Address(RVA = "0xC6B328", Offset = "0xC6B328", VA = "0xC6B328")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004C9")]
		public float MusicDurationInSeconds
		{
			[Token(Token = "0x60021F5")]
			[Address(RVA = "0xC6B334", Offset = "0xC6B334", VA = "0xC6B334")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60021F6")]
			[Address(RVA = "0xC6B33C", Offset = "0xC6B33C", VA = "0xC6B33C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004CA")]
		public int Count
		{
			[Token(Token = "0x60021F7")]
			[Address(RVA = "0xC6B344", Offset = "0xC6B344", VA = "0xC6B344")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0xC6B38C", Offset = "0xC6B38C", VA = "0xC6B38C")]
		public PlaylistEntry GetEntry(int index)
		{
			return null;
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0xC6B3E4", Offset = "0xC6B3E4", VA = "0xC6B3E4")]
		public void AddEntry(Song song, Song.Difficulty difficulty, int position)
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0xC6B85C", Offset = "0xC6B85C", VA = "0xC6B85C")]
		public void AddEntry(string songName, string fullAudioPath, float musicLength, float layoutLength, Song.Difficulty difficulty, int position)
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0xC6BAB0", Offset = "0xC6BAB0", VA = "0xC6BAB0")]
		public void RemoveEntry(int index)
		{
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0xC6BB74", Offset = "0xC6BB74", VA = "0xC6BB74")]
		public void MoveEntry(int index, int direction)
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0xC6BC70", Offset = "0xC6BC70", VA = "0xC6BC70")]
		public static Playlist LoadFromJSON(JSONObject serializedPlaylist)
		{
			return null;
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0xC6C378", Offset = "0xC6C378", VA = "0xC6C378")]
		internal Playlist Clone()
		{
			return null;
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0xC6C624", Offset = "0xC6C624", VA = "0xC6C624")]
		internal JSONObject SaveToJSON()
		{
			return null;
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0xC6CAF4", Offset = "0xC6CAF4", VA = "0xC6CAF4")]
		internal float GetLayoutBasedDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0xC6CC4C", Offset = "0xC6CC4C", VA = "0xC6CC4C")]
		internal string GetDurationFormatted()
		{
			return null;
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0xC6CE4C", Offset = "0xC6CE4C", VA = "0xC6CE4C")]
		internal bool HasInvalidFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0xC6CFBC", Offset = "0xC6CFBC", VA = "0xC6CFBC")]
		internal void RemoveInvalidEntries()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0xC6C078", Offset = "0xC6C078", VA = "0xC6C078")]
		public Playlist()
		{
		}
	}
	[Token(Token = "0x2000605")]
	public class PlaylistAdjuster : MonoBehaviour
	{
		[Token(Token = "0x2000606")]
		private enum Mode
		{
			[Token(Token = "0x4002662")]
			ALL_PLAYLISTS,
			[Token(Token = "0x4002663")]
			SINGLE_PLAYLIST
		}

		[Token(Token = "0x2000607")]
		public delegate void OnButtonHover();

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PlaylistListManager playlistListManager;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject listOfPlaylists;

		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PlaylistEntryManager playlistEntryManager;

		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject playlistContent;

		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MenuSelectButton toPlaylistsButton;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TextMeshProUGUI playlistNameText;

		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject playlistSpecificOptions;

		[Token(Token = "0x4002659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject playlistOptions;

		[Token(Token = "0x400265A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ProgressDialog progressDialog;

		[Token(Token = "0x400265B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private StringEditDialog stringEditDialog;

		[Token(Token = "0x400265C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Mode mode;

		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FrameworkManager fm;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlaylistManager playlistManager;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Playlist currentPlaylist;

		[Token(Token = "0x14000035")]
		public event Action startPressed
		{
			[Token(Token = "0x6002205")]
			[Address(RVA = "0xC6D078", Offset = "0xC6D078", VA = "0xC6D078")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002206")]
			[Address(RVA = "0xC6D114", Offset = "0xC6D114", VA = "0xC6D114")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event Action<PlaylistEntry> entrySelected
		{
			[Token(Token = "0x6002207")]
			[Address(RVA = "0xC6D1B0", Offset = "0xC6D1B0", VA = "0xC6D1B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002208")]
			[Address(RVA = "0xC6D260", Offset = "0xC6D260", VA = "0xC6D260")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event OnButtonHover buttonHovered
		{
			[Token(Token = "0x6002209")]
			[Address(RVA = "0xC6D310", Offset = "0xC6D310", VA = "0xC6D310")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600220A")]
			[Address(RVA = "0xC6D3AC", Offset = "0xC6D3AC", VA = "0xC6D3AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0xC6D448", Offset = "0xC6D448", VA = "0xC6D448")]
		public void Awake()
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0xC6D7C4", Offset = "0xC6D7C4", VA = "0xC6D7C4")]
		private void PlaylistEntryManager_entrySelected(PlaylistEntry entry)
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0xC6D7E0", Offset = "0xC6D7E0", VA = "0xC6D7E0")]
		private void PlaylistEntryManager_PlaylistRenamed(Playlist playlist)
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0xC6D820", Offset = "0xC6D820", VA = "0xC6D820")]
		private void PlaylistEntryManager_playlistDeleted(Playlist playlist)
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0xC6D944", Offset = "0xC6D944", VA = "0xC6D944")]
		public void Start()
		{
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0xC6D848", Offset = "0xC6D848", VA = "0xC6D848")]
		private void ToPlaylistsButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0xC6DA74", Offset = "0xC6DA74", VA = "0xC6DA74")]
		private void PlaylistEntryManager_playlistChanged(Playlist playlist)
		{
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0xC6DCC8", Offset = "0xC6DCC8", VA = "0xC6DCC8")]
		private void PlaylistListManager_playlistsChanged()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0xC6DCE0", Offset = "0xC6DCE0", VA = "0xC6DCE0")]
		public void PlaylistListManager_playlistSelected(Playlist playlist, int index)
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0xC6DD70", Offset = "0xC6DD70", VA = "0xC6DD70")]
		public bool CanAddSong()
		{
			return default(bool);
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0xC6DD80", Offset = "0xC6DD80", VA = "0xC6DD80")]
		public void AddSongToPlaylist(Song song, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002216")]
		[Address(RVA = "0xC6D9DC", Offset = "0xC6D9DC", VA = "0xC6D9DC")]
		private void ToggleMode(Mode mode)
		{
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0xC6DDB0", Offset = "0xC6DDB0", VA = "0xC6DDB0")]
		private void PlaylistEntryManager_startPressed(Playlist list, int listIndex)
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0xC6DE0C", Offset = "0xC6DE0C", VA = "0xC6DE0C")]
		public void OpenProgressDialog()
		{
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0xC6DF50", Offset = "0xC6DF50", VA = "0xC6DF50")]
		public void HideProgressDialog()
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0xC6DF84", Offset = "0xC6DF84", VA = "0xC6DF84")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x600221B")]
		[Address(RVA = "0xC6DFC4", Offset = "0xC6DFC4", VA = "0xC6DFC4")]
		public void GoUp()
		{
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0xC6DFC8", Offset = "0xC6DFC8", VA = "0xC6DFC8")]
		public void ShowBoundaryWarning(string text, string dontShowAgain, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0xC6E138", Offset = "0xC6E138", VA = "0xC6E138")]
		public PlaylistAdjuster()
		{
		}
	}
	[Token(Token = "0x200060A")]
	public class PlaylistEntry
	{
		[Token(Token = "0x170004CB")]
		public string SongName
		{
			[Token(Token = "0x6002225")]
			[Address(RVA = "0xC6E2F8", Offset = "0xC6E2F8", VA = "0xC6E2F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002226")]
			[Address(RVA = "0xC6E300", Offset = "0xC6E300", VA = "0xC6E300")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004CC")]
		public string SongPath
		{
			[Token(Token = "0x6002227")]
			[Address(RVA = "0xC6E308", Offset = "0xC6E308", VA = "0xC6E308")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002228")]
			[Address(RVA = "0xC6E310", Offset = "0xC6E310", VA = "0xC6E310")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004CD")]
		public float SongMusicLength
		{
			[Token(Token = "0x6002229")]
			[Address(RVA = "0xC6E318", Offset = "0xC6E318", VA = "0xC6E318")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600222A")]
			[Address(RVA = "0xC6E320", Offset = "0xC6E320", VA = "0xC6E320")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004CE")]
		public float SongLayoutLength
		{
			[Token(Token = "0x600222B")]
			[Address(RVA = "0xC6E328", Offset = "0xC6E328", VA = "0xC6E328")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600222C")]
			[Address(RVA = "0xC6E330", Offset = "0xC6E330", VA = "0xC6E330")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004CF")]
		public Song.Difficulty Difficulty
		{
			[Token(Token = "0x600222D")]
			[Address(RVA = "0xC6E338", Offset = "0xC6E338", VA = "0xC6E338")]
			[CompilerGenerated]
			get
			{
				return default(Song.Difficulty);
			}
			[Token(Token = "0x600222E")]
			[Address(RVA = "0xC6E340", Offset = "0xC6E340", VA = "0xC6E340")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004D0")]
		public bool IsFileValid
		{
			[Token(Token = "0x600222F")]
			[Address(RVA = "0xC6E348", Offset = "0xC6E348", VA = "0xC6E348")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002230")]
			[Address(RVA = "0xC6E350", Offset = "0xC6E350", VA = "0xC6E350")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0xC6B9BC", Offset = "0xC6B9BC", VA = "0xC6B9BC")]
		public PlaylistEntry(string name, string path, float musicLength, float layoutLength, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0xC6C100", Offset = "0xC6C100", VA = "0xC6C100")]
		internal static PlaylistEntry LoadFromJSON(JSONObject serializedPlaylistEntry)
		{
			return null;
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0xC6C92C", Offset = "0xC6C92C", VA = "0xC6C92C")]
		internal JSONObject SaveToJSON()
		{
			return null;
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0xC6E35C", Offset = "0xC6E35C", VA = "0xC6E35C")]
		internal void UpdateLayoutLength(float newLength)
		{
		}
	}
	[Token(Token = "0x200060B")]
	public class PlaylistManager : MonoBehaviour
	{
		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string PLAYLIST_FILE_NAME;

		[Token(Token = "0x4002670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string playlistFile;

		[Token(Token = "0x170004D1")]
		public List<Playlist> Playlists
		{
			[Token(Token = "0x6002235")]
			[Address(RVA = "0xC6E364", Offset = "0xC6E364", VA = "0xC6E364")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002236")]
			[Address(RVA = "0xC6E36C", Offset = "0xC6E36C", VA = "0xC6E36C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0xC6E374", Offset = "0xC6E374", VA = "0xC6E374")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0xC6E4BC", Offset = "0xC6E4BC", VA = "0xC6E4BC")]
		private void Load()
		{
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0xC6DAA0", Offset = "0xC6DAA0", VA = "0xC6DAA0")]
		public void Save()
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0xC6E68C", Offset = "0xC6E68C", VA = "0xC6E68C")]
		private IEnumerator UnitTest()
		{
			return null;
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0xC6E728", Offset = "0xC6E728", VA = "0xC6E728")]
		private void SimpleAssert(object actual, object expected, string message)
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0xC6EA20", Offset = "0xC6EA20", VA = "0xC6EA20")]
		internal void UpdateSongLayoutLength(Song song, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0xC6ECB8", Offset = "0xC6ECB8", VA = "0xC6ECB8")]
		public PlaylistManager()
		{
		}
	}
	[Token(Token = "0x200060D")]
	internal class PlaylistPlaybackManager
	{
		[Token(Token = "0x4002677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isCancelled;

		[Token(Token = "0x4002678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<int> indexSequence;

		[Token(Token = "0x4002679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int> nextIndexSequence;

		[Token(Token = "0x400267A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly System.Random rand;

		[Token(Token = "0x170004D4")]
		public int CurrentIndex
		{
			[Token(Token = "0x6002245")]
			[Address(RVA = "0xC6F408", Offset = "0xC6F408", VA = "0xC6F408")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002246")]
			[Address(RVA = "0xC6F410", Offset = "0xC6F410", VA = "0xC6F410")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004D5")]
		public Playlist Playlist
		{
			[Token(Token = "0x6002247")]
			[Address(RVA = "0xC6F418", Offset = "0xC6F418", VA = "0xC6F418")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0xC6F420", Offset = "0xC6F420", VA = "0xC6F420")]
		public PlaylistPlaybackManager(Playlist playlist)
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0xC6F638", Offset = "0xC6F638", VA = "0xC6F638")]
		public void AdvanceToNextEntry()
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0xC6F834", Offset = "0xC6F834", VA = "0xC6F834")]
		public bool IsAtEnd()
		{
			return default(bool);
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0xC6F898", Offset = "0xC6F898", VA = "0xC6F898")]
		public void CancelPlaylist()
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0xC6F530", Offset = "0xC6F530", VA = "0xC6F530")]
		internal void Initialize()
		{
		}

		[Token(Token = "0x600224D")]
		[Address(RVA = "0xC6F724", Offset = "0xC6F724", VA = "0xC6F724")]
		private List<int> CreateConstrainedIndexSequence(int count, int indexNotToBeFirst)
		{
			return null;
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0xC6F8A4", Offset = "0xC6F8A4", VA = "0xC6F8A4")]
		private List<int> CreateRandomIndexSequence(int count)
		{
			return null;
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0xC6FA54", Offset = "0xC6FA54", VA = "0xC6FA54")]
		public PlaylistEntry GetCurrentEntry()
		{
			return null;
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0xC6FABC", Offset = "0xC6FABC", VA = "0xC6FABC")]
		public PlaylistEntry GetNextEntry()
		{
			return null;
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0xC6FB84", Offset = "0xC6FB84", VA = "0xC6FB84")]
		public bool HasNextEntry()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200060E")]
	public class PlaylistSongItemView : ListItemView
	{
		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI indexAndSongTitle;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI difficulty;

		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TextMeshProUGUI rating;

		[Token(Token = "0x400267E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI calories;

		[Token(Token = "0x6002252")]
		[Address(RVA = "0xC6FBC4", Offset = "0xC6FBC4", VA = "0xC6FBC4")]
		public void SetIndexAndSongTitle(string text)
		{
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0xC6FBE8", Offset = "0xC6FBE8", VA = "0xC6FBE8")]
		public void ColorText(Color color)
		{
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0xC6FC0C", Offset = "0xC6FC0C", VA = "0xC6FC0C")]
		public void SetDifficulty(string text)
		{
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0xC6FC30", Offset = "0xC6FC30", VA = "0xC6FC30")]
		public void SetRating(string text)
		{
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0xC6FC54", Offset = "0xC6FC54", VA = "0xC6FC54")]
		public void SetCalories(string text)
		{
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0xC6FC78", Offset = "0xC6FC78", VA = "0xC6FC78")]
		public PlaylistSongItemView()
		{
		}
	}
	[Token(Token = "0x200060F")]
	public class PlayspaceWarning : MonoBehaviour
	{
		[Token(Token = "0x2000610")]
		public enum WarningType
		{
			[Token(Token = "0x400268C")]
			FRONT,
			[Token(Token = "0x400268D")]
			BACK
		}

		[Token(Token = "0x400267F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float warningFront;

		[Token(Token = "0x4002680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float warningBack;

		[Token(Token = "0x4002681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private WarningType warningType;

		[Token(Token = "0x4002682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject head;

		[Token(Token = "0x4002683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip warningSoundMale;

		[Token(Token = "0x4002684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip warningSoundFemale;

		[Token(Token = "0x4002685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject text;

		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ParticleSystem warningIndicator;

		[Token(Token = "0x4002687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x4002688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isChecking;

		[Token(Token = "0x4002689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float samplingInterval;

		[Token(Token = "0x400268A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FrameworkManager fm;

		[Token(Token = "0x6002258")]
		[Address(RVA = "0xC6FC80", Offset = "0xC6FC80", VA = "0xC6FC80")]
		private void Start()
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0xC6FCF8", Offset = "0xC6FCF8", VA = "0xC6FCF8")]
		private void Update()
		{
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0xC6FEB0", Offset = "0xC6FEB0", VA = "0xC6FEB0")]
		public void SetTreshold(float value)
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0xC6FEBC", Offset = "0xC6FEBC", VA = "0xC6FEBC")]
		public void SetChecking(bool shouldCheck)
		{
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0xC6FED0", Offset = "0xC6FED0", VA = "0xC6FED0")]
		public void SetVoice(bool isActivated)
		{
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0xC6FE6C", Offset = "0xC6FE6C", VA = "0xC6FE6C")]
		private void Disable()
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0xC6FEF4", Offset = "0xC6FEF4", VA = "0xC6FEF4")]
		public PlayspaceWarning()
		{
		}
	}
	[Token(Token = "0x2000611")]
	public class PowerFistChargeDisplay : MonoBehaviour
	{
		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Image circularBar;

		[Token(Token = "0x600225F")]
		[Address(RVA = "0xC6FF08", Offset = "0xC6FF08", VA = "0xC6FF08")]
		public void SetActive()
		{
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0xC6FF70", Offset = "0xC6FF70", VA = "0xC6FF70")]
		public void SetValue(float chargeLevel)
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0xC6FFFC", Offset = "0xC6FFFC", VA = "0xC6FFFC")]
		public void Disable()
		{
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0xC70064", Offset = "0xC70064", VA = "0xC70064")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0xC70084", Offset = "0xC70084", VA = "0xC70084")]
		public void DisableAndReset()
		{
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0xC70100", Offset = "0xC70100", VA = "0xC70100")]
		public PowerFistChargeDisplay()
		{
		}
	}
	[Token(Token = "0x2000612")]
	public class PurchaseInfo : MonoBehaviour
	{
		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LLPlatform.Feature feature;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI twoOptionsText;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton buyNowInBrowserButton;

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MenuSelectButton buyNowInGameButton;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MenuSelectButton cancelButton;

		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x14000038")]
		public event Action dialogCanceled
		{
			[Token(Token = "0x6002265")]
			[Address(RVA = "0xC70108", Offset = "0xC70108", VA = "0xC70108")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002266")]
			[Address(RVA = "0xC701A4", Offset = "0xC701A4", VA = "0xC701A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000039")]
		public event Action<bool> purchaseFunctionPerformed
		{
			[Token(Token = "0x6002267")]
			[Address(RVA = "0xC70240", Offset = "0xC70240", VA = "0xC70240")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002268")]
			[Address(RVA = "0xC702F0", Offset = "0xC702F0", VA = "0xC702F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0xC703A0", Offset = "0xC703A0", VA = "0xC703A0")]
		public void HideDialog()
		{
		}

		[Token(Token = "0x600226A")]
		[Address(RVA = "0xC703C4", Offset = "0xC703C4", VA = "0xC703C4")]
		private void Start()
		{
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0xC70694", Offset = "0xC70694", VA = "0xC70694")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0xC706B0", Offset = "0xC706B0", VA = "0xC706B0")]
		private void BuyNowInBrowserButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0xC70868", Offset = "0xC70868", VA = "0xC70868")]
		private void BuyNowInGameButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0xC70934", Offset = "0xC70934", VA = "0xC70934")]
		public PurchaseInfo()
		{
		}
	}
	[Token(Token = "0x2000614")]
	public class RatingCalculator
	{
		[Token(Token = "0x2000615")]
		public enum Rating
		{
			[Token(Token = "0x400269B")]
			A_PLUS,
			[Token(Token = "0x400269C")]
			A,
			[Token(Token = "0x400269D")]
			A_MINUS,
			[Token(Token = "0x400269E")]
			B_PLUS,
			[Token(Token = "0x400269F")]
			B,
			[Token(Token = "0x40026A0")]
			B_MINUS,
			[Token(Token = "0x40026A1")]
			C_PLUS,
			[Token(Token = "0x40026A2")]
			C,
			[Token(Token = "0x40026A3")]
			C_MINUS,
			[Token(Token = "0x40026A4")]
			D_PLUS,
			[Token(Token = "0x40026A5")]
			D,
			[Token(Token = "0x40026A6")]
			D_MINUS,
			[Token(Token = "0x40026A7")]
			F
		}

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Dictionary<Rating, string> RATING_TO_STRING;

		[Token(Token = "0x6002273")]
		[Address(RVA = "0xC70B4C", Offset = "0xC70B4C", VA = "0xC70B4C")]
		public static Rating CalculateRating(SongStatistic songStat)
		{
			return default(Rating);
		}
	}
	[Token(Token = "0x2000616")]
	public class BallObstacleAction : ObstacleAction
	{
		[Token(Token = "0x6002275")]
		[Address(RVA = "0xC70FF4", Offset = "0xC70FF4", VA = "0xC70FF4")]
		public BallObstacleAction(Beat beat, Vector2 position)
		{
		}

		[Token(Token = "0x6002276")]
		[Address(RVA = "0xC71084", Offset = "0xC71084", VA = "0xC71084", Slot = "4")]
		internal override BeatAction DeepClone(Beat parent)
		{
			return null;
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0xC71108", Offset = "0xC71108", VA = "0xC71108", Slot = "5")]
		internal override void AdjustPositionForPlayWindow(Vector2 scale)
		{
		}
	}
	[Token(Token = "0x2000617")]
	public abstract class Beat
	{
		[Token(Token = "0x40026A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<BeatAction> beatActions;

		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Label;

		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 temp_Stream_A;

		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 temp_Stream_B;

		[Token(Token = "0x6002278")]
		[Address(RVA = "0xC71240", Offset = "0xC71240", VA = "0xC71240")]
		public void AddBeatAction(BeatAction ba)
		{
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0xC71384", Offset = "0xC71384", VA = "0xC71384")]
		public List<BeatAction> GetBeatActions()
		{
			return null;
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0xC7138C", Offset = "0xC7138C", VA = "0xC7138C", Slot = "4")]
		internal virtual int GetHittablesCount()
		{
			return default(int);
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0xC7150C", Offset = "0xC7150C", VA = "0xC7150C", Slot = "5")]
		internal virtual int GetPowerBallsCount()
		{
			return default(int);
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0xC7168C", Offset = "0xC7168C", VA = "0xC7168C", Slot = "6")]
		internal virtual int GetObstaclesCount()
		{
			return default(int);
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0xC7180C", Offset = "0xC7180C", VA = "0xC7180C", Slot = "7")]
		internal virtual int GetStreamCount()
		{
			return default(int);
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0xC7198C", Offset = "0xC7198C", VA = "0xC7198C", Slot = "8")]
		internal virtual int GetWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0xC71B0C", Offset = "0xC71B0C", VA = "0xC71B0C", Slot = "9")]
		internal virtual int GetHorizontalWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0xC71CA4", Offset = "0xC71CA4", VA = "0xC71CA4", Slot = "10")]
		internal virtual int GetTunnelCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002281")]
		internal abstract float GetBeatNumber();

		[Token(Token = "0x6002282")]
		[Address(RVA = "0xC71E44", Offset = "0xC71E44", VA = "0xC71E44")]
		protected Beat()
		{
		}
	}
	[Token(Token = "0x2000618")]
	public abstract class BeatAction
	{
		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Beat beat;

		[Token(Token = "0x40026AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Vector2 position;

		[Token(Token = "0x6002283")]
		[Address(RVA = "0xC71EF0", Offset = "0xC71EF0", VA = "0xC71EF0")]
		public BeatAction(Beat beat, Vector2 position)
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0xC71F38", Offset = "0xC71F38", VA = "0xC71F38")]
		public void SetBeat(Beat beat)
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0xC71F40", Offset = "0xC71F40", VA = "0xC71F40")]
		public Beat GetBeat()
		{
			return null;
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0xC71150", Offset = "0xC71150", VA = "0xC71150")]
		public Vector2 GetPosition()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0xC711BC", Offset = "0xC711BC", VA = "0xC711BC")]
		internal void SetPosition(Vector3 newPos)
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0xC71F48", Offset = "0xC71F48", VA = "0xC71F48")]
		public Vector2 GetRawPosition()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0xC71F50", Offset = "0xC71F50", VA = "0xC71F50")]
		internal void SetRawPosition(float x, float y)
		{
		}

		[Token(Token = "0x600228A")]
		internal abstract BeatAction DeepClone(Beat parent);

		[Token(Token = "0x600228B")]
		internal abstract void AdjustPositionForPlayWindow(Vector2 scale);
	}
	[Token(Token = "0x2000619")]
	public class BeatPattern : BeatSequence
	{
		[Token(Token = "0x170004D6")]
		public string Name
		{
			[Token(Token = "0x600228C")]
			[Address(RVA = "0xC71F58", Offset = "0xC71F58", VA = "0xC71F58")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600228D")]
			[Address(RVA = "0xC71F60", Offset = "0xC71F60", VA = "0xC71F60")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0xC71F68", Offset = "0xC71F68", VA = "0xC71F68")]
		public BeatPattern()
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0xC7204C", Offset = "0xC7204C", VA = "0xC7204C")]
		public BeatPattern(BeatPattern copy)
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0xC722A8", Offset = "0xC722A8", VA = "0xC722A8", Slot = "4")]
		internal override BeatSequence DeepClone()
		{
			return null;
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0xC72308", Offset = "0xC72308", VA = "0xC72308")]
		public void SetName(string name)
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0xC7232C", Offset = "0xC7232C", VA = "0xC7232C")]
		private static string MakeValidFileName(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x200061A")]
	public abstract class BeatSequence
	{
		[Token(Token = "0x200061B")]
		internal enum Direction
		{
			[Token(Token = "0x40026BD")]
			FORWARD,
			[Token(Token = "0x40026BE")]
			BACKWARD
		}

		[Token(Token = "0x200061C")]
		internal class MergeDifference
		{
			[Token(Token = "0x40026BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<BeatAction> added;

			[Token(Token = "0x40026C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal List<BeatAction> removed;

			[Token(Token = "0x60022D3")]
			[Address(RVA = "0xC781A8", Offset = "0xC781A8", VA = "0xC781A8")]
			public MergeDifference()
			{
			}
		}

		[Token(Token = "0x40026AF")]
		public const int ALL_BEATS = int.MaxValue;

		[Token(Token = "0x40026B0")]
		private const string SONG_NORMAL_BALL_NAME = "NormalBall";

		[Token(Token = "0x40026B1")]
		private const string SONG_POWER_BALL_NAME = "PowerBall";

		[Token(Token = "0x40026B2")]
		private const string SONG_BALL_OBSTACLE_NAME = "BallObstacle";

		[Token(Token = "0x40026B3")]
		private const string SONG_WALL_OBSTACLE_NAME = "WallObstacle";

		[Token(Token = "0x40026B4")]
		private const string SONG_STREAM_NAME = "Stream";

		[Token(Token = "0x40026B5")]
		private const float SIZE_HITTABLE = 0.225f;

		[Token(Token = "0x40026B6")]
		private const float SIZE_BALL_OBSTACLE = 0.3375f;

		[Token(Token = "0x40026B7")]
		private const float SIZE_STREAM = 0.1f;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SortedDictionary<int, OnBeat> beats;

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isGenerated;

		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<BezierListStruct> listStructCache;

		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool hadDoubleBalls;

		[Token(Token = "0x6002293")]
		[Address(RVA = "0xC71FBC", Offset = "0xC71FBC", VA = "0xC71FBC")]
		public BeatSequence()
		{
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0xC72080", Offset = "0xC72080", VA = "0xC72080")]
		protected BeatSequence(BeatSequence copy)
		{
		}

		[Token(Token = "0x6002295")]
		internal abstract BeatSequence DeepClone();

		[Token(Token = "0x6002296")]
		[Address(RVA = "0xC727F4", Offset = "0xC727F4", VA = "0xC727F4")]
		internal ICollection<OnBeat> GetOnBeats()
		{
			return null;
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0xC72898", Offset = "0xC72898", VA = "0xC72898")]
		internal OnBeat GetBeat(int currentBeat)
		{
			return null;
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0xC7292C", Offset = "0xC7292C", VA = "0xC7292C")]
		internal OnBeat AddBeat(OnBeat onBeat)
		{
			return null;
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0xC72994", Offset = "0xC72994", VA = "0xC72994")]
		internal int GetHittablesCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0xC72B30", Offset = "0xC72B30", VA = "0xC72B30")]
		internal int GetPowerBallsCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0xC72CCC", Offset = "0xC72CCC", VA = "0xC72CCC")]
		internal int GetObstaclesCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229C")]
		[Address(RVA = "0xC72E68", Offset = "0xC72E68", VA = "0xC72E68")]
		internal int GetStreamCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0xC73004", Offset = "0xC73004", VA = "0xC73004")]
		internal int GetWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0xC731A0", Offset = "0xC731A0", VA = "0xC731A0")]
		internal int GetHorizontalWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0xC7333C", Offset = "0xC7333C", VA = "0xC7333C")]
		internal int GetTunnelCount()
		{
			return default(int);
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0xC734D8", Offset = "0xC734D8", VA = "0xC734D8")]
		public int GetLastBeat()
		{
			return default(int);
		}

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0xC73570", Offset = "0xC73570", VA = "0xC73570")]
		public bool ExistsBeatsBetween(int beatStartExclusive, int beatEndExclusive)
		{
			return default(bool);
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0xC73704", Offset = "0xC73704", VA = "0xC73704")]
		internal SongStatistics GetStatistics()
		{
			return null;
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0xC74904", Offset = "0xC74904", VA = "0xC74904")]
		internal void LoadFromJSON(JSONArray beatsArray)
		{
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0xC74D78", Offset = "0xC74D78", VA = "0xC74D78")]
		private static void ResolveActionArray(Beat beat, JSONArray actionArray)
		{
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0xC757DC", Offset = "0xC757DC", VA = "0xC757DC")]
		public JSONArray SaveToJSON()
		{
			return null;
		}

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0xC75E8C", Offset = "0xC75E8C", VA = "0xC75E8C")]
		private JSONArray GetActionArray(Beat ob)
		{
			return null;
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0xC74684", Offset = "0xC74684", VA = "0xC74684")]
		internal List<Beat> GetFlattenedBeats()
		{
			return null;
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0xC765E4", Offset = "0xC765E4", VA = "0xC765E4")]
		internal List<Beat> GetFlattenedBeats(float from, float to)
		{
			return null;
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0xC76A18", Offset = "0xC76A18", VA = "0xC76A18")]
		internal StreamAction GetPreviousStreamActionAtBeat(StreamAction.Id id, float beat)
		{
			return null;
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0xC746C4", Offset = "0xC746C4", VA = "0xC746C4")]
		internal StreamAction GetNextStreamActionAtBeat(StreamAction.Id id, float beat)
		{
			return null;
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0xC76A74", Offset = "0xC76A74", VA = "0xC76A74")]
		private StreamAction FindStreamAction(List<Beat> allBeats, Direction direction, float from, bool inclusiveStart, float to, bool inclusiveEnd, StreamAction.Id id)
		{
			return null;
		}

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0xC76E94", Offset = "0xC76E94", VA = "0xC76E94")]
		internal BeatPattern ExtractPattern(int fromBeat, int toBeat)
		{
			return null;
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0xC77128", Offset = "0xC77128", VA = "0xC77128")]
		internal MergeDifference MergePattern(BeatPattern patternToMerge, int fromBeat, bool copyAdditive, bool copyMirrorX, bool copyMirrorY)
		{
			return null;
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0xC77124", Offset = "0xC77124", VA = "0xC77124")]
		private static void CheckSequenceForWallSanity(int fromBeat, int toBeat, List<Beat> allBeats)
		{
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0xC7804C", Offset = "0xC7804C", VA = "0xC7804C")]
		private bool CheckSequenceForOverlappingStreams(BeatPattern patternToMerge, int fromBeat, List<Beat> allBeats)
		{
			return default(bool);
		}

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0xC76FD0", Offset = "0xC76FD0", VA = "0xC76FD0")]
		private void CheckSequenceForStreamSanity(int fromBeat, int toBeat, List<Beat> allBeats)
		{
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0xC78494", Offset = "0xC78494", VA = "0xC78494")]
		private bool IsTouchedByStream(BeatPattern patternToMerge, int fromBeat, List<Beat> allBeats, StreamAction.Id id)
		{
			return default(bool);
		}

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0xC78260", Offset = "0xC78260", VA = "0xC78260")]
		private void ModifyAction(BeatAction ba, bool copyMirrorX, bool copyMirrorY, bool switchInputStream)
		{
		}

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0xC785EC", Offset = "0xC785EC", VA = "0xC785EC")]
		internal MergeDifference InsertBeat(int whereToInsert)
		{
			return null;
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0xC7873C", Offset = "0xC7873C", VA = "0xC7873C")]
		internal MergeDifference DeleteBeat(int beatWhereToShift)
		{
			return null;
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0xC78C9C", Offset = "0xC78C9C", VA = "0xC78C9C")]
		internal void ForceDeleteBeat(int beatNo)
		{
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0xC78CF4", Offset = "0xC78CF4", VA = "0xC78CF4")]
		internal int ConvertToHalfBeats(int firstBeat, int lastBeat)
		{
			return default(int);
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0xC79520", Offset = "0xC79520", VA = "0xC79520")]
		internal BeatSequence GetGameAdjustedCopy(Vector2 scaling, int ballFlightDuration, Song.Difficulty difficulty, Dictionary<GameConfiguration.Modifier, GameConfiguration.OffOn> modifiers)
		{
			return null;
		}

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0xC7B620", Offset = "0xC7B620", VA = "0xC7B620")]
		internal BeatSequence GetScaledOnlyCopy(Vector2 scaling)
		{
			return null;
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0xC74724", Offset = "0xC74724", VA = "0xC74724")]
		private void Cleanup(BeatSequence copy)
		{
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0xC79C88", Offset = "0xC79C88", VA = "0xC79C88")]
		private BeatSequence MakeModifierAdjustments(BeatSequence clone, Dictionary<GameConfiguration.Modifier, GameConfiguration.OffOn> modifiers, Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0xC7BFE8", Offset = "0xC7BFE8", VA = "0xC7BFE8")]
		private void SetHadDoubleBalls(bool v)
		{
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0xC7BFF4", Offset = "0xC7BFF4", VA = "0xC7BFF4")]
		public bool HadDoubleBalls()
		{
			return default(bool);
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0xC74378", Offset = "0xC74378", VA = "0xC74378")]
		private void RunSwingDetection(BeatSequence copy)
		{
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0xC7D2F0", Offset = "0xC7D2F0", VA = "0xC7D2F0")]
		private Beat GetBeatIfExists(BeatSequence layout, float fullBeatNumber)
		{
			return null;
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0xC7BFFC", Offset = "0xC7BFFC", VA = "0xC7BFFC")]
		private Swing[] FindSwing(BeatSequence bs, HittableAction thisFirstBall)
		{
			return null;
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0xC7BDA0", Offset = "0xC7BDA0", VA = "0xC7BDA0")]
		private static List<HittableAction> GetHittablesOnBeat(Beat someBeat)
		{
			return null;
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0xC7B654", Offset = "0xC7B654", VA = "0xC7B654")]
		internal BeatSequence MakeScaleOnlyAdjustments(BeatSequence clone, Vector2 scaling)
		{
			return null;
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0xC7AB20", Offset = "0xC7AB20", VA = "0xC7AB20")]
		internal BeatSequence MakePlayspaceAdjustments(BeatSequence clone, Vector2 scaling, int ballFlightDuration)
		{
			return null;
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0xC7D82C", Offset = "0xC7D82C", VA = "0xC7D82C")]
		private void FixBallOverlap(List<BeatAction> bas)
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0xC7963C", Offset = "0xC7963C", VA = "0xC7963C")]
		private void RunStreamDetection(BeatSequence copy, float ballFlightDuration)
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0xC7DB5C", Offset = "0xC7DB5C", VA = "0xC7DB5C")]
		private void HandleStreams(Beat clonedBeat, Dictionary<StreamAction.Id, StreamAction> streamStarts)
		{
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0xC7F9B4", Offset = "0xC7F9B4", VA = "0xC7F9B4")]
		private string V3TS(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0xC7FBD0", Offset = "0xC7FBD0", VA = "0xC7FBD0")]
		private bool IsBetween(Vector2 streamPositionHereA, Vector2 streamPositionHereB, BeatAction ba)
		{
			return default(bool);
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0xC7F2A0", Offset = "0xC7F2A0", VA = "0xC7F2A0")]
		private StreamAction GetStreamStartAction(Beat clonedBeat, StreamAction.Id id)
		{
			return null;
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0xC7B964", Offset = "0xC7B964", VA = "0xC7B964")]
		private StreamAction GetStreamAction(Beat clonedBeat, StreamAction.Id id)
		{
			return null;
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0xC7F110", Offset = "0xC7F110", VA = "0xC7F110")]
		private float GetDistanceBetween(BeatAction ba1, BeatAction ba2)
		{
			return default(float);
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0xC7F1AC", Offset = "0xC7F1AC", VA = "0xC7F1AC")]
		private float GetRequiredMinimumDistance(BeatAction ba1, BeatAction ba2)
		{
			return default(float);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0xC7FCA0", Offset = "0xC7FCA0", VA = "0xC7FCA0")]
		private float GetRequiredMinimumDistanceForStream(BeatAction ba1, bool upwards = false)
		{
			return default(float);
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0xC7F1D8", Offset = "0xC7F1D8", VA = "0xC7F1D8")]
		private float GetBallRadius(BeatAction ba)
		{
			return default(float);
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0xC7D524", Offset = "0xC7D524", VA = "0xC7D524")]
		private List<BeatAction> GetBallActions(Beat beat)
		{
			return null;
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0xC6B570", Offset = "0xC6B570", VA = "0xC6B570")]
		internal float GetLayoutLengthInBeats()
		{
			return default(float);
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0xC7FD4C", Offset = "0xC7FD4C", VA = "0xC7FD4C")]
		internal bool IsGenerated()
		{
			return default(bool);
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0xC7FD54", Offset = "0xC7FD54", VA = "0xC7FD54")]
		internal void SetGenerated(bool generated)
		{
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0xC7FD60", Offset = "0xC7FD60", VA = "0xC7FD60")]
		public string GetLastLabel(int beatCounter)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200061E")]
	internal class BeatSequenceException : Exception
	{
		[Token(Token = "0x60022D7")]
		[Address(RVA = "0xC7FE10", Offset = "0xC7FE10", VA = "0xC7FE10")]
		public BeatSequenceException()
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0xC78584", Offset = "0xC78584", VA = "0xC78584")]
		public BeatSequenceException(string message)
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0xC7FE68", Offset = "0xC7FE68", VA = "0xC7FE68")]
		protected BeatSequenceException(SerializationInfo info, StreamingContext context)
		{
		}
	}
	[Token(Token = "0x200061F")]
	internal class BezierListStruct
	{
		[Token(Token = "0x40026C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<BezierPointStruct> listOfPoints;

		[Token(Token = "0x40026C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float startBeatNumber;

		[Token(Token = "0x40026C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float unitsPerBeat;

		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BezierSpline spline;

		[Token(Token = "0x40026C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<float, Vector3> positionsOfFullBeats;

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0xC7F448", Offset = "0xC7F448", VA = "0xC7F448")]
		public BezierListStruct(float beatStart, float unitsPerBeat)
		{
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0xC7F4E8", Offset = "0xC7F4E8", VA = "0xC7F4E8")]
		internal void PopulateFromStartAction(BeatSequence seq, StreamAction action)
		{
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0xC7FEF0", Offset = "0xC7FEF0", VA = "0xC7FEF0")]
		internal void CopyIntoSpline(BezierSpline spline)
		{
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0xC7F6E8", Offset = "0xC7F6E8", VA = "0xC7F6E8")]
		internal void CreateSpline()
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0xC800E8", Offset = "0xC800E8", VA = "0xC800E8")]
		public float GetStartBeatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0xC800F0", Offset = "0xC800F0", VA = "0xC800F0")]
		internal float GetLastBeatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0xC7B8F0", Offset = "0xC7B8F0", VA = "0xC7B8F0")]
		internal void Destroy()
		{
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0xC7F798", Offset = "0xC7F798", VA = "0xC7F798")]
		internal void CalculateSplineBeatPositions()
		{
		}

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0xC7BB04", Offset = "0xC7BB04", VA = "0xC7BB04")]
		internal Vector3 GetPosition(float beatNumber)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000621")]
	internal class BezierPointStruct
	{
		[Token(Token = "0x40026C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Quaternion rotation;

		[Token(Token = "0x40026CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Vector3 position;

		[Token(Token = "0x40026CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal Vector3 precedingControlPointLocalPosition;

		[Token(Token = "0x40026CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Vector3 followingControlPointLocalPosition;

		[Token(Token = "0x40026CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float beat;

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0xC7FEE8", Offset = "0xC7FEE8", VA = "0xC7FEE8")]
		public BezierPointStruct()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public abstract class HittableAction : BeatAction
	{
		[Token(Token = "0x40026CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Swing belongsToSwing;

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0xC801CC", Offset = "0xC801CC", VA = "0xC801CC")]
		public HittableAction(Beat beat, Vector2 position)
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0xC80214", Offset = "0xC80214", VA = "0xC80214", Slot = "5")]
		internal override void AdjustPositionForPlayWindow(Vector2 scale)
		{
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0xC746B4", Offset = "0xC746B4", VA = "0xC746B4")]
		internal bool IsPartOfSwing()
		{
			return default(bool);
		}

		[Token(Token = "0x60022E9")]
		[Address(RVA = "0xC8025C", Offset = "0xC8025C", VA = "0xC8025C")]
		internal void RegisterSwing(Swing swing)
		{
		}

		[Token(Token = "0x60022EA")]
		[Address(RVA = "0xC80264", Offset = "0xC80264", VA = "0xC80264")]
		internal Swing GetSwing()
		{
			return null;
		}

		[Token(Token = "0x60022EB")]
		[Address(RVA = "0xC74694", Offset = "0xC74694", VA = "0xC74694")]
		internal bool IsStartOfSwing()
		{
			return default(bool);
		}

		[Token(Token = "0x60022EC")]
		[Address(RVA = "0xC8026C", Offset = "0xC8026C", VA = "0xC8026C")]
		internal bool IsEndOfSwing()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000623")]
	public class NormalBallAction : HittableAction
	{
		[Token(Token = "0x60022ED")]
		[Address(RVA = "0xC7574C", Offset = "0xC7574C", VA = "0xC7574C")]
		public NormalBallAction(Beat beat, Vector2 position)
		{
		}

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0xC8028C", Offset = "0xC8028C", VA = "0xC8028C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0xC80348", Offset = "0xC80348", VA = "0xC80348", Slot = "4")]
		internal override BeatAction DeepClone(Beat parent)
		{
			return null;
		}
	}
	[Token(Token = "0x2000624")]
	public abstract class ObstacleAction : BeatAction
	{
		[Token(Token = "0x60022F0")]
		[Address(RVA = "0xC7103C", Offset = "0xC7103C", VA = "0xC7103C")]
		public ObstacleAction(Beat beat, Vector2 position)
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class OffBeat : Beat
	{
		[Token(Token = "0x40026CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float offset;

		[Token(Token = "0x40026D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OnBeat onBeat;

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0xC75594", Offset = "0xC75594", VA = "0xC75594")]
		public OffBeat(OnBeat onBeat, float offset)
		{
		}

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0xC803CC", Offset = "0xC803CC", VA = "0xC803CC")]
		public float GetOffset()
		{
			return default(float);
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0xC803D4", Offset = "0xC803D4", VA = "0xC803D4", Slot = "11")]
		internal override float GetBeatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0xC80404", Offset = "0xC80404", VA = "0xC80404")]
		internal OffBeat DeepClone(OnBeat newParent)
		{
			return null;
		}
	}
	[Token(Token = "0x2000626")]
	public class OnBeat : Beat
	{
		[Token(Token = "0x40026D1")]
		private const int USE_EXISTING = -99;

		[Token(Token = "0x40026D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int beatNo;

		[Token(Token = "0x40026D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<OffBeat> offBeats;

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0xC74CE0", Offset = "0xC74CE0", VA = "0xC74CE0")]
		public OnBeat(int beatNo)
		{
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0xC8064C", Offset = "0xC8064C", VA = "0xC8064C")]
		public List<OffBeat> GetOffBeats()
		{
			return null;
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0xC755D4", Offset = "0xC755D4", VA = "0xC755D4")]
		public void AddOffBeat(OffBeat offBeat)
		{
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0xC75408", Offset = "0xC75408", VA = "0xC75408")]
		internal OffBeat GetOffBeat(float offset)
		{
			return null;
		}

		[Token(Token = "0x60022F9")]
		[Address(RVA = "0xC80654", Offset = "0xC80654", VA = "0xC80654")]
		public int GetBeatNo()
		{
			return default(int);
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0xC8065C", Offset = "0xC8065C", VA = "0xC8065C")]
		public bool HasAnyActions()
		{
			return default(bool);
		}

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0xC807FC", Offset = "0xC807FC", VA = "0xC807FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0xC80DD4", Offset = "0xC80DD4", VA = "0xC80DD4", Slot = "4")]
		internal override int GetHittablesCount()
		{
			return default(int);
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0xC80F3C", Offset = "0xC80F3C", VA = "0xC80F3C", Slot = "5")]
		internal override int GetPowerBallsCount()
		{
			return default(int);
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0xC810A4", Offset = "0xC810A4", VA = "0xC810A4", Slot = "6")]
		internal override int GetObstaclesCount()
		{
			return default(int);
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0xC8120C", Offset = "0xC8120C", VA = "0xC8120C", Slot = "7")]
		internal override int GetStreamCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0xC81374", Offset = "0xC81374", VA = "0xC81374", Slot = "8")]
		internal override int GetWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0xC814DC", Offset = "0xC814DC", VA = "0xC814DC", Slot = "9")]
		internal override int GetHorizontalWallCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0xC81644", Offset = "0xC81644", VA = "0xC81644", Slot = "10")]
		internal override int GetTunnelCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002303")]
		[Address(RVA = "0xC817AC", Offset = "0xC817AC", VA = "0xC817AC", Slot = "11")]
		internal override float GetBeatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x6002304")]
		[Address(RVA = "0xC72420", Offset = "0xC72420", VA = "0xC72420")]
		internal OnBeat DeepClone(int beatNoToUse = -99)
		{
			return null;
		}

		[Token(Token = "0x6002305")]
		[Address(RVA = "0xC817B8", Offset = "0xC817B8", VA = "0xC817B8")]
		internal void AdjustSetBeatNumber(int newBeatNumber)
		{
		}

		[Token(Token = "0x6002306")]
		[Address(RVA = "0xC78AD8", Offset = "0xC78AD8", VA = "0xC78AD8")]
		internal List<BeatAction> GetFlattenedActions()
		{
			return null;
		}
	}
	[Token(Token = "0x2000627")]
	public class PatternManager : MonoBehaviour
	{
		[Token(Token = "0x40026D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string PATTERN_DIRECTORY_NAME;

		[Token(Token = "0x40026D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string patternFolder;

		[Token(Token = "0x40026D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextAsset[] builtInPatterns;

		[Token(Token = "0x40026D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<BeatPattern> patterns;

		[Token(Token = "0x6002307")]
		[Address(RVA = "0xC817C0", Offset = "0xC817C0", VA = "0xC817C0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002308")]
		[Address(RVA = "0xC81BE0", Offset = "0xC81BE0", VA = "0xC81BE0")]
		private BeatPattern Load(string fileName)
		{
			return null;
		}

		[Token(Token = "0x6002309")]
		[Address(RVA = "0xC81CF4", Offset = "0xC81CF4", VA = "0xC81CF4")]
		internal void AddAndSave(BeatPattern pattern)
		{
		}

		[Token(Token = "0x600230A")]
		[Address(RVA = "0xC82034", Offset = "0xC82034", VA = "0xC82034")]
		private void SortPatternsByName()
		{
		}

		[Token(Token = "0x600230B")]
		[Address(RVA = "0xC8213C", Offset = "0xC8213C", VA = "0xC8213C")]
		internal List<BeatPattern> GetPatterns()
		{
			return null;
		}

		[Token(Token = "0x600230C")]
		[Address(RVA = "0xC82144", Offset = "0xC82144", VA = "0xC82144")]
		internal void DeletePattern(BeatPattern pattern)
		{
		}

		[Token(Token = "0x600230D")]
		[Address(RVA = "0xC81EA4", Offset = "0xC81EA4", VA = "0xC81EA4")]
		internal BeatPattern GetPattern(string patternName)
		{
			return null;
		}

		[Token(Token = "0x600230E")]
		[Address(RVA = "0xC821D0", Offset = "0xC821D0", VA = "0xC821D0")]
		public PatternManager()
		{
		}
	}
	[Token(Token = "0x2000629")]
	public class PowerBallAction : HittableAction
	{
		[Token(Token = "0x6002313")]
		[Address(RVA = "0xC75794", Offset = "0xC75794", VA = "0xC75794")]
		public PowerBallAction(Beat beat, Vector2 position)
		{
		}

		[Token(Token = "0x6002314")]
		[Address(RVA = "0xC822E4", Offset = "0xC822E4", VA = "0xC822E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002315")]
		[Address(RVA = "0xC823A0", Offset = "0xC823A0", VA = "0xC823A0", Slot = "4")]
		internal override BeatAction DeepClone(Beat parent)
		{
			return null;
		}
	}
	[Token(Token = "0x200062A")]
	public class Song
	{
		[Token(Token = "0x200062B")]
		public enum SongType
		{
			[Token(Token = "0x40026E7")]
			Internal,
			[Token(Token = "0x40026E8")]
			External
		}

		[Token(Token = "0x200062C")]
		public enum Difficulty
		{
			[Token(Token = "0x40026EA")]
			Beginner,
			[Token(Token = "0x40026EB")]
			Advanced,
			[Token(Token = "0x40026EC")]
			Expert
		}

		[Token(Token = "0x200062D")]
		public enum BPMRange
		{
			[Token(Token = "0x40026EE")]
			Low,
			[Token(Token = "0x40026EF")]
			Mid,
			[Token(Token = "0x40026F0")]
			High
		}

		[Token(Token = "0x200062E")]
		public enum LoadingState
		{
			[Token(Token = "0x40026F2")]
			NothingLoaded,
			[Token(Token = "0x40026F3")]
			Loading,
			[Token(Token = "0x40026F4")]
			Done_OK,
			[Token(Token = "0x40026F5")]
			Done_Cancelled,
			[Token(Token = "0x40026F6")]
			Done_Error,
			[Token(Token = "0x40026F7")]
			Done_ErrorAnalyzing,
			[Token(Token = "0x40026F8")]
			Destroyed
		}

		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly float UNKNOWN;

		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string name;

		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string author;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SongType type;

		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string fullPathToAudioFile;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float offset;

		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float bpm;

		[Token(Token = "0x40026E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioClip clip;

		[Token(Token = "0x40026E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<Difficulty, SongLayout> layouts;

		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Difficulty, int> maxHighscore;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string errorMessage;

		[Token(Token = "0x170004D7")]
		public LoadingState loadingState
		{
			[Token(Token = "0x6002316")]
			[Address(RVA = "0xC82424", Offset = "0xC82424", VA = "0xC82424")]
			[CompilerGenerated]
			get
			{
				return default(LoadingState);
			}
			[Token(Token = "0x6002317")]
			[Address(RVA = "0xC8242C", Offset = "0xC8242C", VA = "0xC8242C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0xC82434", Offset = "0xC82434", VA = "0xC82434")]
		public static string GetSongDifficultyLocalizationKey(Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0xC824C8", Offset = "0xC824C8", VA = "0xC824C8")]
		public Song(SongType type, string fullPathToAudioFile)
		{
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0xC826D8", Offset = "0xC826D8", VA = "0xC826D8")]
		internal void UpdateInformation(string name, string author, float bpm, float offset)
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0xC82720", Offset = "0xC82720", VA = "0xC82720")]
		internal void AddLayout(SongLayout layout)
		{
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0xC82780", Offset = "0xC82780", VA = "0xC82780")]
		internal void ReplaceLayout(SongLayout replaceLayout)
		{
		}

		[Token(Token = "0x600231D")]
		[Address(RVA = "0xC827E0", Offset = "0xC827E0", VA = "0xC827E0")]
		internal float GetBeatsPerMinute()
		{
			return default(float);
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0xC827E8", Offset = "0xC827E8", VA = "0xC827E8")]
		internal float GetFirstBeatOffsetInSeconds()
		{
			return default(float);
		}

		[Token(Token = "0x600231F")]
		[Address(RVA = "0xC827F0", Offset = "0xC827F0", VA = "0xC827F0")]
		internal void SetFirstBeatOffsetInSeconds(float newOffset)
		{
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0xC827F8", Offset = "0xC827F8", VA = "0xC827F8")]
		internal bool HasLayout(Difficulty difficulty)
		{
			return default(bool);
		}

		[Token(Token = "0x6002321")]
		[Address(RVA = "0xC6B4F8", Offset = "0xC6B4F8", VA = "0xC6B4F8")]
		internal SongLayout GetLayout(Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x6002322")]
		[Address(RVA = "0xC82850", Offset = "0xC82850", VA = "0xC82850")]
		internal SongType GetSongType()
		{
			return default(SongType);
		}

		[Token(Token = "0x6002323")]
		[Address(RVA = "0xC82858", Offset = "0xC82858", VA = "0xC82858")]
		internal AudioClip GetAudioClip()
		{
			return null;
		}

		[Token(Token = "0x6002324")]
		[Address(RVA = "0xC82860", Offset = "0xC82860", VA = "0xC82860")]
		internal void SetErrorWhileLoading(string error)
		{
		}

		[Token(Token = "0x6002325")]
		[Address(RVA = "0xC828A0", Offset = "0xC828A0", VA = "0xC828A0")]
		internal void SetAudioClip(AudioClip clip)
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0xC828A8", Offset = "0xC828A8", VA = "0xC828A8")]
		public string GetErrorMessage()
		{
			return null;
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0xC82904", Offset = "0xC82904", VA = "0xC82904")]
		internal string GetName()
		{
			return null;
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0xC8290C", Offset = "0xC8290C", VA = "0xC8290C")]
		internal string GetAuthor()
		{
			return null;
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0xC82914", Offset = "0xC82914", VA = "0xC82914")]
		internal Difficulty GetFirstAvailableDifficulty()
		{
			return default(Difficulty);
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0xC82970", Offset = "0xC82970", VA = "0xC82970")]
		internal string GetFullPathToAudioFile()
		{
			return null;
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0xC82978", Offset = "0xC82978", VA = "0xC82978")]
		internal void SetBeatsPerMinute(float newBPM)
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0xC6B4E4", Offset = "0xC6B4E4", VA = "0xC6B4E4")]
		internal float GetSecondsPerBeat()
		{
			return default(float);
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0xC82980", Offset = "0xC82980", VA = "0xC82980")]
		internal BPMRange GetBPMRange()
		{
			return default(BPMRange);
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0xC829B0", Offset = "0xC829B0", VA = "0xC829B0")]
		public bool NeedsGeneration(Difficulty difficulty)
		{
			return default(bool);
		}

		[Token(Token = "0x600232F")]
		[Address(RVA = "0xC82A48", Offset = "0xC82A48", VA = "0xC82A48")]
		public void SetMaxHighscore(Difficulty difficulty, int maxHighscore)
		{
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0xC82AB0", Offset = "0xC82AB0", VA = "0xC82AB0")]
		public int GetMaxHighscore(Difficulty difficulty)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200062F")]
	public class SongLayout : BeatSequence
	{
		[Token(Token = "0x40026F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Song song;

		[Token(Token = "0x40026FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Song.Difficulty difficulty;

		[Token(Token = "0x6002332")]
		[Address(RVA = "0xC82B54", Offset = "0xC82B54", VA = "0xC82B54")]
		public SongLayout(Song song, Song.Difficulty difficulty, bool isGenerated)
		{
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0xC82BA0", Offset = "0xC82BA0", VA = "0xC82BA0")]
		public SongLayout(SongLayout copy)
		{
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0xC82BE0", Offset = "0xC82BE0", VA = "0xC82BE0", Slot = "4")]
		internal override BeatSequence DeepClone()
		{
			return null;
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0xC82C40", Offset = "0xC82C40", VA = "0xC82C40")]
		public Song.Difficulty GetDifficulty()
		{
			return default(Song.Difficulty);
		}
	}
	[Token(Token = "0x2000630")]
	public class SongManager : MonoBehaviour
	{
		[Token(Token = "0x2000631")]
		public enum SaveType
		{
			[Token(Token = "0x400270B")]
			NORMAL,
			[Token(Token = "0x400270C")]
			AUTOSAVE
		}

		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool FULL_LOG;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string FILE_EXT;

		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly string FILE_EXT_AUTOSAVE;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string RESOURCES_INTERNAL_SONGS_DIRECTORY_NAME;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string EXTERNAL_LAYOUTS_DIRECTORY_NAME_SONGS_DIRECTORY_NAME;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string INTERNAL_SONG_PATH_PREFIX;

		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly int MAX_EXTERNAL_SONGS_IN_MEMORY;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly string[] SONGS_INTERNAL;

		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly string[] SONGS_INTERNAL_2;

		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<List<Song>> internalSongs;

		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Song> externalSongs;

		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string externalLayoutsFolder;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SongImporter> runningInstancesNAudio;

		[Token(Token = "0x4002708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Song newSongToLoad;

		[Token(Token = "0x4002709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FFMPEGAudioImporter singleRunningFFMPEGInstance;

		[Token(Token = "0x6002336")]
		[Address(RVA = "0xC82C48", Offset = "0xC82C48", VA = "0xC82C48")]
		internal void Awake()
		{
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0xC83120", Offset = "0xC83120", VA = "0xC83120")]
		private string AddInternal(string path)
		{
			return null;
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0xC83784", Offset = "0xC83784", VA = "0xC83784")]
		private string RemoveInternal(string path)
		{
			return null;
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0xC6F320", Offset = "0xC6F320", VA = "0xC6F320")]
		public Song RetrieveSong(PlaylistEntry entry)
		{
			return null;
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0xC837F8", Offset = "0xC837F8", VA = "0xC837F8")]
		public int FindSongPack(Song song)
		{
			return default(int);
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0xC83184", Offset = "0xC83184", VA = "0xC83184")]
		public Song RetrieveSong(Song.SongType type, string fullPathToAudioFile)
		{
			return null;
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0xC840D0", Offset = "0xC840D0", VA = "0xC840D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0xC83974", Offset = "0xC83974", VA = "0xC83974")]
		private void LoadSongInformationFromJSON(Song song, string json)
		{
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0xC84040", Offset = "0xC84040", VA = "0xC84040")]
		private IEnumerator LoadAudioFile(Song song)
		{
			return null;
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0xC84374", Offset = "0xC84374", VA = "0xC84374")]
		private IEnumerator LoadAudioClipUsingUnity(Song song)
		{
			return null;
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0xC84404", Offset = "0xC84404", VA = "0xC84404")]
		private IEnumerator ContinueMonitoringLoading(Song song, UnityWebRequest webRequest)
		{
			return null;
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0xC844A8", Offset = "0xC844A8", VA = "0xC844A8")]
		private void SongImporterCallbackFFMPEG(FFMPEGAudioImporter importer)
		{
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0xC84944", Offset = "0xC84944", VA = "0xC84944")]
		private void DestroyInstance(FFMPEGAudioImporter importer)
		{
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0xC849CC", Offset = "0xC849CC", VA = "0xC849CC")]
		private void SongImporterCallbackNAudio(SongImporter si)
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0xC83ED8", Offset = "0xC83ED8", VA = "0xC83ED8")]
		private void StoreSongInPreferences(string fullPath)
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0xC84D70", Offset = "0xC84D70", VA = "0xC84D70")]
		internal List<Song> GetInternalSongs(int songPack)
		{
			return null;
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0xC84DF0", Offset = "0xC84DF0", VA = "0xC84DF0")]
		public void PersistAll(Song song, SaveType type)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0xC852D0", Offset = "0xC852D0", VA = "0xC852D0")]
		public SongManager()
		{
		}
	}
	[Token(Token = "0x2000636")]
	public class StreamAction : BeatAction
	{
		[Token(Token = "0x2000637")]
		public enum CAType
		{
			[Token(Token = "0x4002726")]
			START,
			[Token(Token = "0x4002727")]
			INBETWEEN,
			[Token(Token = "0x4002728")]
			END
		}

		[Token(Token = "0x2000638")]
		public enum Id
		{
			[Token(Token = "0x400272A")]
			A,
			[Token(Token = "0x400272B")]
			B
		}

		[Token(Token = "0x400271F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CAType type;

		[Token(Token = "0x4002720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Id id;

		[Token(Token = "0x4002721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion rotation;

		[Token(Token = "0x4002722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 inHandle;

		[Token(Token = "0x4002723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 outHandle;

		[Token(Token = "0x4002724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BezierListStruct streamInfo;

		[Token(Token = "0x600235E")]
		[Address(RVA = "0xC992C0", Offset = "0xC992C0", VA = "0xC992C0")]
		public StreamAction(Beat beat, Vector2 position, CAType type, Id id, Quaternion rotation, Vector3 inHandle, Vector3 outHandle)
		{
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0xC99344", Offset = "0xC99344", VA = "0xC99344")]
		public CAType GetCAType()
		{
			return default(CAType);
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0xC9934C", Offset = "0xC9934C", VA = "0xC9934C")]
		public Id GetId()
		{
			return default(Id);
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0xC99354", Offset = "0xC99354", VA = "0xC99354")]
		public Quaternion GetRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0xC99360", Offset = "0xC99360", VA = "0xC99360")]
		public Vector3 GetInHandle()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0xC9936C", Offset = "0xC9936C", VA = "0xC9936C")]
		public Vector3 GetOutHandle()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0xC99378", Offset = "0xC99378", VA = "0xC99378")]
		internal void SetRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0xC99384", Offset = "0xC99384", VA = "0xC99384")]
		internal void SetInHandle(Vector3 handle)
		{
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0xC99390", Offset = "0xC99390", VA = "0xC99390")]
		internal void SetOutHandle(Vector3 handle)
		{
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0xC9939C", Offset = "0xC9939C", VA = "0xC9939C")]
		internal void SetCAType(CAType type)
		{
		}

		[Token(Token = "0x6002368")]
		[Address(RVA = "0xC993A4", Offset = "0xC993A4", VA = "0xC993A4", Slot = "4")]
		internal override BeatAction DeepClone(Beat parent)
		{
			return null;
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0xC99494", Offset = "0xC99494", VA = "0xC99494")]
		internal void AdjustSetId(Id newId)
		{
		}

		[Token(Token = "0x600236A")]
		[Address(RVA = "0xC9949C", Offset = "0xC9949C", VA = "0xC9949C", Slot = "5")]
		internal override void AdjustPositionForPlayWindow(Vector2 scale)
		{
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0xC994F0", Offset = "0xC994F0", VA = "0xC994F0")]
		internal void SetStreamInfo(BezierListStruct streamInfo)
		{
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0xC99528", Offset = "0xC99528", VA = "0xC99528")]
		internal BezierListStruct GetStreamInfo()
		{
			return null;
		}
	}
	[Token(Token = "0x2000639")]
	internal class Swing
	{
		[Token(Token = "0x400272C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isDoubleSwing;

		[Token(Token = "0x400272D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HittableAction b1_1;

		[Token(Token = "0x400272E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HittableAction b1_2;

		[Token(Token = "0x400272F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HittableAction b1_3;

		[Token(Token = "0x4002730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Swing otherSwing;

		[Token(Token = "0x600236D")]
		[Address(RVA = "0xC99530", Offset = "0xC99530", VA = "0xC99530")]
		public Swing(bool isDoubleSwing, HittableAction firstBall, HittableAction midBall, HittableAction lastBall)
		{
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0xC99598", Offset = "0xC99598", VA = "0xC99598")]
		internal void Register()
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0xC995E4", Offset = "0xC995E4", VA = "0xC995E4")]
		internal void SetOtherSwing(Swing s2)
		{
		}

		[Token(Token = "0x6002370")]
		[Address(RVA = "0xC995EC", Offset = "0xC995EC", VA = "0xC995EC")]
		internal HittableAction GetFirstBall()
		{
			return null;
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0xC995F4", Offset = "0xC995F4", VA = "0xC995F4")]
		internal HittableAction GetLastBall()
		{
			return null;
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0xC995FC", Offset = "0xC995FC", VA = "0xC995FC")]
		internal bool IsDouble()
		{
			return default(bool);
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0xC99604", Offset = "0xC99604", VA = "0xC99604")]
		internal Swing GetOtherSwing()
		{
			return null;
		}
	}
	[Token(Token = "0x200063A")]
	public class WallObstacleAction : ObstacleAction
	{
		[Token(Token = "0x200063B")]
		public enum WallType
		{
			[Token(Token = "0x4002734")]
			SingleColumn,
			[Token(Token = "0x4002735")]
			DoubleColumn,
			[Token(Token = "0x4002736")]
			ArchwayCenter,
			[Token(Token = "0x4002737")]
			ArchwayLeft,
			[Token(Token = "0x4002738")]
			ArchwayRight,
			[Token(Token = "0x4002739")]
			OpeningLeft,
			[Token(Token = "0x400273A")]
			OpeningRight,
			[Token(Token = "0x400273B")]
			BarAcrossTheForehead
		}

		[Token(Token = "0x4002731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int wallType;

		[Token(Token = "0x4002732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float depthInBeats;

		[Token(Token = "0x6002374")]
		[Address(RVA = "0xC9960C", Offset = "0xC9960C", VA = "0xC9960C")]
		public WallObstacleAction(Beat beat, Vector2 position, int wallType, float depthInBeats)
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0xC99644", Offset = "0xC99644", VA = "0xC99644")]
		internal int GetTypeOfWall()
		{
			return default(int);
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0xC9964C", Offset = "0xC9964C", VA = "0xC9964C")]
		internal static int GetTypeOfWallAsInt(WallType wallType)
		{
			return default(int);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0xC99650", Offset = "0xC99650", VA = "0xC99650")]
		internal static WallType GetTypeOfWallAsEnum(int wallType)
		{
			return default(WallType);
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0xC99654", Offset = "0xC99654", VA = "0xC99654")]
		internal void SetTypeOfWall(int type)
		{
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0xC9965C", Offset = "0xC9965C", VA = "0xC9965C")]
		internal float GetDepthInBeats()
		{
			return default(float);
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0xC99664", Offset = "0xC99664", VA = "0xC99664")]
		internal void SetDepthInBeats(float depthInBeats)
		{
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0xC9966C", Offset = "0xC9966C", VA = "0xC9966C", Slot = "4")]
		internal override BeatAction DeepClone(Beat parent)
		{
			return null;
		}

		[Token(Token = "0x600237C")]
		[Address(RVA = "0xC996F8", Offset = "0xC996F8", VA = "0xC996F8", Slot = "5")]
		internal override void AdjustPositionForPlayWindow(Vector2 scale)
		{
		}

		[Token(Token = "0x600237D")]
		[Address(RVA = "0xC997F0", Offset = "0xC997F0", VA = "0xC997F0")]
		internal Vector2 GetFrontScale(Vector2 scale)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x200063C")]
	public interface BeatProvider
	{
		[Token(Token = "0x600237E")]
		Beat GetBeatForBeatNumber(int fullBeat);

		[Token(Token = "0x600237F")]
		bool HasBeatsLeft(int fullBeat);

		[Token(Token = "0x6002380")]
		bool ExistsBeatsBetween(int beatStartExclusive, int beatEndExclusive);

		[Token(Token = "0x6002381")]
		StreamAction GetNextStreamActionAtBeat(StreamAction.Id id, float beat);
	}
	[Token(Token = "0x200063D")]
	public class StaticSongLayoutBeatProvider : BeatProvider
	{
		[Token(Token = "0x400273C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BeatSequence songLayout;

		[Token(Token = "0x6002382")]
		[Address(RVA = "0xC99868", Offset = "0xC99868", VA = "0xC99868")]
		public StaticSongLayoutBeatProvider(BeatSequence songLayout)
		{
		}

		[Token(Token = "0x6002383")]
		[Address(RVA = "0xC99898", Offset = "0xC99898", VA = "0xC99898", Slot = "6")]
		public bool ExistsBeatsBetween(int beatStartExclusive, int beatEndExclusive)
		{
			return default(bool);
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0xC998B4", Offset = "0xC998B4", VA = "0xC998B4", Slot = "4")]
		public Beat GetBeatForBeatNumber(int fullBeat)
		{
			return null;
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0xC998D0", Offset = "0xC998D0", VA = "0xC998D0", Slot = "5")]
		public bool HasBeatsLeft(int fullBeat)
		{
			return default(bool);
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0xC998FC", Offset = "0xC998FC", VA = "0xC998FC", Slot = "7")]
		public StreamAction GetNextStreamActionAtBeat(StreamAction.Id id, float beat)
		{
			return null;
		}
	}
	[Token(Token = "0x200063E")]
	internal class TutorialManager : BeatProvider
	{
		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameManager gameManager;

		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TutorialStep step;

		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int currentBeat;

		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool isTutorialFinished;

		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int successCount;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Queue<TutorialStep> steps;

		[Token(Token = "0x1400003A")]
		public event Action DamageInflicted
		{
			[Token(Token = "0x6002387")]
			[Address(RVA = "0xC99918", Offset = "0xC99918", VA = "0xC99918")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002388")]
			[Address(RVA = "0xC999B4", Offset = "0xC999B4", VA = "0xC999B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003B")]
		public event Action<bool> BallHit
		{
			[Token(Token = "0x6002389")]
			[Address(RVA = "0xC99A50", Offset = "0xC99A50", VA = "0xC99A50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600238A")]
			[Address(RVA = "0xC99B00", Offset = "0xC99B00", VA = "0xC99B00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003C")]
		public event Action StreamElementSpawned
		{
			[Token(Token = "0x600238B")]
			[Address(RVA = "0xC99BB0", Offset = "0xC99BB0", VA = "0xC99BB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600238C")]
			[Address(RVA = "0xC99C4C", Offset = "0xC99C4C", VA = "0xC99C4C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400003D")]
		public event Action StreamElementMissed
		{
			[Token(Token = "0x600238D")]
			[Address(RVA = "0xC99CE8", Offset = "0xC99CE8", VA = "0xC99CE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600238E")]
			[Address(RVA = "0xC99D84", Offset = "0xC99D84", VA = "0xC99D84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600238F")]
		[Address(RVA = "0xC99E20", Offset = "0xC99E20", VA = "0xC99E20")]
		public TutorialManager(GameManager gameManager)
		{
		}

		[Token(Token = "0x6002390")]
		[Address(RVA = "0xC9A400", Offset = "0xC9A400", VA = "0xC9A400")]
		private void GameManager_StreamElementMissed()
		{
		}

		[Token(Token = "0x6002391")]
		[Address(RVA = "0xC9A41C", Offset = "0xC9A41C", VA = "0xC9A41C")]
		private void GameManager_StreamElementSpawned()
		{
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0xC9A438", Offset = "0xC9A438", VA = "0xC9A438")]
		private void GameManager_DamageInflicted()
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0xC9A454", Offset = "0xC9A454", VA = "0xC9A454")]
		private void GameManager_BallHit(bool fullDestruction)
		{
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0xC9A474", Offset = "0xC9A474", VA = "0xC9A474")]
		private void GameManager_notifyCurrentBeat(int currentBeat)
		{
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0xC9A610", Offset = "0xC9A610", VA = "0xC9A610")]
		public void StepFinished(bool success)
		{
		}

		[Token(Token = "0x6002396")]
		[Address(RVA = "0xC9A838", Offset = "0xC9A838", VA = "0xC9A838")]
		public void PlayTutorialDescription(string text, int duration, int delay = 0)
		{
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0xC9A854", Offset = "0xC9A854", VA = "0xC9A854")]
		public void ShowHint(string text)
		{
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0xC9A81C", Offset = "0xC9A81C", VA = "0xC9A81C")]
		public void PlayVoiceOver(string text, float delay = 0f)
		{
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0xC9A870", Offset = "0xC9A870", VA = "0xC9A870", Slot = "6")]
		public bool ExistsBeatsBetween(int beatStartExclusive, int beatEndExclusive)
		{
			return default(bool);
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0xC9A878", Offset = "0xC9A878", VA = "0xC9A878", Slot = "5")]
		public bool HasBeatsLeft(int fullBeat)
		{
			return default(bool);
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0xC9A888", Offset = "0xC9A888", VA = "0xC9A888", Slot = "4")]
		public Beat GetBeatForBeatNumber(int fullBeat)
		{
			return null;
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0xC9A8E8", Offset = "0xC9A8E8", VA = "0xC9A8E8", Slot = "7")]
		public StreamAction GetNextStreamActionAtBeat(StreamAction.Id id, float beat)
		{
			return null;
		}
	}
	[Token(Token = "0x200063F")]
	internal abstract class TutorialStep
	{
		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TutorialManager manager;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int startBeat;

		[Token(Token = "0x600239D")]
		[Address(RVA = "0xC9A9DC", Offset = "0xC9A9DC", VA = "0xC9A9DC")]
		public TutorialStep(TutorialManager manager)
		{
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0xC9A3F0", Offset = "0xC9A3F0", VA = "0xC9A3F0")]
		public void SetStartBeat(int startBeat)
		{
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0xC9A8BC", Offset = "0xC9A8BC", VA = "0xC9A8BC")]
		public Beat GetBeat(int beatNumber)
		{
			return null;
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0xC9A500", Offset = "0xC9A500", VA = "0xC9A500")]
		public void NotifyBeat(int beatNumber)
		{
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0xC9A900", Offset = "0xC9A900", VA = "0xC9A900")]
		public StreamAction GetNextStreamActionAtBeat(StreamAction.Id id, float beat)
		{
			return null;
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0xC9AA0C", Offset = "0xC9AA0C", VA = "0xC9AA0C")]
		protected int GetRelativeBeat(int absoluteBeat)
		{
			return default(int);
		}

		[Token(Token = "0x60023A3")]
		protected abstract void Initialize();

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0xC9AB24", Offset = "0xC9AB24", VA = "0xC9AB24", Slot = "5")]
		protected virtual void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023A5")]
		protected abstract OnBeat GetBeatInternal(int relativeBeat);

		[Token(Token = "0x60023A6")]
		protected abstract string GetDescriptionText();

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0xC9AA18", Offset = "0xC9AA18", VA = "0xC9AA18")]
		protected int GetDescriptionDuration()
		{
			return default(int);
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0xC9AC44", Offset = "0xC9AC44", VA = "0xC9AC44", Slot = "8")]
		protected virtual StreamAction GetNextStreamActionAtBeat_Internal(StreamAction.Id id, float relativeBeat)
		{
			return null;
		}
	}
	[Token(Token = "0x2000640")]
	internal class TutorialStepBadBall : TutorialStep
	{
		[Token(Token = "0x4002749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DESCRIPTION_KEY;

		[Token(Token = "0x400274A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DESCRIPTION_DURATION;

		[Token(Token = "0x400274B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string HINT_KEY;

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool playerHasCollided;

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0xC9A390", Offset = "0xC9A390", VA = "0xC9A390")]
		public TutorialStepBadBall(TutorialManager manager)
		{
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0xC9AC4C", Offset = "0xC9AC4C", VA = "0xC9AC4C", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0xC9ACD4", Offset = "0xC9ACD4", VA = "0xC9ACD4")]
		private void Manager_DamageInflicted()
		{
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0xC9ACE0", Offset = "0xC9ACE0", VA = "0xC9ACE0", Slot = "5")]
		protected override void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0xC9AF2C", Offset = "0xC9AF2C", VA = "0xC9AF2C", Slot = "6")]
		protected override OnBeat GetBeatInternal(int beatNumber)
		{
			return null;
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0xC9B088", Offset = "0xC9B088", VA = "0xC9B088", Slot = "7")]
		protected override string GetDescriptionText()
		{
			return null;
		}
	}
	[Token(Token = "0x2000641")]
	internal class TutorialStepHardBall : TutorialStep
	{
		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DESCRIPTION_KEY;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DESCRIPTION_DURATION;

		[Token(Token = "0x400274F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string HINT_KEY;

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0xC9A330", Offset = "0xC9A330", VA = "0xC9A330")]
		public TutorialStepHardBall(TutorialManager manager)
		{
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0xC9B184", Offset = "0xC9B184", VA = "0xC9B184", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0xC9B20C", Offset = "0xC9B20C", VA = "0xC9B20C")]
		private void Manager_ballHit(bool fullHit)
		{
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0xC9B2B8", Offset = "0xC9B2B8", VA = "0xC9B2B8", Slot = "5")]
		protected override void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0xC9B3FC", Offset = "0xC9B3FC", VA = "0xC9B3FC", Slot = "6")]
		protected override OnBeat GetBeatInternal(int beatNumber)
		{
			return null;
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0xC9B528", Offset = "0xC9B528", VA = "0xC9B528", Slot = "7")]
		protected override string GetDescriptionText()
		{
			return null;
		}
	}
	[Token(Token = "0x2000642")]
	internal class TutorialStepNormalBall : TutorialStep
	{
		[Token(Token = "0x4002750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DESCRIPTION_KEY;

		[Token(Token = "0x4002751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DESCRIPTION_DURATION;

		[Token(Token = "0x4002752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string HINT_KEY;

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0xC9A300", Offset = "0xC9A300", VA = "0xC9A300")]
		public TutorialStepNormalBall(TutorialManager manager)
		{
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0xC9B624", Offset = "0xC9B624", VA = "0xC9B624", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0xC9B6AC", Offset = "0xC9B6AC", VA = "0xC9B6AC")]
		private void Manager_ballHit(bool fullHit)
		{
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0xC9B744", Offset = "0xC9B744", VA = "0xC9B744", Slot = "5")]
		protected override void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0xC9B888", Offset = "0xC9B888", VA = "0xC9B888", Slot = "6")]
		protected override OnBeat GetBeatInternal(int beatNumber)
		{
			return null;
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0xC9B9B4", Offset = "0xC9B9B4", VA = "0xC9B9B4", Slot = "7")]
		protected override string GetDescriptionText()
		{
			return null;
		}
	}
	[Token(Token = "0x2000643")]
	internal class TutorialStepStreams : TutorialStep
	{
		[Token(Token = "0x4002753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DESCRIPTION_KEY;

		[Token(Token = "0x4002754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DESCRIPTION_DURATION;

		[Token(Token = "0x4002755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string HINT_KEY;

		[Token(Token = "0x4002756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly float MIN_STREAM_CATCH_RATIO;

		[Token(Token = "0x4002757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SongLayout streamLayout;

		[Token(Token = "0x4002758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int streamElementSpawnCounter;

		[Token(Token = "0x4002759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int streamElementMissCounter;

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0xC9A3C0", Offset = "0xC9A3C0", VA = "0xC9A3C0")]
		public TutorialStepStreams(TutorialManager manager)
		{
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0xC9BAB0", Offset = "0xC9BAB0", VA = "0xC9BAB0", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0xC9BB88", Offset = "0xC9BB88", VA = "0xC9BB88")]
		private void Manager_StreamElementMissed()
		{
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0xC9BB98", Offset = "0xC9BB98", VA = "0xC9BB98")]
		private void Manager_StreamElementSpawned()
		{
		}

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0xC9BBA8", Offset = "0xC9BBA8", VA = "0xC9BBA8", Slot = "5")]
		protected override void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0xC9BE48", Offset = "0xC9BE48", VA = "0xC9BE48", Slot = "6")]
		protected override OnBeat GetBeatInternal(int relativeBeat)
		{
			return null;
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0xC9C0A4", Offset = "0xC9C0A4", VA = "0xC9C0A4", Slot = "8")]
		protected override StreamAction GetNextStreamActionAtBeat_Internal(StreamAction.Id id, float relativeBeat)
		{
			return null;
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0xC9C228", Offset = "0xC9C228", VA = "0xC9C228", Slot = "7")]
		protected override string GetDescriptionText()
		{
			return null;
		}
	}
	[Token(Token = "0x2000644")]
	internal class TutorialStepWall : TutorialStep
	{
		[Token(Token = "0x400275A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DESCRIPTION_KEY;

		[Token(Token = "0x400275B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DESCRIPTION_DURATION;

		[Token(Token = "0x400275C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string HINT_KEY;

		[Token(Token = "0x400275D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool playerHasCollided;

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0xC9A360", Offset = "0xC9A360", VA = "0xC9A360")]
		public TutorialStepWall(TutorialManager manager)
		{
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0xC9C338", Offset = "0xC9C338", VA = "0xC9C338", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0xC9C3C0", Offset = "0xC9C3C0", VA = "0xC9C3C0", Slot = "5")]
		protected override void NotifyBeatInternal(int beatNumber)
		{
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0xC9C5D8", Offset = "0xC9C5D8", VA = "0xC9C5D8", Slot = "6")]
		protected override OnBeat GetBeatInternal(int beatNumber)
		{
			return null;
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0xC9C710", Offset = "0xC9C710", VA = "0xC9C710")]
		private void Manager_DamageInflicted()
		{
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0xC9C768", Offset = "0xC9C768", VA = "0xC9C768", Slot = "7")]
		protected override string GetDescriptionText()
		{
			return null;
		}
	}
	[Token(Token = "0x2000645")]
	internal class TutorialUIManager : MonoBehaviour
	{
		[Token(Token = "0x400275E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject tutorialTextPrefab;

		[Token(Token = "0x400275F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject tutorialEndscreen;

		[Token(Token = "0x4002760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private EndScreenFireworks fireworks;

		[Token(Token = "0x4002761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton gotoMenuButton;

		[Token(Token = "0x4002762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameManager gameManager;

		[Token(Token = "0x4002763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0xC9C864", Offset = "0xC9C864", VA = "0xC9C864")]
		private void Awake()
		{
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0xC9C8C4", Offset = "0xC9C8C4", VA = "0xC9C8C4")]
		private void Start()
		{
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0xC9CA38", Offset = "0xC9CA38", VA = "0xC9CA38")]
		private void GotoMenuButton_onHoverEnter(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0xC9CA54", Offset = "0xC9CA54", VA = "0xC9CA54")]
		private void GotoMenuButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0xC9CA70", Offset = "0xC9CA70", VA = "0xC9CA70")]
		public void ShowTutorialText(string textKey, float duration)
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0xC9CD04", Offset = "0xC9CD04", VA = "0xC9CD04")]
		public void ShowEndscreen()
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0xC9CD78", Offset = "0xC9CD78", VA = "0xC9CD78")]
		public TutorialUIManager()
		{
		}
	}
	[Token(Token = "0x2000647")]
	public class SongStatistic
	{
		[Token(Token = "0x4002765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Song song;

		[Token(Token = "0x4002766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Song.Difficulty currentDifficulty;

		[Token(Token = "0x4002767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float duration;

		[Token(Token = "0x4002768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int songNumber;

		[Token(Token = "0x4002769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int scoreWithoutBonus;

		[Token(Token = "0x400276A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int previousScore;

		[Token(Token = "0x400276B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool playFireworks;

		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RatingCalculator.Rating rating;

		[Token(Token = "0x400276D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool songFinished;

		[Token(Token = "0x400276E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int maxCombo;

		[Token(Token = "0x400276F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int streamElementsSpawned;

		[Token(Token = "0x4002770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int streamElementsMissed;

		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int streamElementsCatched;

		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int streamSpawnCount;

		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int streamMissedCount;

		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float streamsCatched;

		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int fails;

		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int maxFails;

		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int failRate;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int evadeRate;

		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int missed;

		[Token(Token = "0x400277A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int hitsPossible;

		[Token(Token = "0x400277B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int perfectHits;

		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float caloriesSession;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int squatsSession;

		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int totalHeartRate;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int totalHeartRateSeconds;

		[Token(Token = "0x4002780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int minHeartRate;

		[Token(Token = "0x4002781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int maxHeartRate;

		[Token(Token = "0x4002782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float totalMovementInMeters;

		[Token(Token = "0x4002783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Dictionary<GameConfiguration.Modifier, bool> modifiers;

		[Token(Token = "0x4002784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int strengthBonus;

		[Token(Token = "0x4002785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int activityBonus;

		[Token(Token = "0x4002786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool flawlessVictory;

		[Token(Token = "0x4002787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool newHighscore;

		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float maxHitSpeed;

		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float averageHitSpeed;

		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float lastHitSpeed;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int hits;

		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int accumulatedHitsScoreWithoutModifier;

		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float lastHitSpeedLeft;

		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float averageHitSpeedLeft;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float maxHitSpeedLeft;

		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int hitsLeft;

		[Token(Token = "0x4002791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float lastHitSpeedRight;

		[Token(Token = "0x4002792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float averageHitSpeedRight;

		[Token(Token = "0x4002793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float maxHitSpeedRight;

		[Token(Token = "0x4002794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int hitsRight;

		[Token(Token = "0x4002795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool isImperial;

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0xC9D0BC", Offset = "0xC9D0BC", VA = "0xC9D0BC")]
		public SongStatistic()
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0xC9D498", Offset = "0xC9D498", VA = "0xC9D498")]
		public int GetTotalScore()
		{
			return default(int);
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0xC9D4AC", Offset = "0xC9D4AC", VA = "0xC9D4AC")]
		public void ConvertToImperial()
		{
		}
	}
	[Token(Token = "0x2000648")]
	public class StatusPositioner : MonoBehaviour
	{
		[Token(Token = "0x4002796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject score;

		[Token(Token = "0x4002797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject statusLeft;

		[Token(Token = "0x4002798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject statusRight;

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0xC9D4DC", Offset = "0xC9D4DC", VA = "0xC9D4DC")]
		public void SetupStatusDisplay()
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0xC9D5C0", Offset = "0xC9D5C0", VA = "0xC9D5C0")]
		public StatusPositioner()
		{
		}
	}
	[Token(Token = "0x2000649")]
	public class StreamCounter : MonoBehaviour
	{
		[Token(Token = "0x4002799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int streamCounter;

		[Token(Token = "0x400279A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int maximum;

		[Token(Token = "0x400279B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image circularBar;

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0xC9D5C8", Offset = "0xC9D5C8", VA = "0xC9D5C8")]
		public void SetActive()
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0xC9D66C", Offset = "0xC9D66C", VA = "0xC9D66C")]
		public float GetCurrentBarFillandReset()
		{
			return default(float);
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0xC9D6A0", Offset = "0xC9D6A0", VA = "0xC9D6A0")]
		public void DisableAndReset()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0xC9D714", Offset = "0xC9D714", VA = "0xC9D714")]
		public bool IncrementUntilFull()
		{
			return default(bool);
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0xC9D63C", Offset = "0xC9D63C", VA = "0xC9D63C")]
		private void UpdateBarFillAmount()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0xC9D758", Offset = "0xC9D758", VA = "0xC9D758")]
		public StreamCounter()
		{
		}
	}
	[Token(Token = "0x200064A")]
	public class VFXController : MonoBehaviour
	{
		[Token(Token = "0x400279C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VFXPoolManager vfxPool;

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0xC9D768", Offset = "0xC9D768", VA = "0xC9D768")]
		private void Awake()
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0xC9D838", Offset = "0xC9D838", VA = "0xC9D838")]
		public ParticleSystem InstantiateAtPosition(ParticleSystem ps, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0xC9D978", Offset = "0xC9D978", VA = "0xC9D978")]
		public ParticleSystem PlayAtPosition(ParticleSystem ps, Transform _transform, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0xC9DB0C", Offset = "0xC9DB0C", VA = "0xC9DB0C")]
		public VFXController()
		{
		}
	}
	[Token(Token = "0x200064B")]
	public class ShockwaveAnimationControl : StateMachineBehaviour
	{
		[Token(Token = "0x400279D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ShockwaveControl shockwaveControl;

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0xC9DB14", Offset = "0xC9DB14", VA = "0xC9DB14", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0xC9DB74", Offset = "0xC9DB74", VA = "0xC9DB74")]
		public void SetShockwaveControl(ShockwaveControl shockwaveControl)
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0xC9DB7C", Offset = "0xC9DB7C", VA = "0xC9DB7C")]
		public ShockwaveAnimationControl()
		{
		}
	}
	[Token(Token = "0x200064C")]
	public class ShockwaveControl : MonoBehaviour
	{
		[Token(Token = "0x400279E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem effect;

		[Token(Token = "0x400279F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool running;

		[Token(Token = "0x40027A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 triggeredPosition;

		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion triggeredRotation;

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0xC9DB84", Offset = "0xC9DB84", VA = "0xC9DB84")]
		public void StartShockwave()
		{
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0xC9DCEC", Offset = "0xC9DCEC", VA = "0xC9DCEC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0xC9DD48", Offset = "0xC9DD48", VA = "0xC9DD48")]
		public void ShockwaveAnimationCompleted()
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0xC9DDCC", Offset = "0xC9DDCC", VA = "0xC9DDCC")]
		public ShockwaveControl()
		{
		}
	}
	[Token(Token = "0x200064D")]
	public abstract class PowerFistCharger : MonoBehaviour
	{
		[Token(Token = "0x60023EE")]
		public abstract void SetChargeLevel(float level);

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0xC9DDD4", Offset = "0xC9DDD4", VA = "0xC9DDD4")]
		protected PowerFistCharger()
		{
		}
	}
	[Token(Token = "0x200064E")]
	public class PowerFistChargerDesert : PowerFistCharger
	{
		[Token(Token = "0x40027A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] particles;

		[Token(Token = "0x40027A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float particlesMin;

		[Token(Token = "0x40027A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float particlesMax;

		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject[] maxLoadEffects;

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0xC9DDDC", Offset = "0xC9DDDC", VA = "0xC9DDDC", Slot = "4")]
		public override void SetChargeLevel(float level)
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0xC9E034", Offset = "0xC9E034", VA = "0xC9E034")]
		public PowerFistChargerDesert()
		{
		}
	}
	[Token(Token = "0x200064F")]
	public class PowerFistChargerGeneric : PowerFistCharger
	{
		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] particles;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float particlesMin;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float particlesMax;

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material[] materials;

		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float materialMin;

		[Token(Token = "0x40027AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float materialMax;

		[Token(Token = "0x40027AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject[] maxLoadEffects;

		[Token(Token = "0x40027AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Material[] maxLoadBlinkingLights;

		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem.EmissionModule emission;

		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool previouslyFullyCharged;

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0xC9E03C", Offset = "0xC9E03C", VA = "0xC9E03C")]
		private void Start()
		{
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0xC9E0F8", Offset = "0xC9E0F8", VA = "0xC9E0F8", Slot = "4")]
		public override void SetChargeLevel(float level)
		{
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0xC9E464", Offset = "0xC9E464", VA = "0xC9E464")]
		public PowerFistChargerGeneric()
		{
		}
	}
	[Token(Token = "0x2000650")]
	public class PowerFistChargerMedieval : PowerFistCharger
	{
		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] particles1;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem[] particles2;

		[Token(Token = "0x40027B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float particles1Min;

		[Token(Token = "0x40027B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float particles1Max;

		[Token(Token = "0x40027B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float particles2Min;

		[Token(Token = "0x40027B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float particles2Max;

		[Token(Token = "0x40027B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject[] maxLoadEffects;

		[Token(Token = "0x60023F5")]
		[Address(RVA = "0xC9E46C", Offset = "0xC9E46C", VA = "0xC9E46C", Slot = "4")]
		public override void SetChargeLevel(float level)
		{
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0xC9E6C4", Offset = "0xC9E6C4", VA = "0xC9E6C4")]
		public PowerFistChargerMedieval()
		{
		}
	}
	[Token(Token = "0x2000651")]
	public class PowerFistChargerSky : PowerFistCharger
	{
		[Token(Token = "0x40027B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] particles;

		[Token(Token = "0x40027B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float particlesMin;

		[Token(Token = "0x40027B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float particlesMax;

		[Token(Token = "0x40027BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material[] materials;

		[Token(Token = "0x40027BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float materialMin;

		[Token(Token = "0x40027BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float materialMax;

		[Token(Token = "0x40027BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject[] maxLoadEffects;

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.EmissionModule emission;

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0xC9E6CC", Offset = "0xC9E6CC", VA = "0xC9E6CC", Slot = "4")]
		public override void SetChargeLevel(float level)
		{
		}

		[Token(Token = "0x60023F8")]
		[Address(RVA = "0xC9E930", Offset = "0xC9E930", VA = "0xC9E930")]
		public PowerFistChargerSky()
		{
		}
	}
	[Token(Token = "0x2000652")]
	public class PowerFistChargerSpace : PowerFistCharger
	{
		[Token(Token = "0x40027BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem[] particles;

		[Token(Token = "0x40027C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float particlesMin;

		[Token(Token = "0x40027C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float particlesMax;

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material[] materials;

		[Token(Token = "0x40027C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float materialMin;

		[Token(Token = "0x40027C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float materialMax;

		[Token(Token = "0x40027C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject[] maxLoadEffects;

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0xC9E938", Offset = "0xC9E938", VA = "0xC9E938", Slot = "4")]
		public override void SetChargeLevel(float level)
		{
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0xC9EB7C", Offset = "0xC9EB7C", VA = "0xC9EB7C")]
		public PowerFistChargerSpace()
		{
		}
	}
	[Token(Token = "0x2000653")]
	public class WeaponDeployerPowerFist : WeaponDeployer
	{
		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShockwaveControl shockwaveControl;

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0xC9EB84", Offset = "0xC9EB84", VA = "0xC9EB84", Slot = "4")]
		internal override void TriggerDeployment(bool turnOn)
		{
		}

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0xC9EBA8", Offset = "0xC9EBA8", VA = "0xC9EBA8", Slot = "5")]
		internal override void ShowCollision()
		{
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0xC9EBAC", Offset = "0xC9EBAC", VA = "0xC9EBAC")]
		public WeaponDeployerPowerFist()
		{
		}
	}
	[Token(Token = "0x2000654")]
	public class WeaponDeployerPowerFistGeneric : WeaponDeployer
	{
		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShockwaveControl shockwaveControl;

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0xC9EBB4", Offset = "0xC9EBB4", VA = "0xC9EBB4", Slot = "4")]
		internal override void TriggerDeployment(bool turnOn)
		{
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0xC9EBD8", Offset = "0xC9EBD8", VA = "0xC9EBD8", Slot = "5")]
		internal override void ShowCollision()
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0xC9EBDC", Offset = "0xC9EBDC", VA = "0xC9EBDC")]
		public WeaponDeployerPowerFistGeneric()
		{
		}
	}
	[Token(Token = "0x2000655")]
	public class WeaponDeployerPowerFistSky : WeaponDeployer
	{
		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShockwaveControl shockwaveControl;

		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator powerfistAnimator;

		[Token(Token = "0x6002401")]
		[Address(RVA = "0xC9EBE4", Offset = "0xC9EBE4", VA = "0xC9EBE4", Slot = "4")]
		internal override void TriggerDeployment(bool turnOn)
		{
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0xC9EC58", Offset = "0xC9EC58", VA = "0xC9EC58", Slot = "5")]
		internal override void ShowCollision()
		{
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0xC9EC5C", Offset = "0xC9EC5C", VA = "0xC9EC5C")]
		public WeaponDeployerPowerFistSky()
		{
		}
	}
	[Token(Token = "0x2000656")]
	public class WeaponDeployerShieldMedieval : WeaponDeployer
	{
		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject theShield;

		[Token(Token = "0x40027CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float durationInSeconds;

		[Token(Token = "0x40027CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LLManager.HandSide handSide;

		[Token(Token = "0x40027CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool debug;

		[Token(Token = "0x40027CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 localEndPosition;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 localEndRotation;

		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool flyActive;

		[Token(Token = "0x40027D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine flyRoutine;

		[Token(Token = "0x40027D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float t;

		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera cam;

		[Token(Token = "0x6002404")]
		[Address(RVA = "0xC9EC64", Offset = "0xC9EC64", VA = "0xC9EC64")]
		private void Start()
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0xC9ECF4", Offset = "0xC9ECF4", VA = "0xC9ECF4", Slot = "5")]
		internal override void ShowCollision()
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0xC9ECF8", Offset = "0xC9ECF8", VA = "0xC9ECF8", Slot = "4")]
		internal override void TriggerDeployment(bool flyTowardsTheHand)
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0xC9ED58", Offset = "0xC9ED58", VA = "0xC9ED58")]
		private IEnumerator AnimateShield(bool flyingTowardsHand)
		{
			return null;
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0xC9EE08", Offset = "0xC9EE08", VA = "0xC9EE08")]
		private void VisualizePath(Vector3 initialWorld, Vector3 middleWorld, Vector3 endWorld)
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0xC9EFE8", Offset = "0xC9EFE8", VA = "0xC9EFE8")]
		public WeaponDeployerShieldMedieval()
		{
		}
	}
	[Token(Token = "0x2000658")]
	public enum WeaponType
	{
		[Token(Token = "0x40027D9")]
		Hands = 0,
		[Token(Token = "0x40027DA")]
		Hammer = 1,
		[Token(Token = "0x40027DB")]
		Shield = 2,
		[Token(Token = "0x40027DC")]
		PowerFist = 3,
		[Token(Token = "0x40027DD")]
		Head = 4,
		[Token(Token = "0x40027DE")]
		None = 255
	}
	[Token(Token = "0x2000659")]
	public class GamespaceManager : MonoBehaviour
	{
		[Token(Token = "0x200065A")]
		private enum CalculationResult
		{
			[Token(Token = "0x40027FC")]
			OK,
			[Token(Token = "0x40027FD")]
			IsStationaryMode,
			[Token(Token = "0x40027FE")]
			GuardianIsTooSmallInGeneral,
			[Token(Token = "0x40027FF")]
			CenterOutsideGuardian,
			[Token(Token = "0x4002800")]
			CalculatedSpaceTooSmallDueToRecentering,
			[Token(Token = "0x4002801")]
			ManualWidthLargerThanTotalAvailable,
			[Token(Token = "0x4002802")]
			ManualWidthLargerThanAvailableInRotation
		}

		[Token(Token = "0x200065B")]
		private class GuardianWarning
		{
			[Token(Token = "0x4002803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string width_meters;

			[Token(Token = "0x4002804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string width_feet;

			[Token(Token = "0x4002805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string depth_meters;

			[Token(Token = "0x4002806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string depth_feet;

			[Token(Token = "0x6002435")]
			[Address(RVA = "0xCA2CF8", Offset = "0xCA2CF8", VA = "0xCA2CF8")]
			public GuardianWarning(string width_meters, string width_feet, string depth_meters, string depth_feet)
			{
			}
		}

		[Token(Token = "0x40027DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float STEP_SIZE;

		[Token(Token = "0x40027E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly float TWO_THIRDS;

		[Token(Token = "0x40027E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly bool DEBUG;

		[Token(Token = "0x40027E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly float MIN_WIDTH;

		[Token(Token = "0x40027E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly float MAX_WIDTH;

		[Token(Token = "0x40027E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly float DEFAULT_WIDTH;

		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly float DEFAULT_DEPTH;

		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int DECIMAL_PLACES;

		[Token(Token = "0x40027E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly string SETTINGS_SIZES_PLAYSPACEWIDTH;

		[Token(Token = "0x40027E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly string SETTINGS_SIZES_PLAYSPACEWIDTH_AUTO;

		[Token(Token = "0x40027E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static GamespaceManager INSTANCE;

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isAutoMode;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float manuallySetWidthValue;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 manuallySetLocation;

		[Token(Token = "0x40027EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float manuallySetRotation;

		[Token(Token = "0x40027EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 platformCenterLocation;

		[Token(Token = "0x40027F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 platformDirection;

		[Token(Token = "0x40027F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float platformCenterRotation;

		[Token(Token = "0x40027F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float platformWidth;

		[Token(Token = "0x40027F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float platformDepth;

		[Token(Token = "0x40027F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float calculatedWidth;

		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float calculatedDepth;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float gamespaceWidth;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float gamespaceDepth;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private CalculationResult result;

		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FlatRect previousSize;

		[Token(Token = "0x40027FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rig rig;

		[Token(Token = "0x1400003E")]
		public event Action GamespaceRecalculated
		{
			[Token(Token = "0x6002410")]
			[Address(RVA = "0xC9F53C", Offset = "0xC9F53C", VA = "0xC9F53C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002411")]
			[Address(RVA = "0xC9F5D8", Offset = "0xC9F5D8", VA = "0xC9F5D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0xC9F674", Offset = "0xC9F674", VA = "0xC9F674")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0xC9FAF0", Offset = "0xC9FAF0", VA = "0xC9FAF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0xC9FB10", Offset = "0xC9FB10", VA = "0xC9FB10")]
		private IEnumerator ResetPlayspace()
		{
			return null;
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0xC9FBAC", Offset = "0xC9FBAC", VA = "0xC9FBAC")]
		private void GamespaceManager_PotentialViewReset(object sender)
		{
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0xCA1450", Offset = "0xCA1450", VA = "0xCA1450")]
		internal bool IsAutoActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0xCA1458", Offset = "0xCA1458", VA = "0xCA1458")]
		internal float GetGameplayWidth()
		{
			return default(float);
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0xCA1460", Offset = "0xCA1460", VA = "0xCA1460")]
		internal float GetGameplayDepth()
		{
			return default(float);
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0xCA1468", Offset = "0xCA1468", VA = "0xCA1468")]
		internal float GetAdjustedRotationForUI()
		{
			return default(float);
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0xCA15CC", Offset = "0xCA15CC", VA = "0xCA15CC")]
		internal float GetManuallySetRotation()
		{
			return default(float);
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0xCA15D4", Offset = "0xCA15D4", VA = "0xCA15D4")]
		internal Vector3 GetManuallySetLocation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0xCA15E0", Offset = "0xCA15E0", VA = "0xCA15E0")]
		internal float GetManualWidth()
		{
			return default(float);
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0xCA15E8", Offset = "0xCA15E8", VA = "0xCA15E8")]
		internal Vector2 GetAdjustedCenterPointForUI()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0xCA1674", Offset = "0xCA1674", VA = "0xCA1674")]
		internal float GetPlatformWidth()
		{
			return default(float);
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0xCA16D4", Offset = "0xCA16D4", VA = "0xCA16D4")]
		internal float GetPlatformDepth()
		{
			return default(float);
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0xCA173C", Offset = "0xCA173C", VA = "0xCA173C")]
		internal void SetAuto(bool autoIsNowSet)
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0xC9FBD4", Offset = "0xC9FBD4", VA = "0xC9FBD4")]
		private void PerformGamespaceCalculations()
		{
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0xCA2048", Offset = "0xCA2048", VA = "0xCA2048")]
		private bool IsRectangleContained(Vector3[] innerRectangle, Vector3[] outerRectangle)
		{
			return default(bool);
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0xCA1F4C", Offset = "0xCA1F4C", VA = "0xCA1F4C")]
		private Vector3[] RotateRectangle(Vector3 center, Vector3[] currentArea)
		{
			return null;
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0xCA21C4", Offset = "0xCA21C4", VA = "0xCA21C4")]
		private Vector3 TranslateToManuallyRotatedRecenteredSpace(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0xCA1E90", Offset = "0xCA1E90", VA = "0xCA1E90")]
		private static Vector3[] GetOriginBasedRectangle(float currentX, float currentZ)
		{
			return null;
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0xCA1978", Offset = "0xCA1978", VA = "0xCA1978")]
		private void SetMinimumValues()
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0xCA1878", Offset = "0xCA1878", VA = "0xCA1878")]
		public bool IsStationaryMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0xCA2258", Offset = "0xCA2258", VA = "0xCA2258")]
		internal void SetManualWidth(float value)
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0xCA2490", Offset = "0xCA2490", VA = "0xCA2490")]
		private void Update()
		{
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0xCA2528", Offset = "0xCA2528", VA = "0xCA2528")]
		private bool HasGuardianChanged(FlatRect currentSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0xCA2684", Offset = "0xCA2684", VA = "0xCA2684")]
		internal bool NeedsWarning()
		{
			return default(bool);
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0xCA2694", Offset = "0xCA2694", VA = "0xCA2694")]
		internal string GetLongWarningText()
		{
			return null;
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0xCA2718", Offset = "0xCA2718", VA = "0xCA2718")]
		internal string GetShortWarningText()
		{
			return null;
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0xCA2120", Offset = "0xCA2120", VA = "0xCA2120")]
		private float GetCappedManuallySetDepth()
		{
			return default(float);
		}

		[Token(Token = "0x600242F")]
		[Address(RVA = "0xCA2E7C", Offset = "0xCA2E7C", VA = "0xCA2E7C")]
		internal void Recenter(Vector3 newPosition, float newRotation)
		{
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0xCA1B2C", Offset = "0xCA1B2C", VA = "0xCA1B2C")]
		private void CreateLine(string name, Vector3 fromWorld, Vector3 toWorld, Color color)
		{
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0xCA19DC", Offset = "0xCA19DC", VA = "0xCA19DC")]
		private void CreateSphere(string name, Vector3 p, Color c)
		{
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0xCA1DC0", Offset = "0xCA1DC0", VA = "0xCA1DC0")]
		public static bool IsPointInPolygon(Vector3[] polygon, Vector3 testPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0xCA2F5C", Offset = "0xCA2F5C", VA = "0xCA2F5C")]
		public GamespaceManager()
		{
		}
	}
	[Token(Token = "0x200065D")]
	internal class DefaultPlayerPrefs : LLPlatform.PlatformPrefs
	{
		[Token(Token = "0x600243C")]
		[Address(RVA = "0xCA3354", Offset = "0xCA3354", VA = "0xCA3354", Slot = "4")]
		public void DeleteKey(string key)
		{
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0xCA3360", Offset = "0xCA3360", VA = "0xCA3360", Slot = "5")]
		public float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0xCA336C", Offset = "0xCA336C", VA = "0xCA336C", Slot = "6")]
		public float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0xCA3378", Offset = "0xCA3378", VA = "0xCA3378", Slot = "7")]
		public int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0xCA3388", Offset = "0xCA3388", VA = "0xCA3388", Slot = "8")]
		public int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0xCA3394", Offset = "0xCA3394", VA = "0xCA3394", Slot = "9")]
		public string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0xCA33A0", Offset = "0xCA33A0", VA = "0xCA33A0", Slot = "10")]
		public bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0xCA33AC", Offset = "0xCA33AC", VA = "0xCA33AC", Slot = "11")]
		public void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x6002444")]
		[Address(RVA = "0xCA33B8", Offset = "0xCA33B8", VA = "0xCA33B8", Slot = "12")]
		public void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x6002445")]
		[Address(RVA = "0xCA33C8", Offset = "0xCA33C8", VA = "0xCA33C8", Slot = "13")]
		public void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6002446")]
		[Address(RVA = "0xCA33D8", Offset = "0xCA33D8", VA = "0xCA33D8")]
		public DefaultPlayerPrefs()
		{
		}
	}
	[Token(Token = "0x200065E")]
	public class ExperienceStorageHelper
	{
		[Token(Token = "0x6002447")]
		[Address(RVA = "0xCA33E0", Offset = "0xCA33E0", VA = "0xCA33E0")]
		public static void StoreExperienceToDisk(int experience)
		{
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0xCA36AC", Offset = "0xCA36AC", VA = "0xCA36AC")]
		public static int GetExperienceFromDisk()
		{
			return default(int);
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0xCA3640", Offset = "0xCA3640", VA = "0xCA3640")]
		public static string GetExperienceFilePath()
		{
			return null;
		}
	}
	[Token(Token = "0x200065F")]
	internal class FMCPrefs
	{
		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Lazy<FMCPrefs> _instance;

		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LLPlatform.PlatformPrefs platformPrefs;

		[Token(Token = "0x170004E2")]
		public static LLPlatform.PlatformPrefs Prefs
		{
			[Token(Token = "0x600244A")]
			[Address(RVA = "0xC9FA6C", Offset = "0xC9FA6C", VA = "0xC9FA6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0xCA3900", Offset = "0xCA3900", VA = "0xCA3900")]
		private FMCPrefs()
		{
		}
	}
	[Token(Token = "0x2000661")]
	public abstract class LLController
	{
		[Token(Token = "0x2000662")]
		public enum VRControllerType
		{
			[Token(Token = "0x4002823")]
			Unknown,
			[Token(Token = "0x4002824")]
			Vive,
			[Token(Token = "0x4002825")]
			OculusTouchRiftOriginal,
			[Token(Token = "0x4002826")]
			OculusTouchRiftSAndQuest,
			[Token(Token = "0x4002827")]
			WMR,
			[Token(Token = "0x4002828")]
			Knuckles,
			[Token(Token = "0x4002829")]
			Cosmos,
			[Token(Token = "0x400282A")]
			PicoNeo2,
			[Token(Token = "0x400282B")]
			PicoNeo3,
			[Token(Token = "0x400282C")]
			YVR,
			[Token(Token = "0x400282D")]
			QiyuDreamPro
		}

		[Token(Token = "0x2000663")]
		public struct ControllerVelocity
		{
			[Token(Token = "0x400282E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 velocity;

			[Token(Token = "0x400282F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 angularVelocity;

			[Token(Token = "0x6002489")]
			[Address(RVA = "0xCA5058", Offset = "0xCA5058", VA = "0xCA5058")]
			public ControllerVelocity(Vector3 velocity, Vector3 angularVelocity)
			{
			}
		}

		[Token(Token = "0x2000664")]
		public enum PulseType
		{
			[Token(Token = "0x4002831")]
			STREAM,
			[Token(Token = "0x4002832")]
			HIT
		}

		[Token(Token = "0x2000665")]
		public enum JoystickPosition
		{
			[Token(Token = "0x4002834")]
			NONE,
			[Token(Token = "0x4002835")]
			UP,
			[Token(Token = "0x4002836")]
			RIGHT,
			[Token(Token = "0x4002837")]
			DOWN,
			[Token(Token = "0x4002838")]
			LEFT
		}

		[Token(Token = "0x2000666")]
		public delegate void HardwareButtonEventHandler(LLController sender);

		[Token(Token = "0x2000667")]
		public delegate void HardwareAxisEventHandler(object sender, Vector2 value);

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompilerGenerated]
		private HardwareButtonEventHandler TrackpadUp;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompilerGenerated]
		private HardwareButtonEventHandler TrackpadDown;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[CompilerGenerated]
		private HardwareButtonEventHandler JoystickLeftUp;

		[Token(Token = "0x400281D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[CompilerGenerated]
		private HardwareButtonEventHandler JoystickRightUp;

		[Token(Token = "0x400281F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[CompilerGenerated]
		private HardwareAxisEventHandler AxisPressed;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool isPaused;

		[Token(Token = "0x4002821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Position lastPosition;

		[Token(Token = "0x1400003F")]
		public event HardwareButtonEventHandler TakeInteractButtonDown
		{
			[Token(Token = "0x6002450")]
			[Address(RVA = "0xCA3C50", Offset = "0xCA3C50", VA = "0xCA3C50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002451")]
			[Address(RVA = "0xCA3CEC", Offset = "0xCA3CEC", VA = "0xCA3CEC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000040")]
		public event HardwareButtonEventHandler TakeInteractButtonUp
		{
			[Token(Token = "0x6002452")]
			[Address(RVA = "0xCA3D88", Offset = "0xCA3D88", VA = "0xCA3D88")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002453")]
			[Address(RVA = "0xCA3E24", Offset = "0xCA3E24", VA = "0xCA3E24")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000041")]
		public event HardwareButtonEventHandler AppMenuDown
		{
			[Token(Token = "0x6002454")]
			[Address(RVA = "0xCA3EC0", Offset = "0xCA3EC0", VA = "0xCA3EC0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002455")]
			[Address(RVA = "0xCA3F5C", Offset = "0xCA3F5C", VA = "0xCA3F5C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000042")]
		public event HardwareButtonEventHandler AppMenuUp
		{
			[Token(Token = "0x6002456")]
			[Address(RVA = "0xCA3FF8", Offset = "0xCA3FF8", VA = "0xCA3FF8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002457")]
			[Address(RVA = "0xCA4094", Offset = "0xCA4094", VA = "0xCA4094")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000043")]
		public event HardwareButtonEventHandler UseButtonDown
		{
			[Token(Token = "0x6002458")]
			[Address(RVA = "0xCA4130", Offset = "0xCA4130", VA = "0xCA4130")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002459")]
			[Address(RVA = "0xCA41CC", Offset = "0xCA41CC", VA = "0xCA41CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000044")]
		public event HardwareButtonEventHandler UseButtonUp
		{
			[Token(Token = "0x600245A")]
			[Address(RVA = "0xCA4268", Offset = "0xCA4268", VA = "0xCA4268")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600245B")]
			[Address(RVA = "0xCA4304", Offset = "0xCA4304", VA = "0xCA4304")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000045")]
		public event HardwareButtonEventHandler TeleportButtonDown
		{
			[Token(Token = "0x600245C")]
			[Address(RVA = "0xCA43A0", Offset = "0xCA43A0", VA = "0xCA43A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600245D")]
			[Address(RVA = "0xCA443C", Offset = "0xCA443C", VA = "0xCA443C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000046")]
		public event HardwareButtonEventHandler TeleportButtonUp
		{
			[Token(Token = "0x600245E")]
			[Address(RVA = "0xCA44D8", Offset = "0xCA44D8", VA = "0xCA44D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600245F")]
			[Address(RVA = "0xCA4574", Offset = "0xCA4574", VA = "0xCA4574")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000047")]
		public event HardwareButtonEventHandler JoystickUpUp
		{
			[Token(Token = "0x6002460")]
			[Address(RVA = "0xCA4610", Offset = "0xCA4610", VA = "0xCA4610")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002461")]
			[Address(RVA = "0xCA46AC", Offset = "0xCA46AC", VA = "0xCA46AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000048")]
		public event HardwareButtonEventHandler JoystickUpDown
		{
			[Token(Token = "0x6002462")]
			[Address(RVA = "0xCA4748", Offset = "0xCA4748", VA = "0xCA4748")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002463")]
			[Address(RVA = "0xCA47E4", Offset = "0xCA47E4", VA = "0xCA47E4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000049")]
		public event HardwareButtonEventHandler JoystickDownUp
		{
			[Token(Token = "0x6002464")]
			[Address(RVA = "0xCA4880", Offset = "0xCA4880", VA = "0xCA4880")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002465")]
			[Address(RVA = "0xCA491C", Offset = "0xCA491C", VA = "0xCA491C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004A")]
		public event HardwareButtonEventHandler JoystickDownDown
		{
			[Token(Token = "0x6002466")]
			[Address(RVA = "0xCA49B8", Offset = "0xCA49B8", VA = "0xCA49B8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002467")]
			[Address(RVA = "0xCA4A54", Offset = "0xCA4A54", VA = "0xCA4A54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004B")]
		public event HardwareButtonEventHandler JoystickLeftDown
		{
			[Token(Token = "0x6002468")]
			[Address(RVA = "0xCA4AF0", Offset = "0xCA4AF0", VA = "0xCA4AF0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002469")]
			[Address(RVA = "0xCA4B8C", Offset = "0xCA4B8C", VA = "0xCA4B8C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004C")]
		public event HardwareButtonEventHandler JoystickRightDown
		{
			[Token(Token = "0x600246A")]
			[Address(RVA = "0xCA4C28", Offset = "0xCA4C28", VA = "0xCA4C28")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600246B")]
			[Address(RVA = "0xCA4CC4", Offset = "0xCA4CC4", VA = "0xCA4CC4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600246C")]
		public abstract VRControllerType GetControllerType();

		[Token(Token = "0x600246D")]
		public abstract void DoHapticPulse(PulseType type);

		[Token(Token = "0x600246E")]
		public abstract ControllerVelocity GetControllerVelocity(Transform playArea);

		[Token(Token = "0x600246F")]
		public abstract void Update(Transform controllerTransform);

		[Token(Token = "0x6002470")]
		public abstract void Start();

		[Token(Token = "0x6002471")]
		public abstract JoystickPosition GetJoystickPosition();

		[Token(Token = "0x6002472")]
		public abstract GameObject GetVisualControllerRepresentation(GameObject parent);

		[Token(Token = "0x6002473")]
		public abstract void ConfigureVisualControllerRepresentation(GameObject model);

		[Token(Token = "0x6002474")]
		[Address(RVA = "0xCA4D60", Offset = "0xCA4D60", VA = "0xCA4D60")]
		public void SetPause(bool shouldPause)
		{
		}

		[Token(Token = "0x6002475")]
		internal abstract Position GetControllerPosition_Internal();

		[Token(Token = "0x6002476")]
		[Address(RVA = "0xCA4D6C", Offset = "0xCA4D6C", VA = "0xCA4D6C")]
		public Position GetControllerPosition()
		{
			return null;
		}

		[Token(Token = "0x6002477")]
		[Address(RVA = "0xCA4DA8", Offset = "0xCA4DA8", VA = "0xCA4DA8")]
		internal void OnTakeInteractButtonDown()
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0xCA4DF8", Offset = "0xCA4DF8", VA = "0xCA4DF8")]
		internal void OnTakeInteractButtonUp()
		{
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0xCA4E20", Offset = "0xCA4E20", VA = "0xCA4E20")]
		internal void OnAppMenuDown()
		{
		}

		[Token(Token = "0x600247A")]
		[Address(RVA = "0xCA4E48", Offset = "0xCA4E48", VA = "0xCA4E48")]
		internal void OnAppMenuUp()
		{
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0xCA4E70", Offset = "0xCA4E70", VA = "0xCA4E70")]
		internal void OnUseButtonDown()
		{
		}

		[Token(Token = "0x600247C")]
		[Address(RVA = "0xCA4E98", Offset = "0xCA4E98", VA = "0xCA4E98")]
		internal void OnUseButtonUp()
		{
		}

		[Token(Token = "0x600247D")]
		[Address(RVA = "0xCA4EC0", Offset = "0xCA4EC0", VA = "0xCA4EC0")]
		internal void OnTeleportButtonDown()
		{
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0xCA4EE8", Offset = "0xCA4EE8", VA = "0xCA4EE8")]
		internal void OnTeleportButtonUp()
		{
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0xCA4F10", Offset = "0xCA4F10", VA = "0xCA4F10")]
		internal void OnJoystickUpDown()
		{
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0xCA4F38", Offset = "0xCA4F38", VA = "0xCA4F38")]
		internal void OnJoystickUpUp()
		{
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0xCA4F60", Offset = "0xCA4F60", VA = "0xCA4F60")]
		internal void OnJoystickDownDown()
		{
		}

		[Token(Token = "0x6002482")]
		[Address(RVA = "0xCA4F88", Offset = "0xCA4F88", VA = "0xCA4F88")]
		internal void OnJoystickDownUp()
		{
		}

		[Token(Token = "0x6002483")]
		[Address(RVA = "0xCA4FB0", Offset = "0xCA4FB0", VA = "0xCA4FB0")]
		internal void OnJoystickLeftDown()
		{
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0xCA4FD8", Offset = "0xCA4FD8", VA = "0xCA4FD8")]
		internal void OnJoystickLeftUp()
		{
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0xCA5000", Offset = "0xCA5000", VA = "0xCA5000")]
		internal void OnJoystickRightDown()
		{
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0xCA5028", Offset = "0xCA5028", VA = "0xCA5028")]
		internal void OnJoystickRightUp()
		{
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0xCA4DD0", Offset = "0xCA4DD0", VA = "0xCA4DD0")]
		private void Handle(HardwareButtonEventHandler toHandle)
		{
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0xCA5050", Offset = "0xCA5050", VA = "0xCA5050")]
		protected LLController()
		{
		}
	}
	[Token(Token = "0x2000668")]
	public abstract class LLHeadset
	{
		[Token(Token = "0x2000669")]
		public enum VRHeadsetType
		{
			[Token(Token = "0x400283C")]
			Vive,
			[Token(Token = "0x400283D")]
			RiftOriginal,
			[Token(Token = "0x400283E")]
			RiftS,
			[Token(Token = "0x400283F")]
			WMR,
			[Token(Token = "0x4002840")]
			Index,
			[Token(Token = "0x4002841")]
			Cosmos,
			[Token(Token = "0x4002842")]
			Quest1,
			[Token(Token = "0x4002843")]
			Quest2,
			[Token(Token = "0x4002844")]
			QuestviaLink,
			[Token(Token = "0x4002845")]
			PicoNeo3,
			[Token(Token = "0x4002846")]
			YVR1,
			[Token(Token = "0x4002847")]
			QiyuDreamPro,
			[Token(Token = "0x4002848")]
			Quest3
		}

		[Token(Token = "0x200066A")]
		public enum VRMiddlewareType
		{
			[Token(Token = "0x400284A")]
			OpenVR,
			[Token(Token = "0x400284B")]
			Oculus,
			[Token(Token = "0x400284C")]
			Pico,
			[Token(Token = "0x400284D")]
			YVR,
			[Token(Token = "0x400284E")]
			QiyuDreamPro
		}

		[Token(Token = "0x200066B")]
		public enum HeadsetVisualQualityPreset
		{
			[Token(Token = "0x4002850")]
			INGAME,
			[Token(Token = "0x4002851")]
			MAINMENU
		}

		[Token(Token = "0x200066C")]
		public enum PBVRColorSpace
		{
			[Token(Token = "0x4002853")]
			Adobe_RGB,
			[Token(Token = "0x4002854")]
			Quest,
			[Token(Token = "0x4002855")]
			P3
		}

		[Token(Token = "0x1400004D")]
		public event Util.SimpleInfoEvent potentialViewReset
		{
			[Token(Token = "0x600248E")]
			[Address(RVA = "0xCA3268", Offset = "0xCA3268", VA = "0xCA3268")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600248F")]
			[Address(RVA = "0xCA530C", Offset = "0xCA530C", VA = "0xCA530C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400004E")]
		public event Action<bool, string> pauseModeChange
		{
			[Token(Token = "0x6002490")]
			[Address(RVA = "0xCA53A8", Offset = "0xCA53A8", VA = "0xCA53A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002491")]
			[Address(RVA = "0xCA5458", Offset = "0xCA5458", VA = "0xCA5458")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0xCA5508", Offset = "0xCA5508", VA = "0xCA5508")]
		internal void PotentialViewReset()
		{
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0xCA5528", Offset = "0xCA5528", VA = "0xCA5528")]
		internal void SendPauseModeChange(bool isPaused, string reason)
		{
		}

		[Token(Token = "0x6002494")]
		public abstract void Start();

		[Token(Token = "0x6002495")]
		public abstract IEnumerator FadeToLoadingScreen(GameObject loadingScreen, float cameraVectorY);

		[Token(Token = "0x6002496")]
		[Address(RVA = "0xCA5548", Offset = "0xCA5548", VA = "0xCA5548", Slot = "6")]
		public virtual IEnumerator FadeToLoadingScreen(GameObject loadingScreen, float cameraVectorY, Vector3 offset)
		{
			return null;
		}

		[Token(Token = "0x6002497")]
		public abstract IEnumerator FadeBackToSceneView();

		[Token(Token = "0x6002498")]
		public abstract FlatRect GetPlayAreaSize();

		[Token(Token = "0x6002499")]
		public abstract Vector3[] GetPlayAreaPoints();

		[Token(Token = "0x600249A")]
		[Address(RVA = "0xCA5554", Offset = "0xCA5554", VA = "0xCA5554", Slot = "10")]
		internal virtual void ResetPlayArea()
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0xCA5558", Offset = "0xCA5558", VA = "0xCA5558", Slot = "11")]
		internal virtual bool IsPlatformRecentering()
		{
			return default(bool);
		}

		[Token(Token = "0x600249C")]
		public abstract VRMiddlewareType GetVRMiddlewareType();

		[Token(Token = "0x600249D")]
		public abstract VRHeadsetType GetVRHeadsetType();

		[Token(Token = "0x600249E")]
		public abstract void Update(Transform playAreaTransform);

		[Token(Token = "0x600249F")]
		public abstract void FixedUpdate();

		[Token(Token = "0x60024A0")]
		public abstract void LateUpdate();

		[Token(Token = "0x60024A1")]
		public abstract void SetHeadsetVisualQualityPreset(HeadsetVisualQualityPreset level);

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0xCA5560", Offset = "0xCA5560", VA = "0xCA5560", Slot = "18")]
		internal virtual void SetColorSpace(PBVRColorSpace color)
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0xCA5564", Offset = "0xCA5564", VA = "0xCA5564", Slot = "19")]
		internal virtual bool IsFadingAllowed()
		{
			return default(bool);
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0xCA556C", Offset = "0xCA556C", VA = "0xCA556C")]
		protected LLHeadset()
		{
		}
	}
	[Token(Token = "0x200066D")]
	public class LLManager
	{
		[Token(Token = "0x200066E")]
		public enum HandSide
		{
			[Token(Token = "0x400285A")]
			LEFT,
			[Token(Token = "0x400285B")]
			RIGHT
		}

		[Token(Token = "0x200066F")]
		public enum OS
		{
			[Token(Token = "0x400285D")]
			PC,
			[Token(Token = "0x400285E")]
			ANDROID
		}

		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<HandSide, LLController> controllers;

		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LLHeadset playArea;

		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static LLPlatform platformIntegration;

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0xCA5574", Offset = "0xCA5574", VA = "0xCA5574")]
		public static LLController GetController(HandSide side)
		{
			return null;
		}

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0xCA14E4", Offset = "0xCA14E4", VA = "0xCA14E4")]
		public static LLHeadset GetHeadset()
		{
			return null;
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0xC9DFAC", Offset = "0xC9DFAC", VA = "0xC9DFAC")]
		public static bool IsMobilePlatform()
		{
			return default(bool);
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0xCA3984", Offset = "0xCA3984", VA = "0xCA3984")]
		public static LLPlatform GetPlatform()
		{
			return null;
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0xC981AC", Offset = "0xC981AC", VA = "0xC981AC")]
		public static OS GetOS()
		{
			return default(OS);
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0xCA38D4", Offset = "0xCA38D4", VA = "0xCA38D4")]
		public static string GetApplicationDataStorageDirectory()
		{
			return null;
		}
	}
	[Token(Token = "0x2000670")]
	public abstract class LLPlatform
	{
		[Token(Token = "0x2000671")]
		public enum PlatformType
		{
			[Token(Token = "0x4002860")]
			Steamworks,
			[Token(Token = "0x4002861")]
			Viveport,
			[Token(Token = "0x4002862")]
			Oculus,
			[Token(Token = "0x4002863")]
			Pico,
			[Token(Token = "0x4002864")]
			YVR,
			[Token(Token = "0x4002865")]
			Qiyu
		}

		[Token(Token = "0x2000672")]
		public struct LeaderboardSelector
		{
			[Token(Token = "0x4002866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal bool isOverall;

			[Token(Token = "0x4002867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string songName;

			[Token(Token = "0x4002868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Song.Difficulty difficulty;

			[Token(Token = "0x4002869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal WeaponType weapon;
		}

		[Token(Token = "0x2000673")]
		public struct LeaderboardEntry
		{
			[Token(Token = "0x400286A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly object PLAYER_UNKNOWN;

			[Token(Token = "0x400286B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal object playerId;

			[Token(Token = "0x400286C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string playerName;

			[Token(Token = "0x400286D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int score;

			[Token(Token = "0x400286E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int rank;

			[Token(Token = "0x400286F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal RatingCalculator.Rating rating;

			[Token(Token = "0x4002870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal WeaponType weapon;
		}

		[Token(Token = "0x2000674")]
		public enum LeaderboardType
		{
			[Token(Token = "0x4002872")]
			FullWithWeaponsAndSizes,
			[Token(Token = "0x4002873")]
			JustOverall
		}

		[Token(Token = "0x2000675")]
		public enum Feature
		{
			[Token(Token = "0x4002875")]
			INVALID,
			[Token(Token = "0x4002876")]
			SKYBOXES
		}

		[Token(Token = "0x2000676")]
		public interface PlatformPrefs
		{
			[Token(Token = "0x60024BD")]
			void DeleteKey(string key);

			[Token(Token = "0x60024BE")]
			float GetFloat(string key, float defaultValue);

			[Token(Token = "0x60024BF")]
			float GetFloat(string key);

			[Token(Token = "0x60024C0")]
			int GetInt(string key, int defaultValue);

			[Token(Token = "0x60024C1")]
			int GetInt(string key);

			[Token(Token = "0x60024C2")]
			string GetString(string key);

			[Token(Token = "0x60024C3")]
			bool HasKey(string key);

			[Token(Token = "0x60024C4")]
			void SetFloat(string key, float value);

			[Token(Token = "0x60024C5")]
			void SetInt(string key, int value);

			[Token(Token = "0x60024C6")]
			void SetString(string key, string value);
		}

		[Token(Token = "0x60024AC")]
		public abstract void InitializePlatform();

		[Token(Token = "0x60024AD")]
		public abstract PlatformType GetPlatformType();

		[Token(Token = "0x60024AE")]
		public abstract void GetExperience(Action<int> action);

		[Token(Token = "0x60024AF")]
		public abstract void StoreExperience(int experience);

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0xCA577C", Offset = "0xCA577C", VA = "0xCA577C", Slot = "8")]
		public virtual bool AreLeaderboardsAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B1")]
		public abstract LeaderboardType GetLeaderBoardType();

		[Token(Token = "0x60024B2")]
		public abstract void SetLeaderboardEntry(LeaderboardSelector selector, LeaderboardEntry entry, Action leaderboardUpdateFinished);

		[Token(Token = "0x60024B3")]
		public abstract void GetLeaderboardEntries(LeaderboardSelector selector, Action<LeaderboardSelector, List<LeaderboardEntry>, bool> highscoresReceived);

		[Token(Token = "0x60024B4")]
		public abstract void GetHighscoreForSong(LeaderboardSelector selector, Action<int> highscoreRetrieved);

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0xCA5784", Offset = "0xCA5784", VA = "0xCA5784", Slot = "13")]
		public virtual void StopLeaderboardCallbacks()
		{
		}

		[Token(Token = "0x60024B6")]
		public abstract object GetUserId();

		[Token(Token = "0x60024B7")]
		public abstract void ClosePlatform();

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0xCA5788", Offset = "0xCA5788", VA = "0xCA5788", Slot = "16")]
		public virtual bool IsFeaturePurchased(Feature feature)
		{
			return default(bool);
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0xCA5790", Offset = "0xCA5790", VA = "0xCA5790", Slot = "17")]
		public virtual void StartFeaturePurchase(Feature feature, Action<bool> purchaseFunctionFinished)
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0xCA5794", Offset = "0xCA5794", VA = "0xCA5794", Slot = "18")]
		public virtual PlatformPrefs GetPlatformPrefs()
		{
			return null;
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0xCA57F0", Offset = "0xCA57F0", VA = "0xCA57F0")]
		protected LLPlatform()
		{
		}
	}
	[Token(Token = "0x2000677")]
	public class L10nImageCreator : MonoBehaviour
	{
		[Token(Token = "0x4002877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera renderCamera;

		[Token(Token = "0x4002878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI loadingText;

		[Token(Token = "0x4002879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI mainText;

		[Token(Token = "0x400287A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string locales;

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0xCA587C", Offset = "0xCA587C", VA = "0xCA587C")]
		public List<string> DoCreateL10()
		{
			return null;
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0xCA604C", Offset = "0xCA604C", VA = "0xCA604C")]
		public L10nImageCreator()
		{
		}
	}
	[Token(Token = "0x2000678")]
	public class AccuracyStrengthLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x400287B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ballHitCount;

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ballMaxCount;

		[Token(Token = "0x400287D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string averageSpeed;

		[Token(Token = "0x400287E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string topSpeed;

		[Token(Token = "0x400287F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int streamPercent;

		[Token(Token = "0x4002880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int collisionsAvoided;

		[Token(Token = "0x4002881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int collisionsPossible;

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0xCA60A4", Offset = "0xCA60A4", VA = "0xCA60A4")]
		public void SetValues(int ballHitCount, int ballMaxCount, float averageSpeed, float topSpeed, string speedUnit, int streamPercent, int collisionsAvoided, int collisionsPossible)
		{
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0xCA61D8", Offset = "0xCA61D8", VA = "0xCA61D8")]
		public AccuracyStrengthLocalizedString()
		{
		}
	}
	[Token(Token = "0x2000679")]
	public class ControllerButtonLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x200067A")]
		public enum L10Button
		{
			[Token(Token = "0x4002884")]
			Trigger,
			[Token(Token = "0x4002885")]
			Pause,
			[Token(Token = "0x4002886")]
			StartStop,
			[Token(Token = "0x4002887")]
			Adjust
		}

		[Token(Token = "0x4002882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public L10Button buttonToShow;

		[Token(Token = "0x170004E3")]
		public string Name
		{
			[Token(Token = "0x60024CB")]
			[Address(RVA = "0xCA61E0", Offset = "0xCA61E0", VA = "0xCA61E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0xCA62C0", Offset = "0xCA62C0", VA = "0xCA62C0")]
		public static string GetButtonL10Name(L10Button theButton)
		{
			return null;
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0xCA64C4", Offset = "0xCA64C4", VA = "0xCA64C4")]
		public ControllerButtonLocalizedString()
		{
		}
	}
	[Token(Token = "0x200067B")]
	internal class ErrorInfo
	{
		[Token(Token = "0x4002888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string errorMessage;

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0xCA64CC", Offset = "0xCA64CC", VA = "0xCA64CC")]
		public ErrorInfo(string em)
		{
		}
	}
	[Token(Token = "0x200067C")]
	public class GuideTextString : MonoBehaviour
	{
		[Token(Token = "0x200067D")]
		public class HrmInfo
		{
			[Token(Token = "0x4002889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string hrmInfo;

			[Token(Token = "0x60024D4")]
			[Address(RVA = "0xCA6780", Offset = "0xCA6780", VA = "0xCA6780")]
			public HrmInfo()
			{
			}
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0xCA64FC", Offset = "0xCA64FC", VA = "0xCA64FC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0xCA66FC", Offset = "0xCA66FC", VA = "0xCA66FC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0xCA677C", Offset = "0xCA677C", VA = "0xCA677C")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0xCA6584", Offset = "0xCA6584", VA = "0xCA6584")]
		private void UpdateUI()
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0xCA6788", Offset = "0xCA6788", VA = "0xCA6788")]
		public GuideTextString()
		{
		}
	}
	[Token(Token = "0x200067E")]
	internal class HighscoreSongInfoLocalizationString : MonoBehaviour
	{
		[Token(Token = "0x400288A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LLPlatform.LeaderboardSelector? selector;

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0xCA6790", Offset = "0xCA6790", VA = "0xCA6790")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0xCA6A1C", Offset = "0xCA6A1C", VA = "0xCA6A1C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60024D7")]
		[Address(RVA = "0xCA6A9C", Offset = "0xCA6A9C", VA = "0xCA6A9C")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0xCA6AA0", Offset = "0xCA6AA0", VA = "0xCA6AA0")]
		internal void UpdateData(LLPlatform.LeaderboardSelector selector)
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0xCA6818", Offset = "0xCA6818", VA = "0xCA6818")]
		protected void UpdateUI()
		{
		}

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0xCA6B44", Offset = "0xCA6B44", VA = "0xCA6B44")]
		public HighscoreSongInfoLocalizationString()
		{
		}
	}
	[Token(Token = "0x200067F")]
	public class LocaleAdjuster : MonoBehaviour
	{
		[Token(Token = "0x400288B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton prevButton;

		[Token(Token = "0x400288C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton nextButton;

		[Token(Token = "0x400288D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI languageText;

		[Token(Token = "0x400288E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuToggleArea autoToggle;

		[Token(Token = "0x400288F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int index;

		[Token(Token = "0x4002890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Locale> list;

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0xCA6B4C", Offset = "0xCA6B4C", VA = "0xCA6B4C")]
		private void Start()
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0xCA6D10", Offset = "0xCA6D10", VA = "0xCA6D10")]
		private void InitDone()
		{
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0xCA734C", Offset = "0xCA734C", VA = "0xCA734C")]
		private void UpdateUIAndSettings()
		{
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0xCA763C", Offset = "0xCA763C", VA = "0xCA763C")]
		private string ShortName(string v)
		{
			return null;
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0xCA77CC", Offset = "0xCA77CC", VA = "0xCA77CC")]
		private void NextButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0xCA78B0", Offset = "0xCA78B0", VA = "0xCA78B0")]
		private void PrevButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0xCA7994", Offset = "0xCA7994", VA = "0xCA7994")]
		private void AutoToggle_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0xCA7F24", Offset = "0xCA7F24", VA = "0xCA7F24")]
		private int GetIndexForCurrentLocale()
		{
			return default(int);
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0xCA80F0", Offset = "0xCA80F0", VA = "0xCA80F0")]
		public LocaleAdjuster()
		{
		}
	}
	[Token(Token = "0x2000680")]
	public class LocalizationHelper
	{
		[Token(Token = "0x2000681")]
		private class Value
		{
			[Token(Token = "0x4002891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string value;

			[Token(Token = "0x60024EB")]
			[Address(RVA = "0xCA80F8", Offset = "0xCA80F8", VA = "0xCA80F8")]
			public Value(string value)
			{
			}
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0xC9AB28", Offset = "0xC9AB28", VA = "0xC9AB28")]
		public static AudioClip LoadAudioClip(string clipName)
		{
			return null;
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0xC98CFC", Offset = "0xC98CFC", VA = "0xC98CFC")]
		public static string LoadEntry(string entryName)
		{
			return null;
		}

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0xCA2D6C", Offset = "0xCA2D6C", VA = "0xCA2D6C")]
		internal static string LoadEntry(string entryName, params object[] arguments)
		{
			return null;
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0xCA2B44", Offset = "0xCA2B44", VA = "0xCA2B44")]
		internal static string LoadEntryWithValue(string entryName, string value)
		{
			return null;
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0xCA5D28", Offset = "0xCA5D28", VA = "0xCA5D28")]
		public static string LoadEntryForLocale(string entryName, string localeIdentifierCode)
		{
			return null;
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0xCA6BC8", Offset = "0xCA6BC8", VA = "0xCA6BC8")]
		internal static void WaitForL10nInitialization(Action initDone)
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0xCA8130", Offset = "0xCA8130", VA = "0xCA8130")]
		internal static Locale GetCurrentLocale()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000683")]
	public class PowerBeatsLocaleSelector : IStartupLocaleSelector, IInitialize
	{
		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string SETTINGS_LOCALE_ISAUTO;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly string SETTINGS_LOCALE_LOCALE;

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0xCA815C", Offset = "0xCA815C", VA = "0xCA815C", Slot = "5")]
		public void PostInitialization(LocalizationSettings settings)
		{
		}

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0xCA8160", Offset = "0xCA8160", VA = "0xCA8160", Slot = "4")]
		public Locale GetStartupLocale(ILocalesProvider availableLocales)
		{
			return null;
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0xCA7DA8", Offset = "0xCA7DA8", VA = "0xCA7DA8")]
		public static Locale GetSystemLocale(ILocalesProvider provider)
		{
			return null;
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0xCA7C9C", Offset = "0xCA7C9C", VA = "0xCA7C9C")]
		internal static void SetAuto(bool isAuto)
		{
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0xCA7530", Offset = "0xCA7530", VA = "0xCA7530")]
		public static bool IsAuto()
		{
			return default(bool);
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0xCA76BC", Offset = "0xCA76BC", VA = "0xCA76BC")]
		public static void SetUserSelectedLocale(Locale l)
		{
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0xCA87C4", Offset = "0xCA87C4", VA = "0xCA87C4")]
		public PowerBeatsLocaleSelector()
		{
		}
	}
	[Token(Token = "0x2000684")]
	public class PrefixBasedLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x4002895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string l10_prefix;

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0xCA8868", Offset = "0xCA8868", VA = "0xCA8868")]
		internal void SetPrefixedEntryName(string suffix)
		{
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0xCA8974", Offset = "0xCA8974", VA = "0xCA8974")]
		public PrefixBasedLocalizedString()
		{
		}
	}
	[Token(Token = "0x2000685")]
	public class TextBasedLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x4002896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string value;

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0xCA897C", Offset = "0xCA897C", VA = "0xCA897C")]
		internal void UpdateEntry(string value)
		{
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0xCA89F0", Offset = "0xCA89F0", VA = "0xCA89F0")]
		internal void UpdateEntry(string entryName, string value)
		{
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0xCA8AB0", Offset = "0xCA8AB0", VA = "0xCA8AB0")]
		public TextBasedLocalizedString()
		{
		}
	}
	[Token(Token = "0x2000686")]
	public class ValueBasedLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x4002897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int min;

		[Token(Token = "0x4002898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int value;

		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int max;

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0xCA8B08", Offset = "0xCA8B08", VA = "0xCA8B08")]
		internal void UpdateEntry(int min, int value, int max)
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0xCA8B84", Offset = "0xCA8B84", VA = "0xCA8B84")]
		public ValueBasedLocalizedString()
		{
		}
	}
	[Token(Token = "0x2000687")]
	public class VersionLocalizedString : MonoBehaviour
	{
		[Token(Token = "0x60024FD")]
		[Address(RVA = "0xCA8B8C", Offset = "0xCA8B8C", VA = "0xCA8B8C")]
		protected void Start()
		{
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0xCA8C78", Offset = "0xCA8C78", VA = "0xCA8C78")]
		public VersionLocalizedString()
		{
		}
	}
	[Token(Token = "0x2000688")]
	public class BPMOffsetAdjuster : MonoBehaviour
	{
		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float GENERATOR_BPM_MIN;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly float GENERATOR_BPM_MAX;

		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI generatorBpmText;

		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI generatorOffsetText;

		[Token(Token = "0x400289E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initialBpm;

		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float initialOffset;

		[Token(Token = "0x40028A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MenuSelectButton generatorBpmHalfButton;

		[Token(Token = "0x40028A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MenuSelectButton generatorBpmDecreaseButton;

		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MenuSelectButton generatorBpmIncreaseButton;

		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MenuSelectButton generatorBpmDoubleButton;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MenuSelectButton generatorOffsetDecreaseButton;

		[Token(Token = "0x40028A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MenuSelectButton generatorOffsetIncreaseButton;

		[Token(Token = "0x40028A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float generatorBpm;

		[Token(Token = "0x40028A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float generatorOffset;

		[Token(Token = "0x40028AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float generatorOffsetMax;

		[Token(Token = "0x1400004F")]
		public event Action<float> bpmChanged
		{
			[Token(Token = "0x60024FF")]
			[Address(RVA = "0xCA8C80", Offset = "0xCA8C80", VA = "0xCA8C80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002500")]
			[Address(RVA = "0xCA8D30", Offset = "0xCA8D30", VA = "0xCA8D30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000050")]
		public event Action<float> offsetChanged
		{
			[Token(Token = "0x6002501")]
			[Address(RVA = "0xCA8DE0", Offset = "0xCA8DE0", VA = "0xCA8DE0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002502")]
			[Address(RVA = "0xCA8E90", Offset = "0xCA8E90", VA = "0xCA8E90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0xCA8F40", Offset = "0xCA8F40", VA = "0xCA8F40")]
		public void Initialize(float bpm, float offset)
		{
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0xCA924C", Offset = "0xCA924C", VA = "0xCA924C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0xCA9508", Offset = "0xCA9508", VA = "0xCA9508")]
		private void DoReset(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0xCA9560", Offset = "0xCA9560", VA = "0xCA9560")]
		private void DoOffsetToggle(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0xCA964C", Offset = "0xCA964C", VA = "0xCA964C")]
		private void DoOffsetInc(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0xCA9720", Offset = "0xCA9720", VA = "0xCA9720")]
		private void DoOffsetDec(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0xCA97F4", Offset = "0xCA97F4", VA = "0xCA97F4")]
		private void DoBPMDouble(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0xCA9834", Offset = "0xCA9834", VA = "0xCA9834")]
		private void DoBPMInc(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600250B")]
		[Address(RVA = "0xCA9878", Offset = "0xCA9878", VA = "0xCA9878")]
		private void DoBPMDec(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600250C")]
		[Address(RVA = "0xCA98BC", Offset = "0xCA98BC", VA = "0xCA98BC")]
		private void DoBPMHalf(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0xCA8F60", Offset = "0xCA8F60", VA = "0xCA8F60")]
		private void ValidateGeneratorBpmButtons()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0xCA9198", Offset = "0xCA9198", VA = "0xCA9198")]
		private void ValidateGeneratorOffsetButtons()
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0xCA99A0", Offset = "0xCA99A0", VA = "0xCA99A0")]
		public BPMOffsetAdjuster()
		{
		}
	}
	[Token(Token = "0x2000689")]
	internal class CustomButton : Button
	{
		[Token(Token = "0x6002511")]
		[Address(RVA = "0xCA99F8", Offset = "0xCA99F8", VA = "0xCA99F8")]
		public void Unhighlight()
		{
		}

		[Token(Token = "0x6002512")]
		[Address(RVA = "0xCA9A10", Offset = "0xCA9A10", VA = "0xCA9A10")]
		public CustomButton()
		{
		}
	}
	[Token(Token = "0x200068A")]
	public class EnvironmentalVisualization : MonoBehaviour
	{
		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameConfiguration.GameEnvironmentID environment;

		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite image_Fist;

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite image_Hammer;

		[Token(Token = "0x40028AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Sprite image_Shield;

		[Token(Token = "0x40028AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sprite image_Power;

		[Token(Token = "0x6002513")]
		[Address(RVA = "0xCA9A18", Offset = "0xCA9A18", VA = "0xCA9A18")]
		internal void Apply(Image iFist, Image iHammer, Image iShield, Image iPower)
		{
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0xCA9A98", Offset = "0xCA9A98", VA = "0xCA9A98")]
		public EnvironmentalVisualization()
		{
		}
	}
	[Token(Token = "0x200068B")]
	public class FeatureTourDialog : MonoBehaviour
	{
		[Token(Token = "0x200068C")]
		public enum Trigger
		{
			[Token(Token = "0x40028EA")]
			NONE,
			[Token(Token = "0x40028EB")]
			LOCALMUSIC,
			[Token(Token = "0x40028EC")]
			PLAYLISTS,
			[Token(Token = "0x40028ED")]
			MODIFIERS,
			[Token(Token = "0x40028EE")]
			OPTIONS
		}

		[Token(Token = "0x200068D")]
		private enum MenuPanel
		{
			[Token(Token = "0x40028F0")]
			OPTIONS,
			[Token(Token = "0x40028F1")]
			GAMEPLAY,
			[Token(Token = "0x40028F2")]
			SONGS,
			[Token(Token = "0x40028F3")]
			FITNESS,
			[Token(Token = "0x40028F4")]
			PLAYLISTS
		}

		[Token(Token = "0x40028B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool shallShowSingleFeatureAfterReturnFromSong;

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Trigger singleFeatureToShow;

		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool shallStartFeatureTourAfterReturnFromSong;

		[Token(Token = "0x40028B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject askForFeatureTourDialog;

		[Token(Token = "0x40028B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton askForFeatureTourOKButton;

		[Token(Token = "0x40028B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton askForFeatureTourCancelButton;

		[Token(Token = "0x40028B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MenuSelectButton[] okButtons;

		[Token(Token = "0x40028B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MenuSelectButton optionOkButton;

		[Token(Token = "0x40028B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MenuSelectButton[] buttonsToDeactivate;

		[Token(Token = "0x40028B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MenuSelectButton buttonPlaylists;

		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MenuSelectButton buttonOptions;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private CanvasGroup[] canvasGroupsToFadeIn;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private CanvasGroup[] canvasGroupsToFadeOut;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private CanvasGroup canvasGroupOptionsButton;

		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private CanvasGroup canvasGroupPlaylistsButton;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private CanvasGroup canvasGroupModifierButton;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private CanvasGroup canvasGroupLocalSongsButton;

		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private GameObject mainStartButtonGlow;

		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject playlistsStartButtonGlow;

		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject[] objectsToDeactivate;

		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private GameObject bgSongPanelFull;

		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private GameObject bgSongPanelPartial;

		[Token(Token = "0x40028C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private GameObject bgGamePanelFull;

		[Token(Token = "0x40028C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private GameObject bgGamePanelPartial;

		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private GameObject bgFitnessPanel;

		[Token(Token = "0x40028C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private GameObject bgLeaderboardsPanel;

		[Token(Token = "0x40028CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private GameObject bgPlaylistsPanel;

		[Token(Token = "0x40028CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private GameObject bgOptionsPanel;

		[Token(Token = "0x40028CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private GameObject bgCreditsPanel;

		[Token(Token = "0x40028CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GameObject bgGuidePanel;

		[Token(Token = "0x40028CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject textPlaylists;

		[Token(Token = "0x40028CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private GameObject textLocalSongs;

		[Token(Token = "0x40028D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private GameObject textModifiers;

		[Token(Token = "0x40028D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private GameObject textOptions;

		[Token(Token = "0x40028D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private GameObject arrowRightSongs;

		[Token(Token = "0x40028D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private GameObject arrowLeftSongs;

		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private GameObject arrowRightFitness;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private GameObject arrowLeftFitness;

		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private GameObject arrowLeftPlaylists;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private GameObject arrowRightGameplay;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private GameObject arrowLeftGameplay;

		[Token(Token = "0x40028D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private ParticleSystem particleSystemPlaylists;

		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private ParticleSystem particleSystemLocalSongs;

		[Token(Token = "0x40028DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private ParticleSystem particleSystemModifiers;

		[Token(Token = "0x40028DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private ParticleSystem particleSystemOptions;

		[Token(Token = "0x40028DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private FrameworkManager fm;

		[Token(Token = "0x40028DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x40028DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Trigger trigger;

		[Token(Token = "0x40028E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private bool sequenceIsStarted;

		[Token(Token = "0x40028E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		private bool mainStartButtonGlowHasBeenInactiveBefore;

		[Token(Token = "0x40028E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18E")]
		private bool playlistsStartButtonGlowHasBeenInactiveBefore;

		[Token(Token = "0x40028E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Dictionary<MenuPanel, GameObject> arrowsLeft;

		[Token(Token = "0x40028E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Dictionary<MenuPanel, GameObject> arrowsRight;

		[Token(Token = "0x40028E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private MenuPanel previouslyHighlightedMenuPanel;

		[Token(Token = "0x40028E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private MenuPanel currentlyHighlightedMenuPanel;

		[Token(Token = "0x40028E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool isAlreadyOpen;

		[Token(Token = "0x14000051")]
		public event Action<Trigger> hintClosed
		{
			[Token(Token = "0x6002515")]
			[Address(RVA = "0xCA9AA0", Offset = "0xCA9AA0", VA = "0xCA9AA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002516")]
			[Address(RVA = "0xCA9B54", Offset = "0xCA9B54", VA = "0xCA9B54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0xCA9C08", Offset = "0xCA9C08", VA = "0xCA9C08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002518")]
		[Address(RVA = "0xCA9FF0", Offset = "0xCA9FF0", VA = "0xCA9FF0")]
		public void Initialize(FrameworkManager fm)
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0xCAA000", Offset = "0xCAA000", VA = "0xCAA000")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0xCAA1A8", Offset = "0xCAA1A8", VA = "0xCAA1A8")]
		public void PotentiallyTriggerFeatureTour(bool askForFeatureTour)
		{
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0xCAA1DC", Offset = "0xCAA1DC", VA = "0xCAA1DC")]
		private void AskForFeatureTour()
		{
		}

		[Token(Token = "0x600251C")]
		[Address(RVA = "0xCAA5A4", Offset = "0xCAA5A4", VA = "0xCAA5A4")]
		private void StartSequence(MenuSelectButton okButton)
		{
		}

		[Token(Token = "0x600251D")]
		[Address(RVA = "0xCAA5A8", Offset = "0xCAA5A8", VA = "0xCAA5A8")]
		public void StartSequence()
		{
		}

		[Token(Token = "0x600251E")]
		[Address(RVA = "0xCAA724", Offset = "0xCAA724", VA = "0xCAA724")]
		private void HideAskForFeatureTourDialog(MenuSelectButton cancelButton)
		{
		}

		[Token(Token = "0x600251F")]
		[Address(RVA = "0xCAA288", Offset = "0xCAA288", VA = "0xCAA288")]
		private void AnalyzeTriggers()
		{
		}

		[Token(Token = "0x6002520")]
		[Address(RVA = "0xCAA310", Offset = "0xCAA310", VA = "0xCAA310")]
		private void ApplyTrigger()
		{
		}

		[Token(Token = "0x6002521")]
		[Address(RVA = "0xCAA8A4", Offset = "0xCAA8A4", VA = "0xCAA8A4")]
		private void OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002522")]
		[Address(RVA = "0xCAA938", Offset = "0xCAA938", VA = "0xCAA938")]
		private void Button_onHover(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002523")]
		[Address(RVA = "0xCAA76C", Offset = "0xCAA76C", VA = "0xCAA76C")]
		private void OpenDialog()
		{
		}

		[Token(Token = "0x6002524")]
		[Address(RVA = "0xCAA954", Offset = "0xCAA954", VA = "0xCAA954")]
		private void ActivateUniversalOverlays()
		{
		}

		[Token(Token = "0x6002525")]
		[Address(RVA = "0xCAAAA4", Offset = "0xCAAAA4", VA = "0xCAAAA4")]
		private void DeactivateIrrelevantObjects(bool isTrue)
		{
		}

		[Token(Token = "0x6002526")]
		[Address(RVA = "0xCAABFC", Offset = "0xCAABFC", VA = "0xCAABFC")]
		private void SetCertainButtonsInactive(bool isTrue)
		{
		}

		[Token(Token = "0x6002527")]
		[Address(RVA = "0xCAAD6C", Offset = "0xCAAD6C", VA = "0xCAAD6C")]
		private IEnumerator FadeInFeatureHighlight()
		{
			return null;
		}

		[Token(Token = "0x6002528")]
		[Address(RVA = "0xCAAE08", Offset = "0xCAAE08", VA = "0xCAAE08")]
		public void CheckIfTutorialIsActive(Trigger openedPanel)
		{
		}

		[Token(Token = "0x6002529")]
		[Address(RVA = "0xCAA8E8", Offset = "0xCAA8E8", VA = "0xCAA8E8")]
		internal void HideDialog()
		{
		}

		[Token(Token = "0x600252A")]
		[Address(RVA = "0xCAAE68", Offset = "0xCAAE68", VA = "0xCAAE68")]
		private void StopParticleSystem()
		{
		}

		[Token(Token = "0x600252B")]
		[Address(RVA = "0xCAAED8", Offset = "0xCAAED8", VA = "0xCAAED8")]
		private IEnumerator FadeOutFeatureHighlight()
		{
			return null;
		}

		[Token(Token = "0x600252C")]
		[Address(RVA = "0xCAA06C", Offset = "0xCAA06C", VA = "0xCAA06C")]
		private void DeactivateAllElements()
		{
		}

		[Token(Token = "0x600252D")]
		[Address(RVA = "0xCAAF74", Offset = "0xCAAF74", VA = "0xCAAF74")]
		private IEnumerator DeactivateParticleSystem(Trigger trigger)
		{
			return null;
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0xCAA9DC", Offset = "0xCAA9DC", VA = "0xCAA9DC")]
		private void ShowArrows(MenuPanel startPanel, MenuPanel endPanel)
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0xCAB020", Offset = "0xCAB020", VA = "0xCAB020")]
		private void DisableAllArrows()
		{
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0xCAB0BC", Offset = "0xCAB0BC", VA = "0xCAB0BC")]
		public FeatureTourDialog()
		{
		}
	}
	[Token(Token = "0x2000691")]
	public class FileBrowserHelpDialog : MonoBehaviour
	{
		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuSelectButton okButton;

		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] objectsToDeactivate;

		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float delayTime;

		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float fadeInTime;

		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI explanationText;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CanvasGroup cg;

		[Token(Token = "0x6002543")]
		[Address(RVA = "0xCAB8AC", Offset = "0xCAB8AC", VA = "0xCAB8AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0xCAB970", Offset = "0xCAB970", VA = "0xCAB970")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x6002545")]
		[Address(RVA = "0xCABA40", Offset = "0xCABA40", VA = "0xCABA40")]
		private void OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0xCABA80", Offset = "0xCABA80", VA = "0xCABA80")]
		public void OpenDialog()
		{
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0xCABC50", Offset = "0xCABC50", VA = "0xCABC50")]
		public void FadeInDialogDelayed()
		{
		}

		[Token(Token = "0x6002548")]
		[Address(RVA = "0xCABBCC", Offset = "0xCABBCC", VA = "0xCABBCC")]
		private IEnumerator FadeInDialog(float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6002549")]
		[Address(RVA = "0xCABA60", Offset = "0xCABA60", VA = "0xCABA60")]
		public void HideDialog()
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0xCABDEC", Offset = "0xCABDEC", VA = "0xCABDEC")]
		private IEnumerator FadeOutDialog()
		{
			return null;
		}

		[Token(Token = "0x600254B")]
		[Address(RVA = "0xCABE88", Offset = "0xCABE88", VA = "0xCABE88")]
		public void OnApplicationPause(bool paused)
		{
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0xCABEB0", Offset = "0xCABEB0", VA = "0xCABEB0")]
		public FileBrowserHelpDialog()
		{
		}
	}
	[Token(Token = "0x2000694")]
	public class GamespaceDialog : MonoBehaviour
	{
		[Token(Token = "0x2000695")]
		private class ButtonName
		{
			[Token(Token = "0x4002927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string buttonName;

			[Token(Token = "0x600256D")]
			[Address(RVA = "0xCCC940", Offset = "0xCCC940", VA = "0xCCC940")]
			public ButtonName(string buttonName)
			{
			}
		}

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton resetButton;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton okButton;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MenuSelectButton cancelButton;

		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject emptyLookRightDialog;

		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RectTransform scaler;

		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Image platformImage;

		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Image stationaryImage;

		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI platformText;

		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Image gamespaceImage;

		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TextMeshProUGUI gamespaceText;

		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private TextMeshProUGUI arrowText;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI howToText;

		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI debugText;

		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI infoText;

		[Token(Token = "0x400291A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		public Slider playspaceWidthSlider;

		[Token(Token = "0x400291B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TextMeshProUGUI playspaceWidthText;

		[Token(Token = "0x400291C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private MenuSelectButton playSpaceWidthDecreaseButton;

		[Token(Token = "0x400291D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private MenuSelectButton playSpaceWidthIncreaseButton;

		[Token(Token = "0x400291E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private MenuToggleArea playspaceWidthAutoToggle;

		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private GameObject startButtonGlow;

		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool startButtonGlowHasBeenInactiveBefore;

		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool isEnabled;

		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		private bool startup_Auto;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float startup_ManualWidth;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 startup_ManualLocation;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float startup_ManualRotation;

		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x6002559")]
		[Address(RVA = "0xCAC170", Offset = "0xCAC170", VA = "0xCAC170")]
		internal void OpenDialog()
		{
		}

		[Token(Token = "0x600255A")]
		[Address(RVA = "0xCAD7C0", Offset = "0xCAD7C0", VA = "0xCAD7C0")]
		internal bool IsOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0xCAD7E0", Offset = "0xCAD7E0", VA = "0xCAD7E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0xCADCE8", Offset = "0xCADCE8", VA = "0xCADCE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600255D")]
		[Address(RVA = "0xCAE054", Offset = "0xCAE054", VA = "0xCAE054")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0xCAE3A4", Offset = "0xCAE3A4", VA = "0xCAE3A4")]
		private void Update()
		{
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0xCAE3FC", Offset = "0xCAE3FC", VA = "0xCAE3FC")]
		private void GameplayWidthDialog_TakeInteractButtonDown(LLController sender)
		{
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0xCAC230", Offset = "0xCAC230", VA = "0xCAC230")]
		private void AdjustDisplay()
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0xCAE540", Offset = "0xCAE540", VA = "0xCAE540")]
		private void CreatePoint(string name, Vector3 platform0, Color c)
		{
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0xCAE6E8", Offset = "0xCAE6E8", VA = "0xCAE6E8")]
		private void OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002563")]
		[Address(RVA = "0xCAE754", Offset = "0xCAE754", VA = "0xCAE754")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0xCAE864", Offset = "0xCAE864", VA = "0xCAE864")]
		private void ResetButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0xCAE738", Offset = "0xCAE738", VA = "0xCAE738")]
		private void PlayClickSound()
		{
		}

		[Token(Token = "0x6002566")]
		[Address(RVA = "0xCAE978", Offset = "0xCAE978", VA = "0xCAE978")]
		private void Buttons_onHover(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002567")]
		[Address(RVA = "0xCAE994", Offset = "0xCAE994", VA = "0xCAE994")]
		private void ToggleButtons_onHover(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0xCAE9B0", Offset = "0xCAE9B0", VA = "0xCAE9B0")]
		private void PlayspaceWidthAutoToggle_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0xCAEA30", Offset = "0xCAEA30", VA = "0xCAEA30")]
		private void PlayspaceWidthSlider_onValueChanged(float value)
		{
		}

		[Token(Token = "0x600256A")]
		[Address(RVA = "0xCAEAA0", Offset = "0xCAEAA0", VA = "0xCAEAA0")]
		private void PlaySpaceWidthIncreaseButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600256B")]
		[Address(RVA = "0xCAEB24", Offset = "0xCAEB24", VA = "0xCAEB24")]
		private void PlaySpaceWidthDecreaseButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600256C")]
		[Address(RVA = "0xCAEBA8", Offset = "0xCAEBA8", VA = "0xCAEBA8")]
		public GamespaceDialog()
		{
		}
	}
	[Token(Token = "0x2000696")]
	public class GamespaceMenuUI : MonoBehaviour
	{
		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton adjustPlayspaceButton;

		[Token(Token = "0x4002929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GamespaceDialog adjustPlayspaceDialog;

		[Token(Token = "0x600256E")]
		[Address(RVA = "0xCCC9B8", Offset = "0xCCC9B8", VA = "0xCCC9B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600256F")]
		[Address(RVA = "0xCCCC14", Offset = "0xCCCC14", VA = "0xCCCC14")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0xCCCD34", Offset = "0xCCCD34", VA = "0xCCCD34")]
		private void AdjustPlayspaceButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002571")]
		[Address(RVA = "0xCCCD38", Offset = "0xCCCD38", VA = "0xCCCD38")]
		internal void OpenDialog()
		{
		}

		[Token(Token = "0x6002572")]
		[Address(RVA = "0xCCCD98", Offset = "0xCCCD98", VA = "0xCCCD98")]
		internal bool IsDialogOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x6002573")]
		[Address(RVA = "0xCCCDB4", Offset = "0xCCCDB4", VA = "0xCCCDB4")]
		public GamespaceMenuUI()
		{
		}
	}
	[Token(Token = "0x2000697")]
	public class HandAdjustment : MonoBehaviour
	{
		[Token(Token = "0x400292A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LLManager.HandSide side;

		[Token(Token = "0x400292B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LaserPointer pointer;

		[Token(Token = "0x400292C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allowModification;

		[Token(Token = "0x400292D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Controller controller;

		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject controllerModel;

		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform previousParent;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform previousHandParent;

		[Token(Token = "0x6002574")]
		[Address(RVA = "0xCCCDBC", Offset = "0xCCCDBC", VA = "0xCCCDBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002575")]
		[Address(RVA = "0xCCCFD0", Offset = "0xCCCFD0", VA = "0xCCCFD0")]
		public void Attach()
		{
		}

		[Token(Token = "0x6002576")]
		[Address(RVA = "0xCCD1C8", Offset = "0xCCD1C8", VA = "0xCCD1C8")]
		internal void Detach()
		{
		}

		[Token(Token = "0x6002577")]
		[Address(RVA = "0xCCD320", Offset = "0xCCD320", VA = "0xCCD320")]
		private void HandAdjustment_TakeInteractButtonDown(LLController sender)
		{
		}

		[Token(Token = "0x6002578")]
		[Address(RVA = "0xCCD470", Offset = "0xCCD470", VA = "0xCCD470")]
		private void HandAdjustment_TakeInteractButtonUp(LLController sender)
		{
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0xCCD4E0", Offset = "0xCCD4E0", VA = "0xCCD4E0")]
		internal void SetAdjustmentToScene(Tuple<Vector3, Quaternion> tuple)
		{
		}

		[Token(Token = "0x600257A")]
		[Address(RVA = "0xCCD584", Offset = "0xCCD584", VA = "0xCCD584")]
		internal Tuple<Vector3, Quaternion> GetAdjustmentFromScene()
		{
			return null;
		}

		[Token(Token = "0x600257B")]
		[Address(RVA = "0xCCD65C", Offset = "0xCCD65C", VA = "0xCCD65C")]
		public HandAdjustment()
		{
		}
	}
	[Token(Token = "0x2000698")]
	internal class HandAdjustmentSettings
	{
		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<LLManager.HandSide, Tuple<Vector3, Quaternion>> offset;

		[Token(Token = "0x600257C")]
		[Address(RVA = "0xCCD664", Offset = "0xCCD664", VA = "0xCCD664")]
		public HandAdjustmentSettings(Tuple<Vector3, Quaternion> left, Tuple<Vector3, Quaternion> right)
		{
		}

		[Token(Token = "0x600257D")]
		[Address(RVA = "0xCCD740", Offset = "0xCCD740", VA = "0xCCD740")]
		public string ToJson()
		{
			return null;
		}

		[Token(Token = "0x600257E")]
		[Address(RVA = "0xCCDA70", Offset = "0xCCDA70", VA = "0xCCDA70")]
		public static HandAdjustmentSettings FromJson(string json)
		{
			return null;
		}
	}
	[Token(Token = "0x2000699")]
	public class HowToPlayDialog : MonoBehaviour
	{
		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuSelectButton cancelButton;

		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuSelectButton gameTutorialButton;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MenuSelectButton featureTourButton;

		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject mainStartButtonGlow;

		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool mainStartButtonGlowHasBeenInactiveBefore;

		[Token(Token = "0x14000052")]
		public event Action startFeatureTour
		{
			[Token(Token = "0x600257F")]
			[Address(RVA = "0xCCDD14", Offset = "0xCCDD14", VA = "0xCCDD14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002580")]
			[Address(RVA = "0xCCDDB0", Offset = "0xCCDDB0", VA = "0xCCDDB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000053")]
		public event Action startGameTutorial
		{
			[Token(Token = "0x6002581")]
			[Address(RVA = "0xCCDE4C", Offset = "0xCCDE4C", VA = "0xCCDE4C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002582")]
			[Address(RVA = "0xCCDEE8", Offset = "0xCCDEE8", VA = "0xCCDEE8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002583")]
		[Address(RVA = "0xCCDF84", Offset = "0xCCDF84", VA = "0xCCDF84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002584")]
		[Address(RVA = "0xCCE098", Offset = "0xCCE098", VA = "0xCCE098")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x6002585")]
		[Address(RVA = "0xCCE0BC", Offset = "0xCCE0BC", VA = "0xCCE0BC")]
		public void OpenDialog()
		{
		}

		[Token(Token = "0x6002586")]
		[Address(RVA = "0xCCE14C", Offset = "0xCCE14C", VA = "0xCCE14C")]
		public void HideDialog()
		{
		}

		[Token(Token = "0x6002587")]
		[Address(RVA = "0xCCE198", Offset = "0xCCE198", VA = "0xCCE198")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0xCCE19C", Offset = "0xCCE19C", VA = "0xCCE19C")]
		private void FeatureTourButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0xCCE1C8", Offset = "0xCCE1C8", VA = "0xCCE1C8")]
		private void GameTutorialButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600258A")]
		[Address(RVA = "0xCCE12C", Offset = "0xCCE12C", VA = "0xCCE12C")]
		internal bool IsOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x600258B")]
		[Address(RVA = "0xCCE1EC", Offset = "0xCCE1EC", VA = "0xCCE1EC")]
		public HowToPlayDialog()
		{
		}
	}
	[Token(Token = "0x200069A")]
	internal class HRMAdjuster : MonoBehaviour
	{
		[Token(Token = "0x400293C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuToggleArea onOffSelector;

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuToggleArea platformSelector;

		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MenuSelectButton infoButton;

		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject searchAndConnectPanel;

		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MenuSelectButton searchButton;

		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MenuSelectButton prevDeviceButton;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MenuSelectButton nextDeviceButton;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private MenuSelectButton connectButton;

		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private MenuSelectButton disconnectButton;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI deviceListText;

		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI connectedDeviceText;

		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private RectTransform hrmContainer;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private InfoDialog requestPermissionDialog;

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HRMCon hrmCon;

		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<HRMDevice> hrmDevices;

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int hrmIndex;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int platform;

		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int progressDotCount;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float progressDotsTime;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool noRadio;

		[Token(Token = "0x14000054")]
		public event Action<int> onOffChanged
		{
			[Token(Token = "0x600258C")]
			[Address(RVA = "0xCCE1F4", Offset = "0xCCE1F4", VA = "0xCCE1F4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600258D")]
			[Address(RVA = "0xCCE2A4", Offset = "0xCCE2A4", VA = "0xCCE2A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000055")]
		public event Action<HRMPlatform> platformChanged
		{
			[Token(Token = "0x600258E")]
			[Address(RVA = "0xCCE354", Offset = "0xCCE354", VA = "0xCCE354")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600258F")]
			[Address(RVA = "0xCCE404", Offset = "0xCCE404", VA = "0xCCE404")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000056")]
		public event Action<long> hrmDeviceChanged
		{
			[Token(Token = "0x6002590")]
			[Address(RVA = "0xCCE4B4", Offset = "0xCCE4B4", VA = "0xCCE4B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002591")]
			[Address(RVA = "0xCCE564", Offset = "0xCCE564", VA = "0xCCE564")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002592")]
		[Address(RVA = "0xCCE614", Offset = "0xCCE614", VA = "0xCCE614")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002593")]
		[Address(RVA = "0xCCEB14", Offset = "0xCCEB14", VA = "0xCCEB14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002594")]
		[Address(RVA = "0xCCEFE8", Offset = "0xCCEFE8", VA = "0xCCEFE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002595")]
		[Address(RVA = "0xCCF0DC", Offset = "0xCCF0DC", VA = "0xCCF0DC")]
		public void SetOnOffStatus(int status)
		{
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0xCCF2B4", Offset = "0xCCF2B4", VA = "0xCCF2B4")]
		public void SetPlatform(int platform)
		{
		}

		[Token(Token = "0x6002597")]
		[Address(RVA = "0xCCF2D4", Offset = "0xCCF2D4", VA = "0xCCF2D4")]
		private void OnOffSelector_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x6002598")]
		[Address(RVA = "0xCCF62C", Offset = "0xCCF62C", VA = "0xCCF62C")]
		private void RequestPermission(int result, bool checkbox)
		{
		}

		[Token(Token = "0x6002599")]
		[Address(RVA = "0xCCF290", Offset = "0xCCF290", VA = "0xCCF290")]
		private void ToggleOnOff(int value)
		{
		}

		[Token(Token = "0x600259A")]
		[Address(RVA = "0xCCF790", Offset = "0xCCF790", VA = "0xCCF790")]
		private void InfoButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0xCCF7D4", Offset = "0xCCF7D4", VA = "0xCCF7D4")]
		private void PlatformSelector_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0xCCF940", Offset = "0xCCF940", VA = "0xCCF940")]
		private void SearchButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0xCCF9D8", Offset = "0xCCF9D8", VA = "0xCCF9D8")]
		private void PrevDeviceButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0xCCFAB0", Offset = "0xCCFAB0", VA = "0xCCFAB0")]
		private void NextDeviceButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0xCCF8C8", Offset = "0xCCF8C8", VA = "0xCCF8C8")]
		private void UpdateDeviceListButtons()
		{
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0xCCFCE8", Offset = "0xCCFCE8", VA = "0xCCFCE8")]
		private void ConnectButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025A1")]
		[Address(RVA = "0xCCFDB4", Offset = "0xCCFDB4", VA = "0xCCFDB4")]
		private void DisconnectButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0xCCFE58", Offset = "0xCCFE58", VA = "0xCCFE58")]
		private void HrmCon_StatusChanged(HRMStatus newStatus, HRMStatus oldStatus)
		{
		}

		[Token(Token = "0x60025A3")]
		[Address(RVA = "0xCCEC28", Offset = "0xCCEC28", VA = "0xCCEC28")]
		private void EvaluateHrmStatus(HRMStatus oldStatus, HRMStatus newStatus)
		{
		}

		[Token(Token = "0x60025A4")]
		[Address(RVA = "0xCCFF18", Offset = "0xCCFF18", VA = "0xCCFF18")]
		private void HrmCon_HeartRateChanged(int heartRate)
		{
		}

		[Token(Token = "0x60025A5")]
		[Address(RVA = "0xCD0080", Offset = "0xCD0080", VA = "0xCD0080")]
		private void Update()
		{
		}

		[Token(Token = "0x60025A6")]
		[Address(RVA = "0xCCF518", Offset = "0xCCF518", VA = "0xCCF518")]
		private bool IsMissingPermission()
		{
			return default(bool);
		}

		[Token(Token = "0x60025A7")]
		[Address(RVA = "0xCD01BC", Offset = "0xCD01BC", VA = "0xCD01BC")]
		public HRMAdjuster()
		{
		}
	}
	[Token(Token = "0x200069C")]
	public class InfoDialog : MonoBehaviour
	{
		[Token(Token = "0x200069D")]
		private struct InfoType
		{
			[Token(Token = "0x4002965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string icon;

			[Token(Token = "0x4002966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color color;

			[Token(Token = "0x60025BF")]
			[Address(RVA = "0xCD1138", Offset = "0xCD1138", VA = "0xCD1138")]
			public InfoType(string icon, Color color)
			{
			}
		}

		[Token(Token = "0x200069E")]
		public delegate void OnInfoDialogClosed();

		[Token(Token = "0x4002952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InfoType INFO;

		[Token(Token = "0x4002953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InfoType WARNING;

		[Token(Token = "0x4002954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly InfoType ERROR;

		[Token(Token = "0x4002955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TextMeshProUGUI icon;

		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private TextMeshProUGUI title;

		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI message;

		[Token(Token = "0x4002958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private MenuSelectButton firstButton;

		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI firstButtonText;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private MenuSelectButton secondButton;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TextMeshProUGUI secondButtonText;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private MenuSelectButton thirdButton;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private TextMeshProUGUI thirdButtonText;

		[Token(Token = "0x400295E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private MenuToggleArea checkBoxObject;

		[Token(Token = "0x400295F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private TextMeshProUGUI checkBoxText;

		[Token(Token = "0x4002960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private GameObject[] objectsToDeactivate;

		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Action<int, bool> callback;

		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int numberOfButtons;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool checkBoxIsSelected;

		[Token(Token = "0x14000057")]
		public event OnInfoDialogClosed infoDialogClosed
		{
			[Token(Token = "0x60025AB")]
			[Address(RVA = "0xCD0354", Offset = "0xCD0354", VA = "0xCD0354")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025AC")]
			[Address(RVA = "0xCD03F0", Offset = "0xCD03F0", VA = "0xCD03F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025AD")]
		[Address(RVA = "0xCD048C", Offset = "0xCD048C", VA = "0xCD048C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025AE")]
		[Address(RVA = "0xCD05F8", Offset = "0xCD05F8", VA = "0xCD05F8")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x60025AF")]
		[Address(RVA = "0xCD061C", Offset = "0xCD061C", VA = "0xCD061C")]
		public void OpenInfoDialog(string title, string message, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B0")]
		[Address(RVA = "0xCCF5F4", Offset = "0xCCF5F4", VA = "0xCCF5F4")]
		public void OpenInfoDialog(string title, string message, string firstButtonString, string secondButtonString, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0xCD0BAC", Offset = "0xCD0BAC", VA = "0xCD0BAC")]
		public void OpenInfoDialog(string title, string message, string firstButtonString, string secondButtonString, string thirdButtonString, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0xCD0BE4", Offset = "0xCD0BE4", VA = "0xCD0BE4")]
		public void OpenWarningDialog(string message, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0xCD0CB0", Offset = "0xCD0CB0", VA = "0xCD0CB0")]
		public void OpenWarningDialog(string message, string firstButtonString, string secondButtonString, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0xCD0D5C", Offset = "0xCD0D5C", VA = "0xCD0D5C")]
		public void OpenWarningDialog(string message, string firstButtonString, string secondButtonString, string checkBoxText, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0xCD0E14", Offset = "0xCD0E14", VA = "0xCD0E14")]
		public void OpenErrorDialog(string message, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0xCD06C4", Offset = "0xCD06C4", VA = "0xCD06C4")]
		private void OpenInternal(string title, string content, string firstButtonString, string secondButtonString, string thirdButtonString, InfoType infoType, string checkbox, Action<int, bool> callback)
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0xCD0EE0", Offset = "0xCD0EE0", VA = "0xCD0EE0")]
		private void FirstButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0xCD0F5C", Offset = "0xCD0F5C", VA = "0xCD0F5C")]
		private void SecondButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0xCD0F64", Offset = "0xCD0F64", VA = "0xCD0F64")]
		private void ThirdButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0xCD0EE8", Offset = "0xCD0EE8", VA = "0xCD0EE8")]
		private void Select(int which)
		{
		}

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0xCD0F6C", Offset = "0xCD0F6C", VA = "0xCD0F6C")]
		private void ReactivateGameObjects()
		{
		}

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0xCD0FD0", Offset = "0xCD0FD0", VA = "0xCD0FD0")]
		private void CheckBoxObject_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0xCD0FE0", Offset = "0xCD0FE0", VA = "0xCD0FE0")]
		public bool isOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0xCD1000", Offset = "0xCD1000", VA = "0xCD1000")]
		public InfoDialog()
		{
		}
	}
	[Token(Token = "0x200069F")]
	public interface IPointerOriginProvider
	{
		[Token(Token = "0x60025C2")]
		Transform GetOriginTransform();
	}
	[Token(Token = "0x20006A0")]
	public class JoyStickScroller : MonoBehaviour
	{
		[Token(Token = "0x4002967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Controller leftController;

		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Controller rightController;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform laserPointer;

		[Token(Token = "0x400296A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 localLaserPointerPosition;

		[Token(Token = "0x400296B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float scrollBarSpeed;

		[Token(Token = "0x400296C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float scrollBarTargetValue;

		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float scrollBarLastValue;

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float scrollBarDeviation;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float scrollBarVel;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float scrollBarMultiplikator;

		[Token(Token = "0x4002971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform scrollContent;

		[Token(Token = "0x4002972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform scrollRect;

		[Token(Token = "0x4002973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rect localScrollRect;

		[Token(Token = "0x4002974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Scrollbar verticalScrollBar;

		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float scrollContentHeight;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool laserPointerIsWithinScrollRect;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		private bool scrollingIsEnabled;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float timeSinceLastCheck;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float timeIntervallForChecking;

		[Token(Token = "0x14000058")]
		public event Action<JoyStickScroller> gotActivated
		{
			[Token(Token = "0x60025C3")]
			[Address(RVA = "0xCD125C", Offset = "0xCD125C", VA = "0xCD125C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025C4")]
			[Address(RVA = "0xCD130C", Offset = "0xCD130C", VA = "0xCD130C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000059")]
		public event Action gotDeactivated
		{
			[Token(Token = "0x60025C5")]
			[Address(RVA = "0xCD13BC", Offset = "0xCD13BC", VA = "0xCD13BC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025C6")]
			[Address(RVA = "0xCD1458", Offset = "0xCD1458", VA = "0xCD1458")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025C7")]
		[Address(RVA = "0xCD14F4", Offset = "0xCD14F4", VA = "0xCD14F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025C8")]
		[Address(RVA = "0xCD15CC", Offset = "0xCD15CC", VA = "0xCD15CC")]
		private void Start()
		{
		}

		[Token(Token = "0x60025C9")]
		[Address(RVA = "0xCD17BC", Offset = "0xCD17BC", VA = "0xCD17BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60025CA")]
		[Address(RVA = "0xCD1880", Offset = "0xCD1880", VA = "0xCD1880")]
		private void Update()
		{
		}

		[Token(Token = "0x60025CB")]
		[Address(RVA = "0xCD1ACC", Offset = "0xCD1ACC", VA = "0xCD1ACC")]
		private void ScrollUp(bool isPressed)
		{
		}

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0xCD1B1C", Offset = "0xCD1B1C", VA = "0xCD1B1C")]
		private void ScrollDown(bool isPressed)
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0xCD1990", Offset = "0xCD1990", VA = "0xCD1990")]
		private bool CheckIfLaserPointerIsWithinRectTransform()
		{
			return default(bool);
		}

		[Token(Token = "0x60025CE")]
		[Address(RVA = "0xCD1B6C", Offset = "0xCD1B6C", VA = "0xCD1B6C")]
		public void DisableScrolling()
		{
		}

		[Token(Token = "0x60025CF")]
		[Address(RVA = "0xCD1B74", Offset = "0xCD1B74", VA = "0xCD1B74")]
		public void EnableScrolling()
		{
		}

		[Token(Token = "0x60025D0")]
		[Address(RVA = "0xCD180C", Offset = "0xCD180C", VA = "0xCD180C")]
		private IEnumerator GetScrollBarMultiplikator()
		{
			return null;
		}

		[Token(Token = "0x60025D1")]
		[Address(RVA = "0xCD1BA8", Offset = "0xCD1BA8", VA = "0xCD1BA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60025D2")]
		[Address(RVA = "0xCD1BC4", Offset = "0xCD1BC4", VA = "0xCD1BC4")]
		public JoyStickScroller()
		{
		}
	}
	[Token(Token = "0x20006A2")]
	public class KeyboardKey : MonoBehaviour
	{
		[Token(Token = "0x20006A3")]
		public enum KeyStatus
		{
			[Token(Token = "0x4002986")]
			Normal,
			[Token(Token = "0x4002987")]
			Shifted
		}

		[Token(Token = "0x20006A4")]
		public enum KeyType
		{
			[Token(Token = "0x4002989")]
			Normal,
			[Token(Token = "0x400298A")]
			Backspace,
			[Token(Token = "0x400298B")]
			Shift
		}

		[Token(Token = "0x400297F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string normalText;

		[Token(Token = "0x4002980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string shiftedText;

		[Token(Token = "0x4002981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyType keyType;

		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MenuSelectButton menuSelectButton;

		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextMeshProUGUI keyboardShownText;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Image keyboardShownImage;

		[Token(Token = "0x60025D9")]
		[Address(RVA = "0xCD1D88", Offset = "0xCD1D88", VA = "0xCD1D88")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60025DA")]
		[Address(RVA = "0xCD1F4C", Offset = "0xCD1F4C", VA = "0xCD1F4C")]
		private Image GetActualImage()
		{
			return null;
		}

		[Token(Token = "0x60025DB")]
		[Address(RVA = "0xCD1E48", Offset = "0xCD1E48", VA = "0xCD1E48")]
		private TextMeshProUGUI GetActualText()
		{
			return null;
		}

		[Token(Token = "0x60025DC")]
		[Address(RVA = "0xCD2050", Offset = "0xCD2050", VA = "0xCD2050")]
		internal void SetKeyStatus(KeyStatus status)
		{
		}

		[Token(Token = "0x60025DD")]
		[Address(RVA = "0xCD21C0", Offset = "0xCD21C0", VA = "0xCD21C0")]
		internal MenuSelectButton GetButton()
		{
			return null;
		}

		[Token(Token = "0x60025DE")]
		[Address(RVA = "0xCD21C8", Offset = "0xCD21C8", VA = "0xCD21C8")]
		public KeyboardKey()
		{
		}
	}
	[Token(Token = "0x20006A5")]
	public class LaserPointer : MonoBehaviour, IPointerOriginProvider
	{
		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform beam;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float dotOffsetX;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float dotOffsetY;

		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject laserPoint;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Controller leftController;

		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Controller rightController;

		[Token(Token = "0x4002992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Controller usedController;

		[Token(Token = "0x4002993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Ray laserBeamRay;

		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 laserPointStart;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 hitPositionIn3D;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RaycastHit hit;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int layerMask;

		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float xCorrectionForControllerRotation;

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float yCorrectionForControllerRotation;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float controlX;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float controlY;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float rigScale;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<LLManager.HandSide, Transform> fingerTips;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private FrameworkManager fm;

		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AlternateTrackedDeviceRaycaster[] rayCasters;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string SETTINGS_LASER_HAND;

		[Token(Token = "0x60025DF")]
		[Address(RVA = "0xCD21D0", Offset = "0xCD21D0", VA = "0xCD21D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60025E0")]
		[Address(RVA = "0xCD2708", Offset = "0xCD2708", VA = "0xCD2708")]
		public void SetRigScale(float scale)
		{
		}

		[Token(Token = "0x60025E1")]
		[Address(RVA = "0xCD2710", Offset = "0xCD2710", VA = "0xCD2710")]
		private void LaserPointer_UseButtonUpRight(LLController sender)
		{
		}

		[Token(Token = "0x60025E2")]
		[Address(RVA = "0xCD286C", Offset = "0xCD286C", VA = "0xCD286C")]
		private void LaserPointer_UseButtonUpLeft(LLController sender)
		{
		}

		[Token(Token = "0x60025E3")]
		[Address(RVA = "0xCD2890", Offset = "0xCD2890", VA = "0xCD2890")]
		private void LaserPointer_UseButtonDownRight(LLController sender)
		{
		}

		[Token(Token = "0x60025E4")]
		[Address(RVA = "0xCD28B4", Offset = "0xCD28B4", VA = "0xCD28B4")]
		private void LaserPointer_UseButtonDownLeft(LLController sender)
		{
		}

		[Token(Token = "0x60025E5")]
		[Address(RVA = "0xCD2734", Offset = "0xCD2734", VA = "0xCD2734")]
		private void SaveHandSide(GameConfiguration.LaserHand handside)
		{
		}

		[Token(Token = "0x60025E6")]
		[Address(RVA = "0xCD28D8", Offset = "0xCD28D8", VA = "0xCD28D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60025E7")]
		[Address(RVA = "0xCD2AE4", Offset = "0xCD2AE4", VA = "0xCD2AE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60025E8")]
		[Address(RVA = "0xCD3080", Offset = "0xCD3080", VA = "0xCD3080")]
		private Transform CreateFingerTip(LLManager.HandSide handSide)
		{
			return null;
		}

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0xCD3284", Offset = "0xCD3284", VA = "0xCD3284")]
		private Transform FindRecursively(string v, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0xCD35FC", Offset = "0xCD35FC", VA = "0xCD35FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0xCD36CC", Offset = "0xCD36CC", VA = "0xCD36CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0xCD3710", Offset = "0xCD3710", VA = "0xCD3710")]
		internal void SetRaycasters(AlternateTrackedDeviceRaycaster[] allRaycasters)
		{
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0xCD3718", Offset = "0xCD3718", VA = "0xCD3718", Slot = "4")]
		public Transform GetOriginTransform()
		{
			return null;
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0xCD3808", Offset = "0xCD3808", VA = "0xCD3808")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x20006A6")]
	public class LeaveReviewController : MonoBehaviour
	{
		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int GAME_START_COUNT_REVIEW_REQUEST;

		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string APP_ID;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x40029A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MenuSelectButton button;

		[Token(Token = "0x40029A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FrameworkManager fm;

		[Token(Token = "0x1400005A")]
		public event Action<bool> reviewRequestIsActive
		{
			[Token(Token = "0x60025F0")]
			[Address(RVA = "0xCD3904", Offset = "0xCD3904", VA = "0xCD3904")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025F1")]
			[Address(RVA = "0xCD39B4", Offset = "0xCD39B4", VA = "0xCD39B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0xCD3A64", Offset = "0xCD3A64", VA = "0xCD3A64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0xCD3BD4", Offset = "0xCD3BD4", VA = "0xCD3BD4")]
		private void Start()
		{
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0xCD3CDC", Offset = "0xCD3CDC", VA = "0xCD3CDC")]
		public void ShowReviewRequest()
		{
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0xCD3F64", Offset = "0xCD3F64", VA = "0xCD3F64")]
		private void Button_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0xCD3F68", Offset = "0xCD3F68", VA = "0xCD3F68")]
		private void OpenStore()
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0xCD4580", Offset = "0xCD4580", VA = "0xCD4580")]
		public LeaveReviewController()
		{
		}
	}
	[Token(Token = "0x20006A7")]
	public class EnvironmentListItemView : ListItemView
	{
		[Token(Token = "0x40029A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Image previewImage;

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0xCD4628", Offset = "0xCD4628", VA = "0xCD4628")]
		internal void SetPreviewImage(Sprite image)
		{
		}

		[Token(Token = "0x60025FB")]
		[Address(RVA = "0xCD4644", Offset = "0xCD4644", VA = "0xCD4644")]
		public EnvironmentListItemView()
		{
		}
	}
	[Token(Token = "0x20006A8")]
	internal class EnvironmentListManager : GenericListManager<EnvironmentListItemView>
	{
		[Token(Token = "0x40029A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private EnvironmentManager environmentManager;

		[Token(Token = "0x40029AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<GameEnvironment> environments;

		[Token(Token = "0x1400005B")]
		public event Action<GameEnvironment> EnvClicked
		{
			[Token(Token = "0x60025FC")]
			[Address(RVA = "0xCD4664", Offset = "0xCD4664", VA = "0xCD4664")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025FD")]
			[Address(RVA = "0xCD4714", Offset = "0xCD4714", VA = "0xCD4714")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0xCD47C4", Offset = "0xCD47C4", VA = "0xCD47C4", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0xCD4864", Offset = "0xCD4864", VA = "0xCD4864")]
		private void Start()
		{
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0xCD48E8", Offset = "0xCD48E8", VA = "0xCD48E8")]
		public void RefreshData()
		{
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0xCD4950", Offset = "0xCD4950", VA = "0xCD4950", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0xCD49D4", Offset = "0xCD49D4", VA = "0xCD49D4")]
		internal void SetEnvironment(GameEnvironment selectedEnvironment)
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0xCD4A50", Offset = "0xCD4A50", VA = "0xCD4A50", Slot = "7")]
		internal override bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6002604")]
		[Address(RVA = "0xCD4A58", Offset = "0xCD4A58", VA = "0xCD4A58", Slot = "9")]
		internal override void PopulateItem(EnvironmentListItemView item, int index)
		{
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0xCD4ADC", Offset = "0xCD4ADC", VA = "0xCD4ADC")]
		public EnvironmentListManager()
		{
		}
	}
	[Token(Token = "0x20006A9")]
	public class FileListItemViewWithButton : ListItemViewWithButton, IListItemWithIconAndText
	{
		[Token(Token = "0x40029AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI icon;

		[Token(Token = "0x40029AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TextMeshProUGUI text;

		[Token(Token = "0x6002606")]
		[Address(RVA = "0xCD4B48", Offset = "0xCD4B48", VA = "0xCD4B48", Slot = "6")]
		public void SetIcon(string text)
		{
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0xCD4B6C", Offset = "0xCD4B6C", VA = "0xCD4B6C", Slot = "7")]
		public void SetText(string text)
		{
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0xCD4B90", Offset = "0xCD4B90", VA = "0xCD4B90", Slot = "5")]
		internal override bool ShowAlways()
		{
			return default(bool);
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0xCD4B98", Offset = "0xCD4B98", VA = "0xCD4B98")]
		public FileListItemViewWithButton()
		{
		}
	}
	[Token(Token = "0x20006AA")]
	public abstract class FileListManager<T> : GenericListManager<T> where T : ListItemView, IListItemWithIconAndText
	{
		[Token(Token = "0x40029AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string DIR_ICON;

		[Token(Token = "0x40029AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private TextMeshProUGUI currentDirName;

		[Token(Token = "0x40029AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private MenuSelectButton dirUpButton;

		[Token(Token = "0x40029B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private GameObject missingPermissionPanel;

		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private PermissionsHelper permissionsHelper;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected DirectoryInfo currentDir;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<FileSystemInfo> items;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<DriveInfo> drives;

		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool isShowingDrives;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private string androidBasePath;

		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isMissingPermission;

		[Token(Token = "0x40029BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isPermissionGranted;

		[Token(Token = "0x40029BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected FrameworkManager fm;

		[Token(Token = "0x1400005C")]
		public event Action<int, string> FileClicked
		{
			[Token(Token = "0x600260A")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600260B")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005D")]
		public event Action<string> NavigationHappened
		{
			[Token(Token = "0x600260C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600260D")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400005E")]
		public event Action PermissionGranted
		{
			[Token(Token = "0x600260E")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600260F")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002610")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x6002611")]
		private void PermissionsHelper_PermissionGranted()
		{
		}

		[Token(Token = "0x6002612")]
		private void Start()
		{
		}

		[Token(Token = "0x6002613")]
		private void Update()
		{
		}

		[Token(Token = "0x6002614")]
		private void DirUpButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002615")]
		protected virtual void DriveListShown()
		{
		}

		[Token(Token = "0x6002616")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x6002617")]
		protected virtual void ItemClickedInternal(int index)
		{
		}

		[Token(Token = "0x6002618")]
		internal override void PopulateItem(T item, int index)
		{
		}

		[Token(Token = "0x6002619")]
		protected virtual void DecorateItem(T item, FileSystemInfo fsi)
		{
		}

		[Token(Token = "0x600261A")]
		protected abstract void PopulateItem(T item, FileSystemInfo fsi);

		[Token(Token = "0x600261B")]
		protected abstract void StoreScrollPosition(int index);

		[Token(Token = "0x600261C")]
		protected abstract int RestoreScrollPosition(string path);

		[Token(Token = "0x600261D")]
		private void GenerateDriveList()
		{
		}

		[Token(Token = "0x600261E")]
		protected void GenerateList()
		{
		}

		[Token(Token = "0x600261F")]
		public List<FileSystemInfo> GenerateDirEntries(string dirName, bool includeDirectories = true)
		{
			return null;
		}

		[Token(Token = "0x6002620")]
		protected abstract string[] GetFileExts();

		[Token(Token = "0x6002621")]
		protected bool IsDirectory(FileSystemInfo info)
		{
			return default(bool);
		}

		[Token(Token = "0x6002622")]
		public void Initialize(string dir)
		{
		}

		[Token(Token = "0x6002623")]
		protected virtual void InitializeInternal(bool isDriveList)
		{
		}

		[Token(Token = "0x6002624")]
		public int GetIndexOfEntry(string entryName)
		{
			return default(int);
		}

		[Token(Token = "0x6002625")]
		private void UpdateCurrentDirText()
		{
		}

		[Token(Token = "0x6002626")]
		private void ElideIfNecessary()
		{
		}

		[Token(Token = "0x6002627")]
		protected FileListManager()
		{
		}
	}
	[Token(Token = "0x20006AE")]
	public abstract class GenericListManager<T> : MonoBehaviour where T : ListItemView
	{
		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int FAST_SCROLL_FACTOR;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private RectTransform container;

		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private RectTransform elementsContainer;

		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private LayoutGroup layoutGroup;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private MenuSelectButton scrollUpButton;

		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private MenuSelectButton scrollDownButton;

		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private MenuSelectButton scrollUpFastButton;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private MenuSelectButton scrollDownFastButton;

		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private T itemTemplate;

		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		internal GameObject emptyListInfo;

		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal List<T> viewsItems;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MenuToggleArea toggleArea;

		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int selectedIndex;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int itemsPerPage;

		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int listOffset;

		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int listSize;

		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x6002631")]
		internal virtual void Awake()
		{
		}

		[Token(Token = "0x6002632")]
		internal virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002633")]
		internal virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002634")]
		private void ScrollUpButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002635")]
		private void ScrollDownButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002636")]
		private void ScrollUpFastButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002637")]
		private void ScrollDownFastButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002638")]
		internal void PerformScrolling(int stepsize)
		{
		}

		[Token(Token = "0x6002639")]
		internal void GenerateList(int listSize, bool scrollToFirstPage = true)
		{
		}

		[Token(Token = "0x600263A")]
		private void PopulateList()
		{
		}

		[Token(Token = "0x600263B")]
		internal void ResetSelection()
		{
		}

		[Token(Token = "0x600263C")]
		private void ValidateScrollButtons()
		{
		}

		[Token(Token = "0x600263D")]
		public void SelectItem(int index)
		{
		}

		[Token(Token = "0x600263E")]
		public void SelectItemSilent(int index)
		{
		}

		[Token(Token = "0x600263F")]
		public void ScrollItemIntoSight(int itemIndex)
		{
		}

		[Token(Token = "0x6002640")]
		private void ItemClicked_Internal(int index)
		{
		}

		[Token(Token = "0x6002641")]
		private void ItemHovered_Internal()
		{
		}

		[Token(Token = "0x6002642")]
		internal virtual bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6002643")]
		internal abstract void ItemClicked(int index);

		[Token(Token = "0x6002644")]
		internal abstract void PopulateItem(T item, int index);

		[Token(Token = "0x6002645")]
		internal virtual void ReactToListContentChanged(int pageNumber)
		{
		}

		[Token(Token = "0x6002646")]
		internal virtual void InitializeItem(T item)
		{
		}

		[Token(Token = "0x6002647")]
		internal int IndexLocalToGlobal(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6002648")]
		protected GenericListManager()
		{
		}
	}
	[Token(Token = "0x20006AF")]
	public class HighscoreItemView : ListItemView
	{
		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image highlightBackground;

		[Token(Token = "0x40029D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI weaponIcon;

		[Token(Token = "0x40029D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI rankText;

		[Token(Token = "0x40029D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI nameText;

		[Token(Token = "0x40029D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI scoreText;

		[Token(Token = "0x40029D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI rankIcon;

		[Token(Token = "0x600264A")]
		[Address(RVA = "0xCD4C64", Offset = "0xCD4C64", VA = "0xCD4C64")]
		public HighscoreItemView()
		{
		}
	}
	[Token(Token = "0x20006B0")]
	public class HighscoreManager : GenericListManager<HighscoreItemView>
	{
		[Token(Token = "0x20006B1")]
		public enum InfoType
		{
			[Token(Token = "0x40029E1")]
			Empty,
			[Token(Token = "0x40029E2")]
			Loading,
			[Token(Token = "0x40029E3")]
			PlatformNotAvailable
		}

		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<WeaponType, string> WEAPON_ICON;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Color[] RANK_COLORS;

		[Token(Token = "0x40029DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Color highlightColor;

		[Token(Token = "0x40029DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private MenuSelectButton toTopButton;

		[Token(Token = "0x40029DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private MenuSelectButton toPlayerPosButton;

		[Token(Token = "0x40029DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int playerPos;

		[Token(Token = "0x40029DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<LLPlatform.LeaderboardEntry> entries;

		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private object playerId;

		[Token(Token = "0x600264B")]
		[Address(RVA = "0xCD4C74", Offset = "0xCD4C74", VA = "0xCD4C74", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x600264C")]
		[Address(RVA = "0xCD4D64", Offset = "0xCD4D64", VA = "0xCD4D64")]
		private void ToPlayerPosButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600264D")]
		[Address(RVA = "0xCD4DB0", Offset = "0xCD4DB0", VA = "0xCD4DB0")]
		private void ToTopButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600264E")]
		[Address(RVA = "0xCD4DFC", Offset = "0xCD4DFC", VA = "0xCD4DFC")]
		public void PopulateHighscore(List<LLPlatform.LeaderboardEntry> entries, object playerId, bool isFirstCallback)
		{
		}

		[Token(Token = "0x600264F")]
		[Address(RVA = "0xCD52CC", Offset = "0xCD52CC", VA = "0xCD52CC")]
		private void HideLoadingScreen()
		{
		}

		[Token(Token = "0x6002650")]
		[Address(RVA = "0xCD52EC", Offset = "0xCD52EC", VA = "0xCD52EC", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x6002651")]
		[Address(RVA = "0xCD52F0", Offset = "0xCD52F0", VA = "0xCD52F0", Slot = "10")]
		internal override void ReactToListContentChanged(int pageNumber)
		{
		}

		[Token(Token = "0x6002652")]
		[Address(RVA = "0xCD5310", Offset = "0xCD5310", VA = "0xCD5310", Slot = "9")]
		internal override void PopulateItem(HighscoreItemView item, int index)
		{
		}

		[Token(Token = "0x6002653")]
		[Address(RVA = "0xCD50DC", Offset = "0xCD50DC", VA = "0xCD50DC")]
		internal void SetInfoType(InfoType infoType)
		{
		}

		[Token(Token = "0x6002654")]
		[Address(RVA = "0xCD56A4", Offset = "0xCD56A4", VA = "0xCD56A4")]
		public HighscoreManager()
		{
		}
	}
	[Token(Token = "0x20006B2")]
	public class IconTextItemView : ListItemView, IListItemWithIconAndText
	{
		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI icon;

		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI text;

		[Token(Token = "0x6002656")]
		[Address(RVA = "0xCD5914", Offset = "0xCD5914", VA = "0xCD5914", Slot = "5")]
		public void SetIcon(string text)
		{
		}

		[Token(Token = "0x6002657")]
		[Address(RVA = "0xCD5938", Offset = "0xCD5938", VA = "0xCD5938", Slot = "6")]
		public void SetText(string text)
		{
		}

		[Token(Token = "0x6002658")]
		[Address(RVA = "0xCD595C", Offset = "0xCD595C", VA = "0xCD595C")]
		public IconTextItemView()
		{
		}
	}
	[Token(Token = "0x20006B3")]
	public class ListItemView : MonoBehaviour
	{
		[Token(Token = "0x20006B4")]
		public delegate void ItemHovered();

		[Token(Token = "0x40029E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MenuToggleButton mtb;

		[Token(Token = "0x170004F0")]
		public int index
		{
			[Token(Token = "0x6002659")]
			[Address(RVA = "0xCD596C", Offset = "0xCD596C", VA = "0xCD596C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600265A")]
			[Address(RVA = "0xCD5974", Offset = "0xCD5974", VA = "0xCD5974")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1400005F")]
		public event Action<int> ItemClicked
		{
			[Token(Token = "0x600265B")]
			[Address(RVA = "0xCD597C", Offset = "0xCD597C", VA = "0xCD597C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600265C")]
			[Address(RVA = "0xCD5A2C", Offset = "0xCD5A2C", VA = "0xCD5A2C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000060")]
		public event ItemHovered itemHovered
		{
			[Token(Token = "0x600265D")]
			[Address(RVA = "0xCD5ADC", Offset = "0xCD5ADC", VA = "0xCD5ADC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600265E")]
			[Address(RVA = "0xCD5B78", Offset = "0xCD5B78", VA = "0xCD5B78")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0xCD5C14", Offset = "0xCD5C14", VA = "0xCD5C14", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6002660")]
		[Address(RVA = "0xCD5EC8", Offset = "0xCD5EC8", VA = "0xCD5EC8")]
		private void Mtb_onClick(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0xCD5EE8", Offset = "0xCD5EE8", VA = "0xCD5EE8")]
		private void Mtb_onHover(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002662")]
		[Address(RVA = "0xCD5F04", Offset = "0xCD5F04", VA = "0xCD5F04")]
		internal bool IsSelected()
		{
			return default(bool);
		}

		[Token(Token = "0x6002663")]
		[Address(RVA = "0xCD4654", Offset = "0xCD4654", VA = "0xCD4654")]
		public ListItemView()
		{
		}
	}
	[Token(Token = "0x20006B5")]
	public abstract class ListItemViewWithButton : ListItemView
	{
		[Token(Token = "0x40029EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton button;

		[Token(Token = "0x40029EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<RectTransform> itemsToMove;

		[Token(Token = "0x40029EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<RectTransform> itemsToShorten;

		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float margin;

		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<RectTransform, float> initialPosX;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<RectTransform, float> initialWidth;

		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isButtonEnabled;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x14000061")]
		public event Action<int> ButtonClicked
		{
			[Token(Token = "0x6002666")]
			[Address(RVA = "0xCD606C", Offset = "0xCD606C", VA = "0xCD606C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002667")]
			[Address(RVA = "0xCD611C", Offset = "0xCD611C", VA = "0xCD611C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002668")]
		[Address(RVA = "0xCD61CC", Offset = "0xCD61CC", VA = "0xCD61CC", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6002669")]
		[Address(RVA = "0xCD68B4", Offset = "0xCD68B4", VA = "0xCD68B4")]
		private void Button_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600266A")]
		[Address(RVA = "0xCD6928", Offset = "0xCD6928", VA = "0xCD6928")]
		private void Button_onHover(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600266B")]
		[Address(RVA = "0xCD6974", Offset = "0xCD6974", VA = "0xCD6974")]
		private void Mtb_onClick(MenuToggleButton button)
		{
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0xCD69C4", Offset = "0xCD69C4", VA = "0xCD69C4")]
		private void Mtb_OnDeselect(MenuToggleButton obj)
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0xCD6978", Offset = "0xCD6978", VA = "0xCD6978")]
		public void EvaluateButtonState()
		{
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0xCD69C8", Offset = "0xCD69C8", VA = "0xCD69C8")]
		public void ToggleButton(bool shouldShow)
		{
		}

		[Token(Token = "0x600266F")]
		internal abstract bool ShowAlways();

		[Token(Token = "0x6002670")]
		[Address(RVA = "0xCD6DBC", Offset = "0xCD6DBC", VA = "0xCD6DBC")]
		public void SetEnableButton(bool shouldEnable)
		{
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0xCD4B9C", Offset = "0xCD4B9C", VA = "0xCD4B9C")]
		protected ListItemViewWithButton()
		{
		}
	}
	[Token(Token = "0x20006B6")]
	public class OfficialSongListItemView : ListItemViewWithButton
	{
		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI title;

		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TextMeshProUGUI artist;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TextMeshProUGUI difficulties;

		[Token(Token = "0x6002672")]
		[Address(RVA = "0xCD6DC8", Offset = "0xCD6DC8", VA = "0xCD6DC8")]
		public void SetTitle(string text)
		{
		}

		[Token(Token = "0x6002673")]
		[Address(RVA = "0xCD6DEC", Offset = "0xCD6DEC", VA = "0xCD6DEC")]
		public void SetArtist(string text)
		{
		}

		[Token(Token = "0x6002674")]
		[Address(RVA = "0xCD6E10", Offset = "0xCD6E10", VA = "0xCD6E10")]
		public void SetDifficulties(string text)
		{
		}

		[Token(Token = "0x6002675")]
		[Address(RVA = "0xCD6E34", Offset = "0xCD6E34", VA = "0xCD6E34", Slot = "5")]
		internal override bool ShowAlways()
		{
			return default(bool);
		}

		[Token(Token = "0x6002676")]
		[Address(RVA = "0xCD6E3C", Offset = "0xCD6E3C", VA = "0xCD6E3C")]
		public OfficialSongListItemView()
		{
		}
	}
	[Token(Token = "0x20006B7")]
	internal class OfficialSongListManager : GenericListManager<OfficialSongListItemView>
	{
		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SongManager songManager;

		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<Song> songs;

		[Token(Token = "0x14000062")]
		public event Action<int> SongClicked
		{
			[Token(Token = "0x6002677")]
			[Address(RVA = "0xCD6E40", Offset = "0xCD6E40", VA = "0xCD6E40")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002678")]
			[Address(RVA = "0xCD6EF0", Offset = "0xCD6EF0", VA = "0xCD6EF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000063")]
		public event Action<Song> AddToPlaylistClicked
		{
			[Token(Token = "0x6002679")]
			[Address(RVA = "0xCD6FA0", Offset = "0xCD6FA0", VA = "0xCD6FA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600267A")]
			[Address(RVA = "0xCD7050", Offset = "0xCD7050", VA = "0xCD7050")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600267B")]
		[Address(RVA = "0xCD7100", Offset = "0xCD7100", VA = "0xCD7100", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x600267C")]
		[Address(RVA = "0xCD71A0", Offset = "0xCD71A0", VA = "0xCD71A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600267D")]
		[Address(RVA = "0xCD7230", Offset = "0xCD7230", VA = "0xCD7230")]
		public void SetSongPack(int songPack)
		{
		}

		[Token(Token = "0x600267E")]
		[Address(RVA = "0xCD72C4", Offset = "0xCD72C4", VA = "0xCD72C4", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x600267F")]
		[Address(RVA = "0xCD72E0", Offset = "0xCD72E0", VA = "0xCD72E0", Slot = "7")]
		internal override bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6002680")]
		[Address(RVA = "0xCD72E8", Offset = "0xCD72E8", VA = "0xCD72E8", Slot = "9")]
		internal override void PopulateItem(OfficialSongListItemView item, int index)
		{
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0xCD75B4", Offset = "0xCD75B4", VA = "0xCD75B4", Slot = "11")]
		internal override void InitializeItem(OfficialSongListItemView item)
		{
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0xCD7644", Offset = "0xCD7644", VA = "0xCD7644")]
		private void AddToPlaylistButton_onClick(int index)
		{
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0xCD76FC", Offset = "0xCD76FC", VA = "0xCD76FC")]
		public void SetShowAddToPlaylistButton(bool shouldShow)
		{
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0xCD7850", Offset = "0xCD7850", VA = "0xCD7850")]
		public OfficialSongListManager()
		{
		}
	}
	[Token(Token = "0x20006B8")]
	public class PlaylistEndscreenManager : GenericListManager<PlaylistSongItemView>
	{
		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<SongStatistic> songStats;

		[Token(Token = "0x40029FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int index;

		[Token(Token = "0x14000064")]
		public event Action<int> songClicked
		{
			[Token(Token = "0x6002685")]
			[Address(RVA = "0xCD78BC", Offset = "0xCD78BC", VA = "0xCD78BC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002686")]
			[Address(RVA = "0xCD796C", Offset = "0xCD796C", VA = "0xCD796C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0xCD7A1C", Offset = "0xCD7A1C", VA = "0xCD7A1C")]
		public void SetSongStats(List<SongStatistic> songStats)
		{
		}

		[Token(Token = "0x6002688")]
		[Address(RVA = "0xCD7AB8", Offset = "0xCD7AB8", VA = "0xCD7AB8", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x6002689")]
		[Address(RVA = "0xCD7AD8", Offset = "0xCD7AD8", VA = "0xCD7AD8", Slot = "9")]
		internal override void PopulateItem(PlaylistSongItemView item, int index)
		{
		}

		[Token(Token = "0x600268A")]
		[Address(RVA = "0xCD7CE0", Offset = "0xCD7CE0", VA = "0xCD7CE0")]
		public PlaylistEndscreenManager()
		{
		}
	}
	[Token(Token = "0x20006B9")]
	public class PlaylistEntryItemView : ListItemViewWithButton
	{
		[Token(Token = "0x40029FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Color DARK_GREY;

		[Token(Token = "0x40029FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Color LIGHT_GREY;

		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextMeshProUGUI title;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TextMeshProUGUI difficulties;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private GameObject warning;

		[Token(Token = "0x600268B")]
		[Address(RVA = "0xCD7D4C", Offset = "0xCD7D4C", VA = "0xCD7D4C")]
		public void SetTitle(string text)
		{
		}

		[Token(Token = "0x600268C")]
		[Address(RVA = "0xCD7D70", Offset = "0xCD7D70", VA = "0xCD7D70")]
		public void SetDifficulties(string text)
		{
		}

		[Token(Token = "0x600268D")]
		[Address(RVA = "0xCD7D94", Offset = "0xCD7D94", VA = "0xCD7D94")]
		public void SetWarning(bool isWarning)
		{
		}

		[Token(Token = "0x600268E")]
		[Address(RVA = "0xCD7EC0", Offset = "0xCD7EC0", VA = "0xCD7EC0", Slot = "5")]
		internal override bool ShowAlways()
		{
			return default(bool);
		}

		[Token(Token = "0x600268F")]
		[Address(RVA = "0xCD7EC8", Offset = "0xCD7EC8", VA = "0xCD7EC8")]
		public PlaylistEntryItemView()
		{
		}
	}
	[Token(Token = "0x20006BA")]
	public class PlaylistEntryManager : GenericListManager<PlaylistEntryItemView>
	{
		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private MenuToggleArea shuffleToggleArea;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private MenuToggleArea enduranceToggleArea;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private MenuToggleArea repeatToggleArea;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private MenuSelectButton renamePlaylist;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private MenuSelectButton deletePlaylist;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private MenuSelectButton moveUp;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private MenuSelectButton moveDown;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private MenuSelectButton findSong;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private ValueBasedLocalizedString songCounter;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private TextMeshProUGUI durationText;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private StringEditDialog playlistNameEditDialog;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private StartButton playlistStartButton;

		[Token(Token = "0x4002A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Playlist playlist;

		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int playlistIndex;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private bool isInteractable;

		[Token(Token = "0x14000065")]
		public event Action<Playlist> playlistChanged
		{
			[Token(Token = "0x6002691")]
			[Address(RVA = "0xCD7F30", Offset = "0xCD7F30", VA = "0xCD7F30")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002692")]
			[Address(RVA = "0xCD7FE0", Offset = "0xCD7FE0", VA = "0xCD7FE0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000066")]
		public event Action<Playlist> PlaylistRenamed
		{
			[Token(Token = "0x6002693")]
			[Address(RVA = "0xCD8090", Offset = "0xCD8090", VA = "0xCD8090")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002694")]
			[Address(RVA = "0xCD8140", Offset = "0xCD8140", VA = "0xCD8140")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000067")]
		public event Action<Playlist> PlaylistDeleted
		{
			[Token(Token = "0x6002695")]
			[Address(RVA = "0xCD81F0", Offset = "0xCD81F0", VA = "0xCD81F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002696")]
			[Address(RVA = "0xCD82A0", Offset = "0xCD82A0", VA = "0xCD82A0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000068")]
		public event Action<PlaylistEntry> entrySelected
		{
			[Token(Token = "0x6002697")]
			[Address(RVA = "0xCD8350", Offset = "0xCD8350", VA = "0xCD8350")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002698")]
			[Address(RVA = "0xCD8400", Offset = "0xCD8400", VA = "0xCD8400")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000069")]
		public event Action<Playlist, int> startPressed
		{
			[Token(Token = "0x6002699")]
			[Address(RVA = "0xCD84B0", Offset = "0xCD84B0", VA = "0xCD84B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600269A")]
			[Address(RVA = "0xCD8560", Offset = "0xCD8560", VA = "0xCD8560")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0xCD8610", Offset = "0xCD8610", VA = "0xCD8610", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x600269C")]
		[Address(RVA = "0xCD89A0", Offset = "0xCD89A0", VA = "0xCD89A0")]
		private void FindSong_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0xCD89F8", Offset = "0xCD89F8", VA = "0xCD89F8")]
		private void MoveUp_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0xCD8ACC", Offset = "0xCD8ACC", VA = "0xCD8ACC")]
		private void MoveDown_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0xCD8BC0", Offset = "0xCD8BC0", VA = "0xCD8BC0")]
		private void DeletePlaylist_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0xCD8D14", Offset = "0xCD8D14", VA = "0xCD8D14")]
		private void RenamePlaylist_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0xCD8CF4", Offset = "0xCD8CF4", VA = "0xCD8CF4")]
		private void ToggleStartButtonActive(bool isActive)
		{
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0xCD8DF8", Offset = "0xCD8DF8", VA = "0xCD8DF8")]
		private void RepeatToggleArea_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0xCD8E38", Offset = "0xCD8E38", VA = "0xCD8E38")]
		private void EnduranceToggleArea_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0xCD8E78", Offset = "0xCD8E78", VA = "0xCD8E78")]
		private void ShuffleToggleArea_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0xCD8EB8", Offset = "0xCD8EB8", VA = "0xCD8EB8", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0xCD8F04", Offset = "0xCD8F04", VA = "0xCD8F04")]
		private void UpdateSongStats()
		{
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0xCD8F7C", Offset = "0xCD8F7C", VA = "0xCD8F7C")]
		public void AddSongToPlaylist(Song song, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0xCD90B8", Offset = "0xCD90B8", VA = "0xCD90B8")]
		public void SetPlaylist(Playlist playlist, int playlistIndex)
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0xCD91A0", Offset = "0xCD91A0", VA = "0xCD91A0")]
		public void SetInteractable(bool isInteractable)
		{
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0xCD91F8", Offset = "0xCD91F8", VA = "0xCD91F8", Slot = "9")]
		internal override void PopulateItem(PlaylistEntryItemView item, int index)
		{
		}

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0xCD9320", Offset = "0xCD9320", VA = "0xCD9320", Slot = "11")]
		internal override void InitializeItem(PlaylistEntryItemView item)
		{
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0xCD93B0", Offset = "0xCD93B0", VA = "0xCD93B0")]
		private void RemoveFromPlaylistButton_onClick(int localIndex)
		{
		}

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0xCD9540", Offset = "0xCD9540", VA = "0xCD9540")]
		private void StartButton_onClick()
		{
		}

		[Token(Token = "0x60026AE")]
		[Address(RVA = "0xCD8948", Offset = "0xCD8948", VA = "0xCD8948")]
		private void SetSongSelected(bool isSelected, bool isFirst = false, bool isLast = false)
		{
		}

		[Token(Token = "0x60026AF")]
		[Address(RVA = "0xCD99E8", Offset = "0xCD99E8", VA = "0xCD99E8", Slot = "5")]
		internal override void OnEnable()
		{
		}

		[Token(Token = "0x60026B0")]
		[Address(RVA = "0xCD9A90", Offset = "0xCD9A90", VA = "0xCD9A90", Slot = "6")]
		internal override void OnDisable()
		{
		}

		[Token(Token = "0x60026B1")]
		[Address(RVA = "0xCD9B38", Offset = "0xCD9B38", VA = "0xCD9B38")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x60026B2")]
		[Address(RVA = "0xCD9BA4", Offset = "0xCD9BA4", VA = "0xCD9BA4")]
		public PlaylistEntryManager()
		{
		}
	}
	[Token(Token = "0x20006BD")]
	public class PlaylistListItemView : ListItemView
	{
		[Token(Token = "0x4002A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI plName;

		[Token(Token = "0x4002A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI stats;

		[Token(Token = "0x60026BA")]
		[Address(RVA = "0xCD9D9C", Offset = "0xCD9D9C", VA = "0xCD9D9C")]
		public void SetName(string text)
		{
		}

		[Token(Token = "0x60026BB")]
		[Address(RVA = "0xCD9DC0", Offset = "0xCD9DC0", VA = "0xCD9DC0")]
		public void SetStats(string text)
		{
		}

		[Token(Token = "0x60026BC")]
		[Address(RVA = "0xCD9DE4", Offset = "0xCD9DE4", VA = "0xCD9DE4")]
		public PlaylistListItemView()
		{
		}
	}
	[Token(Token = "0x20006BE")]
	public class PlaylistListManager : GenericListManager<PlaylistListItemView>
	{
		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private MenuSelectButton addButton;

		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private StringEditDialog playlistNameEditDialog;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<Playlist> playlists;

		[Token(Token = "0x1400006A")]
		public event Action<Playlist, int> playlistSelected
		{
			[Token(Token = "0x60026BD")]
			[Address(RVA = "0xCD9DF4", Offset = "0xCD9DF4", VA = "0xCD9DF4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026BE")]
			[Address(RVA = "0xCD9EA4", Offset = "0xCD9EA4", VA = "0xCD9EA4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006B")]
		public event Action playlistsChanged
		{
			[Token(Token = "0x60026BF")]
			[Address(RVA = "0xCD9F54", Offset = "0xCD9F54", VA = "0xCD9F54")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026C0")]
			[Address(RVA = "0xCD9FF0", Offset = "0xCD9FF0", VA = "0xCD9FF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60026C1")]
		[Address(RVA = "0xCDA08C", Offset = "0xCDA08C", VA = "0xCDA08C", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x60026C2")]
		[Address(RVA = "0xCDA138", Offset = "0xCDA138", VA = "0xCDA138")]
		private void AddButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60026C3")]
		[Address(RVA = "0xCDA228", Offset = "0xCDA228", VA = "0xCDA228", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x60026C4")]
		[Address(RVA = "0xCDA2B0", Offset = "0xCDA2B0", VA = "0xCDA2B0")]
		public void SetPlaylists(List<Playlist> playlists)
		{
		}

		[Token(Token = "0x60026C5")]
		[Address(RVA = "0xCDA328", Offset = "0xCDA328", VA = "0xCDA328", Slot = "9")]
		internal override void PopulateItem(PlaylistListItemView item, int index)
		{
		}

		[Token(Token = "0x60026C6")]
		[Address(RVA = "0xCDA47C", Offset = "0xCDA47C", VA = "0xCDA47C")]
		public void DeletePlaylist(Playlist playlist)
		{
		}

		[Token(Token = "0x60026C7")]
		[Address(RVA = "0xCDA528", Offset = "0xCDA528", VA = "0xCDA528")]
		public void UpdateList()
		{
		}

		[Token(Token = "0x60026C8")]
		[Address(RVA = "0xCDA590", Offset = "0xCDA590", VA = "0xCDA590")]
		public void SortList()
		{
		}

		[Token(Token = "0x60026C9")]
		[Address(RVA = "0xCDA6EC", Offset = "0xCDA6EC", VA = "0xCDA6EC", Slot = "5")]
		internal override void OnEnable()
		{
		}

		[Token(Token = "0x60026CA")]
		[Address(RVA = "0xCDA794", Offset = "0xCDA794", VA = "0xCDA794", Slot = "6")]
		internal override void OnDisable()
		{
		}

		[Token(Token = "0x60026CB")]
		[Address(RVA = "0xCDA83C", Offset = "0xCDA83C", VA = "0xCDA83C")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x60026CC")]
		[Address(RVA = "0xCDA8A4", Offset = "0xCDA8A4", VA = "0xCDA8A4")]
		public PlaylistListManager()
		{
		}
	}
	[Token(Token = "0x20006C0")]
	public class SkyboxFileListManager : FileListManager<IconTextItemView>
	{
		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] FILE_EXTS;

		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string IMAGE_ICON;

		[Token(Token = "0x60026D1")]
		[Address(RVA = "0xCDAB2C", Offset = "0xCDAB2C", VA = "0xCDAB2C", Slot = "7")]
		internal override bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x60026D2")]
		[Address(RVA = "0xCDAB34", Offset = "0xCDAB34", VA = "0xCDAB34", Slot = "16")]
		protected override void StoreScrollPosition(int index)
		{
		}

		[Token(Token = "0x60026D3")]
		[Address(RVA = "0xCDABB8", Offset = "0xCDABB8", VA = "0xCDABB8", Slot = "17")]
		protected override int RestoreScrollPosition(string path)
		{
			return default(int);
		}

		[Token(Token = "0x60026D4")]
		[Address(RVA = "0xCDAC38", Offset = "0xCDAC38", VA = "0xCDAC38", Slot = "15")]
		protected override void PopulateItem(IconTextItemView item, FileSystemInfo fsi)
		{
		}

		[Token(Token = "0x60026D5")]
		[Address(RVA = "0xCDACF4", Offset = "0xCDACF4", VA = "0xCDACF4", Slot = "18")]
		protected override string[] GetFileExts()
		{
			return null;
		}

		[Token(Token = "0x60026D6")]
		[Address(RVA = "0xCDAD4C", Offset = "0xCDAD4C", VA = "0xCDAD4C")]
		public SkyboxFileListManager()
		{
		}
	}
	[Token(Token = "0x20006C1")]
	public class SkyboxInternalListManager : GenericListManager<IconTextItemView>
	{
		[Token(Token = "0x20006C2")]
		public class InternalSkybox
		{
			[Token(Token = "0x4002A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string Name;

			[Token(Token = "0x4002A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Rotation;

			[Token(Token = "0x4002A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 SunPosition;

			[Token(Token = "0x60026E1")]
			[Address(RVA = "0xCDBFB8", Offset = "0xCDBFB8", VA = "0xCDBFB8")]
			public string GetName()
			{
				return null;
			}

			[Token(Token = "0x60026E2")]
			[Address(RVA = "0xCDBFB0", Offset = "0xCDBFB0", VA = "0xCDBFB0")]
			public InternalSkybox()
			{
			}
		}

		[Token(Token = "0x4002A26")]
		public const string INTERNAL_PREFIX = ":internal:";

		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly InternalSkybox[] SKYBOXES;

		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string IMAGE_ICON;

		[Token(Token = "0x1400006C")]
		public event Action<InternalSkybox> SkyboxSelected
		{
			[Token(Token = "0x60026D8")]
			[Address(RVA = "0xCDAF80", Offset = "0xCDAF80", VA = "0xCDAF80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026D9")]
			[Address(RVA = "0xCDB030", Offset = "0xCDB030", VA = "0xCDB030")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60026DA")]
		[Address(RVA = "0xCDB0E0", Offset = "0xCDB0E0", VA = "0xCDB0E0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60026DB")]
		[Address(RVA = "0xCDB168", Offset = "0xCDB168", VA = "0xCDB168", Slot = "7")]
		internal override bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x60026DC")]
		[Address(RVA = "0xCDB170", Offset = "0xCDB170", VA = "0xCDB170", Slot = "8")]
		internal override void ItemClicked(int index)
		{
		}

		[Token(Token = "0x60026DD")]
		[Address(RVA = "0xCDB210", Offset = "0xCDB210", VA = "0xCDB210", Slot = "9")]
		internal override void PopulateItem(IconTextItemView item, int index)
		{
		}

		[Token(Token = "0x60026DE")]
		[Address(RVA = "0xCDB2E0", Offset = "0xCDB2E0", VA = "0xCDB2E0")]
		internal void SelectSkybox(string nameWithPrefix)
		{
		}

		[Token(Token = "0x60026DF")]
		[Address(RVA = "0xCDB418", Offset = "0xCDB418", VA = "0xCDB418")]
		public SkyboxInternalListManager()
		{
		}
	}
	[Token(Token = "0x20006C3")]
	public class SongFileListManager : FileListManager<FileListItemViewWithButton>
	{
		[Token(Token = "0x4002A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] FILE_EXTS;

		[Token(Token = "0x4002A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string MUSIC_ICON;

		[Token(Token = "0x4002A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private MenuSelectButton addFolderToPlaylistButton;

		[Token(Token = "0x4002A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool showAddToPlaylistButtons;

		[Token(Token = "0x1400006D")]
		public event Action<string> SongAddToPlaylistClicked
		{
			[Token(Token = "0x60026E3")]
			[Address(RVA = "0xCDC004", Offset = "0xCDC004", VA = "0xCDC004")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026E4")]
			[Address(RVA = "0xCDC0B8", Offset = "0xCDC0B8", VA = "0xCDC0B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400006E")]
		public event Action<string> FolderAddToPlaylistClicked
		{
			[Token(Token = "0x60026E5")]
			[Address(RVA = "0xCDC16C", Offset = "0xCDC16C", VA = "0xCDC16C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026E6")]
			[Address(RVA = "0xCDC220", Offset = "0xCDC220", VA = "0xCDC220")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60026E7")]
		[Address(RVA = "0xCDC2D4", Offset = "0xCDC2D4", VA = "0xCDC2D4", Slot = "4")]
		internal override void Awake()
		{
		}

		[Token(Token = "0x60026E8")]
		[Address(RVA = "0xCDC380", Offset = "0xCDC380", VA = "0xCDC380")]
		private void AddFolderToPlaylistButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60026E9")]
		[Address(RVA = "0xCDC3C8", Offset = "0xCDC3C8", VA = "0xCDC3C8", Slot = "7")]
		internal override bool ShouldPlayClickSound()
		{
			return default(bool);
		}

		[Token(Token = "0x60026EA")]
		[Address(RVA = "0xCDC3D0", Offset = "0xCDC3D0", VA = "0xCDC3D0", Slot = "16")]
		protected override void StoreScrollPosition(int index)
		{
		}

		[Token(Token = "0x60026EB")]
		[Address(RVA = "0xCDC454", Offset = "0xCDC454", VA = "0xCDC454", Slot = "17")]
		protected override int RestoreScrollPosition(string path)
		{
			return default(int);
		}

		[Token(Token = "0x60026EC")]
		[Address(RVA = "0xCDC4D4", Offset = "0xCDC4D4", VA = "0xCDC4D4")]
		public void SetShowAddToPlaylistButton(bool shouldShow)
		{
		}

		[Token(Token = "0x60026ED")]
		[Address(RVA = "0xCDC56C", Offset = "0xCDC56C", VA = "0xCDC56C", Slot = "11")]
		internal override void InitializeItem(FileListItemViewWithButton item)
		{
		}

		[Token(Token = "0x60026EE")]
		[Address(RVA = "0xCDC5FC", Offset = "0xCDC5FC", VA = "0xCDC5FC")]
		private void AddToPlaylistButton_onClick(int localIndex)
		{
		}

		[Token(Token = "0x60026EF")]
		[Address(RVA = "0xCDC6F4", Offset = "0xCDC6F4", VA = "0xCDC6F4", Slot = "12")]
		protected override void DriveListShown()
		{
		}

		[Token(Token = "0x60026F0")]
		[Address(RVA = "0xCDC720", Offset = "0xCDC720", VA = "0xCDC720", Slot = "13")]
		protected override void ItemClickedInternal(int index)
		{
		}

		[Token(Token = "0x60026F1")]
		[Address(RVA = "0xCDC750", Offset = "0xCDC750", VA = "0xCDC750", Slot = "14")]
		protected override void DecorateItem(FileListItemViewWithButton item, FileSystemInfo fsi)
		{
		}

		[Token(Token = "0x60026F2")]
		[Address(RVA = "0xCDC7DC", Offset = "0xCDC7DC", VA = "0xCDC7DC", Slot = "15")]
		protected override void PopulateItem(FileListItemViewWithButton item, FileSystemInfo fsi)
		{
		}

		[Token(Token = "0x60026F3")]
		[Address(RVA = "0xCDC8AC", Offset = "0xCDC8AC", VA = "0xCDC8AC", Slot = "19")]
		protected override void InitializeInternal(bool isDriveList)
		{
		}

		[Token(Token = "0x60026F4")]
		[Address(RVA = "0xCDC900", Offset = "0xCDC900", VA = "0xCDC900", Slot = "18")]
		protected override string[] GetFileExts()
		{
			return null;
		}

		[Token(Token = "0x60026F5")]
		[Address(RVA = "0xCDC958", Offset = "0xCDC958", VA = "0xCDC958")]
		public SongFileListManager()
		{
		}
	}
	[Token(Token = "0x20006C4")]
	public class Menu : MonoBehaviour
	{
		[Token(Token = "0x20006C5")]
		private class CountInfo
		{
			[Token(Token = "0x4002B7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int count;

			[Token(Token = "0x6002793")]
			[Address(RVA = "0xCDCBE8", Offset = "0xCDCBE8", VA = "0xCDCBE8")]
			public CountInfo(int count)
			{
			}
		}

		[Token(Token = "0x20006C6")]
		private class PlaylistProgress
		{
			[Token(Token = "0x4002B7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int current;

			[Token(Token = "0x4002B7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int max;

			[Token(Token = "0x4002B7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x6002794")]
			[Address(RVA = "0xCDCC10", Offset = "0xCDCC10", VA = "0xCDCC10")]
			public PlaylistProgress(int current, int max, string name)
			{
			}
		}

		[Token(Token = "0x4002A33")]
		private const int MAX_EXPERIENCE = 983500000;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string SETTINGS_PLAYER_SIZE;

		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly string SETTINGS_PLAYSPACE_SIZE;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly string SETTINGS_SIZES_CONVERSION_DONE;

		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly string SETTINGS_SIZES_PLAYERHEIGHT;

		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly string SETTINGS_PLAYSPACE_ROTATION;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly string SETTINGS_PLAYSPACE_XOFFSET;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly string SETTINGS_PLAYSPACE_ZOFFSET;

		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal static readonly string SETTINGS_NUMBER_OF_STARTS;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal static readonly string SETTINGS_RETURNS_FROM_SONG_COUNT;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal static readonly string SETTINGS_RETURNS_FROM_SONG_SINCE_LAST_FEATURE_HIGHLIGHT;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal static readonly string SETTINGS_FILEBROWSER_USAGES;

		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal static readonly string SETTINGS_PLAYLISTS_USAGES;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal static readonly string SETTINGS_MODIFIERS_USAGES;

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal static readonly string SETTINGS_OPTIONS_USAGES;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal static readonly string SETTINGS_GAME_HINTS;

		[Token(Token = "0x4002A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal static readonly string SETTINGS_FLIGHT_PATHS;

		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal static readonly string SETTINGS_PLAYSPACE_WARNING;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal static readonly string SETTINGS_PLAYSPACE_WARNING_TRESHOLD;

		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal static readonly string SETTINGS_SHOW_BOUNDS;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal static readonly string SETTINGS_STRENGTH_METER;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal static readonly string SETTINGS_STRENGTH_FORMAT;

		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal static readonly string SETTINGS_PLAY_MUSIC_ON_RETURN;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal static readonly string SETTINGS_NO_HORIZONTAL_WALLS_MODIFIER;

		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal static readonly string SETTINGS_NO_TUNNELS_MODIFIER;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal static readonly string SETTINGS_NO_VERTICAL_WALLS_MODIFIER;

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal static readonly string SETTINGS_NORMALBALLS_ONLY_MODIFIER;

		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal static readonly string SETTINGS_POWERBALLS_ONLY_MODIFIER;

		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal static readonly string SETTINGS_SUPERSPEED_MODIFIER;

		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal static readonly string SETTINGS_SMALLER_BALLS_MODIFIER;

		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal static readonly string SETTINGS_NO_BADBALLS_MODIFIER;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal static readonly string SETTINGS_NO_DOUBLE_BALLS_MODIFIER;

		[Token(Token = "0x4002A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal static readonly string SETTINGS_NO_STREAMS_MODIFIER;

		[Token(Token = "0x4002A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal static readonly string SETTINGS_SCORE_VISUALIZATION;

		[Token(Token = "0x4002A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal static readonly string SETTINGS_STREAM_FEEDBACK;

		[Token(Token = "0x4002A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal static readonly string SETTINGS_COMBO_HIGHLIGHTING;

		[Token(Token = "0x4002A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal static readonly string SETTINGS_SPECTATOR_CAMERA;

		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal static readonly string SETTINGS_CAMERA_MODE;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal static readonly string SETTINGS_BLOOM_USAGE;

		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal static readonly string SETTINGS_BEAUTIFY_USAGE;

		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal static readonly string SETTINGS_GAME_QUALITY;

		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal static readonly string SETTINGS_TRACK_CALORIES;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal static readonly string SETTINGS_GENDER;

		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal static readonly string SETTINGS_AGE;

		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal static readonly string SETTINGS_DAILY_CALORIES;

		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal static readonly string SETTINGS_WEIGHT_KILOGRAMS;

		[Token(Token = "0x4002A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal static readonly string PLAYTIME_TOTAL;

		[Token(Token = "0x4002A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal static readonly string PLAYTIME_TODAY;

		[Token(Token = "0x4002A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal static readonly string PLAYTIME_SINCE_RESET;

		[Token(Token = "0x4002A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal static readonly string DATE_LAST_SESSION;

		[Token(Token = "0x4002A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal static readonly string GAME_START_COUNT;

		[Token(Token = "0x4002A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal static readonly string TODAYS_CALORIES;

		[Token(Token = "0x4002A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal static readonly string CALORIES_SINCE_RESET;

		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal static readonly string TOTAL_CALORIES_BURNT;

		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal static readonly string SQUATS_TODAY;

		[Token(Token = "0x4002A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal static readonly string SQUATS_SINCE_RESET;

		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal static readonly string SQUATS_TOTAL;

		[Token(Token = "0x4002A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal static readonly string SETTINGS_OPTIONS_TAB;

		[Token(Token = "0x4002A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal static readonly string GAMEPLAY_OPTIONS_TAB;

		[Token(Token = "0x4002A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal static readonly string SETTINGS_TUTORIAL_TAB;

		[Token(Token = "0x4002A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal static readonly string SETTINGS_CHALLENGE_MODE;

		[Token(Token = "0x4002A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal static readonly string SETTINGS_ENVIRONMENT;

		[Token(Token = "0x4002A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal static readonly string SETTINGS_WEAPON;

		[Token(Token = "0x4002A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal static readonly string SETTINGS_LEADERBOARD_PANEL;

		[Token(Token = "0x4002A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal static readonly string SETTINGS_LEADERBOARD_PANEL_DISPLAY_TYPE;

		[Token(Token = "0x4002A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal static readonly string SETTINGS_PLAYLISTS_PANEL;

		[Token(Token = "0x4002A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal static readonly string SETTINGS_PLAYLIST_PULSE;

		[Token(Token = "0x4002A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal static readonly string SETTINGS_HIT_SOUND;

		[Token(Token = "0x4002A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal static readonly string SETTINGS_VOICE;

		[Token(Token = "0x4002A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal static readonly string SETTINGS_PANEL_VISBILITY;

		[Token(Token = "0x4002A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal static readonly string SETTINGS_TRACK_HEARTRATE;

		[Token(Token = "0x4002A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal static readonly string SETTINGS_HRM_PLATFORM;

		[Token(Token = "0x4002A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal static readonly string SETTINGS_HRM_ID;

		[Token(Token = "0x4002A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal static readonly string SETTINGS_SONG_INTERNAL_1;

		[Token(Token = "0x4002A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal static readonly string SETTINGS_SONG_INTERNAL_2;

		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal static readonly string SETTINGS_SONG_FILE_DIR;

		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal static readonly string SETTINGS_SKYBOX_FILE_DIR;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal static readonly string SETTINGS_SONG_EXTERNAL_NAME;

		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal static readonly string SETTINGS_SONG_DIFFICULTY;

		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal static readonly string SETTINGS_GENERATOR_VERSION;

		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal static readonly string SETTINGS_GENERATOR_BEGINNER;

		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		internal static readonly string SETTINGS_GENERATOR_ADVANCED;

		[Token(Token = "0x4002A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		internal static readonly string SETTINGS_GENERATOR_EXPERT;

		[Token(Token = "0x4002A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		internal static readonly string SETTINGS_HAND_ADJUSTMENT;

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private static readonly int PLAYLIST_BPM_DETECT_ERROR_COUNT;

		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		internal static readonly Dictionary<int, WeaponType> EXPERIENCE_TO_UNLOCK;

		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		internal static Dictionary<WeaponType, string> WEAPON_NAME;

		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuToggleButton easyDifficulty;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuToggleButton middleDifficulty;

		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MenuToggleButton hardDifficulty;

		[Token(Token = "0x4002A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image image_fist;

		[Token(Token = "0x4002A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Image image_hammer;

		[Token(Token = "0x4002A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Image image_shield;

		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Image image_power;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource audioSourceMusic;

		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioSource audioSourceEffects;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioSource audioSourceVoices;

		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioSource audioSourceAmbient;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioSource audioSourceTreadmill;

		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private MenuSoundConfiguration menuSoundConfiguration;

		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private PrefixBasedLocalizedString hitSoundText;

		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private PrefixBasedLocalizedString voiceText;

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioMixer mixer;

		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Slider musicSlider;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private string musicExposedParam;

		[Token(Token = "0x4002A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TextMeshProUGUI musicVolText;

		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Slider sfxSlider;

		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private string sfxExposedParam;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private TextMeshProUGUI sfxVolText;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private AudioClip sfxTestSound;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private CollidableHandObject leftHand;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private CollidableHandObject rightHand;

		[Token(Token = "0x4002AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private HandAdjustment leftHandAdjustment;

		[Token(Token = "0x4002AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private HandAdjustment rightHandAdjustment;

		[Token(Token = "0x4002AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private GameObject settingsPanel;

		[Token(Token = "0x4002AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GameObject creditsPanel;

		[Token(Token = "0x4002AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject guidePanel;

		[Token(Token = "0x4002AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private GameObject settingsGameplayPanel;

		[Token(Token = "0x4002AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private GameObject settingsVideoPanel;

		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private GameObject settingsSoundPanel;

		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private GameObject settingsPlayerPanel;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private GameObject gameplayStylePanel;

		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private GameObject gameplayModifierPanel;

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private GameObject officialChallengesPanel;

		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private GameObject customChallengesPanel;

		[Token(Token = "0x4002AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private Canvas[] mainCanvases;

		[Token(Token = "0x4002AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private RectTransform songsRectTransform;

		[Token(Token = "0x4002AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private GameObject welcomeMenu;

		[Token(Token = "0x4002AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private GameObject welcomeMenuFirstStartButtons;

		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private GameObject welcomeMenuNotFirstStartButtons;

		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private GameObject highscorePanel;

		[Token(Token = "0x4002AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private GameObject playlistsPanel;

		[Token(Token = "0x4002AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private GameObject playlistButtonPulse;

		[Token(Token = "0x4002AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private PlaylistAdjuster playlistAdjuster;

		[Token(Token = "0x4002AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private GameObject songStatsPanel;

		[Token(Token = "0x4002ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private GameObject songStatsNotAvail;

		[Token(Token = "0x4002ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private GameObject tutorialObjectsPanel;

		[Token(Token = "0x4002ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private GameObject tutorialWeaponsPanel;

		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private GameObject tutorialMiscPanel;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private OfficialSongListManager officialSongManager;

		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[SerializeField]
		private SongFileListManager fileListManager;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		private TextMeshProUGUI songDurationText;

		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private TextMeshProUGUI bpmText;

		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private TextMeshProUGUI targetCountText;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[SerializeField]
		private TextMeshProUGUI streamText;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private TextMeshProUGUI ballObstacleCountText;

		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		private TextMeshProUGUI wallObstacleCountText;

		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private GameObject editorButton;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[SerializeField]
		private GameObject adjustButton;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		private BeautifyProfile beautifyMenuProfile;

		[Token(Token = "0x4002AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		private Slider weaponExperienceSlider;

		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[SerializeField]
		private Slider hammerExperienceSlider;

		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[SerializeField]
		private Slider shieldExperienceSlider;

		[Token(Token = "0x4002ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[SerializeField]
		private Slider powerfistExperienceSlider;

		[Token(Token = "0x4002ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[SerializeField]
		private Text weaponExperienceText;

		[Token(Token = "0x4002ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		[SerializeField]
		private RectTransform spectatorCameraRectTransform;

		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		[SerializeField]
		private RectTransform qualitySettingsRectTransform;

		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[SerializeField]
		private GameObject adjustControllersDialog;

		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[SerializeField]
		private TextMeshProUGUI adjustControllersText;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[SerializeField]
		private MenuSelectButton migrateHighscoreButton;

		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[SerializeField]
		private GameObject migrateHighscoreOption;

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[SerializeField]
		private MenuSelectButton localSongsInfoButton;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[SerializeField]
		private TextMeshProUGUI playtimeTodayText;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[SerializeField]
		private TextMeshProUGUI playtimeSinceResetText;

		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[SerializeField]
		private TextMeshProUGUI playtimeTotalText;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[SerializeField]
		private TextMeshProUGUI todaysCaloriesText;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[SerializeField]
		private TextMeshProUGUI todaysCaloriesDisabledText;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		[SerializeField]
		private TextMeshProUGUI calorieSinceResetText;

		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[SerializeField]
		private TextMeshProUGUI calorieSinceResetDisabledText;

		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[SerializeField]
		private TextMeshProUGUI totalCaloriesText;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[SerializeField]
		private TextMeshProUGUI totalCaloriesDisabledText;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[SerializeField]
		private TextMeshProUGUI squatsTodayText;

		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		private TextMeshProUGUI squatsSinceResetText;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		[SerializeField]
		private TextMeshProUGUI squatsTotalText;

		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		[SerializeField]
		private GameObject dailyGoalReachedEffect;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		[SerializeField]
		private GameObject playspaceWarningAdjustment;

		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		[SerializeField]
		private RectTransform playspaceWarningRectTransform;

		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		[SerializeField]
		private TextMeshProUGUI playspaceWarningMetricText;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[SerializeField]
		private TextMeshProUGUI playspaceWarningImperialText;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		[SerializeField]
		private Slider playspaceWarningSlider;

		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[SerializeField]
		private GameObject fitnessMat;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[SerializeField]
		private HighscoreManager highscoreManager;

		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		[SerializeField]
		private HighscoreSongInfoLocalizationString highscoreCombinationText;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[SerializeField]
		private GameObject highscoreCurrentWeaponTab;

		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		[SerializeField]
		private PrefixBasedLocalizedString gameQualityText;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		[SerializeField]
		private GamespaceMenuUI gamespaceUI;

		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		[SerializeField]
		private GameObject playspaceHeightContainer;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		[SerializeField]
		private GameObject playspaceHeightNameText;

		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		[SerializeField]
		private PlayspaceHeightAdjuster playspaceHeightSetting;

		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		[SerializeField]
		private RectTransform strengthMeterRectTransform;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		[SerializeField]
		private PrefixBasedLocalizedString genderText;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		[SerializeField]
		private Slider ageSlider;

		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		[SerializeField]
		private ValueBasedLocalizedString ageText;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		[SerializeField]
		private Slider weightSlider;

		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		[SerializeField]
		private ValueBasedLocalizedString weightMetricText;

		[Token(Token = "0x4002AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		[SerializeField]
		private ValueBasedLocalizedString weightImperialText;

		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		[SerializeField]
		private GameObject genderInput;

		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		[SerializeField]
		private GameObject ageInput;

		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		[SerializeField]
		private GameObject weightInput;

		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		[SerializeField]
		private Slider dailyCaloriesInputSlider;

		[Token(Token = "0x4002AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		[SerializeField]
		private ValueBasedLocalizedString dailyCaloriesInputText;

		[Token(Token = "0x4002AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		[SerializeField]
		private GameObject dailyCaloriesInput;

		[Token(Token = "0x4002AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		[SerializeField]
		private RectTransform calorieTrackerRectTransform;

		[Token(Token = "0x4002AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		[SerializeField]
		private HRMAdjuster hrmAdjuster;

		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		[SerializeField]
		private Slider experienceSlider;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		[SerializeField]
		private TextMeshProUGUI levelText;

		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		[SerializeField]
		private GameObject dailyCalories;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		[SerializeField]
		private TextMeshProUGUI dailyCaloriesPercentageText;

		[Token(Token = "0x4002B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		[SerializeField]
		private ValueBasedLocalizedString dailyCaloriesCurrentMaxText;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		[SerializeField]
		private Slider dailyCaloriesSlider;

		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		[SerializeField]
		private TextMeshProUGUI heartrateStatisticsWhiteText;

		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		[SerializeField]
		private TextMeshProUGUI heartrateStatisticsGrayText;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		[SerializeField]
		private GameObject trackingHint;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		[SerializeField]
		private StartButton startButton;

		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		[SerializeField]
		private StartButton playlistStartButton;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		[SerializeField]
		private EnvironmentAdjustor envAdjustor;

		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		[SerializeField]
		private SongSettingsDialog songSettingsDialog;

		[Token(Token = "0x4002B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		[SerializeField]
		private GameObject generateCheckbox;

		[Token(Token = "0x4002B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		[SerializeField]
		private Button previewButton;

		[Token(Token = "0x4002B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		[SerializeField]
		private AudioSource metronomeSource;

		[Token(Token = "0x4002B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		[SerializeField]
		private GeneratorSwitch generatorSettingsUI;

		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		[SerializeField]
		private BPMOffsetAdjuster bpmOffsetAdjuster;

		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		[SerializeField]
		private InfoDialog requestPermissionDialog;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		[SerializeField]
		private ProgressDialog progressDialog;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		[SerializeField]
		private FileBrowserHelpDialog fileBrowserHelpDialog;

		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		[SerializeField]
		private FeatureTourDialog featureTourDialog;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		[SerializeField]
		private GameObject playButtonGlow;

		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		[SerializeField]
		private LeaveReviewController leaveReviewController;

		[Token(Token = "0x4002B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		[SerializeField]
		private HowToPlayDialog howToPlayDialog;

		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private MenuSelectButton[] clickableButtons;

		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private MenuToggleArea[] selectionAreas;

		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		private Dictionary<MenuToggleArea.Selection, MenuToggleArea> selectionAreaMapping;

		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		private MenuSelectButton settingsButton;

		[Token(Token = "0x4002B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		private MenuSelectButton leaderboardsButton;

		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		private MenuSelectButton creditsButton;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		private MenuSelectButton guideButton;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		private MenuSelectButton playlistsButton;

		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		private MenuSelectButton decreaseQualityButton;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private MenuSelectButton increaseQualityButton;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		private MenuSelectButton genderLeftButton;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		private MenuSelectButton genderRightButton;

		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private MenuSelectButton decreaseAgeButton;

		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private MenuSelectButton increaseAgeButton;

		[Token(Token = "0x4002B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		private MenuSelectButton decreaseDailyCaloriesButton;

		[Token(Token = "0x4002B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private MenuSelectButton increaseDailyCaloriesButton;

		[Token(Token = "0x4002B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private MenuSelectButton decreaseMusicVolumeButton;

		[Token(Token = "0x4002B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		private MenuSelectButton increaseMusicVolumeButton;

		[Token(Token = "0x4002B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private MenuSelectButton decreaseSFXVolumeButton;

		[Token(Token = "0x4002B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private MenuSelectButton increaseSFXVolumeButton;

		[Token(Token = "0x4002B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		private MenuSelectButton decreaseWeightButton;

		[Token(Token = "0x4002B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		private MenuSelectButton increaseWeightButton;

		[Token(Token = "0x4002B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		private MenuSelectButton decreasePlayspaceDistanceButton;

		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		private MenuSelectButton increasePlayspaceDistanceButton;

		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		private MenuSelectButton hitSoundLeftButton;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		private MenuSelectButton hitSoundRightButton;

		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		private MenuSelectButton voiceLeftButton;

		[Token(Token = "0x4002B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		private MenuSelectButton voiceRightButton;

		[Token(Token = "0x4002B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		private GameObject playerRig;

		[Token(Token = "0x4002B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		private GameObject fakeHead;

		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		private SongManager songManager;

		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private FrameworkManager fm;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private PlaylistManager playlistManager;

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private Dictionary<GameConfiguration.GameEnvironmentID, EnvironmentalVisualization> environments;

		[Token(Token = "0x4002B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		private int experience;

		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A4")]
		private int previousCalculatedExperience;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		private int nextCalculatedExperience;

		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5AC")]
		private int calculatedLevel;

		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
		private float lastExperienceQueryTime;

		[Token(Token = "0x4002B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
		private MenuToggleArea settingsScoreVisualizationArea;

		[Token(Token = "0x4002B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
		private MenuToggleArea settingsStreamFeedbackArea;

		[Token(Token = "0x4002B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
		private MenuToggleArea settingsComboHighlightingArea;

		[Token(Token = "0x4002B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
		private MenuToggleArea settingsSpectatorCameraArea;

		[Token(Token = "0x4002B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		private MenuToggleArea settingsCameraModeArea;

		[Token(Token = "0x4002B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		private MenuToggleArea settingsOptionsTabArea;

		[Token(Token = "0x4002B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		private MenuToggleArea settingsTutorialTabArea;

		[Token(Token = "0x4002B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		private MenuToggleArea settingsTrackCaloriesArea;

		[Token(Token = "0x4002B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		private MenuToggleArea settingsGameHintsArea;

		[Token(Token = "0x4002B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		private MenuToggleArea settingsFlightPathsArea;

		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		private MenuToggleArea settingsGeneratorSwitchArea;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		private MenuToggleArea settingsPlayspaceWarningArea;

		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		private MenuToggleArea settingsShowBoundsArea;

		[Token(Token = "0x4002B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		private MenuToggleArea settingsStrengthMeterArea;

		[Token(Token = "0x4002B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		private MenuToggleArea settingsStrengthFormatArea;

		[Token(Token = "0x4002B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		private MenuToggleArea settingsPlayMusicOnReturn;

		[Token(Token = "0x4002B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x638")]
		private MenuToggleArea settingsBeautifyUsageArea;

		[Token(Token = "0x4002B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
		private MenuToggleArea settingsNoHorizontalWallsModifierArea;

		[Token(Token = "0x4002B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		private MenuToggleArea settingsNoTunnelsModifierArea;

		[Token(Token = "0x4002B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
		private MenuToggleArea settingsNoVerticalWallsModifierArea;

		[Token(Token = "0x4002B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
		private MenuToggleArea settingsNormalballsOnlyModifierArea;

		[Token(Token = "0x4002B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
		private MenuToggleArea settingsPowerballsOnlyModifierArea;

		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		private MenuToggleArea settingsSuperSpeedModifierArea;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
		private MenuToggleArea settingsSmallerBallsModifierArea;

		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x678")]
		private MenuToggleArea settingsNoDoubleBallsModifierArea;

		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
		private MenuToggleArea settingsNoStreamsModifierArea;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		private MenuToggleArea settingsNoBadBallsModifierArea;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x690")]
		private MenuToggleArea settingsMuteMusicArea;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x698")]
		private MenuToggleArea settingsChallengeModeArea;

		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A0")]
		private MenuToggleArea settingsWeaponArea;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		private bool avatarSpectatorCamActive;

		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A9")]
		private bool isAwaking;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6AA")]
		private bool isEndOfStart;

		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6AB")]
		private bool startButtonHasBeenPressed;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B0")]
		private MenuToggleButton currentToggleButton;

		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B8")]
		private HRMCon hrmCon;

		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C0")]
		private AudioClip selectedHitSound;

		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		private bool updateHighscoreInDifficulty;

		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C9")]
		private bool isPaused;

		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6CA")]
		private bool firstStartAudioDelay;

		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6CC")]
		private float generatorBpm;

		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D0")]
		private float generatorOffset;

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D4")]
		private bool generatorTestIsPlaying;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D8")]
		private double generatorTestStartTime;

		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E0")]
		private double generatorNextMetronomeTime;

		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		private Beautify[] beautifyScripts;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F0")]
		private BlackPlane[] blackPlanes;

		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F8")]
		private bool editorStarted;

		[Token(Token = "0x4002B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F9")]
		private bool menuReloadStarted;

		[Token(Token = "0x4002B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6FC")]
		private int playMusicAttempts;

		[Token(Token = "0x4002B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x700")]
		private bool folderImportIsCancelled;

		[Token(Token = "0x4002B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x701")]
		private bool leaderboardMigrationIsCancelled;

		[Token(Token = "0x4002B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x704")]
		private int level;

		[Token(Token = "0x4002B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x708")]
		private HandAdjustmentSettings savedControllerOffset;

		[Token(Token = "0x4002B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x710")]
		private LLPlatform.LeaderboardSelector previousLeaderboardSelector;

		[Token(Token = "0x4002B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x728")]
		private bool isInSwitchMenuToSong;

		[Token(Token = "0x4002B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x730")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x4002B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x738")]
		private PauseHandler pauseHandler;

		[Token(Token = "0x4002B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x740")]
		private ScreenshotMaker screenshotMaker;

		[Token(Token = "0x60026F7")]
		[Address(RVA = "0xCAFC08", Offset = "0xCAFC08", VA = "0xCAFC08")]
		private void Awake()
		{
		}

		[Token(Token = "0x60026F8")]
		[Address(RVA = "0xCB9B64", Offset = "0xCB9B64", VA = "0xCB9B64")]
		private void HandleGeneratorPreferences()
		{
		}

		[Token(Token = "0x60026F9")]
		[Address(RVA = "0xCBA50C", Offset = "0xCBA50C", VA = "0xCBA50C")]
		private void ReinitializeGenerator()
		{
		}

		[Token(Token = "0x60026FA")]
		[Address(RVA = "0xCBA624", Offset = "0xCBA624", VA = "0xCBA624")]
		private GeneratorUserSettings GetGeneratorPrefs(Song.Difficulty diff, string key)
		{
			return null;
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0xCBAB28", Offset = "0xCBAB28", VA = "0xCBAB28")]
		private void LeaveReviewController_reviewRequestIsActive(bool isActive)
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0xCBAB4C", Offset = "0xCBAB4C", VA = "0xCBAB4C")]
		private void LocalSongsInfoButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0xCBA3DC", Offset = "0xCBA3DC", VA = "0xCBA3DC")]
		private void DeactivateWelcomeMenu()
		{
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0xCBAD38", Offset = "0xCBAD38", VA = "0xCBAD38")]
		private void PlaylistAdjuster_entrySelected(PlaylistEntry entry)
		{
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0xCBB688", Offset = "0xCBB688", VA = "0xCBB688")]
		private void FileListManager_FolderAddToPlaylistClicked(string folderName)
		{
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0xCBBB50", Offset = "0xCBBB50", VA = "0xCBBB50")]
		private IEnumerator AddFolderToPlaylist(string folderName)
		{
			return null;
		}

		[Token(Token = "0x6002701")]
		[Address(RVA = "0xCBBBE0", Offset = "0xCBBBE0", VA = "0xCBBBE0")]
		private void FileListManager_SongAddToPlaylistClicked(string fileName)
		{
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0xCBBDD0", Offset = "0xCBBDD0", VA = "0xCBBDD0")]
		private void OfficialSongManager_AddToPlaylistClicked(Song song)
		{
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0xCBBA2C", Offset = "0xCBBA2C", VA = "0xCBBA2C")]
		private void ShowNoPlaylistMessage()
		{
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0xCBBE38", Offset = "0xCBBE38", VA = "0xCBBE38")]
		private void PlaylistAdjuster_startPressed()
		{
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0xCBC22C", Offset = "0xCBC22C", VA = "0xCBC22C")]
		private void PlayspaceHeightSetting_PlayerHeightSettingsChanged(float heightFromUI)
		{
		}

		[Token(Token = "0x6002706")]
		[Address(RVA = "0xCB99AC", Offset = "0xCB99AC", VA = "0xCB99AC")]
		private void SetPlayerHeight(float height)
		{
		}

		[Token(Token = "0x6002707")]
		[Address(RVA = "0xCBC230", Offset = "0xCBC230", VA = "0xCBC230")]
		private void FeatureTourDialog_hintClosed(FeatureTourDialog.Trigger trigger)
		{
		}

		[Token(Token = "0x6002708")]
		[Address(RVA = "0xCBC67C", Offset = "0xCBC67C", VA = "0xCBC67C")]
		private void HowToPlayDialog_startFeatureTour()
		{
		}

		[Token(Token = "0x6002709")]
		[Address(RVA = "0xCBC698", Offset = "0xCBC698", VA = "0xCBC698")]
		private void SetFitnessMatSize()
		{
		}

		[Token(Token = "0x600270A")]
		[Address(RVA = "0xCBC72C", Offset = "0xCBC72C", VA = "0xCBC72C")]
		private void HrmAdjuster_platformChanged(HRMPlatform platform)
		{
		}

		[Token(Token = "0x600270B")]
		[Address(RVA = "0xCBC8F0", Offset = "0xCBC8F0", VA = "0xCBC8F0")]
		private void HrmAdjuster_onOffChanged(int value)
		{
		}

		[Token(Token = "0x600270C")]
		[Address(RVA = "0xCBCD6C", Offset = "0xCBCD6C", VA = "0xCBCD6C")]
		private void HrmAdjuster_hrmDeviceChanged(long deviceId)
		{
		}

		[Token(Token = "0x600270D")]
		[Address(RVA = "0xCBCF30", Offset = "0xCBCF30", VA = "0xCBCF30")]
		private void OfficialSongManager_SongClicked(int index)
		{
		}

		[Token(Token = "0x600270E")]
		[Address(RVA = "0xCBAB1C", Offset = "0xCBAB1C", VA = "0xCBAB1C")]
		private GeneratorUserSettings PrepopulateGeneratorSettings(Song.Difficulty difficulty)
		{
			return null;
		}

		[Token(Token = "0x600270F")]
		[Address(RVA = "0xCBD0D4", Offset = "0xCBD0D4", VA = "0xCBD0D4")]
		private void ApplyGeneratorSettings(Song.Difficulty difficulty, GeneratorUserSettings setting)
		{
		}

		[Token(Token = "0x6002710")]
		[Address(RVA = "0xCBD0E4", Offset = "0xCBD0E4", VA = "0xCBD0E4")]
		private void SaveGeneratorSettings(GeneratorUserSettings settings)
		{
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0xCBD300", Offset = "0xCBD300", VA = "0xCBD300")]
		private void BpmOffsetAdjuster_bpmChanged(float newBpm)
		{
		}

		[Token(Token = "0x6002712")]
		[Address(RVA = "0xCBD428", Offset = "0xCBD428", VA = "0xCBD428")]
		private void BpmOffsetAdjuster_offsetChanged(float newOffset)
		{
		}

		[Token(Token = "0x6002713")]
		[Address(RVA = "0xCBD430", Offset = "0xCBD430", VA = "0xCBD430")]
		private void HrmCon_StatusChanged(HRMStatus newStatus, HRMStatus oldStatus)
		{
		}

		[Token(Token = "0x6002714")]
		[Address(RVA = "0xCBD434", Offset = "0xCBD434", VA = "0xCBD434")]
		private void HrmCon_HeartRateChanged(int heartRate)
		{
		}

		[Token(Token = "0x6002715")]
		[Address(RVA = "0xCBD438", Offset = "0xCBD438", VA = "0xCBD438")]
		private void MenuButtonTogglePointerDown(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002716")]
		[Address(RVA = "0xCBD470", Offset = "0xCBD470", VA = "0xCBD470")]
		private void MenuButtonSelectHoverEnter(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002717")]
		[Address(RVA = "0xCBD4A8", Offset = "0xCBD4A8", VA = "0xCBD4A8")]
		private void MenuButtonToggleHoverEnter(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002718")]
		[Address(RVA = "0xCBD5A0", Offset = "0xCBD5A0", VA = "0xCBD5A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002719")]
		[Address(RVA = "0xCC26C0", Offset = "0xCC26C0", VA = "0xCC26C0")]
		private IEnumerator ShowBoundary()
		{
			return null;
		}

		[Token(Token = "0x600271A")]
		[Address(RVA = "0xCC2720", Offset = "0xCC2720", VA = "0xCC2720")]
		private void EnvAdjustor_EnvChanged(GameEnvironment obj)
		{
		}

		[Token(Token = "0x600271B")]
		[Address(RVA = "0xCC28D4", Offset = "0xCC28D4", VA = "0xCC28D4")]
		private void Update()
		{
		}

		[Token(Token = "0x600271C")]
		[Address(RVA = "0xCB9E64", Offset = "0xCB9E64", VA = "0xCB9E64")]
		private void ResetWeaponLocking()
		{
		}

		[Token(Token = "0x600271D")]
		[Address(RVA = "0xCC2C54", Offset = "0xCC2C54", VA = "0xCC2C54")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600271E")]
		[Address(RVA = "0xCC2FFC", Offset = "0xCC2FFC", VA = "0xCC2FFC")]
		private void GamespaceRecalculated()
		{
		}

		[Token(Token = "0x600271F")]
		[Address(RVA = "0xCBEEC0", Offset = "0xCBEEC0", VA = "0xCBEEC0")]
		public void SetGameQuality(int setting)
		{
		}

		[Token(Token = "0x6002720")]
		[Address(RVA = "0xCBABFC", Offset = "0xCBABFC", VA = "0xCBABFC")]
		private void IncrementNumberOfStarts()
		{
		}

		[Token(Token = "0x6002721")]
		[Address(RVA = "0xCC35C0", Offset = "0xCC35C0", VA = "0xCC35C0")]
		public void IncrementReturnFromSongCount()
		{
		}

		[Token(Token = "0x6002722")]
		[Address(RVA = "0xCBF28C", Offset = "0xCBF28C", VA = "0xCBF28C")]
		public void SetGender(int setting)
		{
		}

		[Token(Token = "0x6002723")]
		[Address(RVA = "0xCC15A0", Offset = "0xCC15A0", VA = "0xCC15A0")]
		public void SetHitSound(int setting)
		{
		}

		[Token(Token = "0x6002724")]
		[Address(RVA = "0xCC17D0", Offset = "0xCC17D0", VA = "0xCC17D0")]
		public void SetVoice(int setting)
		{
		}

		[Token(Token = "0x6002725")]
		[Address(RVA = "0xCBFA54", Offset = "0xCBFA54", VA = "0xCBFA54")]
		public void SetCaloriesToday()
		{
		}

		[Token(Token = "0x6002726")]
		[Address(RVA = "0xCBFD34", Offset = "0xCBFD34", VA = "0xCBFD34")]
		public void SetCaloriesSinceReset()
		{
		}

		[Token(Token = "0x6002727")]
		[Address(RVA = "0xCBFBC4", Offset = "0xCBFBC4", VA = "0xCBFBC4")]
		public void SetTotalCalories()
		{
		}

		[Token(Token = "0x6002728")]
		[Address(RVA = "0xCC37BC", Offset = "0xCC37BC", VA = "0xCC37BC")]
		public void ResetCalories()
		{
		}

		[Token(Token = "0x6002729")]
		[Address(RVA = "0xCC3900", Offset = "0xCC3900", VA = "0xCC3900")]
		public void UpdateCalories(float caloriesToday, float caloriesSinceReset, float lifetimeCalories)
		{
		}

		[Token(Token = "0x600272A")]
		[Address(RVA = "0xCC3C50", Offset = "0xCC3C50", VA = "0xCC3C50")]
		private void SetTrackingHint()
		{
		}

		[Token(Token = "0x600272B")]
		[Address(RVA = "0xCC3C88", Offset = "0xCC3C88", VA = "0xCC3C88")]
		public void UpdateSquats(int squatsToday, int squatsSinceReset, int squatsTotal)
		{
		}

		[Token(Token = "0x600272C")]
		[Address(RVA = "0xCC3F20", Offset = "0xCC3F20", VA = "0xCC3F20")]
		public void ResetSquats()
		{
		}

		[Token(Token = "0x600272D")]
		[Address(RVA = "0xCC051C", Offset = "0xCC051C", VA = "0xCC051C")]
		private void SetSquatsToday()
		{
		}

		[Token(Token = "0x600272E")]
		[Address(RVA = "0xCC0620", Offset = "0xCC0620", VA = "0xCC0620")]
		private void SetSquatsSinceReset()
		{
		}

		[Token(Token = "0x600272F")]
		[Address(RVA = "0xCC0724", Offset = "0xCC0724", VA = "0xCC0724")]
		private void SetSquatsTotal()
		{
		}

		[Token(Token = "0x6002730")]
		[Address(RVA = "0xCBFEA4", Offset = "0xCBFEA4", VA = "0xCBFEA4")]
		public void SetPlayTimeToday()
		{
		}

		[Token(Token = "0x6002731")]
		[Address(RVA = "0xCC00CC", Offset = "0xCC00CC", VA = "0xCC00CC")]
		public void SetPlayTimeSinceReset()
		{
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0xCC02F4", Offset = "0xCC02F4", VA = "0xCC02F4")]
		public void SetPlayTimeTotal()
		{
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0xCC4064", Offset = "0xCC4064", VA = "0xCC4064")]
		public void ResetPlayTime()
		{
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0xCC41A8", Offset = "0xCC41A8", VA = "0xCC41A8")]
		public void UpdatePlayTime(float playTimeToday, float playTimeSinceReset, float playTimeTotal)
		{
		}

		[Token(Token = "0x6002735")]
		[Address(RVA = "0xCBF508", Offset = "0xCBF508", VA = "0xCBF508")]
		public void CheckIfNewDay()
		{
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0xCC4448", Offset = "0xCC4448", VA = "0xCC4448")]
		public void PotentiallyTriggerFeatureTour(bool askForSequence)
		{
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0xCC4468", Offset = "0xCC4468", VA = "0xCC4468")]
		public void UpdateLeaderboardPanel()
		{
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0xCC1FA8", Offset = "0xCC1FA8", VA = "0xCC1FA8")]
		private void SetSettingsPanelVisibility(bool isInitial)
		{
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0xCC521C", Offset = "0xCC521C", VA = "0xCC521C")]
		private void ToggleAreaSelection(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x600273A")]
		[Address(RVA = "0xCC780C", Offset = "0xCC780C", VA = "0xCC780C")]
		private void ToggleModifier(GameConfiguration.Modifier modifier, GameConfiguration.OffOn value, string setting)
		{
		}

		[Token(Token = "0x600273B")]
		[Address(RVA = "0xCC7A20", Offset = "0xCC7A20", VA = "0xCC7A20")]
		private void FileListManager_PermissionGranted()
		{
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0xCBB004", Offset = "0xCBB004", VA = "0xCBB004")]
		private void SwitchMenuToSong(bool selectSonginUI)
		{
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0xCC7A00", Offset = "0xCC7A00", VA = "0xCC7A00")]
		private void SetGenerateOptionVisible(bool isVisible)
		{
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0xCC7A24", Offset = "0xCC7A24", VA = "0xCC7A24")]
		private IEnumerator PlayAudioOnceAvailable()
		{
			return null;
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0xCBB620", Offset = "0xCBB620", VA = "0xCBB620")]
		private void SetDifficulty(Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0xCBED88", Offset = "0xCBED88", VA = "0xCBED88")]
		private void SetOptionsTab(GameConfiguration.Settings settings)
		{
		}

		[Token(Token = "0x6002741")]
		[Address(RVA = "0xCBEDF0", Offset = "0xCBEDF0", VA = "0xCBEDF0")]
		private void SetGameplayTab(GameConfiguration.Gameplay gameplay)
		{
		}

		[Token(Token = "0x6002742")]
		[Address(RVA = "0xCBEE58", Offset = "0xCBEE58", VA = "0xCBEE58")]
		private void SetTutorialTab(GameConfiguration.Tutorial tutorial)
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0xCBAB94", Offset = "0xCBAB94", VA = "0xCBAB94")]
		private void SetChallengesTab(GameConfiguration.ChallengeMode challengeMode)
		{
		}

		[Token(Token = "0x6002744")]
		[Address(RVA = "0xCBED20", Offset = "0xCBED20", VA = "0xCBED20")]
		private void SetWeaponType(WeaponType selectedWeaponType)
		{
		}

		[Token(Token = "0x6002745")]
		[Address(RVA = "0xCC7A98", Offset = "0xCC7A98", VA = "0xCC7A98")]
		private void SelectionButtonSelect(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002746")]
		[Address(RVA = "0xCC8BA8", Offset = "0xCC8BA8", VA = "0xCC8BA8")]
		private void TakeScreenshot()
		{
		}

		[Token(Token = "0x6002747")]
		[Address(RVA = "0xCC91BC", Offset = "0xCC91BC", VA = "0xCC91BC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002748")]
		[Address(RVA = "0xCC9224", Offset = "0xCC9224", VA = "0xCC9224")]
		private void CloseSongAdjust()
		{
		}

		[Token(Token = "0x6002749")]
		[Address(RVA = "0xCB9FE4", Offset = "0xCB9FE4", VA = "0xCB9FE4")]
		public void TogglePlaylistPanel(bool isVisible)
		{
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0xCC50B8", Offset = "0xCC50B8", VA = "0xCC50B8")]
		private void DeselectClickedButton(GameObject button)
		{
		}

		[Token(Token = "0x600274B")]
		[Address(RVA = "0xCC8958", Offset = "0xCC8958", VA = "0xCC8958")]
		private void ActivateSettings(bool activate)
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0xCC89D4", Offset = "0xCC89D4", VA = "0xCC89D4")]
		private void ActivateGuide(bool activate)
		{
		}

		[Token(Token = "0x600274D")]
		[Address(RVA = "0xCC490C", Offset = "0xCC490C", VA = "0xCC490C")]
		private void FadeInAndMoveInPanel(GameObject panel, Vector2 endPosition)
		{
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0xCC4898", Offset = "0xCC4898", VA = "0xCC4898")]
		private IEnumerator FadeOutPanel(GameObject panel)
		{
			return null;
		}

		[Token(Token = "0x600274F")]
		[Address(RVA = "0xCC88E4", Offset = "0xCC88E4", VA = "0xCC88E4")]
		private IEnumerator StartEditor()
		{
			return null;
		}

		[Token(Token = "0x6002750")]
		[Address(RVA = "0xCC8A50", Offset = "0xCC8A50", VA = "0xCC8A50")]
		private void StartTutorial()
		{
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0xCC9434", Offset = "0xCC9434", VA = "0xCC9434")]
		public IEnumerator ReloadMenu()
		{
			return null;
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0xCC2AB8", Offset = "0xCC2AB8", VA = "0xCC2AB8")]
		private void SetGeneratorTestMode(bool shouldPlay, bool stopMusic = true)
		{
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0xCBD308", Offset = "0xCBD308", VA = "0xCBD308")]
		private void ResyncGeneratorMetronome()
		{
		}

		[Token(Token = "0x6002754")]
		[Address(RVA = "0xCC8870", Offset = "0xCC8870", VA = "0xCC8870")]
		private IEnumerator StartGame()
		{
			return null;
		}

		[Token(Token = "0x6002755")]
		[Address(RVA = "0xCC94A8", Offset = "0xCC94A8", VA = "0xCC94A8")]
		private void GenerateAndStart(bool startSong, bool isStartedFromPlaylistPanel)
		{
		}

		[Token(Token = "0x6002756")]
		[Address(RVA = "0xCBBD0C", Offset = "0xCBBD0C", VA = "0xCBBD0C")]
		private IEnumerator OpenGeneratorSettings(string confirmText, bool confirmIsPlay, bool isStartedFromPlaylistPanel, Action<bool, bool> onConfirm)
		{
			return null;
		}

		[Token(Token = "0x6002757")]
		[Address(RVA = "0xCC99E4", Offset = "0xCC99E4", VA = "0xCC99E4")]
		private IEnumerator DetectBPMAndOffset(Song song, bool persist)
		{
			return null;
		}

		[Token(Token = "0x6002758")]
		[Address(RVA = "0xCC8BFC", Offset = "0xCC8BFC", VA = "0xCC8BFC")]
		private IEnumerator DetectBPMAndOffsetAgain(Song song)
		{
			return null;
		}

		[Token(Token = "0x6002759")]
		[Address(RVA = "0xCC95E8", Offset = "0xCC95E8", VA = "0xCC95E8")]
		private void GenerateSongLayout(Song song, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x600275A")]
		[Address(RVA = "0xCBBE44", Offset = "0xCBBE44", VA = "0xCBBE44")]
		private void StartSong(bool createTemporaryPlaylist, bool startedFromPlaylistPanel)
		{
		}

		[Token(Token = "0x600275B")]
		[Address(RVA = "0xCC9270", Offset = "0xCC9270", VA = "0xCC9270")]
		private void WidthHasBeenConfirmed(int action, bool dontshowagain, bool createTemporaryPlaylist)
		{
		}

		[Token(Token = "0x600275C")]
		[Address(RVA = "0xCC9A80", Offset = "0xCC9A80", VA = "0xCC9A80")]
		private void FileListManager_SongSelected(int index, string fileName)
		{
		}

		[Token(Token = "0x600275D")]
		[Address(RVA = "0xCC9AF4", Offset = "0xCC9AF4", VA = "0xCC9AF4")]
		private void FileListManager_NavigationHappened(string dir)
		{
		}

		[Token(Token = "0x600275E")]
		[Address(RVA = "0xCC9808", Offset = "0xCC9808", VA = "0xCC9808")]
		private void DisplaySongStats()
		{
		}

		[Token(Token = "0x600275F")]
		[Address(RVA = "0xCC71E8", Offset = "0xCC71E8", VA = "0xCC71E8")]
		private void DisplaySongLayoutStats()
		{
		}

		[Token(Token = "0x6002760")]
		[Address(RVA = "0xCC2BDC", Offset = "0xCC2BDC", VA = "0xCC2BDC")]
		private void SetWeaponAvailability(WeaponType weapon, bool isAvailable)
		{
		}

		[Token(Token = "0x6002761")]
		[Address(RVA = "0xCBD48C", Offset = "0xCBD48C", VA = "0xCBD48C")]
		public void PlayHoverSound()
		{
		}

		[Token(Token = "0x6002762")]
		[Address(RVA = "0xCBD454", Offset = "0xCBD454", VA = "0xCBD454")]
		public void PlayClickSound()
		{
		}

		[Token(Token = "0x6002763")]
		[Address(RVA = "0xCC9C64", Offset = "0xCC9C64", VA = "0xCC9C64")]
		private void InfoDialogClosed()
		{
		}

		[Token(Token = "0x6002764")]
		[Address(RVA = "0xCB9874", Offset = "0xCB9874", VA = "0xCB9874")]
		private void SetBeautifyProfile()
		{
		}

		[Token(Token = "0x6002765")]
		[Address(RVA = "0xCC334C", Offset = "0xCC334C", VA = "0xCC334C")]
		private void SetBeautify(GameConfiguration.OffOn isOn)
		{
		}

		[Token(Token = "0x6002766")]
		[Address(RVA = "0xCC30D8", Offset = "0xCC30D8", VA = "0xCC30D8")]
		private void SetBloom(GameConfiguration.OffOn isON)
		{
		}

		[Token(Token = "0x6002767")]
		[Address(RVA = "0xCC0DA4", Offset = "0xCC0DA4", VA = "0xCC0DA4")]
		public void SetMusicVolume(float value)
		{
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0xCC1038", Offset = "0xCC1038", VA = "0xCC1038")]
		public void SetAge(float value)
		{
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0xCC1244", Offset = "0xCC1244", VA = "0xCC1244")]
		public void SetDailyCalories(float value)
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0xCC1ABC", Offset = "0xCC1ABC", VA = "0xCC1ABC")]
		public void SetWeightKilograms(float value)
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0xCC1D14", Offset = "0xCC1D14", VA = "0xCC1D14")]
		public void SetSFXVolume(float value)
		{
		}

		[Token(Token = "0x600276C")]
		[Address(RVA = "0xCC0828", Offset = "0xCC0828", VA = "0xCC0828")]
		public void DisplayCalorieDataInput()
		{
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0xCBCB78", Offset = "0xCBCB78", VA = "0xCBCB78")]
		public void DisplayHeartrateControls()
		{
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0xCC08E8", Offset = "0xCC08E8", VA = "0xCC08E8")]
		public void DisplayPlayspaceWarningAdjustment()
		{
		}

		[Token(Token = "0x600276F")]
		[Address(RVA = "0xCC0A2C", Offset = "0xCC0A2C", VA = "0xCC0A2C")]
		public void SetPlayspaceWarningTreshold(float value)
		{
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0xCC9CA4", Offset = "0xCC9CA4", VA = "0xCC9CA4")]
		public void PlaySliderSound(AudioClip sound)
		{
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0xCC7568", Offset = "0xCC7568", VA = "0xCC7568")]
		private void SetSpectatorCameras()
		{
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0xCC5188", Offset = "0xCC5188", VA = "0xCC5188")]
		private void SetButtonStates()
		{
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0xCC74C8", Offset = "0xCC74C8", VA = "0xCC74C8")]
		private void ToggleCameraModeOption()
		{
		}

		[Token(Token = "0x6002774")]
		[Address(RVA = "0xCC9CC0", Offset = "0xCC9CC0", VA = "0xCC9CC0")]
		private void ToggleStrengthMeterOption()
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0xCBD4E0", Offset = "0xCBD4E0", VA = "0xCBD4E0")]
		public void StoreCurrentToggleButton(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0xCC9D88", Offset = "0xCC9D88", VA = "0xCC9D88")]
		private void DisableCanvasGroup(GameObject canvasGroupObject)
		{
		}

		[Token(Token = "0x6002777")]
		[Address(RVA = "0xCC9E88", Offset = "0xCC9E88", VA = "0xCC9E88")]
		private void EnableCanvasGroup(GameObject canvasGroupObject)
		{
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0xCC9F88", Offset = "0xCC9F88", VA = "0xCC9F88")]
		public void OpenTheBasement()
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0xCC9FCC", Offset = "0xCC9FCC", VA = "0xCC9FCC")]
		public void OpenTrappedAboveTheClouds()
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0xCBD09C", Offset = "0xCBD09C", VA = "0xCBD09C")]
		private void UnmuteMusic()
		{
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0xCCA010", Offset = "0xCCA010", VA = "0xCCA010")]
		public void AddExperience(int pointsToAdd)
		{
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0xCCAAF0", Offset = "0xCCAAF0", VA = "0xCCAAF0")]
		private void SaveExperience()
		{
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0xCBDE40", Offset = "0xCBDE40", VA = "0xCBDE40")]
		private void CheckExperience()
		{
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0xCC8C8C", Offset = "0xCC8C8C", VA = "0xCC8C8C")]
		private void AdjustControllers()
		{
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0xCC8EEC", Offset = "0xCC8EEC", VA = "0xCC8EEC")]
		private void AdjustControllersOK()
		{
		}

		[Token(Token = "0x6002780")]
		[Address(RVA = "0xCC90E4", Offset = "0xCC90E4", VA = "0xCC90E4")]
		private void AdjustControllersCancel()
		{
		}

		[Token(Token = "0x6002781")]
		[Address(RVA = "0xCC8D6C", Offset = "0xCC8D6C", VA = "0xCC8D6C")]
		private void ResetControllers()
		{
		}

		[Token(Token = "0x6002782")]
		[Address(RVA = "0xCBE554", Offset = "0xCBE554", VA = "0xCBE554")]
		private void UpdateExperienceInfo()
		{
		}

		[Token(Token = "0x6002783")]
		[Address(RVA = "0xCCABD0", Offset = "0xCCABD0", VA = "0xCCABD0")]
		private void AnimateSlider(Slider slider, float oldValue, float newValue)
		{
		}

		[Token(Token = "0x6002784")]
		[Address(RVA = "0xCC4A24", Offset = "0xCC4A24", VA = "0xCC4A24")]
		private void UpdateHighscore(bool force = false)
		{
		}

		[Token(Token = "0x6002785")]
		[Address(RVA = "0xCCAD9C", Offset = "0xCCAD9C", VA = "0xCCAD9C")]
		private LLPlatform.LeaderboardSelector GetCurrentLeaderboardSelector()
		{
			return default(LLPlatform.LeaderboardSelector);
		}

		[Token(Token = "0x6002786")]
		[Address(RVA = "0xCCAE2C", Offset = "0xCCAE2C", VA = "0xCCAE2C")]
		private void CreateFakeHighscores()
		{
		}

		[Token(Token = "0x6002787")]
		[Address(RVA = "0xCCB1BC", Offset = "0xCCB1BC", VA = "0xCCB1BC")]
		private void UpdateHighscoreCallback(LLPlatform.LeaderboardSelector selector, List<LLPlatform.LeaderboardEntry> entries, bool isFirstCallback)
		{
		}

		[Token(Token = "0x6002788")]
		[Address(RVA = "0xCC24A0", Offset = "0xCC24A0", VA = "0xCC24A0")]
		internal void TogglePauseMode(bool nowInPause)
		{
		}

		[Token(Token = "0x6002789")]
		[Address(RVA = "0xCCB6B0", Offset = "0xCCB6B0", VA = "0xCCB6B0")]
		private void PauseHandlerOnOnPauseModeChanged(bool isNowPaused)
		{
		}

		[Token(Token = "0x600278A")]
		[Address(RVA = "0xCCB57C", Offset = "0xCCB57C", VA = "0xCCB57C")]
		private void ToggleHandVisibility(bool shouldBeVisible)
		{
		}

		[Token(Token = "0x600278B")]
		[Address(RVA = "0xCCB6B8", Offset = "0xCCB6B8", VA = "0xCCB6B8")]
		public Menu()
		{
		}
	}
	[Token(Token = "0x20006D6")]
	public class MenuModifierNameFactorDisplay : MonoBehaviour
	{
		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GameConfiguration.Modifier modifier;

		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public TextMeshProUGUI nameText;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public LocalizeStringEvent localization;

		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public TextMeshProUGUI factor;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public MenuToggleArea toggleArea;

		[Token(Token = "0x60027EA")]
		[Address(RVA = "0xCE03F0", Offset = "0xCE03F0", VA = "0xCE03F0")]
		public MenuModifierNameFactorDisplay()
		{
		}
	}
	[Token(Token = "0x20006D7")]
	public class MenuSelectButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler
	{
		[Token(Token = "0x20006D8")]
		public enum Action
		{
			[Token(Token = "0x4002BD2")]
			StartGame,
			[Token(Token = "0x4002BD3")]
			Exit,
			[Token(Token = "0x4002BD4")]
			Settings,
			[Token(Token = "0x4002BD5")]
			Scores,
			[Token(Token = "0x4002BD6")]
			Editor,
			[Token(Token = "0x4002BD7")]
			NextSongs,
			[Token(Token = "0x4002BD8")]
			PreviousSongs,
			[Token(Token = "0x4002BD9")]
			WelcomeClose,
			[Token(Token = "0x4002BDA")]
			JoinCommunity,
			[Token(Token = "0x4002BDB")]
			NeedHelp,
			[Token(Token = "0x4002BDC")]
			ReportBug,
			[Token(Token = "0x4002BDD")]
			Credits,
			[Token(Token = "0x4002BDE")]
			DecreaseQuality,
			[Token(Token = "0x4002BDF")]
			IncreaseQuality,
			[Token(Token = "0x4002BE0")]
			ScrollToTop,
			[Token(Token = "0x4002BE1")]
			ScrollToPlayer,
			[Token(Token = "0x4002BE2")]
			EMenuPosLeft,
			[Token(Token = "0x4002BE3")]
			EMenuPosRight,
			[Token(Token = "0x4002BE4")]
			EBeatStepLeft,
			[Token(Token = "0x4002BE5")]
			EBeatStepRight,
			[Token(Token = "0x4002BE6")]
			EUndo,
			[Token(Token = "0x4002BE7")]
			ERedo,
			[Token(Token = "0x4002BE8")]
			ERevert,
			[Token(Token = "0x4002BE9")]
			ESave,
			[Token(Token = "0x4002BEA")]
			EExit,
			[Token(Token = "0x4002BEB")]
			EBallNormal,
			[Token(Token = "0x4002BEC")]
			EBallPower,
			[Token(Token = "0x4002BED")]
			EBallObstacle,
			[Token(Token = "0x4002BEE")]
			EWall1,
			[Token(Token = "0x4002BEF")]
			EWall2,
			[Token(Token = "0x4002BF0")]
			EWall3,
			[Token(Token = "0x4002BF1")]
			EWall4,
			[Token(Token = "0x4002BF2")]
			EWall5,
			[Token(Token = "0x4002BF3")]
			EWall6,
			[Token(Token = "0x4002BF4")]
			EWall7,
			[Token(Token = "0x4002BF5")]
			EWall8,
			[Token(Token = "0x4002BF6")]
			EStreamAStartMid,
			[Token(Token = "0x4002BF7")]
			EStreamAEnd,
			[Token(Token = "0x4002BF8")]
			EStreamBStartMid,
			[Token(Token = "0x4002BF9")]
			EStreamBEnd,
			[Token(Token = "0x4002BFA")]
			EOffsetLeft,
			[Token(Token = "0x4002BFB")]
			EOffsetRight,
			[Token(Token = "0x4002BFC")]
			ECopySetStart,
			[Token(Token = "0x4002BFD")]
			ECopySetEnd,
			[Token(Token = "0x4002BFE")]
			ECopyMerge,
			[Token(Token = "0x4002BFF")]
			ECopyOverwrite,
			[Token(Token = "0x4002C00")]
			ERippleInsert,
			[Token(Token = "0x4002C01")]
			ERippleDelete,
			[Token(Token = "0x4002C02")]
			ESmoothA,
			[Token(Token = "0x4002C03")]
			ESmoothB,
			[Token(Token = "0x4002C04")]
			EExitConfirm,
			[Token(Token = "0x4002C05")]
			ERevertConfirm,
			[Token(Token = "0x4002C06")]
			ECancelConfirmDialog,
			[Token(Token = "0x4002C07")]
			GenderLeft,
			[Token(Token = "0x4002C08")]
			GenderRight,
			[Token(Token = "0x4002C09")]
			DecreaseAge,
			[Token(Token = "0x4002C0A")]
			IncreaseAge,
			[Token(Token = "0x4002C0B")]
			DecreaseWeight,
			[Token(Token = "0x4002C0C")]
			IncreaseWeight,
			[Token(Token = "0x4002C0D")]
			ResetCalories,
			[Token(Token = "0x4002C0E")]
			HeartrateMonitorSearch,
			[Token(Token = "0x4002C0F")]
			HeartrateMonitorConnect,
			[Token(Token = "0x4002C10")]
			HeartrateMonitorToggleLeft,
			[Token(Token = "0x4002C11")]
			HeartrateMonitorToggleRight,
			[Token(Token = "0x4002C12")]
			GuideToCustomSongs,
			[Token(Token = "0x4002C13")]
			HeartRateMonitorInfo,
			[Token(Token = "0x4002C14")]
			HitSoundLeft,
			[Token(Token = "0x4002C15")]
			HitSoundRight,
			[Token(Token = "0x4002C16")]
			HeartRateMonitorDisconnect,
			[Token(Token = "0x4002C17")]
			ECopyToClipboardRequest,
			[Token(Token = "0x4002C18")]
			ECopyToPatternRequest,
			[Token(Token = "0x4002C19")]
			EPasteFromPatternRequested,
			[Token(Token = "0x4002C1A")]
			EPasteFromClipboardRequest,
			[Token(Token = "0x4002C1B")]
			ECloseSingleButtonDialog,
			[Token(Token = "0x4002C1C")]
			ECopyToPatternConfirm,
			[Token(Token = "0x4002C1D")]
			EPasteFromPatternConfirm,
			[Token(Token = "0x4002C1E")]
			EKeyboardKey,
			[Token(Token = "0x4002C1F")]
			ECancelPatternDialog,
			[Token(Token = "0x4002C20")]
			ECopyToPatternConfirmConfirm,
			[Token(Token = "0x4002C21")]
			EDeletePattern,
			[Token(Token = "0x4002C22")]
			EDeletePatternConfirm,
			[Token(Token = "0x4002C23")]
			DebugSelectExternal,
			[Token(Token = "0x4002C24")]
			EDetectBPMAndOffset,
			[Token(Token = "0x4002C25")]
			EBPMLeft,
			[Token(Token = "0x4002C26")]
			EBPMRight,
			[Token(Token = "0x4002C27")]
			EInvertOffset,
			[Token(Token = "0x4002C28")]
			EGenerate,
			[Token(Token = "0x4002C29")]
			EConfirmGenerate,
			[Token(Token = "0x4002C2A")]
			GContinue,
			[Token(Token = "0x4002C2B")]
			GToMainMenu,
			[Token(Token = "0x4002C2C")]
			GBPMHalf,
			[Token(Token = "0x4002C2D")]
			GBPMDec,
			[Token(Token = "0x4002C2E")]
			GBPMInc,
			[Token(Token = "0x4002C2F")]
			GBPMDouble,
			[Token(Token = "0x4002C30")]
			GOffsetDec,
			[Token(Token = "0x4002C31")]
			GOffsetInc,
			[Token(Token = "0x4002C32")]
			GOffsetToggle,
			[Token(Token = "0x4002C33")]
			GReset,
			[Token(Token = "0x4002C34")]
			GPreview,
			[Token(Token = "0x4002C35")]
			GCancel,
			[Token(Token = "0x4002C36")]
			GPlay,
			[Token(Token = "0x4002C37")]
			GInfoDialogOK,
			[Token(Token = "0x4002C38")]
			GSettingsBallsDown,
			[Token(Token = "0x4002C39")]
			GSettingsBallsUp,
			[Token(Token = "0x4002C3A")]
			GSettingsWallsDown,
			[Token(Token = "0x4002C3B")]
			GSettingsWallsUp,
			[Token(Token = "0x4002C3C")]
			GSettingsStreamsDown,
			[Token(Token = "0x4002C3D")]
			GSettingsStreamsUp,
			[Token(Token = "0x4002C3E")]
			GSettingsSwingsDown,
			[Token(Token = "0x4002C3F")]
			GSettingsSwingsUp,
			[Token(Token = "0x4002C40")]
			GSettingsJumpsDown,
			[Token(Token = "0x4002C41")]
			GSettingsJumpsUp,
			[Token(Token = "0x4002C42")]
			GSettingsSquatsDown,
			[Token(Token = "0x4002C43")]
			GSettingsSquatsUp,
			[Token(Token = "0x4002C44")]
			TakeScreenShot,
			[Token(Token = "0x4002C45")]
			SongAdjust,
			[Token(Token = "0x4002C46")]
			GSettingsReset,
			[Token(Token = "0x4002C47")]
			UNUSED,
			[Token(Token = "0x4002C48")]
			AdjustControllers,
			[Token(Token = "0x4002C49")]
			ResetControllers,
			[Token(Token = "0x4002C4A")]
			AdjustControllersOK,
			[Token(Token = "0x4002C4B")]
			AdjustControllersCancel,
			[Token(Token = "0x4002C4C")]
			GDetectAgain,
			[Token(Token = "0x4002C4D")]
			MuteMusic,
			[Token(Token = "0x4002C4E")]
			GoToSettingsFromWelcomePanel,
			[Token(Token = "0x4002C4F")]
			Playlists,
			[Token(Token = "0x4002C50")]
			DecreaseMusicVolume,
			[Token(Token = "0x4002C51")]
			IncreaseMusicVolume,
			[Token(Token = "0x4002C52")]
			DecreaseSFXVolume,
			[Token(Token = "0x4002C53")]
			IncreaseSFXVolume,
			[Token(Token = "0x4002C54")]
			EPlayPause,
			[Token(Token = "0x4002C55")]
			EMark,
			[Token(Token = "0x4002C56")]
			EClearMarks,
			[Token(Token = "0x4002C57")]
			PlaylistAnalysis,
			[Token(Token = "0x4002C58")]
			DecreaseDailyCalories,
			[Token(Token = "0x4002C59")]
			IncreaseDailyCalories,
			[Token(Token = "0x4002C5A")]
			VoiceLeft,
			[Token(Token = "0x4002C5B")]
			VoiceRight,
			[Token(Token = "0x4002C5C")]
			DecreasePlayspaceDistance,
			[Token(Token = "0x4002C5D")]
			IncreasePlayspaceDistance,
			[Token(Token = "0x4002C5E")]
			Guide,
			[Token(Token = "0x4002C5F")]
			PlaylistEntryMoveUp,
			[Token(Token = "0x4002C60")]
			PlaylistEntryMoveDown,
			[Token(Token = "0x4002C61")]
			EMovePalette,
			[Token(Token = "0x4002C62")]
			ELiveRecorder,
			[Token(Token = "0x4002C63")]
			EMinHitSpeedLeft,
			[Token(Token = "0x4002C64")]
			EMinHitSpeedRight,
			[Token(Token = "0x4002C65")]
			EPowerHitSpeedLeft,
			[Token(Token = "0x4002C66")]
			EPowerHitSpeedRight,
			[Token(Token = "0x4002C67")]
			ELRSubbeatModeLeft,
			[Token(Token = "0x4002C68")]
			ELRSubbeatModeRight,
			[Token(Token = "0x4002C69")]
			ELRSquatSensitivityLeft,
			[Token(Token = "0x4002C6A")]
			ELRSquatSensitivityRight,
			[Token(Token = "0x4002C6B")]
			ELRObstacleTypeLeft,
			[Token(Token = "0x4002C6C")]
			ELRObstacleTypeRight,
			[Token(Token = "0x4002C6D")]
			EClearAll,
			[Token(Token = "0x4002C6E")]
			ELRSidestepSensitivityLeft,
			[Token(Token = "0x4002C6F")]
			ELRSidestepSensitivityRight,
			[Token(Token = "0x4002C70")]
			ELRSwingSensitivityLeft,
			[Token(Token = "0x4002C71")]
			ELRSwingSensitivityRight,
			[Token(Token = "0x4002C72")]
			EClearStreams,
			[Token(Token = "0x4002C73")]
			EClearRange,
			[Token(Token = "0x4002C74")]
			EClearAllConfirm,
			[Token(Token = "0x4002C75")]
			ELRResetSensitivities,
			[Token(Token = "0x4002C76")]
			StartTutorial,
			[Token(Token = "0x4002C77")]
			GoToFitnessSettings,
			[Token(Token = "0x4002C78")]
			HowToPlay
		}

		[Token(Token = "0x20006D9")]
		public delegate void OnClick(MenuSelectButton button);

		[Token(Token = "0x20006DA")]
		public delegate void OnHoverEnter(MenuSelectButton button);

		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Action action;

		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator tooltipAnimator;

		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Animator noteOnClickAnimator;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image childImage;

		[Token(Token = "0x4002BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		internal bool hasScaleTweening;

		[Token(Token = "0x4002BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[SerializeField]
		internal bool dontChangeSelectionColor;

		[Token(Token = "0x1400006F")]
		public event OnClick onClick
		{
			[Token(Token = "0x60027EB")]
			[Address(RVA = "0xCCCB78", Offset = "0xCCCB78", VA = "0xCCCB78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027EC")]
			[Address(RVA = "0xCCCC98", Offset = "0xCCCC98", VA = "0xCCCC98")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000070")]
		public event OnHoverEnter onHoverEnter
		{
			[Token(Token = "0x60027ED")]
			[Address(RVA = "0xCD6818", Offset = "0xCD6818", VA = "0xCD6818")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027EE")]
			[Address(RVA = "0xCE03F8", Offset = "0xCE03F8", VA = "0xCE03F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0xCE0494", Offset = "0xCE0494", VA = "0xCE0494")]
		private void Awake()
		{
		}

		[Token(Token = "0x60027F0")]
		[Address(RVA = "0xCE05E0", Offset = "0xCE05E0", VA = "0xCE05E0", Slot = "5")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60027F1")]
		[Address(RVA = "0xCE0708", Offset = "0xCE0708", VA = "0xCE0708", Slot = "6")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0xCE07BC", Offset = "0xCE07BC", VA = "0xCE07BC")]
		private void HideToolTip()
		{
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0xCE06B4", Offset = "0xCE06B4", VA = "0xCE06B4")]
		private void ShowToolTip()
		{
		}

		[Token(Token = "0x60027F4")]
		[Address(RVA = "0xCE0810", Offset = "0xCE0810", VA = "0xCE0810")]
		public void ShowSelectionGlow(bool isSelected)
		{
		}

		[Token(Token = "0x60027F5")]
		[Address(RVA = "0xCE0958", Offset = "0xCE0958", VA = "0xCE0958")]
		public void ShowNoteOnClick()
		{
		}

		[Token(Token = "0x60027F6")]
		[Address(RVA = "0xCE09AC", Offset = "0xCE09AC", VA = "0xCE09AC", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60027F7")]
		[Address(RVA = "0xCE0A54", Offset = "0xCE0A54", VA = "0xCE0A54")]
		public Action GetAction()
		{
			return default(Action);
		}

		[Token(Token = "0x60027F8")]
		[Address(RVA = "0xCE0A5C", Offset = "0xCE0A5C", VA = "0xCE0A5C", Slot = "7")]
		internal virtual bool IsInteractable()
		{
			return default(bool);
		}

		[Token(Token = "0x60027F9")]
		[Address(RVA = "0xCCFB94", Offset = "0xCCFB94", VA = "0xCCFB94")]
		internal void SetInteractable(bool interactable)
		{
		}

		[Token(Token = "0x60027FA")]
		[Address(RVA = "0xCE0AB4", Offset = "0xCE0AB4", VA = "0xCE0AB4")]
		internal void SetChildImage(bool isShown)
		{
		}

		[Token(Token = "0x60027FB")]
		[Address(RVA = "0xCE0B4C", Offset = "0xCE0B4C", VA = "0xCE0B4C")]
		internal void SetAction(Action actionToUse)
		{
		}

		[Token(Token = "0x60027FC")]
		[Address(RVA = "0xCE0B54", Offset = "0xCE0B54", VA = "0xCE0B54")]
		public MenuSelectButton()
		{
		}
	}
	[Token(Token = "0x20006DB")]
	public class MenuSlider : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4002C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Menu menu;

		[Token(Token = "0x4002C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FrameworkManager fm;

		[Token(Token = "0x6002801")]
		[Address(RVA = "0xCE0B84", Offset = "0xCE0B84", VA = "0xCE0B84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002802")]
		[Address(RVA = "0xCE0C28", Offset = "0xCE0C28", VA = "0xCE0C28", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002803")]
		[Address(RVA = "0xCE0C2C", Offset = "0xCE0C2C", VA = "0xCE0C2C", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002804")]
		[Address(RVA = "0xCE0C70", Offset = "0xCE0C70", VA = "0xCE0C70")]
		public MenuSlider()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	public class MenuSoundManager : MonoBehaviour
	{
		[Token(Token = "0x4002C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip buttonHover;

		[Token(Token = "0x4002C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip buttonClick;

		[Token(Token = "0x4002C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip startGame;

		[Token(Token = "0x4002C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip cameraShutter;

		[Token(Token = "0x4002C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip achievement;

		[Token(Token = "0x4002C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip achievement2;

		[Token(Token = "0x4002C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip success;

		[Token(Token = "0x4002C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip win;

		[Token(Token = "0x4002C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip jingle;

		[Token(Token = "0x4002C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioSource sfxAudioSource;

		[Token(Token = "0x4002C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioSource audioSourceVoiceOvers;

		[Token(Token = "0x4002C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioMixer mixer;

		[Token(Token = "0x4002C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private string musicExposedParam;

		[Token(Token = "0x4002C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private FrameworkManager fm;

		[Token(Token = "0x4002C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool isActive;

		[Token(Token = "0x6002805")]
		[Address(RVA = "0xCD6940", Offset = "0xCD6940", VA = "0xCD6940")]
		public void PlayHoverSound()
		{
		}

		[Token(Token = "0x6002806")]
		[Address(RVA = "0xCD68F4", Offset = "0xCD68F4", VA = "0xCD68F4")]
		public void PlayClickSound()
		{
		}

		[Token(Token = "0x6002807")]
		[Address(RVA = "0xCE0C78", Offset = "0xCE0C78", VA = "0xCE0C78")]
		public void PlayStartSound()
		{
		}

		[Token(Token = "0x6002808")]
		[Address(RVA = "0xCE0CAC", Offset = "0xCE0CAC", VA = "0xCE0CAC")]
		public void PlayCameraSound()
		{
		}

		[Token(Token = "0x6002809")]
		[Address(RVA = "0xCE0CE0", Offset = "0xCE0CE0", VA = "0xCE0CE0")]
		public void PlayAchievementSound()
		{
		}

		[Token(Token = "0x600280A")]
		[Address(RVA = "0xCE0D14", Offset = "0xCE0D14", VA = "0xCE0D14")]
		public void PlayAchievementSound2()
		{
		}

		[Token(Token = "0x600280B")]
		[Address(RVA = "0xCE0D48", Offset = "0xCE0D48", VA = "0xCE0D48")]
		public void PlaySuccessSound()
		{
		}

		[Token(Token = "0x600280C")]
		[Address(RVA = "0xCE0D7C", Offset = "0xCE0D7C", VA = "0xCE0D7C")]
		public void PlayWinSound()
		{
		}

		[Token(Token = "0x600280D")]
		[Address(RVA = "0xCE0DB0", Offset = "0xCE0DB0", VA = "0xCE0DB0")]
		public void PlayJingleSound()
		{
		}

		[Token(Token = "0x600280E")]
		[Address(RVA = "0xCE0DE4", Offset = "0xCE0DE4", VA = "0xCE0DE4")]
		public void PlayVoiceOver(string clipKey)
		{
		}

		[Token(Token = "0x600280F")]
		[Address(RVA = "0xCE0EAC", Offset = "0xCE0EAC", VA = "0xCE0EAC")]
		public void StopVoiceOvers()
		{
		}

		[Token(Token = "0x6002810")]
		[Address(RVA = "0xCE0EC8", Offset = "0xCE0EC8", VA = "0xCE0EC8")]
		public void ReduceMusicVolume()
		{
		}

		[Token(Token = "0x6002811")]
		[Address(RVA = "0xCE0F98", Offset = "0xCE0F98", VA = "0xCE0F98")]
		public void RestoreMusicVolume()
		{
		}

		[Token(Token = "0x6002812")]
		[Address(RVA = "0xCE0FF4", Offset = "0xCE0FF4", VA = "0xCE0FF4")]
		public void SetEnabled(bool isActive)
		{
		}

		[Token(Token = "0x6002813")]
		[Address(RVA = "0xCE1000", Offset = "0xCE1000", VA = "0xCE1000")]
		public MenuSoundManager()
		{
		}
	}
	[Token(Token = "0x20006DD")]
	public class MenuToggleArea : MonoBehaviour
	{
		[Token(Token = "0x20006DE")]
		public enum Selection
		{
			[Token(Token = "0x4002C8F")]
			Environment,
			[Token(Token = "0x4002C90")]
			Song,
			[Token(Token = "0x4002C91")]
			Difficulty,
			[Token(Token = "0x4002C92")]
			Weapon,
			[Token(Token = "0x4002C93")]
			HighscoreOverallOrWeaponSpecific,
			[Token(Token = "0x4002C94")]
			PlayerSize,
			[Token(Token = "0x4002C95")]
			PlayspaceSize,
			[Token(Token = "0x4002C96")]
			ScoreVisualization,
			[Token(Token = "0x4002C97")]
			SpectatorCamera,
			[Token(Token = "0x4002C98")]
			CameraMode,
			[Token(Token = "0x4002C99")]
			Settings,
			[Token(Token = "0x4002C9A")]
			Bloom,
			[Token(Token = "0x4002C9B")]
			MirrorModifier,
			[Token(Token = "0x4002C9C")]
			NoHorizontalWallsModifier,
			[Token(Token = "0x4002C9D")]
			NoFailModifier,
			[Token(Token = "0x4002C9E")]
			ChallengeMode,
			[Token(Token = "0x4002C9F")]
			EPanelToggle,
			[Token(Token = "0x4002CA0")]
			SongExternal,
			[Token(Token = "0x4002CA1")]
			ECopyMirrorHorizontal,
			[Token(Token = "0x4002CA2")]
			EMetronome,
			[Token(Token = "0x4002CA3")]
			TrackCalories,
			[Token(Token = "0x4002CA4")]
			Beautify,
			[Token(Token = "0x4002CA5")]
			TrackHeartrate,
			[Token(Token = "0x4002CA6")]
			GameHints,
			[Token(Token = "0x4002CA7")]
			PlayspaceWarning,
			[Token(Token = "0x4002CA8")]
			StreamFeedbackVisualization,
			[Token(Token = "0x4002CA9")]
			ComboHighlighting,
			[Token(Token = "0x4002CAA")]
			ECopyMirrorVertical,
			[Token(Token = "0x4002CAB")]
			ECopyAdditive,
			[Token(Token = "0x4002CAC")]
			EPatternNew,
			[Token(Token = "0x4002CAD")]
			ShowBounds,
			[Token(Token = "0x4002CAE")]
			NormalBallsOnlyModifier,
			[Token(Token = "0x4002CAF")]
			NoVerticalWallsModifier,
			[Token(Token = "0x4002CB0")]
			VoiceOver,
			[Token(Token = "0x4002CB1")]
			Generate,
			[Token(Token = "0x4002CB2")]
			FlightPaths,
			[Token(Token = "0x4002CB3")]
			SongSettings,
			[Token(Token = "0x4002CB4")]
			SuperSpeedModifier,
			[Token(Token = "0x4002CB5")]
			PlayspaceSizeWelcomePanel,
			[Token(Token = "0x4002CB6")]
			PlayMusicOnReturn,
			[Token(Token = "0x4002CB7")]
			UNUSED,
			[Token(Token = "0x4002CB8")]
			MuteMusicToggle,
			[Token(Token = "0x4002CB9")]
			SmallerBallsModifier,
			[Token(Token = "0x4002CBA")]
			SongPack,
			[Token(Token = "0x4002CBB")]
			PowerBallsOnlyModifier,
			[Token(Token = "0x4002CBC")]
			Tutorial,
			[Token(Token = "0x4002CBD")]
			StrengthMeter,
			[Token(Token = "0x4002CBE")]
			StrengthFormat,
			[Token(Token = "0x4002CBF")]
			NoBadBallsModifier,
			[Token(Token = "0x4002CC0")]
			NoTunnelsModifier,
			[Token(Token = "0x4002CC1")]
			ELiveRecorderMetronome,
			[Token(Token = "0x4002CC2")]
			ELiveRecorderBallSelection,
			[Token(Token = "0x4002CC3")]
			ELROSNormalBall,
			[Token(Token = "0x4002CC4")]
			ELROSPowerBall,
			[Token(Token = "0x4002CC5")]
			ELROSSwing,
			[Token(Token = "0x4002CC6")]
			ELROSBallObstacle,
			[Token(Token = "0x4002CC7")]
			ELROSHorizontalWall,
			[Token(Token = "0x4002CC8")]
			ELROSLeftTunnel,
			[Token(Token = "0x4002CC9")]
			ELROSCenteredTunnel,
			[Token(Token = "0x4002CCA")]
			ELROSRightTunnel,
			[Token(Token = "0x4002CCB")]
			ELROSLeftUpsidedownL,
			[Token(Token = "0x4002CCC")]
			ELROSRightUpsidedownL,
			[Token(Token = "0x4002CCD")]
			ELROSNarrowVerticalWall,
			[Token(Token = "0x4002CCE")]
			ELROSWideVerticalWall,
			[Token(Token = "0x4002CCF")]
			NoDoubleBallsModifier,
			[Token(Token = "0x4002CD0")]
			NoStreamsModifier,
			[Token(Token = "0x4002CD1")]
			Gameplay,
			[Token(Token = "0x4002CD2")]
			EBeatUnits,
			[Token(Token = "0x4002CD3")]
			GeneratorVersion
		}

		[Token(Token = "0x20006DF")]
		public delegate void OnSelect(Selection selection, int value);

		[Token(Token = "0x4002C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Selection selection;

		[Token(Token = "0x4002C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, MenuToggleButton> buttons;

		[Token(Token = "0x4002C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isInitialized;

		[Token(Token = "0x14000071")]
		public event OnSelect onSelect
		{
			[Token(Token = "0x6002814")]
			[Address(RVA = "0xCCEA78", Offset = "0xCCEA78", VA = "0xCCEA78")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002815")]
			[Address(RVA = "0xCE1010", Offset = "0xCE1010", VA = "0xCE1010")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002816")]
		[Address(RVA = "0xCE10AC", Offset = "0xCE10AC", VA = "0xCE10AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002817")]
		[Address(RVA = "0xCE10BC", Offset = "0xCE10BC", VA = "0xCE10BC")]
		public void InitializeSelectionButtons()
		{
		}

		[Token(Token = "0x6002818")]
		[Address(RVA = "0xCE1544", Offset = "0xCE1544", VA = "0xCE1544")]
		private void OnButtonClicked(MenuToggleButton button)
		{
		}

		[Token(Token = "0x6002819")]
		[Address(RVA = "0xCE173C", Offset = "0xCE173C", VA = "0xCE173C")]
		public Selection GetSelection()
		{
			return default(Selection);
		}

		[Token(Token = "0x600281A")]
		[Address(RVA = "0xCE1744", Offset = "0xCE1744", VA = "0xCE1744")]
		public void SetSelection(Selection selection)
		{
		}

		[Token(Token = "0x600281B")]
		[Address(RVA = "0xCD0260", Offset = "0xCD0260", VA = "0xCD0260")]
		public void SetSelectionValue(int value)
		{
		}

		[Token(Token = "0x600281C")]
		[Address(RVA = "0xCCF110", Offset = "0xCCF110", VA = "0xCCF110")]
		public void SetSelectionValueSilent(int value)
		{
		}

		[Token(Token = "0x600281D")]
		[Address(RVA = "0xCE182C", Offset = "0xCE182C", VA = "0xCE182C")]
		public void ForceSelectionBoxValue(int value)
		{
		}

		[Token(Token = "0x600281E")]
		[Address(RVA = "0xCE19E8", Offset = "0xCE19E8", VA = "0xCE19E8")]
		public void SetButtonInteractable(int buttonValue, bool isInteractable)
		{
		}

		[Token(Token = "0x600281F")]
		[Address(RVA = "0xCE1B14", Offset = "0xCE1B14", VA = "0xCE1B14")]
		public MenuToggleArea()
		{
		}
	}
	[Token(Token = "0x20006E0")]
	public class MenuToggleButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler
	{
		[Token(Token = "0x20006E1")]
		public delegate void OnClick(MenuToggleButton button);

		[Token(Token = "0x20006E2")]
		public delegate void OnHoverEnter(MenuToggleButton button);

		[Token(Token = "0x20006E3")]
		public delegate void OnPointerIsDown(MenuToggleButton button);

		[Token(Token = "0x4002CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int selectionValue;

		[Token(Token = "0x4002CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool lessAlphaChanges;

		[Token(Token = "0x4002CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[SerializeField]
		private bool isSelectionBox;

		[Token(Token = "0x4002CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		[SerializeField]
		private bool hasScaleTweening;

		[Token(Token = "0x4002CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		[SerializeField]
		private bool isTab;

		[Token(Token = "0x4002CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject toolTip;

		[Token(Token = "0x4002CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject unlockToolTip;

		[Token(Token = "0x4002CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject activeOnInteractable;

		[Token(Token = "0x4002CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool isInvisibleWhenNotInteractive;

		[Token(Token = "0x4002CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Selectable actualButton;

		[Token(Token = "0x4002CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isToggledOn;

		[Token(Token = "0x4002CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Image frameImage;

		[Token(Token = "0x4002CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Text buttonText;

		[Token(Token = "0x4002CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TextMeshProUGUI buttonTextTMP;

		[Token(Token = "0x4002CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AudioSource audioSourceEffects;

		[Token(Token = "0x4002CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image buttonImage;

		[Token(Token = "0x4002CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Color initialbuttonImageColor;

		[Token(Token = "0x14000072")]
		public event OnClick onClick
		{
			[Token(Token = "0x6002822")]
			[Address(RVA = "0xCD5D90", Offset = "0xCD5D90", VA = "0xCD5D90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002823")]
			[Address(RVA = "0xCE14A8", Offset = "0xCE14A8", VA = "0xCE14A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000073")]
		public event OnHoverEnter onHoverEnter
		{
			[Token(Token = "0x6002824")]
			[Address(RVA = "0xCD5E2C", Offset = "0xCD5E2C", VA = "0xCD5E2C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002825")]
			[Address(RVA = "0xCE1BB0", Offset = "0xCE1BB0", VA = "0xCE1BB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000074")]
		public event OnPointerIsDown onPointerIsDown
		{
			[Token(Token = "0x6002826")]
			[Address(RVA = "0xCE1C4C", Offset = "0xCE1C4C", VA = "0xCE1C4C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002827")]
			[Address(RVA = "0xCE1CE8", Offset = "0xCE1CE8", VA = "0xCE1CE8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000075")]
		public event Action<MenuToggleButton> OnDeselect
		{
			[Token(Token = "0x6002828")]
			[Address(RVA = "0xCD662C", Offset = "0xCD662C", VA = "0xCD662C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002829")]
			[Address(RVA = "0xCE1D84", Offset = "0xCE1D84", VA = "0xCE1D84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600282A")]
		[Address(RVA = "0xCE1E34", Offset = "0xCE1E34", VA = "0xCE1E34", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600282B")]
		[Address(RVA = "0xCE20B0", Offset = "0xCE20B0", VA = "0xCE20B0", Slot = "8")]
		internal virtual void SetToggle(bool v)
		{
		}

		[Token(Token = "0x600282C")]
		[Address(RVA = "0xCE2338", Offset = "0xCE2338", VA = "0xCE2338")]
		internal void SetSelectionValue(int value)
		{
		}

		[Token(Token = "0x600282D")]
		[Address(RVA = "0xCE2340", Offset = "0xCE2340", VA = "0xCE2340")]
		internal int GetSelectionValue()
		{
			return default(int);
		}

		[Token(Token = "0x600282E")]
		[Address(RVA = "0xCE2348", Offset = "0xCE2348", VA = "0xCE2348")]
		public bool IsToggledOn()
		{
			return default(bool);
		}

		[Token(Token = "0x600282F")]
		[Address(RVA = "0xCE2350", Offset = "0xCE2350", VA = "0xCE2350", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002830")]
		[Address(RVA = "0xCE2380", Offset = "0xCE2380", VA = "0xCE2380", Slot = "9")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002831")]
		[Address(RVA = "0xCE24A8", Offset = "0xCE24A8", VA = "0xCE24A8", Slot = "10")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002832")]
		[Address(RVA = "0xCE259C", Offset = "0xCE259C", VA = "0xCE259C")]
		public void ForceOnPointerExit()
		{
		}

		[Token(Token = "0x6002833")]
		[Address(RVA = "0xCE174C", Offset = "0xCE174C", VA = "0xCE174C")]
		public void Click()
		{
		}

		[Token(Token = "0x6002834")]
		[Address(RVA = "0xCE18FC", Offset = "0xCE18FC", VA = "0xCE18FC")]
		public void SetGray()
		{
		}

		[Token(Token = "0x6002835")]
		[Address(RVA = "0xCE2690", Offset = "0xCE2690", VA = "0xCE2690", Slot = "11")]
		internal virtual bool IsInteractable()
		{
			return default(bool);
		}

		[Token(Token = "0x6002836")]
		[Address(RVA = "0xCE26AC", Offset = "0xCE26AC", VA = "0xCE26AC", Slot = "12")]
		internal virtual void SetInteractable(bool isInteractable)
		{
		}

		[Token(Token = "0x6002837")]
		[Address(RVA = "0xCE2750", Offset = "0xCE2750", VA = "0xCE2750")]
		public void RemoveTooltip()
		{
		}

		[Token(Token = "0x6002838")]
		[Address(RVA = "0xCE275C", Offset = "0xCE275C", VA = "0xCE275C")]
		public MenuToggleButton()
		{
		}
	}
	[Token(Token = "0x20006E4")]
	public class MenuToggleButtonLockable : MenuToggleButton
	{
		[Token(Token = "0x4002CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Image lockImage;

		[Token(Token = "0x4002CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private TextMeshProUGUI text;

		[Token(Token = "0x600283F")]
		[Address(RVA = "0xCE3B54", Offset = "0xCE3B54", VA = "0xCE3B54", Slot = "7")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0xCE3BB8", Offset = "0xCE3BB8", VA = "0xCE3BB8", Slot = "12")]
		internal override void SetInteractable(bool isInteractable)
		{
		}

		[Token(Token = "0x6002841")]
		[Address(RVA = "0xCE3CB8", Offset = "0xCE3CB8", VA = "0xCE3CB8")]
		public MenuToggleButtonLockable()
		{
		}
	}
	[Token(Token = "0x20006E5")]
	public class MenuToggleButtonWithText : MenuToggleButtonLockable
	{
		[Token(Token = "0x4002CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private LocalizeStringEvent textToChange;

		[Token(Token = "0x4002CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private string i18nHandle;

		[Token(Token = "0x6002842")]
		[Address(RVA = "0xCE3CC0", Offset = "0xCE3CC0", VA = "0xCE3CC0", Slot = "9")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002843")]
		[Address(RVA = "0xCE3E00", Offset = "0xCE3E00", VA = "0xCE3E00", Slot = "10")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002844")]
		[Address(RVA = "0xCE3CEC", Offset = "0xCE3CEC", VA = "0xCE3CEC")]
		private void SetStringReference()
		{
		}

		[Token(Token = "0x6002845")]
		[Address(RVA = "0xCE3ED4", Offset = "0xCE3ED4", VA = "0xCE3ED4", Slot = "8")]
		internal override void SetToggle(bool v)
		{
		}

		[Token(Token = "0x6002846")]
		[Address(RVA = "0xCE3F10", Offset = "0xCE3F10", VA = "0xCE3F10")]
		public MenuToggleButtonWithText()
		{
		}
	}
	[Token(Token = "0x20006E6")]
	public class PatchNotes : MonoBehaviour
	{
		[Token(Token = "0x6002847")]
		[Address(RVA = "0xCE3F18", Offset = "0xCE3F18", VA = "0xCE3F18")]
		private void Start()
		{
		}

		[Token(Token = "0x6002848")]
		[Address(RVA = "0xCE3F98", Offset = "0xCE3F98", VA = "0xCE3F98")]
		private void EnableOrDisable()
		{
		}

		[Token(Token = "0x6002849")]
		[Address(RVA = "0xCE401C", Offset = "0xCE401C", VA = "0xCE401C")]
		public PatchNotes()
		{
		}
	}
	[Token(Token = "0x20006E7")]
	public class PauseMenu : MonoBehaviour
	{
		[Token(Token = "0x20006E8")]
		public enum CancelAction
		{
			[Token(Token = "0x4002D07")]
			STOP_PLAYLIST,
			[Token(Token = "0x4002D08")]
			GOTO_MAIN_MENU
		}

		[Token(Token = "0x4002CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private BPMOffsetAdjuster bpmOffsetAdjuster;

		[Token(Token = "0x4002CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject generatorPart;

		[Token(Token = "0x4002CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject mainButtonsPart;

		[Token(Token = "0x4002CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject actualBPMAndOffsetPanel;

		[Token(Token = "0x4002CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject messageForManuallyChangedLayouts;

		[Token(Token = "0x4002CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI songTitleText;

		[Token(Token = "0x4002CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI cancelButtonText;

		[Token(Token = "0x4002CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MenuSelectButton cancelButton;

		[Token(Token = "0x4002CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MenuSelectButton continueButton;

		[Token(Token = "0x4002CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Slider musicSlider;

		[Token(Token = "0x4002CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI musicVolText;

		[Token(Token = "0x4002CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private AudioMixer mixer;

		[Token(Token = "0x4002CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private string musicExposedParam;

		[Token(Token = "0x4002CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private MenuSelectButton decreaseMusicVolumeButton;

		[Token(Token = "0x4002CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private MenuSelectButton increaseMusicVolumeButton;

		[Token(Token = "0x4002CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MenuSelectButton[] selectionButtons;

		[Token(Token = "0x4002CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float musicVolume;

		[Token(Token = "0x4002D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float bpm;

		[Token(Token = "0x4002D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float offset;

		[Token(Token = "0x4002D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 originalButtonPosition;

		[Token(Token = "0x4002D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float generatorPartHeight;

		[Token(Token = "0x4002D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private FrameworkManager fm;

		[Token(Token = "0x4002D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x14000076")]
		public event Action cancelPressed
		{
			[Token(Token = "0x600284A")]
			[Address(RVA = "0xCE4024", Offset = "0xCE4024", VA = "0xCE4024")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600284B")]
			[Address(RVA = "0xCE40C0", Offset = "0xCE40C0", VA = "0xCE40C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000077")]
		public event Action continuePressed
		{
			[Token(Token = "0x600284C")]
			[Address(RVA = "0xCE415C", Offset = "0xCE415C", VA = "0xCE415C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600284D")]
			[Address(RVA = "0xCE41F8", Offset = "0xCE41F8", VA = "0xCE41F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600284E")]
		[Address(RVA = "0xCE4294", Offset = "0xCE4294", VA = "0xCE4294")]
		private void Awake()
		{
		}

		[Token(Token = "0x600284F")]
		[Address(RVA = "0xCE47B4", Offset = "0xCE47B4", VA = "0xCE47B4")]
		private void ContinueButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002850")]
		[Address(RVA = "0xCE47D0", Offset = "0xCE47D0", VA = "0xCE47D0")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002851")]
		[Address(RVA = "0xCE47EC", Offset = "0xCE47EC", VA = "0xCE47EC")]
		private void BpmOffsetAdjuster_offsetChanged(float newOffset)
		{
		}

		[Token(Token = "0x6002852")]
		[Address(RVA = "0xCE47F4", Offset = "0xCE47F4", VA = "0xCE47F4")]
		private void BpmOffsetAdjuster_bpmChanged(float newBpm)
		{
		}

		[Token(Token = "0x6002853")]
		[Address(RVA = "0xCE47FC", Offset = "0xCE47FC", VA = "0xCE47FC")]
		private void SelectionButtonSelect(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002854")]
		[Address(RVA = "0xCE4834", Offset = "0xCE4834", VA = "0xCE4834")]
		private void MenuButtonSelectHoverEnter(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002855")]
		[Address(RVA = "0xCE486C", Offset = "0xCE486C", VA = "0xCE486C")]
		public void ShowPauseMenu(float bpm, float offset, string songTitle, CancelAction cancelAction)
		{
		}

		[Token(Token = "0x6002856")]
		[Address(RVA = "0xCE4C0C", Offset = "0xCE4C0C", VA = "0xCE4C0C")]
		public void SetGeneratorSettingType(bool showGeneratorSettings, bool showManualMessage)
		{
		}

		[Token(Token = "0x6002857")]
		[Address(RVA = "0xCE4C9C", Offset = "0xCE4C9C", VA = "0xCE4C9C")]
		internal void HidePauseMenu()
		{
		}

		[Token(Token = "0x6002858")]
		[Address(RVA = "0xCE4CC0", Offset = "0xCE4CC0", VA = "0xCE4CC0")]
		public float GetBPM()
		{
			return default(float);
		}

		[Token(Token = "0x6002859")]
		[Address(RVA = "0xCE4CC8", Offset = "0xCE4CC8", VA = "0xCE4CC8")]
		public float GetOffset()
		{
			return default(float);
		}

		[Token(Token = "0x600285A")]
		[Address(RVA = "0xCE4978", Offset = "0xCE4978", VA = "0xCE4978")]
		public void SetMusicVolume(float value)
		{
		}

		[Token(Token = "0x600285B")]
		[Address(RVA = "0xCE4CD0", Offset = "0xCE4CD0", VA = "0xCE4CD0")]
		private void DecreaseMusicVolumeButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600285C")]
		[Address(RVA = "0xCE4D18", Offset = "0xCE4D18", VA = "0xCE4D18")]
		private void IncreaseMusicVolumeButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600285D")]
		[Address(RVA = "0xCE4818", Offset = "0xCE4818", VA = "0xCE4818")]
		public void PlayClickSound()
		{
		}

		[Token(Token = "0x600285E")]
		[Address(RVA = "0xCE4850", Offset = "0xCE4850", VA = "0xCE4850")]
		public void PlayHoverSound()
		{
		}

		[Token(Token = "0x600285F")]
		[Address(RVA = "0xCE4D60", Offset = "0xCE4D60", VA = "0xCE4D60")]
		public PauseMenu()
		{
		}
	}
	[Token(Token = "0x20006E9")]
	public class PermissionsHelper : MonoBehaviour
	{
		[Token(Token = "0x20006EA")]
		private enum Permission
		{
			[Token(Token = "0x4002D0E")]
			ExternalStorage,
			[Token(Token = "0x4002D0F")]
			FineLocation,
			[Token(Token = "0x4002D10")]
			WriteExternal
		}

		[Token(Token = "0x4002D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<Permission, string> PERMISSION_TO_STRING;

		[Token(Token = "0x4002D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton button;

		[Token(Token = "0x4002D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Permission permission;

		[Token(Token = "0x14000078")]
		public event Action PermissionGranted
		{
			[Token(Token = "0x6002860")]
			[Address(RVA = "0xCE4D68", Offset = "0xCE4D68", VA = "0xCE4D68")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002861")]
			[Address(RVA = "0xCE4E04", Offset = "0xCE4E04", VA = "0xCE4E04")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002862")]
		[Address(RVA = "0xCE4EA0", Offset = "0xCE4EA0", VA = "0xCE4EA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002863")]
		[Address(RVA = "0xCE4F2C", Offset = "0xCE4F2C", VA = "0xCE4F2C")]
		private void Button_onClick(MenuSelectButton mButton)
		{
		}

		[Token(Token = "0x6002864")]
		[Address(RVA = "0xCE5158", Offset = "0xCE5158", VA = "0xCE5158")]
		private void RequestWritePermissions()
		{
		}

		[Token(Token = "0x6002865")]
		[Address(RVA = "0xCE5368", Offset = "0xCE5368", VA = "0xCE5368")]
		public PermissionsHelper()
		{
		}
	}
	[Token(Token = "0x20006EC")]
	public class PlatformDeactivator : MonoBehaviour
	{
		[Token(Token = "0x4002D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<LLPlatform.PlatformType> deactivateOnPlatforms;

		[Token(Token = "0x600286E")]
		[Address(RVA = "0xCE559C", Offset = "0xCE559C", VA = "0xCE559C")]
		private void Start()
		{
		}

		[Token(Token = "0x600286F")]
		[Address(RVA = "0xCE565C", Offset = "0xCE565C", VA = "0xCE565C")]
		public PlatformDeactivator()
		{
		}
	}
	[Token(Token = "0x20006ED")]
	public class PlayspaceHeightAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MIN_VALUE;

		[Token(Token = "0x4002D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float MAX_VALUE;

		[Token(Token = "0x4002D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Slider heightSlider;

		[Token(Token = "0x4002D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI heightText;

		[Token(Token = "0x4002D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MenuSelectButton heightDecreaseButton;

		[Token(Token = "0x4002D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton heightIncreaseButton;

		[Token(Token = "0x4002D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton calibrateButton;

		[Token(Token = "0x4002D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float playerHeight;

		[Token(Token = "0x14000079")]
		public event Action<float> PlayerHeightSettingsChanged
		{
			[Token(Token = "0x6002870")]
			[Address(RVA = "0xCE5664", Offset = "0xCE5664", VA = "0xCE5664")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002871")]
			[Address(RVA = "0xCE5714", Offset = "0xCE5714", VA = "0xCE5714")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0xCE57C4", Offset = "0xCE57C4", VA = "0xCE57C4")]
		internal void Initialize(float playerHeight)
		{
		}

		[Token(Token = "0x6002873")]
		[Address(RVA = "0xCE590C", Offset = "0xCE590C", VA = "0xCE590C")]
		internal void Awake()
		{
		}

		[Token(Token = "0x6002874")]
		[Address(RVA = "0xCE5B38", Offset = "0xCE5B38", VA = "0xCE5B38")]
		private void SliderValueChanged()
		{
		}

		[Token(Token = "0x6002875")]
		[Address(RVA = "0xCE5B68", Offset = "0xCE5B68", VA = "0xCE5B68")]
		private void CalibrateButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002876")]
		[Address(RVA = "0xCE5B6C", Offset = "0xCE5B6C", VA = "0xCE5B6C")]
		internal void MeasurePlayerHeight()
		{
		}

		[Token(Token = "0x6002877")]
		[Address(RVA = "0xCE5BC0", Offset = "0xCE5BC0", VA = "0xCE5BC0")]
		private void UpdateWithNewValues()
		{
		}

		[Token(Token = "0x6002878")]
		[Address(RVA = "0xCE57C8", Offset = "0xCE57C8", VA = "0xCE57C8")]
		public void SetHeightValue(float value)
		{
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0xCE5DF4", Offset = "0xCE5DF4", VA = "0xCE5DF4")]
		public PlayspaceHeightAdjuster()
		{
		}
	}
	[Token(Token = "0x20006EE")]
	public class PlayspaceOffsetAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton recenterButton;

		[Token(Token = "0x4002D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton resetButton;

		[Token(Token = "0x4002D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject playerRig;

		[Token(Token = "0x4002D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject fakeHead;

		[Token(Token = "0x4002D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float modifiedX;

		[Token(Token = "0x4002D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float modifiedZ;

		[Token(Token = "0x1400007A")]
		public event Action<float, float> PlaySpaceOffsetSettingsChanged
		{
			[Token(Token = "0x600287E")]
			[Address(RVA = "0xCE5E84", Offset = "0xCE5E84", VA = "0xCE5E84")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600287F")]
			[Address(RVA = "0xCE5F34", Offset = "0xCE5F34", VA = "0xCE5F34")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002880")]
		[Address(RVA = "0xCE5FE4", Offset = "0xCE5FE4", VA = "0xCE5FE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0xCE60C4", Offset = "0xCE60C4", VA = "0xCE60C4")]
		public void Initialize(GameObject playerRig, GameObject fakeHead, float oldX, float oldZ)
		{
		}

		[Token(Token = "0x6002882")]
		[Address(RVA = "0xCE6140", Offset = "0xCE6140", VA = "0xCE6140")]
		private void RecenterButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002883")]
		[Address(RVA = "0xCE61F4", Offset = "0xCE61F4", VA = "0xCE61F4")]
		private void ResetButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002884")]
		[Address(RVA = "0xCE6258", Offset = "0xCE6258", VA = "0xCE6258")]
		public void CalculateNewCenter(Vector3 rotation)
		{
		}

		[Token(Token = "0x6002885")]
		[Address(RVA = "0xCE62D4", Offset = "0xCE62D4", VA = "0xCE62D4")]
		public PlayspaceOffsetAdjuster()
		{
		}
	}
	[Token(Token = "0x20006EF")]
	public class PlayspaceRotationAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton turnLeftButton;

		[Token(Token = "0x4002D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton turnRightButton;

		[Token(Token = "0x4002D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI degreeText;

		[Token(Token = "0x4002D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject playerRig;

		[Token(Token = "0x4002D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int playspaceRotation;

		[Token(Token = "0x1400007B")]
		public event Action<int, bool> PlaySpaceRotationSettingsChanged
		{
			[Token(Token = "0x6002886")]
			[Address(RVA = "0xCE62DC", Offset = "0xCE62DC", VA = "0xCE62DC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002887")]
			[Address(RVA = "0xCE638C", Offset = "0xCE638C", VA = "0xCE638C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002888")]
		[Address(RVA = "0xCE643C", Offset = "0xCE643C", VA = "0xCE643C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002889")]
		[Address(RVA = "0xCE651C", Offset = "0xCE651C", VA = "0xCE651C")]
		public void Initialize(GameObject playerRig, int playspaceRotation)
		{
		}

		[Token(Token = "0x600288A")]
		[Address(RVA = "0xCE6608", Offset = "0xCE6608", VA = "0xCE6608")]
		private void TurnLeftButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0xCE6724", Offset = "0xCE6724", VA = "0xCE6724")]
		private void TurnRightButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0xCE6840", Offset = "0xCE6840", VA = "0xCE6840")]
		public PlayspaceRotationAdjuster()
		{
		}
	}
	[Token(Token = "0x20006F0")]
	public class ProgressDialog : MonoBehaviour
	{
		[Token(Token = "0x4002D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI title;

		[Token(Token = "0x4002D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4002D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MenuSelectButton cancelButton;

		[Token(Token = "0x4002D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject[] objectsToDeactivate;

		[Token(Token = "0x4002D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action cancelAction;

		[Token(Token = "0x600288D")]
		[Address(RVA = "0xCE6848", Offset = "0xCE6848", VA = "0xCE6848")]
		private void Awake()
		{
		}

		[Token(Token = "0x600288E")]
		[Address(RVA = "0xCE68D4", Offset = "0xCE68D4", VA = "0xCE68D4")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x600288F")]
		[Address(RVA = "0xCE68F8", Offset = "0xCE68F8", VA = "0xCE68F8")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002890")]
		[Address(RVA = "0xCE69A4", Offset = "0xCE69A4", VA = "0xCE69A4")]
		public void OpenDialog(string title, bool showStatus, Action cancelAction)
		{
		}

		[Token(Token = "0x6002891")]
		[Address(RVA = "0xCE6AA8", Offset = "0xCE6AA8", VA = "0xCE6AA8")]
		public void SetStatus(string status)
		{
		}

		[Token(Token = "0x6002892")]
		[Address(RVA = "0xCE6924", Offset = "0xCE6924", VA = "0xCE6924")]
		public void HideDialog()
		{
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0xCE6ACC", Offset = "0xCE6ACC", VA = "0xCE6ACC")]
		public ProgressDialog()
		{
		}
	}
	[Token(Token = "0x20006F1")]
	public class ResetOptionsDialog : MonoBehaviour
	{
		[Token(Token = "0x4002D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton okButton;

		[Token(Token = "0x4002D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MenuSelectButton cancelButton;

		[Token(Token = "0x4002D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x6002894")]
		[Address(RVA = "0xCE6AD4", Offset = "0xCE6AD4", VA = "0xCE6AD4")]
		internal void OpenDialog()
		{
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0xCE6AF8", Offset = "0xCE6AF8", VA = "0xCE6AF8")]
		internal bool IsOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x6002896")]
		[Address(RVA = "0xCE6B18", Offset = "0xCE6B18", VA = "0xCE6B18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002897")]
		[Address(RVA = "0xCE6CFC", Offset = "0xCE6CFC", VA = "0xCE6CFC")]
		private void OkButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002898")]
		[Address(RVA = "0xCE8218", Offset = "0xCE8218", VA = "0xCE8218")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002899")]
		[Address(RVA = "0xCE6D40", Offset = "0xCE6D40", VA = "0xCE6D40")]
		private void PlayClickSound()
		{
		}

		[Token(Token = "0x600289A")]
		[Address(RVA = "0xCE8254", Offset = "0xCE8254", VA = "0xCE8254")]
		private void Buttons_onHover(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600289B")]
		[Address(RVA = "0xCE6D5C", Offset = "0xCE6D5C", VA = "0xCE6D5C")]
		private void ResetPlayerPrefs()
		{
		}

		[Token(Token = "0x600289C")]
		[Address(RVA = "0xCE8270", Offset = "0xCE8270", VA = "0xCE8270")]
		public ResetOptionsDialog()
		{
		}
	}
	[Token(Token = "0x20006F2")]
	public class ResetOptionsUI : MonoBehaviour
	{
		[Token(Token = "0x4002D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MenuSelectButton resetOptionsButton;

		[Token(Token = "0x4002D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ResetOptionsDialog resetOptionsDialog;

		[Token(Token = "0x600289D")]
		[Address(RVA = "0xCE8278", Offset = "0xCE8278", VA = "0xCE8278")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600289E")]
		[Address(RVA = "0xCE8304", Offset = "0xCE8304", VA = "0xCE8304")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600289F")]
		[Address(RVA = "0xCE8390", Offset = "0xCE8390", VA = "0xCE8390")]
		private void ResetOptionsButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028A0")]
		[Address(RVA = "0xCE8394", Offset = "0xCE8394", VA = "0xCE8394")]
		internal void OpenDialog()
		{
		}

		[Token(Token = "0x60028A1")]
		[Address(RVA = "0xCE83F0", Offset = "0xCE83F0", VA = "0xCE83F0")]
		public ResetOptionsUI()
		{
		}
	}
	[Token(Token = "0x20006F3")]
	public class ScrollExample2 : MonoBehaviour
	{
		[Token(Token = "0x4002D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform ScrollContent;

		[Token(Token = "0x4002D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 startVector;

		[Token(Token = "0x4002D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 targetVector;

		[Token(Token = "0x4002D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Controller leftController;

		[Token(Token = "0x4002D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Controller rightController;

		[Token(Token = "0x4002D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool scrolldown;

		[Token(Token = "0x4002D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool scrollup;

		[Token(Token = "0x4002D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float speed;

		[Token(Token = "0x4002D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float timer;

		[Token(Token = "0x4002D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float stopScrollingAfterTime;

		[Token(Token = "0x4002D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 scrollPosition;

		[Token(Token = "0x60028A2")]
		[Address(RVA = "0xCE83F8", Offset = "0xCE83F8", VA = "0xCE83F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028A3")]
		[Address(RVA = "0xCE89E4", Offset = "0xCE89E4", VA = "0xCE89E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60028A4")]
		[Address(RVA = "0xCE8BBC", Offset = "0xCE8BBC", VA = "0xCE8BBC")]
		private void ScrollUp(bool isPressed)
		{
		}

		[Token(Token = "0x60028A5")]
		[Address(RVA = "0xCE8C58", Offset = "0xCE8C58", VA = "0xCE8C58")]
		private void ScrollDown(bool isPressed)
		{
		}

		[Token(Token = "0x60028A6")]
		[Address(RVA = "0xCE8CF4", Offset = "0xCE8CF4", VA = "0xCE8CF4")]
		public ScrollExample2()
		{
		}
	}
	[Token(Token = "0x20006F4")]
	public class ScrollManager : MonoBehaviour
	{
		[Token(Token = "0x4002D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject[] continuousScrollViews;

		[Token(Token = "0x4002D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform laserPointer;

		[Token(Token = "0x4002D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JoyStickScroller currentlyActiveScroller;

		[Token(Token = "0x4002D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<JoyStickScroller> joystickScrollers;

		[Token(Token = "0x4002D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Controller leftController;

		[Token(Token = "0x4002D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Controller rightController;

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0xCE8D94", Offset = "0xCE8D94", VA = "0xCE8D94")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0xCE934C", Offset = "0xCE934C", VA = "0xCE934C")]
		private void SpecificScrollViewHasBeenActivated(JoyStickScroller activeScroller)
		{
		}

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0xCE9504", Offset = "0xCE9504", VA = "0xCE9504")]
		private void ActiveScrollViewHasBeenDeactivated()
		{
		}

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0xCE9378", Offset = "0xCE9378", VA = "0xCE9378")]
		private void DisableAllOtherScrollers(JoyStickScroller activeScroller)
		{
		}

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0xCE9200", Offset = "0xCE9200", VA = "0xCE9200")]
		private void EnableAllScrollers()
		{
		}

		[Token(Token = "0x60028AC")]
		[Address(RVA = "0xCE9524", Offset = "0xCE9524", VA = "0xCE9524")]
		public ScrollManager()
		{
		}
	}
	[Token(Token = "0x20006F5")]
	public class ShaderVariants : MonoBehaviour
	{
		[Token(Token = "0x4002D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ShaderVariantCollection shaderVariants;

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0xCE952C", Offset = "0xCE952C", VA = "0xCE952C")]
		public ShaderVariantCollection ReturnShaderCollection()
		{
			return null;
		}

		[Token(Token = "0x60028AE")]
		[Address(RVA = "0xCE95BC", Offset = "0xCE95BC", VA = "0xCE95BC")]
		public ShaderVariants()
		{
		}
	}
	[Token(Token = "0x20006F6")]
	public class SliderAdjustor : MonoBehaviour
	{
		[Token(Token = "0x4002D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Slider slider;

		[Token(Token = "0x4002D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI text;

		[Token(Token = "0x4002D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton decreaseButton;

		[Token(Token = "0x4002D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MenuSelectButton increaseButton;

		[Token(Token = "0x4002D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float minValue;

		[Token(Token = "0x4002D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float maxValue;

		[Token(Token = "0x4002D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool wholeNumbers;

		[Token(Token = "0x4002D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private int roundTo;

		[Token(Token = "0x4002D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float increaseDecreaseByButton;

		[Token(Token = "0x4002D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private string textPrefix;

		[Token(Token = "0x4002D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string textSuffix;

		[Token(Token = "0x4002D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float currentValue;

		[Token(Token = "0x1400007C")]
		public event Action<float> OnValueChanged
		{
			[Token(Token = "0x60028AF")]
			[Address(RVA = "0xCE95C4", Offset = "0xCE95C4", VA = "0xCE95C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028B0")]
			[Address(RVA = "0xCE9674", Offset = "0xCE9674", VA = "0xCE9674")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0xCE9724", Offset = "0xCE9724", VA = "0xCE9724")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0xCE9924", Offset = "0xCE9924", VA = "0xCE9924")]
		public void SetValue(float value)
		{
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0xCE9940", Offset = "0xCE9940", VA = "0xCE9940")]
		private void UpdateUI()
		{
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0xCE9AD8", Offset = "0xCE9AD8", VA = "0xCE9AD8")]
		internal static string FloatToString(float someFloat, int decimalPolaces)
		{
			return null;
		}

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0xCE9BA4", Offset = "0xCE9BA4", VA = "0xCE9BA4")]
		internal float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0xCE9BAC", Offset = "0xCE9BAC", VA = "0xCE9BAC")]
		public SliderAdjustor()
		{
		}
	}
	[Token(Token = "0x20006F7")]
	internal class SongSettingsDialog : MonoBehaviour
	{
		[Token(Token = "0x4002D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject container;

		[Token(Token = "0x4002D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject waitMessage;

		[Token(Token = "0x4002D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject content;

		[Token(Token = "0x4002D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject detectionSettings;

		[Token(Token = "0x4002D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GeneratorSwitch generatorSettings;

		[Token(Token = "0x4002D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MenuSelectButton cancelButton;

		[Token(Token = "0x4002D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MenuSelectButton playButton;

		[Token(Token = "0x4002D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MenuSelectButton addButton;

		[Token(Token = "0x4002D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MenuToggleArea playAfterGenerateToggle;

		[Token(Token = "0x4002D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject generatorOnlyHeading;

		[Token(Token = "0x4002D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private InfoDialog infoDialog;

		[Token(Token = "0x4002D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MenuToggleArea toggle;

		[Token(Token = "0x4002D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool playAfterGenerate;

		[Token(Token = "0x4002D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Action<bool, bool> callback;

		[Token(Token = "0x60028BA")]
		[Address(RVA = "0xCE9C4C", Offset = "0xCE9C4C", VA = "0xCE9C4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0xCE9EAC", Offset = "0xCE9EAC", VA = "0xCE9EAC")]
		private void PlayAfterGenerateToggle_onSelect(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0xCE9EBC", Offset = "0xCE9EBC", VA = "0xCE9EBC")]
		private void CancelButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0xCE9F04", Offset = "0xCE9F04", VA = "0xCE9F04")]
		private void PlayButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028BE")]
		[Address(RVA = "0xCEA09C", Offset = "0xCEA09C", VA = "0xCEA09C")]
		private void addButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028BF")]
		[Address(RVA = "0xCEA0E4", Offset = "0xCEA0E4", VA = "0xCEA0E4")]
		public void OpenDialog(bool showWaitingMessage, bool showDetectionSettings, bool startWithDetectionSettings, string confirmText, bool confirmIsPlay, Action<bool, bool> callback)
		{
		}

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0xCEA348", Offset = "0xCEA348", VA = "0xCEA348")]
		internal bool IsOpen()
		{
			return default(bool);
		}

		[Token(Token = "0x60028C1")]
		[Address(RVA = "0xCEA368", Offset = "0xCEA368", VA = "0xCEA368")]
		public void CloseWaitingMessage()
		{
		}

		[Token(Token = "0x60028C2")]
		[Address(RVA = "0xCEA3A0", Offset = "0xCEA3A0", VA = "0xCEA3A0")]
		private void AdjustPanels(bool detectionIsVisible)
		{
		}

		[Token(Token = "0x60028C3")]
		[Address(RVA = "0xCEA3F4", Offset = "0xCEA3F4", VA = "0xCEA3F4")]
		public SongSettingsDialog()
		{
		}
	}
	[Token(Token = "0x20006F9")]
	public class StartButton : MonoBehaviour
	{
		[Token(Token = "0x4002D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject startButtonGlow;

		[Token(Token = "0x4002D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject startButtonActiveText;

		[Token(Token = "0x4002D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject startButtonInActiveText;

		[Token(Token = "0x4002D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ParticleSystem startButtonPressEffect;

		[Token(Token = "0x4002D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MenuSelectButton button;

		[Token(Token = "0x1400007D")]
		public event Action ButtonPressed
		{
			[Token(Token = "0x60028C8")]
			[Address(RVA = "0xCEA48C", Offset = "0xCEA48C", VA = "0xCEA48C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028C9")]
			[Address(RVA = "0xCEA528", Offset = "0xCEA528", VA = "0xCEA528")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60028CA")]
		[Address(RVA = "0xCEA5C4", Offset = "0xCEA5C4", VA = "0xCEA5C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028CB")]
		[Address(RVA = "0xCEA68C", Offset = "0xCEA68C", VA = "0xCEA68C")]
		private void Button_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028CC")]
		[Address(RVA = "0xCEA6A8", Offset = "0xCEA6A8", VA = "0xCEA6A8")]
		public void SetButtonActive(bool isActive)
		{
		}

		[Token(Token = "0x60028CD")]
		[Address(RVA = "0xCEA71C", Offset = "0xCEA71C", VA = "0xCEA71C")]
		public void PlayPressEffect()
		{
		}

		[Token(Token = "0x60028CE")]
		[Address(RVA = "0xCEA738", Offset = "0xCEA738", VA = "0xCEA738")]
		public StartButton()
		{
		}
	}
	[Token(Token = "0x20006FA")]
	public class StringEditDialog : MonoBehaviour
	{
		[Token(Token = "0x4002D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI titleText;

		[Token(Token = "0x4002D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI contentText;

		[Token(Token = "0x4002D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MenuSelectButton okButton;

		[Token(Token = "0x4002D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MenuSelectButton cancelButton;

		[Token(Token = "0x4002D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private KeyboardKey.KeyStatus shiftStatus;

		[Token(Token = "0x4002D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<KeyboardKey> allKeys;

		[Token(Token = "0x4002D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isEmpty;

		[Token(Token = "0x4002D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string initialText;

		[Token(Token = "0x4002D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action<bool, string> callback;

		[Token(Token = "0x4002D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isCreateNew;

		[Token(Token = "0x60028CF")]
		[Address(RVA = "0xCEA740", Offset = "0xCEA740", VA = "0xCEA740")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028D0")]
		[Address(RVA = "0xCEA9FC", Offset = "0xCEA9FC", VA = "0xCEA9FC")]
		public void HideInitially()
		{
		}

		[Token(Token = "0x60028D1")]
		[Address(RVA = "0xCEAA20", Offset = "0xCEAA20", VA = "0xCEAA20")]
		internal void OpenDialog(string title, string content, bool isCreateNew, Action<bool, string> callback)
		{
		}

		[Token(Token = "0x60028D2")]
		[Address(RVA = "0xCEABD8", Offset = "0xCEABD8", VA = "0xCEABD8")]
		private void CancelButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028D3")]
		[Address(RVA = "0xCEAC54", Offset = "0xCEAC54", VA = "0xCEAC54")]
		private void OKButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028D4")]
		[Address(RVA = "0xCEACAC", Offset = "0xCEACAC", VA = "0xCEACAC")]
		private string GetTextWithoutCursor()
		{
			return null;
		}

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0xCEAD2C", Offset = "0xCEAD2C", VA = "0xCEAD2C")]
		private void KeyButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x60028D6")]
		[Address(RVA = "0xCEAAF8", Offset = "0xCEAAF8", VA = "0xCEAAF8")]
		private void EnsureCursor()
		{
		}

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0xCEA9CC", Offset = "0xCEA9CC", VA = "0xCEA9CC")]
		private void SetEmpty(bool isEmpty)
		{
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0xCEAF6C", Offset = "0xCEAF6C", VA = "0xCEAF6C")]
		private void UpdateShiftStatus()
		{
		}

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0xCEB0BC", Offset = "0xCEB0BC", VA = "0xCEB0BC")]
		public StringEditDialog()
		{
		}
	}
	[Token(Token = "0x20006FB")]
	public class Controller : MonoBehaviour
	{
		[Token(Token = "0x20006FC")]
		public delegate void UseButtonChanged(Controller sender, bool isPressed);

		[Token(Token = "0x20006FD")]
		public delegate void TeleportButtonChanged(bool isPressed);

		[Token(Token = "0x20006FE")]
		public delegate void AppButtonChanged(bool isPressed);

		[Token(Token = "0x20006FF")]
		public delegate void TakeInteractButtonChanged(Controller sender, bool isPressed);

		[Token(Token = "0x2000700")]
		public delegate void JoystickUpPressed(bool isPressed);

		[Token(Token = "0x2000701")]
		public delegate void JoystickDownPressed(bool isPressed);

		[Token(Token = "0x2000702")]
		public delegate void JoystickLeftPressed(Controller sender);

		[Token(Token = "0x2000703")]
		public delegate void JoystickRightPressed(Controller sender);

		[Token(Token = "0x4002D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public LLManager.HandSide handSide;

		[Token(Token = "0x4002D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject handParent;

		[Token(Token = "0x4002D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject handHandle;

		[Token(Token = "0x4002D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Rig rig;

		[Token(Token = "0x4002D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LLController controllerHardwareInterface;

		[Token(Token = "0x4002D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly float SPHERE_HIT_THRESHOLD_VELOCITY_SQUARED;

		[Token(Token = "0x4002D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Position cPos;

		[Token(Token = "0x1400007E")]
		public event UseButtonChanged useButtonChanged
		{
			[Token(Token = "0x60028DA")]
			[Address(RVA = "0xCEB0CC", Offset = "0xCEB0CC", VA = "0xCEB0CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028DB")]
			[Address(RVA = "0xCEB168", Offset = "0xCEB168", VA = "0xCEB168")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400007F")]
		public event TeleportButtonChanged teleportButtonChanged
		{
			[Token(Token = "0x60028DC")]
			[Address(RVA = "0xCEB204", Offset = "0xCEB204", VA = "0xCEB204")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028DD")]
			[Address(RVA = "0xCEB2A0", Offset = "0xCEB2A0", VA = "0xCEB2A0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000080")]
		public event AppButtonChanged appButtonChanged
		{
			[Token(Token = "0x60028DE")]
			[Address(RVA = "0xCEB33C", Offset = "0xCEB33C", VA = "0xCEB33C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028DF")]
			[Address(RVA = "0xCEB3D8", Offset = "0xCEB3D8", VA = "0xCEB3D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000081")]
		public event TakeInteractButtonChanged takeInteractButtonChanged
		{
			[Token(Token = "0x60028E0")]
			[Address(RVA = "0xCEB474", Offset = "0xCEB474", VA = "0xCEB474")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028E1")]
			[Address(RVA = "0xCEB510", Offset = "0xCEB510", VA = "0xCEB510")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000082")]
		public event JoystickUpPressed joystickUpPressed
		{
			[Token(Token = "0x60028E2")]
			[Address(RVA = "0xCE87D8", Offset = "0xCE87D8", VA = "0xCE87D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028E3")]
			[Address(RVA = "0xCEB5AC", Offset = "0xCEB5AC", VA = "0xCEB5AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000083")]
		public event JoystickDownPressed joystickDownPressed
		{
			[Token(Token = "0x60028E4")]
			[Address(RVA = "0xCE8948", Offset = "0xCE8948", VA = "0xCE8948")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028E5")]
			[Address(RVA = "0xCEB648", Offset = "0xCEB648", VA = "0xCEB648")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000084")]
		public event JoystickLeftPressed joystickLeftPressed
		{
			[Token(Token = "0x60028E6")]
			[Address(RVA = "0xCEB6E4", Offset = "0xCEB6E4", VA = "0xCEB6E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028E7")]
			[Address(RVA = "0xCEB780", Offset = "0xCEB780", VA = "0xCEB780")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000085")]
		public event JoystickRightPressed joystickRightPressed
		{
			[Token(Token = "0x60028E8")]
			[Address(RVA = "0xCEB81C", Offset = "0xCEB81C", VA = "0xCEB81C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028E9")]
			[Address(RVA = "0xCEB8B8", Offset = "0xCEB8B8", VA = "0xCEB8B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60028EA")]
		[Address(RVA = "0xCEB954", Offset = "0xCEB954", VA = "0xCEB954")]
		private void Start()
		{
		}

		[Token(Token = "0x60028EB")]
		[Address(RVA = "0xCEBE0C", Offset = "0xCEBE0C", VA = "0xCEBE0C")]
		private void TakeInteractButtonUnpressed(LLController sender)
		{
		}

		[Token(Token = "0x60028EC")]
		[Address(RVA = "0xCEBE30", Offset = "0xCEBE30", VA = "0xCEBE30")]
		private void TakeInteractButtonPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028ED")]
		[Address(RVA = "0xCEBE54", Offset = "0xCEBE54", VA = "0xCEBE54")]
		private void JoystickRightDownPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028EE")]
		[Address(RVA = "0xCEBE74", Offset = "0xCEBE74", VA = "0xCEBE74")]
		private void JoystickLeftDownPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028EF")]
		[Address(RVA = "0xCEBE94", Offset = "0xCEBE94", VA = "0xCEBE94")]
		private void JoystickDownDownPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0xCEBEB4", Offset = "0xCEBEB4", VA = "0xCEBEB4")]
		private void JoystickDownUpPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0xCEBED4", Offset = "0xCEBED4", VA = "0xCEBED4")]
		private void JoystickUpDownPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0xCEBEF4", Offset = "0xCEBEF4", VA = "0xCEBEF4")]
		private void JoystickUpUpPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F3")]
		[Address(RVA = "0xCEBF14", Offset = "0xCEBF14", VA = "0xCEBF14")]
		private void AppMenuPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F4")]
		[Address(RVA = "0xCEBF34", Offset = "0xCEBF34", VA = "0xCEBF34")]
		private void AppMenuUnpressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0xCEBF54", Offset = "0xCEBF54", VA = "0xCEBF54")]
		private void TeleportButtonUnpressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0xCEBF74", Offset = "0xCEBF74", VA = "0xCEBF74")]
		private void TeleportButtonPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0xCEBF94", Offset = "0xCEBF94", VA = "0xCEBF94")]
		private void UseButtonUnpressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0xCEBFB8", Offset = "0xCEBFB8", VA = "0xCEBFB8")]
		private void UseButtonPressed(LLController sender)
		{
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0xCEBFDC", Offset = "0xCEBFDC", VA = "0xCEBFDC")]
		internal void DoHapticPulse(LLController.PulseType pulseType)
		{
		}

		[Token(Token = "0x60028FA")]
		[Address(RVA = "0xCEBFFC", Offset = "0xCEBFFC", VA = "0xCEBFFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0xCEC3D4", Offset = "0xCEC3D4", VA = "0xCEC3D4", Slot = "4")]
		[BeforeRenderOrder(-30000)]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x60028FC")]
		[Address(RVA = "0xCEC478", Offset = "0xCEC478", VA = "0xCEC478")]
		public void Update()
		{
		}

		[Token(Token = "0x60028FD")]
		[Address(RVA = "0xCEC3D8", Offset = "0xCEC3D8", VA = "0xCEC3D8")]
		private void SetControllerPosition()
		{
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0xCEC4BC", Offset = "0xCEC4BC", VA = "0xCEC4BC")]
		internal GameObject GetHandHandle()
		{
			return null;
		}

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0xCEC4C4", Offset = "0xCEC4C4", VA = "0xCEC4C4")]
		internal GameObject GetHandParent()
		{
			return null;
		}

		[Token(Token = "0x6002900")]
		[Address(RVA = "0xCEC4CC", Offset = "0xCEC4CC", VA = "0xCEC4CC")]
		internal LLController GetHardwareInterface()
		{
			return null;
		}

		[Token(Token = "0x6002901")]
		[Address(RVA = "0xCEC4D4", Offset = "0xCEC4D4", VA = "0xCEC4D4")]
		public Controller()
		{
		}
	}
	[Token(Token = "0x2000704")]
	public enum HandState
	{
		[Token(Token = "0x4002D86")]
		Idle = 0,
		[Token(Token = "0x4002D87")]
		ThumbsUp = 1,
		[Token(Token = "0x4002D88")]
		Point = 2,
		[Token(Token = "0x4002D89")]
		GrabRoundS = 10,
		[Token(Token = "0x4002D8A")]
		GrabRoundM = 11,
		[Token(Token = "0x4002D8B")]
		GrabRoundL = 12,
		[Token(Token = "0x4002D8C")]
		GrabRoundXL = 13,
		[Token(Token = "0x4002D8D")]
		GrabRoundXXL = 14,
		[Token(Token = "0x4002D8E")]
		GrabRectS = 20,
		[Token(Token = "0x4002D8F")]
		GrabRectM = 21,
		[Token(Token = "0x4002D90")]
		GrabRectL = 22,
		[Token(Token = "0x4002D91")]
		TweezeS = 30,
		[Token(Token = "0x4002D92")]
		TweezeM = 31,
		[Token(Token = "0x4002D93")]
		TweezeL = 32,
		[Token(Token = "0x4002D94")]
		TweezeXS = 33,
		[Token(Token = "0x4002D95")]
		TweezeSM = 34,
		[Token(Token = "0x4002D96")]
		GrabFlatS = 40,
		[Token(Token = "0x4002D97")]
		GrabFlatM = 41,
		[Token(Token = "0x4002D98")]
		GrabFlatL = 42,
		[Token(Token = "0x4002D99")]
		GrabFlatXL = 43,
		[Token(Token = "0x4002D9A")]
		GrabKey = 50,
		[Token(Token = "0x4002D9B")]
		GrabBroomOver = 51,
		[Token(Token = "0x4002D9C")]
		GrabFireExt = 52,
		[Token(Token = "0x4002D9D")]
		TriggerFireExt = 53,
		[Token(Token = "0x4002D9E")]
		DrillHold = 54,
		[Token(Token = "0x4002D9F")]
		DrillTrigger = 55,
		[Token(Token = "0x4002DA0")]
		GrabClothesHanger = 60,
		[Token(Token = "0x4002DA1")]
		GrabPowderBrush = 61,
		[Token(Token = "0x4002DA2")]
		TurnDial = 62,
		[Token(Token = "0x4002DA3")]
		GrabCutterNormal = 63,
		[Token(Token = "0x4002DA4")]
		GrabCutterBig = 64,
		[Token(Token = "0x4002DA5")]
		GrabParachuteHandle = 65,
		[Token(Token = "0x4002DA6")]
		GrabSpray = 66,
		[Token(Token = "0x4002DA7")]
		DontChangeState = 255
	}
	[Token(Token = "0x2000705")]
	public class Head : MonoBehaviour
	{
		[Token(Token = "0x6002912")]
		[Address(RVA = "0xCECC34", Offset = "0xCECC34", VA = "0xCECC34")]
		public Head()
		{
		}
	}
	[Token(Token = "0x2000706")]
	public class PicoControllerVisual : MonoBehaviour
	{
		[Token(Token = "0x4002DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject neo2;

		[Token(Token = "0x4002DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject neo3;

		[Token(Token = "0x6002913")]
		[Address(RVA = "0xCECC3C", Offset = "0xCECC3C", VA = "0xCECC3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002914")]
		[Address(RVA = "0xCECC74", Offset = "0xCECC74", VA = "0xCECC74")]
		public PicoControllerVisual()
		{
		}
	}
	[Token(Token = "0x2000707")]
	public class Rig : MonoBehaviour
	{
		[Token(Token = "0x4002DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LLHeadset hwRig;

		[Token(Token = "0x4002DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera eyeCamera;

		[Token(Token = "0x4002DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject moveable;

		[Token(Token = "0x6002915")]
		[Address(RVA = "0xCECC7C", Offset = "0xCECC7C", VA = "0xCECC7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002916")]
		[Address(RVA = "0xCECCE0", Offset = "0xCECCE0", VA = "0xCECCE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002917")]
		[Address(RVA = "0xCECD14", Offset = "0xCECD14", VA = "0xCECD14")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6002918")]
		[Address(RVA = "0xCECD38", Offset = "0xCECD38", VA = "0xCECD38")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6002919")]
		[Address(RVA = "0xCECD5C", Offset = "0xCECD5C", VA = "0xCECD5C")]
		public Rig()
		{
		}
	}
	[Token(Token = "0x2000708")]
	public class VRMiddlewareControllerVisual : MonoBehaviour
	{
		[Token(Token = "0x4002DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LLManager.HandSide side;

		[Token(Token = "0x4002DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LLHeadset.VRMiddlewareType type;

		[Token(Token = "0x600291A")]
		[Address(RVA = "0xCECD64", Offset = "0xCECD64", VA = "0xCECD64")]
		internal GameObject GetVisualRepresentation()
		{
			return null;
		}

		[Token(Token = "0x600291B")]
		[Address(RVA = "0xCECDEC", Offset = "0xCECDEC", VA = "0xCECDEC")]
		public VRMiddlewareControllerVisual()
		{
		}
	}
	[Token(Token = "0x2000709")]
	public class MobilePCShaderSwitcher : AbstractPCMobileSwitcher
	{
		[Token(Token = "0x4002DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Shader mobileDiffuseBumpedShader;

		[Token(Token = "0x4002DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Renderer> objectsForMobileDiffuseBumped;

		[Token(Token = "0x4002DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Shader standardShader;

		[Token(Token = "0x600291C")]
		[Address(RVA = "0xCECDF4", Offset = "0xCECDF4", VA = "0xCECDF4", Slot = "4")]
		public override void SwitchToPC()
		{
		}

		[Token(Token = "0x600291D")]
		[Address(RVA = "0xCECFA8", Offset = "0xCECFA8", VA = "0xCECFA8", Slot = "5")]
		public override void SwitchToMobile()
		{
		}

		[Token(Token = "0x600291E")]
		[Address(RVA = "0xCED15C", Offset = "0xCED15C", VA = "0xCED15C")]
		public MobilePCShaderSwitcher()
		{
		}
	}
	[Token(Token = "0x200070A")]
	public class MobilePCShadowSwitcher : AbstractPCMobileSwitcher
	{
		[Token(Token = "0x4002DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<Renderer> shadowsToDisableOnQuest;

		[Token(Token = "0x4002DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<Renderer> shadowsToDisableButKeepReceivingOnQuest;

		[Token(Token = "0x4002DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Renderer> twoSidedShadowsToDisableOnQuest;

		[Token(Token = "0x600291F")]
		[Address(RVA = "0xCED164", Offset = "0xCED164", VA = "0xCED164", Slot = "4")]
		public override void SwitchToPC()
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0xCED518", Offset = "0xCED518", VA = "0xCED518", Slot = "5")]
		public override void SwitchToMobile()
		{
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0xCED8CC", Offset = "0xCED8CC", VA = "0xCED8CC")]
		public MobilePCShadowSwitcher()
		{
		}
	}
	[Token(Token = "0x200070B")]
	public class QuestShadowDistanceChanger : MonoBehaviour
	{
		[Token(Token = "0x4002DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sceneSpecificShadowDistance;

		[Token(Token = "0x4002DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float defaultShadowDistance;

		[Token(Token = "0x4002DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isQuest;

		[Token(Token = "0x6002922")]
		[Address(RVA = "0xCED8D4", Offset = "0xCED8D4", VA = "0xCED8D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0xCED954", Offset = "0xCED954", VA = "0xCED954")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0xCED9C4", Offset = "0xCED9C4", VA = "0xCED9C4")]
		public QuestShadowDistanceChanger()
		{
		}
	}
	[Token(Token = "0x200070C")]
	public class QuestShadowMaskSwitcherOnStart : MonoBehaviour
	{
		[Token(Token = "0x4002DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShadowmaskMode shadowmaskMode;

		[Token(Token = "0x4002DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private ShadowmaskMode modeBeforeSwitching;

		[Token(Token = "0x6002925")]
		[Address(RVA = "0xCED9D4", Offset = "0xCED9D4", VA = "0xCED9D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002926")]
		[Address(RVA = "0xCEDA54", Offset = "0xCEDA54", VA = "0xCEDA54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002927")]
		[Address(RVA = "0xCEDAC4", Offset = "0xCEDAC4", VA = "0xCEDAC4")]
		public QuestShadowMaskSwitcherOnStart()
		{
		}
	}
	[Token(Token = "0x200070D")]
	public class QuestSpecificObjects : MonoBehaviour
	{
		[Token(Token = "0x4002DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> objectsToDisableOnQuest;

		[Token(Token = "0x4002DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> objectsToEnableOnQuest;

		[Token(Token = "0x6002928")]
		[Address(RVA = "0xCEDACC", Offset = "0xCEDACC", VA = "0xCEDACC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002929")]
		[Address(RVA = "0xCEDD40", Offset = "0xCEDD40", VA = "0xCEDD40")]
		public QuestSpecificObjects()
		{
		}
	}
	[Token(Token = "0x200070E")]
	public class QuestVersionSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4002DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> objectsToEnableOnlyOnQuest2;

		[Token(Token = "0x600292A")]
		[Address(RVA = "0xCEDD48", Offset = "0xCEDD48", VA = "0xCEDD48")]
		private void Start()
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0xCEE084", Offset = "0xCEE084", VA = "0xCEE084")]
		public QuestVersionSwitcher()
		{
		}
	}
	[Token(Token = "0x200070F")]
	public class RenderQueueUpdate : MonoBehaviour
	{
		[Token(Token = "0x4002DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Material> layer1;

		[Token(Token = "0x4002DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Material> layer2;

		[Token(Token = "0x4002DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Material> layer3;

		[Token(Token = "0x4002DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Material> layer4;

		[Token(Token = "0x4002DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Material> layer5;

		[Token(Token = "0x4002DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Material> layer6;

		[Token(Token = "0x4002DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Material> layer7;

		[Token(Token = "0x4002DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Material> layer8;

		[Token(Token = "0x4002DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Material> layer9;

		[Token(Token = "0x4002DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Material> layer10;

		[Token(Token = "0x600292C")]
		[Address(RVA = "0xCEE08C", Offset = "0xCEE08C", VA = "0xCEE08C")]
		private void Start()
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0xCEEFB8", Offset = "0xCEEFB8", VA = "0xCEEFB8")]
		public RenderQueueUpdate()
		{
		}
	}
	[Token(Token = "0x2000710")]
	public class SetColorSpace : MonoBehaviour
	{
		[Token(Token = "0x4002DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LLHeadset.PBVRColorSpace colorSpace;

		[Token(Token = "0x600292E")]
		[Address(RVA = "0xCEF1B0", Offset = "0xCEF1B0", VA = "0xCEF1B0")]
		private void Start()
		{
		}

		[Token(Token = "0x600292F")]
		[Address(RVA = "0xCEF220", Offset = "0xCEF220", VA = "0xCEF220")]
		public SetColorSpace()
		{
		}
	}
	[Token(Token = "0x2000711")]
	public class RotatingCameraAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CameraRotator cameraRotator;

		[Token(Token = "0x4002DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float positionStepSize;

		[Token(Token = "0x4002DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float rotationStepSize;

		[Token(Token = "0x4002DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float adjustSpeed;

		[Token(Token = "0x4002DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4002DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x6002930")]
		[Address(RVA = "0xCEF230", Offset = "0xCEF230", VA = "0xCEF230")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0xCEF280", Offset = "0xCEF280", VA = "0xCEF280")]
		private void Update()
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0xCEF6B8", Offset = "0xCEF6B8", VA = "0xCEF6B8")]
		private void DecreaseDistance()
		{
		}

		[Token(Token = "0x6002933")]
		[Address(RVA = "0xCEFA10", Offset = "0xCEFA10", VA = "0xCEFA10")]
		private void IncreaseDistance()
		{
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0xCEFD68", Offset = "0xCEFD68", VA = "0xCEFD68")]
		private void IncreaseHeight()
		{
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0xCF00C4", Offset = "0xCF00C4", VA = "0xCF00C4")]
		private void DecreaseHeight()
		{
		}

		[Token(Token = "0x6002936")]
		[Address(RVA = "0xCF0858", Offset = "0xCF0858", VA = "0xCF0858")]
		private void RotateUp()
		{
		}

		[Token(Token = "0x6002937")]
		[Address(RVA = "0xCF0420", Offset = "0xCF0420", VA = "0xCF0420")]
		private void RotateDown()
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0xCF0C90", Offset = "0xCF0C90", VA = "0xCF0C90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0xCF0CB0", Offset = "0xCF0CB0", VA = "0xCF0CB0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600293A")]
		[Address(RVA = "0xCEF5E8", Offset = "0xCEF5E8", VA = "0xCEF5E8")]
		private void Reset()
		{
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0xCF0CCC", Offset = "0xCF0CCC", VA = "0xCF0CCC")]
		public RotatingCameraAdjuster()
		{
		}
	}
	[Token(Token = "0x2000712")]
	public class ShortGlowOnContact : MonoBehaviour
	{
		[Token(Token = "0x4002DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Renderer objectRenderer;

		[Token(Token = "0x4002DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material objectSharedMaterial;

		[Token(Token = "0x4002DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color originalColor;

		[Token(Token = "0x4002DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color highlightColor;

		[Token(Token = "0x4002DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool leftHandedContact;

		[Token(Token = "0x4002DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool rightHandedContact;

		[Token(Token = "0x600293C")]
		[Address(RVA = "0xCF0CE8", Offset = "0xCF0CE8", VA = "0xCF0CE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0xCF0D5C", Offset = "0xCF0D5C", VA = "0xCF0D5C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600293E")]
		[Address(RVA = "0xCF0E1C", Offset = "0xCF0E1C", VA = "0xCF0E1C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600293F")]
		[Address(RVA = "0xCF0EE0", Offset = "0xCF0EE0", VA = "0xCF0EE0")]
		public ShortGlowOnContact()
		{
		}
	}
	[Token(Token = "0x2000713")]
	public class SkyboxLoader
	{
		[Token(Token = "0x4002DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material material;

		[Token(Token = "0x4002DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isFinished;

		[Token(Token = "0x4002DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isError;

		[Token(Token = "0x4002DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string errorMessage;

		[Token(Token = "0x4002DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Cubemap previousLoadedCubemap;

		[Token(Token = "0x4002DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Texture2D previousTexture;

		[Token(Token = "0x6002940")]
		[Address(RVA = "0xCF0EE8", Offset = "0xCF0EE8", VA = "0xCF0EE8")]
		public IEnumerator LoadCubemapCoroutine(string filename, Shader cubemapShader, Shader panoramicShader)
		{
			return null;
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0xCF0FD0", Offset = "0xCF0FD0", VA = "0xCF0FD0")]
		public bool IsError()
		{
			return default(bool);
		}

		[Token(Token = "0x6002942")]
		[Address(RVA = "0xCF0FD8", Offset = "0xCF0FD8", VA = "0xCF0FD8")]
		public Material GetMaterial()
		{
			return null;
		}

		[Token(Token = "0x6002943")]
		[Address(RVA = "0xCF0FE0", Offset = "0xCF0FE0", VA = "0xCF0FE0")]
		private void LoadCubemapIntoSkybox(Texture2D textureFromUWR, Shader cubemapShader, Shader panoramicShader)
		{
		}

		[Token(Token = "0x6002944")]
		[Address(RVA = "0xCF18FC", Offset = "0xCF18FC", VA = "0xCF18FC")]
		internal string GetErrorMessage()
		{
			return null;
		}

		[Token(Token = "0x6002945")]
		[Address(RVA = "0xCF17AC", Offset = "0xCF17AC", VA = "0xCF17AC")]
		private Color[] reverse(Color[] input, int size)
		{
			return null;
		}

		[Token(Token = "0x6002946")]
		[Address(RVA = "0xCF1904", Offset = "0xCF1904", VA = "0xCF1904")]
		public static bool IsInternal(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6002947")]
		[Address(RVA = "0xCF1958", Offset = "0xCF1958", VA = "0xCF1958")]
		public static string GetFileNameWithExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x6002948")]
		[Address(RVA = "0xCF1A08", Offset = "0xCF1A08", VA = "0xCF1A08")]
		public static string GetFileNameWithoutExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x6002949")]
		[Address(RVA = "0xCF1A70", Offset = "0xCF1A70", VA = "0xCF1A70")]
		public SkyboxLoader()
		{
		}
	}
	[Token(Token = "0x2000715")]
	public class EditorController : MonoBehaviour
	{
		[Token(Token = "0x4002DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public LLManager.HandSide handSide;

		[Token(Token = "0x4002DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject normalHand;

		[Token(Token = "0x4002DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform tip;

		[Token(Token = "0x4002DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isGrabbing;

		[Token(Token = "0x4002DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private HandState currentHandState;

		[Token(Token = "0x4002DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject touchedObject;

		[Token(Token = "0x4002DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject grabbedObject;

		[Token(Token = "0x4002DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject attachedObject;

		[Token(Token = "0x4002DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 attachedObjectOffset;

		[Token(Token = "0x4002DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 attachedObjectRotationOffEuler;

		[Token(Token = "0x4002DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion attachedObjectRotationOffset;

		[Token(Token = "0x4002DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Controller controller;

		[Token(Token = "0x4002DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform previousParent;

		[Token(Token = "0x6002951")]
		[Address(RVA = "0xCF22C4", Offset = "0xCF22C4", VA = "0xCF22C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002952")]
		[Address(RVA = "0xCF239C", Offset = "0xCF239C", VA = "0xCF239C")]
		internal Controller Attach()
		{
			return null;
		}

		[Token(Token = "0x6002953")]
		[Address(RVA = "0xCF2644", Offset = "0xCF2644", VA = "0xCF2644")]
		internal void Detach()
		{
		}

		[Token(Token = "0x6002954")]
		[Address(RVA = "0xCF2734", Offset = "0xCF2734", VA = "0xCF2734")]
		private void Controller_triggerButtonChanged(Controller controller, bool isPressed)
		{
		}

		[Token(Token = "0x6002955")]
		[Address(RVA = "0xCF25A8", Offset = "0xCF25A8", VA = "0xCF25A8")]
		public void SetHandState(HandState state)
		{
		}

		[Token(Token = "0x6002956")]
		[Address(RVA = "0xCF27F4", Offset = "0xCF27F4", VA = "0xCF27F4")]
		public void ResetHandState(HandState state)
		{
		}

		[Token(Token = "0x6002957")]
		[Address(RVA = "0xCF2740", Offset = "0xCF2740", VA = "0xCF2740")]
		private void ConditionalSetHandState(GameObject hand, HandState state)
		{
		}

		[Token(Token = "0x6002958")]
		[Address(RVA = "0xCF2890", Offset = "0xCF2890", VA = "0xCF2890")]
		public GameObject GetTouchedObject()
		{
			return null;
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0xCF2898", Offset = "0xCF2898", VA = "0xCF2898")]
		public GameObject GetTouchedMovableObject()
		{
			return null;
		}

		[Token(Token = "0x600295A")]
		[Address(RVA = "0xCF2940", Offset = "0xCF2940", VA = "0xCF2940")]
		public void InjectGameObject(GameObject gameObject)
		{
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0xCF2948", Offset = "0xCF2948", VA = "0xCF2948")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0xCF2A84", Offset = "0xCF2A84", VA = "0xCF2A84")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600295D")]
		[Address(RVA = "0xCF2C0C", Offset = "0xCF2C0C", VA = "0xCF2C0C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600295E")]
		[Address(RVA = "0xCF2C18", Offset = "0xCF2C18", VA = "0xCF2C18")]
		public Controller GetActualController()
		{
			return null;
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0xCF2C20", Offset = "0xCF2C20", VA = "0xCF2C20")]
		public Transform GetControllerTip()
		{
			return null;
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0xCF2C28", Offset = "0xCF2C28", VA = "0xCF2C28")]
		public void SetGrabbedObject(GameObject grabbedObject)
		{
		}

		[Token(Token = "0x6002961")]
		[Address(RVA = "0xCF2C30", Offset = "0xCF2C30", VA = "0xCF2C30")]
		public GameObject GetGrabbedObject()
		{
			return null;
		}

		[Token(Token = "0x6002962")]
		[Address(RVA = "0xCF2C38", Offset = "0xCF2C38", VA = "0xCF2C38")]
		public bool IsOccupied()
		{
			return default(bool);
		}

		[Token(Token = "0x6002963")]
		[Address(RVA = "0xCF2C98", Offset = "0xCF2C98", VA = "0xCF2C98")]
		public bool IsTriggerButtonDownThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6002964")]
		[Address(RVA = "0xCF2CA0", Offset = "0xCF2CA0", VA = "0xCF2CA0")]
		public Vector3 GetSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002965")]
		[Address(RVA = "0xCF2CE4", Offset = "0xCF2CE4", VA = "0xCF2CE4")]
		public EditorController()
		{
		}
	}
	[Token(Token = "0x2000716")]
	public class EditorPalette : MonoBehaviour, IPointerOriginProvider
	{
		[Token(Token = "0x2000717")]
		private enum MenuPos
		{
			[Token(Token = "0x4002E52")]
			Left,
			[Token(Token = "0x4002E53")]
			Center,
			[Token(Token = "0x4002E54")]
			Right
		}

		[Token(Token = "0x2000718")]
		private enum UseController
		{
			[Token(Token = "0x4002E56")]
			None,
			[Token(Token = "0x4002E57")]
			Left,
			[Token(Token = "0x4002E58")]
			Right
		}

		[Token(Token = "0x2000719")]
		private class BooleanToggle
		{
			[Token(Token = "0x4002E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MenuToggleArea toggleArea;

			[Token(Token = "0x4002E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool currentValue;

			[Token(Token = "0x60029AE")]
			[Address(RVA = "0xCF8DE0", Offset = "0xCF8DE0", VA = "0xCF8DE0")]
			public BooleanToggle(MenuToggleArea toggleArea, bool isChecked)
			{
			}

			[Token(Token = "0x60029AF")]
			[Address(RVA = "0xCF8E44", Offset = "0xCF8E44", VA = "0xCF8E44")]
			public void SetValue(bool isChecked)
			{
			}

			[Token(Token = "0x60029B0")]
			[Address(RVA = "0xCF8E7C", Offset = "0xCF8E7C", VA = "0xCF8E7C")]
			internal void SetRawValue(int value)
			{
			}

			[Token(Token = "0x60029B1")]
			[Address(RVA = "0xCF8E94", Offset = "0xCF8E94", VA = "0xCF8E94")]
			public bool GetValue()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200071A")]
		public delegate void OnButtonDown(MenuSelectButton.Action button, Controller controller);

		[Token(Token = "0x200071B")]
		public delegate void OnBooleanChanged(MenuToggleArea.Selection selection, bool newValue);

		[Token(Token = "0x200071C")]
		public delegate void OnBeatStepChanged(SongEditor.BeatCountMode newMode);

		[Token(Token = "0x200071D")]
		public delegate void OnBPMOrOffsetChanged(float bpm, float newOffset);

		[Token(Token = "0x200071E")]
		public delegate void OnPlayPauseChanged(bool isPressed);

		[Token(Token = "0x200071F")]
		public delegate void OnSliderValueChanged(int beat);

		[Token(Token = "0x2000720")]
		public delegate void OnPalettePositionChanged(Vector3 palettePosition, Vector3 paletteEulerAngles);

		[Token(Token = "0x2000721")]
		public delegate void OnLiveRecorderToggled(bool isActive);

		[Token(Token = "0x2000722")]
		public delegate void OnLiveRecorderSubbeatsChanged(SongEditor.LiveRecorderSubbeatMode newSubbeatMode);

		[Token(Token = "0x4002DEE")]
		private const float OFFSET_ADDITION = 0.01f;

		[Token(Token = "0x4002DEF")]
		private const float BPM_ADDITION = 1f;

		[Token(Token = "0x4002DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Vector3 MENU_POS_LEFT;

		[Token(Token = "0x4002DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly Vector3 MENU_ROT_LEFT;

		[Token(Token = "0x4002DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Vector3 MENU_POS_CENTER;

		[Token(Token = "0x4002DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private readonly Vector3 MENU_ROT_CENTER;

		[Token(Token = "0x4002DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Vector3 MENU_POS_RIGHT;

		[Token(Token = "0x4002DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private readonly Vector3 MENU_ROT_RIGHT;

		[Token(Token = "0x4002DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly Vector3 SIDEDOCK_POS_LEFT;

		[Token(Token = "0x4002DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private readonly Vector3 SIDEDOCK_POS_RIGHT;

		[Token(Token = "0x4002DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool sideDockIsLeft;

		[Token(Token = "0x4002DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string SETTINGS_MENU_POSITION;

		[Token(Token = "0x4002DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string SETTINGS_LIVERECORDER_MINHITSPEED;

		[Token(Token = "0x4002DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string SETTINGS_LIVERECORDER_POWERHITSPEED;

		[Token(Token = "0x4002DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string SETTINGS_LIVERECORDER_BALLSELECTION;

		[Token(Token = "0x4002DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string SETTINGS_LIVERECORDER_SQUATSENSITIVITY;

		[Token(Token = "0x4002DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly string SETTINGS_LIVERECORDER_OBSTACLETYPE;

		[Token(Token = "0x4002DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly string SETTINGS_LIVERECORDER_SIDESTEPSENSITIVITY;

		[Token(Token = "0x4002E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly string SETTINGS_LIVERECORDER_SWINGSENSITIVITY;

		[Token(Token = "0x4002E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool enableFreePositioning;

		[Token(Token = "0x4002E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject positioner;

		[Token(Token = "0x4002E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject positionHandle;

		[Token(Token = "0x4002E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private MenuSelectButton infoButton;

		[Token(Token = "0x4002E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private GameObject panelMain;

		[Token(Token = "0x4002E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject panelItems;

		[Token(Token = "0x4002E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject panelEdit;

		[Token(Token = "0x4002E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject panelRecord;

		[Token(Token = "0x4002E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private PrefixBasedLocalizedString menuPositionText;

		[Token(Token = "0x4002E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private TextMeshProUGUI menuBeatStepText;

		[Token(Token = "0x4002E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private TextMeshProUGUI menuOffsetText;

		[Token(Token = "0x4002E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private TextMeshProUGUI menuBPMText;

		[Token(Token = "0x4002E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TextMeshProUGUI menuCopyBeatsStartBeat;

		[Token(Token = "0x4002E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private TextMeshProUGUI menuCopyBeatsEndBeat;

		[Token(Token = "0x4002E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private TextMeshProUGUI menuMinHitSpeedText;

		[Token(Token = "0x4002E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private TextMeshProUGUI menuPowerHitSpeedText;

		[Token(Token = "0x4002E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private TextMeshProUGUI menuLRSubbeatModeText;

		[Token(Token = "0x4002E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private TextMeshProUGUI menuLRSquatSensitivityText;

		[Token(Token = "0x4002E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private TextMeshProUGUI menuLRSidestepSensitivityText;

		[Token(Token = "0x4002E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private TextMeshProUGUI menuLRSwingSensitivityText;

		[Token(Token = "0x4002E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private GameObject confirmDialogArea;

		[Token(Token = "0x4002E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private TextMeshProUGUI confirmDialogTitle;

		[Token(Token = "0x4002E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private TextBasedLocalizedString confirmDialogMessageText;

		[Token(Token = "0x4002E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private TextMeshProUGUI confirmDialogYesText;

		[Token(Token = "0x4002E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private TextMeshProUGUI confirmDialogNoText;

		[Token(Token = "0x4002E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private MenuSelectButton confirmDialogYesSelectButton;

		[Token(Token = "0x4002E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private MenuSelectButton confirmDialogNoSelectButton;

		[Token(Token = "0x4002E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public PatternDialog patternDialog;

		[Token(Token = "0x4002E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Camera patternCamera;

		[Token(Token = "0x4002E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject liveRecordingSymbol;

		[Token(Token = "0x4002E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private LiveRecorder liveRecorder;

		[Token(Token = "0x4002E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private Slider obstacleTypeSlider;

		[Token(Token = "0x4002E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private GameObject powerBallSpeedOptions;

		[Token(Token = "0x4002E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private MenuSelectButton subBeatModeHelpButton;

		[Token(Token = "0x4002E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private MenuSelectButton obstacleTypeHelpButton;

		[Token(Token = "0x4002E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private EditorController leftController;

		[Token(Token = "0x4002E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private EditorController rightController;

		[Token(Token = "0x4002E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private GameObject sideDock;

		[Token(Token = "0x4002E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private Slider beatSlider;

		[Token(Token = "0x4002E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private TextMeshProUGUI beatSliderMaxValueText;

		[Token(Token = "0x4002E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private TextMeshProUGUI beatSliderCurrentValueText;

		[Token(Token = "0x4002E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[SerializeField]
		private GameObject markPrefab;

		[Token(Token = "0x4002E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private List<GameObject> marks;

		[Token(Token = "0x4002E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private MenuPos currentMenuPosition;

		[Token(Token = "0x4002E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Dictionary<MenuSelectButton.Action, MenuSelectButton> allButtons;

		[Token(Token = "0x4002E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Dictionary<MenuToggleArea.Selection, MenuToggleArea> allToggles;

		[Token(Token = "0x4002E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Dictionary<MenuToggleArea.Selection, BooleanToggle> booleanToggles;

		[Token(Token = "0x4002E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private EditorController controllerInUse;

		[Token(Token = "0x4002E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private SongEditor.BeatCountMode currentBeatCountMode;

		[Token(Token = "0x4002E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private float offset;

		[Token(Token = "0x4002E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float bpm;

		[Token(Token = "0x4002E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private BeatPattern patternEntrySelectedForDeletion;

		[Token(Token = "0x4002E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float currentBeat;

		[Token(Token = "0x4002E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private int beatsTotal;

		[Token(Token = "0x4002E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private float timeSinceLastMark;

		[Token(Token = "0x4002E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private bool mark;

		[Token(Token = "0x4002E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21D")]
		public bool paletteIsGrabbed;

		[Token(Token = "0x4002E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21E")]
		private bool paletteleftGrabbed;

		[Token(Token = "0x4002E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21F")]
		private bool paletteRightGrabbed;

		[Token(Token = "0x4002E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3 currentPalettePosition;

		[Token(Token = "0x4002E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Camera mainCamera;

		[Token(Token = "0x4002E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Vector3 pos;

		[Token(Token = "0x4002E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private bool liveRecorderIsActive;

		[Token(Token = "0x4002E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private SongEditor.LiveRecorderSubbeatMode liveRecorderSubbeatMode;

		[Token(Token = "0x4002E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private MenuSoundManager menuSoundManager;

		[Token(Token = "0x4002E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private CanvasGroup[] canvasGroups;

		[Token(Token = "0x4002E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private bool canvasesAreEnabled;

		[Token(Token = "0x4002E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private float defaultSwingSensitivity;

		[Token(Token = "0x4002E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float defaultSidestepSensitivity;

		[Token(Token = "0x4002E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private float defaultSquatSensitivity;

		[Token(Token = "0x4002E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private AlternateTrackedDeviceRaycaster[] allRaycasters;

		[Token(Token = "0x14000086")]
		public event OnButtonDown onButtonDown
		{
			[Token(Token = "0x6002966")]
			[Address(RVA = "0xCF2CEC", Offset = "0xCF2CEC", VA = "0xCF2CEC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002967")]
			[Address(RVA = "0xCF2D8C", Offset = "0xCF2D8C", VA = "0xCF2D8C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000087")]
		public event OnBooleanChanged onBooleanChanged
		{
			[Token(Token = "0x6002968")]
			[Address(RVA = "0xCF2E2C", Offset = "0xCF2E2C", VA = "0xCF2E2C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002969")]
			[Address(RVA = "0xCF2ECC", Offset = "0xCF2ECC", VA = "0xCF2ECC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000088")]
		public event OnBeatStepChanged onBeatStepChanged
		{
			[Token(Token = "0x600296A")]
			[Address(RVA = "0xCF2F6C", Offset = "0xCF2F6C", VA = "0xCF2F6C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600296B")]
			[Address(RVA = "0xCF300C", Offset = "0xCF300C", VA = "0xCF300C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000089")]
		public event OnBPMOrOffsetChanged onBPMOrOffsetChanged
		{
			[Token(Token = "0x600296C")]
			[Address(RVA = "0xCF30AC", Offset = "0xCF30AC", VA = "0xCF30AC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600296D")]
			[Address(RVA = "0xCF314C", Offset = "0xCF314C", VA = "0xCF314C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008A")]
		public event OnPlayPauseChanged onPlayPauseChanged
		{
			[Token(Token = "0x600296E")]
			[Address(RVA = "0xCF31EC", Offset = "0xCF31EC", VA = "0xCF31EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600296F")]
			[Address(RVA = "0xCF328C", Offset = "0xCF328C", VA = "0xCF328C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008B")]
		public event OnSliderValueChanged onSliderValueChanged
		{
			[Token(Token = "0x6002970")]
			[Address(RVA = "0xCF332C", Offset = "0xCF332C", VA = "0xCF332C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002971")]
			[Address(RVA = "0xCF33CC", Offset = "0xCF33CC", VA = "0xCF33CC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008C")]
		public event OnPalettePositionChanged onPalettePositionChanged
		{
			[Token(Token = "0x6002972")]
			[Address(RVA = "0xCF346C", Offset = "0xCF346C", VA = "0xCF346C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002973")]
			[Address(RVA = "0xCF350C", Offset = "0xCF350C", VA = "0xCF350C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008D")]
		public event OnLiveRecorderToggled onLiveRecorderToggled
		{
			[Token(Token = "0x6002974")]
			[Address(RVA = "0xCF35AC", Offset = "0xCF35AC", VA = "0xCF35AC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002975")]
			[Address(RVA = "0xCF364C", Offset = "0xCF364C", VA = "0xCF364C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400008E")]
		public event OnLiveRecorderSubbeatsChanged onLiveRecorderSubbeatsChanged
		{
			[Token(Token = "0x6002976")]
			[Address(RVA = "0xCF36EC", Offset = "0xCF36EC", VA = "0xCF36EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002977")]
			[Address(RVA = "0xCF378C", Offset = "0xCF378C", VA = "0xCF378C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002978")]
		[Address(RVA = "0xCF382C", Offset = "0xCF382C", VA = "0xCF382C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002979")]
		[Address(RVA = "0xCF39EC", Offset = "0xCF39EC", VA = "0xCF39EC")]
		public void Setup(float bpm, float offset, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x600297A")]
		[Address(RVA = "0xCF66A4", Offset = "0xCF66A4", VA = "0xCF66A4")]
		public void Update()
		{
		}

		[Token(Token = "0x600297B")]
		[Address(RVA = "0xCF69B0", Offset = "0xCF69B0", VA = "0xCF69B0", Slot = "4")]
		public Transform GetOriginTransform()
		{
			return null;
		}

		[Token(Token = "0x600297C")]
		[Address(RVA = "0xCF6DC8", Offset = "0xCF6DC8", VA = "0xCF6DC8")]
		private void ButtonClicked(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600297D")]
		[Address(RVA = "0xCF7B0C", Offset = "0xCF7B0C", VA = "0xCF7B0C")]
		private void SelectButtonHovered(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600297E")]
		[Address(RVA = "0xCF7B44", Offset = "0xCF7B44", VA = "0xCF7B44")]
		private void ToggleButtonHovered(MenuToggleButton button)
		{
		}

		[Token(Token = "0x600297F")]
		[Address(RVA = "0xCF7B60", Offset = "0xCF7B60", VA = "0xCF7B60")]
		internal void HidePatternDialog()
		{
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0xCF7BA0", Offset = "0xCF7BA0", VA = "0xCF7BA0")]
		internal void DeletePatternButtonClicked(BeatPattern pattern)
		{
		}

		[Token(Token = "0x6002981")]
		[Address(RVA = "0xCF7DEC", Offset = "0xCF7DEC", VA = "0xCF7DEC")]
		internal string GetSelectedPatternName()
		{
			return null;
		}

		[Token(Token = "0x6002982")]
		[Address(RVA = "0xCF7E08", Offset = "0xCF7E08", VA = "0xCF7E08")]
		internal void OpenPatternDialog(MenuSelectButton.Action returningAction, PatternDialog.Type type)
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0xCF7E78", Offset = "0xCF7E78", VA = "0xCF7E78")]
		private void ToggleAreaSelection(MenuToggleArea.Selection selection, int value)
		{
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0xCF836C", Offset = "0xCF836C", VA = "0xCF836C")]
		public void SetButtonInteractable(MenuSelectButton.Action button, bool interactable)
		{
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0xCF7C20", Offset = "0xCF7C20", VA = "0xCF7C20")]
		internal void AskQuestion(string entryName, string value, MenuSelectButton.Action actionToUse)
		{
		}

		[Token(Token = "0x6002986")]
		[Address(RVA = "0xCF83E0", Offset = "0xCF83E0", VA = "0xCF83E0")]
		private void ShowMessage(string header, string entryName, string value)
		{
		}

		[Token(Token = "0x6002987")]
		[Address(RVA = "0xCF8548", Offset = "0xCF8548", VA = "0xCF8548")]
		internal void ShowErrorMessage(string entryName, string value)
		{
		}

		[Token(Token = "0x6002988")]
		[Address(RVA = "0xCF85B4", Offset = "0xCF85B4", VA = "0xCF85B4")]
		internal void ShowInfoMessage(string entryName, string value)
		{
		}

		[Token(Token = "0x6002989")]
		[Address(RVA = "0xCF8620", Offset = "0xCF8620", VA = "0xCF8620")]
		public void UpdateBeatSlider(float value)
		{
		}

		[Token(Token = "0x600298A")]
		[Address(RVA = "0xCF869C", Offset = "0xCF869C", VA = "0xCF869C")]
		public void SetBeatsTotal(int beatsTotal)
		{
		}

		[Token(Token = "0x600298B")]
		[Address(RVA = "0xCF68B4", Offset = "0xCF68B4", VA = "0xCF68B4")]
		public void SliderValueManuallyChanged(float beat)
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0xCF8704", Offset = "0xCF8704", VA = "0xCF8704")]
		private void InfoButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0xCF878C", Offset = "0xCF878C", VA = "0xCF878C")]
		private void SubBeatModeHelpButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0xCF87F4", Offset = "0xCF87F4", VA = "0xCF87F4")]
		private void ObstacleTypeHelpButton_onClick(MenuSelectButton button)
		{
		}

		[Token(Token = "0x600298F")]
		[Address(RVA = "0xCF7418", Offset = "0xCF7418", VA = "0xCF7418")]
		private void SetMark()
		{
		}

		[Token(Token = "0x6002990")]
		[Address(RVA = "0xCF75EC", Offset = "0xCF75EC", VA = "0xCF75EC")]
		private void ClearMarks()
		{
		}

		[Token(Token = "0x6002991")]
		[Address(RVA = "0xCF53B4", Offset = "0xCF53B4", VA = "0xCF53B4")]
		public void ChangeMenuTabTo(int value)
		{
		}

		[Token(Token = "0x6002992")]
		[Address(RVA = "0xCF7768", Offset = "0xCF7768", VA = "0xCF7768")]
		private void GrabPalette(EditorController controllerInUse)
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0xCF885C", Offset = "0xCF885C", VA = "0xCF885C")]
		public void TryReleasingPalette(EditorController controllerInUse)
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0xCF89E0", Offset = "0xCF89E0", VA = "0xCF89E0")]
		public void SetInitialPalettePosition(Vector3 palettePosition, Vector3 paletteEulerAngles)
		{
		}

		[Token(Token = "0x6002995")]
		[Address(RVA = "0xCF662C", Offset = "0xCF662C", VA = "0xCF662C")]
		private void SetSideDockPosition()
		{
		}

		[Token(Token = "0x6002996")]
		[Address(RVA = "0xCF4F1C", Offset = "0xCF4F1C", VA = "0xCF4F1C")]
		private void ChangeMenuPositionTo(MenuPos menuPos)
		{
		}

		[Token(Token = "0x6002997")]
		[Address(RVA = "0xCF8A70", Offset = "0xCF8A70", VA = "0xCF8A70")]
		private void SetSideDockPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6002998")]
		[Address(RVA = "0xCF7300", Offset = "0xCF7300", VA = "0xCF7300")]
		private void ChangeBeatStepTo(SongEditor.BeatCountMode beatCountMode)
		{
		}

		[Token(Token = "0x6002999")]
		[Address(RVA = "0xCF54E8", Offset = "0xCF54E8", VA = "0xCF54E8")]
		private void ChangeBeatUnits(int value)
		{
		}

		[Token(Token = "0x600299A")]
		[Address(RVA = "0xCF5520", Offset = "0xCF5520", VA = "0xCF5520")]
		internal void ChangeOffsetNoTo(float newOffset, bool triggerEvent)
		{
		}

		[Token(Token = "0x600299B")]
		[Address(RVA = "0xCF5690", Offset = "0xCF5690", VA = "0xCF5690")]
		internal void ChangeBPMTo(float newBPM, bool triggerEvent)
		{
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0xCF8B04", Offset = "0xCF8B04", VA = "0xCF8B04")]
		internal void SetCopyBeatFromBeatText(string beatNo)
		{
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0xCF8B28", Offset = "0xCF8B28", VA = "0xCF8B28")]
		internal void SetCopyBeatToBeatText(string beatNo)
		{
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0xCF72E4", Offset = "0xCF72E4", VA = "0xCF72E4")]
		internal void PlayClickSound()
		{
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0xCF7B28", Offset = "0xCF7B28", VA = "0xCF7B28")]
		internal void PlayHoverSound()
		{
		}

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0xCF4EA4", Offset = "0xCF4EA4", VA = "0xCF4EA4")]
		private void SetObjectSelection(Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0xCF5D48", Offset = "0xCF5D48", VA = "0xCF5D48")]
		public void ChangeLRObstacleTypeTo(float newObstacleType)
		{
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0xCF5ABC", Offset = "0xCF5ABC", VA = "0xCF5ABC")]
		internal void ChangeLRSquatSensitivityTo(float newSquatSensitivity)
		{
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0xCF5F70", Offset = "0xCF5F70", VA = "0xCF5F70")]
		internal void ChangeLRSidestepSensitivityTo(float newSidestepSensitivity)
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0xCF6208", Offset = "0xCF6208", VA = "0xCF6208")]
		internal void ChangeLRSwingSensitivityTo(float newSwingSensitivity)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0xCF7AE0", Offset = "0xCF7AE0", VA = "0xCF7AE0")]
		private void ResetSensitivies()
		{
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0xCF7864", Offset = "0xCF7864", VA = "0xCF7864")]
		internal void ChangeLRMinHitSpeedTo(float newHitSpeed)
		{
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0xCF5800", Offset = "0xCF5800", VA = "0xCF5800")]
		internal void ChangeLRPowerHitSpeedTo(float newHitSpeed)
		{
		}

		[Token(Token = "0x60029A8")]
		[Address(RVA = "0xCF810C", Offset = "0xCF810C", VA = "0xCF810C")]
		private void ChangeLRBallSelection(int value)
		{
		}

		[Token(Token = "0x60029A9")]
		[Address(RVA = "0xCF64A0", Offset = "0xCF64A0", VA = "0xCF64A0")]
		private void ChangeLRSubbeatModeTo(SongEditor.LiveRecorderSubbeatMode subbeatMode)
		{
		}

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0xCF8B4C", Offset = "0xCF8B4C", VA = "0xCF8B4C")]
		public void DisableCanvases()
		{
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0xCF8B50", Offset = "0xCF8B50", VA = "0xCF8B50")]
		public void EnableCanvases()
		{
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0xCF8B54", Offset = "0xCF8B54", VA = "0xCF8B54")]
		public EditorPalette()
		{
		}
	}
	[Token(Token = "0x2000723")]
	public class EditorSlider : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4002E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Menu menu;

		[Token(Token = "0x4002E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FrameworkManager fm;

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0xCF96D0", Offset = "0xCF96D0", VA = "0xCF96D0", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60029C5")]
		[Address(RVA = "0xCF96D4", Offset = "0xCF96D4", VA = "0xCF96D4", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60029C6")]
		[Address(RVA = "0xCF96D8", Offset = "0xCF96D8", VA = "0xCF96D8")]
		public EditorSlider()
		{
		}
	}
	[Token(Token = "0x2000724")]
	public class LiveRecorder : MonoBehaviour
	{
		[Token(Token = "0x2000725")]
		public enum TunnelType
		{
			[Token(Token = "0x4002EF2")]
			NONE,
			[Token(Token = "0x4002EF3")]
			CENTERED_TUNNEL,
			[Token(Token = "0x4002EF4")]
			LEFT_TUNNEL,
			[Token(Token = "0x4002EF5")]
			RIGHT_TUNNEL,
			[Token(Token = "0x4002EF6")]
			LEFT_UPSIDEDOWN_L,
			[Token(Token = "0x4002EF7")]
			RIGHT_UPSIDEDOWN_L
		}

		[Token(Token = "0x2000726")]
		public enum VerticalWallType
		{
			[Token(Token = "0x4002EF9")]
			NARROW,
			[Token(Token = "0x4002EFA")]
			WIDE,
			[Token(Token = "0x4002EFB")]
			SINGLE_BALL_OBSTACLE
		}

		[Token(Token = "0x2000727")]
		public enum SidestepState
		{
			[Token(Token = "0x4002EFD")]
			IDLE,
			[Token(Token = "0x4002EFE")]
			LEFT_INITIATED,
			[Token(Token = "0x4002EFF")]
			RIGHT_INITIATED
		}

		[Token(Token = "0x2000728")]
		public delegate void OnFirstPlaneHit(Vector3 contactPoint, bool isLeftHit, int nextValidBeat, float nextValidSubbeat, bool isPowerHit);

		[Token(Token = "0x2000729")]
		public delegate void OnHorizontalWallSpawn(Vector3 position, int nextValidBeat, float nextValidSubbeat, TunnelType tunnelType);

		[Token(Token = "0x200072A")]
		public delegate void OnBallObstacleSpawn(Vector3 position, int nextValidBeat, float nextValidSubbeat);

		[Token(Token = "0x200072B")]
		public delegate void OnVerticalWallSpawn(Vector3 position, int nextValidBeat, float nextValidSubbeat, VerticalWallType verticalWallType);

		[Token(Token = "0x200072C")]
		public delegate void OnStreamSpawn(Vector3 position, bool isLeftHand, int nextValidBeat, float nextValidSubbeat, bool isEndElement);

		[Token(Token = "0x4002E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float refractoryPeriod;

		[Token(Token = "0x4002E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool squattingIsEnabled;

		[Token(Token = "0x4002E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[SerializeField]
		private bool sidesteppingIsEnabled;

		[Token(Token = "0x4002E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float swingDistanceTreshhold;

		[Token(Token = "0x4002E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LiveRecorderHand leftHand;

		[Token(Token = "0x4002E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LiveRecorderHand rightHand;

		[Token(Token = "0x4002E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioSource sfxAudioSource;

		[Token(Token = "0x4002E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ParticleSystem hitEffect;

		[Token(Token = "0x4002E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform hitCollider;

		[Token(Token = "0x4002E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private PaletteVisibilityChecker paletteVisibilityChecker;

		[Token(Token = "0x4002E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minHitVelocity;

		[Token(Token = "0x4002E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hitVelocityForPowerBall;

		[Token(Token = "0x4002E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool ballSelectionIsRandom;

		[Token(Token = "0x4002E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MovableObject previouslyPlacedLeftHittable;

		[Token(Token = "0x4002E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MovableObject previouslyPlacedRightHittable;

		[Token(Token = "0x4002E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float timeSincePreviousLeftHit;

		[Token(Token = "0x4002E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float timeSincePreviousRightHit;

		[Token(Token = "0x4002E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float beatCounterProgressPreviousLeftHit;

		[Token(Token = "0x4002E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float beatCounterProgressPreviousRightHit;

		[Token(Token = "0x4002E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<float> leftHits;

		[Token(Token = "0x4002E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<float> rightHits;

		[Token(Token = "0x4002E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 leftHandLastPos;

		[Token(Token = "0x4002E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rightHandLastPos;

		[Token(Token = "0x4002E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHitEntryPoint;

		[Token(Token = "0x4002E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 leftHitExitPoint;

		[Token(Token = "0x4002E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 leftHitInversionPoint;

		[Token(Token = "0x4002E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftSwingEndPoint;

		[Token(Token = "0x4002E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 leftHitEntryDirection;

		[Token(Token = "0x4002E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool leftHitInProgress;

		[Token(Token = "0x4002E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 rightHitEntryPoint;

		[Token(Token = "0x4002E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Vector3 rightHitExitPoint;

		[Token(Token = "0x4002E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 rightHitInversionPoint;

		[Token(Token = "0x4002E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 rightSwingEndPoint;

		[Token(Token = "0x4002E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 rightHitEntryDirection;

		[Token(Token = "0x4002E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private bool rightHitInProgress;

		[Token(Token = "0x4002E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 headPositionWhileLeftHitEntry;

		[Token(Token = "0x4002E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 headPositionWhileLeftHitExit;

		[Token(Token = "0x4002E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 headPositionWhileLeftHitInversionPoint;

		[Token(Token = "0x4002E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 headPositionWhileLeftSwingEndPoint;

		[Token(Token = "0x4002E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 headPositionWhileRightHitEntry;

		[Token(Token = "0x4002E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 headPositionWhileRightHitExit;

		[Token(Token = "0x4002E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Vector3 headPositionWhileRightHitInversionPoint;

		[Token(Token = "0x4002E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private Vector3 headPositionWhileRightSwingEndPoint;

		[Token(Token = "0x4002E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private float timeSincePreviousLeftHitExit;

		[Token(Token = "0x4002E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private float timeSincePreviousRightHitExit;

		[Token(Token = "0x4002E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool previousLeftHitHasBeenSwing;

		[Token(Token = "0x4002E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
		private bool previousRighttHitHasBeenSwing;

		[Token(Token = "0x4002E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float swingSensitivity;

		[Token(Token = "0x4002E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private List<Vector3> leftSwingPoints;

		[Token(Token = "0x4002E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private List<Vector3> rightSwingPoints;

		[Token(Token = "0x4002E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float swingCurvinessTreshhold;

		[Token(Token = "0x4002E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float MAX_SWING_LENGTH;

		[Token(Token = "0x4002E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool leftStreamInProgress;

		[Token(Token = "0x4002E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
		private bool rightStreamInProgress;

		[Token(Token = "0x4002E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float lastStartBeatOfCurrentLeftStream;

		[Token(Token = "0x4002E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float lastStartBeatOfCurrentRightStream;

		[Token(Token = "0x4002E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float lastVerifiedBeatOfCurrentLeftStream;

		[Token(Token = "0x4002E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float lastVerifiedBeatOfCurrentRightStream;

		[Token(Token = "0x4002E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public MovableObject previouslyPlacedLeftStreamElement;

		[Token(Token = "0x4002E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public MovableObject previouslyPlacedLeftStreamStartElement;

		[Token(Token = "0x4002E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public MovableObject previouslyPlacedLeftStreamEndElement;

		[Token(Token = "0x4002E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public MovableObject previouslyPlacedRightStreamElement;

		[Token(Token = "0x4002E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public MovableObject previouslyPlacedRightStreamStartElement;

		[Token(Token = "0x4002E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public MovableObject previouslyPlacedRightStreamEndElement;

		[Token(Token = "0x4002E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float leftHapticPulseTimer;

		[Token(Token = "0x4002E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float rightHapticPulseTimer;

		[Token(Token = "0x4002E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float timeSinceLastTick;

		[Token(Token = "0x4002EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private bool tick;

		[Token(Token = "0x4002EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private FakeHead fakeHead;

		[Token(Token = "0x4002EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Vector3 headsetLastPos;

		[Token(Token = "0x4002EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Controller leftController;

		[Token(Token = "0x4002EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Controller rightController;

		[Token(Token = "0x4002EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private bool enablePlayerHeightScaling;

		[Token(Token = "0x4002EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private float playerHeightScaling;

		[Token(Token = "0x4002EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Vector2 calculatedScaling;

		[Token(Token = "0x4002EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private float LEFT_TUNNEL_X_SHIFT;

		[Token(Token = "0x4002EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private float RIGHT_TUNNEL_X_SHIFT;

		[Token(Token = "0x4002EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool enablePlayspaceScaling;

		[Token(Token = "0x4002EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private float playspaceScaling;

		[Token(Token = "0x4002EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private float HITTABLE_RADIUS;

		[Token(Token = "0x4002EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private float HITTABLE_MESH_SCALING;

		[Token(Token = "0x4002EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private float BALLOBSTACLE_RADIUS;

		[Token(Token = "0x4002EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private float HAND_RADIUS;

		[Token(Token = "0x4002EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float BODY_HALFWIDTH;

		[Token(Token = "0x4002EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private float HEAD_RADIUS;

		[Token(Token = "0x4002EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private float EDITOR_HALFWIDTH;

		[Token(Token = "0x4002EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private float NARROW_WALL_HALFWIDTH;

		[Token(Token = "0x4002EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private float WIDE_WALL_HALFWIDTH;

		[Token(Token = "0x4002EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private float playerMovementSamplingInterval;

		[Token(Token = "0x4002EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private int playerMovementMeasurements;

		[Token(Token = "0x4002EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public MovableObject currentWallInProgress;

		[Token(Token = "0x4002EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private bool convertToBallObstacles;

		[Token(Token = "0x4002EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MovableObject> lastBallObstacles;

		[Token(Token = "0x4002EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private List<float> ballObstacles;

		[Token(Token = "0x4002EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public float sidestepSensitivity;

		[Token(Token = "0x4002EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private float slidingAveragePlayerXPosition;

		[Token(Token = "0x4002EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private float playerXPositionSum;

		[Token(Token = "0x4002EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private float centerSidestepValue;

		[Token(Token = "0x4002EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private float leftSidestepTreshhold;

		[Token(Token = "0x4002EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private float rightSidestepTreshhold;

		[Token(Token = "0x4002EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private float sidestepTreshholdFactor;

		[Token(Token = "0x4002EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		private bool leftSidestepInitiated;

		[Token(Token = "0x4002EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C5")]
		private bool rightSidestepInitiated;

		[Token(Token = "0x4002EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private SidestepState sidestepState;

		[Token(Token = "0x4002EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private bool isOnlyLeaningLeft;

		[Token(Token = "0x4002EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CD")]
		private bool isOnlyLeaningRight;

		[Token(Token = "0x4002EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CE")]
		private bool verticalObstacleInProgress;

		[Token(Token = "0x4002EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private float lastStartBeatOfCurrentVerticalObstacle;

		[Token(Token = "0x4002EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private float lastVerifiedBeatOfCurrentVerticalObstacle;

		[Token(Token = "0x4002ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private float outerEdgeOfCurrentVerticalObstacle;

		[Token(Token = "0x4002ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private float xPositionOfCurrentVerticalObstacle;

		[Token(Token = "0x4002ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private VerticalWallType verticalWallType;

		[Token(Token = "0x4002ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		public float squatSensitivity;

		[Token(Token = "0x4002ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public float wallToBallConversionRate;

		[Token(Token = "0x4002ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private float slidingAveragePlayerHeight;

		[Token(Token = "0x4002ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private float playerHeightSum;

		[Token(Token = "0x4002ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private float highSquatTreshhold;

		[Token(Token = "0x4002ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private float lowSquatTreshhold;

		[Token(Token = "0x4002ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		private float squatTreshholdFactor;

		[Token(Token = "0x4002ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private bool belowLowSquatTreshhold;

		[Token(Token = "0x4002ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x301")]
		private bool aboveHighSquatTreshhold;

		[Token(Token = "0x4002ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x302")]
		private bool squatInitiated;

		[Token(Token = "0x4002ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		private float lowestPointOfCurrentSquat;

		[Token(Token = "0x4002ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private bool horizontalObstacleInProgress;

		[Token(Token = "0x4002ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private float lastStartBeatOfCurrentHorizontalObstacle;

		[Token(Token = "0x4002EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private float lastVerifiedBeatOfCurrentHorizontalObstacle;

		[Token(Token = "0x4002EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private float heightOfCurrentHorizontalObstacle;

		[Token(Token = "0x4002EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private TunnelType tunnelType;

		[Token(Token = "0x4002EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		public bool normalBall;

		[Token(Token = "0x4002EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31D")]
		public bool powerBall;

		[Token(Token = "0x4002EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31E")]
		public bool swing;

		[Token(Token = "0x4002EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31F")]
		public bool ballObstacle;

		[Token(Token = "0x4002EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public bool horizontalWall;

		[Token(Token = "0x4002EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x321")]
		public bool leftTunnel;

		[Token(Token = "0x4002EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x322")]
		public bool centeredTunnel;

		[Token(Token = "0x4002EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x323")]
		public bool rightTunnel;

		[Token(Token = "0x4002EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		public bool leftUpsidedownL;

		[Token(Token = "0x4002EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x325")]
		public bool rightUpsidedownL;

		[Token(Token = "0x4002EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x326")]
		public bool narrowVerticalWall;

		[Token(Token = "0x4002EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x327")]
		public bool wideVerticalWall;

		[Token(Token = "0x4002EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private bool initiateReset;

		[Token(Token = "0x4002EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private FrameworkManager fm;

		[Token(Token = "0x4002EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private SongEditor songEditor;

		[Token(Token = "0x1400008F")]
		public event OnFirstPlaneHit onFirstPlaneHit
		{
			[Token(Token = "0x60029C7")]
			[Address(RVA = "0xCF96E0", Offset = "0xCF96E0", VA = "0xCF96E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60029C8")]
			[Address(RVA = "0xCF9780", Offset = "0xCF9780", VA = "0xCF9780")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000090")]
		public event OnHorizontalWallSpawn onHorizontalWallSpawn
		{
			[Token(Token = "0x60029C9")]
			[Address(RVA = "0xCF9820", Offset = "0xCF9820", VA = "0xCF9820")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60029CA")]
			[Address(RVA = "0xCF98C0", Offset = "0xCF98C0", VA = "0xCF98C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000091")]
		public event OnBallObstacleSpawn onBallObstacleSpawn
		{
			[Token(Token = "0x60029CB")]
			[Address(RVA = "0xCF9960", Offset = "0xCF9960", VA = "0xCF9960")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60029CC")]
			[Address(RVA = "0xCF9A00", Offset = "0xCF9A00", VA = "0xCF9A00")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000092")]
		public event OnVerticalWallSpawn onVerticalWallSpawn
		{
			[Token(Token = "0x60029CD")]
			[Address(RVA = "0xCF9AA0", Offset = "0xCF9AA0", VA = "0xCF9AA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60029CE")]
			[Address(RVA = "0xCF9B40", Offset = "0xCF9B40", VA = "0xCF9B40")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000093")]
		public event OnStreamSpawn onStreamSpawn
		{
			[Token(Token = "0x60029CF")]
			[Address(RVA = "0xCF9BE0", Offset = "0xCF9BE0", VA = "0xCF9BE0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60029D0")]
			[Address(RVA = "0xCF9C80", Offset = "0xCF9C80", VA = "0xCF9C80")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60029D1")]
		[Address(RVA = "0xCF9D20", Offset = "0xCF9D20", VA = "0xCF9D20")]
		private void Awake()
		{
		}

		[Token(Token = "0x60029D2")]
		[Address(RVA = "0xCFA248", Offset = "0xCFA248", VA = "0xCFA248")]
		private void Start()
		{
		}

		[Token(Token = "0x60029D3")]
		[Address(RVA = "0xCFA2D0", Offset = "0xCFA2D0", VA = "0xCFA2D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60029D4")]
		[Address(RVA = "0xCFB4D0", Offset = "0xCFB4D0", VA = "0xCFB4D0")]
		public void SetScaling(Vector2 calculatedScaling, bool enablePlayerHeightScaling, bool enablePlayspaceScaling)
		{
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0xCFB5C0", Offset = "0xCFB5C0", VA = "0xCFB5C0")]
		private void LeftHand_OnHitEnter(Vector3 contactPoint, Vector3 hitVelocity)
		{
		}

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0xCFCA68", Offset = "0xCFCA68", VA = "0xCFCA68")]
		private void LeftHand_OnHitExit(Vector3 contactPoint)
		{
		}

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0xCFD304", Offset = "0xCFD304", VA = "0xCFD304")]
		private void RightHand_OnHitEnter(Vector3 contactPoint, Vector3 hitVelocity)
		{
		}

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0xCFD694", Offset = "0xCFD694", VA = "0xCFD694")]
		private void RightHand_OnHitExit(Vector3 contactPoint)
		{
		}

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0xCFC1F4", Offset = "0xCFC1F4", VA = "0xCFC1F4")]
		private Vector3 CheckForOverlapAndShiftThisHit(Vector3 contactPoint, MovableObject previouslyPlacedOtherHandHittable)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0xCFA610", Offset = "0xCFA610", VA = "0xCFA610")]
		private void CheckForHitInversion(bool isLeftHit)
		{
		}

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0xCFD714", Offset = "0xCFD714", VA = "0xCFD714")]
		public void SetSwingSensitivity(float sensitivity)
		{
		}

		[Token(Token = "0x60029DC")]
		[Address(RVA = "0xCFCAE8", Offset = "0xCFCAE8", VA = "0xCFCAE8")]
		private bool CheckForSwing(bool isleftHit, bool isFromHitInversion)
		{
			return default(bool);
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0xCFDAD0", Offset = "0xCFDAD0", VA = "0xCFDAD0")]
		private bool CheckIfSwingCrossesBody(Vector2 hitEntryPoint, Vector2 swingEndPoint, Vector2 headPositionWhileHitEntry)
		{
			return default(bool);
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0xCFD74C", Offset = "0xCFD74C", VA = "0xCFD74C")]
		private bool CheckIfSwingAlignsWithHitDirection(Vector3 hitEntryDirection, Vector3 hitEntryPoint, Vector3 swingEndPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60029DF")]
		[Address(RVA = "0xCFD8C8", Offset = "0xCFD8C8", VA = "0xCFD8C8")]
		private bool CheckIfSwingIsCurvy(List<Vector3> swingPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0xCFDB0C", Offset = "0xCFDB0C", VA = "0xCFDB0C")]
		private float DistancePointLine(Vector3 point, Vector3 lineStart, Vector3 lineEnd)
		{
			return default(float);
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0xCFDBC4", Offset = "0xCFDBC4", VA = "0xCFDBC4")]
		private Vector3 ProjectPointLine(Vector3 point, Vector3 lineStart, Vector3 lineEnd)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029E2")]
		[Address(RVA = "0xCFCDFC", Offset = "0xCFCDFC", VA = "0xCFCDFC")]
		private void SpawnSwing(bool isleftHit)
		{
		}

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0xCFDD18", Offset = "0xCFDD18", VA = "0xCFDD18")]
		private Vector3 CorrectSwingEndPoint(Vector3 startPoint, Vector3 endPoint, out Vector3 unscaledStartPoint, out Vector3 unscaledEndPoint, out float unscaled2DDistance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0xCFC8EC", Offset = "0xCFC8EC", VA = "0xCFC8EC")]
		private void PlayHitEffect(Vector3 position)
		{
		}

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0xCFDEF0", Offset = "0xCFDEF0", VA = "0xCFDEF0")]
		internal IEnumerator KillParticleEffect(float timeToKill, ParticleSystem particleSystem)
		{
			return null;
		}

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0xCFB93C", Offset = "0xCFB93C", VA = "0xCFB93C")]
		private float GetNextValidFullBeatHit(List<float> thisHitRegister, float timeSinceLastSameHandHit, float beatCounterProgressPreviousSameHandHit, MovableObject previouslyPlacedSameHandHittable, Vector3 contactPoint, bool previousSameHandHitHasBeenSwing)
		{
			return default(float);
		}

		[Token(Token = "0x60029E7")]
		[Address(RVA = "0xCFBA98", Offset = "0xCFBA98", VA = "0xCFBA98")]
		private float GetNextValidHalfBeatHit(List<float> thisHitRegister, List<float> otherHitRegister, float timeSinceLastOtherHandHit, float beatCounterProgressPreviousSameHandHit, MovableObject previouslyPlacedSameHandHittable, Vector3 contactPoint, bool previousSameHandHitHasBeenSwing)
		{
			return default(float);
		}

		[Token(Token = "0x60029E8")]
		[Address(RVA = "0xCFBDB8", Offset = "0xCFBDB8", VA = "0xCFBDB8")]
		private float GetNextValidThirdBeatHit(List<float> thisHitRegister, List<float> otherHitRegister, float timeSinceLastOtherHandHit, float beatCounterProgressPreviousSameHandHit, MovableObject previouslyPlacedSameHandHittable, Vector3 contactPoint, bool previousSameHandHitHasBeenSwing)
		{
			return default(float);
		}

		[Token(Token = "0x60029E9")]
		[Address(RVA = "0xCFDF9C", Offset = "0xCFDF9C", VA = "0xCFDF9C")]
		private bool CheckIfHitIsValid(float beat, List<float> hitRegister, Vector3 contactPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0xCFE220", Offset = "0xCFE220", VA = "0xCFE220")]
		private bool CheckForWallStartingOrEndingOnBeat(float beat)
		{
			return default(bool);
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0xCFE350", Offset = "0xCFE350", VA = "0xCFE350")]
		private bool CheckForWallInProgress()
		{
			return default(bool);
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0xCFE2C8", Offset = "0xCFE2C8", VA = "0xCFE2C8")]
		private bool CheckForBallObstacleOnBeat(float beat)
		{
			return default(bool);
		}

		[Token(Token = "0x60029ED")]
		[Address(RVA = "0xCFE280", Offset = "0xCFE280", VA = "0xCFE280")]
		private bool CheckForStreamEndingOnBeat(float beat)
		{
			return default(bool);
		}

		[Token(Token = "0x60029EE")]
		[Address(RVA = "0xCFA858", Offset = "0xCFA858", VA = "0xCFA858")]
		private void CalculateSlidingAveragePlayerHeightAndXPosition()
		{
		}

		[Token(Token = "0x60029EF")]
		[Address(RVA = "0xCFE368", Offset = "0xCFE368", VA = "0xCFE368")]
		private bool GetWallToBallConversionValue()
		{
			return default(bool);
		}

		[Token(Token = "0x60029F0")]
		[Address(RVA = "0xCFE39C", Offset = "0xCFE39C", VA = "0xCFE39C")]
		public void SetSquatSensitivity(float sensitivitiy)
		{
		}

		[Token(Token = "0x60029F1")]
		[Address(RVA = "0xCFA914", Offset = "0xCFA914", VA = "0xCFA914")]
		private void CalculateNewSquatTreshholds()
		{
		}

		[Token(Token = "0x60029F2")]
		[Address(RVA = "0xCFA944", Offset = "0xCFA944", VA = "0xCFA944")]
		private void DetectCurrentSquattingState()
		{
		}

		[Token(Token = "0x60029F3")]
		[Address(RVA = "0xCFA9B8", Offset = "0xCFA9B8", VA = "0xCFA9B8")]
		private void TryToSpawnHorizontalObstacleAtLowestPoint()
		{
		}

		[Token(Token = "0x60029F4")]
		[Address(RVA = "0xCFAAC0", Offset = "0xCFAAC0", VA = "0xCFAAC0")]
		private void CheckForHorizontalBallObstacleRepetition()
		{
		}

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0xCFAB50", Offset = "0xCFAB50", VA = "0xCFAB50")]
		private void CheckForHorizontalWallExtension()
		{
		}

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0xCFABF8", Offset = "0xCFABF8", VA = "0xCFABF8")]
		private void DetectFurtherDownSquatting()
		{
		}

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0xCFE6B8", Offset = "0xCFE6B8", VA = "0xCFE6B8")]
		private float GetNextValidHorizontalObstacleBeat()
		{
			return default(float);
		}

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0xCFE99C", Offset = "0xCFE99C", VA = "0xCFE99C")]
		private void SpawnHorizontalObstacle(float nextValidBeat, float height, TunnelType tunnelType, bool convertToBallObstacles)
		{
		}

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0xCFE3D8", Offset = "0xCFE3D8", VA = "0xCFE3D8")]
		private TunnelType CheckIfTunnelIsPossible()
		{
			return default(TunnelType);
		}

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0xCFC3A8", Offset = "0xCFC3A8", VA = "0xCFC3A8")]
		private void CorrectHorizontalObstacleOnCollision(Vector3 contactPoint, float nextValidBeat)
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0xCFEDC0", Offset = "0xCFEDC0", VA = "0xCFEDC0")]
		private bool CheckIfHitIsWithinHorizontalObstacle(Vector3 contactPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0xCFAC68", Offset = "0xCFAC68", VA = "0xCFAC68")]
		private void CalculateNewSidestepTreshholds()
		{
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0xCFEFF4", Offset = "0xCFEFF4", VA = "0xCFEFF4")]
		public void SetSidestepSensitivity(float sensitivitiy)
		{
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0xCFAC88", Offset = "0xCFAC88", VA = "0xCFAC88")]
		private void DetectCurrentSidestepState()
		{
		}

		[Token(Token = "0x60029FF")]
		[Address(RVA = "0xCFF030", Offset = "0xCFF030", VA = "0xCFF030")]
		private bool DetectWhetherItsJustLeaningSideways()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A00")]
		[Address(RVA = "0xCFAD60", Offset = "0xCFAD60", VA = "0xCFAD60")]
		private void TryToSpawnVerticalObstacle(bool isLeftSidestep)
		{
		}

		[Token(Token = "0x6002A01")]
		[Address(RVA = "0xCFAE80", Offset = "0xCFAE80", VA = "0xCFAE80")]
		private void TryToSpawnSingleBallObstacle(bool isLeftSidestep)
		{
		}

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0xCFF058", Offset = "0xCFF058", VA = "0xCFF058")]
		private bool CheckVerticalWallType(bool isLeftSidestep)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0xCFF1B0", Offset = "0xCFF1B0", VA = "0xCFF1B0")]
		private float GetNextValidVerticalObstacleBeat(bool isLeftSidestep)
		{
			return default(float);
		}

		[Token(Token = "0x6002A04")]
		[Address(RVA = "0xCFF834", Offset = "0xCFF834", VA = "0xCFF834")]
		private bool CheckIfHitIsOnTheWrongSideOfVerticalObstacle(Vector3 contactPoint, bool isLeftSidestep)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0xCFB0D0", Offset = "0xCFB0D0", VA = "0xCFB0D0")]
		private void DetectFurtherSidestepping()
		{
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0xCFF39C", Offset = "0xCFF39C", VA = "0xCFF39C")]
		private void SpawnVerticalObstacle(float nextValidBeat, bool convertToBallObstacles)
		{
		}

		[Token(Token = "0x6002A07")]
		[Address(RVA = "0xCFAFB8", Offset = "0xCFAFB8", VA = "0xCFAFB8")]
		private void CheckForVerticalWallExtension()
		{
		}

		[Token(Token = "0x6002A08")]
		[Address(RVA = "0xCFC630", Offset = "0xCFC630", VA = "0xCFC630")]
		private void CorrectVerticalObstacleOnCollision(Vector3 contactPoint, float nextValidBeat)
		{
		}

		[Token(Token = "0x6002A09")]
		[Address(RVA = "0xCFAF18", Offset = "0xCFAF18", VA = "0xCFAF18")]
		private void CheckForVerticalBallObstacleRepetition()
		{
		}

		[Token(Token = "0x6002A0A")]
		[Address(RVA = "0xCFF888", Offset = "0xCFF888", VA = "0xCFF888")]
		public void StartStreamPlacement(bool isLeftHand)
		{
		}

		[Token(Token = "0x6002A0B")]
		[Address(RVA = "0xCFF9B8", Offset = "0xCFF9B8", VA = "0xCFF9B8")]
		private float GetNextValidStreamElementBeat()
		{
			return default(float);
		}

		[Token(Token = "0x6002A0C")]
		[Address(RVA = "0xCFFE30", Offset = "0xCFFE30", VA = "0xCFFE30")]
		private void SpawnStreamElement(float nextValidBeat, bool isLeftHand, bool isEndElement)
		{
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0xCFB18C", Offset = "0xCFB18C", VA = "0xCFB18C")]
		private void CheckForStreamExtension(bool isLeftHand)
		{
		}

		[Token(Token = "0x6002A0E")]
		[Address(RVA = "0xCFB21C", Offset = "0xCFB21C", VA = "0xCFB21C")]
		private void DoHapticStreamPulse(bool isLeft)
		{
		}

		[Token(Token = "0x6002A0F")]
		[Address(RVA = "0xCFFF38", Offset = "0xCFFF38", VA = "0xCFFF38")]
		public void EndStreamPlacement(bool isLeftHand)
		{
		}

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0xD00240", Offset = "0xD00240", VA = "0xD00240")]
		private void ResetStreamReference(bool isLeftHand)
		{
		}

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0xD002A8", Offset = "0xD002A8", VA = "0xD002A8")]
		public void EndAllStreams()
		{
		}

		[Token(Token = "0x6002A12")]
		[Address(RVA = "0xD002E4", Offset = "0xD002E4", VA = "0xD002E4")]
		public void InitiateReset()
		{
		}

		[Token(Token = "0x6002A13")]
		[Address(RVA = "0xCFB2B8", Offset = "0xCFB2B8", VA = "0xCFB2B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002A14")]
		[Address(RVA = "0xD002F0", Offset = "0xD002F0", VA = "0xD002F0")]
		public LiveRecorder()
		{
		}
	}
	[Token(Token = "0x200072E")]
	public class LiveRecorderHand : MonoBehaviour
	{
		[Token(Token = "0x200072F")]
		public delegate void OnHitPlaneEnter(Vector3 entryPoint, Vector3 hitVelocity);

		[Token(Token = "0x2000730")]
		public delegate void OnHitPlaneExit(Vector3 exitPoint);

		[Token(Token = "0x4002F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EditorController editorController;

		[Token(Token = "0x4002F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator controllerAnimator;

		[Token(Token = "0x4002F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isTouchingMenu;

		[Token(Token = "0x14000094")]
		public event OnHitPlaneEnter onHitPlaneEnter
		{
			[Token(Token = "0x6002A25")]
			[Address(RVA = "0xCFA03C", Offset = "0xCFA03C", VA = "0xCFA03C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002A26")]
			[Address(RVA = "0xD00AF8", Offset = "0xD00AF8", VA = "0xD00AF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000095")]
		public event OnHitPlaneExit onHitPlaneExit
		{
			[Token(Token = "0x6002A27")]
			[Address(RVA = "0xCFA1AC", Offset = "0xCFA1AC", VA = "0xCFA1AC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002A28")]
			[Address(RVA = "0xD00B94", Offset = "0xD00B94", VA = "0xD00B94")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0xD00C30", Offset = "0xD00C30", VA = "0xD00C30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0xD00CC8", Offset = "0xD00CC8", VA = "0xD00CC8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0xD00E2C", Offset = "0xD00E2C", VA = "0xD00E2C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0xD00F40", Offset = "0xD00F40", VA = "0xD00F40")]
		public LiveRecorderHand()
		{
		}
	}
	[Token(Token = "0x2000731")]
	public class MovableObject : MonoBehaviour
	{
		[Token(Token = "0x4002F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BeatAction beatAction;

		[Token(Token = "0x4002F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ObjectProxy proxy;

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0xD00F70", Offset = "0xD00F70", VA = "0xD00F70")]
		public void SetBeatAction(BeatAction beatAction)
		{
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0xD00F78", Offset = "0xD00F78", VA = "0xD00F78")]
		public BeatAction GetBeatAction()
		{
			return null;
		}

		[Token(Token = "0x6002A33")]
		[Address(RVA = "0xD00F80", Offset = "0xD00F80", VA = "0xD00F80")]
		public void SetProxy(ObjectProxy proxy)
		{
		}

		[Token(Token = "0x6002A34")]
		[Address(RVA = "0xD00F88", Offset = "0xD00F88", VA = "0xD00F88")]
		public ObjectProxy GetProxy()
		{
			return null;
		}

		[Token(Token = "0x6002A35")]
		[Address(RVA = "0xD00F90", Offset = "0xD00F90", VA = "0xD00F90")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6002A36")]
		[Address(RVA = "0xD01020", Offset = "0xD01020", VA = "0xD01020")]
		public MovableObject()
		{
		}
	}
	[Token(Token = "0x2000732")]
	public class ObjectProxy : MonoBehaviour
	{
		[Token(Token = "0x4002F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject otherObject;

		[Token(Token = "0x6002A37")]
		[Address(RVA = "0xD01028", Offset = "0xD01028", VA = "0xD01028")]
		public void SetOther(GameObject other)
		{
		}

		[Token(Token = "0x6002A38")]
		[Address(RVA = "0xD01030", Offset = "0xD01030", VA = "0xD01030")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002A39")]
		[Address(RVA = "0xD0111C", Offset = "0xD0111C", VA = "0xD0111C")]
		public ObjectProxy()
		{
		}
	}
	[Token(Token = "0x2000733")]
	public class PaletteVisibilityChecker : MonoBehaviour
	{
		[Token(Token = "0x4002F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isVisible;

		[Token(Token = "0x6002A3A")]
		[Address(RVA = "0xD01124", Offset = "0xD01124", VA = "0xD01124")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6002A3B")]
		[Address(RVA = "0xD01130", Offset = "0xD01130", VA = "0xD01130")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6002A3C")]
		[Address(RVA = "0xD01138", Offset = "0xD01138", VA = "0xD01138")]
		public PaletteVisibilityChecker()
		{
		}
	}
	[Token(Token = "0x2000734")]
	public class PatternDialog : MonoBehaviour
	{
		[Token(Token = "0x2000735")]
		public enum Type
		{
			[Token(Token = "0x4002F20")]
			SAVE,
			[Token(Token = "0x4002F21")]
			LOAD
		}

		[Token(Token = "0x2000736")]
		public enum Selection
		{
			[Token(Token = "0x4002F23")]
			NONE,
			[Token(Token = "0x4002F24")]
			EXISTING,
			[Token(Token = "0x4002F25")]
			NEW
		}

		[Token(Token = "0x2000737")]
		public delegate void OnPatternSelected();

		[Token(Token = "0x4002F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool enablePatternVisualizer;

		[Token(Token = "0x4002F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject patternContent;

		[Token(Token = "0x4002F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI noPatternsYetText;

		[Token(Token = "0x4002F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject patternLinePrefab;

		[Token(Token = "0x4002F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject patternListOuterEnclosure;

		[Token(Token = "0x4002F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject patternListInnerEnclosure;

		[Token(Token = "0x4002F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject patternNewArea;

		[Token(Token = "0x4002F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI newNameEntryText;

		[Token(Token = "0x4002F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject newNameEntryHighlight;

		[Token(Token = "0x4002F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject patternImage;

		[Token(Token = "0x4002F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private MenuSelectButton saveLoadButton;

		[Token(Token = "0x4002F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI saveLoadButtonText;

		[Token(Token = "0x4002F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PatternManager patternManager;

		[Token(Token = "0x4002F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<BeatPattern> patternsOnScreen;

		[Token(Token = "0x4002F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Type currentType;

		[Token(Token = "0x4002F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Selection currentSelection;

		[Token(Token = "0x4002F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BeatPattern selectedPattern;

		[Token(Token = "0x14000096")]
		public event OnPatternSelected onPatternSelected
		{
			[Token(Token = "0x6002A3D")]
			[Address(RVA = "0xD01140", Offset = "0xD01140", VA = "0xD01140")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002A3E")]
			[Address(RVA = "0xD011DC", Offset = "0xD011DC", VA = "0xD011DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002A3F")]
		[Address(RVA = "0xD01278", Offset = "0xD01278", VA = "0xD01278")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002A40")]
		[Address(RVA = "0xD01308", Offset = "0xD01308", VA = "0xD01308")]
		public void Hide()
		{
		}

		[Token(Token = "0x6002A41")]
		[Address(RVA = "0xD0132C", Offset = "0xD0132C", VA = "0xD0132C")]
		public void Show(Type type, MenuSelectButton.Action returningAction)
		{
		}

		[Token(Token = "0x6002A42")]
		[Address(RVA = "0xD01A88", Offset = "0xD01A88", VA = "0xD01A88")]
		internal void PatternButtonClicked(int idInList)
		{
		}

		[Token(Token = "0x6002A43")]
		[Address(RVA = "0xD01EE0", Offset = "0xD01EE0", VA = "0xD01EE0")]
		internal void DeleteButtonClicked(int idInList)
		{
		}

		[Token(Token = "0x6002A44")]
		[Address(RVA = "0xD01F7C", Offset = "0xD01F7C", VA = "0xD01F7C")]
		internal void KeyboardButtonSelected(MenuSelectButton button)
		{
		}

		[Token(Token = "0x6002A45")]
		[Address(RVA = "0xD02144", Offset = "0xD02144", VA = "0xD02144")]
		internal void DeletePatternSelected(BeatPattern pattern)
		{
		}

		[Token(Token = "0x6002A46")]
		[Address(RVA = "0xD01504", Offset = "0xD01504", VA = "0xD01504")]
		private void ResetInputLine()
		{
		}

		[Token(Token = "0x6002A47")]
		[Address(RVA = "0xD01BA0", Offset = "0xD01BA0", VA = "0xD01BA0")]
		private void HandleUIPatternSelection(int idToHighlight)
		{
		}

		[Token(Token = "0x6002A48")]
		[Address(RVA = "0xD01574", Offset = "0xD01574", VA = "0xD01574")]
		private void UpdateSaveLoadButton()
		{
		}

		[Token(Token = "0x6002A49")]
		[Address(RVA = "0xD01600", Offset = "0xD01600", VA = "0xD01600")]
		private void TransferPatternsFromManagerToUI()
		{
		}

		[Token(Token = "0x6002A4A")]
		[Address(RVA = "0xD01464", Offset = "0xD01464", VA = "0xD01464")]
		private void AdaptEnclosures(int w, int h)
		{
		}

		[Token(Token = "0x6002A4B")]
		[Address(RVA = "0xD021A8", Offset = "0xD021A8", VA = "0xD021A8")]
		internal string GetSelectedPatternName()
		{
			return null;
		}

		[Token(Token = "0x6002A4C")]
		[Address(RVA = "0xD02244", Offset = "0xD02244", VA = "0xD02244")]
		public PatternDialog()
		{
		}
	}
	[Token(Token = "0x2000738")]
	public class PatternEntry : MonoBehaviour
	{
		[Token(Token = "0x4002F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI patternName;

		[Token(Token = "0x4002F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject highlighting;

		[Token(Token = "0x4002F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int idInList;

		[Token(Token = "0x6002A4F")]
		[Address(RVA = "0xD02334", Offset = "0xD02334", VA = "0xD02334")]
		public void DeleteButtonClicked()
		{
		}

		[Token(Token = "0x6002A50")]
		[Address(RVA = "0xD023B8", Offset = "0xD023B8", VA = "0xD023B8")]
		public void PatternButtonClicked()
		{
		}

		[Token(Token = "0x6002A51")]
		[Address(RVA = "0xD02410", Offset = "0xD02410", VA = "0xD02410")]
		public PatternEntry()
		{
		}
	}
	[Token(Token = "0x2000739")]
	public class SongEditor : MonoBehaviour
	{
		[Token(Token = "0x200073A")]
		public enum BeatCountMode
		{
			[Token(Token = "0x4002F94")]
			FULL = 1,
			[Token(Token = "0x4002F95")]
			THIRDS = 3,
			[Token(Token = "0x4002F96")]
			QUARTER = 4,
			[Token(Token = "0x4002F97")]
			SIXTEENTHS = 16
		}

		[Token(Token = "0x200073B")]
		public enum SongState
		{
			[Token(Token = "0x4002F99")]
			PAUSED_ON_START,
			[Token(Token = "0x4002F9A")]
			PLAYING,
			[Token(Token = "0x4002F9B")]
			PAUSED_INBETWEEN,
			[Token(Token = "0x4002F9C")]
			PAUSED_ON_END
		}

		[Token(Token = "0x200073C")]
		public enum LiveRecorderSubbeatMode
		{
			[Token(Token = "0x4002F9E")]
			FULL = 1,
			[Token(Token = "0x4002F9F")]
			HALF,
			[Token(Token = "0x4002FA0")]
			THIRDS
		}

		[Token(Token = "0x4002F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float TIME_SCALE_FACTOR;

		[Token(Token = "0x4002F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float SCROLLING_DELAY;

		[Token(Token = "0x4002F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int FAST_SCROLLING_MULTIPLIER;

		[Token(Token = "0x4002F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool enableGridColoringForValidPlacement;

		[Token(Token = "0x4002F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		private bool enableBallSwitchingWithJoystick;

		[Token(Token = "0x4002F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		private bool enableSelectionVisualization;

		[Token(Token = "0x4002F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[SerializeField]
		private bool enablePlayerHeightScaling;

		[Token(Token = "0x4002F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool enablePlayspaceScaling;

		[Token(Token = "0x4002F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool enableNewEnvironment;

		[Token(Token = "0x4002F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private EditorController leftController;

		[Token(Token = "0x4002F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private EditorController rightController;

		[Token(Token = "0x4002F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioSource musicSource;

		[Token(Token = "0x4002F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioSource metronomeAudioSource;

		[Token(Token = "0x4002F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource sfxSource;

		[Token(Token = "0x4002F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip pasteSound;

		[Token(Token = "0x4002F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioClip deleteSound;

		[Token(Token = "0x4002F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioClip quickDeleteSound;

		[Token(Token = "0x4002F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI upperInfoText;

		[Token(Token = "0x4002F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI difficultyText;

		[Token(Token = "0x4002F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private EditorPositionLocalizationString middleCountDownAndBeatsText;

		[Token(Token = "0x4002F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TextBasedLocalizedString lowerText;

		[Token(Token = "0x4002F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TextMeshProUGUI generatorBeatLabel;

		[Token(Token = "0x4002F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Image positionIndicator;

		[Token(Token = "0x4002F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject waveformDisplayOverhead;

		[Token(Token = "0x4002F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject waveformDisplaySlider;

		[Token(Token = "0x4002F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private EditorPalette palette;

		[Token(Token = "0x4002F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private BoxCollider paletteCollider;

		[Token(Token = "0x4002F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private GameObject layoutObject;

		[Token(Token = "0x4002F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private MeshRenderer floorStatic;

		[Token(Token = "0x4002F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private MeshRenderer notAllowedOverlay;

		[Token(Token = "0x4002F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private GameObject patternLayoutObject;

		[Token(Token = "0x4002F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private LiveRecorder liveRecorder;

		[Token(Token = "0x4002F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private GameObject liveImage;

		[Token(Token = "0x4002F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Camera liveImageCamera;

		[Token(Token = "0x4002F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GameObject liveRecorderOverheadHint;

		[Token(Token = "0x4002F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject beatLabelPrefab;

		[Token(Token = "0x4002F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private GameObject playPauseHint;

		[Token(Token = "0x4002F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private GameObject playspaceWidthHint;

		[Token(Token = "0x4002F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private MeshRenderer gridRenderer;

		[Token(Token = "0x4002F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Transform selectionLeftAndRightBars;

		[Token(Token = "0x4002F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private RectTransform tutorial;

		[Token(Token = "0x4002F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Material oldSkybox;

		[Token(Token = "0x4002F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Material newSkybox;

		[Token(Token = "0x4002F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private GameObject newEnvironment;

		[Token(Token = "0x4002F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private SongManager songManager;

		[Token(Token = "0x4002F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private PatternManager patternManager;

		[Token(Token = "0x4002F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private PlaylistManager playlistManager;

		[Token(Token = "0x4002F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int beatsTotal;

		[Token(Token = "0x4002F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public int beatCounter;

		[Token(Token = "0x4002F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float beatCounterProgress;

		[Token(Token = "0x4002F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float beatCounterProgressBasedOnLayoutObject;

		[Token(Token = "0x4002F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float subBeat;

		[Token(Token = "0x4002F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private BeatCountMode beatCountMode;

		[Token(Token = "0x4002F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool enableMetronome;

		[Token(Token = "0x4002F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject flyingHittablePrefab;

		[Token(Token = "0x4002F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private GameObject flyingHittableSteelPrefab;

		[Token(Token = "0x4002F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private GameObject ballObstaclePrefab;

		[Token(Token = "0x4002F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private List<GameObject> layoutWalls;

		[Token(Token = "0x4002F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private List<GameObject> createWalls;

		[Token(Token = "0x4002F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private GameObject streamStartMiddlePrefabA;

		[Token(Token = "0x4002F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private GameObject streamEndPrefabA;

		[Token(Token = "0x4002F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private GameObject streamStartMiddlePrefabB;

		[Token(Token = "0x4002F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private GameObject streamEndPrefabB;

		[Token(Token = "0x4002F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Stream stream;

		[Token(Token = "0x4002F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Dictionary<SpawnableObject.BeatActionEnum, SpawnableObject> spawnableObjectMap;

		[Token(Token = "0x4002F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Song song;

		[Token(Token = "0x4002F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private SongLayout layout;

		[Token(Token = "0x4002F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public SongState songState;

		[Token(Token = "0x4002F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Song.Difficulty difficulty;

		[Token(Token = "0x4002F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Transform movableObjectPreviousParent;

		[Token(Token = "0x4002F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private int movableObjectPrevPos;

		[Token(Token = "0x4002F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector2 trackpadPos;

		[Token(Token = "0x4002F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float scrollTime;

		[Token(Token = "0x4002F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float lastStep;

		[Token(Token = "0x4002F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private bool initDone;

		[Token(Token = "0x4002F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private string timeLeftText;

		[Token(Token = "0x4002F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Dictionary<Controller, EditorController> controllerMap;

		[Token(Token = "0x4002F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private bool isSongDirty;

		[Token(Token = "0x4002F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x221")]
		private bool isLayoutDirty;

		[Token(Token = "0x4002F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private SongLayout layoutAtEditorStart;

		[Token(Token = "0x4002F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private float offsetAtEditorStart;

		[Token(Token = "0x4002F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float bpmAtEditorStart;

		[Token(Token = "0x4002F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private int copyStartBeat;

		[Token(Token = "0x4002F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private int copyEndBeat;

		[Token(Token = "0x4002F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private bool copyAdditive;

		[Token(Token = "0x4002F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x241")]
		private bool copyMirrorVertical;

		[Token(Token = "0x4002F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x242")]
		private bool copyMirrorHorizontal;

		[Token(Token = "0x4002F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private BeatPattern extractedPattern;

		[Token(Token = "0x4002F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private BeatPattern clipboardPattern;

		[Token(Token = "0x4002F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private bool playspaceWidthHintIsActive;

		[Token(Token = "0x4002F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string TIME_FORMAT;

		[Token(Token = "0x4002F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private readonly float DISTANCE_EDIT_PLANE_TO_USER;

		[Token(Token = "0x4002F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private float layoutObjectZPosition;

		[Token(Token = "0x4002F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private bool gridColorIsRed;

		[Token(Token = "0x4002F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x265")]
		private bool liveRecorderIsActive;

		[Token(Token = "0x4002F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public LiveRecorderSubbeatMode liveRecorderSubbeatMode;

		[Token(Token = "0x4002F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private bool layoutChangedDuringLiveRecording;

		[Token(Token = "0x4002F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private Controller lc;

		[Token(Token = "0x4002F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Controller rc;

		[Token(Token = "0x4002F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private GameConfiguration gameConfig;

		[Token(Token = "0x4002F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool currentlyDetecting;

		[Token(Token = "0x4002F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private float playerHeightScaling;

		[Token(Token = "0x4002F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private float playspaceScaling;

		[Token(Token = "0x4002F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private Vector2 calculatedScaling;

		[Token(Token = "0x4002F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private float ASYMETRIC_ARCHWAY_X_SHIFT;

		[Token(Token = "0x4002F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private PauseHandler pauseHandler;

		[Token(Token = "0x6002A52")]
		[Address(RVA = "0xD02420", Offset = "0xD02420", VA = "0xD02420")]
		public IEnumerator StartEditor(GameConfiguration gameConfig)
		{
			return null;
		}

		[Token(Token = "0x6002A53")]
		[Address(RVA = "0xD024B0", Offset = "0xD024B0", VA = "0xD024B0")]
		private void Palette_onBooleanChanged(MenuToggleArea.Selection selection, bool newValue)
		{
		}

		[Token(Token = "0x6002A54")]
		[Address(RVA = "0xD024FC", Offset = "0xD024FC", VA = "0xD024FC")]
		private void Palette_onBPMOrOffsetChanged(float newBPM, float newOffset)
		{
		}

		[Token(Token = "0x6002A55")]
		[Address(RVA = "0xD02880", Offset = "0xD02880", VA = "0xD02880")]
		private IEnumerator DetectBPMAndOffset()
		{
			return null;
		}

		[Token(Token = "0x6002A56")]
		[Address(RVA = "0xD028F4", Offset = "0xD028F4", VA = "0xD028F4")]
		private void InvertSongOffset()
		{
		}

		[Token(Token = "0x6002A57")]
		[Address(RVA = "0xD02960", Offset = "0xD02960", VA = "0xD02960")]
		private void Palette_onButtonDown(MenuSelectButton.Action button, Controller controller)
		{
		}

		[Token(Token = "0x6002A58")]
		[Address(RVA = "0xD05FE4", Offset = "0xD05FE4", VA = "0xD05FE4")]
		private StreamAction GetStreamStartAction(StreamAction.Id id)
		{
			return null;
		}

		[Token(Token = "0x6002A59")]
		[Address(RVA = "0xD0654C", Offset = "0xD0654C", VA = "0xD0654C")]
		private StreamAction GetStreamEndAction(StreamAction.Id id)
		{
			return null;
		}

		[Token(Token = "0x6002A5A")]
		[Address(RVA = "0xD06FD4", Offset = "0xD06FD4", VA = "0xD06FD4")]
		private static StreamAction SearchForStreamEndOnOffbeats(StreamAction.Id id, OnBeat b)
		{
			return null;
		}

		[Token(Token = "0x6002A5B")]
		[Address(RVA = "0xD06798", Offset = "0xD06798", VA = "0xD06798")]
		private Dictionary<StreamAction, MovableObject> GetAllStreamElements(StreamAction.Id id, StreamAction startAction)
		{
			return null;
		}

		[Token(Token = "0x6002A5C")]
		[Address(RVA = "0xD058E8", Offset = "0xD058E8", VA = "0xD058E8")]
		private void ClearStreamsAtCurrentPosition(float beat, StreamAction.Id id)
		{
		}

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0xD06A88", Offset = "0xD06A88", VA = "0xD06A88")]
		private void StreamRotationAndHandlesToModel(StreamAction sa, MovableObject mo)
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0xD072D8", Offset = "0xD072D8", VA = "0xD072D8")]
		private void PatternDialog_onPatternSelected()
		{
		}

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0xD0503C", Offset = "0xD0503C", VA = "0xD0503C")]
		private void ClearPatternLayoutObject()
		{
		}

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0xD05348", Offset = "0xD05348", VA = "0xD05348")]
		private void PastePattern(BeatPattern paste)
		{
		}

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0xD07DD0", Offset = "0xD07DD0", VA = "0xD07DD0")]
		private void AdjustLayoutContainerForDifference(BeatSequence.MergeDifference d)
		{
		}

		[Token(Token = "0x6002A62")]
		[Address(RVA = "0xD08018", Offset = "0xD08018", VA = "0xD08018")]
		private static void RemoveUIForActions(List<BeatAction> removedActions)
		{
		}

		[Token(Token = "0x6002A63")]
		[Address(RVA = "0xD05518", Offset = "0xD05518", VA = "0xD05518")]
		private void AdjustLayoutContainerWithZShifting(List<BeatAction> removed, int beatCounter, int offsetInBeats)
		{
		}

		[Token(Token = "0x6002A64")]
		[Address(RVA = "0xD04F8C", Offset = "0xD04F8C", VA = "0xD04F8C")]
		private void UpdateSelectionBars()
		{
		}

		[Token(Token = "0x6002A65")]
		[Address(RVA = "0xD04E40", Offset = "0xD04E40", VA = "0xD04E40")]
		private void UpdateUIBasedOnCopyStartEndBeat()
		{
		}

		[Token(Token = "0x6002A66")]
		[Address(RVA = "0xD08368", Offset = "0xD08368", VA = "0xD08368")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002A67")]
		[Address(RVA = "0xD087A8", Offset = "0xD087A8", VA = "0xD087A8")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6002A68")]
		[Address(RVA = "0xD09864", Offset = "0xD09864", VA = "0xD09864")]
		private void BeatCountModeSelector_onHit(BeatCountMode beatCountMode)
		{
		}

		[Token(Token = "0x6002A69")]
		[Address(RVA = "0xD09A3C", Offset = "0xD09A3C", VA = "0xD09A3C")]
		private void AdjustFloorTilingToBeatCount()
		{
		}

		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0xD09A7C", Offset = "0xD09A7C", VA = "0xD09A7C")]
		private void Controller_joystickRightPressed(Controller controller)
		{
		}

		[Token(Token = "0x6002A6B")]
		[Address(RVA = "0xD0A0B0", Offset = "0xD0A0B0", VA = "0xD0A0B0")]
		private void Controller_joystickLeftPressed(Controller controller)
		{
		}

		[Token(Token = "0x6002A6C")]
		[Address(RVA = "0xD09AEC", Offset = "0xD09AEC", VA = "0xD09AEC")]
		private void JoystickActionHorizontal(bool isLeft, GameObject touchedObject, Controller controller)
		{
		}

		[Token(Token = "0x6002A6D")]
		[Address(RVA = "0xD0A42C", Offset = "0xD0A42C", VA = "0xD0A42C")]
		private void SpawnObstacle(Vector3 position, SpawnableObject so, int nearestFullBeat, float nearestSubbeat)
		{
		}

		[Token(Token = "0x6002A6E")]
		[Address(RVA = "0xD0B254", Offset = "0xD0B254", VA = "0xD0B254")]
		private void SpawnStreamElement(Vector3 position, SpawnableObject so, int nearestFullBeat, float nearestSubbeat, bool isLeftHand)
		{
		}

		[Token(Token = "0x6002A6F")]
		[Address(RVA = "0xD0A120", Offset = "0xD0A120", VA = "0xD0A120")]
		private void SpawnHittable(Controller controller, Vector3 hittablePosition, SpawnableObject so, bool moIsGrabbed, bool isFromLiveRecording, int nearestFullBeat, float nearestSubbeat)
		{
		}

		[Token(Token = "0x6002A70")]
		[Address(RVA = "0xD06CA0", Offset = "0xD06CA0", VA = "0xD06CA0")]
		private void HandleObjectPickup(MovableObject mo, Controller controller)
		{
		}

		[Token(Token = "0x6002A71")]
		[Address(RVA = "0xD0B4FC", Offset = "0xD0B4FC", VA = "0xD0B4FC")]
		private void Controller_takeInteractButtonChanged(Controller controller, bool isPressed)
		{
		}

		[Token(Token = "0x6002A72")]
		[Address(RVA = "0xD0C4A4", Offset = "0xD0C4A4", VA = "0xD0C4A4")]
		private Vector3 GetCleanOnBeatLocalPos(MovableObject mo, BeatAction ba, int fullBeatToPlace, float subBeatToPlace)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A73")]
		[Address(RVA = "0xD0D1EC", Offset = "0xD0D1EC", VA = "0xD0D1EC")]
		private void ScrollBackwards(bool isFastScrolling)
		{
		}

		[Token(Token = "0x6002A74")]
		[Address(RVA = "0xD0D3F8", Offset = "0xD0D3F8", VA = "0xD0D3F8")]
		private void ScrollForward(bool isFastScrolling)
		{
		}

		[Token(Token = "0x6002A75")]
		[Address(RVA = "0xD0D570", Offset = "0xD0D570", VA = "0xD0D570")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A76")]
		[Address(RVA = "0xD0D8CC", Offset = "0xD0D8CC", VA = "0xD0D8CC")]
		private void UpdateWaveformIndicator()
		{
		}

		[Token(Token = "0x6002A77")]
		[Address(RVA = "0xD0DB88", Offset = "0xD0DB88", VA = "0xD0DB88")]
		private void TogglePauseMode(bool shouldPause)
		{
		}

		[Token(Token = "0x6002A78")]
		[Address(RVA = "0xD0DEA0", Offset = "0xD0DEA0", VA = "0xD0DEA0")]
		private void Palette_onSliderValueChanged(int beat)
		{
		}

		[Token(Token = "0x6002A79")]
		[Address(RVA = "0xD09908", Offset = "0xD09908", VA = "0xD09908")]
		private void AdjustLayoutAndMusic()
		{
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0xD025F8", Offset = "0xD025F8", VA = "0xD025F8")]
		private void ResyncAtNextConvientBeat()
		{
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0xD0DFF8", Offset = "0xD0DFF8", VA = "0xD0DFF8")]
		private void Controller_playPause(bool isPressed)
		{
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0xD0E124", Offset = "0xD0E124", VA = "0xD0E124")]
		private void Controller_appButtonChanged(bool isPressed)
		{
		}

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0xD0E128", Offset = "0xD0E128", VA = "0xD0E128")]
		private void Palette_onPlayPauseChanged(bool isPressed)
		{
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0xD0E004", Offset = "0xD0E004", VA = "0xD0E004")]
		private void TogglePlayPause()
		{
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0xD0E154", Offset = "0xD0E154", VA = "0xD0E154")]
		private void Beat()
		{
		}

		[Token(Token = "0x6002A80")]
		[Address(RVA = "0xD0DA94", Offset = "0xD0DA94", VA = "0xD0DA94")]
		private void SetGridColor(Color color)
		{
		}

		[Token(Token = "0x6002A81")]
		[Address(RVA = "0xD0DF24", Offset = "0xD0DF24", VA = "0xD0DF24")]
		private void UpdateLabel()
		{
		}

		[Token(Token = "0x6002A82")]
		[Address(RVA = "0xD0E308", Offset = "0xD0E308", VA = "0xD0E308")]
		private void UpdateTimeLeftDisplay(float timeLeft)
		{
		}

		[Token(Token = "0x6002A83")]
		[Address(RVA = "0xD02580", Offset = "0xD02580", VA = "0xD02580")]
		private void SetBeatsTotal()
		{
		}

		[Token(Token = "0x6002A84")]
		[Address(RVA = "0xD0E3AC", Offset = "0xD0E3AC", VA = "0xD0E3AC")]
		private void BuildUpSong(SongLayout layout)
		{
		}

		[Token(Token = "0x6002A85")]
		[Address(RVA = "0xD075C4", Offset = "0xD075C4", VA = "0xD075C4")]
		private void ImportBeatAction(BeatAction action, float beat, GameObject layoutObject)
		{
		}

		[Token(Token = "0x6002A86")]
		[Address(RVA = "0xD0EA34", Offset = "0xD0EA34", VA = "0xD0EA34")]
		public static float[] GetWaveform(AudioClip audio, int width, float sat)
		{
			return null;
		}

		[Token(Token = "0x6002A87")]
		[Address(RVA = "0xD0EBCC", Offset = "0xD0EBCC", VA = "0xD0EBCC")]
		public static Texture2D PaintWaveformSpectrum(float[] waveform, int height, Color c, float alpha)
		{
			return null;
		}

		[Token(Token = "0x6002A88")]
		[Address(RVA = "0xD0CA4C", Offset = "0xD0CA4C", VA = "0xD0CA4C")]
		private void UpdatePaletteStreamAvailability()
		{
		}

		[Token(Token = "0x6002A89")]
		[Address(RVA = "0xD0EDB8", Offset = "0xD0EDB8", VA = "0xD0EDB8")]
		public void SetStreamButtonInteractable(StreamAction.Id id, bool isStreamEnd, bool isInteractable)
		{
		}

		[Token(Token = "0x6002A8A")]
		[Address(RVA = "0xD0EDF4", Offset = "0xD0EDF4", VA = "0xD0EDF4")]
		private void SanitizeStreams()
		{
		}

		[Token(Token = "0x6002A8B")]
		[Address(RVA = "0xD0F1FC", Offset = "0xD0F1FC", VA = "0xD0F1FC")]
		private bool SanitizeStreams(Beat beat)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0xD0F508", Offset = "0xD0F508", VA = "0xD0F508")]
		private bool SanitizeStreams(StreamAction sa)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0xD02768", Offset = "0xD02768", VA = "0xD02768")]
		private void MarkSongDirtyAndAutoSave()
		{
		}

		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0xD04D20", Offset = "0xD04D20", VA = "0xD04D20")]
		private void MarkLayoutDirtyAndAutoSave()
		{
		}

		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0xD04B3C", Offset = "0xD04B3C", VA = "0xD04B3C")]
		private void SaveAll()
		{
		}

		[Token(Token = "0x6002A90")]
		[Address(RVA = "0xD04944", Offset = "0xD04944", VA = "0xD04944")]
		private void Exit()
		{
		}

		[Token(Token = "0x6002A91")]
		[Address(RVA = "0xD04A7C", Offset = "0xD04A7C", VA = "0xD04A7C")]
		private void Revert()
		{
		}

		[Token(Token = "0x6002A92")]
		[Address(RVA = "0xD04B1C", Offset = "0xD04B1C", VA = "0xD04B1C")]
		private void ReplaceLayoutWith(SongLayout replaceLayout)
		{
		}

		[Token(Token = "0x6002A93")]
		[Address(RVA = "0xD0F7C4", Offset = "0xD0F7C4", VA = "0xD0F7C4")]
		private IEnumerator ReplaceLayoutWithCoroutine(SongLayout replacee)
		{
			return null;
		}

		[Token(Token = "0x6002A94")]
		[Address(RVA = "0xD0E134", Offset = "0xD0E134", VA = "0xD0E134")]
		private void ShowPlayPauseHint(bool isActive)
		{
		}

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0xD0F854", Offset = "0xD0F854", VA = "0xD0F854")]
		private void ShowPlayspaceWidthHint(bool isActive)
		{
		}

		[Token(Token = "0x6002A96")]
		[Address(RVA = "0xD054F4", Offset = "0xD054F4", VA = "0xD054F4")]
		private void PlayPasteSound()
		{
		}

		[Token(Token = "0x6002A97")]
		[Address(RVA = "0xD058C4", Offset = "0xD058C4", VA = "0xD058C4")]
		private void PlayDeleteSound()
		{
		}

		[Token(Token = "0x6002A98")]
		[Address(RVA = "0xD0C480", Offset = "0xD0C480", VA = "0xD0C480")]
		private void PlayQuickDeleteSound()
		{
		}

		[Token(Token = "0x6002A99")]
		[Address(RVA = "0xD0F860", Offset = "0xD0F860", VA = "0xD0F860")]
		private void TryGettingCustomPalettePosition()
		{
		}

		[Token(Token = "0x6002A9A")]
		[Address(RVA = "0xD0F920", Offset = "0xD0F920", VA = "0xD0F920")]
		private void Palette_onPalettePositionChanged(Vector3 palettePosition, Vector3 paletteEulerAngles)
		{
		}

		[Token(Token = "0x6002A9B")]
		[Address(RVA = "0xD0F99C", Offset = "0xD0F99C", VA = "0xD0F99C")]
		private void LiveRecorder_onFirstPlaneHit(Vector3 position, bool isLeftHit, int nearestFullBeat, float nearestSubbeat, bool isPowerHit)
		{
		}

		[Token(Token = "0x6002A9C")]
		[Address(RVA = "0xD0FA80", Offset = "0xD0FA80", VA = "0xD0FA80")]
		private void LiveRecorder_onHorizontalWallSpawn(Vector3 position, int nearestFullBeat, float nearestSubbeat, LiveRecorder.TunnelType tunnelType)
		{
		}

		[Token(Token = "0x6002A9D")]
		[Address(RVA = "0xD0FBA0", Offset = "0xD0FBA0", VA = "0xD0FBA0")]
		private void LiveRecorder_onVerticalWallSpawn(Vector3 position, int nearestFullBeat, float nearestSubbeat, LiveRecorder.VerticalWallType verticalWallType)
		{
		}

		[Token(Token = "0x6002A9E")]
		[Address(RVA = "0xD0FC68", Offset = "0xD0FC68", VA = "0xD0FC68")]
		private void LiveRecorder_onBallObstacleSpawn(Vector3 position, int nearestFullBeat, float nearestSubbeat)
		{
		}

		[Token(Token = "0x6002A9F")]
		[Address(RVA = "0xD0FD00", Offset = "0xD0FD00", VA = "0xD0FD00")]
		private void LiveRecorder_onStreamSpawn(Vector3 position, bool isLeftHand, int nearestFullBeat, float nearestSubbeat, bool isEndElement)
		{
		}

		[Token(Token = "0x6002AA0")]
		[Address(RVA = "0xD0DE20", Offset = "0xD0DE20", VA = "0xD0DE20")]
		private void SetLiveRecorderPreview(bool isActive)
		{
		}

		[Token(Token = "0x6002AA1")]
		[Address(RVA = "0xD0FDC4", Offset = "0xD0FDC4", VA = "0xD0FDC4")]
		private void Palette_onLiveRecorderToggled(bool isActive)
		{
		}

		[Token(Token = "0x6002AA2")]
		[Address(RVA = "0xD0FEB4", Offset = "0xD0FEB4", VA = "0xD0FEB4")]
		private void Palette_onLiveRecorderSubbeatsChanged(LiveRecorderSubbeatMode subbeatMode)
		{
		}

		[Token(Token = "0x6002AA3")]
		[Address(RVA = "0xD0A734", Offset = "0xD0A734", VA = "0xD0A734")]
		private void PlaceRecordedObject(MovableObject mo, int nearestFullBeat, float nearestSubbeat)
		{
		}

		[Token(Token = "0x6002AA4")]
		[Address(RVA = "0xCFE028", Offset = "0xCFE028", VA = "0xCFE028")]
		public void ShiftPreviousHittable(MovableObject mo, float beat)
		{
		}

		[Token(Token = "0x6002AA5")]
		[Address(RVA = "0xCFE834", Offset = "0xCFE834", VA = "0xCFE834")]
		public void ScaleCurrentWallToThisBeat(MovableObject mo, float beat, float startBeat)
		{
		}

		[Token(Token = "0x6002AA6")]
		[Address(RVA = "0xCFEF10", Offset = "0xCFEF10", VA = "0xCFEF10")]
		public void DeleteCurrentObject(MovableObject mo)
		{
		}

		[Token(Token = "0x6002AA7")]
		[Address(RVA = "0xD0004C", Offset = "0xD0004C", VA = "0xD0004C")]
		public void ConvertStreamElement(MovableObject mo, float beat, bool shouldBeEnding)
		{
		}

		[Token(Token = "0x6002AA8")]
		[Address(RVA = "0xD00220", Offset = "0xD00220", VA = "0xD00220")]
		public void SmoothStreamDelayed(MovableObject startElement, MovableObject endElement)
		{
		}

		[Token(Token = "0x6002AA9")]
		[Address(RVA = "0xD0FEBC", Offset = "0xD0FEBC", VA = "0xD0FEBC")]
		private IEnumerator SmoothStream(MovableObject startElement, MovableObject endElement)
		{
			return null;
		}

		[Token(Token = "0x6002AAA")]
		[Address(RVA = "0xCFFA00", Offset = "0xCFFA00", VA = "0xCFFA00")]
		public bool CheckIfStreamExists(float beat, bool isLeftHand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AAB")]
		[Address(RVA = "0xD06B54", Offset = "0xD06B54", VA = "0xD06B54")]
		private void ApplyScaling(MovableObject mo)
		{
		}

		[Token(Token = "0x6002AAC")]
		[Address(RVA = "0xD0FF60", Offset = "0xD0FF60", VA = "0xD0FF60")]
		private void PauseHandlerOnOnPauseModeChanged(bool isNowPaused)
		{
		}

		[Token(Token = "0x6002AAD")]
		[Address(RVA = "0xD0FF68", Offset = "0xD0FF68", VA = "0xD0FF68")]
		public SongEditor()
		{
		}
	}
	[Token(Token = "0x2000749")]
	public class SpawnableObject : MonoBehaviour
	{
		[Token(Token = "0x200074A")]
		public enum BeatActionEnum
		{
			[Token(Token = "0x4002FC4")]
			FLYING_HITTABLE_NORMAL,
			[Token(Token = "0x4002FC5")]
			FLYING_HITTABLE_STEEL,
			[Token(Token = "0x4002FC6")]
			BALL_OBSTACLE,
			[Token(Token = "0x4002FC7")]
			STREAM_POINT_A,
			[Token(Token = "0x4002FC8")]
			STREAM_POINT_END_A,
			[Token(Token = "0x4002FC9")]
			STREAM_POINT_B,
			[Token(Token = "0x4002FCA")]
			STREAM_POINT_END_B,
			[Token(Token = "0x4002FCB")]
			WALL_OBSTACLE_0,
			[Token(Token = "0x4002FCC")]
			WALL_OBSTACLE_1,
			[Token(Token = "0x4002FCD")]
			WALL_OBSTACLE_2,
			[Token(Token = "0x4002FCE")]
			WALL_OBSTACLE_3,
			[Token(Token = "0x4002FCF")]
			WALL_OBSTACLE_4,
			[Token(Token = "0x4002FD0")]
			WALL_OBSTACLE_5,
			[Token(Token = "0x4002FD1")]
			WALL_OBSTACLE_6,
			[Token(Token = "0x4002FD2")]
			WALL_OBSTACLE_7
		}

		[Token(Token = "0x4002FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 STREAM_HANDLE_IN_DEFAULT;

		[Token(Token = "0x4002FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly Vector3 STREAM_HANDLE_OUT_DEFAULT;

		[Token(Token = "0x4002FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BeatActionEnum beatActionEnum;

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0xD12FE0", Offset = "0xD12FE0", VA = "0xD12FE0")]
		public BeatAction GetBeatAction()
		{
			return null;
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0xD13548", Offset = "0xD13548", VA = "0xD13548")]
		public BeatActionEnum GetBeatActionEnum()
		{
			return default(BeatActionEnum);
		}

		[Token(Token = "0x6002ADE")]
		[Address(RVA = "0xD13550", Offset = "0xD13550", VA = "0xD13550")]
		public SpawnableObject()
		{
		}
	}
	[Token(Token = "0x200074B")]
	public class TutorialImageChanger : MonoBehaviour
	{
		[Token(Token = "0x4002FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Image tutorialImage;

		[Token(Token = "0x4002FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite questControls;

		[Token(Token = "0x4002FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite wmrControls;

		[Token(Token = "0x4002FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Sprite viveControls;

		[Token(Token = "0x4002FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sprite picoNeo3Controls;

		[Token(Token = "0x6002AE0")]
		[Address(RVA = "0xD135C8", Offset = "0xD135C8", VA = "0xD135C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0xD136AC", Offset = "0xD136AC", VA = "0xD136AC")]
		public TutorialImageChanger()
		{
		}
	}
	[Token(Token = "0x200074C")]
	public class StaticCameraAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4002FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float positionStepSize;

		[Token(Token = "0x4002FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float rotationStepSize;

		[Token(Token = "0x4002FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float adjustSpeed;

		[Token(Token = "0x4002FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4002FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0xD136B4", Offset = "0xD136B4", VA = "0xD136B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AE3")]
		[Address(RVA = "0xD13704", Offset = "0xD13704", VA = "0xD13704")]
		private void Update()
		{
		}

		[Token(Token = "0x6002AE4")]
		[Address(RVA = "0xD13B74", Offset = "0xD13B74", VA = "0xD13B74")]
		private void DecreaseDistance()
		{
		}

		[Token(Token = "0x6002AE5")]
		[Address(RVA = "0xD13ECC", Offset = "0xD13ECC", VA = "0xD13ECC")]
		private void IncreaseDistance()
		{
		}

		[Token(Token = "0x6002AE6")]
		[Address(RVA = "0xD14224", Offset = "0xD14224", VA = "0xD14224")]
		private void IncreaseHeight()
		{
		}

		[Token(Token = "0x6002AE7")]
		[Address(RVA = "0xD14580", Offset = "0xD14580", VA = "0xD14580")]
		private void DecreaseHeight()
		{
		}

		[Token(Token = "0x6002AE8")]
		[Address(RVA = "0xD148DC", Offset = "0xD148DC", VA = "0xD148DC")]
		private void MoveLeft()
		{
		}

		[Token(Token = "0x6002AE9")]
		[Address(RVA = "0xD14C34", Offset = "0xD14C34", VA = "0xD14C34")]
		private void MoveRight()
		{
		}

		[Token(Token = "0x6002AEA")]
		[Address(RVA = "0xD14F8C", Offset = "0xD14F8C", VA = "0xD14F8C")]
		private void TurnLeft()
		{
		}

		[Token(Token = "0x6002AEB")]
		[Address(RVA = "0xD153C8", Offset = "0xD153C8", VA = "0xD153C8")]
		private void TurnRight()
		{
		}

		[Token(Token = "0x6002AEC")]
		[Address(RVA = "0xD15C3C", Offset = "0xD15C3C", VA = "0xD15C3C")]
		private void RotateUp()
		{
		}

		[Token(Token = "0x6002AED")]
		[Address(RVA = "0xD15804", Offset = "0xD15804", VA = "0xD15804")]
		private void RotateDown()
		{
		}

		[Token(Token = "0x6002AEE")]
		[Address(RVA = "0xD13AA4", Offset = "0xD13AA4", VA = "0xD13AA4")]
		private void Reset()
		{
		}

		[Token(Token = "0x6002AEF")]
		[Address(RVA = "0xD16074", Offset = "0xD16074", VA = "0xD16074")]
		public StaticCameraAdjuster()
		{
		}
	}
	[Token(Token = "0x200074D")]
	public class HandSkeleton : MonoBehaviour
	{
		[Token(Token = "0x4002FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isMirrored;

		[Token(Token = "0x6002AF0")]
		[Address(RVA = "0xD16090", Offset = "0xD16090", VA = "0xD16090")]
		public HandSkeleton()
		{
		}
	}
	[Token(Token = "0x200074E")]
	public class RagdollHeadCollider : MonoBehaviour
	{
		[Token(Token = "0x4002FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollForVideos motherScript;

		[Token(Token = "0x4002FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool ragdolled;

		[Token(Token = "0x6002AF1")]
		[Address(RVA = "0xD16098", Offset = "0xD16098", VA = "0xD16098")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6002AF2")]
		[Address(RVA = "0xD161B8", Offset = "0xD161B8", VA = "0xD161B8")]
		public RagdollHeadCollider()
		{
		}
	}
	[Token(Token = "0x200074F")]
	public class ScreenshotIntervallMaker : MonoBehaviour
	{
		[Token(Token = "0x4002FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int resWidth;

		[Token(Token = "0x4002FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int resHeight;

		[Token(Token = "0x4002FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int screenshotInterval;

		[Token(Token = "0x4002FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool takeScreenshots;

		[Token(Token = "0x4002FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float timeSinceScreenshot;

		[Token(Token = "0x4002FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int screenNumber;

		[Token(Token = "0x4002FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string screenPrefix;

		[Token(Token = "0x4002FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool takeHiResShot;

		[Token(Token = "0x4002FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera currentCamera;

		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0xD161C0", Offset = "0xD161C0", VA = "0xD161C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0xD16218", Offset = "0xD16218", VA = "0xD16218")]
		public void TakeHiResShot()
		{
		}

		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0xD16224", Offset = "0xD16224", VA = "0xD16224")]
		public static string ScreenShotName(int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6002AF6")]
		[Address(RVA = "0xD162CC", Offset = "0xD162CC", VA = "0xD162CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002AF7")]
		[Address(RVA = "0xD16730", Offset = "0xD16730", VA = "0xD16730")]
		public ScreenshotIntervallMaker()
		{
		}
	}
	[Token(Token = "0x2000750")]
	public class StrengthMeter : MonoBehaviour
	{
		[Token(Token = "0x4002FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TMP_Text speedLabel;

		[Token(Token = "0x4002FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TMP_Text averageSpeedLabel;

		[Token(Token = "0x4002FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlaylistEndscreenManager playlistEndScreenManager;

		[Token(Token = "0x4002FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TMP_Text currentSpeedLeft;

		[Token(Token = "0x4002FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Image averageSpeedBarLeft;

		[Token(Token = "0x4002FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TMP_Text averageSpeedLeft;

		[Token(Token = "0x4002FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TMP_Text topSpeedLeft;

		[Token(Token = "0x4002FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Image currentSpeedBarLeft;

		[Token(Token = "0x4002FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TMP_Text currentSpeedRight;

		[Token(Token = "0x4002FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Image averageSpeedBarRight;

		[Token(Token = "0x4002FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private TMP_Text averageSpeedRight;

		[Token(Token = "0x4002FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TMP_Text topSpeedRight;

		[Token(Token = "0x4002FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Image currentSpeedBarRight;

		[Token(Token = "0x4002FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool isMetric;

		[Token(Token = "0x4002FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool isVisible;

		[Token(Token = "0x4002FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool isEnabled;

		[Token(Token = "0x4002FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SongStatistic stat;

		[Token(Token = "0x4002FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<SongStatistic> songStatList;

		[Token(Token = "0x4002FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float averageBarTweeningTime;

		[Token(Token = "0x4002FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 currentSpeedValueScale;

		[Token(Token = "0x4002FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float currentSpeedValueTweeningFactor;

		[Token(Token = "0x4002FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float currentSpeedValueTweeningTime;

		[Token(Token = "0x4002FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float currentSpeedBarResetTweeningTime;

		[Token(Token = "0x4003000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float currentSpeedBarIncreaseTweeningTime;

		[Token(Token = "0x4003001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float currentSpeedBarDecreseTweeningTime;

		[Token(Token = "0x4003002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float averageSpeedRightZeroPos;

		[Token(Token = "0x4003003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float averageSpeedRightMaxPos;

		[Token(Token = "0x4003004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float averageSpeedLeftZeroPos;

		[Token(Token = "0x4003005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float averageSpeedLeftMaxPos;

		[Token(Token = "0x6002AF8")]
		[Address(RVA = "0xD167A4", Offset = "0xD167A4", VA = "0xD167A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AF9")]
		[Address(RVA = "0xD16854", Offset = "0xD16854", VA = "0xD16854")]
		public void PrepareForNextSong(SongStatistic stat)
		{
		}

		[Token(Token = "0x6002AFA")]
		[Address(RVA = "0xD1685C", Offset = "0xD1685C", VA = "0xD1685C")]
		public void ResetStrengthMeter()
		{
		}

		[Token(Token = "0x6002AFB")]
		[Address(RVA = "0xD169C0", Offset = "0xD169C0", VA = "0xD169C0")]
		public void SetVisibility(bool isVisible, bool isEnabled)
		{
		}

		[Token(Token = "0x6002AFC")]
		[Address(RVA = "0xD16A08", Offset = "0xD16A08", VA = "0xD16A08")]
		public void SetFormat(bool isMetric)
		{
		}

		[Token(Token = "0x6002AFD")]
		[Address(RVA = "0xD16AA4", Offset = "0xD16AA4", VA = "0xD16AA4")]
		public void SetSongStatList(List<SongStatistic> songStatList)
		{
		}

		[Token(Token = "0x6002AFE")]
		[Address(RVA = "0xD16AAC", Offset = "0xD16AAC", VA = "0xD16AAC")]
		private void Overview_songClicked(int index)
		{
		}

		[Token(Token = "0x6002AFF")]
		[Address(RVA = "0xD16B34", Offset = "0xD16B34", VA = "0xD16B34")]
		public void ShowFinalStats(SongStatistic stat)
		{
		}

		[Token(Token = "0x6002B00")]
		[Address(RVA = "0xD16E1C", Offset = "0xD16E1C", VA = "0xD16E1C")]
		public void RegisterHit(float hitSpeed, bool isLeftController)
		{
		}

		[Token(Token = "0x6002B01")]
		[Address(RVA = "0xD16EA0", Offset = "0xD16EA0", VA = "0xD16EA0")]
		private void UpdateStrengthMeterLeft()
		{
		}

		[Token(Token = "0x6002B02")]
		[Address(RVA = "0xD17124", Offset = "0xD17124", VA = "0xD17124")]
		private void UpdateStrengthMeterRight()
		{
		}

		[Token(Token = "0x6002B03")]
		[Address(RVA = "0xD16E90", Offset = "0xD16E90", VA = "0xD16E90")]
		private float ConvertToImperial(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6002B04")]
		[Address(RVA = "0xD173A8", Offset = "0xD173A8", VA = "0xD173A8")]
		public StrengthMeter()
		{
		}
	}
	[Token(Token = "0x2000751")]
	[RequireComponent(typeof(Camera))]
	public class CameraFader : MonoBehaviour
	{
		[Token(Token = "0x4003006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color currentColor;

		[Token(Token = "0x4003007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color targetColor;

		[Token(Token = "0x4003008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color deltaColor;

		[Token(Token = "0x4003009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CameraFader INSTANCE;

		[Token(Token = "0x400300A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material fadeMaterial;

		[Token(Token = "0x400300B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isFlashing;

		[Token(Token = "0x400300C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Color transparentRed;

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0xD17470", Offset = "0xD17470", VA = "0xD17470")]
		public static void DoFade(Color toColor, float overTimeInSeconds)
		{
		}

		[Token(Token = "0x6002B06")]
		[Address(RVA = "0xD1757C", Offset = "0xD1757C", VA = "0xD1757C")]
		private void DoStartFade(Color newColor, float duration)
		{
		}

		[Token(Token = "0x6002B07")]
		[Address(RVA = "0xD175BC", Offset = "0xD175BC", VA = "0xD175BC")]
		public static void DoFlash()
		{
		}

		[Token(Token = "0x6002B08")]
		[Address(RVA = "0xD17690", Offset = "0xD17690", VA = "0xD17690")]
		private IEnumerator Flash()
		{
			return null;
		}

		[Token(Token = "0x6002B09")]
		[Address(RVA = "0xD1772C", Offset = "0xD1772C", VA = "0xD1772C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B0A")]
		[Address(RVA = "0xD17850", Offset = "0xD17850", VA = "0xD17850")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6002B0B")]
		[Address(RVA = "0xD17A58", Offset = "0xD17A58", VA = "0xD17A58")]
		public CameraFader()
		{
		}
	}
	[Token(Token = "0x2000753")]
	public class GameObjectUtil : ScriptableObject
	{
		[Token(Token = "0x6002B12")]
		[Address(RVA = "0xD17C38", Offset = "0xD17C38", VA = "0xD17C38")]
		public static GameObject CreateCubeWithoutPhysics()
		{
			return null;
		}

		[Token(Token = "0x6002B13")]
		[Address(RVA = "0xD17D4C", Offset = "0xD17D4C", VA = "0xD17D4C")]
		public static GameObject CreateCylinderWithoutPhysics()
		{
			return null;
		}

		[Token(Token = "0x6002B14")]
		[Address(RVA = "0xD17E60", Offset = "0xD17E60", VA = "0xD17E60")]
		public static GameObject CreateSphereWithoutPhysics()
		{
			return null;
		}

		[Token(Token = "0x6002B15")]
		[Address(RVA = "0xD17F74", Offset = "0xD17F74", VA = "0xD17F74")]
		internal static void VisualizeLineFullColor(MonoBehaviour starter, Vector3 fromPoint, Vector3 toPoint, Color theColor)
		{
		}

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0xD181D4", Offset = "0xD181D4", VA = "0xD181D4")]
		internal static void VisualizeLine(MonoBehaviour starter, Vector3 fromPoint, Vector3 toPoint, Color toColor)
		{
		}

		[Token(Token = "0x6002B17")]
		[Address(RVA = "0xD17FA4", Offset = "0xD17FA4", VA = "0xD17FA4")]
		internal static void VisualizeLine(MonoBehaviour starter, Vector3 fromPoint, Vector3 toPoint, Color fromColor, Color toColor, float fromSize, float toSize)
		{
		}

		[Token(Token = "0x6002B18")]
		[Address(RVA = "0xD181FC", Offset = "0xD181FC", VA = "0xD181FC")]
		private static IEnumerator StopLine(GameObject g)
		{
			return null;
		}

		[Token(Token = "0x6002B19")]
		[Address(RVA = "0xD18298", Offset = "0xD18298", VA = "0xD18298")]
		public GameObjectUtil()
		{
		}
	}
	[Token(Token = "0x2000755")]
	public class MainThreadDispatcherPBVR : MonoBehaviour
	{
		[Token(Token = "0x4003013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Queue<Action> actions;

		[Token(Token = "0x4003014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MainThreadDispatcherPBVR instance;

		[Token(Token = "0x6002B20")]
		[Address(RVA = "0xD183CC", Offset = "0xD183CC", VA = "0xD183CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B21")]
		[Address(RVA = "0xD184CC", Offset = "0xD184CC", VA = "0xD184CC")]
		public void Update()
		{
		}

		[Token(Token = "0x6002B22")]
		[Address(RVA = "0xD18670", Offset = "0xD18670", VA = "0xD18670")]
		public static MainThreadDispatcherPBVR Instance()
		{
			return null;
		}

		[Token(Token = "0x6002B23")]
		[Address(RVA = "0xD1876C", Offset = "0xD1876C", VA = "0xD1876C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B24")]
		[Address(RVA = "0xD187C8", Offset = "0xD187C8", VA = "0xD187C8")]
		public void Enqueue(IEnumerator action)
		{
		}

		[Token(Token = "0x6002B25")]
		[Address(RVA = "0xD189B8", Offset = "0xD189B8", VA = "0xD189B8")]
		public void Enqueue(Action action)
		{
		}

		[Token(Token = "0x6002B26")]
		public void Enqueue<T1>(Action<T1> action, T1 param1)
		{
		}

		[Token(Token = "0x6002B27")]
		public void Enqueue<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
		}

		[Token(Token = "0x6002B28")]
		public void Enqueue<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
		}

		[Token(Token = "0x6002B29")]
		public void Enqueue<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
		}

		[Token(Token = "0x6002B2A")]
		[Address(RVA = "0xD189D4", Offset = "0xD189D4", VA = "0xD189D4")]
		private IEnumerator ActionWrapper(Action action)
		{
			return null;
		}

		[Token(Token = "0x6002B2B")]
		private IEnumerator ActionWrapper<T1>(Action<T1> action, T1 param1)
		{
			return null;
		}

		[Token(Token = "0x6002B2C")]
		private IEnumerator ActionWrapper<T1, T2>(Action<T1, T2> action, T1 param1, T2 param2)
		{
			return null;
		}

		[Token(Token = "0x6002B2D")]
		private IEnumerator ActionWrapper<T1, T2, T3>(Action<T1, T2, T3> action, T1 param1, T2 param2, T3 param3)
		{
			return null;
		}

		[Token(Token = "0x6002B2E")]
		private IEnumerator ActionWrapper<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
		{
			return null;
		}

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0xD18A70", Offset = "0xD18A70", VA = "0xD18A70")]
		public MainThreadDispatcherPBVR()
		{
		}
	}
	[Token(Token = "0x200075C")]
	public struct FlatRect
	{
		[Token(Token = "0x4003030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xwidth;

		[Token(Token = "0x4003031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float zwidth;

		[Token(Token = "0x6002B51")]
		[Address(RVA = "0xD18C08", Offset = "0xD18C08", VA = "0xD18C08")]
		public FlatRect(float xsize, float zsize)
		{
		}

		[Token(Token = "0x6002B52")]
		[Address(RVA = "0xD18C10", Offset = "0xD18C10", VA = "0xD18C10", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200075D")]
	public class Position
	{
		[Token(Token = "0x4003032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 pos;

		[Token(Token = "0x4003033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Quaternion rot;

		[Token(Token = "0x6002B53")]
		[Address(RVA = "0xD18E20", Offset = "0xD18E20", VA = "0xD18E20")]
		public Position()
		{
		}

		[Token(Token = "0x6002B54")]
		[Address(RVA = "0xD18EB8", Offset = "0xD18EB8", VA = "0xD18EB8")]
		public Position(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6002B55")]
		[Address(RVA = "0xD18F1C", Offset = "0xD18F1C", VA = "0xD18F1C")]
		public Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B56")]
		[Address(RVA = "0xD18F28", Offset = "0xD18F28", VA = "0xD18F28")]
		public Quaternion GetRotation()
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x200075E")]
	public class OutOfAreaFader : MonoBehaviour
	{
		[Token(Token = "0x4003034")]
		private const float SHOW_TRANSPARENT = 0f;

		[Token(Token = "0x4003035")]
		private const float SHOW_BLACKNESS = 1f;

		[Token(Token = "0x4003036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Canvas canvas;

		[Token(Token = "0x4003037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image blackness;

		[Token(Token = "0x4003038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject infoField;

		[Token(Token = "0x4003039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text text;

		[Token(Token = "0x400303A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Light[] lightWithFlares;

		[Token(Token = "0x400303B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine routine;

		[Token(Token = "0x400303C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Flare[] storedFlares;

		[Token(Token = "0x6002B57")]
		[Address(RVA = "0xD18F34", Offset = "0xD18F34", VA = "0xD18F34")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0xD19040", Offset = "0xD19040", VA = "0xD19040")]
		internal void SetShowMessage(bool show)
		{
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0xD19120", Offset = "0xD19120", VA = "0xD19120")]
		internal void SetText(string lockedText)
		{
		}

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0xD19144", Offset = "0xD19144", VA = "0xD19144")]
		internal void HideTextAndFadeIn(float outsideAreaFadeSpeed)
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0xD1922C", Offset = "0xD1922C", VA = "0xD1922C")]
		internal void FadeOutAndShowText(float outsideAreaFadeSpeed)
		{
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0xD191A8", Offset = "0xD191A8", VA = "0xD191A8")]
		private IEnumerator RemoveTheDisplay(float speed)
		{
			return null;
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0xD19290", Offset = "0xD19290", VA = "0xD19290")]
		private IEnumerator ShowTheDisplay(float speed)
		{
			return null;
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0xD19364", Offset = "0xD19364", VA = "0xD19364")]
		public void ImmediateBlackout(bool isOut)
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0xD1942C", Offset = "0xD1942C", VA = "0xD1942C")]
		public OutOfAreaFader()
		{
		}
	}
	[Token(Token = "0x2000761")]
	public class PauseHandler : MonoBehaviour
	{
		[Token(Token = "0x17000523")]
		public bool IsCurrentlyPaused
		{
			[Token(Token = "0x6002B6C")]
			[Address(RVA = "0xD198E4", Offset = "0xD198E4", VA = "0xD198E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B6D")]
			[Address(RVA = "0xD198EC", Offset = "0xD198EC", VA = "0xD198EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000097")]
		public event Action<bool> OnPauseModeChanged
		{
			[Token(Token = "0x6002B72")]
			[Address(RVA = "0xD11634", Offset = "0xD11634", VA = "0xD11634")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002B73")]
			[Address(RVA = "0xD19E34", Offset = "0xD19E34", VA = "0xD19E34")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002B6E")]
		[Address(RVA = "0xD198F8", Offset = "0xD198F8", VA = "0xD198F8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002B6F")]
		[Address(RVA = "0xD199B4", Offset = "0xD199B4", VA = "0xD199B4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002B70")]
		[Address(RVA = "0xD19A70", Offset = "0xD19A70", VA = "0xD19A70")]
		public void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6002B71")]
		[Address(RVA = "0xD19D94", Offset = "0xD19D94", VA = "0xD19D94")]
		public void OnApplicationPause(bool paused)
		{
		}

		[Token(Token = "0x6002B74")]
		[Address(RVA = "0xD19B48", Offset = "0xD19B48", VA = "0xD19B48")]
		private void ActivatePauseMode(bool isNowPaused, string whereFrom)
		{
		}

		[Token(Token = "0x6002B75")]
		[Address(RVA = "0xD19EE4", Offset = "0xD19EE4", VA = "0xD19EE4")]
		public PauseHandler()
		{
		}
	}
	[Token(Token = "0x2000762")]
	public class SceneLoading
	{
		[Token(Token = "0x6002B76")]
		[Address(RVA = "0xD19EEC", Offset = "0xD19EEC", VA = "0xD19EEC")]
		public static IEnumerator SwitchToLoadScreen(bool towardsGame, MonoBehaviour starter)
		{
			return null;
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0xD19F9C", Offset = "0xD19F9C", VA = "0xD19F9C")]
		public static IEnumerator SwitchBackFromLoadScreen(MonoBehaviour starter)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000765")]
	public struct SerializableVector3
	{
		[Token(Token = "0x4003055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4003056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4003057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0xD1A6E8", Offset = "0xD1A6E8", VA = "0xD1A6E8")]
		public SerializableVector3(float rX, float rY, float rZ)
		{
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0xD1A6F4", Offset = "0xD1A6F4", VA = "0xD1A6F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0xD1A7B8", Offset = "0xD1A7B8", VA = "0xD1A7B8")]
		public static implicit operator Vector3(SerializableVector3 rValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002B87")]
		[Address(RVA = "0xD1A7BC", Offset = "0xD1A7BC", VA = "0xD1A7BC")]
		public static implicit operator SerializableVector3(Vector3 rValue)
		{
			return default(SerializableVector3);
		}
	}
	[Token(Token = "0x2000766")]
	internal class SimpleProfiler
	{
		[Token(Token = "0x4003058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Stopwatch> watches;

		[Token(Token = "0x4003059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<string, TimeSpan> totalTime;

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0xD1A7C0", Offset = "0xD1A7C0", VA = "0xD1A7C0")]
		public static void StartProfiling(string profileId)
		{
		}

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0xD1A7C4", Offset = "0xD1A7C4", VA = "0xD1A7C4")]
		public static void StopProfiling(string profileId)
		{
		}
	}
	[Token(Token = "0x2000767")]
	public class SongImporter : DecoderImporter
	{
		[Token(Token = "0x2000768")]
		public enum SongImporterStatus
		{
			[Token(Token = "0x4003063")]
			Initializing,
			[Token(Token = "0x4003064")]
			Initialized_And_Loading,
			[Token(Token = "0x4003065")]
			Done_OK,
			[Token(Token = "0x4003066")]
			Done_Canceled,
			[Token(Token = "0x4003067")]
			Done_Error
		}

		[Token(Token = "0x400305A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int globalId;

		[Token(Token = "0x400305B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private WaveStream reader;

		[Token(Token = "0x400305C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ISampleProvider sampleProvider;

		[Token(Token = "0x400305D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool importShouldStop;

		[Token(Token = "0x400305F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string songURL;

		[Token(Token = "0x4003060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int id;

		[Token(Token = "0x4003061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public SongImporterStatus Status;

		[Token(Token = "0x17000528")]
		public Song Song
		{
			[Token(Token = "0x6002B8B")]
			[Address(RVA = "0xD1A8B4", Offset = "0xD1A8B4", VA = "0xD1A8B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B8C")]
			[Address(RVA = "0xD1A8BC", Offset = "0xD1A8BC", VA = "0xD1A8BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0xD1A8C4", Offset = "0xD1A8C4", VA = "0xD1A8C4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0xD1A91C", Offset = "0xD1A91C", VA = "0xD1A91C", Slot = "18")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0xD1ACD8", Offset = "0xD1ACD8", VA = "0xD1ACD8", Slot = "19")]
		protected override void Cleanup()
		{
		}

		[Token(Token = "0x6002B90")]
		[Address(RVA = "0xD1AD20", Offset = "0xD1AD20", VA = "0xD1AD20", Slot = "21")]
		protected override AudioInfo GetInfo()
		{
			return null;
		}

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0xD1ADEC", Offset = "0xD1ADEC", VA = "0xD1ADEC", Slot = "20")]
		protected override int GetSamples(float[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0xD1AEAC", Offset = "0xD1AEAC", VA = "0xD1AEAC")]
		internal void StopImport()
		{
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0xD1AEB8", Offset = "0xD1AEB8", VA = "0xD1AEB8")]
		internal IEnumerator LoadSong(Song song, Action<SongImporter> callbackOnSongFinishedLoading)
		{
			return null;
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0xD1AF84", Offset = "0xD1AF84", VA = "0xD1AF84")]
		private IEnumerator MonitorExternalSongLoadProcess(Action<SongImporter> callbackOnSongFinishedLoading)
		{
			return null;
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0xD1B03C", Offset = "0xD1B03C", VA = "0xD1B03C")]
		public SongImporter()
		{
		}
	}
	[Token(Token = "0x200076B")]
	public class Util
	{
		[Token(Token = "0x200076C")]
		public delegate void SimpleInfoEvent(object sender);

		[Token(Token = "0x4003071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float VERTICAL_OFFSET;

		[Token(Token = "0x4003072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int DECIMAL_PLACES;

		[Token(Token = "0x6002BA2")]
		[Address(RVA = "0xD1BEB8", Offset = "0xD1BEB8", VA = "0xD1BEB8")]
		public static void Quit()
		{
		}

		[Token(Token = "0x6002BA3")]
		[Address(RVA = "0xD1BEC0", Offset = "0xD1BEC0", VA = "0xD1BEC0")]
		public static bool FloatEquals(float firstFloat, float secondFloat)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BA4")]
		[Address(RVA = "0xD1BF48", Offset = "0xD1BF48", VA = "0xD1BF48")]
		public static bool FloatEquals(float firstFloat, float secondFloat, float allowedError)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BA5")]
		[Address(RVA = "0xD1BF68", Offset = "0xD1BF68", VA = "0xD1BF68")]
		public static Vector3 GetBezierPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002BA6")]
		[Address(RVA = "0xD1BFDC", Offset = "0xD1BFDC", VA = "0xD1BFDC")]
		public static Vector3 AdjustActionPositionGet(Vector3 input)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002BA7")]
		[Address(RVA = "0xD1C05C", Offset = "0xD1C05C", VA = "0xD1C05C")]
		public static Vector3 AdjustActionPositionSet(Vector3 input)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002BA8")]
		[Address(RVA = "0xD1C0DC", Offset = "0xD1C0DC", VA = "0xD1C0DC")]
		internal static string FloatToString(float someFloat)
		{
			return null;
		}

		[Token(Token = "0x6002BA9")]
		[Address(RVA = "0xD1C1D0", Offset = "0xD1C1D0", VA = "0xD1C1D0")]
		internal static string MetersToFeetAndInch(double meters)
		{
			return null;
		}

		[Token(Token = "0x6002BAA")]
		[Address(RVA = "0xD1C2E4", Offset = "0xD1C2E4", VA = "0xD1C2E4")]
		public static Vector3 RotatePointAroundOrigin(Vector3 point, float angleInDegrees)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200076D")]
	public class VolumetricBezierLineRenderer : MonoBehaviour
	{
		[Token(Token = "0x4003073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject[] cylinders;

		[Token(Token = "0x4003074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 pFrom;

		[Token(Token = "0x4003075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 pTo;

		[Token(Token = "0x4003076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doRender;

		[Token(Token = "0x4003077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float width;

		[Token(Token = "0x6002BAE")]
		[Address(RVA = "0xD1C4DC", Offset = "0xD1C4DC", VA = "0xD1C4DC")]
		internal void Initialize(float width, Material material)
		{
		}

		[Token(Token = "0x6002BAF")]
		[Address(RVA = "0xD1C734", Offset = "0xD1C734", VA = "0xD1C734")]
		internal void SetPositions(Vector3 from, Vector3 to)
		{
		}

		[Token(Token = "0x6002BB0")]
		[Address(RVA = "0xD1CB84", Offset = "0xD1CB84", VA = "0xD1CB84")]
		internal void SetPositions(Vector3 from, Vector3 intermediate, Vector3 to)
		{
		}

		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0xD1CF1C", Offset = "0xD1CF1C", VA = "0xD1CF1C")]
		internal void SetLocalPositions(Vector3 from, Vector3 intermediate, Vector3 to)
		{
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0xD1D2B4", Offset = "0xD1D2B4", VA = "0xD1D2B4")]
		internal void SetRenderLine(bool v)
		{
		}

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0xD1D318", Offset = "0xD1D318", VA = "0xD1D318")]
		public VolumetricBezierLineRenderer()
		{
		}
	}
	[Token(Token = "0x200076E")]
	public class VolumetricLineRenderer : MonoBehaviour
	{
		[Token(Token = "0x4003078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject cylinder;

		[Token(Token = "0x4003079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 pFrom;

		[Token(Token = "0x400307A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 pTo;

		[Token(Token = "0x400307B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool doRender;

		[Token(Token = "0x400307C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float width;

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0xD1D320", Offset = "0xD1D320", VA = "0xD1D320")]
		internal void Initialize(float width, Material material)
		{
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0xD1D520", Offset = "0xD1D520", VA = "0xD1D520")]
		internal void SetPositions(Vector3 from, Vector3 to)
		{
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0xD1D700", Offset = "0xD1D700", VA = "0xD1D700")]
		internal void SetRenderLine(bool v)
		{
		}

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0xD1D744", Offset = "0xD1D744", VA = "0xD1D744")]
		public VolumetricLineRenderer()
		{
		}
	}
	[Token(Token = "0x200076F")]
	public class VRInputCanvas : MonoBehaviour
	{
		[Token(Token = "0x400307D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Canvas canvas;

		[Token(Token = "0x400307E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> underHover;

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0xD1D74C", Offset = "0xD1D74C", VA = "0xD1D74C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0xD1D9E8", Offset = "0xD1D9E8", VA = "0xD1D9E8")]
		internal Vector2 Get2DScreenCoordinatesForWorldPosition(Vector3 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0xD1DB8C", Offset = "0xD1DB8C", VA = "0xD1DB8C")]
		internal Vector2 Get2DCanvasCoordinatesForWorldPosition(Vector3 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0xD1DC14", Offset = "0xD1DC14", VA = "0xD1DC14")]
		internal void SetHoveringObjects(List<GameObject> hovered)
		{
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0xD1DC1C", Offset = "0xD1DC1C", VA = "0xD1DC1C")]
		internal bool HasHoveringObjects()
		{
			return default(bool);
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0xD1DC6C", Offset = "0xD1DC6C", VA = "0xD1DC6C")]
		public VRInputCanvas()
		{
		}
	}
	[Token(Token = "0x2000770")]
	internal class VRInputEventSystem : EventSystem
	{
		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0xD1DCF4", Offset = "0xD1DCF4", VA = "0xD1DCF4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0xD1DE28", Offset = "0xD1DE28", VA = "0xD1DE28", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0xD1DE34", Offset = "0xD1DE34", VA = "0xD1DE34")]
		public VRInputEventSystem()
		{
		}
	}
	[Token(Token = "0x2000771")]
	public class VRInputModule : InputSystemUIInputModule
	{
		[Token(Token = "0x400307F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRInputModule vrInputModule;

		[Token(Token = "0x4003080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		internal Ray ControllerRay;

		[Token(Token = "0x4003081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		internal bool controllerButtonDown;

		[Token(Token = "0x4003082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C1")]
		private bool wasDownLastFrame;

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0xD1DE8C", Offset = "0xD1DE8C", VA = "0xD1DE8C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0xD1DF7C", Offset = "0xD1DF7C", VA = "0xD1DF7C")]
		public static VRInputModule GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0xD1DFC4", Offset = "0xD1DFC4", VA = "0xD1DFC4")]
		public VRInputModule()
		{
		}
	}
	[Token(Token = "0x2000772")]
	public class VRInputRaycaster : GraphicRaycaster
	{
		[Token(Token = "0x4003083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRInputCanvas canvas;

		[Token(Token = "0x4003084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoxCollider[] boxColliders;

		[Token(Token = "0x4003085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int layerMask;

		[Token(Token = "0x4003086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Graphic graphic;

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0xD1E01C", Offset = "0xD1E01C", VA = "0xD1E01C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0xD1E044", Offset = "0xD1E044", VA = "0xD1E044", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0xD1E0D4", Offset = "0xD1E0D4", VA = "0xD1E0D4", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0xD1E628", Offset = "0xD1E628", VA = "0xD1E628")]
		public VRInputRaycaster()
		{
		}
	}
	[Token(Token = "0x2000773")]
	public class WaveformPainter : MonoBehaviour
	{
		[Token(Token = "0x4003087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int width;

		[Token(Token = "0x4003088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int height;

		[Token(Token = "0x4003089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color waveformColor;

		[Token(Token = "0x400308A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color bgColor;

		[Token(Token = "0x400308B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int resolution;

		[Token(Token = "0x400308C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Image waveformImage;

		[Token(Token = "0x400308D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject retrievingWaveformText;

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0xD1E688", Offset = "0xD1E688", VA = "0xD1E688")]
		public void PaintSpectrum(AudioClip audio)
		{
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0xD1EAD0", Offset = "0xD1EAD0", VA = "0xD1EAD0")]
		public void PaintSpectrum2(AudioClip audio)
		{
		}

		[Token(Token = "0x6002BCA")]
		[Address(RVA = "0xD1EFA8", Offset = "0xD1EFA8", VA = "0xD1EFA8")]
		private AudioClip CloneAudioClip(AudioClip audioClip, string name)
		{
			return null;
		}

		[Token(Token = "0x6002BCB")]
		[Address(RVA = "0xD1F1B0", Offset = "0xD1F1B0", VA = "0xD1F1B0")]
		public WaveformPainter()
		{
		}
	}
}
namespace powerbeatsvr.generator.v20
{
	[Token(Token = "0x2000774")]
	public class GenConfigManager
	{
		[Token(Token = "0x2000775")]
		internal enum GCRepetitionType
		{
			[Token(Token = "0x4003092")]
			Zero,
			[Token(Token = "0x4003093")]
			One,
			[Token(Token = "0x4003094")]
			Two
		}

		[Token(Token = "0x2000776")]
		internal enum GCBallsPerBeatType
		{
			[Token(Token = "0x4003096")]
			One,
			[Token(Token = "0x4003097")]
			Two
		}

		[Token(Token = "0x2000777")]
		internal enum GCBallType
		{
			[Token(Token = "0x4003099")]
			Normal,
			[Token(Token = "0x400309A")]
			Hard
		}

		[Token(Token = "0x2000778")]
		internal enum GCWallType
		{
			[Token(Token = "0x400309C")]
			Forehead,
			[Token(Token = "0x400309D")]
			Side,
			[Token(Token = "0x400309E")]
			Archway
		}

		[Token(Token = "0x2000779")]
		internal enum GCSwingType
		{
			[Token(Token = "0x40030A0")]
			SingleLeftRight,
			[Token(Token = "0x40030A1")]
			SingleDownDown,
			[Token(Token = "0x40030A2")]
			SingleDownUp,
			[Token(Token = "0x40030A3")]
			DoubleUpDownDuck,
			[Token(Token = "0x40030A4")]
			DoubleLeftRight
		}

		[Token(Token = "0x200077A")]
		internal enum GCSpikeBetweenSwingsType
		{
			[Token(Token = "0x40030A6")]
			Spike,
			[Token(Token = "0x40030A7")]
			NoSpike
		}

		[Token(Token = "0x200077B")]
		internal enum GCJumpElementType
		{
			[Token(Token = "0x40030A9")]
			SingleBall,
			[Token(Token = "0x40030AA")]
			DoubleBall,
			[Token(Token = "0x40030AB")]
			SpikeObstacle,
			[Token(Token = "0x40030AC")]
			SwingUp,
			[Token(Token = "0x40030AD")]
			SwingSide,
			[Token(Token = "0x40030AE")]
			Nothing,
			[Token(Token = "0x40030AF")]
			DoNotSkip
		}

		[Token(Token = "0x200077C")]
		public abstract class PatternConfiguration
		{
			[Token(Token = "0x40030B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float relativeProportion;

			[Token(Token = "0x40030B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float beatAdvance;

			[Token(Token = "0x40030B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal GapSetting gapSetting;

			[Token(Token = "0x40030B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Dictionary<GCRepetitionType, int> repetitionProportions;

			[Token(Token = "0x6002BD4")]
			[Address(RVA = "0xD1FE24", Offset = "0xD1FE24", VA = "0xD1FE24", Slot = "4")]
			internal virtual void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BD5")]
			internal void AddElementToDictionary<T>(Dictionary<T, int> dictionary, string value, Func<string, T> converter)
			{
			}

			[Token(Token = "0x6002BD6")]
			[Address(RVA = "0xD20160", Offset = "0xD20160", VA = "0xD20160")]
			internal Window CreateWindow(string value)
			{
				return null;
			}

			[Token(Token = "0x6002BD7")]
			[Address(RVA = "0xD202D4", Offset = "0xD202D4", VA = "0xD202D4")]
			internal Range CreateRange(string value)
			{
				return null;
			}

			[Token(Token = "0x6002BD8")]
			[Address(RVA = "0xD1FC54", Offset = "0xD1FC54", VA = "0xD1FC54")]
			internal static PatternConfiguration Create(Pattern.PatternName patternName)
			{
				return null;
			}

			[Token(Token = "0x6002BD9")]
			[Address(RVA = "0xD20418", Offset = "0xD20418", VA = "0xD20418")]
			protected PatternConfiguration()
			{
			}
		}

		[Token(Token = "0x200077E")]
		public class GapConfiguration : PatternConfiguration
		{
			[Token(Token = "0x6002BDD")]
			[Address(RVA = "0xD203E0", Offset = "0xD203E0", VA = "0xD203E0")]
			public GapConfiguration()
			{
			}
		}

		[Token(Token = "0x200077F")]
		public class BallsConfiguration : PatternConfiguration
		{
			[Token(Token = "0x40030B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Dictionary<GCBallsPerBeatType, int> ballsPerBeatProportions;

			[Token(Token = "0x40030B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Dictionary<GCBallType, int> ballTypeProportions;

			[Token(Token = "0x40030B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Window overallBallPlacement;

			[Token(Token = "0x40030B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Range nextBeatXOffset;

			[Token(Token = "0x40030BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Range nextBeatYOffset;

			[Token(Token = "0x6002BDE")]
			[Address(RVA = "0xD2052C", Offset = "0xD2052C", VA = "0xD2052C", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BDF")]
			[Address(RVA = "0xD203E8", Offset = "0xD203E8", VA = "0xD203E8")]
			public BallsConfiguration()
			{
			}
		}

		[Token(Token = "0x2000781")]
		public class WallsConfiguration : PatternConfiguration
		{
			[Token(Token = "0x40030BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Dictionary<GCWallType, int> wallTypeProportions;

			[Token(Token = "0x40030BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Range wallForeheadYPlacement;

			[Token(Token = "0x40030C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Range wallPillarXPlacement;

			[Token(Token = "0x6002BE4")]
			[Address(RVA = "0xD20AC0", Offset = "0xD20AC0", VA = "0xD20AC0", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BE5")]
			[Address(RVA = "0xD20400", Offset = "0xD20400", VA = "0xD20400")]
			public WallsConfiguration()
			{
			}
		}

		[Token(Token = "0x2000783")]
		public class StreamConfiguration : PatternConfiguration
		{
			[Token(Token = "0x40030C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Range streamWaveXOffset;

			[Token(Token = "0x40030C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Range streamWaveYOffset;

			[Token(Token = "0x6002BE9")]
			[Address(RVA = "0xD20E74", Offset = "0xD20E74", VA = "0xD20E74", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BEA")]
			[Address(RVA = "0xD203F8", Offset = "0xD203F8", VA = "0xD203F8")]
			public StreamConfiguration()
			{
			}
		}

		[Token(Token = "0x2000784")]
		public class SwingsConfiguration : PatternConfiguration
		{
			[Token(Token = "0x40030C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Dictionary<GCSwingType, int> swingTypeProportions;

			[Token(Token = "0x40030C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Dictionary<GCSpikeBetweenSwingsType, int> spikeProportions;

			[Token(Token = "0x40030C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Dictionary<GCSwingType, Window> swingWindow;

			[Token(Token = "0x6002BEB")]
			[Address(RVA = "0xD20F54", Offset = "0xD20F54", VA = "0xD20F54", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BEC")]
			[Address(RVA = "0xD203F0", Offset = "0xD203F0", VA = "0xD203F0")]
			public SwingsConfiguration()
			{
			}
		}

		[Token(Token = "0x2000786")]
		public class JumpConfiguration : PatternConfiguration
		{
			[Token(Token = "0x40030CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Dictionary<GCJumpElementType, int> elementTypeProportions;

			[Token(Token = "0x40030CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Dictionary<GCBallType, int> ballTypeProportions;

			[Token(Token = "0x6002BF1")]
			[Address(RVA = "0xD216FC", Offset = "0xD216FC", VA = "0xD216FC", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BF2")]
			[Address(RVA = "0xD219FC", Offset = "0xD219FC", VA = "0xD219FC")]
			public JumpConfiguration()
			{
			}
		}

		[Token(Token = "0x2000788")]
		public class DodgeConfiguration : JumpConfiguration
		{
			[Token(Token = "0x40030D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Range wallXPlacement;

			[Token(Token = "0x40030D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Window ballPlacement;

			[Token(Token = "0x40030D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Window spikePlacement;

			[Token(Token = "0x40030D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Window swingUpPlacement;

			[Token(Token = "0x40030D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal Window swingSidePlacement;

			[Token(Token = "0x6002BF7")]
			[Address(RVA = "0xD21C74", Offset = "0xD21C74", VA = "0xD21C74", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BF8")]
			[Address(RVA = "0xD20408", Offset = "0xD20408", VA = "0xD20408")]
			public DodgeConfiguration()
			{
			}
		}

		[Token(Token = "0x2000789")]
		public class SquatConfiguration : JumpConfiguration
		{
			[Token(Token = "0x40030D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Range wallYPlacement;

			[Token(Token = "0x40030D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Range elementYDelta;

			[Token(Token = "0x40030D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Window ballLowerPlacement;

			[Token(Token = "0x40030D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Window swingLowerPlacement;

			[Token(Token = "0x40030D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal Window spikeLowerPlacement;

			[Token(Token = "0x6002BF9")]
			[Address(RVA = "0xD21E14", Offset = "0xD21E14", VA = "0xD21E14", Slot = "4")]
			internal override void AddElement(string descriptor, string isMulti, string value)
			{
			}

			[Token(Token = "0x6002BFA")]
			[Address(RVA = "0xD20410", Offset = "0xD20410", VA = "0xD20410")]
			public SquatConfiguration()
			{
			}
		}

		[Token(Token = "0x400308E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GenConfigManager INSTANCE;

		[Token(Token = "0x1700052D")]
		public Dictionary<Tuple<Song.Difficulty, Song.BPMRange, Pattern.PatternName>, PatternConfiguration> Config
		{
			[Token(Token = "0x6002BCC")]
			[Address(RVA = "0xD1F1E0", Offset = "0xD1F1E0", VA = "0xD1F1E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BCD")]
			[Address(RVA = "0xD1F1E8", Offset = "0xD1F1E8", VA = "0xD1F1E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700052E")]
		public Dictionary<Song.Difficulty, GeneratorUserSettings> UserSettings
		{
			[Token(Token = "0x6002BCE")]
			[Address(RVA = "0xD1F1F0", Offset = "0xD1F1F0", VA = "0xD1F1F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BCF")]
			[Address(RVA = "0xD1F1F8", Offset = "0xD1F1F8", VA = "0xD1F1F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002BD0")]
		[Address(RVA = "0xD1F200", Offset = "0xD1F200", VA = "0xD1F200")]
		private GenConfigManager()
		{
		}

		[Token(Token = "0x6002BD1")]
		[Address(RVA = "0xD1FB88", Offset = "0xD1FB88", VA = "0xD1FB88")]
		internal void ResetDifficulty(Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002BD2")]
		[Address(RVA = "0xD1FA38", Offset = "0xD1FA38", VA = "0xD1FA38")]
		internal void AddElement(Song.Difficulty difficulty, Song.BPMRange beatRange, Pattern.PatternName patternName, string descriptor, string isMulti, string value)
		{
		}
	}
	[Token(Token = "0x200078A")]
	public class Generator
	{
		[Token(Token = "0x40030DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Song song;

		[Token(Token = "0x40030DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Song.Difficulty difficulty;

		[Token(Token = "0x40030DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GeneratorUserSettings20 guSettings;

		[Token(Token = "0x40030DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int numberOfBeatsInSong;

		[Token(Token = "0x40030DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SongLayout layout;

		[Token(Token = "0x40030DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProportionalSelection<Pattern> patternSelector;

		[Token(Token = "0x40030E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal SongStatistics songsStatistic;

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0xD21FB4", Offset = "0xD21FB4", VA = "0xD21FB4")]
		public Generator(Song song, Song.Difficulty difficulty, GeneratorUserSettings userSettings)
		{
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0xD220FC", Offset = "0xD220FC", VA = "0xD220FC")]
		public void Generate()
		{
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0xD22898", Offset = "0xD22898", VA = "0xD22898")]
		private int GetProportion(GeneratorUserSettings20 guSettings, Pattern.PatternName p)
		{
			return default(int);
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0xD229E4", Offset = "0xD229E4", VA = "0xD229E4")]
		private Pattern SelectNextPattern(Pattern lastPattern, bool allowRepetitions)
		{
			return null;
		}

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0xD22F1C", Offset = "0xD22F1C", VA = "0xD22F1C")]
		internal SongLayout GetLayout()
		{
			return null;
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0xD22A5C", Offset = "0xD22A5C", VA = "0xD22A5C")]
		private void CleanUpLastBeats(SongLayout layout)
		{
		}
	}
	[Token(Token = "0x200078B")]
	public class GeneratorSettings20Adjuster : GeneratorSettingsAdjuster
	{
		[Token(Token = "0x40030E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string NUMBER_FORMAT;

		[Token(Token = "0x40030E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpiderChart spiderChart;

		[Token(Token = "0x40030E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI punchesText;

		[Token(Token = "0x40030E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI swingsText;

		[Token(Token = "0x40030E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI streamsText;

		[Token(Token = "0x40030E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI dodgesText;

		[Token(Token = "0x40030E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI squatsText;

		[Token(Token = "0x40030E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MenuSelectButton resetButton;

		[Token(Token = "0x40030E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MenuSelectButton randomizeButton;

		[Token(Token = "0x40030EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Slider punchesSlider;

		[Token(Token = "0x40030EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Slider streamsSlider;

		[Token(Token = "0x40030ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Slider squatsSlider;

		[Token(Token = "0x40030EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Slider dodgesSlider;

		[Token(Token = "0x40030EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Slider swingsSlider;

		[Token(Token = "0x40030F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GeneratorUserSettings setting;

		[Token(Token = "0x40030F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Song.Difficulty currentDifficulty;

		[Token(Token = "0x14000098")]
		private event Action<Song.Difficulty> ResetParameters
		{
			[Token(Token = "0x6002C01")]
			[Address(RVA = "0xD22F24", Offset = "0xD22F24", VA = "0xD22F24")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002C02")]
			[Address(RVA = "0xD22FD4", Offset = "0xD22FD4", VA = "0xD22FD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002C03")]
		[Address(RVA = "0xD23084", Offset = "0xD23084", VA = "0xD23084")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C04")]
		[Address(RVA = "0xD23354", Offset = "0xD23354", VA = "0xD23354")]
		private void AdjustValue(Slider slider, string which)
		{
		}

		[Token(Token = "0x6002C05")]
		[Address(RVA = "0xD234C0", Offset = "0xD234C0", VA = "0xD234C0", Slot = "6")]
		public override void SetResetParametersAction(Action<Song.Difficulty> r)
		{
		}

		[Token(Token = "0x6002C06")]
		[Address(RVA = "0xD234C8", Offset = "0xD234C8", VA = "0xD234C8", Slot = "5")]
		public override void Initialize(GeneratorUserSettings setting, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002C07")]
		[Address(RVA = "0xD233AC", Offset = "0xD233AC", VA = "0xD233AC")]
		private void UpdateEntireUI()
		{
		}

		[Token(Token = "0x6002C08")]
		[Address(RVA = "0xD23778", Offset = "0xD23778", VA = "0xD23778")]
		public void Randomize()
		{
		}

		[Token(Token = "0x6002C09")]
		[Address(RVA = "0xD23518", Offset = "0xD23518", VA = "0xD23518")]
		private void SetValueInModelAndUI(TextMeshProUGUI text, Slider slider, string element, int adjust = 0)
		{
		}

		[Token(Token = "0x6002C0A")]
		[Address(RVA = "0xD23954", Offset = "0xD23954", VA = "0xD23954")]
		private string ToFirstUpper(string element)
		{
			return null;
		}

		[Token(Token = "0x6002C0B")]
		[Address(RVA = "0xD239C0", Offset = "0xD239C0", VA = "0xD239C0", Slot = "4")]
		public override GeneratorUserSettings GetSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C0C")]
		[Address(RVA = "0xD239C8", Offset = "0xD239C8", VA = "0xD239C8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002C0D")]
		[Address(RVA = "0xD23A64", Offset = "0xD23A64", VA = "0xD23A64")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002C0E")]
		[Address(RVA = "0xD23AE4", Offset = "0xD23AE4", VA = "0xD23AE4")]
		private void LocalizationSettings_SelectedLocaleChanged(Locale obj)
		{
		}

		[Token(Token = "0x6002C0F")]
		[Address(RVA = "0xD23AE8", Offset = "0xD23AE8", VA = "0xD23AE8")]
		public GeneratorSettings20Adjuster()
		{
		}
	}
	[Token(Token = "0x200078C")]
	public abstract class Pattern
	{
		[Token(Token = "0x200078D")]
		public enum PatternName
		{
			[Token(Token = "0x40030FC")]
			Gap,
			[Token(Token = "0x40030FD")]
			Balls,
			[Token(Token = "0x40030FE")]
			Stream,
			[Token(Token = "0x40030FF")]
			Swings,
			[Token(Token = "0x4003100")]
			Wall,
			[Token(Token = "0x4003101")]
			Dodge,
			[Token(Token = "0x4003102")]
			Squat
		}

		[Token(Token = "0x200078E")]
		internal enum BallType
		{
			[Token(Token = "0x4003104")]
			Normal,
			[Token(Token = "0x4003105")]
			Spike,
			[Token(Token = "0x4003106")]
			Hard
		}

		[Token(Token = "0x200078F")]
		internal enum SwingVertical
		{
			[Token(Token = "0x4003108")]
			Up,
			[Token(Token = "0x4003109")]
			Down
		}

		[Token(Token = "0x2000790")]
		internal enum SwingHorizontal
		{
			[Token(Token = "0x400310B")]
			Left,
			[Token(Token = "0x400310C")]
			Right,
			[Token(Token = "0x400310D")]
			None
		}

		[Token(Token = "0x2000791")]
		internal class TwoHittableActions
		{
			[Token(Token = "0x400310E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 centerPosition;

			[Token(Token = "0x400310F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal BeatAction a1;

			[Token(Token = "0x4003110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal BeatAction a2;

			[Token(Token = "0x6002C3C")]
			[Address(RVA = "0xD245AC", Offset = "0xD245AC", VA = "0xD245AC")]
			public TwoHittableActions(Vector2 centerPosition, BeatAction a1, BeatAction a2)
			{
			}
		}

		[Token(Token = "0x2000792")]
		internal class SwingActions
		{
			[Token(Token = "0x4003111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 firstPosition;

			[Token(Token = "0x4003112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal BeatAction a1;

			[Token(Token = "0x4003113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal BeatAction a2;

			[Token(Token = "0x4003114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal BeatAction a3;

			[Token(Token = "0x6002C3D")]
			[Address(RVA = "0xD24868", Offset = "0xD24868", VA = "0xD24868")]
			public SwingActions(Vector2 centerPosition, BeatAction a1, BeatAction a2, BeatAction a3)
			{
			}
		}

		[Token(Token = "0x40030F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal GenConfigManager.PatternConfiguration config;

		[Token(Token = "0x40030F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal SongLayout layout;

		[Token(Token = "0x40030F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int startBeat;

		[Token(Token = "0x40030F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int currentBeat;

		[Token(Token = "0x40030F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal UserPosition userPosition;

		[Token(Token = "0x40030F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Pattern lastPattern;

		[Token(Token = "0x40030F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal OnBeat startBeatOnBeat;

		[Token(Token = "0x40030FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal GeneratorUserSettings20 userSettings;

		[Token(Token = "0x1700052F")]
		protected PatternName Name
		{
			[Token(Token = "0x6002C19")]
			[Address(RVA = "0xD23D1C", Offset = "0xD23D1C", VA = "0xD23D1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002C18")]
		[Address(RVA = "0xD226E4", Offset = "0xD226E4", VA = "0xD226E4")]
		public static Pattern Create(PatternName name)
		{
			return null;
		}

		[Token(Token = "0x6002C1A")]
		[Address(RVA = "0xD23D24", Offset = "0xD23D24", VA = "0xD23D24")]
		internal void SetConfig(GenConfigManager.PatternConfiguration config)
		{
		}

		[Token(Token = "0x6002C1B")]
		[Address(RVA = "0xD23D2C", Offset = "0xD23D2C", VA = "0xD23D2C")]
		internal int GetBeatCountOfThisPattern()
		{
			return default(int);
		}

		[Token(Token = "0x6002C1C")]
		[Address(RVA = "0xD23D38", Offset = "0xD23D38", VA = "0xD23D38", Slot = "4")]
		internal virtual void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C1D")]
		[Address(RVA = "0xD23E68", Offset = "0xD23E68", VA = "0xD23E68")]
		internal void SetUserSettings(GeneratorUserSettings20 guSettings)
		{
		}

		[Token(Token = "0x6002C1E")]
		[Address(RVA = "0xD23E70", Offset = "0xD23E70", VA = "0xD23E70")]
		internal int GetCurrentBeat()
		{
			return default(int);
		}

		[Token(Token = "0x6002C1F")]
		[Address(RVA = "0xD23E78", Offset = "0xD23E78", VA = "0xD23E78")]
		internal void GoToNextBeat()
		{
		}

		[Token(Token = "0x6002C20")]
		[Address(RVA = "0xD23EB0", Offset = "0xD23EB0", VA = "0xD23EB0")]
		internal int GetBeatsToAdvance()
		{
			return default(int);
		}

		[Token(Token = "0x6002C21")]
		[Address(RVA = "0xD23EDC", Offset = "0xD23EDC", VA = "0xD23EDC")]
		internal bool IsHalfBeat()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C22")]
		[Address(RVA = "0xD23F04", Offset = "0xD23F04", VA = "0xD23F04")]
		internal void AddRepetitions(int repetitions, int fromBeat, int toBeat)
		{
		}

		[Token(Token = "0x6002C23")]
		[Address(RVA = "0xD23F50", Offset = "0xD23F50", VA = "0xD23F50")]
		private void CloneBeats(int fromBeat, int toBeat)
		{
		}

		[Token(Token = "0x6002C24")]
		[Address(RVA = "0xD23FD8", Offset = "0xD23FD8", VA = "0xD23FD8")]
		internal int ChooseRepetition()
		{
			return default(int);
		}

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0xD23DAC", Offset = "0xD23DAC", VA = "0xD23DAC")]
		private OnBeat GetOrCreateCurrentBeat()
		{
			return null;
		}

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0xD24124", Offset = "0xD24124", VA = "0xD24124")]
		internal BeatAction CreateSingleBallAction(Vector2 position, BallType type, float subbeatOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0xD24324", Offset = "0xD24324", VA = "0xD24324")]
		internal BeatAction CreateSingleBallAction(Window window, BallType type, float subbeatOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0xD2436C", Offset = "0xD2436C", VA = "0xD2436C")]
		internal TwoHittableActions CreateDoubleBallAction(Window window, BallType type, bool withRandomY)
		{
			return null;
		}

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0xD24580", Offset = "0xD24580", VA = "0xD24580")]
		internal float NegativeOrNot()
		{
			return default(float);
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0xD24604", Offset = "0xD24604", VA = "0xD24604")]
		internal bool Decide()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0xD24628", Offset = "0xD24628", VA = "0xD24628")]
		internal UserPosition GetOtherSide(UserPosition lastUserActionSide)
		{
			return default(UserPosition);
		}

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0xD24640", Offset = "0xD24640", VA = "0xD24640")]
		internal UserPosition AlternateTheSideOfTheUser(UserPosition lastUserActionSide)
		{
			return default(UserPosition);
		}

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0xD24690", Offset = "0xD24690", VA = "0xD24690")]
		internal SwingActions CreateVerticalSwingAction(Window window, SwingHorizontal horiz, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0xD24820", Offset = "0xD24820", VA = "0xD24820")]
		internal SwingActions CreateVerticalSwingAction(Window window, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0xD2485C", Offset = "0xD2485C", VA = "0xD2485C")]
		internal SwingActions CreateVerticalSwingAction(Vector2 startPosition, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0xD246D0", Offset = "0xD246D0", VA = "0xD246D0")]
		internal SwingActions CreateVerticalSwingAction(Vector2 startPosition, SwingHorizontal horiz, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002C31")]
		[Address(RVA = "0xD248DC", Offset = "0xD248DC", VA = "0xD248DC")]
		internal SwingActions CreateHorizontalSwingAction(Window window, SwingHorizontal horiz)
		{
			return null;
		}

		[Token(Token = "0x6002C32")]
		[Address(RVA = "0xD24914", Offset = "0xD24914", VA = "0xD24914")]
		internal SwingActions CreateHorizontalSwingAction(Vector2 startPosition, SwingHorizontal horiz)
		{
			return null;
		}

		[Token(Token = "0x6002C33")]
		[Address(RVA = "0xD24A44", Offset = "0xD24A44", VA = "0xD24A44")]
		internal object AddClonedMirrored(object someAction, bool mirrorX, bool mirrorY)
		{
			return null;
		}

		[Token(Token = "0x6002C34")]
		[Address(RVA = "0xD24E4C", Offset = "0xD24E4C", VA = "0xD24E4C")]
		internal object AddClonedXMirrored(object someAction)
		{
			return null;
		}

		[Token(Token = "0x6002C35")]
		[Address(RVA = "0xD24E58", Offset = "0xD24E58", VA = "0xD24E58")]
		internal WallObstacleAction CreateWallActionOnBeat(WallObstacleAction.WallType wallType, Vector2 position, float lengthInBeats)
		{
			return null;
		}

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0xD24F28", Offset = "0xD24F28", VA = "0xD24F28")]
		internal GapSetting GetGapSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0xD24F44", Offset = "0xD24F44", VA = "0xD24F44")]
		internal int EnforceGapIfNoGapExists(int fromWhere, int gappyBeatsWeNeed)
		{
			return default(int);
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0xD24FF8", Offset = "0xD24FF8", VA = "0xD24FF8")]
		internal void EnforceGapHere(int gappyBeatsWeNeed)
		{
		}

		[Token(Token = "0x6002C39")]
		[Address(RVA = "0xD24FE0", Offset = "0xD24FE0", VA = "0xD24FE0")]
		private bool DoesBeatHaveActions(OnBeat onBeat)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0xD25008", Offset = "0xD25008", VA = "0xD25008")]
		internal void AdjustForHalfBeats()
		{
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0xD2504C", Offset = "0xD2504C", VA = "0xD2504C")]
		protected Pattern()
		{
		}
	}
	[Token(Token = "0x2000793")]
	public class PatternBalls : Pattern
	{
		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0xD23CFC", Offset = "0xD23CFC", VA = "0xD23CFC")]
		public PatternBalls()
		{
		}

		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0xD25054", Offset = "0xD25054", VA = "0xD25054", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C40")]
		[Address(RVA = "0xD25878", Offset = "0xD25878", VA = "0xD25878")]
		private GenConfigManager.GCBallsPerBeatType ChooseBallAmount()
		{
			return default(GenConfigManager.GCBallsPerBeatType);
		}

		[Token(Token = "0x6002C41")]
		[Address(RVA = "0xD25A0C", Offset = "0xD25A0C", VA = "0xD25A0C")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}

		[Token(Token = "0x6002C42")]
		[Address(RVA = "0xD257FC", Offset = "0xD257FC", VA = "0xD257FC")]
		private GenConfigManager.BallsConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000794")]
	public class PatternDodge : Pattern
	{
		[Token(Token = "0x6002C43")]
		[Address(RVA = "0xD25B30", Offset = "0xD25B30", VA = "0xD25B30")]
		public PatternDodge()
		{
		}

		[Token(Token = "0x6002C44")]
		[Address(RVA = "0xD25B50", Offset = "0xD25B50", VA = "0xD25B50", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C45")]
		[Address(RVA = "0xD2645C", Offset = "0xD2645C", VA = "0xD2645C")]
		private GenConfigManager.GCJumpElementType ChooseElementType()
		{
			return default(GenConfigManager.GCJumpElementType);
		}

		[Token(Token = "0x6002C46")]
		[Address(RVA = "0xD268A0", Offset = "0xD268A0", VA = "0xD268A0")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}

		[Token(Token = "0x6002C47")]
		[Address(RVA = "0xD26344", Offset = "0xD26344", VA = "0xD26344")]
		private GenConfigManager.DodgeConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000795")]
	public class PatternGap : Pattern
	{
		[Token(Token = "0x6002C48")]
		[Address(RVA = "0xD26A2C", Offset = "0xD26A2C", VA = "0xD26A2C")]
		public PatternGap()
		{
		}

		[Token(Token = "0x6002C49")]
		[Address(RVA = "0xD26A48", Offset = "0xD26A48", VA = "0xD26A48", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}
	}
	[Token(Token = "0x2000796")]
	public class PatternSquat : Pattern
	{
		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0xD26E0C", Offset = "0xD26E0C", VA = "0xD26E0C")]
		public PatternSquat()
		{
		}

		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0xD26E2C", Offset = "0xD26E2C", VA = "0xD26E2C", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0xD27C98", Offset = "0xD27C98", VA = "0xD27C98")]
		private object CreateIndividualElement(GenConfigManager.GCJumpElementType elementType, Window sideBallPlacement, Window sideSwingPlacement, Window sideSpikePlacement)
		{
			return null;
		}

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0xD27844", Offset = "0xD27844", VA = "0xD27844")]
		private GenConfigManager.GCJumpElementType ChooseElementType(bool skipSpike)
		{
			return default(GenConfigManager.GCJumpElementType);
		}

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0xD27EFC", Offset = "0xD27EFC", VA = "0xD27EFC")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0xD277C8", Offset = "0xD277C8", VA = "0xD277C8")]
		private GenConfigManager.SquatConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000797")]
	public class PatternStream : Pattern
	{
		[Token(Token = "0x6002C50")]
		[Address(RVA = "0xD2812C", Offset = "0xD2812C", VA = "0xD2812C")]
		public PatternStream()
		{
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0xD2814C", Offset = "0xD2814C", VA = "0xD2814C", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C52")]
		[Address(RVA = "0xD288BC", Offset = "0xD288BC", VA = "0xD288BC")]
		private GenConfigManager.StreamConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000798")]
	public class PatternSwings : Pattern
	{
		[Token(Token = "0x6002C53")]
		[Address(RVA = "0xD2957C", Offset = "0xD2957C", VA = "0xD2957C")]
		public PatternSwings()
		{
		}

		[Token(Token = "0x6002C54")]
		[Address(RVA = "0xD2959C", Offset = "0xD2959C", VA = "0xD2959C", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0xD2A060", Offset = "0xD2A060", VA = "0xD2A060")]
		private GenConfigManager.GCSwingType ChooseSwingType()
		{
			return default(GenConfigManager.GCSwingType);
		}

		[Token(Token = "0x6002C56")]
		[Address(RVA = "0xD2A308", Offset = "0xD2A308", VA = "0xD2A308")]
		private GenConfigManager.GCSpikeBetweenSwingsType ChooseIfSpike()
		{
			return default(GenConfigManager.GCSpikeBetweenSwingsType);
		}

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0xD2A28C", Offset = "0xD2A28C", VA = "0xD2A28C")]
		private GenConfigManager.SwingsConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000799")]
	public class PatternWall : Pattern
	{
		[Token(Token = "0x6002C58")]
		[Address(RVA = "0xD2A498", Offset = "0xD2A498", VA = "0xD2A498")]
		public PatternWall()
		{
		}

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0xD2A4B8", Offset = "0xD2A4B8", VA = "0xD2A4B8", Slot = "4")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0xD2AC80", Offset = "0xD2AC80", VA = "0xD2AC80")]
		private GenConfigManager.GCWallType ChooseWallType()
		{
			return default(GenConfigManager.GCWallType);
		}

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0xD2AEE4", Offset = "0xD2AEE4", VA = "0xD2AEE4")]
		private GenConfigManager.WallsConfiguration GetConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x200079A")]
	public class SongStatistics
	{
		[Token(Token = "0x4003115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int punches;

		[Token(Token = "0x4003116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int swings;

		[Token(Token = "0x4003117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int streams;

		[Token(Token = "0x4003118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int dodges;

		[Token(Token = "0x4003119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int squats;

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0xD2AF60", Offset = "0xD2AF60", VA = "0xD2AF60")]
		public SongStatistics(int punches, int swings, int streams, int dodges, int squats)
		{
		}
	}
	[Token(Token = "0x200079B")]
	public class GapSetting
	{
		[Token(Token = "0x17000530")]
		public int Before
		{
			[Token(Token = "0x6002C5D")]
			[Address(RVA = "0xD2AFB0", Offset = "0xD2AFB0", VA = "0xD2AFB0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C5E")]
			[Address(RVA = "0xD2AFB8", Offset = "0xD2AFB8", VA = "0xD2AFB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000531")]
		public int Mid
		{
			[Token(Token = "0x6002C5F")]
			[Address(RVA = "0xD2AFC0", Offset = "0xD2AFC0", VA = "0xD2AFC0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C60")]
			[Address(RVA = "0xD2AFC8", Offset = "0xD2AFC8", VA = "0xD2AFC8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000532")]
		public int After
		{
			[Token(Token = "0x6002C61")]
			[Address(RVA = "0xD2AFD0", Offset = "0xD2AFD0", VA = "0xD2AFD0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C62")]
			[Address(RVA = "0xD2AFD8", Offset = "0xD2AFD8", VA = "0xD2AFD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0xD2AFE0", Offset = "0xD2AFE0", VA = "0xD2AFE0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002C64")]
		[Address(RVA = "0xD2B0DC", Offset = "0xD2B0DC", VA = "0xD2B0DC")]
		public GapSetting(int before, int mid, int after)
		{
		}
	}
	[Token(Token = "0x200079C")]
	public class GeneratorUserSettings20 : GeneratorUserSettings
	{
		[Token(Token = "0x200079D")]
		public enum Setting
		{
			[Token(Token = "0x4003125")]
			Punches,
			[Token(Token = "0x4003126")]
			Swings,
			[Token(Token = "0x4003127")]
			Squats,
			[Token(Token = "0x4003128")]
			Dodges,
			[Token(Token = "0x4003129")]
			Streams
		}

		[Token(Token = "0x400311D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float MINVALUE;

		[Token(Token = "0x400311E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float MAXVALUE;

		[Token(Token = "0x400311F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float punches;

		[Token(Token = "0x4003120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float swings;

		[Token(Token = "0x4003121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float squats;

		[Token(Token = "0x4003122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float dodges;

		[Token(Token = "0x4003123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float streams;

		[Token(Token = "0x6002C65")]
		[Address(RVA = "0xD2B118", Offset = "0xD2B118", VA = "0xD2B118", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002C66")]
		[Address(RVA = "0xD2B124", Offset = "0xD2B124", VA = "0xD2B124", Slot = "4")]
		public override string Serialize()
		{
			return null;
		}

		[Token(Token = "0x6002C67")]
		[Address(RVA = "0xD2B2B4", Offset = "0xD2B2B4", VA = "0xD2B2B4", Slot = "5")]
		public override GeneratorUserSettings DeSerialize(string json)
		{
			return null;
		}

		[Token(Token = "0x6002C68")]
		[Address(RVA = "0xD2B448", Offset = "0xD2B448", VA = "0xD2B448", Slot = "6")]
		public override GeneratorUserSettings ShallowCopy()
		{
			return null;
		}

		[Token(Token = "0x6002C69")]
		[Address(RVA = "0xD2B4C8", Offset = "0xD2B4C8", VA = "0xD2B4C8", Slot = "8")]
		public override void Set(string name, float value)
		{
		}

		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0xD2B5F8", Offset = "0xD2B5F8", VA = "0xD2B5F8", Slot = "9")]
		public override float Get(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0xD2B720", Offset = "0xD2B720", VA = "0xD2B720")]
		internal string AsShortInfo()
		{
			return null;
		}

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0xD2BAB4", Offset = "0xD2BAB4", VA = "0xD2BAB4", Slot = "7")]
		public override bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0xD2BAFC", Offset = "0xD2BAFC", VA = "0xD2BAFC")]
		public float GetNormalized(Setting s)
		{
			return default(float);
		}

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0xD2B440", Offset = "0xD2B440", VA = "0xD2B440")]
		public GeneratorUserSettings20()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200079E")]
	internal class NothingLeftToSelectException : Exception
	{
		[Token(Token = "0x6002C70")]
		[Address(RVA = "0xD2BC18", Offset = "0xD2BC18", VA = "0xD2BC18")]
		public NothingLeftToSelectException()
		{
		}

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0xD269C4", Offset = "0xD269C4", VA = "0xD269C4")]
		public NothingLeftToSelectException(string message)
		{
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0xD2BC70", Offset = "0xD2BC70", VA = "0xD2BC70")]
		protected NothingLeftToSelectException(SerializationInfo info, StreamingContext context)
		{
		}
	}
	[Token(Token = "0x200079F")]
	internal class ProportionalSelection<E>
	{
		[Token(Token = "0x20007A0")]
		private class Range
		{
			[Token(Token = "0x400312B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal E key;

			[Token(Token = "0x400312C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int fromInclusive;

			[Token(Token = "0x400312D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int toExclusive;

			[Token(Token = "0x6002C77")]
			public Range(E key, int fromInclusive, int toExclusive)
			{
			}

			[Token(Token = "0x6002C78")]
			public bool Contains(int number)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400312A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<Range> ranges;

		[Token(Token = "0x6002C73")]
		public ProportionalSelection()
		{
		}

		[Token(Token = "0x6002C74")]
		internal void AddElement(E key, int amount)
		{
		}

		[Token(Token = "0x6002C75")]
		internal E Select()
		{
			return (E)null;
		}

		[Token(Token = "0x6002C76")]
		internal bool IsEmpty()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20007A2")]
	public class Range
	{
		[Token(Token = "0x4003131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float from;

		[Token(Token = "0x4003132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float to;

		[Token(Token = "0x17000533")]
		public float RandomPosition
		{
			[Token(Token = "0x6002C7E")]
			[Address(RVA = "0xD263C0", Offset = "0xD263C0", VA = "0xD263C0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0xD2BCF0", Offset = "0xD2BCF0", VA = "0xD2BCF0")]
		public Range(float from, float to)
		{
		}

		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0xD2BD84", Offset = "0xD2BD84", VA = "0xD2BD84", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002C80")]
		[Address(RVA = "0xD2BE5C", Offset = "0xD2BE5C", VA = "0xD2BE5C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C81")]
		[Address(RVA = "0xD2BF04", Offset = "0xD2BF04", VA = "0xD2BF04", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20007A3")]
	public class SplineGenerator
	{
		[Token(Token = "0x4003133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int UNITS_PER_BEAT;

		[Token(Token = "0x4003134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BezierSpline spline;

		[Token(Token = "0x4003135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<BezierPoint> points;

		[Token(Token = "0x6002C82")]
		[Address(RVA = "0xD287B8", Offset = "0xD287B8", VA = "0xD287B8")]
		public SplineGenerator()
		{
		}

		[Token(Token = "0x6002C83")]
		[Address(RVA = "0xD28938", Offset = "0xD28938", VA = "0xD28938")]
		public BezierPoint AddPoint(Vector2 xy, float beatOffset)
		{
			return null;
		}

		[Token(Token = "0x6002C84")]
		[Address(RVA = "0xD2BF50", Offset = "0xD2BF50", VA = "0xD2BF50")]
		public BezierPoint AddCopyOfPoint(BezierPoint b)
		{
			return null;
		}

		[Token(Token = "0x6002C85")]
		[Address(RVA = "0xD28B50", Offset = "0xD28B50", VA = "0xD28B50")]
		public void RepeatSequence(int times, bool mirroring, bool skipFirstOnRepetition)
		{
		}

		[Token(Token = "0x6002C86")]
		[Address(RVA = "0xD29058", Offset = "0xD29058", VA = "0xD29058")]
		public void MoveInXY(float xOffset, float yOffset)
		{
		}

		[Token(Token = "0x6002C87")]
		[Address(RVA = "0xD29130", Offset = "0xD29130", VA = "0xD29130")]
		public void Calculate()
		{
		}

		[Token(Token = "0x6002C88")]
		[Address(RVA = "0xD28EEC", Offset = "0xD28EEC", VA = "0xD28EEC")]
		internal SplineGenerator CreateCopy()
		{
			return null;
		}

		[Token(Token = "0x6002C89")]
		[Address(RVA = "0xD291D4", Offset = "0xD291D4", VA = "0xD291D4")]
		internal int AddStreamActions(int whereToStart, SongLayout layout, StreamAction.Id streamId)
		{
			return default(int);
		}

		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0xD29160", Offset = "0xD29160", VA = "0xD29160")]
		internal void Dispose()
		{
		}
	}
	[Token(Token = "0x20007A5")]
	public enum UserPosition
	{
		[Token(Token = "0x4003139")]
		Center,
		[Token(Token = "0x400313A")]
		Left,
		[Token(Token = "0x400313B")]
		Right
	}
	[Token(Token = "0x20007A6")]
	public class Window
	{
		[Token(Token = "0x400313C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float leftX;

		[Token(Token = "0x400313D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float rightX;

		[Token(Token = "0x400313E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float lowerY;

		[Token(Token = "0x400313F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float upperY;

		[Token(Token = "0x17000534")]
		public Vector2 RandomPosition
		{
			[Token(Token = "0x6002C8F")]
			[Address(RVA = "0xD280EC", Offset = "0xD280EC", VA = "0xD280EC")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6002C90")]
		[Address(RVA = "0xD28020", Offset = "0xD28020", VA = "0xD28020")]
		public Window(float x1, float x2, float y1, float y2)
		{
		}

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0xD2C328", Offset = "0xD2C328", VA = "0xD2C328")]
		public Window(Vector2 center, Vector2 delta)
		{
		}

		[Token(Token = "0x6002C92")]
		[Address(RVA = "0xD2C378", Offset = "0xD2C378", VA = "0xD2C378")]
		internal Window ShrinkBy(float reduceX, float reduceY)
		{
			return null;
		}

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0xD2C418", Offset = "0xD2C418", VA = "0xD2C418")]
		internal static Window GetOverlapWindow(Window w1, Window w2)
		{
			return null;
		}

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0xD2C528", Offset = "0xD2C528", VA = "0xD2C528", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002C95")]
		[Address(RVA = "0xD2C73C", Offset = "0xD2C73C", VA = "0xD2C73C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C96")]
		[Address(RVA = "0xD2C804", Offset = "0xD2C804", VA = "0xD2C804", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002C97")]
		[Address(RVA = "0xD263CC", Offset = "0xD263CC", VA = "0xD263CC")]
		internal Window MultiplyX(float negativeOrPositive)
		{
			return null;
		}

		[Token(Token = "0x6002C98")]
		[Address(RVA = "0xD27E6C", Offset = "0xD27E6C", VA = "0xD27E6C")]
		internal Window ShiftY(float shiftY)
		{
			return null;
		}
	}
}
namespace powerbeatsvr.generator.v10
{
	[Token(Token = "0x20007A7")]
	public class Generator
	{
		[Token(Token = "0x4003140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Song song;

		[Token(Token = "0x4003141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Song.Difficulty difficulty;

		[Token(Token = "0x4003142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int numberOfBeatsInSong;

		[Token(Token = "0x4003143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GenOverallConfig config;

		[Token(Token = "0x4003144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SongLayout layout;

		[Token(Token = "0x4003145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProportionalSelection<Pattern> patternSelector;

		[Token(Token = "0x6002C99")]
		[Address(RVA = "0xD2C884", Offset = "0xD2C884", VA = "0xD2C884")]
		public Generator(Song song, Song.Difficulty difficulty, GenOverallConfig configuration)
		{
		}

		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0xD2C92C", Offset = "0xD2C92C", VA = "0xD2C92C")]
		public void Generate()
		{
		}

		[Token(Token = "0x6002C9B")]
		[Address(RVA = "0xD2CDFC", Offset = "0xD2CDFC", VA = "0xD2CDFC")]
		private Pattern SelectNextPattern(Pattern lastPattern, bool allowRepetitions)
		{
			return null;
		}

		[Token(Token = "0x6002C9C")]
		[Address(RVA = "0xD2D334", Offset = "0xD2D334", VA = "0xD2D334")]
		internal SongLayout GetLayout()
		{
			return null;
		}

		[Token(Token = "0x6002C9D")]
		[Address(RVA = "0xD2CE74", Offset = "0xD2CE74", VA = "0xD2CE74")]
		private void CleanUpLastBeats(SongLayout layout)
		{
		}
	}
	[Token(Token = "0x20007A8")]
	public abstract class Pattern
	{
		[Token(Token = "0x20007A9")]
		internal enum BallType
		{
			[Token(Token = "0x4003156")]
			Normal,
			[Token(Token = "0x4003157")]
			Spike,
			[Token(Token = "0x4003158")]
			Hard
		}

		[Token(Token = "0x20007AA")]
		internal enum SwingVertical
		{
			[Token(Token = "0x400315A")]
			Up,
			[Token(Token = "0x400315B")]
			Down
		}

		[Token(Token = "0x20007AB")]
		internal enum SwingHorizontal
		{
			[Token(Token = "0x400315D")]
			Left,
			[Token(Token = "0x400315E")]
			Right,
			[Token(Token = "0x400315F")]
			None
		}

		[Token(Token = "0x20007AC")]
		internal class TwoHittableActions
		{
			[Token(Token = "0x4003160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 centerPosition;

			[Token(Token = "0x4003161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal BeatAction a1;

			[Token(Token = "0x4003162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal BeatAction a2;

			[Token(Token = "0x6002CC3")]
			[Address(RVA = "0xD2E538", Offset = "0xD2E538", VA = "0xD2E538")]
			public TwoHittableActions(Vector2 centerPosition, BeatAction a1, BeatAction a2)
			{
			}
		}

		[Token(Token = "0x20007AD")]
		internal class SwingActions
		{
			[Token(Token = "0x4003163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 firstPosition;

			[Token(Token = "0x4003164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal BeatAction a1;

			[Token(Token = "0x4003165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal BeatAction a2;

			[Token(Token = "0x4003166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal BeatAction a3;

			[Token(Token = "0x6002CC4")]
			[Address(RVA = "0xD2E7EC", Offset = "0xD2E7EC", VA = "0xD2E7EC")]
			public SwingActions(Vector2 centerPosition, BeatAction a1, BeatAction a2, BeatAction a3)
			{
			}
		}

		[Token(Token = "0x4003147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal GenSettingDescriptor.Option repetition0;

		[Token(Token = "0x4003148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal GenSettingDescriptor.Option repetition1;

		[Token(Token = "0x4003149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal GenSettingDescriptor.Option repetition2;

		[Token(Token = "0x400314A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GenSettingDescriptor relativeProportion;

		[Token(Token = "0x400314B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal GenSettingDescriptor beatAdvance;

		[Token(Token = "0x400314C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal GenSettingDescriptor enforceGapStartEnd;

		[Token(Token = "0x400314D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal GenSettingDescriptor repetitions;

		[Token(Token = "0x400314E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal GenPatternConfig config;

		[Token(Token = "0x400314F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal SongLayout layout;

		[Token(Token = "0x4003150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int startBeat;

		[Token(Token = "0x4003151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal int currentBeat;

		[Token(Token = "0x4003152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal UserPosition userPosition;

		[Token(Token = "0x4003153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal Pattern lastPattern;

		[Token(Token = "0x4003154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal OnBeat startBeatOnBeat;

		[Token(Token = "0x17000535")]
		public string Name
		{
			[Token(Token = "0x6002C9E")]
			[Address(RVA = "0xD2D33C", Offset = "0xD2D33C", VA = "0xD2D33C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C9F")]
			[Address(RVA = "0xD2D344", Offset = "0xD2D344", VA = "0xD2D344")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0xD2D34C", Offset = "0xD2D34C", VA = "0xD2D34C")]
		public Pattern(string name)
		{
		}

		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0xD2D820", Offset = "0xD2D820", VA = "0xD2D820", Slot = "4")]
		public virtual List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CA2")]
		[Address(RVA = "0xD2D980", Offset = "0xD2D980", VA = "0xD2D980")]
		internal void SetConfig(GenPatternConfig config)
		{
		}

		[Token(Token = "0x6002CA3")]
		[Address(RVA = "0xD2CD60", Offset = "0xD2CD60", VA = "0xD2CD60")]
		public int GetRelativeProportion()
		{
			return default(int);
		}

		[Token(Token = "0x6002CA4")]
		[Address(RVA = "0xD2D988", Offset = "0xD2D988", VA = "0xD2D988")]
		internal int GetBeatCountOfThisPattern()
		{
			return default(int);
		}

		[Token(Token = "0x6002CA5")]
		[Address(RVA = "0xD2D994", Offset = "0xD2D994", VA = "0xD2D994", Slot = "5")]
		internal virtual void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CA6")]
		[Address(RVA = "0xD2DAC4", Offset = "0xD2DAC4", VA = "0xD2DAC4")]
		internal int GetCurrentBeat()
		{
			return default(int);
		}

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0xD2DACC", Offset = "0xD2DACC", VA = "0xD2DACC")]
		internal void GoToNextBeat()
		{
		}

		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0xD2DAF4", Offset = "0xD2DAF4", VA = "0xD2DAF4")]
		internal int GetBeatsToAdvance()
		{
			return default(int);
		}

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0xD2DBA0", Offset = "0xD2DBA0", VA = "0xD2DBA0")]
		internal bool IsHalfBeat()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0xD2DC48", Offset = "0xD2DC48", VA = "0xD2DC48")]
		internal void AddRepetitions(int repetitions, int fromBeat, int toBeat)
		{
		}

		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0xD2DC94", Offset = "0xD2DC94", VA = "0xD2DC94")]
		private void CloneBeats(int fromBeat, int toBeat)
		{
		}

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0xD2DD1C", Offset = "0xD2DD1C", VA = "0xD2DD1C")]
		internal int ChooseRepetition()
		{
			return default(int);
		}

		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0xD2DA08", Offset = "0xD2DA08", VA = "0xD2DA08")]
		private OnBeat GetOrCreateCurrentBeat()
		{
			return null;
		}

		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0xD2DF44", Offset = "0xD2DF44", VA = "0xD2DF44")]
		internal BeatAction CreateSingleBallAction(Vector2 position, BallType type, float subbeatOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0xD2E144", Offset = "0xD2E144", VA = "0xD2E144")]
		internal BeatAction CreateSingleBallAction(Window window, BallType type, float subbeatOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0xD2E1C8", Offset = "0xD2E1C8", VA = "0xD2E1C8")]
		internal TwoHittableActions CreateDoubleBallAction(Window window, BallType type, bool withRandomY)
		{
			return null;
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0xD2E46C", Offset = "0xD2E46C", VA = "0xD2E46C")]
		internal float NegativeOrNot()
		{
			return default(float);
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0xD2E590", Offset = "0xD2E590", VA = "0xD2E590")]
		internal bool Decide()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0xD2E5B4", Offset = "0xD2E5B4", VA = "0xD2E5B4")]
		internal UserPosition GetOtherSide(UserPosition lastUserActionSide)
		{
			return default(UserPosition);
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0xD2E5CC", Offset = "0xD2E5CC", VA = "0xD2E5CC")]
		internal UserPosition AlternateTheSideOfTheUser(UserPosition lastUserActionSide)
		{
			return default(UserPosition);
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0xD2E61C", Offset = "0xD2E61C", VA = "0xD2E61C")]
		internal SwingActions CreateVerticalSwingAction(Window window, SwingHorizontal horiz, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0xD2E7A8", Offset = "0xD2E7A8", VA = "0xD2E7A8")]
		internal SwingActions CreateVerticalSwingAction(Window window, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0xD2E7E0", Offset = "0xD2E7E0", VA = "0xD2E7E0")]
		internal SwingActions CreateVerticalSwingAction(Vector2 startPosition, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0xD2E658", Offset = "0xD2E658", VA = "0xD2E658")]
		internal SwingActions CreateVerticalSwingAction(Vector2 startPosition, SwingHorizontal horiz, SwingVertical vert)
		{
			return null;
		}

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0xD2E860", Offset = "0xD2E860", VA = "0xD2E860")]
		internal SwingActions CreateHorizontalSwingAction(Window window, SwingHorizontal horiz)
		{
			return null;
		}

		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0xD2E894", Offset = "0xD2E894", VA = "0xD2E894")]
		internal SwingActions CreateHorizontalSwingAction(Vector2 startPosition, SwingHorizontal horiz)
		{
			return null;
		}

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0xD2E9C4", Offset = "0xD2E9C4", VA = "0xD2E9C4")]
		internal object AddClonedMirrored(object someAction, bool mirrorX, bool mirrorY)
		{
			return null;
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0xD2EDCC", Offset = "0xD2EDCC", VA = "0xD2EDCC")]
		internal object AddClonedXMirrored(object someAction)
		{
			return null;
		}

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0xD2EDD8", Offset = "0xD2EDD8", VA = "0xD2EDD8")]
		internal WallObstacleAction CreateWallActionOnBeat(WallObstacleAction.WallType wallType, Vector2 position, float lengthInBeats)
		{
			return null;
		}

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0xD2EEA8", Offset = "0xD2EEA8", VA = "0xD2EEA8")]
		internal GapSetting GetGapSettings()
		{
			return null;
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0xD2EF50", Offset = "0xD2EF50", VA = "0xD2EF50")]
		internal int EnforceGapIfNoGapExists(int fromWhere, int gappyBeatsWeNeed)
		{
			return default(int);
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0xD2F004", Offset = "0xD2F004", VA = "0xD2F004")]
		internal void EnforceGapHere(int gappyBeatsWeNeed)
		{
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0xD2EFEC", Offset = "0xD2EFEC", VA = "0xD2EFEC")]
		private bool DoesBeatHaveActions(OnBeat onBeat)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CC2")]
		[Address(RVA = "0xD2F014", Offset = "0xD2F014", VA = "0xD2F014")]
		internal void AdjustForHalfBeats()
		{
		}
	}
	[Token(Token = "0x20007AE")]
	public class PatternBalls : Pattern
	{
		[Token(Token = "0x4003167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal GenSettingDescriptor.Option ballsPerBeat1;

		[Token(Token = "0x4003168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal GenSettingDescriptor.Option ballsPerBeat2;

		[Token(Token = "0x4003169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal GenSettingDescriptor.Option typeOfBallNormal;

		[Token(Token = "0x400316A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal GenSettingDescriptor.Option typeOfBallHard;

		[Token(Token = "0x400316B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal GenSettingDescriptor oneOrTwoBalls;

		[Token(Token = "0x400316C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal GenSettingDescriptor hardOrNormalBall;

		[Token(Token = "0x400316D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal GenSettingDescriptor ballWindow;

		[Token(Token = "0x400316E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GenSettingDescriptor ballOffsetX;

		[Token(Token = "0x400316F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GenSettingDescriptor ballOffsetY;

		[Token(Token = "0x6002CC5")]
		[Address(RVA = "0xD2F048", Offset = "0xD2F048", VA = "0xD2F048")]
		public PatternBalls(string name)
		{
		}

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0xD2F568", Offset = "0xD2F568", VA = "0xD2F568", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0xD2F78C", Offset = "0xD2F78C", VA = "0xD2F78C", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0xD2FF3C", Offset = "0xD2FF3C", VA = "0xD2FF3C")]
		private GenSettingDescriptor.Option ChooseBallAmount()
		{
			return null;
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0xD300C8", Offset = "0xD300C8", VA = "0xD300C8")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}
	}
	[Token(Token = "0x20007AF")]
	public class PatternGap : Pattern
	{
		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0xD303A4", Offset = "0xD303A4", VA = "0xD303A4")]
		public PatternGap(string name)
		{
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0xD303A8", Offset = "0xD303A8", VA = "0xD303A8", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}
	}
	[Token(Token = "0x20007B0")]
	public class PatternJumpLeftRight : Pattern
	{
		[Token(Token = "0x4003170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal GenSettingDescriptor.Option elementTypeSingleBall;

		[Token(Token = "0x4003171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal GenSettingDescriptor.Option elementTypeDoubleBall;

		[Token(Token = "0x4003172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal GenSettingDescriptor.Option elementTypeSpikeObstacle;

		[Token(Token = "0x4003173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal GenSettingDescriptor.Option elementTypeSwingUp;

		[Token(Token = "0x4003174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal GenSettingDescriptor.Option elementTypeSwingIn;

		[Token(Token = "0x4003175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal GenSettingDescriptor.Option elementTypeSwingNothing;

		[Token(Token = "0x4003176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GenSettingDescriptor elementTypes;

		[Token(Token = "0x4003177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal GenSettingDescriptor.Option typeOfBallNormal;

		[Token(Token = "0x4003178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal GenSettingDescriptor.Option typeOfBallHard;

		[Token(Token = "0x4003179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal GenSettingDescriptor hardOrNormalBall;

		[Token(Token = "0x400317A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal GenSettingDescriptor wallRange;

		[Token(Token = "0x400317B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal GenSettingDescriptor ballWindow;

		[Token(Token = "0x400317C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GenSettingDescriptor spikeWindow;

		[Token(Token = "0x400317D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GenSettingDescriptor swingUpWindow;

		[Token(Token = "0x400317E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private GenSettingDescriptor swingSideWindow;

		[Token(Token = "0x6002CCC")]
		[Address(RVA = "0xD30764", Offset = "0xD30764", VA = "0xD30764")]
		public PatternJumpLeftRight(string name)
		{
		}

		[Token(Token = "0x6002CCD")]
		[Address(RVA = "0xD30F8C", Offset = "0xD30F8C", VA = "0xD30F8C", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CCE")]
		[Address(RVA = "0xD31268", Offset = "0xD31268", VA = "0xD31268", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CCF")]
		[Address(RVA = "0xD31C10", Offset = "0xD31C10", VA = "0xD31C10")]
		private GenSettingDescriptor.Option ChooseElementType()
		{
			return null;
		}

		[Token(Token = "0x6002CD0")]
		[Address(RVA = "0xD31EF8", Offset = "0xD31EF8", VA = "0xD31EF8")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}
	}
	[Token(Token = "0x20007B1")]
	public class PatternJumpUpDown : Pattern
	{
		[Token(Token = "0x400317F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal GenSettingDescriptor.Option elementTypeSingleBall;

		[Token(Token = "0x4003180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal GenSettingDescriptor.Option elementTypeDoubleBall;

		[Token(Token = "0x4003181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal GenSettingDescriptor.Option elementTypeSpikeObstacle;

		[Token(Token = "0x4003182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal GenSettingDescriptor.Option elementTypeSwingSide;

		[Token(Token = "0x4003183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal GenSettingDescriptor.Option elementTypeNothing;

		[Token(Token = "0x4003184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GenSettingDescriptor elementTypes;

		[Token(Token = "0x4003185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal GenSettingDescriptor.Option typeOfBallNormal;

		[Token(Token = "0x4003186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal GenSettingDescriptor.Option typeOfBallHard;

		[Token(Token = "0x4003187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal GenSettingDescriptor hardOrNormalBall;

		[Token(Token = "0x4003188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GenSettingDescriptor wallRange;

		[Token(Token = "0x4003189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GenSettingDescriptor ballSideWindow;

		[Token(Token = "0x400318A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GenSettingDescriptor swingSideWindow;

		[Token(Token = "0x400318B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GenSettingDescriptor spikeSideWindow;

		[Token(Token = "0x400318C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GenSettingDescriptor yElementDelta;

		[Token(Token = "0x6002CD1")]
		[Address(RVA = "0xD32074", Offset = "0xD32074", VA = "0xD32074")]
		public PatternJumpUpDown(string name)
		{
		}

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0xD32804", Offset = "0xD32804", VA = "0xD32804", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0xD32AE0", Offset = "0xD32AE0", VA = "0xD32AE0", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0xD33864", Offset = "0xD33864", VA = "0xD33864")]
		private object CreateIndividualElement(GenSettingDescriptor.Option elementType, Window sideBallPlacement, Window sideSwingPlacement, Window sideSpikePlacement)
		{
			return null;
		}

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0xD335A4", Offset = "0xD335A4", VA = "0xD335A4")]
		private GenSettingDescriptor.Option ChooseElementType(GenSettingDescriptor.Option without)
		{
			return null;
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0xD33A9C", Offset = "0xD33A9C", VA = "0xD33A9C")]
		private BallType ChooseBallType()
		{
			return default(BallType);
		}
	}
	[Token(Token = "0x20007B2")]
	public class PatternStream : Pattern
	{
		[Token(Token = "0x400318D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GenSettingDescriptor streamWaveOffsetX;

		[Token(Token = "0x400318E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GenSettingDescriptor streamWaveOffsetY;

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0xD33CE4", Offset = "0xD33CE4", VA = "0xD33CE4")]
		public PatternStream(string name)
		{
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0xD33E30", Offset = "0xD33E30", VA = "0xD33E30", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0xD33F40", Offset = "0xD33F40", VA = "0xD33F40", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}
	}
	[Token(Token = "0x20007B3")]
	public class PatternSwings : Pattern
	{
		[Token(Token = "0x400318F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal GenSettingDescriptor.Option swingTypeSingleLeftRight;

		[Token(Token = "0x4003190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal GenSettingDescriptor.Option swingTypeSingleDownDown;

		[Token(Token = "0x4003191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal GenSettingDescriptor.Option swingTypeSingleDownUp;

		[Token(Token = "0x4003192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal GenSettingDescriptor.Option swingTypeDoubleUpDownDuck;

		[Token(Token = "0x4003193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal GenSettingDescriptor.Option swingTypeDoubleLeftRight;

		[Token(Token = "0x4003194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal GenSettingDescriptor.Option spikeBetweenSwingYes;

		[Token(Token = "0x4003195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal GenSettingDescriptor.Option spikeBetweenSwingNo;

		[Token(Token = "0x4003196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal GenSettingDescriptor swingType;

		[Token(Token = "0x4003197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal GenSettingDescriptor spikeType;

		[Token(Token = "0x4003198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GenSettingDescriptor singleSwingLeftRightWindow;

		[Token(Token = "0x4003199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GenSettingDescriptor singleSwingDownDownWindow;

		[Token(Token = "0x400319A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GenSettingDescriptor singleSwingDownUpWindow;

		[Token(Token = "0x400319B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GenSettingDescriptor doubleSwingUpDownDuckWindow;

		[Token(Token = "0x400319C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GenSettingDescriptor doubleSwingLeftRightWindow;

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0xD35368", Offset = "0xD35368", VA = "0xD35368")]
		public PatternSwings(string name)
		{
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0xD35AE4", Offset = "0xD35AE4", VA = "0xD35AE4", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0xD35DC0", Offset = "0xD35DC0", VA = "0xD35DC0", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CDD")]
		[Address(RVA = "0xD36944", Offset = "0xD36944", VA = "0xD36944")]
		private GenSettingDescriptor.Option ChooseSwingType()
		{
			return null;
		}
	}
	[Token(Token = "0x20007B4")]
	public class PatternWall : Pattern
	{
		[Token(Token = "0x400319D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal GenSettingDescriptor.Option wallTypeForehead;

		[Token(Token = "0x400319E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal GenSettingDescriptor.Option wallTypeSide;

		[Token(Token = "0x400319F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal GenSettingDescriptor.Option wallTypeArchway;

		[Token(Token = "0x40031A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal GenSettingDescriptor wallType;

		[Token(Token = "0x40031A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GenSettingDescriptor wallWindowForehead;

		[Token(Token = "0x40031A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GenSettingDescriptor wallWindowSide;

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0xD36BD8", Offset = "0xD36BD8", VA = "0xD36BD8")]
		public PatternWall(string name)
		{
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0xD36F90", Offset = "0xD36F90", VA = "0xD36F90", Slot = "4")]
		public override List<GenSettingDescriptor> GetSettingDescriptors()
		{
			return null;
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0xD370FC", Offset = "0xD370FC", VA = "0xD370FC", Slot = "5")]
		internal override void GenerateBeats(SongLayout layout, int startBeat, Pattern lastPattern)
		{
		}

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0xD37760", Offset = "0xD37760", VA = "0xD37760")]
		private GenSettingDescriptor.Option ChooseWallType()
		{
			return null;
		}
	}
	[Token(Token = "0x20007B5")]
	public class GenConfigManager
	{
		[Token(Token = "0x40031A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GenConfigManager INSTANCE;

		[Token(Token = "0x17000536")]
		public List<Pattern> Patterns
		{
			[Token(Token = "0x6002CE2")]
			[Address(RVA = "0xD37940", Offset = "0xD37940", VA = "0xD37940")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CE3")]
			[Address(RVA = "0xD37948", Offset = "0xD37948", VA = "0xD37948")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000537")]
		public Dictionary<Tuple<Song.Difficulty, Song.BPMRange>, GenOverallConfig> Configurations
		{
			[Token(Token = "0x6002CE4")]
			[Address(RVA = "0xD37950", Offset = "0xD37950", VA = "0xD37950")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CE5")]
			[Address(RVA = "0xD37958", Offset = "0xD37958", VA = "0xD37958")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0xD37960", Offset = "0xD37960", VA = "0xD37960")]
		private GenConfigManager()
		{
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0xD38C40", Offset = "0xD38C40", VA = "0xD38C40")]
		public void ResetDifficulty(Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0xD38DA4", Offset = "0xD38DA4", VA = "0xD38DA4")]
		public void SettingsFromJSON(string s, Song.Difficulty d)
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0xD38384", Offset = "0xD38384", VA = "0xD38384")]
		private List<Tuple<Song.Difficulty, Song.BPMRange>> GetTuples()
		{
			return null;
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0xD39750", Offset = "0xD39750", VA = "0xD39750")]
		internal GenOverallConfig GetConfigurationFor(Song.Difficulty difficulty, Song.BPMRange bpmRange)
		{
			return null;
		}
	}
	[Token(Token = "0x20007B6")]
	public class GenOverallConfig : Dictionary<Pattern, GenPatternConfig>
	{
		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0xD38A84", Offset = "0xD38A84", VA = "0xD38A84")]
		public GenOverallConfig(List<Pattern> patterns)
		{
		}
	}
	[Token(Token = "0x20007B7")]
	public class GenPatternConfig : Dictionary<GenSettingDescriptor, GenSettingValue>
	{
		[Token(Token = "0x40031A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pattern pattern;

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0xD39848", Offset = "0xD39848", VA = "0xD39848")]
		public GenPatternConfig(Pattern p)
		{
		}
	}
	[Token(Token = "0x20007B8")]
	public class GenSettingDescriptor
	{
		[Token(Token = "0x20007B9")]
		public class Option
		{
			[Token(Token = "0x1700053C")]
			public string Name
			{
				[Token(Token = "0x6002CF7")]
				[Address(RVA = "0xD39B88", Offset = "0xD39B88", VA = "0xD39B88")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6002CF8")]
				[Address(RVA = "0xD39B90", Offset = "0xD39B90", VA = "0xD39B90")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6002CF9")]
			[Address(RVA = "0xD2D784", Offset = "0xD2D784", VA = "0xD2D784")]
			public Option(string name)
			{
			}
		}

		[Token(Token = "0x17000538")]
		public string Name
		{
			[Token(Token = "0x6002CEE")]
			[Address(RVA = "0xD39B44", Offset = "0xD39B44", VA = "0xD39B44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CEF")]
			[Address(RVA = "0xD39B4C", Offset = "0xD39B4C", VA = "0xD39B4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000539")]
		public Type Type
		{
			[Token(Token = "0x6002CF0")]
			[Address(RVA = "0xD39B54", Offset = "0xD39B54", VA = "0xD39B54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF1")]
			[Address(RVA = "0xD39B5C", Offset = "0xD39B5C", VA = "0xD39B5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700053A")]
		public bool IsMulti
		{
			[Token(Token = "0x6002CF2")]
			[Address(RVA = "0xD39B64", Offset = "0xD39B64", VA = "0xD39B64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002CF3")]
			[Address(RVA = "0xD39B6C", Offset = "0xD39B6C", VA = "0xD39B6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700053B")]
		public Option[] Options
		{
			[Token(Token = "0x6002CF4")]
			[Address(RVA = "0xD39B78", Offset = "0xD39B78", VA = "0xD39B78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF5")]
			[Address(RVA = "0xD39B80", Offset = "0xD39B80", VA = "0xD39B80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0xD2D7B4", Offset = "0xD2D7B4", VA = "0xD2D7B4")]
		public GenSettingDescriptor(string name, Type type, bool isMulti, Option[] options)
		{
		}
	}
	[Token(Token = "0x20007BA")]
	public class GenSettingValue
	{
		[Token(Token = "0x40031AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object value;

		[Token(Token = "0x40031AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<GenSettingDescriptor.Option, object> values;

		[Token(Token = "0x1700053D")]
		public GenSettingDescriptor Descriptor
		{
			[Token(Token = "0x6002CFA")]
			[Address(RVA = "0xD39B98", Offset = "0xD39B98", VA = "0xD39B98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CFB")]
			[Address(RVA = "0xD39BA0", Offset = "0xD39BA0", VA = "0xD39BA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0xD39A28", Offset = "0xD39A28", VA = "0xD39A28")]
		public GenSettingValue(GenSettingDescriptor descriptor)
		{
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0xD39BA8", Offset = "0xD39BA8", VA = "0xD39BA8")]
		public void SetIndividualValue(object o)
		{
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0xD39BB0", Offset = "0xD39BB0", VA = "0xD39BB0")]
		public object GetIndividualValue()
		{
			return null;
		}

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0xD2DEEC", Offset = "0xD2DEEC", VA = "0xD2DEEC")]
		public object GetMultiValue(GenSettingDescriptor.Option option)
		{
			return null;
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0xD39524", Offset = "0xD39524", VA = "0xD39524")]
		internal void FromJSON(JSONNode node)
		{
		}

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0xD39BB8", Offset = "0xD39BB8", VA = "0xD39BB8")]
		internal object ReadValueFromJSON(JSONNode node)
		{
			return null;
		}
	}
	[Token(Token = "0x20007BB")]
	public class GeneratorSettings10Adjuster : GeneratorSettingsAdjuster
	{
		[Token(Token = "0x40031AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider ballsSlider;

		[Token(Token = "0x40031B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI ballsText;

		[Token(Token = "0x40031B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider wallsSlider;

		[Token(Token = "0x40031B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI wallsText;

		[Token(Token = "0x40031B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Slider streamsSlider;

		[Token(Token = "0x40031B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI streamsText;

		[Token(Token = "0x40031B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Slider swingsSlider;

		[Token(Token = "0x40031B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI swingsText;

		[Token(Token = "0x40031B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI swingsLabel;

		[Token(Token = "0x40031B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Slider jumpsSlider;

		[Token(Token = "0x40031B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI jumpsText;

		[Token(Token = "0x40031BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI jumpsLabel;

		[Token(Token = "0x40031BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Slider squatsSlider;

		[Token(Token = "0x40031BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI squatsText;

		[Token(Token = "0x40031BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI squatsLabel;

		[Token(Token = "0x40031BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Color defaultTextColor;

		[Token(Token = "0x40031BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color disabledTextColor;

		[Token(Token = "0x40031C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public MenuSelectButton ballsDownButton;

		[Token(Token = "0x40031C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public MenuSelectButton ballsUpButton;

		[Token(Token = "0x40031C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public MenuSelectButton wallsDownButton;

		[Token(Token = "0x40031C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public MenuSelectButton wallsUpButton;

		[Token(Token = "0x40031C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public MenuSelectButton streamsDownButton;

		[Token(Token = "0x40031C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public MenuSelectButton streamsUpButton;

		[Token(Token = "0x40031C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public MenuSelectButton swingsDownButton;

		[Token(Token = "0x40031C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public MenuSelectButton swingsUpButton;

		[Token(Token = "0x40031C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public MenuSelectButton jumpsDownButton;

		[Token(Token = "0x40031CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public MenuSelectButton jumpsUpButton;

		[Token(Token = "0x40031CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public MenuSelectButton squatsDownButton;

		[Token(Token = "0x40031CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public MenuSelectButton squatsUpButton;

		[Token(Token = "0x40031CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public MenuSelectButton resetButton;

		[Token(Token = "0x40031CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GeneratorSetting10 setting;

		[Token(Token = "0x40031CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Song.Difficulty currentDifficulty;

		[Token(Token = "0x14000099")]
		private event Action<Song.Difficulty> ResetParameters
		{
			[Token(Token = "0x6002D02")]
			[Address(RVA = "0xD3A538", Offset = "0xD3A538", VA = "0xD3A538")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002D03")]
			[Address(RVA = "0xD3A5E8", Offset = "0xD3A5E8", VA = "0xD3A5E8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002D04")]
		[Address(RVA = "0xD3A698", Offset = "0xD3A698", VA = "0xD3A698")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D05")]
		[Address(RVA = "0xD3AAE0", Offset = "0xD3AAE0", VA = "0xD3AAE0", Slot = "6")]
		public override void SetResetParametersAction(Action<Song.Difficulty> r)
		{
		}

		[Token(Token = "0x6002D06")]
		[Address(RVA = "0xD3AAE8", Offset = "0xD3AAE8", VA = "0xD3AAE8", Slot = "5")]
		public override void Initialize(GeneratorUserSettings setting, Song.Difficulty difficulty)
		{
		}

		[Token(Token = "0x6002D07")]
		[Address(RVA = "0xD3B13C", Offset = "0xD3B13C", VA = "0xD3B13C")]
		public void SetBallsValue(float value)
		{
		}

		[Token(Token = "0x6002D08")]
		[Address(RVA = "0xD3B250", Offset = "0xD3B250", VA = "0xD3B250")]
		public void SetWallsValue(float value)
		{
		}

		[Token(Token = "0x6002D09")]
		[Address(RVA = "0xD3B364", Offset = "0xD3B364", VA = "0xD3B364")]
		public void SetStreamsValue(float value)
		{
		}

		[Token(Token = "0x6002D0A")]
		[Address(RVA = "0xD3B478", Offset = "0xD3B478", VA = "0xD3B478")]
		public void SetSwingsValue(float value)
		{
		}

		[Token(Token = "0x6002D0B")]
		[Address(RVA = "0xD3B58C", Offset = "0xD3B58C", VA = "0xD3B58C")]
		public void SetJumpsValue(float value)
		{
		}

		[Token(Token = "0x6002D0C")]
		[Address(RVA = "0xD3B6A0", Offset = "0xD3B6A0", VA = "0xD3B6A0")]
		public void SetSquatsValue(float value)
		{
		}

		[Token(Token = "0x6002D0D")]
		[Address(RVA = "0xD3B7B4", Offset = "0xD3B7B4", VA = "0xD3B7B4", Slot = "4")]
		public override GeneratorUserSettings GetSettings()
		{
			return null;
		}

		[Token(Token = "0x6002D0E")]
		[Address(RVA = "0xD3B7BC", Offset = "0xD3B7BC", VA = "0xD3B7BC")]
		public GeneratorSettings10Adjuster()
		{
		}
	}
	[Token(Token = "0x20007BC")]
	public class GapSetting
	{
		[Token(Token = "0x1700053E")]
		public int Before
		{
			[Token(Token = "0x6002D1C")]
			[Address(RVA = "0xD3B994", Offset = "0xD3B994", VA = "0xD3B994")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002D1D")]
			[Address(RVA = "0xD3B99C", Offset = "0xD3B99C", VA = "0xD3B99C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700053F")]
		public int Mid
		{
			[Token(Token = "0x6002D1E")]
			[Address(RVA = "0xD3B9A4", Offset = "0xD3B9A4", VA = "0xD3B9A4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002D1F")]
			[Address(RVA = "0xD3B9AC", Offset = "0xD3B9AC", VA = "0xD3B9AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000540")]
		public int After
		{
			[Token(Token = "0x6002D20")]
			[Address(RVA = "0xD3B9B4", Offset = "0xD3B9B4", VA = "0xD3B9B4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002D21")]
			[Address(RVA = "0xD3B9BC", Offset = "0xD3B9BC", VA = "0xD3B9BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0xD3B9C4", Offset = "0xD3B9C4", VA = "0xD3B9C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0xD3BAC0", Offset = "0xD3BAC0", VA = "0xD3BAC0")]
		public GapSetting(int before, int mid, int after)
		{
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0xD3A3A8", Offset = "0xD3A3A8", VA = "0xD3A3A8")]
		internal static GapSetting FromString(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x20007BD")]
	public class GeneratorSetting10 : GeneratorUserSettings
	{
		[Token(Token = "0x40031D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float balls;

		[Token(Token = "0x40031D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float walls;

		[Token(Token = "0x40031D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float streams;

		[Token(Token = "0x40031D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float swings;

		[Token(Token = "0x40031D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumps;

		[Token(Token = "0x40031D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float squats;

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0xD3BAFC", Offset = "0xD3BAFC", VA = "0xD3BAFC", Slot = "4")]
		public override string Serialize()
		{
			return null;
		}

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0xD3BCCC", Offset = "0xD3BCCC", VA = "0xD3BCCC", Slot = "5")]
		public override GeneratorUserSettings DeSerialize(string json)
		{
			return null;
		}

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0xD3BE94", Offset = "0xD3BE94", VA = "0xD3BE94", Slot = "6")]
		public override GeneratorUserSettings ShallowCopy()
		{
			return null;
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0xD3BF14", Offset = "0xD3BF14", VA = "0xD3BF14", Slot = "8")]
		public override void Set(string name, float value)
		{
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0xD3C074", Offset = "0xD3C074", VA = "0xD3C074", Slot = "9")]
		public override float Get(string name)
		{
			return default(float);
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0xD3C1CC", Offset = "0xD3C1CC", VA = "0xD3C1CC", Slot = "7")]
		public override bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0xD3BE8C", Offset = "0xD3BE8C", VA = "0xD3BE8C")]
		public GeneratorSetting10()
		{
		}
	}
	[Token(Token = "0x20007BE")]
	internal class ProportionalSelection<E>
	{
		[Token(Token = "0x20007BF")]
		private class Range
		{
			[Token(Token = "0x40031DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal E key;

			[Token(Token = "0x40031DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int fromInclusive;

			[Token(Token = "0x40031DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int toExclusive;

			[Token(Token = "0x6002D2F")]
			public Range(E key, int fromInclusive, int toExclusive)
			{
			}

			[Token(Token = "0x6002D30")]
			public bool Contains(int number)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40031D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<Range> ranges;

		[Token(Token = "0x6002D2C")]
		public ProportionalSelection()
		{
		}

		[Token(Token = "0x6002D2D")]
		internal void AddElement(E key, int amount)
		{
		}

		[Token(Token = "0x6002D2E")]
		internal E Select()
		{
			return (E)null;
		}
	}
	[Token(Token = "0x20007C1")]
	public class Range
	{
		[Token(Token = "0x40031E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float from;

		[Token(Token = "0x40031E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float to;

		[Token(Token = "0x17000541")]
		public float RandomPosition
		{
			[Token(Token = "0x6002D36")]
			[Address(RVA = "0xD2E460", Offset = "0xD2E460", VA = "0xD2E460")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0xD2E3CC", Offset = "0xD2E3CC", VA = "0xD2E3CC")]
		public Range(float from, float to)
		{
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0xD3C220", Offset = "0xD3C220", VA = "0xD3C220", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0xD3A26C", Offset = "0xD3A26C", VA = "0xD3A26C")]
		internal static Range FromString(string s)
		{
			return null;
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0xD3C2F8", Offset = "0xD3C2F8", VA = "0xD3C2F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0xD3C3A0", Offset = "0xD3C3A0", VA = "0xD3C3A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20007C2")]
	public class SplineGenerator
	{
		[Token(Token = "0x40031E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int UNITS_PER_BEAT;

		[Token(Token = "0x40031E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BezierSpline spline;

		[Token(Token = "0x40031E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<BezierPoint> points;

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0xD34620", Offset = "0xD34620", VA = "0xD34620")]
		public SplineGenerator()
		{
		}

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0xD34724", Offset = "0xD34724", VA = "0xD34724")]
		public BezierPoint AddPoint(Vector2 xy, float beatOffset)
		{
			return null;
		}

		[Token(Token = "0x6002D3D")]
		[Address(RVA = "0xD3C3EC", Offset = "0xD3C3EC", VA = "0xD3C3EC")]
		public BezierPoint AddCopyOfPoint(BezierPoint b)
		{
			return null;
		}

		[Token(Token = "0x6002D3E")]
		[Address(RVA = "0xD3493C", Offset = "0xD3493C", VA = "0xD3493C")]
		public void RepeatSequence(int times, bool mirroring, bool skipFirstOnRepetition)
		{
		}

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0xD34E44", Offset = "0xD34E44", VA = "0xD34E44")]
		public void MoveInXY(float xOffset, float yOffset)
		{
		}

		[Token(Token = "0x6002D40")]
		[Address(RVA = "0xD34F1C", Offset = "0xD34F1C", VA = "0xD34F1C")]
		public void Calculate()
		{
		}

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0xD34CD8", Offset = "0xD34CD8", VA = "0xD34CD8")]
		internal SplineGenerator CreateCopy()
		{
			return null;
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0xD34FC0", Offset = "0xD34FC0", VA = "0xD34FC0")]
		internal int AddStreamActions(int whereToStart, SongLayout layout, StreamAction.Id streamId)
		{
			return default(int);
		}

		[Token(Token = "0x6002D43")]
		[Address(RVA = "0xD34F4C", Offset = "0xD34F4C", VA = "0xD34F4C")]
		internal void Dispose()
		{
		}
	}
	[Token(Token = "0x20007C4")]
	public enum UserPosition
	{
		[Token(Token = "0x40031E8")]
		Center,
		[Token(Token = "0x40031E9")]
		Left,
		[Token(Token = "0x40031EA")]
		Right
	}
	[Token(Token = "0x20007C5")]
	public class Window
	{
		[Token(Token = "0x40031EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float leftX;

		[Token(Token = "0x40031EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float rightX;

		[Token(Token = "0x40031ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float lowerY;

		[Token(Token = "0x40031EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float upperY;

		[Token(Token = "0x17000542")]
		public Vector2 RandomPosition
		{
			[Token(Token = "0x6002D48")]
			[Address(RVA = "0xD2E188", Offset = "0xD2E188", VA = "0xD2E188")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0xD33C18", Offset = "0xD33C18", VA = "0xD33C18")]
		public Window(float x1, float x2, float y1, float y2)
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0xD30244", Offset = "0xD30244", VA = "0xD30244")]
		public Window(Vector2 center, Vector2 delta)
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0xD2E498", Offset = "0xD2E498", VA = "0xD2E498")]
		internal Window ShrinkBy(float reduceX, float reduceY)
		{
			return null;
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0xD30294", Offset = "0xD30294", VA = "0xD30294")]
		internal static Window GetOverlapWindow(Window w1, Window w2)
		{
			return null;
		}

		[Token(Token = "0x6002D4D")]
		[Address(RVA = "0xD3C7C4", Offset = "0xD3C7C4", VA = "0xD3C7C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002D4E")]
		[Address(RVA = "0xD3A090", Offset = "0xD3A090", VA = "0xD3A090")]
		internal static Window FromString(string s)
		{
			return null;
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0xD3C9D8", Offset = "0xD3C9D8", VA = "0xD3C9D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0xD3CAA0", Offset = "0xD3CAA0", VA = "0xD3CAA0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0xD31B80", Offset = "0xD31B80", VA = "0xD31B80")]
		internal Window MultiplyX(float negativeOrPositive)
		{
			return null;
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0xD33A0C", Offset = "0xD33A0C", VA = "0xD33A0C")]
		internal Window ShiftY(float shiftY)
		{
			return null;
		}
	}
}
