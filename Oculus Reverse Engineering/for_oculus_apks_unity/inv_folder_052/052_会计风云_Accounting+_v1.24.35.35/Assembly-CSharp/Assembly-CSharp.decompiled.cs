using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using Crows.Performer;
using Crows.Performer.Rendering;
using DigitalOpus.MB.Core;
using FluffyUnderware.Curvy.Generator;
using FluffyUnderware.Curvy.ThirdParty.LibTessDotNet;
using FluffyUnderware.Curvy.Utils;
using FluffyUnderware.DevTools;
using Il2CppDummyDll;
using Klak.Math;
using Klak.Motion;
using Nest.Components;
using Nest.Integrations;
using Nest.Util;
using NewtonVR;
using Oculus.Platform;
using Oculus.Platform.Models;
using ProBuilder2.Common;
using TMPro;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Serializable]
[Token(Token = "0x2000002")]
public class IvyParameters
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material branchMaterial;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string branchMaterialGUID;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material leavesMaterial;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string leavesMaterialGUID;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Mesh leavesMesh;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string leavesMeshGUID;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int randomSeed;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float stepSize;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 gravity;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int maxBranchs;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float branchProvability;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float fallProbavilityOnCorner;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float directionAmplitude;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float directionFrequenzy;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float directionRandomness;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float distanceToSurface;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float distanceToSurfaceAmplitude;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float distanceToSurfaceFrequenzy;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int leaveEvery;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int leaveEveryRandomness;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool generateBranch;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int sides;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float maxRadius;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float minRadius;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int tipInfluenceBranch;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float radiusVariationFrequenzy;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float radiusVariationPhase;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float uvU;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float uvV;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool generateLeaves;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float maxScale;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float minScale;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float tipInfluenceLeave;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Vector3 positionOffset;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 positionOffsetRandomness;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public bool globalDirection;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float globalDirectionInfluence;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public Vector3 globalDirectionVector;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Vector3 globalDirectionVectorRandomness;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public Vector3 directionVector;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Vector3 directionVectorRandomness;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x64C2B4", Offset = "0x64C2B4", VA = "0x64C2B4")]
	public IvyParameters()
	{
	}
}
[Serializable]
[Token(Token = "0x2000003")]
public class Preset
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool deletable;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string presetName;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string path;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IvyParameters presetParameters;

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x11522AC", Offset = "0x11522AC", VA = "0x11522AC")]
	public Preset()
	{
	}
}
[Token(Token = "0x2000004")]
public class TangentSolver
{
	[Token(Token = "0x6000003")]
	[Address(RVA = "0x112116C", Offset = "0x112116C", VA = "0x112116C")]
	public TangentSolver()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x1121174", Offset = "0x1121174", VA = "0x1121174")]
	public Mesh Solve(Mesh theMesh)
	{
		return null;
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56733C", Offset = "0x56733C")]
public class AccountingActionButtonMapping : ScriptableObject
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NVRButtons ActionButton1;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool ActionButtonIsOnTouchpad;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NVRButtons ActionButton2;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public NVRButtons SnapButtonLeft;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NVRButtons SnapButtonRight;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public NVRButtons ResetButton;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x69E118", Offset = "0x69E118", VA = "0x69E118")]
	public AccountingActionButtonMapping()
	{
	}
}
namespace AccountingUtilities
{
	[Token(Token = "0x2000006")]
	public enum SimpleButtonState
	{
		[Token(Token = "0x4000035")]
		Idle,
		[Token(Token = "0x4000036")]
		Pressed,
		[Token(Token = "0x4000037")]
		Hold
	}
}
[Token(Token = "0x2000007")]
public class AudioPause : MonoBehaviour
{
	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<AudioSource> pausedSources;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool oculusPaused;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x69E54C", Offset = "0x69E54C", VA = "0x69E54C")]
	public AudioPause()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x69E5BC", Offset = "0x69E5BC", VA = "0x69E5BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x69E890", Offset = "0x69E890", VA = "0x69E890")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x69E69C", Offset = "0x69E69C", VA = "0x69E69C")]
	private void Pause()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x69E7B8", Offset = "0x69E7B8", VA = "0x69E7B8")]
	private void UnPause()
	{
	}
}
[Token(Token = "0x2000008")]
public class AudioSourceDistanceMix : MonoBehaviour
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource AudioSourceA;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource AudioSourceB;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float minDistance;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxDistance;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform targetTransform;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform goalTransform;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEvent<float> OnChangeDistance;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool active;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x69E89C", Offset = "0x69E89C", VA = "0x69E89C")]
	public AudioSourceDistanceMix()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x69E8B0", Offset = "0x69E8B0", VA = "0x69E8B0")]
	public void SetStatus(bool value)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x69E918", Offset = "0x69E918", VA = "0x69E918")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000009")]
public class AudioSourceTest : MonoBehaviour
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource source;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x69EAB4", Offset = "0x69EAB4", VA = "0x69EAB4")]
	public AudioSourceTest()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x69EABC", Offset = "0x69EABC", VA = "0x69EABC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x69EB14", Offset = "0x69EB14", VA = "0x69EB14")]
	private void Update()
	{
	}
}
[Token(Token = "0x200000A")]
public class BottleCheck : MonoBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject bottleObjectTop;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent EventStartPour;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent EventStopPour;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool bottleIsTipped;

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x69EBC4", Offset = "0x69EBC4", VA = "0x69EBC4")]
	public BottleCheck()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x69EBCC", Offset = "0x69EBCC", VA = "0x69EBCC")]
	private void Update()
	{
	}
}
[Token(Token = "0x200000B")]
public class BreakableManager : MonoBehaviour
{
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] WholeObjects;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody[] IdleRigidbodys;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] InactiveObjects;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody[] cachedRigidbodys;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 OnBreakForce;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform cachedTransform;

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x69ED94", Offset = "0x69ED94", VA = "0x69ED94")]
	public BreakableManager()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x69ED9C", Offset = "0x69ED9C", VA = "0x69ED9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x69EEF4", Offset = "0x69EEF4", VA = "0x69EEF4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x69EF78", Offset = "0x69EF78", VA = "0x69EF78")]
	public void Break()
	{
	}
}
[Token(Token = "0x200000C")]
public class ButtonSequence : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int[] SequenceOrder;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OnCorrectInput;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnReset;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnComplete;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int sequenceIndex;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool completed;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x69F74C", Offset = "0x69F74C", VA = "0x69F74C")]
	public ButtonSequence()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x69F754", Offset = "0x69F754", VA = "0x69F754")]
	public void GiveInput(int value)
	{
	}
}
[Token(Token = "0x200000D")]
public class ChasePatch : MonoBehaviour
{
	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float PatchLength;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x6A1C7C", Offset = "0x6A1C7C", VA = "0x6A1C7C")]
	public ChasePatch()
	{
	}
}
[Token(Token = "0x200000E")]
public class ChasePatchGroup : MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public ChasePatch[] PatchArray;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public int PatchIndex;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool HasBeenEntered;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56747C", Offset = "0x56747C")]
	public UnityEvent EnterEvent;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x6A1C8C", Offset = "0x6A1C8C", VA = "0x6A1C8C")]
	public ChasePatchGroup()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x6A1C94", Offset = "0x6A1C94", VA = "0x6A1C94")]
	public void Init()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x6A1D68", Offset = "0x6A1D68", VA = "0x6A1D68")]
	public void TestLog(string log)
	{
	}
}
[Token(Token = "0x200000F")]
public class ChaseRadio : MonoBehaviour
{
	[Token(Token = "0x2000531")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567524", Offset = "0x567524")]
	private sealed class <SwitchRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <searchLerp>__0;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal AudioClip <switchSFX>__0;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float <cachedDuration>__0;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float <programmeDuration>__0;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal AudioClip forcedClip;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int skipAmount;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal AudioClip <programmeClip>__0;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float <currentSliderLerpPosition>__0;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal ChaseRadio $this;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal object $current;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal bool $disposing;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal int $PC;

		[Token(Token = "0x1700041B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60021F8")]
			[Address(RVA = "0x6A29B8", Offset = "0x6A29B8", VA = "0x6A29B8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60021F9")]
			[Address(RVA = "0x6A29C0", Offset = "0x6A29C0", VA = "0x6A29C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x6A20F8", Offset = "0x6A20F8", VA = "0x6A20F8")]
		[DebuggerHidden]
		public <SwitchRoutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x6A222C", Offset = "0x6A222C", VA = "0x6A222C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x6A29C8", Offset = "0x6A29C8", VA = "0x6A29C8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x6A29DC", Offset = "0x6A29DC", VA = "0x6A29DC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ChaseRadioPlaylist Playlist;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float spatialBlend;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float stationTimer;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float stationLimit;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool regularProgramme;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine SwitchStation;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform frequencySlider;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float sliderLeftSidePositionLimit;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float sliderRightSidePositionLimit;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float sliderLerpPosition;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool StationSwitchAllowed;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnTunedIntoTrophyFMEvent;

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x6A1DD4", Offset = "0x6A1DD4", VA = "0x6A1DD4")]
	public ChaseRadio()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x6A1DE8", Offset = "0x6A1DE8", VA = "0x6A1DE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x6A1EC8", Offset = "0x6A1EC8", VA = "0x6A1EC8")]
	public void AllowStationSwitch(bool value)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x6A1ED4", Offset = "0x6A1ED4", VA = "0x6A1ED4")]
	public void NextStation()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x6A1FCC", Offset = "0x6A1FCC", VA = "0x6A1FCC")]
	public void PreviousStation()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x6A2024", Offset = "0x6A2024", VA = "0x6A2024")]
	public void ForceSong(AudioClip song)
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x6A2084", Offset = "0x6A2084", VA = "0x6A2084")]
	public void ForceSingWithoutNoiseSFX(AudioClip song)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x6A1F2C", Offset = "0x6A1F2C", VA = "0x6A1F2C")]
	[DebuggerHidden]
	private IEnumerator SwitchRoutine(int skipAmount, [Optional] AudioClip forcedClip)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x6A2100", Offset = "0x6A2100", VA = "0x6A2100")]
	public void UpdateSpatialValue(float value)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x6A2108", Offset = "0x6A2108", VA = "0x6A2108")]
	private void ResetTimer(float newTime)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x6A2114", Offset = "0x6A2114", VA = "0x6A2114")]
	private void Update()
	{
	}
}
[Serializable]
[Token(Token = "0x2000010")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x567584", Offset = "0x567584")]
public class ChaseRadioPlaylist : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000011")]
	public class RadioStation
	{
		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int CurrentProgrammeIndex;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] Programmes;

		[Token(Token = "0x600002C")]
		[Address(RVA = "0x6A2A48", Offset = "0x6A2A48", VA = "0x6A2A48")]
		public RadioStation()
		{
		}
	}

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public int CurrentStationIndex;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RadioStation[] StationArray;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x567604", Offset = "0x567604")]
	public int TrophyFMStationIndex;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int TrophyFMProgrammeIndex;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x567614", Offset = "0x567614")]
	public AudioClip[] SwitchStationSFX;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x6A2A40", Offset = "0x6A2A40", VA = "0x6A2A40")]
	public ChaseRadioPlaylist()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x6A1E3C", Offset = "0x6A1E3C", VA = "0x6A1E3C")]
	public void ResetPlaylist()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x6A2768", Offset = "0x6A2768", VA = "0x6A2768")]
	public AudioClip SkipStationsAndAdvanceProgramme(int skipAmount, ref float programmeDuration)
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x6A28D8", Offset = "0x6A28D8", VA = "0x6A28D8")]
	public bool TunedIntoTrophyFM()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000012")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x567634", Offset = "0x567634")]
public class ChaseVehicle : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnDeath;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PhaseManager CarPhaseManager;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hit;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5676A8", Offset = "0x5676A8")]
	private float motorPitchStability;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5676E8", Offset = "0x5676E8")]
	private float motorPitchLerpSpeed;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float lerpedPitch;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform cachedTransform;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float zDelta;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource loopAudioSource;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x6A2A50", Offset = "0x6A2A50", VA = "0x6A2A50")]
	public ChaseVehicle()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x6A2A6C", Offset = "0x6A2A6C", VA = "0x6A2A6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x6A2AF0", Offset = "0x6A2AF0", VA = "0x6A2AF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x6A2C14", Offset = "0x6A2C14", VA = "0x6A2C14")]
	public void Call()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x6A2C40", Offset = "0x6A2C40", VA = "0x6A2C40")]
	public void Hit()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x6A2C6C", Offset = "0x6A2C6C", VA = "0x6A2C6C")]
	public void Death()
	{
	}
}
[Token(Token = "0x2000013")]
public class ChaseVehicleBaseAnimation : MonoBehaviour
{
	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ChaseVehicle vehicle;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator rootAnimator;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x6A2C80", Offset = "0x6A2C80", VA = "0x6A2C80")]
	public ChaseVehicleBaseAnimation()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x6A2C88", Offset = "0x6A2C88", VA = "0x6A2C88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x6A2CFC", Offset = "0x6A2CFC", VA = "0x6A2CFC")]
	private void OnCall()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x6A2D5C", Offset = "0x6A2D5C", VA = "0x6A2D5C")]
	private void OnHit()
	{
	}
}
[Token(Token = "0x2000014")]
public class ChaseVehicleBatch : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ChaseVehicle[] vehicleArray;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int deathCount;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool wipedOut;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnWipeOut;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x6A2DBC", Offset = "0x6A2DBC", VA = "0x6A2DBC")]
	public ChaseVehicleBatch()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x6A2DC4", Offset = "0x6A2DC4", VA = "0x6A2DC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x6A2F4C", Offset = "0x6A2F4C", VA = "0x6A2F4C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x6A30B4", Offset = "0x6A30B4", VA = "0x6A30B4")]
	public void Call()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x6A3150", Offset = "0x6A3150", VA = "0x6A3150")]
	private void OnDeath()
	{
	}
}
[Token(Token = "0x2000015")]
public class ChaseVehicleManager : MonoBehaviour
{
	[Token(Token = "0x600003C")]
	[Address(RVA = "0x6A31CC", Offset = "0x6A31CC", VA = "0x6A31CC")]
	public ChaseVehicleManager()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x6A31D4", Offset = "0x6A31D4", VA = "0x6A31D4")]
	public void CallBatch(ChaseVehicleBatch newBatch)
	{
	}
}
[Token(Token = "0x2000016")]
public class CollisionEffect : MonoBehaviour
{
	[Token(Token = "0x2000532")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567740", Offset = "0x567740")]
	private sealed class <CollisionEvent>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal CollisionEffect $this;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x1700041D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60021FE")]
			[Address(RVA = "0x6A39E0", Offset = "0x6A39E0", VA = "0x6A39E0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60021FF")]
			[Address(RVA = "0x6A39E8", Offset = "0x6A39E8", VA = "0x6A39E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0x6A38F4", Offset = "0x6A38F4", VA = "0x6A38F4")]
		[DebuggerHidden]
		public <CollisionEvent>c__Iterator0()
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0x6A38FC", Offset = "0x6A38FC", VA = "0x6A38FC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0x6A39F0", Offset = "0x6A39F0", VA = "0x6A39F0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0x6A3A04", Offset = "0x6A3A04", VA = "0x6A3A04", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent CollisionThing;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x6A3830", Offset = "0x6A3830", VA = "0x6A3830")]
	public CollisionEffect()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x6A3838", Offset = "0x6A3838", VA = "0x6A3838")]
	private void Start()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x6A383C", Offset = "0x6A383C", VA = "0x6A383C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x6A3840", Offset = "0x6A3840", VA = "0x6A3840")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x6A3888", Offset = "0x6A3888", VA = "0x6A3888")]
	[DebuggerHidden]
	private IEnumerator CollisionEvent()
	{
		return null;
	}
}
[Token(Token = "0x2000017")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5677A0", Offset = "0x5677A0")]
public class CollisionSound : MonoBehaviour
{
	[Token(Token = "0x2000018")]
	public delegate void SoundEvent(GameObject other, AudioClip clip);

	[Serializable]
	[Token(Token = "0x2000019")]
	public class ClipMaker
	{
		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Strength;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip Clip;

		[Token(Token = "0x600004F")]
		[Address(RVA = "0x6A4330", Offset = "0x6A4330", VA = "0x6A4330")]
		public ClipMaker()
		{
		}
	}

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _audioSource;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ClipMaker[] HitClips;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float LastHitVelocity;

	[Token(Token = "0x14000001")]
	public event SoundEvent PlayClip
	{
		[Token(Token = "0x6000044")]
		[Address(RVA = "0x6A3A70", Offset = "0x6A3A70", VA = "0x6A3A70")]
		add
		{
		}
		[Token(Token = "0x6000045")]
		[Address(RVA = "0x6A3B58", Offset = "0x6A3B58", VA = "0x6A3B58")]
		remove
		{
		}
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x6A3A68", Offset = "0x6A3A68", VA = "0x6A3A68")]
	public CollisionSound()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x6A3C40", Offset = "0x6A3C40", VA = "0x6A3C40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x6A3C98", Offset = "0x6A3C98", VA = "0x6A3C98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x6A3C9C", Offset = "0x6A3C9C", VA = "0x6A3C9C")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x6A3DB8", Offset = "0x6A3DB8", VA = "0x6A3DB8")]
	public void PlayCollision(GameObject other)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x6A42FC", Offset = "0x6A42FC", VA = "0x6A42FC")]
	public void PlayFromAudioSource(AudioClip clip)
	{
	}
}
[Token(Token = "0x200001A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56785C", Offset = "0x56785C")]
public class ControllerSelection : MonoBehaviour
{
	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Image ControllerFillImage;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image ControllerValidationImage;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator EyeAnimator;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource completionAudio;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource fillAudio;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool completed;

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x6A438C", Offset = "0x6A438C", VA = "0x6A438C")]
	public ControllerSelection()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x6A4394", Offset = "0x6A4394", VA = "0x6A4394")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x6A44EC", Offset = "0x6A44EC", VA = "0x6A44EC")]
	public void UpdateFill(float amount)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x6A4430", Offset = "0x6A4430", VA = "0x6A4430")]
	public void SetLook(bool status)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x6A45E0", Offset = "0x6A45E0", VA = "0x6A45E0")]
	public void Validate()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x6A4674", Offset = "0x6A4674", VA = "0x6A4674")]
	public void Stop()
	{
	}
}
[Token(Token = "0x200001B")]
public class Countdown : MonoBehaviour
{
	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro[] timers;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minutes;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float seconds;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float miliseconds;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnTimerComplete;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string successMessage;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool started;

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x6A46A8", Offset = "0x6A46A8", VA = "0x6A46A8")]
	public Countdown()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x6A4708", Offset = "0x6A4708", VA = "0x6A4708")]
	public void StarTimer()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x6A4714", Offset = "0x6A4714", VA = "0x6A4714")]
	public void Success()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x6A4844", Offset = "0x6A4844", VA = "0x6A4844")]
	private void Update()
	{
	}
}
[Token(Token = "0x200001C")]
public class CycleTextures : MonoBehaviour
{
	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D[] Textures;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer MainRenderer;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Interval;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x6AB36C", Offset = "0x6AB36C", VA = "0x6AB36C")]
	public CycleTextures()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x6AB37C", Offset = "0x6AB37C", VA = "0x6AB37C")]
	private void Start()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x6AB40C", Offset = "0x6AB40C", VA = "0x6AB40C")]
	private void Update()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x6AB384", Offset = "0x6AB384", VA = "0x6AB384")]
	private void SetTexture(int _index)
	{
	}
}
[Token(Token = "0x200001D")]
public class DistributionRelatedGameObject : MonoBehaviour
{
	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Steam;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Viveport;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject Oculus;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject PSVR;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string loadedDeviceName;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x793158", Offset = "0x793158", VA = "0x793158")]
	public DistributionRelatedGameObject()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x793160", Offset = "0x793160", VA = "0x793160")]
	private void Start()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x793164", Offset = "0x793164", VA = "0x793164")]
	private void CheckPlatform()
	{
	}
}
[Token(Token = "0x200001E")]
public class DontDestroy : MonoBehaviour
{
	[Token(Token = "0x6000061")]
	[Address(RVA = "0x793280", Offset = "0x793280", VA = "0x793280")]
	public DontDestroy()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x793288", Offset = "0x793288", VA = "0x793288")]
	private void Awake()
	{
	}
}
[Token(Token = "0x200001F")]
public class DriveController : MonoBehaviour
{
	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public ChasePatchGroup[] SpawnGroupArray;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ChasePatchGroup currentGroup;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int GroupIndex;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MovementSpeed;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float patchProgress;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ChasePatch activePatch;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ChasePatch upcomingPatch;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x567990", Offset = "0x567990")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x567990", Offset = "0x567990")]
	public float RespawnSkew;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool upcomingPlaced;

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x793320", Offset = "0x793320", VA = "0x793320")]
	public DriveController()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x793338", Offset = "0x793338", VA = "0x793338")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x79340C", Offset = "0x79340C", VA = "0x79340C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x7936E4", Offset = "0x7936E4", VA = "0x7936E4")]
	public void Update()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x793A90", Offset = "0x793A90", VA = "0x793A90")]
	private void MovePatches(float speed)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x7937A8", Offset = "0x7937A8", VA = "0x7937A8")]
	private void PlaceUpcoming()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x793BDC", Offset = "0x793BDC", VA = "0x793BDC")]
	private void SwapPatches()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x793C34", Offset = "0x793C34", VA = "0x793C34")]
	public void SwitchSpawnGroup(ChasePatchGroup newGroup)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x7939F4", Offset = "0x7939F4", VA = "0x7939F4")]
	private float GetProgress()
	{
		return default(float);
	}
}
[Token(Token = "0x2000020")]
public class ExampleClass : MonoBehaviour
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x798780", Offset = "0x798780", VA = "0x798780")]
	public ExampleClass()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x798788", Offset = "0x798788", VA = "0x798788")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000021")]
public class FanForce : MonoBehaviour
{
	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fanBlowPower;

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x7988A0", Offset = "0x7988A0", VA = "0x7988A0")]
	public FanForce()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x7988B0", Offset = "0x7988B0", VA = "0x7988B0")]
	private void OnTriggerStay(Collider other)
	{
	}
}
[Token(Token = "0x2000022")]
public class fanpower : MonoBehaviour
{
	[Token(Token = "0x6000070")]
	[Address(RVA = "0x798A24", Offset = "0x798A24", VA = "0x798A24")]
	public fanpower()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x798A2C", Offset = "0x798A2C", VA = "0x798A2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x798A30", Offset = "0x798A30", VA = "0x798A30")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000023")]
public class FollowUpAudio : MonoBehaviour
{
	[Token(Token = "0x2000533")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567A34", Offset = "0x567A34")]
	private sealed class <WaitForAudioFinish>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float duration;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal FollowUpAudio $this;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x1700041F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002204")]
			[Address(RVA = "0x79ED20", Offset = "0x79ED20", VA = "0x79ED20", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000420")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002205")]
			[Address(RVA = "0x79ED28", Offset = "0x79ED28", VA = "0x79ED28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0x79EC1C", Offset = "0x79EC1C", VA = "0x79EC1C")]
		[DebuggerHidden]
		public <WaitForAudioFinish>c__Iterator0()
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0x79EC24", Offset = "0x79EC24", VA = "0x79EC24", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x79ED30", Offset = "0x79ED30", VA = "0x79ED30", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x79ED44", Offset = "0x79ED44", VA = "0x79ED44", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string key;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<AudioClip> clipList;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnAudioFinished;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine audioRoutine;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x79E340", Offset = "0x79E340", VA = "0x79E340")]
	public FollowUpAudio()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x79E348", Offset = "0x79E348", VA = "0x79E348")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x79E468", Offset = "0x79E468", VA = "0x79E468")]
	private void CheckValidIndex()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x79E554", Offset = "0x79E554", VA = "0x79E554")]
	private void ResetIndex()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x79E610", Offset = "0x79E610", VA = "0x79E610")]
	public void PlayAndIncrement()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x79E84C", Offset = "0x79E84C", VA = "0x79E84C")]
	public void PlayCurrentIndex()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x79E984", Offset = "0x79E984", VA = "0x79E984")]
	public void PlayWaitForFinish(AudioClip clip)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x79EA94", Offset = "0x79EA94", VA = "0x79EA94")]
	public void PlayRandomWaitForFinish()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x79EBE8", Offset = "0x79EBE8", VA = "0x79EBE8")]
	public void StopFollowUp()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x79E7C0", Offset = "0x79E7C0", VA = "0x79E7C0")]
	[DebuggerHidden]
	private IEnumerator WaitForAudioFinish(float duration)
	{
		return null;
	}
}
[Token(Token = "0x2000024")]
public class FollowUpPerformance : MonoBehaviour
{
	[Token(Token = "0x2000534")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567AE4", Offset = "0x567AE4")]
	private sealed class <WaitForPerformanceFinish>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float duration;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal FollowUpPerformance $this;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000421")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600220A")]
			[Address(RVA = "0x79F744", Offset = "0x79F744", VA = "0x79F744", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000422")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600220B")]
			[Address(RVA = "0x79F74C", Offset = "0x79F74C", VA = "0x79F74C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x79F640", Offset = "0x79F640", VA = "0x79F640")]
		[DebuggerHidden]
		public <WaitForPerformanceFinish>c__Iterator0()
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x79F648", Offset = "0x79F648", VA = "0x79F648", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x79F754", Offset = "0x79F754", VA = "0x79F754", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x79F768", Offset = "0x79F768", VA = "0x79F768", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string key;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Performer performer;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<SpokenWord> wordList;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent OnPerformanceFinished;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine performanceRoutine;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x79EDA8", Offset = "0x79EDA8", VA = "0x79EDA8")]
	public FollowUpPerformance()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x79EDB0", Offset = "0x79EDB0", VA = "0x79EDB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x79EED0", Offset = "0x79EED0", VA = "0x79EED0")]
	private void CheckValidIndex()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x79EFBC", Offset = "0x79EFBC", VA = "0x79EFBC")]
	private void ResetIndex()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x79F078", Offset = "0x79F078", VA = "0x79F078")]
	public void PlayAndIncrement()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x79F2A0", Offset = "0x79F2A0", VA = "0x79F2A0")]
	public void PlayCurrentIndex()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x79F3CC", Offset = "0x79F3CC", VA = "0x79F3CC")]
	public void PlayWaitForFinish(SpokenWord word)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x79F4C0", Offset = "0x79F4C0", VA = "0x79F4C0")]
	public void PlayRandomWaitForFinish()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x79F60C", Offset = "0x79F60C", VA = "0x79F60C")]
	public void StopFollowUp()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x79F214", Offset = "0x79F214", VA = "0x79F214")]
	[DebuggerHidden]
	private IEnumerator WaitForPerformanceFinish(float duration)
	{
		return null;
	}
}
[Token(Token = "0x2000025")]
public class PlayerState_EnteringLevel : SimpleFSMState
{
	[Token(Token = "0x2000535")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567B64", Offset = "0x567B64")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PlayerState_EnteringLevel $this;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000423")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002210")]
			[Address(RVA = "0x113FF54", Offset = "0x113FF54", VA = "0x113FF54", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000424")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002211")]
			[Address(RVA = "0x113FF5C", Offset = "0x113FF5C", VA = "0x113FF5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x113FC18", Offset = "0x113FC18", VA = "0x113FC18")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x113FD2C", Offset = "0x113FD2C", VA = "0x113FD2C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x113FF64", Offset = "0x113FF64", VA = "0x113FF64", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x113FF78", Offset = "0x113FF78", VA = "0x113FF78", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000536")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567BC4", Offset = "0x567BC4")]
	private sealed class <Exit>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PlayerState_EnteringLevel $this;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000425")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002216")]
			[Address(RVA = "0x114006C", Offset = "0x114006C", VA = "0x114006C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000426")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002217")]
			[Address(RVA = "0x1140074", Offset = "0x1140074", VA = "0x1140074", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x113FD24", Offset = "0x113FD24", VA = "0x113FD24")]
		[DebuggerHidden]
		public <Exit>c__Iterator1()
		{
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x113FFDC", Offset = "0x113FFDC", VA = "0x113FFDC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x114007C", Offset = "0x114007C", VA = "0x114007C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x1140090", Offset = "0x1140090", VA = "0x1140090", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PlayerController cntrl;

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x113D768", Offset = "0x113D768", VA = "0x113D768")]
	public PlayerState_EnteringLevel(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x113FBAC", Offset = "0x113FBAC", VA = "0x113FBAC", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x113FC20", Offset = "0x113FC20", VA = "0x113FC20", Slot = "8")]
	public override void DoUpdate()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x113FCB8", Offset = "0x113FCB8", VA = "0x113FCB8", Slot = "5")]
	[DebuggerHidden]
	public override IEnumerator Exit()
	{
		return null;
	}
}
[Token(Token = "0x2000026")]
public class PlayerState_InLevel_StationTraversal : SimpleFSMState
{
	[Token(Token = "0x2000537")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567C44", Offset = "0x567C44")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000427")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600221C")]
			[Address(RVA = "0x11413A0", Offset = "0x11413A0", VA = "0x11413A0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000428")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600221D")]
			[Address(RVA = "0x11413A8", Offset = "0x11413A8", VA = "0x11413A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x1140564", Offset = "0x1140564", VA = "0x1140564")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x600221B")]
		[Address(RVA = "0x1141340", Offset = "0x1141340", VA = "0x1141340", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x11413B0", Offset = "0x11413B0", VA = "0x11413B0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x11413C4", Offset = "0x11413C4", VA = "0x11413C4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000538")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567CA4", Offset = "0x567CA4")]
	private sealed class <Exit>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PlayerState_InLevel_StationTraversal $this;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000429")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002222")]
			[Address(RVA = "0x1141518", Offset = "0x1141518", VA = "0x1141518", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002223")]
			[Address(RVA = "0x1141520", Offset = "0x1141520", VA = "0x1141520", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x11411E0", Offset = "0x11411E0", VA = "0x11411E0")]
		[DebuggerHidden]
		public <Exit>c__Iterator1()
		{
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0x1141428", Offset = "0x1141428", VA = "0x1141428", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x1141528", Offset = "0x1141528", VA = "0x1141528", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x114153C", Offset = "0x114153C", VA = "0x114153C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRButtonInputs.SimpleButtonState TeleportButtonState;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private new PlayerController cntrl;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool snapLeft;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool snapRight;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool outOfPlaySpace;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	private bool inLoad;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x113D80C", Offset = "0x113D80C", VA = "0x113D80C")]
	public PlayerState_InLevel_StationTraversal(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x11400F4", Offset = "0x11400F4", VA = "0x11400F4", Slot = "6")]
	public override void Setup()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x1140508", Offset = "0x1140508", VA = "0x1140508", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x114056C", Offset = "0x114056C", VA = "0x114056C")]
	private void OnLevelLoad()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x1140578", Offset = "0x1140578", VA = "0x1140578")]
	private void OnSceneActivation()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x1140580", Offset = "0x1140580", VA = "0x1140580", Slot = "8")]
	public override void DoUpdate()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x1140E6C", Offset = "0x1140E6C", VA = "0x1140E6C", Slot = "7")]
	public override void Reason()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x1141174", Offset = "0x1141174", VA = "0x1141174", Slot = "5")]
	[DebuggerHidden]
	public override IEnumerator Exit()
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x11411E8", Offset = "0x11411E8", VA = "0x11411E8")]
	private void OnNewStationSelected()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1141270", Offset = "0x1141270", VA = "0x1141270")]
	private void OnPlayerTraversingToNewStation(Station station)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x11412D8", Offset = "0x11412D8", VA = "0x11412D8")]
	private void OnEmptySelection()
	{
	}
}
[Token(Token = "0x2000027")]
public class PlayerState_InLevel_Teleport : SimpleFSMState
{
	[Token(Token = "0x2000539")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567D14", Offset = "0x567D14")]
	private sealed class <Exit>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700042B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002228")]
			[Address(RVA = "0x1141B44", Offset = "0x1141B44", VA = "0x1141B44", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002229")]
			[Address(RVA = "0x1141B4C", Offset = "0x1141B4C", VA = "0x1141B4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x1141A78", Offset = "0x1141A78", VA = "0x1141A78")]
		[DebuggerHidden]
		public <Exit>c__Iterator0()
		{
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x1141A80", Offset = "0x1141A80", VA = "0x1141A80", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x1141B54", Offset = "0x1141B54", VA = "0x1141B54", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x1141B68", Offset = "0x1141B68", VA = "0x1141B68", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRButtonInputs.SimpleButtonState TeleportButtonState;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private new PlayerController cntrl;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool inLoad;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private InputManager activeInputManager;

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x113D8BC", Offset = "0x113D8BC", VA = "0x113D8BC")]
	public PlayerState_InLevel_Teleport(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x11415A0", Offset = "0x11415A0", VA = "0x11415A0", Slot = "6")]
	public override void Setup()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1141770", Offset = "0x1141770", VA = "0x1141770")]
	private void OnLevelLoad()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x114177C", Offset = "0x114177C", VA = "0x114177C")]
	private void OnSceneActivation()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1141784", Offset = "0x1141784", VA = "0x1141784", Slot = "8")]
	public override void DoUpdate()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x11419E8", Offset = "0x11419E8", VA = "0x11419E8", Slot = "7")]
	public override void Reason()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1141A1C", Offset = "0x1141A1C", VA = "0x1141A1C", Slot = "5")]
	[DebuggerHidden]
	public override IEnumerator Exit()
	{
		return null;
	}
}
[Token(Token = "0x2000028")]
public class PlayerState_InStationTransition : SimpleFSMState
{
	[Token(Token = "0x200053A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567D84", Offset = "0x567D84")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PlayerState_InStationTransition $this;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x1700042D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600222E")]
			[Address(RVA = "0x1141FAC", Offset = "0x1141FAC", VA = "0x1141FAC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600222F")]
			[Address(RVA = "0x1141FB4", Offset = "0x1141FB4", VA = "0x1141FB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x1141C38", Offset = "0x1141C38", VA = "0x1141C38")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x1141C9C", Offset = "0x1141C9C", VA = "0x1141C9C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x1141FBC", Offset = "0x1141FBC", VA = "0x1141FBC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0x1141FD0", Offset = "0x1141FD0", VA = "0x1141FD0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PlayerController cntrl;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x113D96C", Offset = "0x113D96C", VA = "0x113D96C")]
	public PlayerState_InStationTransition(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x1141BCC", Offset = "0x1141BCC", VA = "0x1141BCC", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x1141C40", Offset = "0x1141C40", VA = "0x1141C40", Slot = "8")]
	public override void DoUpdate()
	{
	}
}
[Token(Token = "0x2000029")]
public class PlayerState_Snapping : SimpleFSMState
{
	[Token(Token = "0x200053B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567DF4", Offset = "0x567DF4")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <headPos>__0;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal Vector3 <stationPos>__0;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Vector3 <distanceVector>__0;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal PlayerState_Snapping $this;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal object $current;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal bool $disposing;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal int $PC;

		[Token(Token = "0x1700042F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002234")]
			[Address(RVA = "0x114265C", Offset = "0x114265C", VA = "0x114265C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000430")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002235")]
			[Address(RVA = "0x1142664", Offset = "0x1142664", VA = "0x1142664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x11420A0", Offset = "0x11420A0", VA = "0x11420A0")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x1142104", Offset = "0x1142104", VA = "0x1142104", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0x114266C", Offset = "0x114266C", VA = "0x114266C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x1142680", Offset = "0x1142680", VA = "0x1142680", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PlayerController cntrl;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameConfiguration config;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x113DA10", Offset = "0x113DA10", VA = "0x113DA10")]
	public PlayerState_Snapping(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1142034", Offset = "0x1142034", VA = "0x1142034", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x11420A8", Offset = "0x11420A8", VA = "0x11420A8", Slot = "8")]
	public override void DoUpdate()
	{
	}
}
[Token(Token = "0x200002A")]
public class SelectionState_Close : SimpleFSMState
{
	[Token(Token = "0x200053C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567E64", Offset = "0x567E64")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <safetyTimer>__0;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SelectionState_Close $this;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000431")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600223A")]
			[Address(RVA = "0x1110630", Offset = "0x1110630", VA = "0x1110630", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000432")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600223B")]
			[Address(RVA = "0x1110638", Offset = "0x1110638", VA = "0x1110638", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0x110F9D4", Offset = "0x110F9D4", VA = "0x110F9D4")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x110FAD8", Offset = "0x110FAD8", VA = "0x110FAD8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0x1110640", Offset = "0x1110640", VA = "0x1110640", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0x1110654", Offset = "0x1110654", VA = "0x1110654", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new SelectionController cntrl;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AnimationCurve animateOutCurve;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool playerTraversed;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x110A7A0", Offset = "0x110A7A0", VA = "0x110A7A0")]
	public SelectionState_Close(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x110F968", Offset = "0x110F968", VA = "0x110F968", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x110F9DC", Offset = "0x110F9DC", VA = "0x110F9DC", Slot = "7")]
	public override void Reason()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x110FA68", Offset = "0x110FA68", VA = "0x110FA68")]
	private void OnPlayerTraversingToNewStation(Station newStation)
	{
	}
}
[Token(Token = "0x200002B")]
public class SelectionState_Idle : SimpleFSMState
{
	[Token(Token = "0x200053D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567ED4", Offset = "0x567ED4")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000433")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002240")]
			[Address(RVA = "0x1110914", Offset = "0x1110914", VA = "0x1110914", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000434")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002241")]
			[Address(RVA = "0x111091C", Offset = "0x111091C", VA = "0x111091C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x1110714", Offset = "0x1110714", VA = "0x1110714")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x11108B4", Offset = "0x11108B4", VA = "0x11108B4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x1110924", Offset = "0x1110924", VA = "0x1110924", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x1110938", Offset = "0x1110938", VA = "0x1110938", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new SelectionController cntrl;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x110A578", Offset = "0x110A578", VA = "0x110A578")]
	public SelectionState_Idle(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x11106B8", Offset = "0x11106B8", VA = "0x11106B8", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x111071C", Offset = "0x111071C", VA = "0x111071C", Slot = "8")]
	public override void DoUpdate()
	{
	}
}
[Token(Token = "0x200002C")]
public class SelectionState_InSelection : SimpleFSMState
{
	[Token(Token = "0x200053E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567F54", Offset = "0x567F54")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SelectionState_InSelection $this;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000435")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002246")]
			[Address(RVA = "0x11113C8", Offset = "0x11113C8", VA = "0x11113C8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000436")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002247")]
			[Address(RVA = "0x11113D0", Offset = "0x11113D0", VA = "0x11113D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x1110A08", Offset = "0x1110A08", VA = "0x1110A08")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x1111230", Offset = "0x1111230", VA = "0x1111230", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0x11113D8", Offset = "0x11113D8", VA = "0x11113D8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0x11113EC", Offset = "0x11113EC", VA = "0x11113EC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200053F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x567FB4", Offset = "0x567FB4")]
	private sealed class <Exit>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SelectionState_InSelection $this;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000437")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600224C")]
			[Address(RVA = "0x11114E0", Offset = "0x11114E0", VA = "0x11114E0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000438")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600224D")]
			[Address(RVA = "0x11114E8", Offset = "0x11114E8", VA = "0x11114E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0x1110A7C", Offset = "0x1110A7C", VA = "0x1110A7C")]
		[DebuggerHidden]
		public <Exit>c__Iterator1()
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0x1111450", Offset = "0x1111450", VA = "0x1111450", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0x11114F0", Offset = "0x11114F0", VA = "0x11114F0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0x1111504", Offset = "0x1111504", VA = "0x1111504", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new SelectionController cntrl;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AnimationCurve animateInCurve;

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x110A6C0", Offset = "0x110A6C0", VA = "0x110A6C0")]
	public SelectionState_InSelection(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x111099C", Offset = "0x111099C", VA = "0x111099C", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x1110A10", Offset = "0x1110A10", VA = "0x1110A10", Slot = "5")]
	[DebuggerHidden]
	public override IEnumerator Exit()
	{
		return null;
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x1110A84", Offset = "0x1110A84", VA = "0x1110A84", Slot = "8")]
	public override void DoUpdate()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x1110D38", Offset = "0x1110D38", VA = "0x1110D38")]
	private void RaycastSelection()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x1111164", Offset = "0x1111164", VA = "0x1111164", Slot = "7")]
	public override void Reason()
	{
	}
}
[Token(Token = "0x200002D")]
public class SelectionState_Open : SimpleFSMState
{
	[Token(Token = "0x2000540")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568024", Offset = "0x568024")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SelectionState_Open $this;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000439")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002252")]
			[Address(RVA = "0x11118A0", Offset = "0x11118A0", VA = "0x11118A0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002253")]
			[Address(RVA = "0x11118A8", Offset = "0x11118A8", VA = "0x11118A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0x11115D4", Offset = "0x11115D4", VA = "0x11115D4")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0x1111638", Offset = "0x1111638", VA = "0x1111638", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x11118B0", Offset = "0x11118B0", VA = "0x11118B0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x11118C4", Offset = "0x11118C4", VA = "0x11118C4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new SelectionController cntrl;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x110A61C", Offset = "0x110A61C", VA = "0x110A61C")]
	public SelectionState_Open(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x1111568", Offset = "0x1111568", VA = "0x1111568", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x11115DC", Offset = "0x11115DC", VA = "0x11115DC", Slot = "8")]
	public override void DoUpdate()
	{
	}
}
[Token(Token = "0x200002E")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x568084", Offset = "0x568084")]
public class GameConfiguration : ScriptableObject
{
	[Token(Token = "0x200002F")]
	public enum StationTraversalStyle
	{
		[Token(Token = "0x40000ED")]
		StationPrefab,
		[Token(Token = "0x40000EE")]
		Cycle
	}

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5680F4", Offset = "0x5680F4")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5680F4", Offset = "0x5680F4")]
	public float LeaveStationFadeTime;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float EnterStationFadeTime;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568140", Offset = "0x568140")]
	public float resetLimit;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public StationTraversalStyle StationTraversal;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568178", Offset = "0x568178")]
	public float PlayerHeightStandingStance;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float StandUpDetectionHeight;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5681B0", Offset = "0x5681B0")]
	public float SnappingAngle;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float SnappingFadeInOutBlackDuration;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float SnappingStayBlackDuration;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5681E8", Offset = "0x5681E8")]
	public AudioClip SnappingAudioClip;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip ResetBuildUpLoop;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip ResetClovisClip;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568220", Offset = "0x568220")]
	public SelectionObject StationSelectionPrefab;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568258", Offset = "0x568258")]
	public AudioClip SelectionPopUpClip;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip SelectionCloseClip;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip SelectionDeniedClip;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip SelectionSelectClip;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip SelectionDeselectClip;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip SelectionValidateClip;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568290", Offset = "0x568290")]
	public AnimationCurve SelectionAnimateInCurve;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AnimationCurve SelectionAnimateOutCurve;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float SelectionItemSpacing;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float SelectionItemSize;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5682C8", Offset = "0x5682C8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5682C8", Offset = "0x5682C8")]
	public float SelectionTargetRotationOffset;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56831C", Offset = "0x56831C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56831C", Offset = "0x56831C")]
	public float SelectionMoveTowardTargetValue;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x568370", Offset = "0x568370")]
	public float SelectionHeightOffset;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5683A8", Offset = "0x5683A8")]
	public float SelectionDepthOffset;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Vector3 ColliderSize;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5683E0", Offset = "0x5683E0")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5683E0", Offset = "0x5683E0")]
	public LayerMask CollisionCheckMask;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Shader SeeThroughShader;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float RespawnTimer;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float RespawnDelayBetweenItems;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float RespawnDrag;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float RespawnMass;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float DragDuration;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float DistanceLimitRespawn;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float ItemShrinkSize;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float InFloatGapSize;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool ForceLocalMagicRespawnForAllItems;

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x79FD40", Offset = "0x79FD40", VA = "0x79FD40")]
	public GameConfiguration()
	{
	}
}
[Token(Token = "0x2000030")]
public class GazeAnimator : MonoBehaviour
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform ForwardTransform;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator GameObjectAnimator;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool comingFromLeft;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string AnimatorLeftKeyword;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string AnimatorRightKeyword;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float leftDot;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float rightDot;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x7A03C0", Offset = "0x7A03C0", VA = "0x7A03C0")]
	public GazeAnimator()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x7A03C8", Offset = "0x7A03C8", VA = "0x7A03C8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000031")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56842C", Offset = "0x56842C")]
public class GeppettoRandomPerformance : MonoBehaviour
{
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GeppettoPerformance[] RandomPerformances;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Geppetto geppetto;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x7A1A1C", Offset = "0x7A1A1C", VA = "0x7A1A1C")]
	public GeppettoRandomPerformance()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x7A1A24", Offset = "0x7A1A24", VA = "0x7A1A24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x7A1A7C", Offset = "0x7A1A7C", VA = "0x7A1A7C")]
	public void PlayRandomPerformance()
	{
	}
}
[Token(Token = "0x2000032")]
public class GraffittiManager : MonoBehaviour
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GraffittiPart[] graffitiArray;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int revealCounter;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x568490", Offset = "0x568490")]
	private int revealOffset;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool revealComplete;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnRevealComplete;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnPartRevealed;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x7A1B70", Offset = "0x7A1B70", VA = "0x7A1B70")]
	public GraffittiManager()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x7A1B78", Offset = "0x7A1B78", VA = "0x7A1B78")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x7A1CFC", Offset = "0x7A1CFC", VA = "0x7A1CFC")]
	private void OnReveal()
	{
	}
}
[Token(Token = "0x2000033")]
public class GraffittiPart : MonoBehaviour
{
	[Token(Token = "0x2000541")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5684CC", Offset = "0x5684CC")]
	private sealed class <FadeIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <lerp>__0;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal GraffittiPart $this;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x1700043B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002258")]
			[Address(RVA = "0x7A2150", Offset = "0x7A2150", VA = "0x7A2150", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002259")]
			[Address(RVA = "0x7A2158", Offset = "0x7A2158", VA = "0x7A2158", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0x7A1FD8", Offset = "0x7A1FD8", VA = "0x7A1FD8")]
		[DebuggerHidden]
		public <FadeIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0x7A1FE0", Offset = "0x7A1FE0", VA = "0x7A1FE0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0x7A2160", Offset = "0x7A2160", VA = "0x7A2160", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0x7A2174", Offset = "0x7A2174", VA = "0x7A2174", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Color hiddenColor;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool revealed;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnReveal;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x7A1DA0", Offset = "0x7A1DA0", VA = "0x7A1DA0")]
	public GraffittiPart()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x7A1DF4", Offset = "0x7A1DF4", VA = "0x7A1DF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x7A1EB4", Offset = "0x7A1EB4", VA = "0x7A1EB4")]
	public void Reveal()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x7A1F6C", Offset = "0x7A1F6C", VA = "0x7A1F6C")]
	[DebuggerHidden]
	private IEnumerator FadeIn()
	{
		return null;
	}
}
[Token(Token = "0x2000034")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56852C", Offset = "0x56852C")]
public class HandController : MonoBehaviour
{
	[Token(Token = "0x2000035")]
	public enum HandOrientation
	{
		[Token(Token = "0x4000108")]
		Left,
		[Token(Token = "0x4000109")]
		Right
	}

	[Token(Token = "0x2000542")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5685A0", Offset = "0x5685A0")]
	private sealed class <UpholdGhostMode>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ItemController item;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal HandController $this;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x1700043D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600225E")]
			[Address(RVA = "0x7A2934", Offset = "0x7A2934", VA = "0x7A2934", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600225F")]
			[Address(RVA = "0x7A293C", Offset = "0x7A293C", VA = "0x7A293C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x7A27E8", Offset = "0x7A27E8", VA = "0x7A27E8")]
		[DebuggerHidden]
		public <UpholdGhostMode>c__Iterator0()
		{
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x7A27F0", Offset = "0x7A27F0", VA = "0x7A27F0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x7A2944", Offset = "0x7A2944", VA = "0x7A2944", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x7A2958", Offset = "0x7A2958", VA = "0x7A2958", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandOrientation Orientation;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask CollisionCheckLayerMask;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 CachedSize;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ItemController CurrentItemController;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private NVRHand hand;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x7A21D8", Offset = "0x7A21D8", VA = "0x7A21D8")]
	public HandController()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x7A21E0", Offset = "0x7A21E0", VA = "0x7A21E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x7A2304", Offset = "0x7A2304", VA = "0x7A2304")]
	private void OnBeginInteraction(NVRInteractable interactable)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x7A2308", Offset = "0x7A2308", VA = "0x7A2308")]
	private void OnEndInteraction(NVRInteractable interactable)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x7A23E4", Offset = "0x7A23E4", VA = "0x7A23E4")]
	private MeshFilter CreateSeethroughRenderer(Transform parent)
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x7A2460", Offset = "0x7A2460", VA = "0x7A2460")]
	public void TeleportHand(Vector3 direction, Station newStation)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x7A275C", Offset = "0x7A275C", VA = "0x7A275C")]
	[DebuggerHidden]
	private IEnumerator UpholdGhostMode(ItemController item)
	{
		return null;
	}
}
[Token(Token = "0x2000036")]
public class HeadProxy : MonoBehaviour
{
	[Token(Token = "0x2000543")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568610", Offset = "0x568610")]
	private sealed class <FadeBlend>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <lerp>__0;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float startValue;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float <value>__0;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float time;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float endValue;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x1700043F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002264")]
			[Address(RVA = "0x7A3398", Offset = "0x7A3398", VA = "0x7A3398", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000440")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002265")]
			[Address(RVA = "0x7A33A0", Offset = "0x7A33A0", VA = "0x7A33A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x7A2CFC", Offset = "0x7A2CFC", VA = "0x7A2CFC")]
		[DebuggerHidden]
		public <FadeBlend>c__Iterator0()
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x7A3214", Offset = "0x7A3214", VA = "0x7A3214", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002266")]
		[Address(RVA = "0x7A33A8", Offset = "0x7A33A8", VA = "0x7A33A8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0x7A33BC", Offset = "0x7A33BC", VA = "0x7A33BC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<AmplifyColorEffect> OnForceColorCorrection;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<float> OnSetCustomBlendAmount;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<Texture> OnSetCustomBlendTexture;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform HeadTarget;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform cachedTransform;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine LutBlendRoutine;

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x7A29BC", Offset = "0x7A29BC", VA = "0x7A29BC")]
	public HeadProxy()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x7A29C4", Offset = "0x7A29C4", VA = "0x7A29C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x7A2A44", Offset = "0x7A2A44", VA = "0x7A2A44")]
	public void SetCustomColorCorrection(AmplifyColorEffect cc)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x7A2AB8", Offset = "0x7A2AB8", VA = "0x7A2AB8")]
	public void SetCustomBlendAmount(float amount)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x7A2B38", Offset = "0x7A2B38", VA = "0x7A2B38")]
	public void SetCustomBlendTexture(Texture tex)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x7A2BAC", Offset = "0x7A2BAC", VA = "0x7A2BAC")]
	public void FadeInCustomBlend()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x7A2CA4", Offset = "0x7A2CA4", VA = "0x7A2CA4")]
	public void FadeOutCustomBlend()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x7A2C04", Offset = "0x7A2C04", VA = "0x7A2C04")]
	[DebuggerHidden]
	private IEnumerator FadeBlend(float startValue, float endValue, float time)
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x7A2D04", Offset = "0x7A2D04", VA = "0x7A2D04")]
	public void FadeInSceneWhite()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x7A2D78", Offset = "0x7A2D78", VA = "0x7A2D78")]
	public void FadeInWhiteDuration(float duration)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x7A2DF8", Offset = "0x7A2DF8", VA = "0x7A2DF8")]
	public void FadeOutSceneWhite()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x7A2E5C", Offset = "0x7A2E5C", VA = "0x7A2E5C")]
	public void FadeInWhiteInstant()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x7A2ECC", Offset = "0x7A2ECC", VA = "0x7A2ECC")]
	public void FadeOutWhiteInstant()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x7A2F30", Offset = "0x7A2F30", VA = "0x7A2F30")]
	public void FadeInBlack()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x7A2FA0", Offset = "0x7A2FA0", VA = "0x7A2FA0")]
	public void FadeOutBlack()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x7A3004", Offset = "0x7A3004", VA = "0x7A3004")]
	public void FadeInBlackInstant()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x7A3074", Offset = "0x7A3074", VA = "0x7A3074")]
	public void FadeOutBlackInstant()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x7A2D74", Offset = "0x7A2D74", VA = "0x7A2D74")]
	private void FadeCompositior(Color color, float duration)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x7A30D8", Offset = "0x7A30D8", VA = "0x7A30D8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000037")]
public class HeadSnapSimulation : MonoBehaviour
{
	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform HeadSnapTransform;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform HeadTransform;

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x7A3420", Offset = "0x7A3420", VA = "0x7A3420")]
	public HeadSnapSimulation()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x7A3428", Offset = "0x7A3428", VA = "0x7A3428")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000038")]
public class HeightController : MonoBehaviour
{
	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentLayerIndex;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] SkyboxArray;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float layerHeight;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ascendDuration;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distance;

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x7A35B4", Offset = "0x7A35B4", VA = "0x7A35B4")]
	public HeightController()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x7A35CC", Offset = "0x7A35CC", VA = "0x7A35CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x7A361C", Offset = "0x7A361C", VA = "0x7A361C")]
	public void StepUpLayer()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x7A362C", Offset = "0x7A362C", VA = "0x7A362C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000039")]
public class HideOnAwake : MonoBehaviour
{
	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x7A3920", Offset = "0x7A3920", VA = "0x7A3920")]
	public HideOnAwake()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x7A3928", Offset = "0x7A3928", VA = "0x7A3928")]
	private void Awake()
	{
	}
}
[Token(Token = "0x200003A")]
public class ImageEffectsManager : MonoBehaviour
{
	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera MainCamera;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AmplifyColorEffect MainCameraColorCorrection;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject DefaultCCObject;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject imageEffectsCopyObject;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x64498C", Offset = "0x64498C", VA = "0x64498C")]
	public ImageEffectsManager()
	{
	}
}
[Token(Token = "0x200003B")]
public class InputDependentGameObject : InputRelatedSwitch
{
	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject DualshockObject;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject MoveObject;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject OculusSittingObject;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject OculusStandingObject;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ViveSittingObject;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject ViveStandingObject;

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x644994", Offset = "0x644994", VA = "0x644994")]
	public InputDependentGameObject()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x644A04", Offset = "0x644A04", VA = "0x644A04", Slot = "7")]
	public override void HideAll()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x644C40", Offset = "0x644C40", VA = "0x644C40", Slot = "6")]
	public override void OnSetupComplete(bool roomscale)
	{
	}
}
[Token(Token = "0x200003C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568670", Offset = "0x568670")]
public class InputDependentSpriteReplacement : InputRelatedSwitch
{
	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshPro text;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int oculusIndex;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int viveIndex;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int PSVRIndex;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string replaceString;

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x644ED8", Offset = "0x644ED8", VA = "0x644ED8")]
	public InputDependentSpriteReplacement()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x644F50", Offset = "0x644F50", VA = "0x644F50", Slot = "4")]
	public override void CustomAwake()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x644FA8", Offset = "0x644FA8", VA = "0x644FA8", Slot = "5")]
	public override void CustomStart()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x64519C", Offset = "0x64519C", VA = "0x64519C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x6451A0", Offset = "0x6451A0", VA = "0x6451A0", Slot = "6")]
	public override void OnSetupComplete(bool roomscale)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x644FAC", Offset = "0x644FAC", VA = "0x644FAC")]
	public void UpdateSprite()
	{
	}
}
[Token(Token = "0x200003D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568714", Offset = "0x568714")]
public class InputManager : MonoBehaviour
{
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRPlayer newtonPlayer;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NVRHand Hand;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AccountingActionButtonMapping mapping;

	[Token(Token = "0x17000001")]
	public bool ActionButton1Down
	{
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x6451B4", Offset = "0x6451B4", VA = "0x6451B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000002")]
	public bool ActionButton1Up
	{
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x6453F4", Offset = "0x6453F4", VA = "0x6453F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000003")]
	public bool ActionButton1Pressed
	{
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x6454C0", Offset = "0x6454C0", VA = "0x6454C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000004")]
	public float ActionButton1Axis
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x64558C", Offset = "0x64558C", VA = "0x64558C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000005")]
	public bool ActionButton2Down
	{
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x645620", Offset = "0x645620", VA = "0x645620")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000006")]
	public bool ActionButton2Up
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x6456B4", Offset = "0x6456B4", VA = "0x6456B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000007")]
	public bool ActionButton2Pressed
	{
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x645748", Offset = "0x645748", VA = "0x645748")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000008")]
	public float ActionButton2Axis
	{
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x6457DC", Offset = "0x6457DC", VA = "0x6457DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000009")]
	public bool SnapButtonLeftDown
	{
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x645870", Offset = "0x645870", VA = "0x645870")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000A")]
	public bool SnapButtonLeftUp
	{
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x645904", Offset = "0x645904", VA = "0x645904")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	public bool SnapButtonLeftPressed
	{
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x645998", Offset = "0x645998", VA = "0x645998")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000C")]
	public float SnapButtonLeftAxis
	{
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x645A2C", Offset = "0x645A2C", VA = "0x645A2C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700000D")]
	public bool SnapButtonRightDown
	{
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x645AC0", Offset = "0x645AC0", VA = "0x645AC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000E")]
	public bool SnapButtonRightUp
	{
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x645B54", Offset = "0x645B54", VA = "0x645B54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000F")]
	public bool SnapButtonRightPressed
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x645BE8", Offset = "0x645BE8", VA = "0x645BE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000010")]
	public float SnapButtonRightAxis
	{
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x645C7C", Offset = "0x645C7C", VA = "0x645C7C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000011")]
	public bool ResetButtonDown
	{
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x645D10", Offset = "0x645D10", VA = "0x645D10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000012")]
	public bool ResetButtonUp
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x645DA4", Offset = "0x645DA4", VA = "0x645DA4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000013")]
	public bool ResetButtonPressed
	{
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x645E38", Offset = "0x645E38", VA = "0x645E38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000014")]
	public float ResetButtonAxis
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x645ECC", Offset = "0x645ECC", VA = "0x645ECC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x6451A4", Offset = "0x6451A4", VA = "0x6451A4")]
	public InputManager()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x6451AC", Offset = "0x6451AC", VA = "0x6451AC")]
	public void SetMapping(AccountingActionButtonMapping _mapping)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x645280", Offset = "0x645280", VA = "0x645280")]
	private bool GetStatusFromDpad(NVRButtons button, NVRButtonInputs.SimpleButtonState buttonState)
	{
		return default(bool);
	}
}
[Token(Token = "0x200003E")]
public class InputRelatedSwitch : MonoBehaviour
{
	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static NVRSDKIntegrations CurrentIntegrationType;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected NVRPlayer player;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x6449FC", Offset = "0x6449FC", VA = "0x6449FC")]
	public InputRelatedSwitch()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x645F60", Offset = "0x645F60", VA = "0x645F60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x6460A0", Offset = "0x6460A0", VA = "0x6460A0", Slot = "4")]
	public virtual void CustomAwake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x6460A4", Offset = "0x6460A4", VA = "0x6460A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x646240", Offset = "0x646240", VA = "0x646240", Slot = "5")]
	public virtual void CustomStart()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x646244", Offset = "0x646244", VA = "0x646244")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x646130", Offset = "0x646130", VA = "0x646130")]
	protected NVRSDKIntegrations GetIntegration()
	{
		return default(NVRSDKIntegrations);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x64642C", Offset = "0x64642C", VA = "0x64642C", Slot = "6")]
	public virtual void OnSetupComplete(bool roomscale)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x646430", Offset = "0x646430", VA = "0x646430", Slot = "7")]
	public virtual void HideAll()
	{
	}
}
[Token(Token = "0x200003F")]
public class ItemBounceAndRotate : MonoBehaviour
{
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 _startPosition;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float sineAmplitude;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float sineSpeed;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rotateSpeed;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x64785C", Offset = "0x64785C", VA = "0x64785C")]
	public ItemBounceAndRotate()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x647874", Offset = "0x647874", VA = "0x647874")]
	private void Start()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x6478B8", Offset = "0x6478B8", VA = "0x6478B8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000040")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568788", Offset = "0x568788")]
public class ItemController : MonoBehaviour
{
	[Token(Token = "0x2000544")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568994", Offset = "0x568994")]
	private sealed class <RotateOverTime>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ItemController $this;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000441")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600226A")]
			[Address(RVA = "0x64AF0C", Offset = "0x64AF0C", VA = "0x64AF0C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000442")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600226B")]
			[Address(RVA = "0x64AF14", Offset = "0x64AF14", VA = "0x64AF14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x64968C", Offset = "0x64968C", VA = "0x64968C")]
		[DebuggerHidden]
		public <RotateOverTime>c__Iterator0()
		{
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x64AC64", Offset = "0x64AC64", VA = "0x64AC64", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0x64AF1C", Offset = "0x64AF1C", VA = "0x64AF1C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0x64AF30", Offset = "0x64AF30", VA = "0x64AF30", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000545")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5689F4", Offset = "0x5689F4")]
	private sealed class <GravitateTowardsOriginRoutine>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ItemController $this;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000443")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002270")]
			[Address(RVA = "0x64A068", Offset = "0x64A068", VA = "0x64A068", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000444")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002271")]
			[Address(RVA = "0x64A070", Offset = "0x64A070", VA = "0x64A070", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x649694", Offset = "0x649694", VA = "0x649694")]
		[DebuggerHidden]
		public <GravitateTowardsOriginRoutine>c__Iterator1()
		{
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0x649ED8", Offset = "0x649ED8", VA = "0x649ED8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x64A078", Offset = "0x64A078", VA = "0x64A078", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002273")]
		[Address(RVA = "0x64A08C", Offset = "0x64A08C", VA = "0x64A08C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000546")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568A54", Offset = "0x568A54")]
	private sealed class <DragOverTime>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <dragLerp>__0;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ItemController $this;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000445")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002276")]
			[Address(RVA = "0x649E50", Offset = "0x649E50", VA = "0x649E50", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000446")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002277")]
			[Address(RVA = "0x649E58", Offset = "0x649E58", VA = "0x649E58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002274")]
		[Address(RVA = "0x649708", Offset = "0x649708", VA = "0x649708")]
		[DebuggerHidden]
		public <DragOverTime>c__Iterator2()
		{
		}

		[Token(Token = "0x6002275")]
		[Address(RVA = "0x649BC0", Offset = "0x649BC0", VA = "0x649BC0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x649E60", Offset = "0x649E60", VA = "0x649E60", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x649E74", Offset = "0x649E74", VA = "0x649E74", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000547")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568AB4", Offset = "0x568AB4")]
	private sealed class <Grow>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <growLerp>__0;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ItemController $this;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000447")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600227C")]
			[Address(RVA = "0x64A2EC", Offset = "0x64A2EC", VA = "0x64A2EC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000448")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600227D")]
			[Address(RVA = "0x64A2F4", Offset = "0x64A2F4", VA = "0x64A2F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x649710", Offset = "0x649710", VA = "0x649710")]
		[DebuggerHidden]
		public <Grow>c__Iterator3()
		{
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x64A0F0", Offset = "0x64A0F0", VA = "0x64A0F0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x64A2FC", Offset = "0x64A2FC", VA = "0x64A2FC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x64A310", Offset = "0x64A310", VA = "0x64A310", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000548")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568B14", Offset = "0x568B14")]
	private sealed class <RespawnRoutine>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Transform <respawnTransform>__0;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool <fixedRespawn>__0;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Station <respawnStation>__1;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool waitForRespawnTimer;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		internal bool <spawnBlocked>__0;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal ItemController $this;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal object $current;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool $disposing;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal int $PC;

		[Token(Token = "0x17000449")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002282")]
			[Address(RVA = "0x64ABDC", Offset = "0x64ABDC", VA = "0x64ABDC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002283")]
			[Address(RVA = "0x64ABE4", Offset = "0x64ABE4", VA = "0x64ABE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0x64999C", Offset = "0x64999C", VA = "0x64999C")]
		[DebuggerHidden]
		public <RespawnRoutine>c__Iterator4()
		{
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0x64A374", Offset = "0x64A374", VA = "0x64A374", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x64ABEC", Offset = "0x64ABEC", VA = "0x64ABEC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x64AC00", Offset = "0x64AC00", VA = "0x64AC00", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400012F")]
	private const float boundsIncrease = 0.005f;

	[Token(Token = "0x4000130")]
	private const string floorTag = "Floor";

	[Token(Token = "0x4000131")]
	private const string deathzoneTag = "Deathzone";

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Transform CachedTransform;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool CurrentlyClipping;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NVRInteractableSimpleItem CachedNVRObject;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56881C", Offset = "0x56881C")]
	public Station FixedRespawnStation;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform FixedRespawnTransform;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x568854", Offset = "0x568854")]
	[SerializeField]
	private bool kinematic;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5688A0", Offset = "0x5688A0")]
	[SerializeField]
	private bool collidersDisabled;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5688EC", Offset = "0x5688EC")]
	public bool Respawns;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool GravitateTowardsOrigin;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool HideUponImpactWithFloor;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool StationaryItem;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool DisableCollisionOnMagicRespawn;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 originPos;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Station currentStation;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 slotPosition;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody cachedRigidbody;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Collider[] cachedColliders;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LayerMask[] cachedColliderLayers;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MeshRenderer[] cachedMeshRenderers;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MeshFilter[] cachedMeshFilters;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Material[] cachedMaterials;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	private Material[] cachedGhostMaterials;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Coroutine respawnRoutine;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Coroutine dragRoutine;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 CenterOffset;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Bounds CachedHierarchyBounds;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float initialDrag;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float initialAngularDrag;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float initialMass;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private LayerMask initialLayer;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 initialLocalScale;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool beingHeld;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	private bool inLimbo;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float floorRespawnTime;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private GameConfiguration configuration;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private WaitForSeconds respawnDelay;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private GameObject seetroughObject;

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x647ABC", Offset = "0x647ABC", VA = "0x647ABC")]
	public ItemController()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x647AD4", Offset = "0x647AD4", VA = "0x647AD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x648564", Offset = "0x648564", VA = "0x648564")]
	public void Init(Station station)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x648798", Offset = "0x648798", VA = "0x648798")]
	public void DropDead()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x6487F4", Offset = "0x6487F4", VA = "0x6487F4")]
	private void OnBeginInteraction()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x648A5C", Offset = "0x648A5C", VA = "0x648A5C")]
	private void OnEndInteraction()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x648AD0", Offset = "0x648AD0", VA = "0x648AD0")]
	public void UpdateStation(Station newStation)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x648930", Offset = "0x648930", VA = "0x648930")]
	private void ResetPhysicalValues()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x6481A0", Offset = "0x6481A0", VA = "0x6481A0")]
	private Bounds GetCombinedHierarchyExtends()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x648B8C", Offset = "0x648B8C", VA = "0x648B8C")]
	public void SetGhost(bool status)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x648C9C", Offset = "0x648C9C", VA = "0x648C9C")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x648EBC", Offset = "0x648EBC", VA = "0x648EBC")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x648424", Offset = "0x648424", VA = "0x648424")]
	public void SetKinematic(bool status)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x648458", Offset = "0x648458", VA = "0x648458")]
	public void SetColliders(bool status)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x6492A8", Offset = "0x6492A8", VA = "0x6492A8")]
	private void SetColliderLayer(LayerMask mask)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x649374", Offset = "0x649374", VA = "0x649374")]
	private void ResetColliderLayer()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x649464", Offset = "0x649464", VA = "0x649464")]
	public void SetRespawn(bool status)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x64960C", Offset = "0x64960C", VA = "0x64960C")]
	private void OnEnteringNewStation(Station newStation)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x649614", Offset = "0x649614", VA = "0x649614")]
	public void UpdateSlotPosition(Vector3 newPosition)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x649620", Offset = "0x649620", VA = "0x649620")]
	[DebuggerHidden]
	private IEnumerator RotateOverTime()
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x6484F8", Offset = "0x6484F8", VA = "0x6484F8")]
	[DebuggerHidden]
	private IEnumerator GravitateTowardsOriginRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x64969C", Offset = "0x64969C", VA = "0x64969C")]
	[DebuggerHidden]
	private IEnumerator DragOverTime()
	{
		return null;
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x6489F0", Offset = "0x6489F0", VA = "0x6489F0")]
	[DebuggerHidden]
	private IEnumerator Grow()
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x649718", Offset = "0x649718", VA = "0x649718")]
	public void DetermineRespawnDuringClip()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x6491DC", Offset = "0x6491DC", VA = "0x6491DC")]
	public void HideObject()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x6497E0", Offset = "0x6497E0", VA = "0x6497E0")]
	public void HideObjectWithoutParticles()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x648E78", Offset = "0x648E78", VA = "0x648E78")]
	private void Respawn(bool waitForRespawnTimer = false)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x649908", Offset = "0x649908", VA = "0x649908")]
	[DebuggerHidden]
	private IEnumerator RespawnRoutine(bool waitForRespawnTimer)
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x6499A4", Offset = "0x6499A4", VA = "0x6499A4")]
	public bool IsClipping(LayerMask mask)
	{
		return default(bool);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x649AE0", Offset = "0x649AE0", VA = "0x649AE0")]
	public bool IsClippingAtPosition(Vector3 center, LayerMask mask)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000041")]
public class ItemDistance : MonoBehaviour
{
	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float minimumDistace;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OnPassMinimumDistance;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPoint;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform cachedTransform;

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x64AF94", Offset = "0x64AF94", VA = "0x64AF94")]
	public ItemDistance()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x64AF9C", Offset = "0x64AF9C", VA = "0x64AF9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x64AFC4", Offset = "0x64AFC4", VA = "0x64AFC4")]
	public void SetStartPoint()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x64B0C4", Offset = "0x64B0C4", VA = "0x64B0C4")]
	public void MeasureDistance()
	{
	}
}
[Token(Token = "0x2000042")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568B94", Offset = "0x568B94")]
public class ItemSlot : MonoBehaviour
{
	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string itemTag;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OnPutIn;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OnTakeOut;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<GameObject> OnSlotFilled;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ItemController occupyingController;

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x64B398", Offset = "0x64B398", VA = "0x64B398")]
	public ItemSlot()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x64B3A0", Offset = "0x64B3A0", VA = "0x64B3A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x64B78C", Offset = "0x64B78C", VA = "0x64B78C")]
	private void OnItemTakeOut()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x64B8B8", Offset = "0x64B8B8", VA = "0x64B8B8")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x2000043")]
public class ItemSound : MonoBehaviour
{
	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ItemSoundConfiguration configuration;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool disableCollisionSound;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	private NVRInteractableSimpleItem CachedNVRObject;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float soundTimeStamp;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource audioSource;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource collisionSource;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform audioTransform;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform cachedTransform;

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x64BA0C", Offset = "0x64BA0C", VA = "0x64BA0C")]
	public ItemSound()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x64BA14", Offset = "0x64BA14", VA = "0x64BA14")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x64BE50", Offset = "0x64BE50", VA = "0x64BE50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x64BE84", Offset = "0x64BE84", VA = "0x64BE84")]
	private void OnBeginInteraction()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x64C0E4", Offset = "0x64C0E4", VA = "0x64C0E4")]
	private void OnEndInteraction()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x64C13C", Offset = "0x64C13C", VA = "0x64C13C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x64BEDC", Offset = "0x64BEDC", VA = "0x64BEDC")]
	private void PlayRandomClipFromArray(AudioClip[] audioArray, Vector3 position, bool collision = false)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x64C238", Offset = "0x64C238", VA = "0x64C238")]
	private bool ValidInterval()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000044")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x568C58", Offset = "0x568C58")]
public class ItemSoundConfiguration : ScriptableObject
{
	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerGroup MixerGroup;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixerGroup CollisionMixerGroup;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] PickupSounds;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] DropSounds;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] CollisionSounds;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float PitchLow;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float PitchHigh;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float SoundInterval;

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x64C28C", Offset = "0x64C28C", VA = "0x64C28C")]
	public ItemSoundConfiguration()
	{
	}
}
[Token(Token = "0x2000045")]
public class LevelData : MonoBehaviour
{
	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string LevelName;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip LevelLoopClip;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip LevelTransitionClip;

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x6808D4", Offset = "0x6808D4", VA = "0x6808D4")]
	public LevelData()
	{
	}
}
[Token(Token = "0x2000046")]
public class LevelSlot : ItemSlot
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioSource customLevelLoopSource;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioSource customLevelTransitionSource;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private StationController stationController;

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x6808DC", Offset = "0x6808DC", VA = "0x6808DC")]
	public LevelSlot()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x6808E4", Offset = "0x6808E4", VA = "0x6808E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x6809E8", Offset = "0x6809E8", VA = "0x6809E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x680AEC", Offset = "0x680AEC", VA = "0x680AEC")]
	private void OnLevelSlotFilled(GameObject newGameObject)
	{
	}
}
[Token(Token = "0x2000047")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568CF8", Offset = "0x568CF8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568CF8", Offset = "0x568CF8")]
public class LevelTeleportArea : MonoBehaviour
{
	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool available;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string shaderKeywordOutline;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float lineValue;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string shaderKeywordSurface;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float surfaceValue;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool show;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshRenderer mRenderer;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material surfaceMaterial;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color showColor;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color hiddenColor;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Collider surfaceCollider;

	[Token(Token = "0x17000015")]
	public bool Available
	{
		[Token(Token = "0x6000145")]
		[Address(RVA = "0x680CDC", Offset = "0x680CDC", VA = "0x680CDC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x680CE4", Offset = "0x680CE4", VA = "0x680CE4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x680C2C", Offset = "0x680C2C", VA = "0x680C2C")]
	public LevelTeleportArea()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x680CE8", Offset = "0x680CE8", VA = "0x680CE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x680DCC", Offset = "0x680DCC", VA = "0x680DCC")]
	public void Show()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x680DC4", Offset = "0x680DC4", VA = "0x680DC4")]
	public void Hide()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x680DE0", Offset = "0x680DE0", VA = "0x680DE0")]
	public void SetArea(bool value)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x680E18", Offset = "0x680E18", VA = "0x680E18")]
	public void Select()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x680E1C", Offset = "0x680E1C", VA = "0x680E1C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000048")]
public class LevelTeleportationController : MonoBehaviour
{
	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LevelTeleportArea[] areaArray;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NVRTeleporter nvrTeleporter;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NVRTeleportController[] nVRTeleportControllers;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private NVRHand[] handArray;

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x680FEC", Offset = "0x680FEC", VA = "0x680FEC")]
	public LevelTeleportationController()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x680FF4", Offset = "0x680FF4", VA = "0x680FF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x6813FC", Offset = "0x6813FC", VA = "0x6813FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x681528", Offset = "0x681528", VA = "0x681528")]
	private void OnInitialize()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x681128", Offset = "0x681128", VA = "0x681128")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x68152C", Offset = "0x68152C", VA = "0x68152C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x681638", Offset = "0x681638", VA = "0x681638")]
	private void Update()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x68158C", Offset = "0x68158C", VA = "0x68158C")]
	private void SetAreas(bool value)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x681788", Offset = "0x681788", VA = "0x681788")]
	public void EnableArea(LevelTeleportArea area)
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x6817B4", Offset = "0x6817B4", VA = "0x6817B4")]
	public void DisableArea(LevelTeleportArea area)
	{
	}
}
[Token(Token = "0x2000049")]
public class LightFlickerEffect : MonoBehaviour
{
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x568D94", Offset = "0x568D94")]
	public Light light;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x568DCC", Offset = "0x568DCC")]
	public float minIntensity;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x568E04", Offset = "0x568E04")]
	public float maxIntensity;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x568E3C", Offset = "0x568E3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x568E3C", Offset = "0x568E3C")]
	public int smoothing;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Queue<float> smoothQueue;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lastSum;

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x6817E0", Offset = "0x6817E0", VA = "0x6817E0")]
	public LightFlickerEffect()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x6817F4", Offset = "0x6817F4", VA = "0x6817F4")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x681858", Offset = "0x681858", VA = "0x681858")]
	private void Start()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x681924", Offset = "0x681924", VA = "0x681924")]
	private void Update()
	{
	}
}
[Token(Token = "0x200004A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x568E94", Offset = "0x568E94")]
public class LoadingManager : MonoBehaviour
{
	[Token(Token = "0x2000549")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568F38", Offset = "0x568F38")]
	private sealed class <LevelCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AudioSource transitionFXSource;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool <fxExists>__0;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal AsyncOperation <unloadOperation>__0;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int newIndex;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal AsyncOperation <loadOperation>__0;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool <loadingDone>__0;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal LoadingManager $this;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal object $current;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal bool $disposing;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal int $PC;

		[Token(Token = "0x1700044B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002288")]
			[Address(RVA = "0x683238", Offset = "0x683238", VA = "0x683238", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002289")]
			[Address(RVA = "0x683240", Offset = "0x683240", VA = "0x683240", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x68268C", Offset = "0x68268C", VA = "0x68268C")]
		[DebuggerHidden]
		public <LevelCoroutine>c__Iterator0()
		{
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x682BF0", Offset = "0x682BF0", VA = "0x682BF0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x683248", Offset = "0x683248", VA = "0x683248", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x68325C", Offset = "0x68325C", VA = "0x68325C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200054A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568F98", Offset = "0x568F98")]
	private sealed class <LevelCoroutine>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AudioSource transitionFXSource;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool <fxExists>__0;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal AsyncOperation <unloadOperation>__0;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal string levelName;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal AsyncOperation <loadOperation>__0;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool <loadingDone>__0;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal LoadingManager $this;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal object $current;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal bool $disposing;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal int $PC;

		[Token(Token = "0x1700044D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600228E")]
			[Address(RVA = "0x683908", Offset = "0x683908", VA = "0x683908", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700044E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600228F")]
			[Address(RVA = "0x683910", Offset = "0x683910", VA = "0x683910", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x682694", Offset = "0x682694", VA = "0x682694")]
		[DebuggerHidden]
		public <LevelCoroutine>c__Iterator1()
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x6832C0", Offset = "0x6832C0", VA = "0x6832C0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x683918", Offset = "0x683918", VA = "0x683918", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x68392C", Offset = "0x68392C", VA = "0x68392C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200054B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x568FF8", Offset = "0x568FF8")]
	private sealed class <FadeRoutine>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <fadeDuration>__0;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float <timer>__0;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float <startVolume>__0;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float endValue;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float <volume>__1;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LoadingManager $this;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal object $current;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool $disposing;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int $PC;

		[Token(Token = "0x1700044F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002294")]
			[Address(RVA = "0x682B68", Offset = "0x682B68", VA = "0x682B68", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000450")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002295")]
			[Address(RVA = "0x682B70", Offset = "0x682B70", VA = "0x682B70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x682860", Offset = "0x682860", VA = "0x682860")]
		[DebuggerHidden]
		public <FadeRoutine>c__Iterator2()
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x68286C", Offset = "0x68286C", VA = "0x68286C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x682B78", Offset = "0x682B78", VA = "0x682B78", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0x682B8C", Offset = "0x682B8C", VA = "0x682B8C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnForceReposition;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnLevelLoad;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnEnterNewLevel;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action OnSceneActivation;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action OnHideLoadingUI;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static bool InLevelLoad;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayerController PlayerInstance;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static int instanceIndex;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float fixedWaitingTime;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource LoadingAudio;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource NightmareLoadingAudio;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine AudioFadeRoutine;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Coroutine LoadRoutine;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x681B04", Offset = "0x681B04", VA = "0x681B04")]
	public LoadingManager()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x681B14", Offset = "0x681B14", VA = "0x681B14")]
	private void Awake()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x681E9C", Offset = "0x681E9C", VA = "0x681E9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x6821D4", Offset = "0x6821D4", VA = "0x6821D4")]
	private void OnLevelCompleted()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x6823B4", Offset = "0x6823B4", VA = "0x6823B4")]
	private void OnLevelCompletedPlayingTransitionFX(AudioSource transitionFXSource)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x682200", Offset = "0x682200", VA = "0x682200")]
	private int GetNextLevelIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x6823E4", Offset = "0x6823E4", VA = "0x6823E4")]
	private void OnAlternativeLevelCompleted(string nextLevelName, AudioSource transitionFXSource)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x682540", Offset = "0x682540", VA = "0x682540")]
	private void OnRestartGame()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x68225C", Offset = "0x68225C", VA = "0x68225C")]
	private void MoveToLevel(int newIndex, [Optional] AudioSource transitionFXSource)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x6823E8", Offset = "0x6823E8", VA = "0x6823E8")]
	private void MoveToLevel(string nextLevelName, [Optional] AudioSource transitionFXSource)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x68254C", Offset = "0x68254C", VA = "0x68254C")]
	[DebuggerHidden]
	private IEnumerator LevelCoroutine(int newIndex, [Optional] AudioSource transitionFXSource)
	{
		return null;
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x6825EC", Offset = "0x6825EC", VA = "0x6825EC")]
	[DebuggerHidden]
	private IEnumerator LevelCoroutine(string levelName, [Optional] AudioSource transitionFXSource)
	{
		return null;
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x68269C", Offset = "0x68269C", VA = "0x68269C")]
	private void ForceReposition()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x682748", Offset = "0x682748", VA = "0x682748")]
	private void FadeLoadingAudio(float endValue)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x6827D8", Offset = "0x6827D8", VA = "0x6827D8")]
	[DebuggerHidden]
	private IEnumerator FadeRoutine(float endValue)
	{
		return null;
	}
}
[Token(Token = "0x200004B")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 LocalOffset;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform cachedTransform;

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x6843C4", Offset = "0x6843C4", VA = "0x6843C4")]
	public LookAt()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x6843CC", Offset = "0x6843CC", VA = "0x6843CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x6843F4", Offset = "0x6843F4", VA = "0x6843F4")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x200004C")]
public class MaterialCallback : MonoBehaviour
{
	[Token(Token = "0x600016E")]
	[Address(RVA = "0x684EB0", Offset = "0x684EB0", VA = "0x684EB0")]
	public MaterialCallback()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x684EB8", Offset = "0x684EB8", VA = "0x684EB8")]
	public void OnModifyLocalization()
	{
	}
}
[Token(Token = "0x200004D")]
public class MaterialUtility : MonoBehaviour
{
	[Token(Token = "0x6000170")]
	[Address(RVA = "0x685114", Offset = "0x685114", VA = "0x685114")]
	public MaterialUtility()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x68511C", Offset = "0x68511C", VA = "0x68511C")]
	public void MakeMaterialBlack()
	{
	}
}
[Token(Token = "0x200004E")]
public class MouseInsurance : MonoBehaviour
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRHand _nvrHand;

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x696044", Offset = "0x696044", VA = "0x696044")]
	public MouseInsurance()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x69604C", Offset = "0x69604C", VA = "0x69604C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x6960A4", Offset = "0x6960A4", VA = "0x6960A4")]
	private void Update()
	{
	}
}
[Token(Token = "0x200004F")]
public class MouseLookCamera : MonoBehaviour
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedH;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedV;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float pitch;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float yaw;

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x6960A8", Offset = "0x6960A8", VA = "0x6960A8")]
	public MouseLookCamera()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x6960B8", Offset = "0x6960B8", VA = "0x6960B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x6960C8", Offset = "0x6960C8", VA = "0x6960C8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000050")]
public class MovePlatform : MonoBehaviour
{
	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Direction;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cachedTransform;

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x6961DC", Offset = "0x6961DC", VA = "0x6961DC")]
	public MovePlatform()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x696258", Offset = "0x696258", VA = "0x696258")]
	private void Start()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x696280", Offset = "0x696280", VA = "0x696280")]
	public void Move()
	{
	}
}
[Token(Token = "0x2000051")]
public class NVRAnimatorPassthrough : MonoBehaviour
{
	[Token(Token = "0x2000052")]
	public enum Hovering
	{
		[Token(Token = "0x40001A6")]
		None,
		[Token(Token = "0x40001A7")]
		Start,
		[Token(Token = "0x40001A8")]
		Stop
	}

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRHand _hand;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator _animator;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Hovering _hoveringState;

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x5A2E98", Offset = "0x5A2E98", VA = "0x5A2E98")]
	public NVRAnimatorPassthrough()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x5A2EA0", Offset = "0x5A2EA0", VA = "0x5A2EA0")]
	public void Start()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x5A2EFC", Offset = "0x5A2EFC", VA = "0x5A2EFC")]
	private void Init()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x5A2F54", Offset = "0x5A2F54", VA = "0x5A2F54")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000053")]
public class NVRInteractableDragTrigger : NVRInteractable
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UnityEvent OnDragUp;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEvent OnDragDown;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float DragLimitUp;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float DragLimitDown;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 handEnterPosition;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x5A30A0", Offset = "0x5A30A0", VA = "0x5A30A0")]
	public NVRInteractableDragTrigger()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x5A30B8", Offset = "0x5A30B8", VA = "0x5A30B8", Slot = "11")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x5A310C", Offset = "0x5A310C", VA = "0x5A310C", Slot = "12")]
	public override void InteractingUpdate(NVRHand hand)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x5A3194", Offset = "0x5A3194", VA = "0x5A3194")]
	private void DetachAndExecuteEvent(UnityEvent newEvent)
	{
	}
}
[Token(Token = "0x2000054")]
public class OculusPerformanceManager : MonoBehaviour
{
	[Token(Token = "0x2000055")]
	private enum AASettings
	{
		[Token(Token = "0x40001B5")]
		QualitySettings,
		[Token(Token = "0x40001B6")]
		OFF,
		[Token(Token = "0x40001B7")]
		x2,
		[Token(Token = "0x40001B8")]
		x4
	}

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int qualitySettingsAA;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AASettings defaultAA;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private OVRManager.TiledMultiResLevel defaultFFR;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float defaultResolutionScale;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5690C8", Offset = "0x5690C8")]
	private int cpuLevel;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x569108", Offset = "0x569108")]
	private int gpuLevel;

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x7455F4", Offset = "0x7455F4", VA = "0x7455F4")]
	public OculusPerformanceManager()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x74561C", Offset = "0x74561C", VA = "0x74561C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x74582C", Offset = "0x74582C", VA = "0x74582C")]
	private void InitPowerLevels()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x745818", Offset = "0x745818", VA = "0x745818")]
	private void InitResolution()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x7457A8", Offset = "0x7457A8", VA = "0x7457A8")]
	private void InitFFR()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x745658", Offset = "0x745658", VA = "0x745658")]
	private void InitAA()
	{
	}
}
[Token(Token = "0x2000056")]
public class OnResetPositionEvent : MonoBehaviour
{
	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnPositionResetEvent;

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x748444", Offset = "0x748444", VA = "0x748444")]
	public OnResetPositionEvent()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x74844C", Offset = "0x74844C", VA = "0x74844C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x748578", Offset = "0x748578", VA = "0x748578")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x7486A4", Offset = "0x7486A4", VA = "0x7486A4")]
	public void OnResetUserPosition()
	{
	}
}
[Token(Token = "0x2000057")]
public class CCImposterCamera : MonoBehaviour
{
	[Token(Token = "0x40001BA")]
	private const string SHADERNAME_ALPHA = "Tint";

	[Token(Token = "0x40001BB")]
	private const string SHADERNAME_DODGE = "Dodge";

	[Token(Token = "0x40001BC")]
	private const string SHADERNAME_BURN = "Burn";

	[Token(Token = "0x40001BD")]
	private const string SHADERNAME_ADD = "Additive";

	[Token(Token = "0x40001BE")]
	private const string SHADERNAME_ADD_SOFT = "Additive (Soft)";

	[Token(Token = "0x40001BF")]
	private const string SHADERNAME_MUL = "Multiply";

	[Token(Token = "0x40001C0")]
	private const string SHADERNAME_DARKEN = "Darken";

	[Token(Token = "0x40001C1")]
	private const string SHADERNAME_LIGHTEN = "Lighten";

	[Token(Token = "0x40001C2")]
	private const string SHADERNAME_SUB = "Subtractive";

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader shader;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CCImposterCamera instance;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer fadeRenderer;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshFilter fadeMesh;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material fadeMaterial;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CCImposterProfile currentMainProfile;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CCImposterProfile currentBlendProfile;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CCImposterManager.Effects currentEffect;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Color zeroColor;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float currentBlend;

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x69F8A8", Offset = "0x69F8A8", VA = "0x69F8A8")]
	public CCImposterCamera()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x69F8B0", Offset = "0x69F8B0", VA = "0x69F8B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x69F904", Offset = "0x69F904", VA = "0x69F904")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x69F95C", Offset = "0x69F95C", VA = "0x69F95C")]
	private void InitMesh()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x6A00EC", Offset = "0x6A00EC", VA = "0x6A00EC")]
	public static void ApplyProfile(CCImposterProfile profile)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x6A01A0", Offset = "0x6A01A0", VA = "0x6A01A0")]
	private static void SetEffectShader(CCImposterProfile profile)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x6A0D10", Offset = "0x6A0D10", VA = "0x6A0D10")]
	public static void ApplyBlendProfile(CCImposterProfile profile)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x6A0D70", Offset = "0x6A0D70", VA = "0x6A0D70")]
	public static void SetBlendAmount(float value)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x6A0CE0", Offset = "0x6A0CE0", VA = "0x6A0CE0")]
	private void DisableEffect()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x6A066C", Offset = "0x6A066C", VA = "0x6A066C")]
	private void AlphaBlend(Color rgba)
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x6A0740", Offset = "0x6A0740", VA = "0x6A0740")]
	public void LinearBurn(Color rgba)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x6A07F4", Offset = "0x6A07F4", VA = "0x6A07F4")]
	public void LinearDodge(Color rgba)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x6A0B78", Offset = "0x6A0B78", VA = "0x6A0B78")]
	public void Darken(Color rgba)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x6A0C2C", Offset = "0x6A0C2C", VA = "0x6A0C2C")]
	public void Lighten(Color rgba)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x6A0A10", Offset = "0x6A0A10", VA = "0x6A0A10")]
	public void Multiply(Color rgba)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x6A0AC4", Offset = "0x6A0AC4", VA = "0x6A0AC4")]
	public void Subtractive(Color rgba)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x6A08A8", Offset = "0x6A08A8", VA = "0x6A08A8")]
	public void Additive(Color rgba)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x6A095C", Offset = "0x6A095C", VA = "0x6A095C")]
	public void AdditiveSoft(Color rgba)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x6A058C", Offset = "0x6A058C", VA = "0x6A058C")]
	public void ScaleColors(Color rgb)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x69FF54", Offset = "0x69FF54", VA = "0x69FF54")]
	private void InitMaterial(string shader = "Tint")
	{
	}
}
[Token(Token = "0x2000058")]
public class CCImposterManager : MonoBehaviour
{
	[Token(Token = "0x2000059")]
	public enum Effects
	{
		[Token(Token = "0x40001D0")]
		NONE = 0,
		[Token(Token = "0x40001D1")]
		INHERIT = 5,
		[Token(Token = "0x40001D2")]
		ADDITIVE = 10,
		[Token(Token = "0x40001D3")]
		ADDITIVE_SOFT = 20,
		[Token(Token = "0x40001D4")]
		ALPHA = 30,
		[Token(Token = "0x40001D5")]
		BURN = 40,
		[Token(Token = "0x40001D6")]
		DARKEN = 50,
		[Token(Token = "0x40001D7")]
		DODGE = 60,
		[Token(Token = "0x40001D8")]
		LIGHTEN = 70,
		[Token(Token = "0x40001D9")]
		MULTIPLY = 80,
		[Token(Token = "0x40001DA")]
		SUBTRACT = 81
	}

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CCImposterMapping Mapping;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CCImposterManager instance;

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x6A123C", Offset = "0x6A123C", VA = "0x6A123C")]
	public CCImposterManager()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x6A1244", Offset = "0x6A1244", VA = "0x6A1244")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x6A14C8", Offset = "0x6A14C8", VA = "0x6A14C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x6A174C", Offset = "0x6A174C", VA = "0x6A174C")]
	private void OnSetCustomBlendTexture(Texture texture)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x6A1A00", Offset = "0x6A1A00", VA = "0x6A1A00")]
	private void OnSetCustomBlendAmount(float amount)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x6A1AEC", Offset = "0x6A1AEC", VA = "0x6A1AEC")]
	private void OnForceColorCorrection(AmplifyColorEffect cc)
	{
	}
}
[Token(Token = "0x200005A")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x569148", Offset = "0x569148")]
public class CCImposterMapping : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200005B")]
	public struct Mapping
	{
		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LutTextureName;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CCImposterProfile Profile;
	}

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CCImposterProfile Default;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Mapping[] Mappings;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x6A1BC8", Offset = "0x6A1BC8", VA = "0x6A1BC8")]
	public CCImposterMapping()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x6A18AC", Offset = "0x6A18AC", VA = "0x6A18AC")]
	public CCImposterProfile GetProfileByName(string name)
	{
		return null;
	}
}
[Token(Token = "0x200005C")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5691B8", Offset = "0x5691B8")]
public class CCImposterProfile : ScriptableObject
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569228", Offset = "0x569228")]
	public CCImposterManager.Effects Effect;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color EffectColor;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569260", Offset = "0x569260")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x569260", Offset = "0x569260")]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x569260", Offset = "0x569260")]
	public Color ColorScale;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x6A1C14", Offset = "0x6A1C14", VA = "0x6A1C14")]
	public CCImposterProfile()
	{
	}
}
[Token(Token = "0x200005D")]
public class FakeProjectionSlides : MonoBehaviour
{
	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Texture2D slide;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material target;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x7987D0", Offset = "0x7987D0", VA = "0x7987D0")]
	public FakeProjectionSlides()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x7987D8", Offset = "0x7987D8", VA = "0x7987D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x79883C", Offset = "0x79883C", VA = "0x79883C")]
	private void OnDisable()
	{
	}
}
[Token(Token = "0x200005E")]
public class MeshRenderGroupController : MonoBehaviour
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer[] renderers;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Renderer, bool> RendererStates;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool onByDefault;

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x695A34", Offset = "0x695A34", VA = "0x695A34")]
	public MeshRenderGroupController()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x695A3C", Offset = "0x695A3C", VA = "0x695A3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x695A64", Offset = "0x695A64", VA = "0x695A64")]
	private void InitRenderStates()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x695B6C", Offset = "0x695B6C", VA = "0x695B6C")]
	public void ToggleRenderers(bool restore)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x695E88", Offset = "0x695E88", VA = "0x695E88")]
	public void Populate()
	{
	}
}
[Token(Token = "0x200005F")]
public class MimicLight : MonoBehaviour
{
	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light original;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light light;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x695EDC", Offset = "0x695EDC", VA = "0x695EDC")]
	public MimicLight()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x695EE4", Offset = "0x695EE4", VA = "0x695EE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x695F3C", Offset = "0x695F3C", VA = "0x695F3C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000060")]
public class OptimizationManager : MonoBehaviour
{
	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OptimizationManagerSettings Settings;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool playerSetupComplete;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool sceneInit;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera headCam;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x569328", Offset = "0x569328")]
	private static Predicate<OptimizationManagerSettings.SceneProfile> <>f__am$cache0;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x113A518", Offset = "0x113A518", VA = "0x113A518")]
	public OptimizationManager()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x113A520", Offset = "0x113A520", VA = "0x113A520")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x113A524", Offset = "0x113A524", VA = "0x113A524")]
	private void Init()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x113A91C", Offset = "0x113A91C", VA = "0x113A91C")]
	private void OnSetupComplete(bool obj)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x113A794", Offset = "0x113A794", VA = "0x113A794")]
	private OptimizationProfile GetSceneProfile()
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x113A8D4", Offset = "0x113A8D4", VA = "0x113A8D4")]
	public void LoadProfile(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x113AA64", Offset = "0x113AA64", VA = "0x113AA64")]
	private static void ApplyPerformanceLevel(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x113ACB0", Offset = "0x113ACB0", VA = "0x113ACB0")]
	private void ApplyViewDistance(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x113AC38", Offset = "0x113AC38", VA = "0x113AC38")]
	private static void ApplyFFR(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x113AB5C", Offset = "0x113AB5C", VA = "0x113AB5C")]
	private void ApplyResolutionScale(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x113A6A0", Offset = "0x113A6A0", VA = "0x113A6A0")]
	private void InitCamReference()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x113AAEC", Offset = "0x113AAEC", VA = "0x113AAEC")]
	private static void ApplyAA(OptimizationProfile profile)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x113ADD4", Offset = "0x113ADD4", VA = "0x113ADD4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x569338", Offset = "0x569338")]
	private static bool <GetSceneProfile>m__0(OptimizationManagerSettings.SceneProfile x)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000061")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x569348", Offset = "0x569348")]
public class OptimizationManagerSettings : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000062")]
	public class SceneProfile
	{
		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string SceneName;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OptimizationProfile Profile;

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x113AE90", Offset = "0x113AE90", VA = "0x113AE90")]
		public SceneProfile()
		{
		}
	}

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OptimizationProfile PlayerSetupProfile;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OptimizationProfile DefaultInGameProfile;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<SceneProfile> SceneProfileMappings;

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x113AE88", Offset = "0x113AE88", VA = "0x113AE88")]
	public OptimizationManagerSettings()
	{
	}
}
[Token(Token = "0x2000063")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5693B8", Offset = "0x5693B8")]
public class OptimizationProfile : ScriptableObject
{
	[Token(Token = "0x2000064")]
	public enum AASettings
	{
		[Token(Token = "0x40001FA")]
		QualitySettings,
		[Token(Token = "0x40001FB")]
		OFF,
		[Token(Token = "0x40001FC")]
		x2,
		[Token(Token = "0x40001FD")]
		x4
	}

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AASettings AntiAliasing;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OVRManager.TiledMultiResLevel FixedFoveatedRendering;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x569428", Offset = "0x569428")]
	public int CPULevel;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x569440", Offset = "0x569440")]
	public int GPULevel;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x569458", Offset = "0x569458")]
	public float ResolutionScale;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x569474", Offset = "0x569474")]
	public float ViewDistance;

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x113AE98", Offset = "0x113AE98", VA = "0x113AE98")]
	public OptimizationProfile()
	{
	}
}
[Token(Token = "0x2000065")]
public class OVRSubController : MonoBehaviour
{
	[Token(Token = "0x40001FE")]
	private const float minDistanceFacor = 0.2f;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569494", Offset = "0x569494")]
	[SerializeField]
	private MeshRenderer editorMeshRenderer;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshFilter editorMeshFilter;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LayerMask layers;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform parentTransform;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 subtitleOrigin;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 subtitleScaleOrigin;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float maxDistance;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float minDistance;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float distanceFactor;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 direction;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RaycastHit hitInfo;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Ray ray;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool hit;

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x113B770", Offset = "0x113B770", VA = "0x113B770")]
	public OVRSubController()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x113B7D4", Offset = "0x113B7D4", VA = "0x113B7D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x113B9A4", Offset = "0x113B9A4", VA = "0x113B9A4")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000066")]
public class PlantManager : MonoBehaviour
{
	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569500", Offset = "0x569500")]
	public GameObject[] plants;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569538", Offset = "0x569538")]
	public GameObject christmas;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569570", Offset = "0x569570")]
	public GameObject water;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5695A8", Offset = "0x5695A8")]
	public string plant2ActivationTime;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string plant3ActivationTime;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string plant4ActivationTime;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string plant5ActivationTime;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5695E0", Offset = "0x5695E0")]
	public string christmasStart;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string christmasEnd;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569618", Offset = "0x569618")]
	public string waterStart;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string waterEnd;

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x113CAE4", Offset = "0x113CAE4", VA = "0x113CAE4")]
	public PlantManager()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x113CBA4", Offset = "0x113CBA4", VA = "0x113CBA4")]
	private void Start()
	{
	}
}
[Token(Token = "0x2000067")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x569650", Offset = "0x569650")]
public class PlayerController : SimpleFSMStateController
{
	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameConfiguration GlobalGameConfiguration;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<Station> OnPlayerTraversingToNewStation;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnPlayerLeaveGameSpace;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action OnPlayerReEnterGameSpace;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action OnPlayerResetPosition;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action OnInitialize;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Transform HeadTransform;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static bool Roomscale;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public static bool NonVr;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static InputManager SelectionInputManager;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform HeadSnapTransform;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float ResetTimer;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public CanvasSubtitleController Subtitles;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource PlayerSourceFX;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource PlayerLoopSourceFX;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public NVRPlayer Newton;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Transform CachedTransform;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public SelectionController Selection;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public HandController[] handControllers;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public InputManager RightHandButtonInput;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public InputManager LeftHandButtonInput;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public int SnapDirection;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public ImageEffectsManager ColorCorrection;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameConfiguration GameConfigurationData;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject UniversalSetup;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AccountingActionButtonMapping PSVRButtonMapping;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AccountingActionButtonMapping ViveMapping;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private AccountingActionButtonMapping OculusMapping;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float playerCameraHeight;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float playerXOffset;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float ps4CameraDistance;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float positionResetTimer;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float resetTimeLimit;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private bool levelResetCompleted;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x113D2FC", Offset = "0x113D2FC", VA = "0x113D2FC")]
	public PlayerController()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x113D30C", Offset = "0x113D30C", VA = "0x113D30C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x113DADC", Offset = "0x113DADC", VA = "0x113DADC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x113DB6C", Offset = "0x113DB6C", VA = "0x113DB6C")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x113DC1C", Offset = "0x113DC1C", VA = "0x113DC1C")]
	private void OnSetupComplete(bool roomscale)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x113DE1C", Offset = "0x113DE1C", VA = "0x113DE1C")]
	public void OnResetUserPosition(Vector3 newCameraPosition)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x113DEC8", Offset = "0x113DEC8", VA = "0x113DEC8")]
	public void Unparent()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x113DF54", Offset = "0x113DF54", VA = "0x113DF54")]
	public void ResetToEnteringLevel()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x113DFB0", Offset = "0x113DFB0", VA = "0x113DFB0")]
	public void UpdateGameReset()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x113E374", Offset = "0x113E374", VA = "0x113E374")]
	public void ResetTheGameReset()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x113E37C", Offset = "0x113E37C", VA = "0x113E37C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x113E380", Offset = "0x113E380", VA = "0x113E380")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x113E450", Offset = "0x113E450", VA = "0x113E450")]
	private void CheckOculusRecenter()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x113E4F8", Offset = "0x113E4F8", VA = "0x113E4F8")]
	public void BroadcastTraversal(Station newStation)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x113E5EC", Offset = "0x113E5EC", VA = "0x113E5EC")]
	public void BroadcastLeaveGameSpace()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x113E698", Offset = "0x113E698", VA = "0x113E698")]
	public void BroadcastEnterGameSpace()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x113E744", Offset = "0x113E744", VA = "0x113E744")]
	public void MoveToTransform(Transform newTransform)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x113E830", Offset = "0x113E830", VA = "0x113E830")]
	public void MoveToStation(Station station)
	{
	}
}
[Token(Token = "0x2000068")]
public class PlayerPrefManager : MonoBehaviour
{
	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Key;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnPlayerPrefsHaveKey;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnPlayerPrefsDoNotHaveKey;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x569784", Offset = "0x569784")]
	public int RelevantIndex;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnIndexMatch;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnIndexDoNotMatch;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool SimulateIndexMatch;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool SimulateKeyExists;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool SimulateKeyExistsDeleteAllSinglePlaythroughKeys;

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x113EDA4", Offset = "0x113EDA4", VA = "0x113EDA4")]
	public PlayerPrefManager()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x113EDFC", Offset = "0x113EDFC", VA = "0x113EDFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x113EE40", Offset = "0x113EE40", VA = "0x113EE40")]
	public void DeleteContinueKeys()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x113EE9C", Offset = "0x113EE9C", VA = "0x113EE9C")]
	public void DeleteAllSinglePlaythroughKeys()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x113F0D8", Offset = "0x113F0D8", VA = "0x113F0D8")]
	public void DeleteKey()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x113F100", Offset = "0x113F100", VA = "0x113F100")]
	public void SetKey()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x113F12C", Offset = "0x113F12C", VA = "0x113F12C")]
	public void SetKeyIntValue(int value)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x113F160", Offset = "0x113F160", VA = "0x113F160")]
	public void AdvanceIntValue()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x113F1CC", Offset = "0x113F1CC", VA = "0x113F1CC")]
	public void InvokeEvents()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x113F224", Offset = "0x113F224", VA = "0x113F224")]
	public void InvokeIndexEvents()
	{
	}
}
[Token(Token = "0x2000069")]
public class PlayerSetupManager : MonoBehaviour
{
	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnSetupComplete;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool setupComplete;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool loadingNextLevel;

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x113F298", Offset = "0x113F298", VA = "0x113F298")]
	public PlayerSetupManager()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x113F2A0", Offset = "0x113F2A0", VA = "0x113F2A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x113F2EC", Offset = "0x113F2EC", VA = "0x113F2EC")]
	public void SetupComplete()
	{
	}
}
[Token(Token = "0x200006A")]
public class PlayerSpawn : MonoBehaviour
{
	[Token(Token = "0x200054C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5697FC", Offset = "0x5697FC")]
	private sealed class <DelayedLoad>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float seconds;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000451")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600229A")]
			[Address(RVA = "0x113FB24", Offset = "0x113FB24", VA = "0x113FB24", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000452")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600229B")]
			[Address(RVA = "0x113FB2C", Offset = "0x113FB2C", VA = "0x113FB2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0x113F698", Offset = "0x113F698", VA = "0x113F698")]
		[DebuggerHidden]
		public <DelayedLoad>c__Iterator0()
		{
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x113FA50", Offset = "0x113FA50", VA = "0x113FA50", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600229C")]
		[Address(RVA = "0x113FB34", Offset = "0x113FB34", VA = "0x113FB34", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x113FB48", Offset = "0x113FB48", VA = "0x113FB48", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool PLAYERINSTANTIATED;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject PlayerPrefab;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5697A4", Offset = "0x5697A4")]
	[SerializeField]
	private UnityEvent SetupCompleteEvent;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent OculusLoadingEvent;

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x113F2F8", Offset = "0x113F2F8", VA = "0x113F2F8")]
	public PlayerSpawn()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x113F300", Offset = "0x113F300", VA = "0x113F300")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x113F624", Offset = "0x113F624", VA = "0x113F624")]
	[DebuggerHidden]
	private IEnumerator DelayedLoad(float seconds)
	{
		return null;
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x113F6A0", Offset = "0x113F6A0", VA = "0x113F6A0")]
	private void OnSetupComplete(bool roomscale)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x113F7D4", Offset = "0x113F7D4", VA = "0x113F7D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x113F9BC", Offset = "0x113F9BC", VA = "0x113F9BC")]
	private void OnSceneActivation()
	{
	}
}
[Token(Token = "0x200006B")]
public class PlayRandomSound : MonoBehaviour
{
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool PlayOnEnable;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] sounds;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float delay;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float minPitch;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float maxPitch;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float timestamp;

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x11426E4", Offset = "0x11426E4", VA = "0x11426E4")]
	public PlayRandomSound()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x11426F4", Offset = "0x11426F4", VA = "0x11426F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x1142788", Offset = "0x1142788", VA = "0x1142788")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x1142798", Offset = "0x1142798", VA = "0x1142798")]
	public void PlayRandomClip()
	{
	}
}
[Token(Token = "0x200006C")]
public class PourableItem : MonoBehaviour
{
	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform ObjectTop;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent EventStartPour;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent EventStopPour;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isTipped;

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x11520DC", Offset = "0x11520DC", VA = "0x11520DC")]
	public PourableItem()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x11520E4", Offset = "0x11520E4", VA = "0x11520E4")]
	private void Update()
	{
	}
}
[Token(Token = "0x200006D")]
public class PSVRDeviceManager : MonoBehaviour
{
	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x1153FD0", Offset = "0x1153FD0", VA = "0x1153FD0")]
	public PSVRDeviceManager()
	{
	}
}
[Token(Token = "0x200006E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56989C", Offset = "0x56989C")]
public class PSVRManager : MonoBehaviour
{
	[Token(Token = "0x200006F")]
	public enum UserStance
	{
		[Token(Token = "0x4000259")]
		Sitting,
		[Token(Token = "0x400025A")]
		Standing
	}

	[Token(Token = "0x2000070")]
	public enum PlayStationVRTrackedDevice
	{
		[Token(Token = "0x400025C")]
		DeviceMove
	}

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UserStance STANCE;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static PlayStationVRTrackedDevice INPUT;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<bool> OnSetupComplete;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<Vector3> OnResetUserPosition;

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x1153FD8", Offset = "0x1153FD8", VA = "0x1153FD8")]
	public PSVRManager()
	{
	}
}
[Token(Token = "0x2000071")]
public class PSVROnScreenSetup : OnScreenSetupBase
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool InSetup;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Transform RigTransform;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform CenteredUI;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Camera PostReprojectionCamera;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569910", Offset = "0x569910")]
	public CanvasGroup BusySpinnerGroup;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569948", Offset = "0x569948")]
	public CanvasGroup InputSelectionCanvasGroup;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ControllerSelection DualshockControllerSelection;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ControllerSelection MoveControllerSelection;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569980", Offset = "0x569980")]
	public CanvasGroup StanceCanvasGroup;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ControllerSelection SitSelection;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ControllerSelection StandSelection;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5699B8", Offset = "0x5699B8")]
	public CanvasGroup MotionWarningCanvasGroup;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5699F0", Offset = "0x5699F0")]
	public CanvasGroup BlackOverlayCanvasGroup;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public CanvasGroup HeadsetWarningCanvasgroup;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public CanvasGroup CameraWarningCanvasGroup;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public CanvasGroup TrackingWarningCanvasGroup;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public CanvasGroup InitialTrackingCanvasGroup;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569A28", Offset = "0x569A28")]
	public Transform RotateableElementsTransform;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public PSVRManager.UserStance StanceResult;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private bool reproCam;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Coroutine busyRoutine;

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x1153FE4", Offset = "0x1153FE4", VA = "0x1153FE4")]
	public PSVROnScreenSetup()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x1153FF4", Offset = "0x1153FF4", VA = "0x1153FF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x1154020", Offset = "0x1154020", VA = "0x1154020")]
	private void Hide()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x1154128", Offset = "0x1154128", VA = "0x1154128")]
	private void OnPlayerTraversingToNewStation(Station station)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x1154130", Offset = "0x1154130", VA = "0x1154130")]
	private void OnResetUserPosition(Vector3 pos)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x1154138", Offset = "0x1154138", VA = "0x1154138")]
	private void OnPlayerLeaveGameSpace()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x1154148", Offset = "0x1154148", VA = "0x1154148")]
	private void OnPlayerReEnterGameSpace()
	{
	}
}
[Serializable]
[Token(Token = "0x2000072")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x569A60", Offset = "0x569A60")]
public class RapAction : ScriptableObject
{
	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool Initialized;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SpokenWord[] PickupWords;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SpokenWord[] HoldingWords;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private SpokenWord[] DroppingWords;

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x11547D8", Offset = "0x11547D8", VA = "0x11547D8")]
	public RapAction()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x11547E0", Offset = "0x11547E0", VA = "0x11547E0")]
	public void ResetAction()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x11547E8", Offset = "0x11547E8", VA = "0x11547E8")]
	public SpokenWord GetClipPickupClip()
	{
		return null;
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x1154860", Offset = "0x1154860", VA = "0x1154860")]
	public SpokenWord GetHoldingClips()
	{
		return null;
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x1154868", Offset = "0x1154868", VA = "0x1154868")]
	public SpokenWord GetDroppingClips()
	{
		return null;
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x11547F0", Offset = "0x11547F0", VA = "0x11547F0")]
	private SpokenWord GetClipFromArray(SpokenWord[] clipArray)
	{
		return null;
	}
}
[Token(Token = "0x2000073")]
public class RapManager : MonoBehaviour
{
	[Token(Token = "0x2000074")]
	public enum LastPlayerAction
	{
		[Token(Token = "0x400028C")]
		AteShit,
		[Token(Token = "0x400028D")]
		DidNothing,
		[Token(Token = "0x400028E")]
		PickedUpCash,
		[Token(Token = "0x400028F")]
		DroppedCash,
		[Token(Token = "0x4000290")]
		PickedUpHealth,
		[Token(Token = "0x4000291")]
		DroppedHealth,
		[Token(Token = "0x4000292")]
		PickedUpFry,
		[Token(Token = "0x4000293")]
		DroppedFry,
		[Token(Token = "0x4000294")]
		PickedUpBook,
		[Token(Token = "0x4000295")]
		DroppedBook
	}

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Performer RapPerformer;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource BeatAudio;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip BeatClip;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpokenWord IntroWord;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float IntroDuration;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RapAction NothingAction;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RapAction CashAction;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RapAction HealthAction;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private RapAction FryAction;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private RapAction BookAction;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x569B60", Offset = "0x569B60")]
	[SerializeField]
	private RapAction ShitAction;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private SpokenWord FinalWord;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RapAction lastAction;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float timer;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float barLength;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip referenceAudioClipForBarLength;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SpokenWord queuedWord;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool acceptQueuing;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool playing;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool finale;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	private bool stopTimer;

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x1154870", Offset = "0x1154870", VA = "0x1154870")]
	public RapManager()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x1154890", Offset = "0x1154890", VA = "0x1154890")]
	private void Awake()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x1154918", Offset = "0x1154918", VA = "0x1154918")]
	public void StartRap()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x1154988", Offset = "0x1154988", VA = "0x1154988")]
	public void StopRap()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x11549D4", Offset = "0x11549D4", VA = "0x11549D4")]
	public void AcceptRegularQueuing(bool status)
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x1154A6C", Offset = "0x1154A6C", VA = "0x1154A6C")]
	public void QueuePickup(RapAction action)
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x1154A7C", Offset = "0x1154A7C", VA = "0x1154A7C")]
	public void QueueDrop(RapAction action)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x1154B34", Offset = "0x1154B34", VA = "0x1154B34")]
	public void QueueShit()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x1154B70", Offset = "0x1154B70", VA = "0x1154B70")]
	public void QueueFinale()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x1154C1C", Offset = "0x1154C1C", VA = "0x1154C1C")]
	public void ForceRapAudio(AudioClip forcedClip)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x1154C20", Offset = "0x1154C20", VA = "0x1154C20")]
	public void ForceRapAudio(SpokenWord word)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x1154C54", Offset = "0x1154C54", VA = "0x1154C54")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000075")]
public class RemoveDuplicates : MonoBehaviour
{
	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextAsset text;

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x1154E88", Offset = "0x1154E88", VA = "0x1154E88")]
	public RemoveDuplicates()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x1154E90", Offset = "0x1154E90", VA = "0x1154E90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x1154F6C", Offset = "0x1154F6C", VA = "0x1154F6C")]
	public static string RemoveDoubles(string input)
	{
		return null;
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x1154FFC", Offset = "0x1154FFC", VA = "0x1154FFC")]
	private string removedupes(string s)
	{
		return null;
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x1154F04", Offset = "0x1154F04", VA = "0x1154F04")]
	private string removedupesReader(TextAsset asset)
	{
		return null;
	}
}
[Token(Token = "0x2000076")]
public class ResetLocalPositionRotation : MonoBehaviour
{
	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 originalPosition;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion originalRoation;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform cachedTransform;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x1155190", Offset = "0x1155190", VA = "0x1155190")]
	public ResetLocalPositionRotation()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x1155198", Offset = "0x1155198", VA = "0x1155198")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x1155200", Offset = "0x1155200", VA = "0x1155200")]
	public void Reset()
	{
	}
}
[Token(Token = "0x2000077")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x569BD8", Offset = "0x569BD8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x569BD8", Offset = "0x569BD8")]
public class RespawnParticles : MonoBehaviour
{
	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particles;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource audioSource;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cachedTransform;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] SpawnAudioArray;

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x1155284", Offset = "0x1155284", VA = "0x1155284")]
	public RespawnParticles()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x115528C", Offset = "0x115528C", VA = "0x115528C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x1155318", Offset = "0x1155318", VA = "0x1155318")]
	public void CallParticles(Vector3 position)
	{
	}
}
[Token(Token = "0x2000078")]
public class RotateForMe : MonoBehaviour
{
	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x1107C3C", Offset = "0x1107C3C", VA = "0x1107C3C")]
	public RotateForMe()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x1107C4C", Offset = "0x1107C4C", VA = "0x1107C4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x1107C50", Offset = "0x1107C50", VA = "0x1107C50")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000079")]
public class RotationTest : MonoBehaviour
{
	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform ArrowTransform;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform Target;

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x1107CB4", Offset = "0x1107CB4", VA = "0x1107CB4")]
	public RotationTest()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x1107CBC", Offset = "0x1107CBC", VA = "0x1107CBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x1107CC0", Offset = "0x1107CC0", VA = "0x1107CC0")]
	private void Update()
	{
	}
}
[Token(Token = "0x200007A")]
public class SceneLoadNest : NestInput
{
	[Token(Token = "0x6000225")]
	[Address(RVA = "0x11081FC", Offset = "0x11081FC", VA = "0x11081FC")]
	public SceneLoadNest()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x1108204", Offset = "0x1108204", VA = "0x1108204", Slot = "4")]
	public override void Start()
	{
	}
}
[Token(Token = "0x200007B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x569C64", Offset = "0x569C64")]
public class SeedBullet : MonoBehaviour
{
	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject bulletRepresentation;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Rigidbody CachedRigidbody;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider cachedCollider;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayRandomSound HitSoundManager;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CachedTransform;

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x1109774", Offset = "0x1109774", VA = "0x1109774")]
	public SeedBullet()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x110977C", Offset = "0x110977C", VA = "0x110977C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x1109804", Offset = "0x1109804", VA = "0x1109804")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x110983C", Offset = "0x110983C", VA = "0x110983C")]
	public void SetAlive(bool status)
	{
	}
}
[Token(Token = "0x200007C")]
public class SeedGunManager : MonoBehaviour
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569CF8", Offset = "0x569CF8")]
	[SerializeField]
	private Animator gunAnimator;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string shootClipName;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569D54", Offset = "0x569D54")]
	[SerializeField]
	private PlayRandomSound RandomSoundManager;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayRandomSound BlockedSoundManager;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569DB0", Offset = "0x569DB0")]
	[SerializeField]
	private SeedBullet bulletPrefab;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform bulletOrigin;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569E0C", Offset = "0x569E0C")]
	[SerializeField]
	private float reloadDuration;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float reloadTimer;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569E58", Offset = "0x569E58")]
	[SerializeField]
	private Vector3 bulletForce;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float bulletMass;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float bulletDrag;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float bulletAngularDrag;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569ED4", Offset = "0x569ED4")]
	[SerializeField]
	private Transform ShootingLimitationTransform;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float dotProductLimit;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x569F30", Offset = "0x569F30")]
	[SerializeField]
	private int poolingAmount;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int poolIndex;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SeedBullet[] bulletPool;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Collider RaycastCollider;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LayerMask RaycastMask;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private NVRInteractableStickyItem nvrStickyItem;

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x11098BC", Offset = "0x11098BC", VA = "0x11098BC")]
	public SeedGunManager()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x11098E8", Offset = "0x11098E8", VA = "0x11098E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x1109C44", Offset = "0x1109C44", VA = "0x1109C44")]
	public void RequestShoot()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x110A1A4", Offset = "0x110A1A4", VA = "0x110A1A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x1109FF8", Offset = "0x1109FF8", VA = "0x1109FF8")]
	private void BlockShoot()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x1109EA0", Offset = "0x1109EA0", VA = "0x1109EA0")]
	private bool RayCastValid()
	{
		return default(bool);
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x110A024", Offset = "0x110A024", VA = "0x110A024")]
	private void Shoot()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x110A2A4", Offset = "0x110A2A4", VA = "0x110A2A4")]
	private SeedBullet RequestBulletFromPool()
	{
		return null;
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x1109944", Offset = "0x1109944", VA = "0x1109944")]
	private void PoolBullets()
	{
	}
}
[Token(Token = "0x200007D")]
public class SelectionController : SimpleFSMStateController
{
	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnNewStationSelected;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnEmptySelection;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Station UpcomingStation;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool SelectionAllowed;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask RaycastMask;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource Audio;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CachedTransform;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool SelectionActive;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public float AnimationProgression;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Station CurrentlySelectedStation;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameConfiguration configuration;

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x110A324", Offset = "0x110A324", VA = "0x110A324")]
	public SelectionController()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x110A334", Offset = "0x110A334", VA = "0x110A334")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x110A35C", Offset = "0x110A35C", VA = "0x110A35C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x110AA3C", Offset = "0x110AA3C", VA = "0x110AA3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x110AA84", Offset = "0x110AA84", VA = "0x110AA84")]
	public bool TryCallSelection()
	{
		return default(bool);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x110ADE4", Offset = "0x110ADE4", VA = "0x110ADE4")]
	private void Update()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x110AE68", Offset = "0x110AE68", VA = "0x110AE68")]
	public void CloseSelection()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x110AD68", Offset = "0x110AD68", VA = "0x110AD68")]
	public void DenySelection()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x110AF7C", Offset = "0x110AF7C", VA = "0x110AF7C")]
	public void BroadcastNewSelection()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x110B028", Offset = "0x110B028", VA = "0x110B028")]
	public void BroadcastEmptySelection()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x110B0D4", Offset = "0x110B0D4", VA = "0x110B0D4")]
	public void MoveToNextStation()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x110B2E4", Offset = "0x110B2E4", VA = "0x110B2E4")]
	public void MoveToPreviousStation()
	{
	}
}
[Token(Token = "0x200007E")]
public abstract class SelectionElement : MonoBehaviour
{
	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CachedTransform;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Transform headTransform;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected GameConfiguration configuration;

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x110B518", Offset = "0x110B518", VA = "0x110B518")]
	protected SelectionElement()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x110B520", Offset = "0x110B520", VA = "0x110B520")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x110B5C8", Offset = "0x110B5C8", VA = "0x110B5C8", Slot = "4")]
	public virtual void CustomAwake()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x110B5CC", Offset = "0x110B5CC", VA = "0x110B5CC", Slot = "5")]
	public virtual void Idle(bool availble)
	{
	}

	[Token(Token = "0x6000245")]
	public abstract void Init(Transform headTransform);

	[Token(Token = "0x6000246")]
	public abstract void Open();

	[Token(Token = "0x6000247")]
	public abstract void Animate(float progression);

	[Token(Token = "0x6000248")]
	public abstract void Hide(float progression);
}
[Token(Token = "0x200007F")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x569F9C", Offset = "0x569F9C")]
public class SelectionRepresentationAnimatorControlled : SelectionRepresentation
{
	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x110CDF0", Offset = "0x110CDF0", VA = "0x110CDF0")]
	public SelectionRepresentationAnimatorControlled()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x110CE00", Offset = "0x110CE00", VA = "0x110CE00", Slot = "4")]
	public override void CustomAwake()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x110CE58", Offset = "0x110CE58", VA = "0x110CE58")]
	private void Start()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x110D0AC", Offset = "0x110D0AC", VA = "0x110D0AC", Slot = "6")]
	public override void Init(Transform headTransform)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x110D0B0", Offset = "0x110D0B0", VA = "0x110D0B0", Slot = "5")]
	public override void Idle(bool available)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x110D228", Offset = "0x110D228", VA = "0x110D228", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x110D2F8", Offset = "0x110D2F8", VA = "0x110D2F8", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x110D4B4", Offset = "0x110D4B4", VA = "0x110D4B4", Slot = "9")]
	public override void Hide(float progression)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x110D538", Offset = "0x110D538", VA = "0x110D538")]
	private void OnSelect()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x110D598", Offset = "0x110D598", VA = "0x110D598")]
	private void OnDeselect()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x110D5F8", Offset = "0x110D5F8", VA = "0x110D5F8")]
	private void OnDiscard()
	{
	}
}
[Token(Token = "0x2000080")]
public class SelectionRepresentationAudio : SelectionRepresentation
{
	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource Audio;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip AppearClip;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip SelectClip;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip DeselectClip;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip ValidateClip;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip DiscardClip;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x110D658", Offset = "0x110D658", VA = "0x110D658")]
	public SelectionRepresentationAudio()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x110D668", Offset = "0x110D668", VA = "0x110D668")]
	private void Start()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x110D960", Offset = "0x110D960", VA = "0x110D960")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x110DC58", Offset = "0x110DC58", VA = "0x110DC58")]
	private void OnDeselect()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x110DCCC", Offset = "0x110DCCC", VA = "0x110DCCC")]
	private void OnSelect()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x110DD40", Offset = "0x110DD40", VA = "0x110DD40")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x110DDB4", Offset = "0x110DDB4", VA = "0x110DDB4")]
	private void OnDiscard()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x110DE28", Offset = "0x110DE28", VA = "0x110DE28", Slot = "6")]
	public override void Init(Transform headTransform)
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x110DE2C", Offset = "0x110DE2C", VA = "0x110DE2C", Slot = "4")]
	public override void CustomAwake()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x110DE30", Offset = "0x110DE30", VA = "0x110DE30", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x110DFD4", Offset = "0x110DFD4", VA = "0x110DFD4", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x110DFD8", Offset = "0x110DFD8", VA = "0x110DFD8", Slot = "9")]
	public override void Hide(float progression)
	{
	}
}
[Token(Token = "0x2000081")]
public class OnScreenSetupBase : SimpleFSMStateController
{
	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GameObject backgroundSphere;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Transform CachedTransform;

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x7486D0", Offset = "0x7486D0", VA = "0x7486D0")]
	public OnScreenSetupBase()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x7486D8", Offset = "0x7486D8", VA = "0x7486D8")]
	public void SetCanvasGroup(CanvasGroup cGroup, float alpha)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x74878C", Offset = "0x74878C", VA = "0x74878C")]
	public void SetBackgroundSphere(bool status)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x7487C0", Offset = "0x7487C0", VA = "0x7487C0")]
	public void ResetSetupPosition()
	{
	}
}
[Token(Token = "0x2000082")]
public class PSVRSetupState_DisplayMotionWarning : SimpleFSMState
{
	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x1154158", Offset = "0x1154158", VA = "0x1154158")]
	public PSVRSetupState_DisplayMotionWarning(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000083")]
public class PSVRSetupState_Entry : SimpleFSMState
{
	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x11541FC", Offset = "0x11541FC", VA = "0x11541FC")]
	public PSVRSetupState_Entry(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000084")]
public class PSVRSetupState_Exit : SimpleFSMState
{
	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x11542A0", Offset = "0x11542A0", VA = "0x11542A0")]
	public PSVRSetupState_Exit(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000085")]
public class PSVRSetupState_InputSelection : SimpleFSMState
{
	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x1154344", Offset = "0x1154344", VA = "0x1154344")]
	public PSVRSetupState_InputSelection(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000086")]
public class PSVRSetupState_StanceSelection : SimpleFSMState
{
	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x11543E8", Offset = "0x11543E8", VA = "0x11543E8")]
	public PSVRSetupState_StanceSelection(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000087")]
public class PSVRSetupState_WaitingforInitialTracking : SimpleFSMState
{
	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new PSVROnScreenSetup cntrl;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x115448C", Offset = "0x115448C", VA = "0x115448C")]
	public PSVRSetupState_WaitingforInitialTracking(SimpleFSMStateController controller)
	{
	}
}
[Token(Token = "0x2000088")]
public class UniversalVRSetupState_DisplayMotionWarning : SimpleFSMState
{
	[Token(Token = "0x200054D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A030", Offset = "0x56A030")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <headEuler>__0;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float <fadeLerp>__0;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal UniversalVRSetupState_DisplayMotionWarning $this;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x17000453")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022A0")]
			[Address(RVA = "0x77472C", Offset = "0x77472C", VA = "0x77472C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000454")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022A1")]
			[Address(RVA = "0x774734", Offset = "0x774734", VA = "0x774734", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0x774318", Offset = "0x774318", VA = "0x774318")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0x77437C", Offset = "0x77437C", VA = "0x77437C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x77473C", Offset = "0x77473C", VA = "0x77473C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0x774750", Offset = "0x774750", VA = "0x774750", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new UniversalVROnScreenSetup cntrl;

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x773C08", Offset = "0x773C08", VA = "0x773C08")]
	public UniversalVRSetupState_DisplayMotionWarning(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x7742AC", Offset = "0x7742AC", VA = "0x7742AC", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x774320", Offset = "0x774320", VA = "0x774320", Slot = "7")]
	public override void Reason()
	{
	}
}
[Token(Token = "0x2000089")]
public class UniversalVRSetupState_Entry : SimpleFSMState
{
	[Token(Token = "0x200054E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A0A0", Offset = "0x56A0A0")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <lerp>__0;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal UniversalVRSetupState_Entry $this;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000455")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022A6")]
			[Address(RVA = "0x774B6C", Offset = "0x774B6C", VA = "0x774B6C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000456")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022A7")]
			[Address(RVA = "0x774B74", Offset = "0x774B74", VA = "0x774B74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x774820", Offset = "0x774820", VA = "0x774820")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0x774884", Offset = "0x774884", VA = "0x774884", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x774B7C", Offset = "0x774B7C", VA = "0x774B7C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x774B90", Offset = "0x774B90", VA = "0x774B90", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new UniversalVROnScreenSetup cntrl;

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x773B64", Offset = "0x773B64", VA = "0x773B64")]
	public UniversalVRSetupState_Entry(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x7747B4", Offset = "0x7747B4", VA = "0x7747B4", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x774828", Offset = "0x774828", VA = "0x774828", Slot = "7")]
	public override void Reason()
	{
	}
}
[Token(Token = "0x200008A")]
public class UniversalVRSetupState_Exit : SimpleFSMState
{
	[Token(Token = "0x200054F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A110", Offset = "0x56A110")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <fadeLerp>__0;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal UniversalVRSetupState_Exit $this;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000457")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022AC")]
			[Address(RVA = "0x774F44", Offset = "0x774F44", VA = "0x774F44", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000458")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022AD")]
			[Address(RVA = "0x774F4C", Offset = "0x774F4C", VA = "0x774F4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x774C60", Offset = "0x774C60", VA = "0x774C60")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x774C68", Offset = "0x774C68", VA = "0x774C68", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x774F54", Offset = "0x774F54", VA = "0x774F54", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x774F68", Offset = "0x774F68", VA = "0x774F68", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new UniversalVROnScreenSetup cntrl;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x773D50", Offset = "0x773D50", VA = "0x773D50")]
	public UniversalVRSetupState_Exit(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x774BF4", Offset = "0x774BF4", VA = "0x774BF4", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}
}
[Token(Token = "0x200008B")]
public class UniversalVRSetupState_StanceSelection : SimpleFSMState
{
	[Token(Token = "0x2000550")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A190", Offset = "0x56A190")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <fadeLerp>__0;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal UniversalVRSetupState_StanceSelection $this;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000459")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022B2")]
			[Address(RVA = "0x775464", Offset = "0x775464", VA = "0x775464", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022B3")]
			[Address(RVA = "0x77546C", Offset = "0x77546C", VA = "0x77546C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0x775038", Offset = "0x775038", VA = "0x775038")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x775340", Offset = "0x775340", VA = "0x775340", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x775474", Offset = "0x775474", VA = "0x775474", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0x775488", Offset = "0x775488", VA = "0x775488", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000551")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A1F0", Offset = "0x56A1F0")]
	private sealed class <Exit>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <fadeLerp>__0;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal UniversalVRSetupState_StanceSelection $this;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x1700045B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022B8")]
			[Address(RVA = "0x77567C", Offset = "0x77567C", VA = "0x77567C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022B9")]
			[Address(RVA = "0x775684", Offset = "0x775684", VA = "0x775684", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x775338", Offset = "0x775338", VA = "0x775338")]
		[DebuggerHidden]
		public <Exit>c__Iterator1()
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x7754EC", Offset = "0x7754EC", VA = "0x7754EC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x77568C", Offset = "0x77568C", VA = "0x77568C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x7756A0", Offset = "0x7756A0", VA = "0x7756A0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private new UniversalVROnScreenSetup cntrl;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float sittingProgress;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float standingProgress;

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x773CAC", Offset = "0x773CAC", VA = "0x773CAC")]
	public UniversalVRSetupState_StanceSelection(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x774FCC", Offset = "0x774FCC", VA = "0x774FCC", Slot = "4")]
	[DebuggerHidden]
	public override IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x775040", Offset = "0x775040", VA = "0x775040", Slot = "8")]
	public override void DoUpdate()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x775248", Offset = "0x775248", VA = "0x775248", Slot = "7")]
	public override void Reason()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x7752CC", Offset = "0x7752CC", VA = "0x7752CC", Slot = "5")]
	[DebuggerHidden]
	public override IEnumerator Exit()
	{
		return null;
	}
}
[Token(Token = "0x200008C")]
public class ShootGun : MonoBehaviour
{
	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent UsualEvent;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent HitEvent;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string HitTag;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform cachedTransform;

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x1111C40", Offset = "0x1111C40", VA = "0x1111C40")]
	public ShootGun()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x1111C48", Offset = "0x1111C48", VA = "0x1111C48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x1111C70", Offset = "0x1111C70", VA = "0x1111C70")]
	public void Fire()
	{
	}
}
[Token(Token = "0x200008D")]
public class SimpleGun : MonoBehaviour
{
	[Token(Token = "0x2000552")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A260", Offset = "0x56A260")]
	private sealed class <Follow>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SimpleGun $this;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x1700045D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022BE")]
			[Address(RVA = "0x1112FC0", Offset = "0x1112FC0", VA = "0x1112FC0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022BF")]
			[Address(RVA = "0x1112FC8", Offset = "0x1112FC8", VA = "0x1112FC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x1112D3C", Offset = "0x1112D3C", VA = "0x1112D3C")]
		[DebuggerHidden]
		public <Follow>c__Iterator0()
		{
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x1112F34", Offset = "0x1112F34", VA = "0x1112F34", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0x1112FD0", Offset = "0x1112FD0", VA = "0x1112FD0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0x1112FE4", Offset = "0x1112FE4", VA = "0x1112FE4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRHand hand;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SmoothFollow smoothFollow;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool following;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody cachedRigidBody;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Projectile;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform ProjectileOrigin;

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x1112A08", Offset = "0x1112A08", VA = "0x1112A08")]
	public SimpleGun()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x1112A10", Offset = "0x1112A10", VA = "0x1112A10")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x1112AFC", Offset = "0x1112AFC", VA = "0x1112AFC")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x1112BD8", Offset = "0x1112BD8", VA = "0x1112BD8")]
	private void SetupFollowTarget(GameObject handObject)
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x1112CD0", Offset = "0x1112CD0", VA = "0x1112CD0")]
	[DebuggerHidden]
	private IEnumerator Follow()
	{
		return null;
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x1112D44", Offset = "0x1112D44", VA = "0x1112D44")]
	private void Shoot()
	{
	}
}
[Token(Token = "0x200008E")]
public class SnapshotManager : MonoBehaviour
{
	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixer Mixer;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixerSnapshot FirstSnapshot;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float transitionTime;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioMixerSnapshot[] IntensitySnapshots;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int intensityIndex;

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x111971C", Offset = "0x111971C", VA = "0x111971C")]
	public SnapshotManager()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x1119730", Offset = "0x1119730", VA = "0x1119730")]
	private void Start()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x1119838", Offset = "0x1119838", VA = "0x1119838")]
	public void TransitionToSnapshot(AudioMixerSnapshot snapshot)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x11197C4", Offset = "0x11197C4", VA = "0x11197C4")]
	public void TransitionToSnapshot(AudioMixerSnapshot snapshot, float customTransitionTime)
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x11198B8", Offset = "0x11198B8", VA = "0x11198B8")]
	public void RaiseIntensityLevel()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x111995C", Offset = "0x111995C", VA = "0x111995C")]
	public void LowerIntensityLevel()
	{
	}
}
[Token(Token = "0x200008F")]
public class SpawnPrefab : MonoBehaviour
{
	[Token(Token = "0x2000090")]
	public delegate void EffectsEvent(GameObject other);

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _prefab1;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject _prefab2;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject _prefab3;

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x111A50C", Offset = "0x111A50C", VA = "0x111A50C")]
	public SpawnPrefab()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x111A514", Offset = "0x111A514", VA = "0x111A514")]
	private void Start()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x111A518", Offset = "0x111A518", VA = "0x111A518")]
	private void Update()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x111A51C", Offset = "0x111A51C", VA = "0x111A51C")]
	public void SpawnPrefab1()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x111A63C", Offset = "0x111A63C", VA = "0x111A63C")]
	public void SpawnPrefab2()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x111A75C", Offset = "0x111A75C", VA = "0x111A75C")]
	public void SpawnPrefab3()
	{
	}
}
[Token(Token = "0x2000091")]
public class SpringSet : MonoBehaviour
{
	[Token(Token = "0x6000290")]
	[Address(RVA = "0x111B1BC", Offset = "0x111B1BC", VA = "0x111B1BC")]
	public SpringSet()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x111B1C4", Offset = "0x111B1C4", VA = "0x111B1C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x111B1C8", Offset = "0x111B1C8", VA = "0x111B1C8")]
	public void SpringUp()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x111B274", Offset = "0x111B274", VA = "0x111B274")]
	public void SpringDown()
	{
	}
}
[Token(Token = "0x2000092")]
public class SelectionObject : SelectionElement
{
	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Station StationLink;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SelectionRepresentation[] RepresentationArray;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 initialLookDirection;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion StationRotation;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	private Vector3 targetDirection;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A310", Offset = "0x56A310")]
	public BoxCollider RaycastCollider;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action OnSelect;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action OnDeselect;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Action OnValidate;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action OnDiscard;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool Selected;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float lerpFromTarget;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 endLocalPostion;

	[Token(Token = "0x17000016")]
	[HideInInspector]
	public Vector3 StationPosition
	{
		[Token(Token = "0x6000295")]
		[Address(RVA = "0x110B64C", Offset = "0x110B64C", VA = "0x110B64C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000296")]
		[Address(RVA = "0x110B784", Offset = "0x110B784", VA = "0x110B784")]
		private set
		{
		}
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x110B5D0", Offset = "0x110B5D0", VA = "0x110B5D0")]
	public SelectionObject()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x110B788", Offset = "0x110B788", VA = "0x110B788", Slot = "4")]
	public override void CustomAwake()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x110BB60", Offset = "0x110BB60", VA = "0x110BB60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x110BE9C", Offset = "0x110BE9C", VA = "0x110BE9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x110BFE4", Offset = "0x110BFE4", VA = "0x110BFE4")]
	public void Select(bool value)
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x110C010", Offset = "0x110C010", VA = "0x110C010", Slot = "6")]
	public override void Init(Transform _headTransform)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x110C0B0", Offset = "0x110C0B0", VA = "0x110C0B0", Slot = "5")]
	public override void Idle(bool availble)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x110C154", Offset = "0x110C154", VA = "0x110C154", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x110C4BC", Offset = "0x110C4BC", VA = "0x110C4BC")]
	public float LeftToRightDot()
	{
		return default(float);
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x110C688", Offset = "0x110C688", VA = "0x110C688", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x110CB38", Offset = "0x110CB38", VA = "0x110CB38", Slot = "9")]
	public override void Hide(float progression)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x110CC34", Offset = "0x110CC34", VA = "0x110CC34")]
	private void Vanish()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x110CCF0", Offset = "0x110CCF0", VA = "0x110CCF0")]
	public void Validate()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x110CD04", Offset = "0x110CD04", VA = "0x110CD04")]
	public void Discard()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x110CD18", Offset = "0x110CD18", VA = "0x110CD18")]
	private void OnEnterStation()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x110C8DC", Offset = "0x110C8DC", VA = "0x110C8DC")]
	private void UpdateRotation(float progression)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x110BC74", Offset = "0x110BC74", VA = "0x110BC74")]
	public void PositionAndScaleElements()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x110B9A4", Offset = "0x110B9A4", VA = "0x110B9A4")]
	private SelectionRepresentation InstantiateRepresentation(SelectionRepresentation prefab)
	{
		return null;
	}
}
[Token(Token = "0x2000093")]
public abstract class SelectionRepresentation : SelectionElement
{
	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public SelectionObject ParentSelectionObject;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool ParentedToSelectionObject;

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x110CDE0", Offset = "0x110CDE0", VA = "0x110CDE0")]
	protected SelectionRepresentation()
	{
	}
}
[Token(Token = "0x2000094")]
public class SelectionRepresentationCircleArrow : SelectionRepresentation
{
	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform ArrowRoot;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform ArrowTransform;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SpriteRenderer HighlightRenderer;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SpriteRenderer BackgroundRenderer;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SpriteRenderer ValidateRenderer;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform BackgroundTransform;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioSource Audio;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip AppearClip;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip SelectClip;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip DeselectClip;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip ValidateClip;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioClip DiscardClip;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float arrowInitialDistance;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float ArrowSize;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float ArrowSelectedSize;

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x110DFDC", Offset = "0x110DFDC", VA = "0x110DFDC")]
	public SelectionRepresentationCircleArrow()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x110DFFC", Offset = "0x110DFFC", VA = "0x110DFFC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x110E034", Offset = "0x110E034", VA = "0x110E034")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x110E038", Offset = "0x110E038", VA = "0x110E038", Slot = "6")]
	public override void Init(Transform _headTransform)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x110E040", Offset = "0x110E040", VA = "0x110E040", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x110E0B0", Offset = "0x110E0B0", VA = "0x110E0B0", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x110E834", Offset = "0x110E834", VA = "0x110E834", Slot = "9")]
	public override void Hide(float progression)
	{
	}
}
[Token(Token = "0x2000095")]
public class SelectionRepresentationPositionArrow : SelectionRepresentation
{
	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform ArrowTransform;

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x110E9C0", Offset = "0x110E9C0", VA = "0x110E9C0")]
	public SelectionRepresentationPositionArrow()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x110E9D0", Offset = "0x110E9D0", VA = "0x110E9D0", Slot = "4")]
	public override void CustomAwake()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x110E9D4", Offset = "0x110E9D4", VA = "0x110E9D4", Slot = "6")]
	public override void Init(Transform headTransform)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x110E9D8", Offset = "0x110E9D8", VA = "0x110E9D8", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x110EB1C", Offset = "0x110EB1C", VA = "0x110EB1C", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x110EE30", Offset = "0x110EE30", VA = "0x110EE30", Slot = "9")]
	public override void Hide(float progression)
	{
	}
}
[Token(Token = "0x2000096")]
public class SelectionRepresentationRotatingObject : SelectionRepresentation
{
	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform RotationTransform;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float yRotation;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float lerpValue;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion initialLookDirection;

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x110EFB8", Offset = "0x110EFB8", VA = "0x110EFB8")]
	public SelectionRepresentationRotatingObject()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x110EFC8", Offset = "0x110EFC8", VA = "0x110EFC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x110F000", Offset = "0x110F000", VA = "0x110F000", Slot = "6")]
	public override void Init(Transform _headTransform)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x110F008", Offset = "0x110F008", VA = "0x110F008", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x110F050", Offset = "0x110F050", VA = "0x110F050", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x110F2A0", Offset = "0x110F2A0", VA = "0x110F2A0", Slot = "9")]
	public override void Hide(float progression)
	{
	}
}
[Token(Token = "0x2000097")]
public class SelectionRepresentationSingleArrow : SelectionRepresentation
{
	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform ArrowTransform;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float WorldUpDotLimit;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool worldUp;

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x110F35C", Offset = "0x110F35C", VA = "0x110F35C")]
	public SelectionRepresentationSingleArrow()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x110F378", Offset = "0x110F378", VA = "0x110F378", Slot = "6")]
	public override void Init(Transform _headTransform)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x110F380", Offset = "0x110F380", VA = "0x110F380", Slot = "7")]
	public override void Open()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x110F5BC", Offset = "0x110F5BC", VA = "0x110F5BC", Slot = "8")]
	public override void Animate(float progression)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x110F938", Offset = "0x110F938", VA = "0x110F938", Slot = "9")]
	public override void Hide(float progression)
	{
	}
}
[Token(Token = "0x2000098")]
public class Station : MonoBehaviour
{
	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Available;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool SittingModeIntroStation;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StationHeight;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A368", Offset = "0x56A368")]
	public RespawnParticles ParticlePrefab;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56A3A0", Offset = "0x56A3A0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A3A0", Offset = "0x56A3A0")]
	public Transform MagicRespawnTransform;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform OrientationTransform;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A3EC", Offset = "0x56A3EC")]
	public Transform RespawnTransform;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56A424", Offset = "0x56A424")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A424", Offset = "0x56A424")]
	public bool ShowBounds;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56A470", Offset = "0x56A470")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A470", Offset = "0x56A470")]
	public UnityEvent OnEnterStationEvents;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnLeaveStationEvents;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public SelectionObject StationSelectionObject;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public int StationIndex;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action OnEnterStation;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action OnLeaveStation;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action<Station> OnPlayerEnterStationRoomscale;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<ItemController> itemsAtStation;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<RespawnParticles> RespawnParticlesPool;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int particleIndex;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<ItemController> itemsInLimbo;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameConfiguration configuration;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Texture errorTexture;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform cachedTransform;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float lastRespawnTime;

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x111B324", Offset = "0x111B324", VA = "0x111B324")]
	public Station()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x111B3F0", Offset = "0x111B3F0", VA = "0x111B3F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x111B828", Offset = "0x111B828", VA = "0x111B828")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x111B954", Offset = "0x111B954", VA = "0x111B954")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x111BB78", Offset = "0x111BB78", VA = "0x111BB78")]
	private void OnInitialize()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x111B61C", Offset = "0x111B61C", VA = "0x111B61C")]
	private void CreateRoomScaleTrigger()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x111BBF8", Offset = "0x111BBF8", VA = "0x111BBF8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x111BA98", Offset = "0x111BA98", VA = "0x111BA98")]
	private void PoolParticles()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x111BD90", Offset = "0x111BD90", VA = "0x111BD90")]
	public void DisableAndHide()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x111BDC4", Offset = "0x111BDC4", VA = "0x111BDC4")]
	public void PositionItemInLimbo(ItemController item)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x111C104", Offset = "0x111C104", VA = "0x111C104")]
	public void RemoveItemFromLimbo(ItemController item)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x111BE58", Offset = "0x111BE58", VA = "0x111BE58")]
	private void UpdateLimboPositions(List<ItemController> limboList, [Optional] ItemController newItem)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x111C180", Offset = "0x111C180", VA = "0x111C180")]
	public void RequestParticles(Vector3 position)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x111C2A8", Offset = "0x111C2A8", VA = "0x111C2A8")]
	public void BroadcastEnterStation()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x111C2E8", Offset = "0x111C2E8", VA = "0x111C2E8")]
	public void BroadcastLeaveStation()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x111C328", Offset = "0x111C328", VA = "0x111C328")]
	public void AddItemToStation(ItemController item)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x111C394", Offset = "0x111C394", VA = "0x111C394")]
	public void RemoveItemFromStation(ItemController item)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x111C400", Offset = "0x111C400", VA = "0x111C400")]
	public void ChangeHeightOfStation(float yTranslation)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x111C4B8", Offset = "0x111C4B8", VA = "0x111C4B8")]
	public void DrawCube(Vector3 position, Quaternion rotation, Vector3 scale, Color color, bool wireCube = false)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x111C7B8", Offset = "0x111C7B8", VA = "0x111C7B8")]
	public bool RequestRespawn()
	{
		return default(bool);
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x111C824", Offset = "0x111C824", VA = "0x111C824")]
	private void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x2000099")]
public class StationController : MonoBehaviour
{
	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Station[] StationsInLevel;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Station ActiveStation;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Station PreviousStation;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Transform RoomscaleIntroTransform;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static int currentStationIndex;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static bool InNightmareVersion;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public static bool resetAllowed;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action OnLevelCompleted;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Action<AudioSource> OnLevelCompletedPlayingTransitionFX;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action<string, AudioSource> OnAlternativeLevelCompleted;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action OnRestartGame;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string alternativeLevelName;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool SetContinuePointOnLevelEnter;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool playerCanResetGame;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform roomscaleIntroTransform;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x111DADC", Offset = "0x111DADC", VA = "0x111DADC")]
	public StationController()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x111DAEC", Offset = "0x111DAEC", VA = "0x111DAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x111DE8C", Offset = "0x111DE8C", VA = "0x111DE8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x111E0E8", Offset = "0x111E0E8", VA = "0x111E0E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x111E4CC", Offset = "0x111E4CC", VA = "0x111E4CC")]
	private void OnInitialize()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x111DE90", Offset = "0x111DE90", VA = "0x111DE90")]
	private void CheckForRoomScale()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x111E4D0", Offset = "0x111E4D0", VA = "0x111E4D0")]
	private void OnPlayerEnterStationRoomscale(Station newStation)
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x111E5B4", Offset = "0x111E5B4", VA = "0x111E5B4")]
	public void SetNightmareVersion(bool value)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x111E624", Offset = "0x111E624", VA = "0x111E624")]
	public void ChangeAlternativeLevel(string newLevel)
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x111E62C", Offset = "0x111E62C", VA = "0x111E62C")]
	public void BroadcastLevelComplete()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x111E70C", Offset = "0x111E70C", VA = "0x111E70C")]
	public void BroadcastLevelComplete(AudioSource transitionSFXSource)
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x111E800", Offset = "0x111E800", VA = "0x111E800")]
	public void BroadcastAlternativeLevelComplete(AudioSource transitionSFXSource)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x111E90C", Offset = "0x111E90C", VA = "0x111E90C")]
	public void BroadcastContinuePointActivation(AudioSource transitionSFXSource)
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x111EA44", Offset = "0x111EA44", VA = "0x111EA44")]
	public void BroadcastRestartGame()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x111056C", Offset = "0x111056C", VA = "0x111056C")]
	public static bool StationIsAvailableAndNotInUse(Station stationToCheck)
	{
		return default(bool);
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x110AC38", Offset = "0x110AC38", VA = "0x110AC38")]
	public static int AvailableStations()
	{
		return default(int);
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x111EB24", Offset = "0x111EB24", VA = "0x111EB24")]
	public void EnableStation(Station station)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x111EB50", Offset = "0x111EB50", VA = "0x111EB50")]
	public void DisableStation(Station station)
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x111E4D4", Offset = "0x111E4D4", VA = "0x111E4D4")]
	private void OnPlayerTraversingToNewStation(Station newStation)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x110B13C", Offset = "0x110B13C", VA = "0x110B13C")]
	public static Station NextActiveStation()
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x110B34C", Offset = "0x110B34C", VA = "0x110B34C")]
	public static Station PreviousActiveStation()
	{
		return null;
	}
}
[Token(Token = "0x200009A")]
public class SubtitleCamController : MonoBehaviour
{
	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera camera;

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x111EBCC", Offset = "0x111EBCC", VA = "0x111EBCC")]
	public SubtitleCamController()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x111EBD4", Offset = "0x111EBD4", VA = "0x111EBD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x111EFB4", Offset = "0x111EFB4", VA = "0x111EFB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x111F414", Offset = "0x111F414", VA = "0x111F414")]
	private void OnSubtitlesUpdated()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x111F440", Offset = "0x111F440", VA = "0x111F440")]
	private void Update()
	{
	}
}
[Token(Token = "0x200009B")]
public class SubtitleRaycaster : MonoBehaviour
{
	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform rayOrigin;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform subtitleTranslationTransform;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float maxDistance;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float minDistance;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float distanceOffset;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float maxScale;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float minScale;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float UIScaleFactor;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float maxSubtitleCenterOffset;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float minSubtitleCenterOffset;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A5CC", Offset = "0x56A5CC")]
	[SerializeField]
	private LayerMask rayMask;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float castDepthOffset;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float castIncrement;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float castWidth;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float castHeight;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 hitPoint;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool hitSurface;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RaycastHit[] hits;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 castOrigin;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Vector2> castList;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Vector2[] castOrigins;

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x111F4D0", Offset = "0x111F4D0", VA = "0x111F4D0")]
	public SubtitleRaycaster()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x111F588", Offset = "0x111F588", VA = "0x111F588")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x111F618", Offset = "0x111F618", VA = "0x111F618")]
	private void UpdateSubtitlePosition()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x111FB90", Offset = "0x111FB90", VA = "0x111FB90")]
	private void HideText()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x111FC4C", Offset = "0x111FC4C", VA = "0x111FC4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x111FF48", Offset = "0x111FF48", VA = "0x111FF48")]
	private bool DoCast(Vector3 originPosition, float castDistance, out float measuredDistance)
	{
		return default(bool);
	}
}
[Token(Token = "0x200009C")]
public class SubtitleSettings : MonoBehaviour
{
	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<bool> OnSetSubtitleRendering;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<bool> OnSetSubtitleStatus;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnClearSubtitleRendering;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool SetSubtitlesAtStart;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SupportedSubtitleLanguages SupportedSubtitles;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro SubtitleStatusDisplay;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro CurrentSubtitleDisplay;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SupportedSubtitleLanguages.Language currentLanguage;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int currentSubtitleIndex;

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x11201AC", Offset = "0x11201AC", VA = "0x11201AC")]
	public SubtitleSettings()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x11201B4", Offset = "0x11201B4", VA = "0x11201B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x11203B8", Offset = "0x11203B8", VA = "0x11203B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x11205F8", Offset = "0x11205F8", VA = "0x11205F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x1120634", Offset = "0x1120634", VA = "0x1120634")]
	private void CheckPlayerPrefsAndSetLanguage()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x1120808", Offset = "0x1120808", VA = "0x1120808")]
	private void CheckSubtitleStatus()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x1120980", Offset = "0x1120980", VA = "0x1120980")]
	public void SetSubtitleRendering(bool status)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x1120B78", Offset = "0x1120B78", VA = "0x1120B78")]
	public void ClearSubtitleRendering()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x1120BDC", Offset = "0x1120BDC", VA = "0x1120BDC")]
	public void SetSubtitleStatus(bool status)
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x1120C6C", Offset = "0x1120C6C", VA = "0x1120C6C")]
	public void NextIndex()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x1120D08", Offset = "0x1120D08", VA = "0x1120D08")]
	public void PreviousIndex()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x1120DA4", Offset = "0x1120DA4", VA = "0x1120DA4")]
	public void ToggleSubtitles()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x1120A00", Offset = "0x1120A00", VA = "0x1120A00")]
	private void OnToggleSubtitles(bool status)
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x1120FDC", Offset = "0x1120FDC", VA = "0x1120FDC")]
	private void OnNewLanguageSelected(SupportedSubtitleLanguages.Language newLanguage)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x1120E40", Offset = "0x1120E40", VA = "0x1120E40")]
	private void UpdateSubtitleStatusDisplay()
	{
	}
}
[Token(Token = "0x200009D")]
public class Teleporter : MonoBehaviour
{
	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Object;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform TeleportPoint;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnTeleport;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody _objectRigidbody;

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x112273C", Offset = "0x112273C", VA = "0x112273C")]
	public Teleporter()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x1122744", Offset = "0x1122744", VA = "0x1122744")]
	public void Start()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x11227A8", Offset = "0x11227A8", VA = "0x11227A8")]
	public void Teleport()
	{
	}
}
[Token(Token = "0x200009E")]
public class TheDownCounter : MonoBehaviour
{
	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float downCounterAmount;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent downCounterEvent;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string theTextString;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool counting;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float downCounterTimer;

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x1122938", Offset = "0x1122938", VA = "0x1122938")]
	public TheDownCounter()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x1122948", Offset = "0x1122948", VA = "0x1122948")]
	private void Start()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x1122954", Offset = "0x1122954", VA = "0x1122954")]
	private void Update()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x11229C4", Offset = "0x11229C4", VA = "0x11229C4")]
	public void StartDownCounter()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x11229D8", Offset = "0x11229D8", VA = "0x11229D8")]
	public void StopDownCounter()
	{
	}
}
[Token(Token = "0x200009F")]
public class TimeToDespawn : MonoBehaviour
{
	[Token(Token = "0x2000553")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A6B8", Offset = "0x56A6B8")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TimeToDespawn $this;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x1700045F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022C4")]
			[Address(RVA = "0x1122B88", Offset = "0x1122B88", VA = "0x1122B88", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000460")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022C5")]
			[Address(RVA = "0x1122B90", Offset = "0x1122B90", VA = "0x1122B90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x1122A5C", Offset = "0x1122A5C", VA = "0x1122A5C")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x1122A64", Offset = "0x1122A64", VA = "0x1122A64", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x1122B98", Offset = "0x1122B98", VA = "0x1122B98", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x1122BAC", Offset = "0x1122BAC", VA = "0x1122BAC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DespawnInSeconds;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x11229E8", Offset = "0x11229E8", VA = "0x11229E8")]
	public TimeToDespawn()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x11229F0", Offset = "0x11229F0", VA = "0x11229F0")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}
}
[Token(Token = "0x20000A0")]
public class TransformUtility : MonoBehaviour
{
	[Token(Token = "0x2000554")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A728", Offset = "0x56A728")]
	private sealed class <ScaleUpAndDown>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <initialScale>__0;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float <randomOffset>__0;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float <speedOffset>__0;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float <extraScale>__0;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal TransformUtility $this;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal object $current;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool $disposing;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int $PC;

		[Token(Token = "0x17000461")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60022CA")]
			[Address(RVA = "0x75A49C", Offset = "0x75A49C", VA = "0x75A49C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000462")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022CB")]
			[Address(RVA = "0x75A4A4", Offset = "0x75A4A4", VA = "0x75A4A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x75A26C", Offset = "0x75A26C", VA = "0x75A26C")]
		[DebuggerHidden]
		public <ScaleUpAndDown>c__Iterator0()
		{
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0x75A274", Offset = "0x75A274", VA = "0x75A274", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x75A4AC", Offset = "0x75A4AC", VA = "0x75A4AC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0x75A4C0", Offset = "0x75A4C0", VA = "0x75A4C0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform cachedTransform;

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x75A028", Offset = "0x75A028", VA = "0x75A028")]
	public TransformUtility()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x75A030", Offset = "0x75A030", VA = "0x75A030")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x75A034", Offset = "0x75A034", VA = "0x75A034")]
	public void RotateZ(float amount)
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x75A100", Offset = "0x75A100", VA = "0x75A100")]
	public void SetScale(float newScale)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x75A1CC", Offset = "0x75A1CC", VA = "0x75A1CC")]
	public void ScaleUpAndDown(float maxScale)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x75A264", Offset = "0x75A264", VA = "0x75A264")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x75A1F8", Offset = "0x75A1F8", VA = "0x75A1F8")]
	[DebuggerHidden]
	private IEnumerator ScaleUpAndDown()
	{
		return null;
	}
}
[Token(Token = "0x20000A1")]
public class TrophyManager : MonoBehaviour
{
	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<int> OnUnlockTrophy;

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x75A524", Offset = "0x75A524", VA = "0x75A524")]
	public TrophyManager()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x75A52C", Offset = "0x75A52C", VA = "0x75A52C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x75A648", Offset = "0x75A648", VA = "0x75A648")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x75A764", Offset = "0x75A764", VA = "0x75A764")]
	public void UnlockTrophy(int nextTrophyId)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x75A7D8", Offset = "0x75A7D8", VA = "0x75A7D8")]
	private void OculusUnlockTrophy(int trophyID)
	{
	}
}
[Token(Token = "0x20000A2")]
public class UniversalVRManager : MonoBehaviour
{
	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<bool> OnSetupComplete;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UniversalVROnScreenSetup setup;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform cachedTransform;

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x773590", Offset = "0x773590", VA = "0x773590")]
	public UniversalVRManager()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x773598", Offset = "0x773598", VA = "0x773598")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x7736D0", Offset = "0x7736D0", VA = "0x7736D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x773818", Offset = "0x773818", VA = "0x773818")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x773794", Offset = "0x773794", VA = "0x773794")]
	private void OnChosenStance()
	{
	}
}
[Token(Token = "0x20000A3")]
public class UniversalVROnScreenSetup : OnScreenSetupBase
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action OnChosenStance;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool InSetup;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool ChosenRoomscale;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Transform RigTransform;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform CenteredUI;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A798", Offset = "0x56A798")]
	public CanvasGroup StanceCanvasGroup;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ControllerSelection SitSelection;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ControllerSelection StandSelection;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A7D0", Offset = "0x56A7D0")]
	public CanvasGroup MotionWarningCanvasGroup;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A808", Offset = "0x56A808")]
	public CanvasGroup BlackOverlayCanvasGroup;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup TrackingWarningCanvasGroup;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56A840", Offset = "0x56A840")]
	public Transform RotateableElementsTransform;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Coroutine busyRoutine;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private NVRPlayer player;

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x773924", Offset = "0x773924", VA = "0x773924")]
	public UniversalVROnScreenSetup()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x77392C", Offset = "0x77392C", VA = "0x77392C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x773DF4", Offset = "0x773DF4", VA = "0x773DF4")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x773E60", Offset = "0x773E60", VA = "0x773E60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x7740C4", Offset = "0x7740C4", VA = "0x7740C4")]
	public float SetupLeftRightDot()
	{
		return default(float);
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x7741C8", Offset = "0x7741C8", VA = "0x7741C8")]
	public bool AnyInputDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x773780", Offset = "0x773780", VA = "0x773780")]
	public void StartSetup(Transform rig)
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x774298", Offset = "0x774298", VA = "0x774298")]
	public void BroadCastResults()
	{
	}
}
[Token(Token = "0x20000A4")]
public class UniversalVRStanceEvent : MonoBehaviour
{
	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent SittingEvent;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent StandingEvent;

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x775704", Offset = "0x775704", VA = "0x775704")]
	public UniversalVRStanceEvent()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x77570C", Offset = "0x77570C", VA = "0x77570C")]
	public void Invoke()
	{
	}
}
[Token(Token = "0x20000A5")]
public class UziController : MonoBehaviour
{
	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float RecoilDuration;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private NVRInteractableStickyItem nvrStickyItem;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private NestInput NestSuccess;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private NestInput NestFail;

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x77579C", Offset = "0x77579C", VA = "0x77579C")]
	public UziController()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x7757AC", Offset = "0x7757AC", VA = "0x7757AC")]
	private void Update()
	{
	}
}
[Token(Token = "0x20000A6")]
public class VRInputEvent : InputRelatedSwitch
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OculusEvent;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent ViveEvent;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent PSVREvent;

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x775DEC", Offset = "0x775DEC", VA = "0x775DEC")]
	public VRInputEvent()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x775E54", Offset = "0x775E54", VA = "0x775E54")]
	public void Invoke()
	{
	}
}
[Token(Token = "0x20000A7")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56A908", Offset = "0x56A908")]
public class XylophoneController : MonoBehaviour
{
	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CollisionSound[] _sounds;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _audioSource;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<GameObject, float> _gameObjectTimestamps;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Cooldown;

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x777764", Offset = "0x777764", VA = "0x777764")]
	public XylophoneController()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x7777D4", Offset = "0x7777D4", VA = "0x7777D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x7778EC", Offset = "0x7778EC", VA = "0x7778EC")]
	private void CollisionSoundCallback(GameObject other, AudioClip clip)
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x777A48", Offset = "0x777A48", VA = "0x777A48")]
	private void PlaySound(AudioClip clip)
	{
	}
}
[Token(Token = "0x20000A8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56A96C", Offset = "0x56A96C")]
public sealed class AmplifyColorEffect : MonoBehaviour
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float BlendAmount;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture LutTexture;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture LutBlendTexture;

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x69E130", Offset = "0x69E130", VA = "0x69E130")]
	public AmplifyColorEffect()
	{
	}
}
[Token(Token = "0x20000A9")]
public class EzFR_Messages
{
	[Token(Token = "0x4000388")]
	public const string TITLE_00 = "Renaming";

	[Token(Token = "0x4000389")]
	public const string TITLE_01 = "Attention!";

	[Token(Token = "0x400038A")]
	public const string TITLE_02 = "Sorting";

	[Token(Token = "0x400038B")]
	public const string MESSAGE_00 = "Please, wait until the gameObjects are renamed...";

	[Token(Token = "0x400038C")]
	public const string MESSAGE_01 = "Please, wait until the gameObjects are sorted...";

	[Token(Token = "0x400038D")]
	public const string ERROR_00 = "There isn't no gameobject selected. Please, select one or more gameobjects and try again.";

	[Token(Token = "0x400038E")]
	public const string ERROR_01 = "There isn't no file selected. Please, select one or more files and try again.";

	[Token(Token = "0x400038F")]
	public const string ERROR_02 = "To prevent mistakes it isn't possible to rename files with different extensions. Please, select files with the same extensions and try again.";

	[Token(Token = "0x4000390")]
	public const string ERROR_03 = "To prevent mistakes it isn't possible to rename with extensions .cs, .js and .shader.";

	[Token(Token = "0x4000391")]
	public const string ERROR_04 = "To prevent mistakes it isn't possible to sort gameObjects that has different parents.";

	[Token(Token = "0x4000392")]
	public const string ERROR_05 = "To prevent mistakes it isn't possible to sort the children of multiple gameObjects.";

	[Token(Token = "0x4000393")]
	public const string ERROR_06 = "Internal Error. GameObject and Object can't be both null.";

	[Token(Token = "0x4000394")]
	public const string WARNING_00 = "One or more gameobjects has different parents and this may cause a problem on your Hierarchy. Do want to continue?";

	[Token(Token = "0x4000395")]
	public const string WARNING_01 = "It isn't possible to has files with the same name inside Project Folder. Make Sequential has been activated and initial number is 0.";

	[Token(Token = "0x4000396")]
	public const string BUTTON_00 = "Close";

	[Token(Token = "0x4000397")]
	public const string BUTTON_01 = "Cancel";

	[Token(Token = "0x4000398")]
	public const string BUTTON_02 = "Continue";

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x7987C8", Offset = "0x7987C8", VA = "0x7987C8")]
	public EzFR_Messages()
	{
	}
}
[Token(Token = "0x20000AA")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56A9A4", Offset = "0x56A9A4")]
public class AnimationClipOverrides : List<KeyValuePair<AnimationClip, AnimationClip>>
{
	[Token(Token = "0x2000555")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A9DC", Offset = "0x56A9DC")]
	private sealed class <>c__AnonStorey0
	{
		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x69E2A4", Offset = "0x69E2A4", VA = "0x69E2A4")]
		public <>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x69E40C", Offset = "0x69E40C", VA = "0x69E40C")]
		internal bool <>m__0(KeyValuePair<AnimationClip, AnimationClip> x)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000556")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56A9EC", Offset = "0x56A9EC")]
	private sealed class <>c__AnonStorey1
	{
		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x69E404", Offset = "0x69E404", VA = "0x69E404")]
		public <>c__AnonStorey1()
		{
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x69E4A4", Offset = "0x69E4A4", VA = "0x69E4A4")]
		internal bool <>m__0(KeyValuePair<AnimationClip, AnimationClip> x)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000017")]
	public new AnimationClip Item
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x69E1B8", Offset = "0x69E1B8", VA = "0x69E1B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x69E2AC", Offset = "0x69E2AC", VA = "0x69E2AC")]
		set
		{
		}
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x69E138", Offset = "0x69E138", VA = "0x69E138")]
	public AnimationClipOverrides(int capacity)
	{
	}
}
[Token(Token = "0x20000AB")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56A9FC", Offset = "0x56A9FC")]
public class Geppetto : GeppettoBodyPart
{
	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GeppettoPerformance DefaultPerformance;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GeppettoEyes eyes;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GeppettoBody body;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GeppettoMouth mouth;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GeppettoBodyAsset currentBodyAsset;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GeppettoEyeAsset currentEyeAsset;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GeppettoMouthAsset currentMouthAsset;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Performer performer;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GeppettoPerformance currentPerformance;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float cachedPerformanceDuration;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float performanceTimer;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool playing;

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x7A0730", Offset = "0x7A0730", VA = "0x7A0730")]
	public Geppetto()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x7A0740", Offset = "0x7A0740", VA = "0x7A0740")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x7A0904", Offset = "0x7A0904", VA = "0x7A0904")]
	private void Start()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x7A0918", Offset = "0x7A0918", VA = "0x7A0918")]
	public void SetNewPerformance(GeppettoPerformance newPerformance)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x7A0B3C", Offset = "0x7A0B3C", VA = "0x7A0B3C")]
	private void Update()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x7A0BB8", Offset = "0x7A0BB8", VA = "0x7A0BB8")]
	public void SetBody(GeppettoBodyAsset bodyAsset)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x7A0DD0", Offset = "0x7A0DD0", VA = "0x7A0DD0")]
	public void SetEyes(GeppettoEyeAsset eyeAsset)
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x7A0EC4", Offset = "0x7A0EC4", VA = "0x7A0EC4")]
	public void SetMouth(GeppettoMouthAsset mouthTextures)
	{
	}
}
[Token(Token = "0x20000AC")]
public class GeppettoBody : GeppettoBodyPart
{
	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool InTransitionState;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GeppettoBodyAsset defaultBodyAsset;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float HeadLook;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform lookAtTransform;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float headLookAtWeight;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float bodyLookAtWeight;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float lookAtLerp;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 lookAtPositionLerp;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool lookingAtTarget;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioInput audioInput;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float exaggerationLerp;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float exaggerationTarget;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float animationDecay;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float lerpValue;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private float decaySpeed;

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x7A1014", Offset = "0x7A1014", VA = "0x7A1014")]
	public GeppettoBody()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x7A1040", Offset = "0x7A1040", VA = "0x7A1040")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x7A1148", Offset = "0x7A1148", VA = "0x7A1148")]
	private void Start()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x7A1078", Offset = "0x7A1078", VA = "0x7A1078")]
	public void PlayDefaultAnimation()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x7A0C9C", Offset = "0x7A0C9C", VA = "0x7A0C9C")]
	public void SetNewAnimation(GeppettoBodyAsset newBodyClip)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x7A11DC", Offset = "0x7A11DC", VA = "0x7A11DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x7A13B0", Offset = "0x7A13B0", VA = "0x7A13B0")]
	private void OnAnimatorIK()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x7A11CC", Offset = "0x7A11CC", VA = "0x7A11CC")]
	public void LookAtThis(Transform newLookAtTransform)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x7A15B8", Offset = "0x7A15B8", VA = "0x7A15B8")]
	private void StopLookingAtTarget()
	{
	}
}
[Token(Token = "0x20000AD")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56AAF0", Offset = "0x56AAF0")]
public class GeppettoBodyAsset : ScriptableObject
{
	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip DefaultAnimation;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip ExaggeratedAnimation;

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x7A15C4", Offset = "0x7A15C4", VA = "0x7A15C4")]
	public GeppettoBodyAsset()
	{
	}
}
[Token(Token = "0x20000AE")]
public class GeppettoBodyPart : MonoBehaviour
{
	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected AnimatorOverrideController overrideController;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected AnimationClipOverrides clipOverrides;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Animator originalAnimator;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected bool playDefaultAnimation;

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x7A0738", Offset = "0x7A0738", VA = "0x7A0738")]
	public GeppettoBodyPart()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x7A07E8", Offset = "0x7A07E8", VA = "0x7A07E8")]
	protected void CreateOverrideController()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x7A15CC", Offset = "0x7A15CC", VA = "0x7A15CC", Slot = "4")]
	public virtual void SetNewAnimation(AnimationClip newAnimation)
	{
	}
}
[Token(Token = "0x20000AF")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56AB70", Offset = "0x56AB70")]
public class GeppettoEmotionCollection : ScriptableObject
{
	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GeppettoBodyAsset BodyAsset;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GeppettoEyeAsset EyeAsset;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GeppettoMouthAsset MouthAsset;

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x7A1658", Offset = "0x7A1658", VA = "0x7A1658")]
	public GeppettoEmotionCollection()
	{
	}
}
[Token(Token = "0x20000B0")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56ABE0", Offset = "0x56ABE0")]
public class GeppettoEyeAsset : ScriptableObject
{
	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip DefaultAnimation;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip ExaggeratedAnimation;

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x7A1660", Offset = "0x7A1660", VA = "0x7A1660")]
	public GeppettoEyeAsset()
	{
	}
}
[Token(Token = "0x20000B1")]
public class GeppettoEyes : GeppettoBodyPart
{
	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GeppettoEyeAsset DefaultAsset;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioInput audioInput;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float exaggerationValue;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float exaggerationLerp;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float exaggerationTarget;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float animationDecay;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool inExaggeration;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GeppettoEyeAsset currentEyeAsset;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float lerpValue;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float decaySpeed;

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x7A1668", Offset = "0x7A1668", VA = "0x7A1668")]
	public GeppettoEyes()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x7A1694", Offset = "0x7A1694", VA = "0x7A1694")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x7A1698", Offset = "0x7A1698", VA = "0x7A1698")]
	private void Update()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x7A18F0", Offset = "0x7A18F0", VA = "0x7A18F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x7A0EB8", Offset = "0x7A0EB8", VA = "0x7A0EB8")]
	public void SetNewAnimation(GeppettoEyeAsset newEyeAsset)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x7A1838", Offset = "0x7A1838", VA = "0x7A1838")]
	private void UpdateAnimation(bool exagerrate)
	{
	}
}
[Token(Token = "0x20000B2")]
public class GeppettoMouth : MonoBehaviour
{
	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LipSync lipSync;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GeppettoMouthAsset DefaultMouthAsset;

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x7A190C", Offset = "0x7A190C", VA = "0x7A190C")]
	public GeppettoMouth()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x7A1914", Offset = "0x7A1914", VA = "0x7A1914")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x7A196C", Offset = "0x7A196C", VA = "0x7A196C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x7A0F70", Offset = "0x7A0F70", VA = "0x7A0F70")]
	public void SetNewMouth(GeppettoMouthAsset newTextures)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x7A19FC", Offset = "0x7A19FC", VA = "0x7A19FC")]
	public void Speak(LipSyncData lipSyncData)
	{
	}
}
[Token(Token = "0x20000B3")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56ACB0", Offset = "0x56ACB0")]
public class GeppettoMouthAsset : ScriptableObject
{
	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LipSync.PhonemeDictionary PhonemeTexturesCollection;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x7A1A00", Offset = "0x7A1A00", VA = "0x7A1A00")]
	public GeppettoMouthAsset()
	{
	}
}
[Token(Token = "0x20000B4")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x56AD20", Offset = "0x56AD20")]
public class GeppettoPerformance : ScriptableObject
{
	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LipSyncData LipSyncAsset;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpokenWord SpokenWordData;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationClip TimingClip;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool Looping;

	[Token(Token = "0x17000018")]
	public float Duration
	{
		[Token(Token = "0x600035C")]
		[Address(RVA = "0x7A0A98", Offset = "0x7A0A98", VA = "0x7A0A98")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600035D")]
		[Address(RVA = "0x7A1A18", Offset = "0x7A1A18", VA = "0x7A1A18")]
		private set
		{
		}
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x7A1A08", Offset = "0x7A1A08", VA = "0x7A1A08")]
	public GeppettoPerformance()
	{
	}
}
[Token(Token = "0x20000B5")]
public class GameController : MonoBehaviour
{
	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_Player;

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x79FE24", Offset = "0x79FE24", VA = "0x79FE24")]
	public GameController()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x79FE2C", Offset = "0x79FE2C", VA = "0x79FE2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x7A0048", Offset = "0x7A0048", VA = "0x7A0048")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x20000B6")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56AD90", Offset = "0x56AD90")]
public class DynamicBone : MonoBehaviour
{
	[Token(Token = "0x20000B7")]
	public enum UpdateMode
	{
		[Token(Token = "0x40003F2")]
		Normal,
		[Token(Token = "0x40003F3")]
		AnimatePhysics,
		[Token(Token = "0x40003F4")]
		UnscaledTime
	}

	[Token(Token = "0x20000B8")]
	public enum FreezeAxis
	{
		[Token(Token = "0x40003F6")]
		None,
		[Token(Token = "0x40003F7")]
		X,
		[Token(Token = "0x40003F8")]
		Y,
		[Token(Token = "0x40003F9")]
		Z
	}

	[Token(Token = "0x20000B9")]
	private class Particle
	{
		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform m_Transform;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_ParentIndex;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_Damping;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_Elasticity;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_Stiffness;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_Inert;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_Radius;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_BoneLength;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 m_Position;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 m_PrevPosition;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 m_EndOffset;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 m_InitLocalPosition;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion m_InitLocalRotation;

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x796F34", Offset = "0x796F34", VA = "0x796F34")]
		public Particle()
		{
		}
	}

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_Root;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_UpdateRate;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UpdateMode m_UpdateMode;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56ADC8", Offset = "0x56ADC8")]
	public float m_Damping;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_DampingDistrib;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56ADE0", Offset = "0x56ADE0")]
	public float m_Elasticity;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_ElasticityDistrib;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56ADF8", Offset = "0x56ADF8")]
	public float m_Stiffness;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve m_StiffnessDistrib;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56AE10", Offset = "0x56AE10")]
	public float m_Inert;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve m_InertDistrib;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_Radius;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve m_RadiusDistrib;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_EndLength;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 m_EndOffset;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector3 m_Gravity;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 m_Force;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<DynamicBoneCollider> m_Colliders;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<Transform> m_Exclusions;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public FreezeAxis m_FreezeAxis;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool m_DistantDisable;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform m_ReferenceObject;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float m_DistanceToObject;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 m_LocalGravity;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_ObjectMove;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_ObjectPrevPosition;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_BoneTotalLength;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float m_ObjectScale;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_Time;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_Weight;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool m_DistantDisabled;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private List<Particle> m_Particles;

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x793C58", Offset = "0x793C58", VA = "0x793C58")]
	public DynamicBone()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x793D90", Offset = "0x793D90", VA = "0x793D90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x794378", Offset = "0x794378", VA = "0x794378")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x7943CC", Offset = "0x7943CC", VA = "0x7943CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x7943FC", Offset = "0x7943FC", VA = "0x7943FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x7943A8", Offset = "0x7943A8", VA = "0x7943A8")]
	private void PreUpdate()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x794460", Offset = "0x794460", VA = "0x794460")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x794C64", Offset = "0x794C64", VA = "0x794C64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x794C68", Offset = "0x794C68", VA = "0x794C68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x794C6C", Offset = "0x794C6C", VA = "0x794C6C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x794DAC", Offset = "0x794DAC", VA = "0x794DAC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x794FC8", Offset = "0x794FC8", VA = "0x794FC8")]
	public void SetWeight(float w)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x795024", Offset = "0x795024", VA = "0x795024")]
	public float GetWeight()
	{
		return default(float);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x794694", Offset = "0x794694", VA = "0x794694")]
	private void UpdateDynamicBones(float t)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x793D94", Offset = "0x793D94", VA = "0x793D94")]
	private void SetupParticles()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x796794", Offset = "0x796794", VA = "0x796794")]
	private void AppendParticles(Transform b, int parentIndex, float boneLength)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x79490C", Offset = "0x79490C", VA = "0x79490C")]
	private void InitTransforms()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x794A88", Offset = "0x794A88", VA = "0x794A88")]
	private void ResetParticlesPosition()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x79502C", Offset = "0x79502C", VA = "0x79502C")]
	private void UpdateParticles1()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x7953DC", Offset = "0x7953DC", VA = "0x7953DC")]
	private void UpdateParticles2()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x795CBC", Offset = "0x795CBC", VA = "0x795CBC")]
	private void SkipUpdateParticles()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x7972B8", Offset = "0x7972B8", VA = "0x7972B8")]
	private static Vector3 MirrorVector(Vector3 v, Vector3 axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x7963DC", Offset = "0x7963DC", VA = "0x7963DC")]
	private void ApplyParticlesToTransforms()
	{
	}
}
[Token(Token = "0x20000BA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56AE28", Offset = "0x56AE28")]
public class DynamicBoneCollider : MonoBehaviour
{
	[Token(Token = "0x20000BB")]
	public enum Direction
	{
		[Token(Token = "0x400040D")]
		X,
		[Token(Token = "0x400040E")]
		Y,
		[Token(Token = "0x400040F")]
		Z
	}

	[Token(Token = "0x20000BC")]
	public enum Bound
	{
		[Token(Token = "0x4000411")]
		Outside,
		[Token(Token = "0x4000412")]
		Inside
	}

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_Center;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_Radius;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_Height;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Direction m_Direction;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Bound m_Bound;

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x7973A4", Offset = "0x7973A4", VA = "0x7973A4")]
	public DynamicBoneCollider()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x797428", Offset = "0x797428", VA = "0x797428")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x797028", Offset = "0x797028", VA = "0x797028")]
	public void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x7974CC", Offset = "0x7974CC", VA = "0x7974CC")]
	private static void OutsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x797660", Offset = "0x797660", VA = "0x797660")]
	private static void InsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x7977EC", Offset = "0x7977EC", VA = "0x7977EC")]
	private static void OutsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x797C58", Offset = "0x797C58", VA = "0x797C58")]
	private static void InsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x798098", Offset = "0x798098", VA = "0x798098")]
	private void OnDrawGizmosSelected()
	{
	}
}
namespace I2.Loc
{
	[Token(Token = "0x20000BD")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x7A5790", Offset = "0x7A5790", VA = "0x7A5790")]
		public CallbackNotification()
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x7A5798", Offset = "0x7A5798", VA = "0x7A5798")]
		public void OnModifyLocalization()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x7A61E4", Offset = "0x7A61E4", VA = "0x7A61E4")]
		public Example_ChangeLanguage()
		{
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x7A61EC", Offset = "0x7A61EC", VA = "0x7A61EC")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x7A62D4", Offset = "0x7A62D4", VA = "0x7A62D4")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x7A631C", Offset = "0x7A631C", VA = "0x7A631C")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x7A6234", Offset = "0x7A6234", VA = "0x7A6234")]
		public void SetLanguage(string LangName)
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TermsPopup", RVA = "0x56AE60", Offset = "0x56AE60")]
		public string _StringWithTermPopup;

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x7A66E4", Offset = "0x7A66E4", VA = "0x7A66E4")]
		public Example_LocalizedString()
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x7A66EC", Offset = "0x7A66EC", VA = "0x7A66EC")]
		public void Start()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x7A6998", Offset = "0x7A6998", VA = "0x7A6998")]
		public GlobalParametersExample()
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x7A69A0", Offset = "0x7A69A0", VA = "0x7A69A0", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}
	}
	[Token(Token = "0x20000C1")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x63541C", Offset = "0x63541C", VA = "0x63541C")]
		public RealTimeTranslation()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x6354A4", Offset = "0x6354A4", VA = "0x6354A4")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x6359A0", Offset = "0x6359A0", VA = "0x6359A0")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x635BE0", Offset = "0x635BE0", VA = "0x635BE0")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x635C78", Offset = "0x635C78", VA = "0x635C78")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x635A74", Offset = "0x635A74", VA = "0x635A74")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x635EE8", Offset = "0x635EE8", VA = "0x635EE8")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x636144", Offset = "0x636144", VA = "0x636144")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x63614C", Offset = "0x63614C", VA = "0x63614C")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x636154", Offset = "0x636154", VA = "0x636154")]
		public void SetOriginalText(string text)
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6000396")]
		[Address(RVA = "0x63615C", Offset = "0x63615C", VA = "0x63615C")]
		public RegisterBundlesManager()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x636164", Offset = "0x636164", VA = "0x636164")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x63621C", Offset = "0x63621C", VA = "0x63621C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x63628C", Offset = "0x63628C", VA = "0x63628C", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}
	}
	[Token(Token = "0x20000C3")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x600039A")]
		[Address(RVA = "0x642C54", Offset = "0x642C54", VA = "0x642C54")]
		public ToggleLanguage()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x642C5C", Offset = "0x642C5C", VA = "0x642C5C")]
		private void Start()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x642CB4", Offset = "0x642CB4", VA = "0x642CB4")]
		private void test()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public static class PersistentStorage
	{
		[Token(Token = "0x20000C5")]
		public enum eFileType
		{
			[Token(Token = "0x400041B")]
			Raw,
			[Token(Token = "0x400041C")]
			Persistent,
			[Token(Token = "0x400041D")]
			Temporal,
			[Token(Token = "0x400041E")]
			Streaming
		}

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x634D34", Offset = "0x634D34", VA = "0x634D34")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x634DE4", Offset = "0x634DE4", VA = "0x634DE4")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x634E94", Offset = "0x634E94", VA = "0x634E94")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x634F3C", Offset = "0x634F3C", VA = "0x634F3C")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x634FE4", Offset = "0x634FE4", VA = "0x634FE4")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x63507C", Offset = "0x63507C", VA = "0x63507C")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x635114", Offset = "0x635114", VA = "0x635114")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x6351DC", Offset = "0x6351DC", VA = "0x6351DC")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x63529C", Offset = "0x63529C", VA = "0x63529C")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x63535C", Offset = "0x63535C", VA = "0x63535C")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C6")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x7B2868", Offset = "0x7B2868", VA = "0x7B2868")]
		protected I2BasePersistentStorage()
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x7B2870", Offset = "0x7B2870", VA = "0x7B2870", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x7B2B98", Offset = "0x7B2B98", VA = "0x7B2B98", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x7B2E74", Offset = "0x7B2E74", VA = "0x7B2E74", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x7B3104", Offset = "0x7B3104", VA = "0x7B3104", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x7B3110", Offset = "0x7B3110", VA = "0x7B3110", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x7B311C", Offset = "0x7B311C", VA = "0x7B311C", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x7B3124", Offset = "0x7B3124", VA = "0x7B3124")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x7B320C", Offset = "0x7B320C", VA = "0x7B320C", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x7B3500", Offset = "0x7B3500", VA = "0x7B3500", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x7B37E8", Offset = "0x7B37E8", VA = "0x7B37E8", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x7B3AA0", Offset = "0x7B3AA0", VA = "0x7B3AA0", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C7")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x7B3D58", Offset = "0x7B3D58", VA = "0x7B3D58")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x7A50F0", Offset = "0x7A50F0", VA = "0x7A50F0")]
		public BaseSpecializationManager()
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x7A50F8", Offset = "0x7A50F8", VA = "0x7A50F8", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x7A567C", Offset = "0x7A567C", VA = "0x7A567C", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x7A56E0", Offset = "0x7A56E0", VA = "0x7A56E0", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}
	}
	[Token(Token = "0x20000C9")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x640DE0", Offset = "0x640DE0", VA = "0x640DE0")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x640E10", Offset = "0x640E10", VA = "0x640E10")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x6410CC", Offset = "0x6410CC", VA = "0x6410CC")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x64146C", Offset = "0x64146C", VA = "0x64146C")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x641230", Offset = "0x641230", VA = "0x641230")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x641860", Offset = "0x641860", VA = "0x641860")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CA")]
	public class EventCallback
	{
		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x7A6020", Offset = "0x7A6020", VA = "0x7A6020")]
		public EventCallback()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x7A6098", Offset = "0x7A6098", VA = "0x7A6098")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x7A6124", Offset = "0x7A6124", VA = "0x7A6124")]
		public bool HasCallback()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CB")]
	public enum ePluralType
	{
		[Token(Token = "0x4000425")]
		Zero,
		[Token(Token = "0x4000426")]
		One,
		[Token(Token = "0x4000427")]
		Two,
		[Token(Token = "0x4000428")]
		Few,
		[Token(Token = "0x4000429")]
		Many,
		[Token(Token = "0x400042A")]
		Plural
	}
	[Token(Token = "0x20000CC")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x20000CD")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x400042C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x400042D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x400042E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x400042F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x7A6A90", Offset = "0x7A6A90", VA = "0x7A6A90")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x7A6F84", Offset = "0x7A6F84", VA = "0x7A6F84")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x7A6D88", Offset = "0x7A6D88", VA = "0x7A6D88")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x7A7530", Offset = "0x7A7530", VA = "0x7A7530")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x7A76F4", Offset = "0x7A76F4", VA = "0x7A76F4")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x7A7804", Offset = "0x7A7804", VA = "0x7A7804")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x7A79CC", Offset = "0x7A79CC", VA = "0x7A79CC")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x7A7C30", Offset = "0x7A7C30", VA = "0x7A7C30")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x7A7F60", Offset = "0x7A7F60", VA = "0x7A7F60")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x7A8128", Offset = "0x7A8128", VA = "0x7A8128")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x7A8350", Offset = "0x7A8350", VA = "0x7A8350")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x7A8570", Offset = "0x7A8570", VA = "0x7A8570")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x7A8830", Offset = "0x7A8830", VA = "0x7A8830")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x7A8F80", Offset = "0x7A8F80", VA = "0x7A8F80")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x7A8F68", Offset = "0x7A8F68", VA = "0x7A8F68")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CE")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000557")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56AEA8", Offset = "0x56AEA8")]
		private sealed class <Translate>c__AnonStorey1
		{
			[Token(Token = "0x4001701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Action<string, string> OnTranslationReady;

			[Token(Token = "0x4001702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal string text;

			[Token(Token = "0x4001703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Dictionary<string, TranslationQuery> queries;

			[Token(Token = "0x4001704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal string LanguageCodeTo;

			[Token(Token = "0x60022D2")]
			[Address(RVA = "0x7AE848", Offset = "0x7AE848", VA = "0x7AE848")]
			public <Translate>c__AnonStorey1()
			{
			}

			[Token(Token = "0x60022D3")]
			[Address(RVA = "0x7B1D60", Offset = "0x7B1D60", VA = "0x7B1D60")]
			internal void <>m__0(Dictionary<string, TranslationQuery> results, string error)
			{
			}
		}

		[Token(Token = "0x2000558")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56AEB8", Offset = "0x56AEB8")]
		private sealed class <WaitForTranslations>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TranslationJob[] <jobs>__1;

			[Token(Token = "0x4001706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal TranslationJob[] $locvar0;

			[Token(Token = "0x4001707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int $locvar1;

			[Token(Token = "0x4001708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x400170A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x17000463")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60022D6")]
				[Address(RVA = "0x7B2078", Offset = "0x7B2078", VA = "0x7B2078", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000464")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022D7")]
				[Address(RVA = "0x7B2080", Offset = "0x7B2080", VA = "0x7B2080", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022D4")]
			[Address(RVA = "0x7AF998", Offset = "0x7AF998", VA = "0x7AF998")]
			[DebuggerHidden]
			public <WaitForTranslations>c__Iterator0()
			{
			}

			[Token(Token = "0x60022D5")]
			[Address(RVA = "0x7B1E8C", Offset = "0x7B1E8C", VA = "0x7B1E8C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022D8")]
			[Address(RVA = "0x7B2088", Offset = "0x7B2088", VA = "0x7B2088", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022D9")]
			[Address(RVA = "0x7B209C", Offset = "0x7B209C", VA = "0x7B209C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<WWW> mCurrentTranslations;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x7AE18C", Offset = "0x7AE18C", VA = "0x7AE18C")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x7AE550", Offset = "0x7AE550", VA = "0x7AE550")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, Action<string, string> OnTranslationReady)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x7AEBEC", Offset = "0x7AEBEC", VA = "0x7AEBEC")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x7AEB58", Offset = "0x7AEB58", VA = "0x7AEB58")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, Action<Dictionary<string, TranslationQuery>, string> OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x7AF2C8", Offset = "0x7AF2C8", VA = "0x7AF2C8")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x7AF350", Offset = "0x7AF350", VA = "0x7AF350")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x7AF1D4", Offset = "0x7AF1D4", VA = "0x7AF1D4")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x7AF93C", Offset = "0x7AF93C", VA = "0x7AF93C")]
		[DebuggerHidden]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x7AF9A0", Offset = "0x7AF9A0", VA = "0x7AF9A0")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x7B0268", Offset = "0x7B0268", VA = "0x7B0268")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x7B0344", Offset = "0x7B0344", VA = "0x7B0344")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x7AE95C", Offset = "0x7AE95C", VA = "0x7AE95C")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x7B04E0", Offset = "0x7B04E0", VA = "0x7B04E0")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x7AED4C", Offset = "0x7AED4C", VA = "0x7AED4C")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x7B1194", Offset = "0x7B1194", VA = "0x7B1194")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x7AFF64", Offset = "0x7AFF64", VA = "0x7AFF64")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x7B07F4", Offset = "0x7B07F4", VA = "0x7B07F4")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x7B0A38", Offset = "0x7B0A38", VA = "0x7B0A38")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x7B0890", Offset = "0x7B0890", VA = "0x7B0890")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x7B12B4", Offset = "0x7B12B4", VA = "0x7B12B4")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x7B016C", Offset = "0x7B016C", VA = "0x7B016C")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x7B0B3C", Offset = "0x7B0B3C", VA = "0x7B0B3C")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x7AF07C", Offset = "0x7AF07C", VA = "0x7AF07C")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x7B14B0", Offset = "0x7B14B0", VA = "0x7B14B0")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x7B1740", Offset = "0x7B1740", VA = "0x7B1740")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x7B1B70", Offset = "0x7B1B70", VA = "0x7B1B70")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x7AF838", Offset = "0x7AF838", VA = "0x7AF838")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CF")]
	public struct TranslationQuery
	{
		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x20000D0")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4000439")]
		Array = 1,
		[Token(Token = "0x400043A")]
		Class,
		[Token(Token = "0x400043B")]
		Value,
		[Token(Token = "0x400043C")]
		IntValue,
		[Token(Token = "0x400043D")]
		DoubleValue,
		[Token(Token = "0x400043E")]
		BoolValue,
		[Token(Token = "0x400043F")]
		FloatValue
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56AF18", Offset = "0x56AF18")]
	public class JSONNode
	{
		[Token(Token = "0x2000559")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56AF50", Offset = "0x56AF50")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x400170B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal JSONNode $current;

			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x17000465")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60022DC")]
				[Address(RVA = "0x6404E4", Offset = "0x6404E4", VA = "0x6404E4", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000466")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022DD")]
				[Address(RVA = "0x6404EC", Offset = "0x6404EC", VA = "0x6404EC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022DA")]
			[Address(RVA = "0x63F1C4", Offset = "0x63F1C4", VA = "0x63F1C4")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x60022DB")]
			[Address(RVA = "0x6404D4", Offset = "0x6404D4", VA = "0x6404D4", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022DE")]
			[Address(RVA = "0x6404F4", Offset = "0x6404F4", VA = "0x6404F4", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022DF")]
			[Address(RVA = "0x6404F8", Offset = "0x6404F8", VA = "0x6404F8", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60022E0")]
			[Address(RVA = "0x64055C", Offset = "0x64055C", VA = "0x64055C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60022E1")]
			[Address(RVA = "0x640560", Offset = "0x640560", VA = "0x640560", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200055A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56AFD0", Offset = "0x56AFD0")]
		private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x400170E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal IEnumerator<JSONNode> $locvar0;

			[Token(Token = "0x400170F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode <C>__1;

			[Token(Token = "0x4001710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal IEnumerator<JSONNode> $locvar1;

			[Token(Token = "0x4001711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <D>__2;

			[Token(Token = "0x4001712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONNode $this;

			[Token(Token = "0x4001713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal JSONNode $current;

			[Token(Token = "0x4001714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x4001715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x17000467")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60022E4")]
				[Address(RVA = "0x640B4C", Offset = "0x640B4C", VA = "0x640B4C", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000468")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022E5")]
				[Address(RVA = "0x640B54", Offset = "0x640B54", VA = "0x640B54", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022E2")]
			[Address(RVA = "0x63F250", Offset = "0x63F250", VA = "0x63F250")]
			[DebuggerHidden]
			public <>c__Iterator1()
			{
			}

			[Token(Token = "0x60022E3")]
			[Address(RVA = "0x6405E0", Offset = "0x6405E0", VA = "0x6405E0", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022E6")]
			[Address(RVA = "0x640B5C", Offset = "0x640B5C", VA = "0x640B5C", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022E7")]
			[Address(RVA = "0x640CE0", Offset = "0x640CE0", VA = "0x640CE0", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60022E8")]
			[Address(RVA = "0x640D44", Offset = "0x640D44", VA = "0x640D44", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60022E9")]
			[Address(RVA = "0x640D48", Offset = "0x640D48", VA = "0x640D48", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x60003F0")]
			[Address(RVA = "0x63F02C", Offset = "0x63F02C", VA = "0x63F02C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003F1")]
			[Address(RVA = "0x63F034", Offset = "0x63F034", VA = "0x63F034", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700001A")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x63F038", Offset = "0x63F038", VA = "0x63F038", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003F3")]
			[Address(RVA = "0x63F040", Offset = "0x63F040", VA = "0x63F040", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700001B")]
		public virtual string Value
		{
			[Token(Token = "0x60003F4")]
			[Address(RVA = "0x63F044", Offset = "0x63F044", VA = "0x63F044", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003F5")]
			[Address(RVA = "0x63F0AC", Offset = "0x63F0AC", VA = "0x63F0AC", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700001C")]
		public virtual int Count
		{
			[Token(Token = "0x60003F6")]
			[Address(RVA = "0x63F0B0", Offset = "0x63F0B0", VA = "0x63F0B0", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001D")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60003FB")]
			[Address(RVA = "0x63F158", Offset = "0x63F158", VA = "0x63F158", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x60003FC")]
			[Address(RVA = "0x63F1CC", Offset = "0x63F1CC", VA = "0x63F1CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		public virtual int AsInt
		{
			[Token(Token = "0x60003FF")]
			[Address(RVA = "0x63F2E8", Offset = "0x63F2E8", VA = "0x63F2E8", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000400")]
			[Address(RVA = "0x63F330", Offset = "0x63F330", VA = "0x63F330", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000401")]
			[Address(RVA = "0x63F378", Offset = "0x63F378", VA = "0x63F378", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000402")]
			[Address(RVA = "0x63F3C4", Offset = "0x63F3C4", VA = "0x63F3C4", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6000403")]
			[Address(RVA = "0x63F40C", Offset = "0x63F40C", VA = "0x63F40C", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000404")]
			[Address(RVA = "0x63F458", Offset = "0x63F458", VA = "0x63F458", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000022")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000405")]
			[Address(RVA = "0x63F4A0", Offset = "0x63F4A0", VA = "0x63F4A0", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000406")]
			[Address(RVA = "0x63F59C", Offset = "0x63F59C", VA = "0x63F59C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000023")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000407")]
			[Address(RVA = "0x63F61C", Offset = "0x63F61C", VA = "0x63F61C", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6000408")]
			[Address(RVA = "0x63F69C", Offset = "0x63F69C", VA = "0x63F69C", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x63B120", Offset = "0x63B120", VA = "0x63B120")]
		public JSONNode()
		{
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x63F028", Offset = "0x63F028", VA = "0x63F028", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x63F0B8", Offset = "0x63F0B8", VA = "0x63F0B8", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x63F140", Offset = "0x63F140", VA = "0x63F140", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x63F148", Offset = "0x63F148", VA = "0x63F148", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x63F150", Offset = "0x63F150", VA = "0x63F150", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x63F258", Offset = "0x63F258", VA = "0x63F258", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x63F2A0", Offset = "0x63F2A0", VA = "0x63F2A0", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x63F71C", Offset = "0x63F71C", VA = "0x63F71C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x63F780", Offset = "0x63F780", VA = "0x63F780")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x63DF2C", Offset = "0x63DF2C", VA = "0x63DF2C")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x63F7D0", Offset = "0x63F7D0", VA = "0x63F7D0")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x63F7EC", Offset = "0x63F7EC", VA = "0x63F7EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x63EA38", Offset = "0x63EA38", VA = "0x63EA38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x63D040", Offset = "0x63D040", VA = "0x63D040")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x63A6D0", Offset = "0x63A6D0", VA = "0x63A6D0")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x63F808", Offset = "0x63F808", VA = "0x63F808", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x63F80C", Offset = "0x63F80C", VA = "0x63F80C")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x63F88C", Offset = "0x63F88C", VA = "0x63F88C")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x63F8FC", Offset = "0x63F8FC", VA = "0x63F8FC")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x63F96C", Offset = "0x63F96C", VA = "0x63F96C")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x63F9DC", Offset = "0x63F9DC", VA = "0x63F9DC")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x63FB54", Offset = "0x63FB54", VA = "0x63FB54")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x63FCD4", Offset = "0x63FCD4", VA = "0x63FCD4")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x6400A0", Offset = "0x6400A0", VA = "0x6400A0")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x640110", Offset = "0x640110", VA = "0x640110")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x640180", Offset = "0x640180", VA = "0x640180")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x6401F0", Offset = "0x6401F0", VA = "0x6401F0")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x64030C", Offset = "0x64030C", VA = "0x64030C")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x64041C", Offset = "0x64041C", VA = "0x64041C")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56B050", Offset = "0x56B050")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x200055B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B098", Offset = "0x56B098")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <N>__1;

			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONArray $this;

			[Token(Token = "0x4001719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal JSONNode $current;

			[Token(Token = "0x400171A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x400171B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x17000469")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60022EC")]
				[Address(RVA = "0x63BDEC", Offset = "0x63BDEC", VA = "0x63BDEC", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022ED")]
				[Address(RVA = "0x63BDF4", Offset = "0x63BDF4", VA = "0x63BDF4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022EA")]
			[Address(RVA = "0x63B654", Offset = "0x63B654", VA = "0x63B654")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x60022EB")]
			[Address(RVA = "0x63BC78", Offset = "0x63BC78", VA = "0x63BC78", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022EE")]
			[Address(RVA = "0x63BDFC", Offset = "0x63BDFC", VA = "0x63BDFC", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022EF")]
			[Address(RVA = "0x63BE74", Offset = "0x63BE74", VA = "0x63BE74", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60022F0")]
			[Address(RVA = "0x63BED8", Offset = "0x63BED8", VA = "0x63BED8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60022F1")]
			[Address(RVA = "0x63BEDC", Offset = "0x63BEDC", VA = "0x63BEDC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200055C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B118", Offset = "0x56B118")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400171C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x400171D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <N>__1;

			[Token(Token = "0x400171E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONArray $this;

			[Token(Token = "0x400171F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal object $current;

			[Token(Token = "0x4001720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x4001721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x1700046B")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60022F4")]
				[Address(RVA = "0x63C0E8", Offset = "0x63C0E8", VA = "0x63C0E8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022F5")]
				[Address(RVA = "0x63C0F0", Offset = "0x63C0F0", VA = "0x63C0F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022F2")]
			[Address(RVA = "0x63B6C8", Offset = "0x63B6C8", VA = "0x63B6C8")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x60022F3")]
			[Address(RVA = "0x63BF74", Offset = "0x63BF74", VA = "0x63BF74", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022F6")]
			[Address(RVA = "0x63C0F8", Offset = "0x63C0F8", VA = "0x63C0F8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022F7")]
			[Address(RVA = "0x63C170", Offset = "0x63C170", VA = "0x63C170", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x17000025")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000420")]
			[Address(RVA = "0x63B128", Offset = "0x63B128", VA = "0x63B128", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000421")]
			[Address(RVA = "0x63B220", Offset = "0x63B220", VA = "0x63B220", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000422")]
			[Address(RVA = "0x63B2F0", Offset = "0x63B2F0", VA = "0x63B2F0", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000423")]
			[Address(RVA = "0x63B354", Offset = "0x63B354", VA = "0x63B354", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000027")]
		public override int Count
		{
			[Token(Token = "0x6000424")]
			[Address(RVA = "0x63B3C0", Offset = "0x63B3C0", VA = "0x63B3C0", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000028")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000428")]
			[Address(RVA = "0x63B5D0", Offset = "0x63B5D0", VA = "0x63B5D0", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x63B0B0", Offset = "0x63B0B0", VA = "0x63B0B0")]
		public JSONArray()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x63B41C", Offset = "0x63B41C", VA = "0x63B41C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x63B488", Offset = "0x63B488", VA = "0x63B488", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x63B55C", Offset = "0x63B55C", VA = "0x63B55C", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x63B65C", Offset = "0x63B65C", VA = "0x63B65C", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x63B6D0", Offset = "0x63B6D0", VA = "0x63B6D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x63B8E4", Offset = "0x63B8E4", VA = "0x63B8E4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x63BB58", Offset = "0x63BB58", VA = "0x63BB58", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56B178", Offset = "0x56B178")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x200055D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B1C0", Offset = "0x56B1C0")]
		private sealed class <Remove>c__AnonStorey2
		{
			[Token(Token = "0x4001722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal JSONNode aNode;

			[Token(Token = "0x60022F8")]
			[Address(RVA = "0x63CB54", Offset = "0x63CB54", VA = "0x63CB54")]
			public <Remove>c__AnonStorey2()
			{
			}

			[Token(Token = "0x60022F9")]
			[Address(RVA = "0x63DEC0", Offset = "0x63DEC0", VA = "0x63DEC0")]
			internal bool <>m__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200055E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B1D0", Offset = "0x56B1D0")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x4001725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal JSONClass $this;

			[Token(Token = "0x4001726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal JSONNode $current;

			[Token(Token = "0x4001727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x1700046D")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60022FC")]
				[Address(RVA = "0x63DABC", Offset = "0x63DABC", VA = "0x63DABC", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022FD")]
				[Address(RVA = "0x63DAC4", Offset = "0x63DAC4", VA = "0x63DAC4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022FA")]
			[Address(RVA = "0x63CBE0", Offset = "0x63CBE0", VA = "0x63CBE0")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x60022FB")]
			[Address(RVA = "0x63D92C", Offset = "0x63D92C", VA = "0x63D92C", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022FE")]
			[Address(RVA = "0x63DACC", Offset = "0x63DACC", VA = "0x63DACC", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60022FF")]
			[Address(RVA = "0x63DB44", Offset = "0x63DB44", VA = "0x63DB44", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6002300")]
			[Address(RVA = "0x63DBA8", Offset = "0x63DBA8", VA = "0x63DBA8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002301")]
			[Address(RVA = "0x63DBAC", Offset = "0x63DBAC", VA = "0x63DBAC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200055F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B250", Offset = "0x56B250")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x400172A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x400172B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal JSONClass $this;

			[Token(Token = "0x400172C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object $current;

			[Token(Token = "0x400172D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x400172E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x1700046F")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002304")]
				[Address(RVA = "0x63DDD4", Offset = "0x63DDD4", VA = "0x63DDD4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000470")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002305")]
				[Address(RVA = "0x63DDDC", Offset = "0x63DDDC", VA = "0x63DDDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002302")]
			[Address(RVA = "0x63CC54", Offset = "0x63CC54", VA = "0x63CC54")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x6002303")]
			[Address(RVA = "0x63DC44", Offset = "0x63DC44", VA = "0x63DC44", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002306")]
			[Address(RVA = "0x63DDE4", Offset = "0x63DDE4", VA = "0x63DDE4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002307")]
			[Address(RVA = "0x63DE5C", Offset = "0x63DE5C", VA = "0x63DE5C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000029")]
		public override JSONNode Item
		{
			[Token(Token = "0x600042E")]
			[Address(RVA = "0x63C284", Offset = "0x63C284", VA = "0x63C284", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600042F")]
			[Address(RVA = "0x63C384", Offset = "0x63C384", VA = "0x63C384", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000430")]
			[Address(RVA = "0x63C44C", Offset = "0x63C44C", VA = "0x63C44C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000431")]
			[Address(RVA = "0x63C518", Offset = "0x63C518", VA = "0x63C518", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public override int Count
		{
			[Token(Token = "0x6000432")]
			[Address(RVA = "0x63C608", Offset = "0x63C608", VA = "0x63C608", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002C")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000437")]
			[Address(RVA = "0x63CB5C", Offset = "0x63CB5C", VA = "0x63CB5C", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x63C1D4", Offset = "0x63C1D4", VA = "0x63C1D4")]
		public JSONClass()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x63C664", Offset = "0x63C664", VA = "0x63C664", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x63C7C8", Offset = "0x63C7C8", VA = "0x63C7C8", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x63C894", Offset = "0x63C894", VA = "0x63C894", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x63C998", Offset = "0x63C998", VA = "0x63C998", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x63CBE8", Offset = "0x63CBE8", VA = "0x63CBE8", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x63CC5C", Offset = "0x63CC5C", VA = "0x63CC5C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x63D304", Offset = "0x63D304", VA = "0x63D304", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x63D744", Offset = "0x63D744", VA = "0x63D744", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x1700002D")]
		public override string Value
		{
			[Token(Token = "0x6000441")]
			[Address(RVA = "0x63E104", Offset = "0x63E104", VA = "0x63E104", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000442")]
			[Address(RVA = "0x63E10C", Offset = "0x63E10C", VA = "0x63E10C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x63DFD8", Offset = "0x63DFD8", VA = "0x63DFD8")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x63E004", Offset = "0x63E004", VA = "0x63E004")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x63E048", Offset = "0x63E048", VA = "0x63E048")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x63E08C", Offset = "0x63E08C", VA = "0x63E08C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x63E0C8", Offset = "0x63E0C8", VA = "0x63E0C8")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x63E114", Offset = "0x63E114", VA = "0x63E114", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x63E1A0", Offset = "0x63E1A0", VA = "0x63E1A0", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x63E22C", Offset = "0x63E22C", VA = "0x63E22C", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56B2B0", Offset = "0x56B2B0")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x1700002E")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000449")]
			[Address(RVA = "0x63E6BC", Offset = "0x63E6BC", VA = "0x63E6BC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600044A")]
			[Address(RVA = "0x63E720", Offset = "0x63E720", VA = "0x63E720", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public override JSONNode Item
		{
			[Token(Token = "0x600044B")]
			[Address(RVA = "0x63E7A8", Offset = "0x63E7A8", VA = "0x63E7A8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600044C")]
			[Address(RVA = "0x63E818", Offset = "0x63E818", VA = "0x63E818", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public override int AsInt
		{
			[Token(Token = "0x6000455")]
			[Address(RVA = "0x63EB10", Offset = "0x63EB10", VA = "0x63EB10", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000456")]
			[Address(RVA = "0x63EB94", Offset = "0x63EB94", VA = "0x63EB94", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000031")]
		public override float AsFloat
		{
			[Token(Token = "0x6000457")]
			[Address(RVA = "0x63EC1C", Offset = "0x63EC1C", VA = "0x63EC1C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000458")]
			[Address(RVA = "0x63ECAC", Offset = "0x63ECAC", VA = "0x63ECAC", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		public override double AsDouble
		{
			[Token(Token = "0x6000459")]
			[Address(RVA = "0x63ED34", Offset = "0x63ED34", VA = "0x63ED34", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x63EDC4", Offset = "0x63EDC4", VA = "0x63EDC4", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public override bool AsBool
		{
			[Token(Token = "0x600045B")]
			[Address(RVA = "0x63EE4C", Offset = "0x63EE4C", VA = "0x63EE4C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600045C")]
			[Address(RVA = "0x63EED0", Offset = "0x63EED0", VA = "0x63EED0", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000034")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x600045D")]
			[Address(RVA = "0x63EF58", Offset = "0x63EF58", VA = "0x63EF58", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x600045E")]
			[Address(RVA = "0x63EFC0", Offset = "0x63EFC0", VA = "0x63EFC0", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x63B1F4", Offset = "0x63B1F4", VA = "0x63B1F4")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x63C34C", Offset = "0x63C34C", VA = "0x63C34C")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x63E648", Offset = "0x63E648", VA = "0x63E648")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x63E8A8", Offset = "0x63E8A8", VA = "0x63E8A8", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x63E930", Offset = "0x63E930", VA = "0x63E930", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x63E9C0", Offset = "0x63E9C0", VA = "0x63E9C0")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x63E9D8", Offset = "0x63E9D8", VA = "0x63E9D8")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x63EA08", Offset = "0x63EA08", VA = "0x63EA08", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x63EA30", Offset = "0x63EA30", VA = "0x63EA30", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x63EA40", Offset = "0x63EA40", VA = "0x63EA40", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x63EAA8", Offset = "0x63EAA8", VA = "0x63EAA8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D6")]
	public static class JSON
	{
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x63A6CC", Offset = "0x63A6CC", VA = "0x63A6CC")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x20000D7")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x20000D8")]
		public enum eJobState
		{
			[Token(Token = "0x4000447")]
			Running,
			[Token(Token = "0x4000448")]
			Succeeded,
			[Token(Token = "0x4000449")]
			Failed
		}

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x642D98", Offset = "0x642D98", VA = "0x642D98")]
		public TranslationJob()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x642DA0", Offset = "0x642DA0", VA = "0x642DA0", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x642DA8", Offset = "0x642DA8", VA = "0x642DA8", Slot = "6")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WWW www;

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x642E50", Offset = "0x642E50", VA = "0x642E50")]
		public TranslationJob_WWW()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x644918", Offset = "0x644918", VA = "0x644918", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<Dictionary<string, TranslationQuery>, string> _OnTranslationReady;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x642DAC", Offset = "0x642DAC", VA = "0x642DAC")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, Action<Dictionary<string, TranslationQuery>, string> OnTranslationReady)
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x642E58", Offset = "0x642E58", VA = "0x642E58")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x642FDC", Offset = "0x642FDC", VA = "0x642FDC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x643088", Offset = "0x643088", VA = "0x643088")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<Dictionary<string, TranslationQuery>, string> _OnTranslationReady;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x643218", Offset = "0x643218", VA = "0x643218")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, Action<Dictionary<string, TranslationQuery>, string> OnTranslationReady)
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x643428", Offset = "0x643428", VA = "0x643428", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x6435F8", Offset = "0x6435F8", VA = "0x6435F8", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<Dictionary<string, TranslationQuery>, string> _OnTranslationReady;

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x64329C", Offset = "0x64329C", VA = "0x64329C")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, Action<Dictionary<string, TranslationQuery>, string> OnTranslationReady)
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x643644", Offset = "0x643644", VA = "0x643644", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x6436E0", Offset = "0x6436E0", VA = "0x6436E0")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<Dictionary<string, TranslationQuery>, string> _OnTranslationReady;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B2E8", Offset = "0x56B2E8")]
		private static Comparison<KeyValuePair<string, string>> <>f__am$cache0;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B2F8", Offset = "0x56B2F8")]
		private static MatchEvaluator <>f__am$cache1;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B308", Offset = "0x56B308")]
		private static MatchEvaluator <>f__am$cache2;

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x64383C", Offset = "0x64383C", VA = "0x64383C")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, Action<Dictionary<string, TranslationQuery>, string> OnTranslationReady)
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x643880", Offset = "0x643880", VA = "0x643880")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x643B98", Offset = "0x643B98", VA = "0x643B98")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x643FB4", Offset = "0x643FB4", VA = "0x643FB4", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x644060", Offset = "0x644060", VA = "0x644060")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x644200", Offset = "0x644200", VA = "0x644200")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x6446E4", Offset = "0x6446E4", VA = "0x6446E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B318", Offset = "0x56B318")]
		private static int <FindAllQueries>m__0(KeyValuePair<string, string> a, KeyValuePair<string, string> b)
		{
			return default(int);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x644774", Offset = "0x644774", VA = "0x644774")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B328", Offset = "0x56B328")]
		private static string <ParseTranslationResult>m__1(Match match)
		{
			return null;
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x644848", Offset = "0x644848", VA = "0x644848")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B338", Offset = "0x56B338")]
		private static string <ParseTranslationResult>m__2(Match match)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DE")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x4000462")]
		DISABLED = 1,
		[Token(Token = "0x4000463")]
		KEEP_LOADED = 2,
		[Token(Token = "0x4000464")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x20000DF")]
	public class LanguageData
	{
		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x7B4A48", Offset = "0x7B4A48", VA = "0x7B4A48")]
		public LanguageData()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x7B4A50", Offset = "0x7B4A50", VA = "0x7B4A50")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x7B4A60", Offset = "0x7B4A60", VA = "0x7B4A60")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x7B4A7C", Offset = "0x7B4A7C", VA = "0x7B4A7C")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x7B4A8C", Offset = "0x7B4A8C", VA = "0x7B4A8C")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x7B4A9C", Offset = "0x7B4A9C", VA = "0x7B4A9C")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x7B4ABC", Offset = "0x7B4ABC", VA = "0x7B4ABC")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B348", Offset = "0x56B348")]
	[ExecuteInEditMode]
	public class LanguageSource : MonoBehaviour
	{
		[Token(Token = "0x20000E2")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x400048B")]
			Always,
			[Token(Token = "0x400048C")]
			Never,
			[Token(Token = "0x400048D")]
			Daily,
			[Token(Token = "0x400048E")]
			Weekly,
			[Token(Token = "0x400048F")]
			Monthly,
			[Token(Token = "0x4000490")]
			OnlyOnce
		}

		[Token(Token = "0x20000E3")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x4000492")]
			Never,
			[Token(Token = "0x4000493")]
			OnlyInDevice,
			[Token(Token = "0x4000494")]
			EditorAndDevice
		}

		[Token(Token = "0x20000E4")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x4000496")]
			Empty,
			[Token(Token = "0x4000497")]
			Fallback,
			[Token(Token = "0x4000498")]
			ShowWarning
		}

		[Token(Token = "0x2000560")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B450", Offset = "0x56B450")]
		private sealed class <Import_Google_Coroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400172F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool JustCheck;

			[Token(Token = "0x4001730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal WWW <www>__0;

			[Token(Token = "0x4001731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool <notError>__0;

			[Token(Token = "0x4001732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal string <wwwText>__0;

			[Token(Token = "0x4001733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal LanguageSource $this;

			[Token(Token = "0x4001734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal object $current;

			[Token(Token = "0x4001735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x4001736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x17000471")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600230A")]
				[Address(RVA = "0x7BE410", Offset = "0x7BE410", VA = "0x7BE410", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000472")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600230B")]
				[Address(RVA = "0x7BE418", Offset = "0x7BE418", VA = "0x7BE418", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002308")]
			[Address(RVA = "0x7BB61C", Offset = "0x7BB61C", VA = "0x7BB61C")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>c__Iterator0()
			{
			}

			[Token(Token = "0x6002309")]
			[Address(RVA = "0x7BDEF0", Offset = "0x7BDEF0", VA = "0x7BDEF0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600230C")]
			[Address(RVA = "0x7BE420", Offset = "0x7BE420", VA = "0x7BE420", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600230D")]
			[Address(RVA = "0x7BE434", Offset = "0x7BE434", VA = "0x7BE434", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool NeverDestroy;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool mIsGlobalSource;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<TermData> mTerms;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string mTerm_AppName;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B3D0", Offset = "0x56B3D0")]
		private static Predicate<UnityEngine.Object> <>f__am$cache0;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B3E0", Offset = "0x56B3E0")]
		private static Func<UnityEngine.Object, string> <>f__am$cache1;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B3F0", Offset = "0x56B3F0")]
		private static Comparison<TermData> <>f__am$cache2;

		[Token(Token = "0x14000002")]
		public event Action<LanguageSource, bool, string> Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x600049B")]
			[Address(RVA = "0x7BA280", Offset = "0x7BA280", VA = "0x7BA280")]
			add
			{
			}
			[Token(Token = "0x600049C")]
			[Address(RVA = "0x7BA368", Offset = "0x7BA368", VA = "0x7BA368")]
			remove
			{
			}
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x7B4ADC", Offset = "0x7B4ADC", VA = "0x7B4ADC")]
		public LanguageSource()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x7B4C68", Offset = "0x7B4C68", VA = "0x7B4C68")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x7B56B8", Offset = "0x7B56B8", VA = "0x7B56B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x7B57A8", Offset = "0x7B57A8", VA = "0x7B57A8")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x7B5904", Offset = "0x7B5904", VA = "0x7B5904")]
		public bool IsEqualTo(LanguageSource Source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x7B4CEC", Offset = "0x7B4CEC", VA = "0x7B4CEC")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x7B5FB8", Offset = "0x7B5FB8", VA = "0x7B5FB8")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x7B6074", Offset = "0x7B6074", VA = "0x7B6074")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x7B53A4", Offset = "0x7B53A4", VA = "0x7B53A4")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x7B607C", Offset = "0x7B607C", VA = "0x7B607C")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x7B6160", Offset = "0x7B6160", VA = "0x7B6160")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x7B61CC", Offset = "0x7B61CC", VA = "0x7B61CC")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x7B627C", Offset = "0x7B627C", VA = "0x7B627C")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x7B68C8", Offset = "0x7B68C8", VA = "0x7B68C8")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x7B6C54", Offset = "0x7B6C54", VA = "0x7B6C54")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x7B6D60", Offset = "0x7B6D60", VA = "0x7B6D60")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x7B7428", Offset = "0x7B7428", VA = "0x7B7428")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x7B7D58", Offset = "0x7B7D58", VA = "0x7B7D58")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x7B7B98", Offset = "0x7B7B98", VA = "0x7B7B98")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x7B80C4", Offset = "0x7B80C4", VA = "0x7B80C4")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x7B82BC", Offset = "0x7B82BC", VA = "0x7B82BC")]
		public WWW Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x7B84B8", Offset = "0x7B84B8", VA = "0x7B84B8")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x7B8878", Offset = "0x7B8878", VA = "0x7B8878")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x7B97DC", Offset = "0x7B97DC", VA = "0x7B97DC")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x7B88C8", Offset = "0x7B88C8", VA = "0x7B88C8")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x7B982C", Offset = "0x7B982C", VA = "0x7B982C")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x7B9CB4", Offset = "0x7B9CB4", VA = "0x7B9CB4")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x7BA004", Offset = "0x7BA004", VA = "0x7BA004")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x7BA450", Offset = "0x7BA450", VA = "0x7BA450")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x7BA66C", Offset = "0x7BA66C", VA = "0x7BA66C")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x7BAB34", Offset = "0x7BAB34", VA = "0x7BAB34")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x7BB288", Offset = "0x7BB288", VA = "0x7BB288")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x7BA9A0", Offset = "0x7BA9A0", VA = "0x7BA9A0")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x7BB588", Offset = "0x7BB588", VA = "0x7BB588")]
		[DebuggerHidden]
		private IEnumerator Import_Google_Coroutine(bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x7BB624", Offset = "0x7BB624", VA = "0x7BB624")]
		public WWW Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x7BB7FC", Offset = "0x7BB7FC", VA = "0x7BB7FC")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x7BAC40", Offset = "0x7BAC40", VA = "0x7BAC40")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x7B5B10", Offset = "0x7B5B10", VA = "0x7B5B10")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x7BBBAC", Offset = "0x7BBBAC", VA = "0x7BBBAC")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x7BBC44", Offset = "0x7BBC44", VA = "0x7BBC44")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x7B98D8", Offset = "0x7B98D8", VA = "0x7B98D8")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true)
		{
			return default(int);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x7BB924", Offset = "0x7BB924", VA = "0x7BB924")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x7BBD1C", Offset = "0x7BBD1C", VA = "0x7BBD1C")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x7BBDE4", Offset = "0x7BBDE4", VA = "0x7BBDE4")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x7BBEA8", Offset = "0x7BBEA8", VA = "0x7BBEA8")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x7BBF2C", Offset = "0x7BBF2C", VA = "0x7BBF2C")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x7BC0F4", Offset = "0x7BC0F4", VA = "0x7BC0F4")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x7BC430", Offset = "0x7BC430", VA = "0x7BC430")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x7BC57C", Offset = "0x7BC57C", VA = "0x7BC57C")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x7BC76C", Offset = "0x7BC76C", VA = "0x7BC76C")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x7BC814", Offset = "0x7BC814", VA = "0x7BC814")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x7BC8CC", Offset = "0x7BC8CC", VA = "0x7BC8CC")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x7BC8DC", Offset = "0x7BC8DC", VA = "0x7BC8DC")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x7BCB40", Offset = "0x7BCB40", VA = "0x7BCB40")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x7BCF6C", Offset = "0x7BCF6C", VA = "0x7BCF6C")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x7BCD24", Offset = "0x7BCD24", VA = "0x7BCD24")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x7B9E84", Offset = "0x7B9E84", VA = "0x7B9E84")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x7B9DC0", Offset = "0x7B9DC0", VA = "0x7B9DC0")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x7B8698", Offset = "0x7B8698", VA = "0x7B8698")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x7BD140", Offset = "0x7BD140", VA = "0x7BD140")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x7BD014", Offset = "0x7BD014", VA = "0x7BD014")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x7BD248", Offset = "0x7BD248", VA = "0x7BD248")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x7B50C4", Offset = "0x7B50C4", VA = "0x7B50C4")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x7BD3BC", Offset = "0x7BD3BC", VA = "0x7BD3BC")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x7BD48C", Offset = "0x7BD48C", VA = "0x7BD48C")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x7B7088", Offset = "0x7B7088", VA = "0x7B7088")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x7BD73C", Offset = "0x7BD73C", VA = "0x7BD73C")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x7B5D50", Offset = "0x7B5D50", VA = "0x7B5D50")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x7BD958", Offset = "0x7BD958", VA = "0x7BD958")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x7BD978", Offset = "0x7BD978", VA = "0x7BD978")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x7BD748", Offset = "0x7BD748", VA = "0x7BD748")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x7BDBD8", Offset = "0x7BDBD8", VA = "0x7BDBD8")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x7B9AAC", Offset = "0x7B9AAC", VA = "0x7B9AAC")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x7BDDC0", Offset = "0x7BDDC0", VA = "0x7BDDC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B420", Offset = "0x56B420")]
		private static bool <UpdateAssetDictionary>m__0(UnityEngine.Object x)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x7BDE30", Offset = "0x7BDE30", VA = "0x7BDE30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B430", Offset = "0x56B430")]
		private static string <UpdateAssetDictionary>m__1(UnityEngine.Object o)
		{
			return null;
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x7BDE5C", Offset = "0x7BDE5C", VA = "0x7BDE5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B440", Offset = "0x56B440")]
		private static int <Export_CSV>m__2(TermData a, TermData b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20000E1")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x4000486")]
		None,
		[Token(Token = "0x4000487")]
		Replace,
		[Token(Token = "0x4000488")]
		Merge,
		[Token(Token = "0x4000489")]
		AddNewTerms
	}
	[Token(Token = "0x20000E5")]
	public class LocalizationReader
	{
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x62CF30", Offset = "0x62CF30", VA = "0x62CF30")]
		public LocalizationReader()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x62CF38", Offset = "0x62CF38", VA = "0x62CF38")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x62D1FC", Offset = "0x62D1FC", VA = "0x62D1FC")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x62D6B0", Offset = "0x62D6B0", VA = "0x62D6B0")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x62D858", Offset = "0x62D858", VA = "0x62D858")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x62D944", Offset = "0x62D944", VA = "0x62D944")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x62DB64", Offset = "0x62DB64", VA = "0x62DB64")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x62DD10", Offset = "0x62DD10", VA = "0x62DD10")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x62D5EC", Offset = "0x62D5EC", VA = "0x62D5EC")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x62DF0C", Offset = "0x62DF0C", VA = "0x62DF0C")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x62D520", Offset = "0x62D520", VA = "0x62D520")]
		public static string DecodeString(string str)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E6")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B4B0", Offset = "0x56B4B0")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x20000E7")]
		public enum TermModification
		{
			[Token(Token = "0x40004BA")]
			DontModify,
			[Token(Token = "0x40004BB")]
			ToUpper,
			[Token(Token = "0x40004BC")]
			ToLower,
			[Token(Token = "0x40004BD")]
			ToUpperFirst,
			[Token(Token = "0x40004BE")]
			ToTitle
		}

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B4F8", Offset = "0x56B4F8")]
		private static Predicate<UnityEngine.Object> <>f__am$cache0;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B508", Offset = "0x56B508")]
		private static Func<UnityEngine.Object, string> <>f__am$cache1;

		[Token(Token = "0x17000036")]
		public string Term
		{
			[Token(Token = "0x60004DA")]
			[Address(RVA = "0x62E194", Offset = "0x62E194", VA = "0x62E194")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004DB")]
			[Address(RVA = "0x62E19C", Offset = "0x62E19C", VA = "0x62E19C")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public string SecondaryTerm
		{
			[Token(Token = "0x60004DC")]
			[Address(RVA = "0x62E234", Offset = "0x62E234", VA = "0x62E234")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004DD")]
			[Address(RVA = "0x62E23C", Offset = "0x62E23C", VA = "0x62E23C")]
			set
			{
			}
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x62E028", Offset = "0x62E028", VA = "0x62E028")]
		public Localize()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x62E2EC", Offset = "0x62E2EC", VA = "0x62E2EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x62E990", Offset = "0x62E990", VA = "0x62E990")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x62E998", Offset = "0x62E998", VA = "0x62E998")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x62C07C", Offset = "0x62C07C", VA = "0x62C07C")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x62E4A4", Offset = "0x62E4A4", VA = "0x62E4A4")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x62E9FC", Offset = "0x62E9FC", VA = "0x62E9FC")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x62EBE4", Offset = "0x62EBE4", VA = "0x62EBE4")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x62ECE8", Offset = "0x62ECE8", VA = "0x62ECE8")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x62E1A0", Offset = "0x62E1A0", VA = "0x62E1A0")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x62E24C", Offset = "0x62E24C", VA = "0x62E24C")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x60004E8")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x62E330", Offset = "0x62E330", VA = "0x62E330")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x60004EA")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60004EB")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x62ED34", Offset = "0x62ED34", VA = "0x62ED34")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x60004ED")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x62EEAC", Offset = "0x62EEAC", VA = "0x62EEAC")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x62F3DC", Offset = "0x62F3DC", VA = "0x62F3DC")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x62F48C", Offset = "0x62F48C", VA = "0x62F48C")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x62F4F8", Offset = "0x62F4F8", VA = "0x62F4F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B518", Offset = "0x56B518")]
		private static bool <UpdateAssetDictionary>m__0(UnityEngine.Object x)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x62F568", Offset = "0x62F568", VA = "0x62F568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B528", Offset = "0x56B528")]
		private static string <UpdateAssetDictionary>m__1(UnityEngine.Object o)
		{
			return null;
		}
	}
	[Token(Token = "0x20000E8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B538", Offset = "0x56B538")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x62F594", Offset = "0x62F594", VA = "0x62F594")]
		public LocalizeDropdown()
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x62F604", Offset = "0x62F604", VA = "0x62F604")]
		public void Start()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x62F7F0", Offset = "0x62F7F0", VA = "0x62F7F0")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x62F890", Offset = "0x62F890", VA = "0x62F890")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x62F6AC", Offset = "0x62F6AC", VA = "0x62F6AC")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x62F900", Offset = "0x62F900", VA = "0x62F900")]
		private void FillValues()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x62FAC0", Offset = "0x62FAC0", VA = "0x62FAC0")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x62FEC8", Offset = "0x62FEC8", VA = "0x62FEC8")]
		public void UpdateLocalizationTMPro()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x62FD20", Offset = "0x62FD20", VA = "0x62FD20")]
		private void FillValuesTMPro()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	public static class LocalizationManager
	{
		[Token(Token = "0x20000EA")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x20000EB")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000561")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B5EC", Offset = "0x56B5EC")]
		private sealed class <GetAllLanguages>c__AnonStorey2
		{
			[Token(Token = "0x4001737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<string> Languages;

			[Token(Token = "0x600230E")]
			[Address(RVA = "0x62B8A0", Offset = "0x62B8A0", VA = "0x62B8A0")]
			public <GetAllLanguages>c__AnonStorey2()
			{
			}

			[Token(Token = "0x600230F")]
			[Address(RVA = "0x62B8A8", Offset = "0x62B8A8", VA = "0x62B8A8")]
			internal bool <>m__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000562")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B5FC", Offset = "0x56B5FC")]
		private sealed class <GetAllLanguagesCode>c__AnonStorey3
		{
			[Token(Token = "0x4001738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<string> Languages;

			[Token(Token = "0x6002310")]
			[Address(RVA = "0x62B920", Offset = "0x62B920", VA = "0x62B920")]
			public <GetAllLanguagesCode>c__AnonStorey3()
			{
			}

			[Token(Token = "0x6002311")]
			[Address(RVA = "0x62B928", Offset = "0x62B928", VA = "0x62B928")]
			internal bool <>m__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000563")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B60C", Offset = "0x56B60C")]
		private sealed class <ApplyLocalizationParams>c__AnonStorey4
		{
			[Token(Token = "0x4001739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal GameObject root;

			[Token(Token = "0x6002312")]
			[Address(RVA = "0x62B44C", Offset = "0x62B44C", VA = "0x62B44C")]
			public <ApplyLocalizationParams>c__AnonStorey4()
			{
			}

			[Token(Token = "0x6002313")]
			[Address(RVA = "0x62B454", Offset = "0x62B454", VA = "0x62B454")]
			internal object <>m__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x2000564")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B61C", Offset = "0x56B61C")]
		private sealed class <ApplyLocalizationParams>c__AnonStorey5
		{
			[Token(Token = "0x400173A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Dictionary<string, object> parameters;

			[Token(Token = "0x6002314")]
			[Address(RVA = "0x62B4D4", Offset = "0x62B4D4", VA = "0x62B4D4")]
			public <ApplyLocalizationParams>c__AnonStorey5()
			{
			}

			[Token(Token = "0x6002315")]
			[Address(RVA = "0x62B4DC", Offset = "0x62B4DC", VA = "0x62B4DC")]
			internal object <>m__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x2000565")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B62C", Offset = "0x56B62C")]
		private sealed class <Delayed_Import_Google>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400173B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float delay;

			[Token(Token = "0x400173C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal LanguageSource source;

			[Token(Token = "0x400173D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool justCheck;

			[Token(Token = "0x400173E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x400173F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x4001740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x17000473")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002318")]
				[Address(RVA = "0x62B818", Offset = "0x62B818", VA = "0x62B818", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000474")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002319")]
				[Address(RVA = "0x62B820", Offset = "0x62B820", VA = "0x62B820", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002316")]
			[Address(RVA = "0x62B718", Offset = "0x62B718", VA = "0x62B718")]
			[DebuggerHidden]
			public <Delayed_Import_Google>c__Iterator0()
			{
			}

			[Token(Token = "0x6002317")]
			[Address(RVA = "0x62B720", Offset = "0x62B720", VA = "0x62B720", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600231A")]
			[Address(RVA = "0x62B828", Offset = "0x62B828", VA = "0x62B828", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600231B")]
			[Address(RVA = "0x62B83C", Offset = "0x62B83C", VA = "0x62B83C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000566")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B68C", Offset = "0x56B68C")]
		private sealed class <RegisterTarget>c__AnonStorey6
		{
			[Token(Token = "0x4001741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ILocalizeTargetDescriptor desc;

			[Token(Token = "0x600231C")]
			[Address(RVA = "0x62B9A0", Offset = "0x62B9A0", VA = "0x62B9A0")]
			public <RegisterTarget>c__AnonStorey6()
			{
			}

			[Token(Token = "0x600231D")]
			[Address(RVA = "0x62B9A8", Offset = "0x62B9A8", VA = "0x62B9A8")]
			internal bool <>m__0(ILocalizeTargetDescriptor x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000567")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B69C", Offset = "0x56B69C")]
		private sealed class <Coroutine_LocalizeAll>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool <force>__0;

			[Token(Token = "0x4001743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x4001744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x4001745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x17000475")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002320")]
				[Address(RVA = "0x62B690", Offset = "0x62B690", VA = "0x62B690", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000476")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002321")]
				[Address(RVA = "0x62B698", Offset = "0x62B698", VA = "0x62B698", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600231E")]
			[Address(RVA = "0x62B568", Offset = "0x62B568", VA = "0x62B568")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>c__Iterator1()
			{
			}

			[Token(Token = "0x600231F")]
			[Address(RVA = "0x62B570", Offset = "0x62B570", VA = "0x62B570", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002322")]
			[Address(RVA = "0x62B6A0", Offset = "0x62B6A0", VA = "0x62B6A0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002323")]
			[Address(RVA = "0x62B6B4", Offset = "0x62B6B4", VA = "0x62B6B4", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static List<LanguageSource> Sources;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] GlobalSources;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B5AC", Offset = "0x56B5AC")]
		private static _GetParam <>f__am$cache0;

		[Token(Token = "0x17000038")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6000500")]
			[Address(RVA = "0x7BA600", Offset = "0x7BA600", VA = "0x7BA600")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000501")]
			[Address(RVA = "0x7A659C", Offset = "0x7A659C", VA = "0x7A659C")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6000502")]
			[Address(RVA = "0x7BF498", Offset = "0x7BF498", VA = "0x7BF498")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000503")]
			[Address(RVA = "0x7BF504", Offset = "0x7BF504", VA = "0x7BF504")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6000504")]
			[Address(RVA = "0x7BF878", Offset = "0x7BF878", VA = "0x7BF878")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000505")]
			[Address(RVA = "0x7BFA40", Offset = "0x7BFA40", VA = "0x7BFA40")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x6000506")]
			[Address(RVA = "0x7BFC78", Offset = "0x7BFC78", VA = "0x7BFC78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000507")]
			[Address(RVA = "0x7BFD70", Offset = "0x7BFD70", VA = "0x7BFD70")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x6000508")]
			[Address(RVA = "0x7BFEB0", Offset = "0x7BFEB0", VA = "0x7BFEB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000003")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x600052E")]
			[Address(RVA = "0x7A5E1C", Offset = "0x7A5E1C", VA = "0x7A5E1C")]
			add
			{
			}
			[Token(Token = "0x600052F")]
			[Address(RVA = "0x7A5CE0", Offset = "0x7A5CE0", VA = "0x7A5CE0")]
			remove
			{
			}
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x7AE850", Offset = "0x7AE850", VA = "0x7AE850")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x7BEA4C", Offset = "0x7BEA4C", VA = "0x7BEA4C")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x7BB91C", Offset = "0x7BB91C", VA = "0x7BB91C")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x7AE280", Offset = "0x7AE280", VA = "0x7AE280")]
		public static string GetWebServiceURL([Optional] LanguageSource source)
		{
			return null;
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x7BF24C", Offset = "0x7BF24C", VA = "0x7BF24C")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x7BFF18", Offset = "0x7BFF18", VA = "0x7BFF18")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x7A5034", Offset = "0x7A5034", VA = "0x7A5034")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x7C0020", Offset = "0x7C0020", VA = "0x7C0020")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x7BE530", Offset = "0x7BE530", VA = "0x7BE530")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x7A6364", Offset = "0x7A6364", VA = "0x7A6364")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x7BEA94", Offset = "0x7BEA94", VA = "0x7BEA94")]
		public static string GetSupportedLanguage(string Language)
		{
			return null;
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x7BF028", Offset = "0x7BF028", VA = "0x7BF028")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x7BF648", Offset = "0x7BF648", VA = "0x7BF648")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x7C0238", Offset = "0x7C0238", VA = "0x7C0238")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x7C04C0", Offset = "0x7C04C0", VA = "0x7C04C0")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x7C06E4", Offset = "0x7C06E4", VA = "0x7C06E4")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x7C0804", Offset = "0x7C0804", VA = "0x7C0804")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x7C0978", Offset = "0x7C0978", VA = "0x7C0978")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x7C0A64", Offset = "0x7C0A64", VA = "0x7C0A64")]
		public static void ApplyLocalizationParams(ref string translation)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x7C1044", Offset = "0x7C1044", VA = "0x7C1044")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root)
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x7C1110", Offset = "0x7C1110", VA = "0x7C1110")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters)
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x7C0B58", Offset = "0x7C0B58", VA = "0x7C0B58")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam)
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x7C1358", Offset = "0x7C1358", VA = "0x7C1358")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x7C1634", Offset = "0x7C1634", VA = "0x7C1634")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x7C1898", Offset = "0x7C1898", VA = "0x7C1898")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x7C1904", Offset = "0x7C1904", VA = "0x7C1904")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x7C1EA4", Offset = "0x7C1EA4", VA = "0x7C1EA4")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x7C00D0", Offset = "0x7C00D0", VA = "0x7C00D0")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x7BE498", Offset = "0x7BE498", VA = "0x7BE498")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x7C1F58", Offset = "0x7C1F58", VA = "0x7C1F58")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x7C22CC", Offset = "0x7C22CC", VA = "0x7C22CC")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x7C20C8", Offset = "0x7C20C8", VA = "0x7C20C8")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x7B4E84", Offset = "0x7B4E84", VA = "0x7B4E84")]
		internal static void AddSource(LanguageSource Source)
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x7C24D8", Offset = "0x7C24D8", VA = "0x7C24D8")]
		[DebuggerHidden]
		private static IEnumerator Delayed_Import_Google(LanguageSource source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x7B5720", Offset = "0x7B5720", VA = "0x7B5720")]
		internal static void RemoveSource(LanguageSource Source)
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x7C2584", Offset = "0x7C2584", VA = "0x7C2584")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x7C2610", Offset = "0x7C2610", VA = "0x7C2610")]
		public static LanguageSource GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x7C2848", Offset = "0x7C2848", VA = "0x7C2848")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x7C015C", Offset = "0x7C015C", VA = "0x7C015C")]
		public static string GetCurrentDeviceLanguage()
		{
			return null;
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x7C29A8", Offset = "0x7C29A8", VA = "0x7C29A8")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x7C2E08", Offset = "0x7C2E08", VA = "0x7C2E08")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x7A58B8", Offset = "0x7A58B8", VA = "0x7A58B8")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x7C32F4", Offset = "0x7C32F4", VA = "0x7C32F4")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x7C30B4", Offset = "0x7C30B4", VA = "0x7C30B4")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000533")]
		public static T GetTranslatedObject<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x7C33A0", Offset = "0x7C33A0", VA = "0x7C33A0")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x7B55A0", Offset = "0x7B55A0", VA = "0x7B55A0")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x7C3890", Offset = "0x7C3890", VA = "0x7C3890")]
		[DebuggerHidden]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x7C3678", Offset = "0x7C3678", VA = "0x7C3678")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x7C38EC", Offset = "0x7C38EC", VA = "0x7C38EC")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x7C3A24", Offset = "0x7C3A24", VA = "0x7C3A24")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x7C3CB8", Offset = "0x7C3CB8", VA = "0x7C3CB8")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x7C11DC", Offset = "0x7C11DC", VA = "0x7C11DC")]
		public static TermData GetTermData(string term, out LanguageSource source)
		{
			return null;
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x7C4598", Offset = "0x7C4598", VA = "0x7C4598")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B5DC", Offset = "0x56B5DC")]
		private static object <ApplyLocalizationParams>m__0(string p)
		{
			return null;
		}
	}
	[Token(Token = "0x20000EC")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x7B4A38", Offset = "0x7B4A38", VA = "0x7B4A38")]
		protected ILocalizeTarget()
		{
		}

		[Token(Token = "0x6000547")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x6000548")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x6000549")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x600054A")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x600054B")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x600054C")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x600054D")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x600054E")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);
	}
	[Token(Token = "0x20000ED")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x600054F")]
		protected LocalizeTarget()
		{
		}

		[Token(Token = "0x6000550")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000EE")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x7B4A40", Offset = "0x7B4A40", VA = "0x7B4A40")]
		protected ILocalizeTargetDescriptor()
		{
		}

		[Token(Token = "0x6000552")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x6000553")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x6000554")]
		public abstract Type GetTargetType();
	}
	[Token(Token = "0x20000EF")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x6000555")]
		protected LocalizeTargetDesc()
		{
		}

		[Token(Token = "0x6000556")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x6000557")]
		public override Type GetTargetType()
		{
			return null;
		}
	}
	[Token(Token = "0x20000F0")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x6000558")]
		public LocalizeTargetDesc_Type()
		{
		}

		[Token(Token = "0x6000559")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F1")]
	public class LocalizeTarget_TextMeshPro_Label : LocalizeTarget<TextMeshPro>
	{
		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x6302F0", Offset = "0x6302F0", VA = "0x6302F0")]
		static LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x6303BC", Offset = "0x6303BC", VA = "0x6303BC")]
		public LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x6302F4", Offset = "0x6302F4", VA = "0x6302F4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B6FC", Offset = "0x56B6FC")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x630420", Offset = "0x630420", VA = "0x630420", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x630428", Offset = "0x630428", VA = "0x630428", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x630430", Offset = "0x630430", VA = "0x630430", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x630438", Offset = "0x630438", VA = "0x630438", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x630440", Offset = "0x630440", VA = "0x630440", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x630448", Offset = "0x630448", VA = "0x630448", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x6305BC", Offset = "0x6305BC", VA = "0x6305BC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x630BF4", Offset = "0x630BF4", VA = "0x630BF4")]
		internal static TMP_FontAsset GetTMPFontFromMaterial(Localize cmp, string matName)
		{
			return null;
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x630DB0", Offset = "0x630DB0", VA = "0x630DB0")]
		internal static void InitAlignment_TMPro(bool isRTL, TextAlignmentOptions alignment, out TextAlignmentOptions alignLTR, out TextAlignmentOptions alignRTL)
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class LocalizeTarget_TextMeshPro_UGUI : LocalizeTarget<TextMeshProUGUI>
	{
		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool mAlignmentWasRTL;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool mInitializeAlignment;

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x631158", Offset = "0x631158", VA = "0x631158")]
		static LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x631224", Offset = "0x631224", VA = "0x631224")]
		public LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x63115C", Offset = "0x63115C", VA = "0x63115C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B710", Offset = "0x56B710")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x631288", Offset = "0x631288", VA = "0x631288", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x631290", Offset = "0x631290", VA = "0x631290", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x631298", Offset = "0x631298", VA = "0x631298", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x6312A0", Offset = "0x6312A0", VA = "0x6312A0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x6312A8", Offset = "0x6312A8", VA = "0x6312A8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x6312B0", Offset = "0x6312B0", VA = "0x6312B0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x631424", Offset = "0x631424", VA = "0x631424", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x6000571")]
		[Address(RVA = "0x631A5C", Offset = "0x631A5C", VA = "0x631A5C")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x631B28", Offset = "0x631B28", VA = "0x631B28")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x631A60", Offset = "0x631A60", VA = "0x631A60")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B724", Offset = "0x56B724")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x631B78", Offset = "0x631B78", VA = "0x631B78", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x631B80", Offset = "0x631B80", VA = "0x631B80", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x631B88", Offset = "0x631B88", VA = "0x631B88", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x631B90", Offset = "0x631B90", VA = "0x631B90", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x631B98", Offset = "0x631B98", VA = "0x631B98", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x631BA0", Offset = "0x631BA0", VA = "0x631BA0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x631CB8", Offset = "0x631CB8", VA = "0x631CB8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000F4")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x600057B")]
		[Address(RVA = "0x631F8C", Offset = "0x631F8C", VA = "0x631F8C")]
		public LocalizeTargetDesc_Child()
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x634CDC", Offset = "0x634CDC", VA = "0x634CDC", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F5")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x600057D")]
		[Address(RVA = "0x631E7C", Offset = "0x631E7C", VA = "0x631E7C")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x631F3C", Offset = "0x631F3C", VA = "0x631F3C")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x631E80", Offset = "0x631E80", VA = "0x631E80")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B738", Offset = "0x56B738")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x631FDC", Offset = "0x631FDC", VA = "0x631FDC", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x63202C", Offset = "0x63202C", VA = "0x63202C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x632034", Offset = "0x632034", VA = "0x632034", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x63203C", Offset = "0x63203C", VA = "0x63203C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x632044", Offset = "0x632044", VA = "0x632044", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x63204C", Offset = "0x63204C", VA = "0x63204C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x632054", Offset = "0x632054", VA = "0x632054", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x63209C", Offset = "0x63209C", VA = "0x63209C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class LocalizeTarget_UnityStandard_GUIText : LocalizeTarget<GUIText>
	{
		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x632280", Offset = "0x632280", VA = "0x632280")]
		static LocalizeTarget_UnityStandard_GUIText()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x63234C", Offset = "0x63234C", VA = "0x63234C")]
		public LocalizeTarget_UnityStandard_GUIText()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x632284", Offset = "0x632284", VA = "0x632284")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B74C", Offset = "0x56B74C")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x6323AC", Offset = "0x6323AC", VA = "0x6323AC", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x6323B4", Offset = "0x6323B4", VA = "0x6323B4", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x6323BC", Offset = "0x6323BC", VA = "0x6323BC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x6323C4", Offset = "0x6323C4", VA = "0x6323C4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x6323CC", Offset = "0x6323CC", VA = "0x6323CC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x6323D4", Offset = "0x6323D4", VA = "0x6323D4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x632554", Offset = "0x632554", VA = "0x632554", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000F7")]
	public class LocalizeTarget_UnityStandard_GUITexture : LocalizeTarget<GUITexture>
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x632830", Offset = "0x632830", VA = "0x632830")]
		static LocalizeTarget_UnityStandard_GUITexture()
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x6328FC", Offset = "0x6328FC", VA = "0x6328FC")]
		public LocalizeTarget_UnityStandard_GUITexture()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x632834", Offset = "0x632834", VA = "0x632834")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B760", Offset = "0x56B760")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x63294C", Offset = "0x63294C", VA = "0x63294C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x632954", Offset = "0x632954", VA = "0x632954", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x63295C", Offset = "0x63295C", VA = "0x63295C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x632964", Offset = "0x632964", VA = "0x632964", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x63296C", Offset = "0x63296C", VA = "0x63296C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x632974", Offset = "0x632974", VA = "0x632974", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x632A8C", Offset = "0x632A8C", VA = "0x632A8C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x600059C")]
		[Address(RVA = "0x632CE8", Offset = "0x632CE8", VA = "0x632CE8")]
		public LocalizeTargetDesc_Prefab()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x634D2C", Offset = "0x634D2C", VA = "0x634D2C", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F9")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x632BD8", Offset = "0x632BD8", VA = "0x632BD8")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x632C98", Offset = "0x632C98", VA = "0x632C98")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x632BDC", Offset = "0x632BDC", VA = "0x632BDC")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B770", Offset = "0x56B770")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x632D38", Offset = "0x632D38", VA = "0x632D38", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x632D40", Offset = "0x632D40", VA = "0x632D40", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x632D48", Offset = "0x632D48", VA = "0x632D48", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x632D50", Offset = "0x632D50", VA = "0x632D50", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x632D58", Offset = "0x632D58", VA = "0x632D58", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x632D60", Offset = "0x632D60", VA = "0x632D60", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x632D68", Offset = "0x632D68", VA = "0x632D68", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x632DB0", Offset = "0x632DB0", VA = "0x632DB0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x63307C", Offset = "0x63307C", VA = "0x63307C")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FA")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x6332C4", Offset = "0x6332C4", VA = "0x6332C4")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x633390", Offset = "0x633390", VA = "0x633390")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x6332C8", Offset = "0x6332C8", VA = "0x6332C8")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B784", Offset = "0x56B784")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x6333E0", Offset = "0x6333E0", VA = "0x6333E0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x6333E8", Offset = "0x6333E8", VA = "0x6333E8", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x6333F0", Offset = "0x6333F0", VA = "0x6333F0", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x6333F8", Offset = "0x6333F8", VA = "0x6333F8", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x633400", Offset = "0x633400", VA = "0x633400", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x633408", Offset = "0x633408", VA = "0x633408", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x633524", Offset = "0x633524", VA = "0x633524", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x633670", Offset = "0x633670", VA = "0x633670")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x63373C", Offset = "0x63373C", VA = "0x63373C")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x633674", Offset = "0x633674", VA = "0x633674")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B798", Offset = "0x56B798")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x63379C", Offset = "0x63379C", VA = "0x63379C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x6337A4", Offset = "0x6337A4", VA = "0x6337A4", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x6337AC", Offset = "0x6337AC", VA = "0x6337AC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x6337B4", Offset = "0x6337B4", VA = "0x6337B4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x6337BC", Offset = "0x6337BC", VA = "0x6337BC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x6337C4", Offset = "0x6337C4", VA = "0x6337C4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x633944", Offset = "0x633944", VA = "0x633944", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<Image>
	{
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x633C58", Offset = "0x633C58", VA = "0x633C58")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x633D24", Offset = "0x633D24", VA = "0x633D24")]
		public LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x633C5C", Offset = "0x633C5C", VA = "0x633C5C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B7AC", Offset = "0x56B7AC")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x633D74", Offset = "0x633D74", VA = "0x633D74", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x633D7C", Offset = "0x633D7C", VA = "0x633D7C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x633D84", Offset = "0x633D84", VA = "0x633D84", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x633D8C", Offset = "0x633D8C", VA = "0x633D8C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x633E30", Offset = "0x633E30", VA = "0x633E30", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x633E38", Offset = "0x633E38", VA = "0x633E38", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x6340A4", Offset = "0x6340A4", VA = "0x6340A4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x6341F0", Offset = "0x6341F0", VA = "0x6341F0")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x6342BC", Offset = "0x6342BC", VA = "0x6342BC")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x6341F4", Offset = "0x6341F4", VA = "0x6341F4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B7C0", Offset = "0x56B7C0")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x63430C", Offset = "0x63430C", VA = "0x63430C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x634314", Offset = "0x634314", VA = "0x634314", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x63431C", Offset = "0x63431C", VA = "0x63431C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x634324", Offset = "0x634324", VA = "0x634324", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x63432C", Offset = "0x63432C", VA = "0x63432C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x634334", Offset = "0x634334", VA = "0x634334", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x63445C", Offset = "0x63445C", VA = "0x63445C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}
	}
	[Token(Token = "0x20000FE")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x6345A8", Offset = "0x6345A8", VA = "0x6345A8")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x634674", Offset = "0x634674", VA = "0x634674")]
		public LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x6345AC", Offset = "0x6345AC", VA = "0x6345AC")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x56B7D4", Offset = "0x56B7D4")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x6346D4", Offset = "0x6346D4", VA = "0x6346D4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x6346DC", Offset = "0x6346DC", VA = "0x6346DC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x6346E4", Offset = "0x6346E4", VA = "0x6346E4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x6346EC", Offset = "0x6346EC", VA = "0x6346EC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x6346F4", Offset = "0x6346F4", VA = "0x6346F4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x6346FC", Offset = "0x6346FC", VA = "0x6346FC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x634878", Offset = "0x634878", VA = "0x634878", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x634BF4", Offset = "0x634BF4", VA = "0x634BF4")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public enum eTermType
	{
		[Token(Token = "0x40004E9")]
		Text,
		[Token(Token = "0x40004EA")]
		Font,
		[Token(Token = "0x40004EB")]
		Texture,
		[Token(Token = "0x40004EC")]
		AudioClip,
		[Token(Token = "0x40004ED")]
		GameObject,
		[Token(Token = "0x40004EE")]
		Sprite,
		[Token(Token = "0x40004EF")]
		Material,
		[Token(Token = "0x40004F0")]
		Child,
		[Token(Token = "0x40004F1")]
		TextMeshPFont,
		[Token(Token = "0x40004F2")]
		Object
	}
	[Token(Token = "0x2000100")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x40004F4")]
		Normal = 1,
		[Token(Token = "0x40004F5")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x2000101")]
	public class TermData
	{
		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x642064", Offset = "0x642064", VA = "0x642064")]
		public TermData()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x642124", Offset = "0x642124", VA = "0x642124")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x642288", Offset = "0x642288", VA = "0x642288")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x642388", Offset = "0x642388", VA = "0x642388")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x6423E4", Offset = "0x6423E4", VA = "0x6423E4")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x6425BC", Offset = "0x6425BC", VA = "0x6425BC")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x642614", Offset = "0x642614", VA = "0x642614")]
		public void Validate()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x6428F8", Offset = "0x6428F8", VA = "0x6428F8")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x6429E0", Offset = "0x6429E0", VA = "0x6429E0")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x642B1C", Offset = "0x642B1C", VA = "0x642B1C")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}
	}
	[Token(Token = "0x2000102")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B7F8", Offset = "0x56B7F8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56B7F8", Offset = "0x56B7F8")]
		private string <Filter>k__BackingField;

		[Token(Token = "0x1700003D")]
		public string Filter
		{
			[Token(Token = "0x60005E8")]
			[Address(RVA = "0x642C4C", Offset = "0x642C4C", VA = "0x642C4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B834", Offset = "0x56B834")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005E9")]
			[Address(RVA = "0x642C44", Offset = "0x642C44", VA = "0x642C44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B844", Offset = "0x56B844")]
			private set
			{
			}
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x642C18", Offset = "0x642C18", VA = "0x642C18")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x2000103")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x7A4FCC", Offset = "0x7A4FCC", VA = "0x7A4FCC")]
		public AutoChangeCultureInfo()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x7A4FD4", Offset = "0x7A4FD4", VA = "0x7A4FD4")]
		public void Start()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x1700003E")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x60005ED")]
			[Address(RVA = "0x7A5984", Offset = "0x7A5984", VA = "0x7A5984")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x7A597C", Offset = "0x7A597C", VA = "0x7A597C")]
		public CoroutineManager()
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x7A5AD8", Offset = "0x7A5AD8", VA = "0x7A5AD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x7A5B74", Offset = "0x7A5B74", VA = "0x7A5B74")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B854", Offset = "0x56B854")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x7A5BAC", Offset = "0x7A5BAC", VA = "0x7A5BAC")]
		public CustomLocalizeCallback()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x7A5C14", Offset = "0x7A5C14", VA = "0x7A5C14")]
		public void Enable()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x7A5F58", Offset = "0x7A5F58", VA = "0x7A5F58")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x7A5FF4", Offset = "0x7A5FF4", VA = "0x7A5FF4")]
		public void OnLocalize()
		{
		}
	}
	[Token(Token = "0x2000106")]
	public class HindiFixer
	{
		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B88C", Offset = "0x56B88C")]
		private static Func<char, bool> <>f__am$cache0;

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x7B2100", Offset = "0x7B2100", VA = "0x7B2100")]
		public HindiFixer()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x7B2108", Offset = "0x7B2108", VA = "0x7B2108")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x7B285C", Offset = "0x7B285C", VA = "0x7B285C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B89C", Offset = "0x56B89C")]
		private static bool <Fix>m__0(char x)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000107")]
	public static class I2Utils
	{
		[Token(Token = "0x2000568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B8EC", Offset = "0x56B8EC")]
		private sealed class <RemoveNonASCII>c__AnonStorey0
		{
			[Token(Token = "0x4001746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool allowCategory;

			[Token(Token = "0x6002324")]
			[Address(RVA = "0x7B3FB4", Offset = "0x7B3FB4", VA = "0x7B3FB4")]
			public <RemoveNonASCII>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6002325")]
			[Address(RVA = "0x7B4998", Offset = "0x7B4998", VA = "0x7B4998")]
			internal char <>m__0(char c)
			{
				return default(char);
			}
		}

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B8BC", Offset = "0x56B8BC")]
		private static Func<char, bool> <>f__am$cache0;

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x7B3D60", Offset = "0x7B3D60", VA = "0x7B3D60")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x7B3E5C", Offset = "0x7B3E5C", VA = "0x7B3E5C")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x7B3FBC", Offset = "0x7B3FBC", VA = "0x7B3FBC")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x7B42E8", Offset = "0x7B42E8", VA = "0x7B42E8")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x7B4478", Offset = "0x7B4478", VA = "0x7B4478")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x7B4484", Offset = "0x7B4484", VA = "0x7B4484")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x7B4598", Offset = "0x7B4598", VA = "0x7B4598")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x7B45C8", Offset = "0x7B45C8", VA = "0x7B45C8")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x7B47BC", Offset = "0x7B47BC", VA = "0x7B47BC")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6000600")]
		public static H FindInParents<H>(Transform tr) where H : Component
		{
			return null;
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x7B13A4", Offset = "0x7B13A4", VA = "0x7B13A4")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x7B498C", Offset = "0x7B498C", VA = "0x7B498C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B8DC", Offset = "0x56B8DC")]
		private static bool <SplitLine>m__0(char c)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000108")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x6000603")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x2000109")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x200010A")]
		public struct ParamValue
		{
			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x62BC98", Offset = "0x62BC98", VA = "0x62BC98")]
		public LocalizationParamsManager()
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x62BD08", Offset = "0x62BD08", VA = "0x62BD08", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x62BE24", Offset = "0x62BE24", VA = "0x62BE24")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x62BFCC", Offset = "0x62BFCC", VA = "0x62BFCC")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x62CD04", Offset = "0x62CD04", VA = "0x62CD04", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x62CD08", Offset = "0x62CD08", VA = "0x62CD08")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x62CE04", Offset = "0x62CE04", VA = "0x62CE04")]
		public void OnDisable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200010B")]
	public struct LocalizedString
	{
		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x6301E0", Offset = "0x6301E0", VA = "0x6301E0")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x630200", Offset = "0x630200", VA = "0x630200")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x6302D0", Offset = "0x6302D0", VA = "0x6302D0")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x6302E8", Offset = "0x6302E8", VA = "0x6302E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200010C")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x636294", Offset = "0x636294", VA = "0x636294")]
		public RegisterGlobalParameters()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x63629C", Offset = "0x63629C", VA = "0x63629C", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x636398", Offset = "0x636398", VA = "0x636398", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x636420", Offset = "0x636420", VA = "0x636420", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}
	}
	[Token(Token = "0x200010D")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x6000613")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x200010E")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56B90C", Offset = "0x56B90C")]
		private static UnityAction<Scene, LoadSceneMode> <>f__mg$cache0;

		[Token(Token = "0x1700003F")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x6000615")]
			[Address(RVA = "0x62EF50", Offset = "0x62EF50", VA = "0x62EF50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x636428", Offset = "0x636428", VA = "0x636428")]
		public ResourceManager()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x636500", Offset = "0x636500", VA = "0x636500")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000617")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x6365F0", Offset = "0x6365F0", VA = "0x6365F0")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x62F360", Offset = "0x62F360", VA = "0x62F360")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600061B")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x63657C", Offset = "0x63657C", VA = "0x63657C")]
		public void CleanResourceCache()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class RTLFixer
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x636790", Offset = "0x636790", VA = "0x636790")]
		public RTLFixer()
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x636798", Offset = "0x636798", VA = "0x636798")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x636AE8", Offset = "0x636AE8", VA = "0x636AE8")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x6367A4", Offset = "0x6367A4", VA = "0x6367A4")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}
	}
	[Token(Token = "0x2000110")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x400050E")]
		Hamza = 65152,
		[Token(Token = "0x400050F")]
		Alef = 65165,
		[Token(Token = "0x4000510")]
		AlefHamza = 65155,
		[Token(Token = "0x4000511")]
		WawHamza = 65157,
		[Token(Token = "0x4000512")]
		AlefMaksoor = 65159,
		[Token(Token = "0x4000513")]
		AlefMaksora = 64508,
		[Token(Token = "0x4000514")]
		HamzaNabera = 65161,
		[Token(Token = "0x4000515")]
		Ba = 65167,
		[Token(Token = "0x4000516")]
		Ta = 65173,
		[Token(Token = "0x4000517")]
		Tha2 = 65177,
		[Token(Token = "0x4000518")]
		Jeem = 65181,
		[Token(Token = "0x4000519")]
		H7aa = 65185,
		[Token(Token = "0x400051A")]
		Khaa2 = 65189,
		[Token(Token = "0x400051B")]
		Dal = 65193,
		[Token(Token = "0x400051C")]
		Thal = 65195,
		[Token(Token = "0x400051D")]
		Ra2 = 65197,
		[Token(Token = "0x400051E")]
		Zeen = 65199,
		[Token(Token = "0x400051F")]
		Seen = 65201,
		[Token(Token = "0x4000520")]
		Sheen = 65205,
		[Token(Token = "0x4000521")]
		S9a = 65209,
		[Token(Token = "0x4000522")]
		Dha = 65213,
		[Token(Token = "0x4000523")]
		T6a = 65217,
		[Token(Token = "0x4000524")]
		T6ha = 65221,
		[Token(Token = "0x4000525")]
		Ain = 65225,
		[Token(Token = "0x4000526")]
		Gain = 65229,
		[Token(Token = "0x4000527")]
		Fa = 65233,
		[Token(Token = "0x4000528")]
		Gaf = 65237,
		[Token(Token = "0x4000529")]
		Kaf = 65241,
		[Token(Token = "0x400052A")]
		Lam = 65245,
		[Token(Token = "0x400052B")]
		Meem = 65249,
		[Token(Token = "0x400052C")]
		Noon = 65253,
		[Token(Token = "0x400052D")]
		Ha = 65257,
		[Token(Token = "0x400052E")]
		Waw = 65261,
		[Token(Token = "0x400052F")]
		Ya = 65265,
		[Token(Token = "0x4000530")]
		AlefMad = 65153,
		[Token(Token = "0x4000531")]
		TaMarboota = 65171,
		[Token(Token = "0x4000532")]
		PersianPe = 64342,
		[Token(Token = "0x4000533")]
		PersianChe = 64378,
		[Token(Token = "0x4000534")]
		PersianZe = 64394,
		[Token(Token = "0x4000535")]
		PersianGaf = 64402,
		[Token(Token = "0x4000536")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x2000111")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x4000538")]
		Hamza = 1569,
		[Token(Token = "0x4000539")]
		Alef = 1575,
		[Token(Token = "0x400053A")]
		AlefHamza = 1571,
		[Token(Token = "0x400053B")]
		WawHamza = 1572,
		[Token(Token = "0x400053C")]
		AlefMaksoor = 1573,
		[Token(Token = "0x400053D")]
		AlefMagsora = 1609,
		[Token(Token = "0x400053E")]
		HamzaNabera = 1574,
		[Token(Token = "0x400053F")]
		Ba = 1576,
		[Token(Token = "0x4000540")]
		Ta = 1578,
		[Token(Token = "0x4000541")]
		Tha2 = 1579,
		[Token(Token = "0x4000542")]
		Jeem = 1580,
		[Token(Token = "0x4000543")]
		H7aa = 1581,
		[Token(Token = "0x4000544")]
		Khaa2 = 1582,
		[Token(Token = "0x4000545")]
		Dal = 1583,
		[Token(Token = "0x4000546")]
		Thal = 1584,
		[Token(Token = "0x4000547")]
		Ra2 = 1585,
		[Token(Token = "0x4000548")]
		Zeen = 1586,
		[Token(Token = "0x4000549")]
		Seen = 1587,
		[Token(Token = "0x400054A")]
		Sheen = 1588,
		[Token(Token = "0x400054B")]
		S9a = 1589,
		[Token(Token = "0x400054C")]
		Dha = 1590,
		[Token(Token = "0x400054D")]
		T6a = 1591,
		[Token(Token = "0x400054E")]
		T6ha = 1592,
		[Token(Token = "0x400054F")]
		Ain = 1593,
		[Token(Token = "0x4000550")]
		Gain = 1594,
		[Token(Token = "0x4000551")]
		Fa = 1601,
		[Token(Token = "0x4000552")]
		Gaf = 1602,
		[Token(Token = "0x4000553")]
		Kaf = 1603,
		[Token(Token = "0x4000554")]
		Lam = 1604,
		[Token(Token = "0x4000555")]
		Meem = 1605,
		[Token(Token = "0x4000556")]
		Noon = 1606,
		[Token(Token = "0x4000557")]
		Ha = 1607,
		[Token(Token = "0x4000558")]
		Waw = 1608,
		[Token(Token = "0x4000559")]
		Ya = 1610,
		[Token(Token = "0x400055A")]
		AlefMad = 1570,
		[Token(Token = "0x400055B")]
		TaMarboota = 1577,
		[Token(Token = "0x400055C")]
		PersianPe = 1662,
		[Token(Token = "0x400055D")]
		PersianChe = 1670,
		[Token(Token = "0x400055E")]
		PersianZe = 1688,
		[Token(Token = "0x400055F")]
		PersianGaf = 1711,
		[Token(Token = "0x4000560")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x2000112")]
	internal class ArabicMapping
	{
		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x7A4260", Offset = "0x7A4260", VA = "0x7A4260")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x2000113")]
	internal class ArabicTable
	{
		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x17000040")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x6000623")]
			[Address(RVA = "0x7A4E1C", Offset = "0x7A4E1C", VA = "0x7A4E1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x7A4298", Offset = "0x7A4298", VA = "0x7A4298")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x7A4E98", Offset = "0x7A4E98", VA = "0x7A4E98")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000114")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x638AE0", Offset = "0x638AE0", VA = "0x638AE0")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x2000115")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x6383E8", Offset = "0x6383E8", VA = "0x6383E8")]
		public RTLFixerTool()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x6383F0", Offset = "0x6383F0", VA = "0x6383F0")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x638B1C", Offset = "0x638B1C", VA = "0x638B1C")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x636E24", Offset = "0x636E24", VA = "0x636E24")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x638D50", Offset = "0x638D50", VA = "0x638D50")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x639A28", Offset = "0x639A28", VA = "0x639A28")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x639698", Offset = "0x639698", VA = "0x639698")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x638ECC", Offset = "0x638ECC", VA = "0x638ECC")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B91C", Offset = "0x56B91C")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x63A228", Offset = "0x63A228", VA = "0x63A228")]
		public SetLanguage()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x63A230", Offset = "0x63A230", VA = "0x63A230")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x63A234", Offset = "0x63A234", VA = "0x63A234")]
		public void ApplyLanguage()
		{
		}
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56B954", Offset = "0x56B954")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x63A2F8", Offset = "0x63A2F8", VA = "0x63A2F8")]
		public SetLanguageDropdown()
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x63A300", Offset = "0x63A300", VA = "0x63A300")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x63A5C4", Offset = "0x63A5C4", VA = "0x63A5C4")]
		private void OnValueChanged(int index)
		{
		}
	}
	[Token(Token = "0x2000118")]
	public class StringObfucator
	{
		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x641A94", Offset = "0x641A94", VA = "0x641A94")]
		public StringObfucator()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x641A9C", Offset = "0x641A9C", VA = "0x641A9C")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x641E3C", Offset = "0x641E3C", VA = "0x641E3C")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x641D7C", Offset = "0x641D7C", VA = "0x641D7C")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x641F20", Offset = "0x641F20", VA = "0x641F20")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x641B80", Offset = "0x641B80", VA = "0x641B80")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}
	}
}
[Token(Token = "0x2000119")]
public class MC_AutoRotate : MonoBehaviour
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotation;

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x6955D8", Offset = "0x6955D8", VA = "0x6955D8")]
	public MC_AutoRotate()
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x6955E0", Offset = "0x6955E0", VA = "0x6955E0")]
	private void Update()
	{
	}
}
[Token(Token = "0x200011A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56B98C", Offset = "0x56B98C")]
public class MC_SwitchTexture : MonoBehaviour
{
	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material linkedMat;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture[] textures;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int index;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x6956C0", Offset = "0x6956C0", VA = "0x6956C0")]
	public MC_SwitchTexture()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x6956C8", Offset = "0x6956C8", VA = "0x6956C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x6958A4", Offset = "0x6958A4", VA = "0x6958A4")]
	private void NextTexture()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x6958F4", Offset = "0x6958F4", VA = "0x6958F4")]
	private void PrevTexture()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x69593C", Offset = "0x69593C", VA = "0x69593C")]
	private void ReloadTexture()
	{
	}
}
[Token(Token = "0x200011B")]
public static class ExtensionMethods
{
	[Token(Token = "0x6000643")]
	[Address(RVA = "0x793C3C", Offset = "0x793C3C", VA = "0x793C3C")]
	public static float Remap(this float value, float from1, float to1, float from2, float to2)
	{
		return default(float);
	}
}
[Token(Token = "0x200011C")]
public class SimpleFSM
{
	[Token(Token = "0x200056B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BA30", Offset = "0x56BA30")]
	private sealed class <StartFSM>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SimpleFSM $this;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000477")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002328")]
			[Address(RVA = "0x111267C", Offset = "0x111267C", VA = "0x111267C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000478")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002329")]
			[Address(RVA = "0x1112684", Offset = "0x1112684", VA = "0x1112684", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0x1111F1C", Offset = "0x1111F1C", VA = "0x1111F1C")]
		[DebuggerHidden]
		public <StartFSM>c__Iterator0()
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0x1112544", Offset = "0x1112544", VA = "0x1112544", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x111268C", Offset = "0x111268C", VA = "0x111268C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x11126A0", Offset = "0x11126A0", VA = "0x11126A0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200056C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BA90", Offset = "0x56BA90")]
	private sealed class <PerformChangeState>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SimpleFSMState newState;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SimpleFSM $this;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x17000479")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600232E")]
			[Address(RVA = "0x11124BC", Offset = "0x11124BC", VA = "0x11124BC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600232F")]
			[Address(RVA = "0x11124C4", Offset = "0x11124C4", VA = "0x11124C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x1112098", Offset = "0x1112098", VA = "0x1112098")]
		[DebuggerHidden]
		public <PerformChangeState>c__Iterator1()
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0x1112158", Offset = "0x1112158", VA = "0x1112158", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0x11124CC", Offset = "0x11124CC", VA = "0x11124CC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0x11124E0", Offset = "0x11124E0", VA = "0x11124E0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleFSMState currentState;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Type lastState;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Type nextState;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Type, SimpleFSMState> _states;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool inTransitionOrNotReady;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool alive;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleFSMState initialState;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Coroutine currentChangeRoutine;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine currentExitRoutine;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine currentEnterRoutine;

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x1111D90", Offset = "0x1111D90", VA = "0x1111D90")]
	public SimpleFSM(SimpleFSMState _initialState)
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x1111EB0", Offset = "0x1111EB0", VA = "0x1111EB0")]
	[DebuggerHidden]
	public IEnumerator StartFSM()
	{
		return null;
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x1111F24", Offset = "0x1111F24", VA = "0x1111F24")]
	public void StopFSM()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x1111E28", Offset = "0x1111E28", VA = "0x1111E28")]
	public void AddState(SimpleFSMState stateToAdd)
	{
	}

	[Token(Token = "0x6000648")]
	public void ChangeState<R>() where R : SimpleFSMState
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x1111F68", Offset = "0x1111F68", VA = "0x1111F68")]
	public void ChangeState(SimpleFSMState newState)
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x111200C", Offset = "0x111200C", VA = "0x111200C")]
	[DebuggerHidden]
	public IEnumerator PerformChangeState(SimpleFSMState newState)
	{
		return null;
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x110AE0C", Offset = "0x110AE0C", VA = "0x110AE0C")]
	public void UpdateState()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x11120A0", Offset = "0x11120A0", VA = "0x11120A0")]
	public void LateUpdateState()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x11120C4", Offset = "0x11120C4", VA = "0x11120C4")]
	public void FixedUpdateState()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x11120E8", Offset = "0x11120E8", VA = "0x11120E8")]
	public void OnCollisionEnterState(Collision col)
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x1112120", Offset = "0x1112120", VA = "0x1112120")]
	public void OnTriggerEnterState(Collider col)
	{
	}
}
[Token(Token = "0x200011D")]
public abstract class SimpleFSMState
{
	[Token(Token = "0x200056D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BB10", Offset = "0x56BB10")]
	private sealed class <Begin>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700047B")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002334")]
			[Address(RVA = "0x111284C", Offset = "0x111284C", VA = "0x111284C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002335")]
			[Address(RVA = "0x1112854", Offset = "0x1112854", VA = "0x1112854", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0x1112760", Offset = "0x1112760", VA = "0x1112760")]
		[DebuggerHidden]
		public <Begin>c__Iterator0()
		{
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0x11127EC", Offset = "0x11127EC", VA = "0x11127EC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x111285C", Offset = "0x111285C", VA = "0x111285C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0x1112870", Offset = "0x1112870", VA = "0x1112870", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200056E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BB70", Offset = "0x56BB70")]
	private sealed class <Exit>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700047D")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600233A")]
			[Address(RVA = "0x1112934", Offset = "0x1112934", VA = "0x1112934", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600233B")]
			[Address(RVA = "0x111293C", Offset = "0x111293C", VA = "0x111293C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0x11127C4", Offset = "0x11127C4", VA = "0x11127C4")]
		[DebuggerHidden]
		public <Exit>c__Iterator1()
		{
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0x11128D4", Offset = "0x11128D4", VA = "0x11128D4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0x1112944", Offset = "0x1112944", VA = "0x1112944", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0x1112958", Offset = "0x1112958", VA = "0x1112958", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleFSMStateController cntrl;

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x110F93C", Offset = "0x110F93C", VA = "0x110F93C")]
	public SimpleFSMState(SimpleFSMStateController controller)
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x1112704", Offset = "0x1112704", VA = "0x1112704", Slot = "4")]
	[DebuggerHidden]
	public virtual IEnumerator Begin()
	{
		return null;
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x1112768", Offset = "0x1112768", VA = "0x1112768", Slot = "5")]
	[DebuggerHidden]
	public virtual IEnumerator Exit()
	{
		return null;
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x11127CC", Offset = "0x11127CC", VA = "0x11127CC", Slot = "6")]
	public virtual void Setup()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x11127D0", Offset = "0x11127D0", VA = "0x11127D0", Slot = "7")]
	public virtual void Reason()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x11127D4", Offset = "0x11127D4", VA = "0x11127D4", Slot = "8")]
	public virtual void DoUpdate()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x11127D8", Offset = "0x11127D8", VA = "0x11127D8", Slot = "9")]
	public virtual void DoFixedUpdate()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x11127DC", Offset = "0x11127DC", VA = "0x11127DC", Slot = "10")]
	public virtual void DoLateUpdate()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x11127E0", Offset = "0x11127E0", VA = "0x11127E0", Slot = "11")]
	public virtual void UpdateAnimator()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x11127E4", Offset = "0x11127E4", VA = "0x11127E4", Slot = "12")]
	public virtual void OnCollisionState(Collision col)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x11127E8", Offset = "0x11127E8", VA = "0x11127E8", Slot = "13")]
	public virtual void OnTriggerEnterState(Collider col)
	{
	}
}
[Token(Token = "0x200011E")]
public class SimpleFSMStateController : MonoBehaviour
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string currentState;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SimpleFSM StateMachine;

	[Token(Token = "0x17000041")]
	public SimpleFSMState CurrentState
	{
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x110FAB0", Offset = "0x110FAB0", VA = "0x110FAB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x11129BC", Offset = "0x11129BC", VA = "0x11129BC")]
		private set
		{
		}
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x110A32C", Offset = "0x110A32C", VA = "0x110A32C")]
	public SimpleFSMStateController()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x110A94C", Offset = "0x110A94C", VA = "0x110A94C")]
	protected void CreateFSM(SimpleFSMState[] stateArray)
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x110AA40", Offset = "0x110AA40", VA = "0x110AA40")]
	public void StartFSM()
	{
	}

	[Token(Token = "0x6000660")]
	public void ChangeState<R>() where R : SimpleFSMState
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x11129C0", Offset = "0x11129C0", VA = "0x11129C0")]
	public void StopFSM()
	{
	}
}
[Token(Token = "0x200011F")]
public class SimpleFSMSubState : MonoBehaviour
{
	[Token(Token = "0x6000662")]
	[Address(RVA = "0x11129F4", Offset = "0x11129F4", VA = "0x11129F4")]
	public SimpleFSMSubState()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x11129FC", Offset = "0x11129FC", VA = "0x11129FC")]
	public void EnterState()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x1112A00", Offset = "0x1112A00", VA = "0x1112A00")]
	public void UpdateState()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x1112A04", Offset = "0x1112A04", VA = "0x1112A04")]
	public void ExitState()
	{
	}
}
[Token(Token = "0x2000120")]
public class OverlayManager : MonoBehaviour
{
	[Token(Token = "0x200056F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BBF0", Offset = "0x56BBF0")]
	private sealed class <FadeRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <completion>__0;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int index;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float <startValue>__0;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float endValue;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float duration;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal OverlayManager $this;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal object $current;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool $disposing;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int $PC;

		[Token(Token = "0x1700047F")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002340")]
			[Address(RVA = "0x113B5A8", Offset = "0x113B5A8", VA = "0x113B5A8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000480")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002341")]
			[Address(RVA = "0x113B5B0", Offset = "0x113B5B0", VA = "0x113B5B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0x113B36C", Offset = "0x113B36C", VA = "0x113B36C")]
		[DebuggerHidden]
		public <FadeRoutine>c__Iterator0()
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0x113B374", Offset = "0x113B374", VA = "0x113B374", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0x113B5B8", Offset = "0x113B5B8", VA = "0x113B5B8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0x113B5CC", Offset = "0x113B5CC", VA = "0x113B5CC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static OverlayManager Instance;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OverlaySphere[] SphereArray;

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x113AEB8", Offset = "0x113AEB8", VA = "0x113AEB8")]
	public OverlayManager()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x113AEC0", Offset = "0x113AEC0", VA = "0x113AEC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x113AF60", Offset = "0x113AF60", VA = "0x113AF60")]
	public void SetSphere(int index, float value)
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x113B1B8", Offset = "0x113B1B8", VA = "0x113B1B8")]
	public void FadeInSphere(int index)
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x113B29C", Offset = "0x113B29C", VA = "0x113B29C")]
	public void FadeOutSphere(int index)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x113B2D0", Offset = "0x113B2D0", VA = "0x113B2D0")]
	public void FadeInSphereInstant(int index)
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x113B304", Offset = "0x113B304", VA = "0x113B304")]
	public void FadeInSphereDuration(int index, float duration)
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x113B338", Offset = "0x113B338", VA = "0x113B338")]
	public void FadeOutSphereInstant(int index)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x113B1EC", Offset = "0x113B1EC", VA = "0x113B1EC")]
	[DebuggerHidden]
	public IEnumerator FadeRoutine(int index, float endValue, float duration)
	{
		return null;
	}
}
[Token(Token = "0x2000121")]
public class OverlaySphere : MonoBehaviour
{
	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject SphereGameObject;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ExternalOverlayObject;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer CachedRenderer;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string alphaParameter;

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x113B630", Offset = "0x113B630", VA = "0x113B630")]
	public OverlaySphere()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x113B688", Offset = "0x113B688", VA = "0x113B688")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x113B558", Offset = "0x113B558", VA = "0x113B558")]
	public float CurrentAlpha()
	{
		return default(float);
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x113AFD0", Offset = "0x113AFD0", VA = "0x113AFD0")]
	public void SetAlpha(float value)
	{
	}
}
namespace Klak.MaterialExtension
{
	[Token(Token = "0x2000122")]
	internal static class MaterialSetterExtension
	{
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x64C984", Offset = "0x64C984", VA = "0x64C984")]
		public static Material Property(this Material m, string name, float x)
		{
			return null;
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x64C9D0", Offset = "0x64C9D0", VA = "0x64C9D0")]
		public static Material Property(this Material m, string name, float x, float y)
		{
			return null;
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x64CAC0", Offset = "0x64CAC0", VA = "0x64CAC0")]
		public static Material Property(this Material m, string name, float x, float y, float z)
		{
			return null;
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x64CBC0", Offset = "0x64CBC0", VA = "0x64CBC0")]
		public static Material Property(this Material m, string name, float x, float y, float z, float w)
		{
			return null;
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x64CC18", Offset = "0x64CC18", VA = "0x64CC18")]
		public static Material Property(this Material m, string name, Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x64CCEC", Offset = "0x64CCEC", VA = "0x64CCEC")]
		public static Material Property(this Material m, string name, Vector3 v)
		{
			return null;
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x64CDC8", Offset = "0x64CDC8", VA = "0x64CDC8")]
		public static Material Property(this Material m, string name, Vector4 v)
		{
			return null;
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x64CE34", Offset = "0x64CE34", VA = "0x64CE34")]
		public static Material Property(this Material m, string name, Color color)
		{
			return null;
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x64CEA0", Offset = "0x64CEA0", VA = "0x64CEA0")]
		public static Material Property(this Material m, string name, Texture texture)
		{
			return null;
		}
	}
	[Token(Token = "0x2000123")]
	internal static class MaterialPropertySetterExtension
	{
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x64C41C", Offset = "0x64C41C", VA = "0x64C41C")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, float x)
		{
			return null;
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x64C468", Offset = "0x64C468", VA = "0x64C468")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, float x, float y)
		{
			return null;
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x64C558", Offset = "0x64C558", VA = "0x64C558")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, float x, float y, float z)
		{
			return null;
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x64C658", Offset = "0x64C658", VA = "0x64C658")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, float x, float y, float z, float w)
		{
			return null;
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x64C6B0", Offset = "0x64C6B0", VA = "0x64C6B0")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x64C784", Offset = "0x64C784", VA = "0x64C784")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, Vector3 v)
		{
			return null;
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x64C860", Offset = "0x64C860", VA = "0x64C860")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, Vector4 v)
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x64C8CC", Offset = "0x64C8CC", VA = "0x64C8CC")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, Color color)
		{
			return null;
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x64C938", Offset = "0x64C938", VA = "0x64C938")]
		public static MaterialPropertyBlock Property(this MaterialPropertyBlock m, string name, Texture texture)
		{
			return null;
		}
	}
}
namespace Klak.VectorMathExtension
{
	[Token(Token = "0x2000124")]
	internal static class Vector4Extension
	{
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x67D7EC", Offset = "0x67D7EC", VA = "0x67D7EC")]
		public static Quaternion ToQuaternion(this Vector4 v)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x67D264", Offset = "0x67D264", VA = "0x67D264")]
		public static Quaternion ToNormalizedQuaternion(this Vector4 v)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000125")]
	internal static class QuaternionExtension
	{
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x67D238", Offset = "0x67D238", VA = "0x67D238")]
		public static Vector4 ToVector4(this Quaternion q)
		{
			return default(Vector4);
		}
	}
}
namespace Klak.Math
{
	[Token(Token = "0x2000126")]
	internal static class BasicMath
	{
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x64CEEC", Offset = "0x64CEEC", VA = "0x64CEEC")]
		public static float Lerp(float a, float b, float mix)
		{
			return default(float);
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x64CF04", Offset = "0x64CF04", VA = "0x64CF04")]
		public static Vector3 Lerp(Vector3 a, Vector3 b, float mix)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000127")]
	public struct FloatInterpolator
	{
		[Serializable]
		[Token(Token = "0x2000128")]
		public class Config
		{
			[Token(Token = "0x2000129")]
			public enum InterpolationType
			{
				[Token(Token = "0x4000589")]
				Direct,
				[Token(Token = "0x400058A")]
				Exponential,
				[Token(Token = "0x400058B")]
				DampedSpring
			}

			[Token(Token = "0x4000586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private InterpolationType _interpolationType;

			[Token(Token = "0x4000587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56BF04", Offset = "0x56BF04")]
			private float _interpolationSpeed;

			[Token(Token = "0x17000045")]
			public InterpolationType interpolationType
			{
				[Token(Token = "0x6000694")]
				[Address(RVA = "0x679E20", Offset = "0x679E20", VA = "0x679E20")]
				get
				{
					return default(InterpolationType);
				}
				[Token(Token = "0x6000695")]
				[Address(RVA = "0x679E28", Offset = "0x679E28", VA = "0x679E28")]
				set
				{
				}
			}

			[Token(Token = "0x17000046")]
			public bool enabled
			{
				[Token(Token = "0x6000696")]
				[Address(RVA = "0x679E30", Offset = "0x679E30", VA = "0x679E30")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000047")]
			public float interpolationSpeed
			{
				[Token(Token = "0x6000697")]
				[Address(RVA = "0x679E40", Offset = "0x679E40", VA = "0x679E40")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000698")]
				[Address(RVA = "0x679E48", Offset = "0x679E48", VA = "0x679E48")]
				set
				{
				}
			}

			[Token(Token = "0x6000693")]
			[Address(RVA = "0x679E0C", Offset = "0x679E0C", VA = "0x679E0C")]
			public Config()
			{
			}
		}

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float _velocity;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BDE0", Offset = "0x56BDE0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56BDE0", Offset = "0x56BDE0")]
		private Config <config>k__BackingField;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BE1C", Offset = "0x56BE1C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56BE1C", Offset = "0x56BE1C")]
		private float <currentValue>k__BackingField;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BE58", Offset = "0x56BE58")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56BE58", Offset = "0x56BE58")]
		private float <targetValue>k__BackingField;

		[Token(Token = "0x17000042")]
		public Config config
		{
			[Token(Token = "0x600068B")]
			[Address(RVA = "0x64DF08", Offset = "0x64DF08", VA = "0x64DF08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BE94", Offset = "0x56BE94")]
			get
			{
				return null;
			}
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x64DF10", Offset = "0x64DF10", VA = "0x64DF10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BEA4", Offset = "0x56BEA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public float currentValue
		{
			[Token(Token = "0x600068D")]
			[Address(RVA = "0x64DF18", Offset = "0x64DF18", VA = "0x64DF18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BEB4", Offset = "0x56BEB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600068E")]
			[Address(RVA = "0x64DF20", Offset = "0x64DF20", VA = "0x64DF20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BEC4", Offset = "0x56BEC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public float targetValue
		{
			[Token(Token = "0x600068F")]
			[Address(RVA = "0x64DF28", Offset = "0x64DF28", VA = "0x64DF28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BED4", Offset = "0x56BED4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000690")]
			[Address(RVA = "0x64DF30", Offset = "0x64DF30", VA = "0x64DF30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56BEE4", Offset = "0x56BEE4")]
			set
			{
			}
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x64DEF8", Offset = "0x64DEF8", VA = "0x64DEF8")]
		public FloatInterpolator(float initialValue, Config config)
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x64E050", Offset = "0x64E050", VA = "0x64E050")]
		public float Step(float targetValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x64E060", Offset = "0x64E060", VA = "0x64E060")]
		public float Step()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200012A")]
	internal struct NoiseGenerator
	{
		[Token(Token = "0x400058C")]
		private const float _fbmNorm = 1.3333334f;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private XXHash _hash1;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private XXHash _hash2;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private XXHash _hash3;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _fractal;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _frequency;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float _time;

		[Token(Token = "0x17000048")]
		public int FractalLevel
		{
			[Token(Token = "0x600069B")]
			[Address(RVA = "0x679F74", Offset = "0x679F74", VA = "0x679F74")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600069C")]
			[Address(RVA = "0x679F7C", Offset = "0x679F7C", VA = "0x679F7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public float Frequency
		{
			[Token(Token = "0x600069D")]
			[Address(RVA = "0x679F84", Offset = "0x679F84", VA = "0x679F84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600069E")]
			[Address(RVA = "0x679F8C", Offset = "0x679F8C", VA = "0x679F8C")]
			set
			{
			}
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x679F38", Offset = "0x679F38", VA = "0x679F38")]
		public NoiseGenerator(float frequency)
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x679F40", Offset = "0x679F40", VA = "0x679F40")]
		public NoiseGenerator(int seed, float frequency)
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x679F94", Offset = "0x679F94", VA = "0x679F94")]
		public void Step()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x67A1C4", Offset = "0x67A1C4", VA = "0x67A1C4")]
		public float Value01(int seed2)
		{
			return default(float);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x67A280", Offset = "0x67A280", VA = "0x67A280")]
		public float Value(int seed2)
		{
			return default(float);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x67A3D4", Offset = "0x67A3D4", VA = "0x67A3D4")]
		public Vector3 Vector(int seed2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x67A544", Offset = "0x67A544", VA = "0x67A544")]
		public Quaternion Rotation(int seed2, float angle)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x67A6C4", Offset = "0x67A6C4", VA = "0x67A6C4")]
		public Quaternion Rotation(int seed2, float rx, float ry, float rz)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x200012B")]
	public static class Perlin
	{
		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] perm;

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x67A6CC", Offset = "0x67A6CC", VA = "0x67A6CC")]
		public static float Noise(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x67A894", Offset = "0x67A894", VA = "0x67A894")]
		public static float Noise(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x67AC48", Offset = "0x67AC48", VA = "0x67AC48")]
		public static float Noise(Vector2 coord)
		{
			return default(float);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x67ACBC", Offset = "0x67ACBC", VA = "0x67ACBC")]
		public static float Noise(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x67B540", Offset = "0x67B540", VA = "0x67B540")]
		public static float Noise(Vector3 coord)
		{
			return default(float);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x67A118", Offset = "0x67A118", VA = "0x67A118")]
		public static float Fbm(float x, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x67B5C4", Offset = "0x67B5C4", VA = "0x67B5C4")]
		public static float Fbm(Vector2 coord, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x67B6D0", Offset = "0x67B6D0", VA = "0x67B6D0")]
		public static float Fbm(float x, float y, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x67B76C", Offset = "0x67B76C", VA = "0x67B76C")]
		public static float Fbm(Vector3 coord, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x67B888", Offset = "0x67B888", VA = "0x67B888")]
		public static float Fbm(float x, float y, float z, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x67A848", Offset = "0x67A848", VA = "0x67A848")]
		private static float Fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x67A884", Offset = "0x67A884", VA = "0x67A884")]
		private static float Lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x67A874", Offset = "0x67A874", VA = "0x67A874")]
		private static float Grad(int hash, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x67AC28", Offset = "0x67AC28", VA = "0x67AC28")]
		private static float Grad(int hash, float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x67B4F8", Offset = "0x67B4F8", VA = "0x67B4F8")]
		private static float Grad(int hash, float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200012C")]
	internal static class ETween
	{
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x64DAD0", Offset = "0x64DAD0", VA = "0x64DAD0")]
		public static float Step(float current, float target, float omega)
		{
			return default(float);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x64DB74", Offset = "0x64DB74", VA = "0x64DB74")]
		public static float StepAngle(float current, float target, float omega)
		{
			return default(float);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x64DC24", Offset = "0x64DC24", VA = "0x64DC24")]
		public static Vector3 Step(Vector3 current, Vector3 target, float omega)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x64DD1C", Offset = "0x64DD1C", VA = "0x64DD1C")]
		public static Quaternion Step(Quaternion current, Quaternion target, float omega)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x200012D")]
	internal struct DTween
	{
		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float position;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float velocity;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float omega;

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x64D004", Offset = "0x64D004", VA = "0x64D004")]
		public DTween(float position, float omega)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x64D014", Offset = "0x64D014", VA = "0x64D014")]
		public static float Step(float current, float target, ref float velocity, float omega)
		{
			return default(float);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x64D090", Offset = "0x64D090", VA = "0x64D090")]
		public static Vector2 Step(Vector2 current, Vector2 target, ref Vector2 velocity, float omega)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x64D1C4", Offset = "0x64D1C4", VA = "0x64D1C4")]
		public static Vector3 Step(Vector3 current, Vector3 target, ref Vector3 velocity, float omega)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x64D324", Offset = "0x64D324", VA = "0x64D324")]
		public static Vector4 Step(Vector4 current, Vector4 target, ref Vector4 velocity, float omega)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x64D4A0", Offset = "0x64D4A0", VA = "0x64D4A0")]
		public static Quaternion Step(Quaternion current, Quaternion target, ref Vector4 velocity, float omega)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x64D720", Offset = "0x64D720", VA = "0x64D720")]
		public void Step(float target)
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x64D79C", Offset = "0x64D79C", VA = "0x64D79C")]
		public static implicit operator float(DTween m)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200012E")]
	internal struct DTweenVector2
	{
		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 position;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 velocity;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float omega;

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x64D96C", Offset = "0x64D96C", VA = "0x64D96C")]
		public DTweenVector2(Vector2 position, float omega)
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x64D974", Offset = "0x64D974", VA = "0x64D974")]
		public void Step(Vector2 target)
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x64D9BC", Offset = "0x64D9BC", VA = "0x64D9BC")]
		public static implicit operator Vector2(DTweenVector2 m)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x200012F")]
	internal struct DTweenVector3
	{
		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 velocity;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float omega;

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x64DA60", Offset = "0x64DA60", VA = "0x64DA60")]
		public DTweenVector3(Vector3 position, float omega)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x64DA68", Offset = "0x64DA68", VA = "0x64DA68")]
		public void Step(Vector3 target)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x64DAC4", Offset = "0x64DAC4", VA = "0x64DAC4")]
		public static implicit operator Vector3(DTweenVector3 m)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000130")]
	internal struct DTweenQuaternion
	{
		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Quaternion rotation;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector4 velocity;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float omega;

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x64D84C", Offset = "0x64D84C", VA = "0x64D84C")]
		public DTweenQuaternion(Quaternion rotation, float omega)
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x64D8C4", Offset = "0x64D8C4", VA = "0x64D8C4")]
		public void Step(Quaternion target)
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x64D8CC", Offset = "0x64D8CC", VA = "0x64D8CC")]
		public static implicit operator Quaternion(DTweenQuaternion m)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000131")]
	public struct XXHash
	{
		[Token(Token = "0x40005A0")]
		private const uint PRIME32_1 = 2654435761u;

		[Token(Token = "0x40005A1")]
		private const uint PRIME32_2 = 2246822519u;

		[Token(Token = "0x40005A2")]
		private const uint PRIME32_3 = 3266489917u;

		[Token(Token = "0x40005A3")]
		private const uint PRIME32_4 = 668265263u;

		[Token(Token = "0x40005A4")]
		private const uint PRIME32_5 = 374761393u;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _counter;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int seed;

		[Token(Token = "0x1700004A")]
		public static XXHash RandomHash
		{
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x679EA0", Offset = "0x679EA0", VA = "0x679EA0")]
			get
			{
				return default(XXHash);
			}
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x67B9CC", Offset = "0x67B9CC", VA = "0x67B9CC")]
		public XXHash(int seed)
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x67B9D4", Offset = "0x67B9D4", VA = "0x67B9D4")]
		private static uint rotl32(uint x, int r)
		{
			return default(uint);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x67B9E4", Offset = "0x67B9E4", VA = "0x67B9E4")]
		public static uint GetHash(int data, int seed)
		{
			return default(uint);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x67BA2C", Offset = "0x67BA2C", VA = "0x67BA2C")]
		public uint GetHash(int data)
		{
			return default(uint);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x67BA78", Offset = "0x67BA78", VA = "0x67BA78")]
		public int Range(int max, int data)
		{
			return default(int);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x67BACC", Offset = "0x67BACC", VA = "0x67BACC")]
		public int Range(int min, int max, int data)
		{
			return default(int);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x67BB28", Offset = "0x67BB28", VA = "0x67BB28")]
		public float Value01(int data)
		{
			return default(float);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x67BB88", Offset = "0x67BB88", VA = "0x67BB88")]
		public float Range(float min, float max, int data)
		{
			return default(float);
		}
	}
}
namespace Klak.Motion
{
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56BF4C", Offset = "0x56BF4C")]
	public class BrownianMotion : MonoBehaviour
	{
		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _enablePositionNoise;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool _enableRotationNoise;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _positionFrequency;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _rotationFrequency;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _positionAmplitude;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _rotationAmplitude;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Vector3 _positionScale;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Vector3 _rotationScale;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C004", Offset = "0x56C004")]
		private int _positionFractalLevel;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C044", Offset = "0x56C044")]
		private int _rotationFractalLevel;

		[Token(Token = "0x40005B1")]
		private const float _fbmNorm = 1.3333334f;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _initialPosition;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion _initialRotation;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] _time;

		[Token(Token = "0x1700004B")]
		public bool enablePositionNoise
		{
			[Token(Token = "0x60006D4")]
			[Address(RVA = "0x67BC68", Offset = "0x67BC68", VA = "0x67BC68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006D5")]
			[Address(RVA = "0x67BC70", Offset = "0x67BC70", VA = "0x67BC70")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public bool enableRotationNoise
		{
			[Token(Token = "0x60006D6")]
			[Address(RVA = "0x67BC7C", Offset = "0x67BC7C", VA = "0x67BC7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006D7")]
			[Address(RVA = "0x67BC84", Offset = "0x67BC84", VA = "0x67BC84")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public float positionFrequency
		{
			[Token(Token = "0x60006D8")]
			[Address(RVA = "0x67BC90", Offset = "0x67BC90", VA = "0x67BC90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006D9")]
			[Address(RVA = "0x67BC98", Offset = "0x67BC98", VA = "0x67BC98")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public float rotationFrequency
		{
			[Token(Token = "0x60006DA")]
			[Address(RVA = "0x67BCA0", Offset = "0x67BCA0", VA = "0x67BCA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006DB")]
			[Address(RVA = "0x67BCA8", Offset = "0x67BCA8", VA = "0x67BCA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public float positionAmplitude
		{
			[Token(Token = "0x60006DC")]
			[Address(RVA = "0x67BCB0", Offset = "0x67BCB0", VA = "0x67BCB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006DD")]
			[Address(RVA = "0x67BCB8", Offset = "0x67BCB8", VA = "0x67BCB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public float rotationAmplitude
		{
			[Token(Token = "0x60006DE")]
			[Address(RVA = "0x67BCC0", Offset = "0x67BCC0", VA = "0x67BCC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006DF")]
			[Address(RVA = "0x67BCC8", Offset = "0x67BCC8", VA = "0x67BCC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public Vector3 positionScale
		{
			[Token(Token = "0x60006E0")]
			[Address(RVA = "0x67BCD0", Offset = "0x67BCD0", VA = "0x67BCD0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0x67BCDC", Offset = "0x67BCDC", VA = "0x67BCDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000052")]
		public Vector3 rotationScale
		{
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0x67BCE8", Offset = "0x67BCE8", VA = "0x67BCE8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006E3")]
			[Address(RVA = "0x67BCF4", Offset = "0x67BCF4", VA = "0x67BCF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public int positionFractalLevel
		{
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0x67BD00", Offset = "0x67BD00", VA = "0x67BD00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0x67BD08", Offset = "0x67BD08", VA = "0x67BD08")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public int rotationFractalLevel
		{
			[Token(Token = "0x60006E6")]
			[Address(RVA = "0x67BD10", Offset = "0x67BD10", VA = "0x67BD10")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0x67BD18", Offset = "0x67BD18", VA = "0x67BD18")]
			set
			{
			}
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x67BB90", Offset = "0x67BB90", VA = "0x67BB90")]
		public BrownianMotion()
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x67BD20", Offset = "0x67BD20", VA = "0x67BD20")]
		private void Start()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x67BE04", Offset = "0x67BE04", VA = "0x67BE04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x67BE74", Offset = "0x67BE74", VA = "0x67BE74")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C084", Offset = "0x56C084")]
	public class ConstantMotion : MonoBehaviour
	{
		[Token(Token = "0x2000134")]
		public enum TranslationMode
		{
			[Token(Token = "0x40005BF")]
			Off,
			[Token(Token = "0x40005C0")]
			XAxis,
			[Token(Token = "0x40005C1")]
			YAxis,
			[Token(Token = "0x40005C2")]
			ZAxis,
			[Token(Token = "0x40005C3")]
			Vector,
			[Token(Token = "0x40005C4")]
			Random
		}

		[Token(Token = "0x2000135")]
		public enum RotationMode
		{
			[Token(Token = "0x40005C6")]
			Off,
			[Token(Token = "0x40005C7")]
			XAxis,
			[Token(Token = "0x40005C8")]
			YAxis,
			[Token(Token = "0x40005C9")]
			ZAxis,
			[Token(Token = "0x40005CA")]
			Vector,
			[Token(Token = "0x40005CB")]
			Random
		}

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TranslationMode _translationMode;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector3 _translationVector;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _translationSpeed;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private RotationMode _rotationMode;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3 _rotationAxis;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _rotationSpeed;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool _useLocalCoordinate;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _randomVectorT;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 _randomVectorR;

		[Token(Token = "0x17000055")]
		public TranslationMode translationMode
		{
			[Token(Token = "0x60006EC")]
			[Address(RVA = "0x67C404", Offset = "0x67C404", VA = "0x67C404")]
			get
			{
				return default(TranslationMode);
			}
			[Token(Token = "0x60006ED")]
			[Address(RVA = "0x67C40C", Offset = "0x67C40C", VA = "0x67C40C")]
			set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public Vector3 translationVector
		{
			[Token(Token = "0x60006EE")]
			[Address(RVA = "0x67C414", Offset = "0x67C414", VA = "0x67C414")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006EF")]
			[Address(RVA = "0x67C420", Offset = "0x67C420", VA = "0x67C420")]
			set
			{
			}
		}

		[Token(Token = "0x17000057")]
		public float translationSpeed
		{
			[Token(Token = "0x60006F0")]
			[Address(RVA = "0x67C42C", Offset = "0x67C42C", VA = "0x67C42C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006F1")]
			[Address(RVA = "0x67C434", Offset = "0x67C434", VA = "0x67C434")]
			set
			{
			}
		}

		[Token(Token = "0x17000058")]
		public RotationMode rotationMode
		{
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0x67C43C", Offset = "0x67C43C", VA = "0x67C43C")]
			get
			{
				return default(RotationMode);
			}
			[Token(Token = "0x60006F3")]
			[Address(RVA = "0x67C444", Offset = "0x67C444", VA = "0x67C444")]
			set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public Vector3 rotationAxis
		{
			[Token(Token = "0x60006F4")]
			[Address(RVA = "0x67C44C", Offset = "0x67C44C", VA = "0x67C44C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0x67C458", Offset = "0x67C458", VA = "0x67C458")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public float rotationSpeed
		{
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x67C464", Offset = "0x67C464", VA = "0x67C464")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x67C46C", Offset = "0x67C46C", VA = "0x67C46C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public bool useLocalCoordinate
		{
			[Token(Token = "0x60006F8")]
			[Address(RVA = "0x67C474", Offset = "0x67C474", VA = "0x67C474")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F9")]
			[Address(RVA = "0x67C47C", Offset = "0x67C47C", VA = "0x67C47C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		private Vector3 TranslationVector
		{
			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x67C488", Offset = "0x67C488", VA = "0x67C488")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700005D")]
		private Vector3 RotationVector
		{
			[Token(Token = "0x60006FB")]
			[Address(RVA = "0x67C5A0", Offset = "0x67C5A0", VA = "0x67C5A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x67C35C", Offset = "0x67C35C", VA = "0x67C35C")]
		public ConstantMotion()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x67C6B4", Offset = "0x67C6B4", VA = "0x67C6B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x67C6F8", Offset = "0x67C6F8", VA = "0x67C6F8")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C12C", Offset = "0x56C12C")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x2000137")]
		public enum Interpolator
		{
			[Token(Token = "0x40005D5")]
			Exponential,
			[Token(Token = "0x40005D6")]
			Spring,
			[Token(Token = "0x40005D7")]
			DampedSpring
		}

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Interpolator _interpolator;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _target;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C184", Offset = "0x56C184")]
		private float _positionSpeed;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C1C8", Offset = "0x56C1C8")]
		private float _rotationSpeed;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _jumpDistance;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C21C", Offset = "0x56C21C")]
		private float _jumpAngle;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 _vposition;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector4 _vrotation;

		[Token(Token = "0x1700005E")]
		public Interpolator interpolationType
		{
			[Token(Token = "0x60006FF")]
			[Address(RVA = "0x67CB24", Offset = "0x67CB24", VA = "0x67CB24")]
			get
			{
				return default(Interpolator);
			}
			[Token(Token = "0x6000700")]
			[Address(RVA = "0x67CB2C", Offset = "0x67CB2C", VA = "0x67CB2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public Transform target
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0x67CB34", Offset = "0x67CB34", VA = "0x67CB34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000702")]
			[Address(RVA = "0x67CB3C", Offset = "0x67CB3C", VA = "0x67CB3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public float positionSpeed
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0x67CB44", Offset = "0x67CB44", VA = "0x67CB44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000704")]
			[Address(RVA = "0x67CB4C", Offset = "0x67CB4C", VA = "0x67CB4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public float rotationSpeed
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0x67CB54", Offset = "0x67CB54", VA = "0x67CB54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000706")]
			[Address(RVA = "0x67CB5C", Offset = "0x67CB5C", VA = "0x67CB5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public float jumpDistance
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0x67CB64", Offset = "0x67CB64", VA = "0x67CB64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000708")]
			[Address(RVA = "0x67CB6C", Offset = "0x67CB6C", VA = "0x67CB6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public float jumpAngle
		{
			[Token(Token = "0x6000709")]
			[Address(RVA = "0x67CB74", Offset = "0x67CB74", VA = "0x67CB74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600070A")]
			[Address(RVA = "0x67CB7C", Offset = "0x67CB7C", VA = "0x67CB7C")]
			set
			{
			}
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x67CB08", Offset = "0x67CB08", VA = "0x67CB08")]
		public SmoothFollow()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x67CB84", Offset = "0x67CB84", VA = "0x67CB84")]
		public void JumpRandomly()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x67CDFC", Offset = "0x67CDFC", VA = "0x67CDFC")]
		private Vector3 SpringPosition(Vector3 current, Vector3 target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x67CFC0", Offset = "0x67CFC0", VA = "0x67CFC0")]
		private Quaternion SpringRotation(Quaternion current, Quaternion target)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x67D31C", Offset = "0x67D31C", VA = "0x67D31C")]
		private void Update()
		{
		}
	}
}
namespace Klak.System
{
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C260", Offset = "0x56C260")]
	public class GlobalConfig : MonoBehaviour
	{
		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _hideCursor;

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x67D7A8", Offset = "0x67D7A8", VA = "0x67D7A8")]
		public GlobalConfig()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x67D7B0", Offset = "0x67D7B0", VA = "0x67D7B0")]
		private void Start()
		{
		}
	}
}
namespace Klak.Wiring
{
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C2A8", Offset = "0x56C2A8")]
	public class ColorMap : MonoBehaviour
	{
		[Token(Token = "0x200013A")]
		public enum ColorMode
		{
			[Token(Token = "0x40005DE")]
			Gradient,
			[Token(Token = "0x40005DF")]
			ColorArray
		}

		[Serializable]
		[Token(Token = "0x200013B")]
		public class ColorEvent : UnityEvent<Color>
		{
			[Token(Token = "0x6000713")]
			[Address(RVA = "0x67DB4C", Offset = "0x67DB4C", VA = "0x67DB4C")]
			public ColorEvent()
			{
			}
		}

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ColorMode _colorMode;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Gradient _gradient;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x56C300", Offset = "0x56C300")]
		private Color[] _colorArray;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ColorEvent _colorEvent;

		[Token(Token = "0x17000064")]
		public float inputValue
		{
			[Token(Token = "0x6000712")]
			[Address(RVA = "0x67D934", Offset = "0x67D934", VA = "0x67D934")]
			set
			{
			}
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x67D818", Offset = "0x67D818", VA = "0x67D818")]
		public ColorMap()
		{
		}
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C360", Offset = "0x56C360")]
	public class EnvelopeGenerator : MonoBehaviour
	{
		[Token(Token = "0x200013D")]
		public enum InputMode
		{
			[Token(Token = "0x40005EB")]
			Trigger,
			[Token(Token = "0x40005EC")]
			Gate
		}

		[Serializable]
		[Token(Token = "0x200013E")]
		public class EnvelopeEvent : UnityEvent<float>
		{
			[Token(Token = "0x6000730")]
			[Address(RVA = "0x67E658", Offset = "0x67E658", VA = "0x67E658")]
			public EnvelopeEvent()
			{
			}
		}

		[Token(Token = "0x200013F")]
		private class Voice
		{
			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C520", Offset = "0x56C520")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56C520", Offset = "0x56C520")]
			private EnvelopeEvent <Event>k__BackingField;

			[Token(Token = "0x40005EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C55C", Offset = "0x56C55C")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56C55C", Offset = "0x56C55C")]
			private int <NoteNumber>k__BackingField;

			[Token(Token = "0x40005EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C598", Offset = "0x56C598")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56C598", Offset = "0x56C598")]
			private float <Velocity>k__BackingField;

			[Token(Token = "0x40005F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C5D4", Offset = "0x56C5D4")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56C5D4", Offset = "0x56C5D4")]
			private float <CurrentTime>k__BackingField;

			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C610", Offset = "0x56C610")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56C610", Offset = "0x56C610")]
			private float <NoteOffTime>k__BackingField;

			[Token(Token = "0x1700006D")]
			public EnvelopeEvent Event
			{
				[Token(Token = "0x6000732")]
				[Address(RVA = "0x67E648", Offset = "0x67E648", VA = "0x67E648")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C64C", Offset = "0x56C64C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000733")]
				[Address(RVA = "0x67E6A8", Offset = "0x67E6A8", VA = "0x67E6A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C65C", Offset = "0x56C65C")]
				set
				{
				}
			}

			[Token(Token = "0x1700006E")]
			public int NoteNumber
			{
				[Token(Token = "0x6000734")]
				[Address(RVA = "0x67DF4C", Offset = "0x67DF4C", VA = "0x67DF4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C66C", Offset = "0x56C66C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000735")]
				[Address(RVA = "0x67E6B0", Offset = "0x67E6B0", VA = "0x67E6B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C67C", Offset = "0x56C67C")]
				set
				{
				}
			}

			[Token(Token = "0x1700006F")]
			public float Velocity
			{
				[Token(Token = "0x6000736")]
				[Address(RVA = "0x67E650", Offset = "0x67E650", VA = "0x67E650")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C68C", Offset = "0x56C68C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000737")]
				[Address(RVA = "0x67E6B8", Offset = "0x67E6B8", VA = "0x67E6B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C69C", Offset = "0x56C69C")]
				set
				{
				}
			}

			[Token(Token = "0x17000070")]
			public float CurrentTime
			{
				[Token(Token = "0x6000738")]
				[Address(RVA = "0x67E630", Offset = "0x67E630", VA = "0x67E630")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C6AC", Offset = "0x56C6AC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000739")]
				[Address(RVA = "0x67E638", Offset = "0x67E638", VA = "0x67E638")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C6BC", Offset = "0x56C6BC")]
				set
				{
				}
			}

			[Token(Token = "0x17000071")]
			public float NoteOffTime
			{
				[Token(Token = "0x600073A")]
				[Address(RVA = "0x67E640", Offset = "0x67E640", VA = "0x67E640")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C6CC", Offset = "0x56C6CC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600073B")]
				[Address(RVA = "0x67E6C0", Offset = "0x67E6C0", VA = "0x67E6C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56C6DC", Offset = "0x56C6DC")]
				set
				{
				}
			}

			[Token(Token = "0x17000072")]
			public bool Playing
			{
				[Token(Token = "0x600073C")]
				[Address(RVA = "0x67DDF8", Offset = "0x67DDF8", VA = "0x67DDF8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000731")]
			[Address(RVA = "0x67E3A8", Offset = "0x67E3A8", VA = "0x67E3A8")]
			public Voice(EnvelopeEvent e)
			{
			}

			[Token(Token = "0x600073D")]
			[Address(RVA = "0x67DD1C", Offset = "0x67DD1C", VA = "0x67DD1C")]
			public void Trigger(float velocity)
			{
			}

			[Token(Token = "0x600073E")]
			[Address(RVA = "0x67DE14", Offset = "0x67DE14", VA = "0x67DE14")]
			public void NoteOn(int note, float velocity)
			{
			}

			[Token(Token = "0x600073F")]
			[Address(RVA = "0x67DE08", Offset = "0x67DE08", VA = "0x67DE08")]
			public void NoteOff()
			{
			}
		}

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InputMode _inputMode;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C3A8", Offset = "0x56C3A8")]
		private float _attackTime;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C3E8", Offset = "0x56C3E8")]
		private float _decayTime;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C42C", Offset = "0x56C42C")]
		private float _sustainLevel;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C46C", Offset = "0x56C46C")]
		private float _releaseTime;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56C4B0", Offset = "0x56C4B0")]
		private float _exponent;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _amplitude;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float _bias;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private EnvelopeEvent[] _envelopeEvents;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Queue<Voice> _voices;

		[Token(Token = "0x17000065")]
		public InputMode signalMode
		{
			[Token(Token = "0x6000715")]
			[Address(RVA = "0x67DC1C", Offset = "0x67DC1C", VA = "0x67DC1C")]
			get
			{
				return default(InputMode);
			}
		}

		[Token(Token = "0x17000066")]
		public float attackTime
		{
			[Token(Token = "0x6000716")]
			[Address(RVA = "0x67DC24", Offset = "0x67DC24", VA = "0x67DC24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000717")]
			[Address(RVA = "0x67DC2C", Offset = "0x67DC2C", VA = "0x67DC2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public float decayTime
		{
			[Token(Token = "0x6000718")]
			[Address(RVA = "0x67DC34", Offset = "0x67DC34", VA = "0x67DC34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000719")]
			[Address(RVA = "0x67DC3C", Offset = "0x67DC3C", VA = "0x67DC3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public float sustainLevel
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0x67DC44", Offset = "0x67DC44", VA = "0x67DC44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600071B")]
			[Address(RVA = "0x67DC4C", Offset = "0x67DC4C", VA = "0x67DC4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public float releaseTime
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0x67DC54", Offset = "0x67DC54", VA = "0x67DC54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600071D")]
			[Address(RVA = "0x67DC5C", Offset = "0x67DC5C", VA = "0x67DC5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public float exponent
		{
			[Token(Token = "0x600071E")]
			[Address(RVA = "0x67DC64", Offset = "0x67DC64", VA = "0x67DC64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600071F")]
			[Address(RVA = "0x67DC6C", Offset = "0x67DC6C", VA = "0x67DC6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public float amplitude
		{
			[Token(Token = "0x6000720")]
			[Address(RVA = "0x67DC74", Offset = "0x67DC74", VA = "0x67DC74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000721")]
			[Address(RVA = "0x67DC7C", Offset = "0x67DC7C", VA = "0x67DC7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public float bias
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x67DC84", Offset = "0x67DC84", VA = "0x67DC84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000723")]
			[Address(RVA = "0x67DC8C", Offset = "0x67DC8C", VA = "0x67DC8C")]
			set
			{
			}
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x67DB9C", Offset = "0x67DB9C", VA = "0x67DB9C")]
		public EnvelopeGenerator()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x67DC94", Offset = "0x67DC94", VA = "0x67DC94")]
		public void Trigger()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x67DC9C", Offset = "0x67DC9C", VA = "0x67DC9C")]
		public void Trigger(float velocity)
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x67DD28", Offset = "0x67DD28", VA = "0x67DD28")]
		public void NoteOn(int note)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x67DD30", Offset = "0x67DD30", VA = "0x67DD30")]
		public void NoteOn(int note, float velocity)
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x67DE2C", Offset = "0x67DE2C", VA = "0x67DE2C")]
		public void NoteOff(int note)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x67DF54", Offset = "0x67DF54", VA = "0x67DF54")]
		public float GetLevelAtTime(float time, float noteLength)
		{
			return default(float);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x67E184", Offset = "0x67E184", VA = "0x67E184")]
		private float Exp(float level)
		{
			return default(float);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x67E010", Offset = "0x67E010", VA = "0x67E010")]
		private float ARCurve(float time)
		{
			return default(float);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x67E074", Offset = "0x67E074", VA = "0x67E074")]
		private float ADCurve(float time)
		{
			return default(float);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x67E160", Offset = "0x67E160", VA = "0x67E160")]
		private float RCurve(float time)
		{
			return default(float);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x67E1FC", Offset = "0x67E1FC", VA = "0x67E1FC")]
		private void Start()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x67E3E0", Offset = "0x67E3E0", VA = "0x67E3E0")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C6EC", Offset = "0x56C6EC")]
	public class KeyInput : MonoBehaviour
	{
		[Token(Token = "0x2000141")]
		public enum EventType
		{
			[Token(Token = "0x4000600")]
			Trigger,
			[Token(Token = "0x4000601")]
			Gate,
			[Token(Token = "0x4000602")]
			Toggle,
			[Token(Token = "0x4000603")]
			Value
		}

		[Serializable]
		[Token(Token = "0x2000142")]
		public class ValueEvent : UnityEvent<float>
		{
			[Token(Token = "0x6000745")]
			[Address(RVA = "0x67E96C", Offset = "0x67E96C", VA = "0x67E96C")]
			public ValueEvent()
			{
			}
		}

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventType _eventType;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private KeyCode _keyCode;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _offValue;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _onValue;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Klak.Math.FloatInterpolator.Config _interpolator;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEvent _triggerEvent;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEvent _keyDownEvent;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEvent _keyUpEvent;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEvent _toggleOnEvent;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEvent _toggleOffEvent;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private ValueEvent _valueEvent;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Klak.Math.FloatInterpolator _value;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _toggle;

		[Token(Token = "0x17000073")]
		private bool IsKeyDown
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0x67E6D8", Offset = "0x67E6D8", VA = "0x67E6D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000074")]
		private bool IsKeyUp
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0x67E748", Offset = "0x67E748", VA = "0x67E748")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x67E6C8", Offset = "0x67E6C8", VA = "0x67E6C8")]
		public KeyInput()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x67E7B8", Offset = "0x67E7B8", VA = "0x67E7B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x67E808", Offset = "0x67E808", VA = "0x67E808")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C7D4", Offset = "0x56C7D4")]
	public class MultiStateToggle : MonoBehaviour
	{
		[Token(Token = "0x2000144")]
		public enum EventType
		{
			[Token(Token = "0x400060C")]
			Trigger,
			[Token(Token = "0x400060D")]
			Value
		}

		[Serializable]
		[Token(Token = "0x2000145")]
		public class ValueEvent : UnityEvent<float>
		{
			[Token(Token = "0x600074F")]
			[Address(RVA = "0x67ED00", Offset = "0x67ED00", VA = "0x67ED00")]
			public ValueEvent()
			{
			}
		}

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventType _eventType;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Klak.Math.FloatInterpolator.Config _interpolator;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent[] _triggerEvents;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float[] _stateValues;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ValueEvent _valueEvent;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _state;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Klak.Math.FloatInterpolator _value;

		[Token(Token = "0x17000075")]
		public int stateCount
		{
			[Token(Token = "0x6000747")]
			[Address(RVA = "0x67EA4C", Offset = "0x67EA4C", VA = "0x67EA4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000076")]
		public int currentState
		{
			[Token(Token = "0x6000748")]
			[Address(RVA = "0x67EA8C", Offset = "0x67EA8C", VA = "0x67EA8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000749")]
			[Address(RVA = "0x67EA94", Offset = "0x67EA94", VA = "0x67EA94")]
			set
			{
			}
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x67E9BC", Offset = "0x67E9BC", VA = "0x67E9BC")]
		public MultiStateToggle()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x67EB90", Offset = "0x67EB90", VA = "0x67EB90")]
		public void Toggle()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x67EBC8", Offset = "0x67EBC8", VA = "0x67EBC8")]
		public void ResetState()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x67EB2C", Offset = "0x67EB2C", VA = "0x67EB2C")]
		private void SendTrigger()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x67EBD0", Offset = "0x67EBD0", VA = "0x67EBD0")]
		private void Start()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x67EC20", Offset = "0x67EC20", VA = "0x67EC20")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000146")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C85C", Offset = "0x56C85C")]
	public class SystemPropertyMap : MonoBehaviour
	{
		[Token(Token = "0x17000077")]
		public float timeScale
		{
			[Token(Token = "0x6000751")]
			[Address(RVA = "0x67ED58", Offset = "0x67ED58", VA = "0x67ED58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000752")]
			[Address(RVA = "0x67ED64", Offset = "0x67ED64", VA = "0x67ED64")]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public Vector3 gravity
		{
			[Token(Token = "0x6000753")]
			[Address(RVA = "0x67ED70", Offset = "0x67ED70", VA = "0x67ED70")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000754")]
			[Address(RVA = "0x67ED7C", Offset = "0x67ED7C", VA = "0x67ED7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public float ambientIntensity
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0x67ED88", Offset = "0x67ED88", VA = "0x67ED88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000756")]
			[Address(RVA = "0x67ED94", Offset = "0x67ED94", VA = "0x67ED94")]
			set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		public float reflectionIntensity
		{
			[Token(Token = "0x6000757")]
			[Address(RVA = "0x67EDA0", Offset = "0x67EDA0", VA = "0x67EDA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000758")]
			[Address(RVA = "0x67EDAC", Offset = "0x67EDAC", VA = "0x67EDAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public bool fog
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0x67EDB8", Offset = "0x67EDB8", VA = "0x67EDB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600075A")]
			[Address(RVA = "0x67EDC4", Offset = "0x67EDC4", VA = "0x67EDC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public Color fogColor
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0x67EDD4", Offset = "0x67EDD4", VA = "0x67EDD4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600075C")]
			[Address(RVA = "0x67EDE0", Offset = "0x67EDE0", VA = "0x67EDE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700007D")]
		public float fogDensity
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0x67EDEC", Offset = "0x67EDEC", VA = "0x67EDEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600075E")]
			[Address(RVA = "0x67EDF8", Offset = "0x67EDF8", VA = "0x67EDF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public float fogStartDistance
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0x67EE04", Offset = "0x67EE04", VA = "0x67EE04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000760")]
			[Address(RVA = "0x67EE10", Offset = "0x67EE10", VA = "0x67EE10")]
			set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public float fogEndDistance
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0x67EE1C", Offset = "0x67EE1C", VA = "0x67EE1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000762")]
			[Address(RVA = "0x67EE28", Offset = "0x67EE28", VA = "0x67EE28")]
			set
			{
			}
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x67ED50", Offset = "0x67ED50", VA = "0x67ED50")]
		public SystemPropertyMap()
		{
		}
	}
	[Token(Token = "0x2000147")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C894", Offset = "0x56C894")]
	public class ThresholdTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000148")]
		private enum State
		{
			[Token(Token = "0x4000616")]
			Dormant,
			[Token(Token = "0x4000617")]
			Enabled,
			[Token(Token = "0x4000618")]
			Disabled
		}

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _threshold;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _delayToOff;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent _onEvent;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent _offEvent;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private State _currentState;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _currentValue;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _delayTimer;

		[Token(Token = "0x17000080")]
		public float threshold
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0x67EE48", Offset = "0x67EE48", VA = "0x67EE48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000765")]
			[Address(RVA = "0x67EE50", Offset = "0x67EE50", VA = "0x67EE50")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public float offDelay
		{
			[Token(Token = "0x6000766")]
			[Address(RVA = "0x67EE58", Offset = "0x67EE58", VA = "0x67EE58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000767")]
			[Address(RVA = "0x67EE60", Offset = "0x67EE60", VA = "0x67EE60")]
			set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public float inputValue
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0x67EE68", Offset = "0x67EE68", VA = "0x67EE68")]
			set
			{
			}
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x67EE34", Offset = "0x67EE34", VA = "0x67EE34")]
		public ThresholdTrigger()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x67EE70", Offset = "0x67EE70", VA = "0x67EE70")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56C90C", Offset = "0x56C90C")]
	public class TransformMap : MonoBehaviour
	{
		[Token(Token = "0x200014A")]
		public enum TranslationMode
		{
			[Token(Token = "0x400062E")]
			Off,
			[Token(Token = "0x400062F")]
			XAxis,
			[Token(Token = "0x4000630")]
			YAxis,
			[Token(Token = "0x4000631")]
			ZAxis,
			[Token(Token = "0x4000632")]
			Vector,
			[Token(Token = "0x4000633")]
			Random
		}

		[Token(Token = "0x200014B")]
		public enum RotationMode
		{
			[Token(Token = "0x4000635")]
			Off,
			[Token(Token = "0x4000636")]
			XAxis,
			[Token(Token = "0x4000637")]
			YAxis,
			[Token(Token = "0x4000638")]
			ZAxis,
			[Token(Token = "0x4000639")]
			Vector,
			[Token(Token = "0x400063A")]
			Random
		}

		[Token(Token = "0x200014C")]
		public enum ScaleMode
		{
			[Token(Token = "0x400063C")]
			Off,
			[Token(Token = "0x400063D")]
			Uniform,
			[Token(Token = "0x400063E")]
			Vector,
			[Token(Token = "0x400063F")]
			Random
		}

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TranslationMode _translationMode;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector3 _translationVector;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _translationAmount0;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _translationAmount1;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private RotationMode _rotationMode;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector3 _rotationAxis;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float _rotationAngle0;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _rotationAngle1;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ScaleMode _scaleMode;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private Vector3 _scaleVector;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float _scaleAmount0;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float _scaleAmount1;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool _addToOriginal;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _originalPosition;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _originalScale;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 _randomVectorT;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _randomVectorR;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 _randomVectorS;

		[Token(Token = "0x17000083")]
		public TranslationMode translationMode
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0x67EFF0", Offset = "0x67EFF0", VA = "0x67EFF0")]
			get
			{
				return default(TranslationMode);
			}
			[Token(Token = "0x600076C")]
			[Address(RVA = "0x67EFF8", Offset = "0x67EFF8", VA = "0x67EFF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public Vector3 translationVector
		{
			[Token(Token = "0x600076D")]
			[Address(RVA = "0x67F000", Offset = "0x67F000", VA = "0x67F000")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600076E")]
			[Address(RVA = "0x67F00C", Offset = "0x67F00C", VA = "0x67F00C")]
			set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public float translationAmount0
		{
			[Token(Token = "0x600076F")]
			[Address(RVA = "0x67F018", Offset = "0x67F018", VA = "0x67F018")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000770")]
			[Address(RVA = "0x67F020", Offset = "0x67F020", VA = "0x67F020")]
			set
			{
			}
		}

		[Token(Token = "0x17000086")]
		public float translationAmount1
		{
			[Token(Token = "0x6000771")]
			[Address(RVA = "0x67F028", Offset = "0x67F028", VA = "0x67F028")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000772")]
			[Address(RVA = "0x67F030", Offset = "0x67F030", VA = "0x67F030")]
			set
			{
			}
		}

		[Token(Token = "0x17000087")]
		public RotationMode rotationMode
		{
			[Token(Token = "0x6000773")]
			[Address(RVA = "0x67F038", Offset = "0x67F038", VA = "0x67F038")]
			get
			{
				return default(RotationMode);
			}
			[Token(Token = "0x6000774")]
			[Address(RVA = "0x67F040", Offset = "0x67F040", VA = "0x67F040")]
			set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public Vector3 rotationAxis
		{
			[Token(Token = "0x6000775")]
			[Address(RVA = "0x67F048", Offset = "0x67F048", VA = "0x67F048")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000776")]
			[Address(RVA = "0x67F054", Offset = "0x67F054", VA = "0x67F054")]
			set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public float rotationAngle0
		{
			[Token(Token = "0x6000777")]
			[Address(RVA = "0x67F060", Offset = "0x67F060", VA = "0x67F060")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000778")]
			[Address(RVA = "0x67F068", Offset = "0x67F068", VA = "0x67F068")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public float rotationAngle1
		{
			[Token(Token = "0x6000779")]
			[Address(RVA = "0x67F070", Offset = "0x67F070", VA = "0x67F070")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600077A")]
			[Address(RVA = "0x67F078", Offset = "0x67F078", VA = "0x67F078")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public ScaleMode scaleMode
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0x67F080", Offset = "0x67F080", VA = "0x67F080")]
			get
			{
				return default(ScaleMode);
			}
			[Token(Token = "0x600077C")]
			[Address(RVA = "0x67F088", Offset = "0x67F088", VA = "0x67F088")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public Vector3 scaleVector
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0x67F090", Offset = "0x67F090", VA = "0x67F090")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600077E")]
			[Address(RVA = "0x67F09C", Offset = "0x67F09C", VA = "0x67F09C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public float scaleAmount0
		{
			[Token(Token = "0x600077F")]
			[Address(RVA = "0x67F0A8", Offset = "0x67F0A8", VA = "0x67F0A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000780")]
			[Address(RVA = "0x67F0B0", Offset = "0x67F0B0", VA = "0x67F0B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public float scaleAmount1
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0x67F0B8", Offset = "0x67F0B8", VA = "0x67F0B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000782")]
			[Address(RVA = "0x67F0C0", Offset = "0x67F0C0", VA = "0x67F0C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public Transform targetTransform
		{
			[Token(Token = "0x6000783")]
			[Address(RVA = "0x67F0C8", Offset = "0x67F0C8", VA = "0x67F0C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000784")]
			[Address(RVA = "0x67F0D0", Offset = "0x67F0D0", VA = "0x67F0D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public bool addToOriginal
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0x67F3A8", Offset = "0x67F3A8", VA = "0x67F3A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000786")]
			[Address(RVA = "0x67F3B0", Offset = "0x67F3B0", VA = "0x67F3B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public float inputValue
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0x67F3BC", Offset = "0x67F3BC", VA = "0x67F3BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		private Vector3 TranslationVector
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0x67F890", Offset = "0x67F890", VA = "0x67F890")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000093")]
		private Vector3 RotationAxis
		{
			[Token(Token = "0x6000789")]
			[Address(RVA = "0x67F9A8", Offset = "0x67F9A8", VA = "0x67F9A8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000094")]
		private Vector3 ScaleVector
		{
			[Token(Token = "0x600078A")]
			[Address(RVA = "0x67FAC0", Offset = "0x67FAC0", VA = "0x67FAC0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x67EF2C", Offset = "0x67EF2C", VA = "0x67EF2C")]
		public TransformMap()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x67F49C", Offset = "0x67F49C", VA = "0x67F49C")]
		private void UpdatePosition(float value)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x67F5E4", Offset = "0x67F5E4", VA = "0x67F5E4")]
		private void UpdateRotation(float value)
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x67F748", Offset = "0x67F748", VA = "0x67F748")]
		private void UpdateScale(float value)
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x67F2CC", Offset = "0x67F2CC", VA = "0x67F2CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x67F1A8", Offset = "0x67F1A8", VA = "0x67F1A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x67FB5C", Offset = "0x67FB5C", VA = "0x67FB5C")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56CA24", Offset = "0x56CA24")]
	public class ValueAnimation : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014E")]
		public class ValueEvent : UnityEvent<float>
		{
			[Token(Token = "0x600079E")]
			[Address(RVA = "0x67FF44", Offset = "0x67FF44", VA = "0x67FF44")]
			public ValueEvent()
			{
			}
		}

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AnimationCurve[] _animations;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _playOnStart;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _speed;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ValueEvent _valueEvent;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CA9C", Offset = "0x56CA9C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56CA9C", Offset = "0x56CA9C")]
		private bool <isPlaying>k__BackingField;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CAD8", Offset = "0x56CAD8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56CAD8", Offset = "0x56CAD8")]
		private float <time>k__BackingField;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _animationIndex;

		[Token(Token = "0x17000095")]
		public float speed
		{
			[Token(Token = "0x6000792")]
			[Address(RVA = "0x67FCF8", Offset = "0x67FCF8", VA = "0x67FCF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000793")]
			[Address(RVA = "0x67FD00", Offset = "0x67FD00", VA = "0x67FD00")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public bool isPlaying
		{
			[Token(Token = "0x6000794")]
			[Address(RVA = "0x67FD08", Offset = "0x67FD08", VA = "0x67FD08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CB14", Offset = "0x56CB14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000795")]
			[Address(RVA = "0x67FD10", Offset = "0x67FD10", VA = "0x67FD10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CB24", Offset = "0x56CB24")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public float time
		{
			[Token(Token = "0x6000796")]
			[Address(RVA = "0x67FD1C", Offset = "0x67FD1C", VA = "0x67FD1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CB34", Offset = "0x56CB34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000797")]
			[Address(RVA = "0x67FD24", Offset = "0x67FD24", VA = "0x67FD24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CB44", Offset = "0x56CB44")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		public int animationIndex
		{
			[Token(Token = "0x6000798")]
			[Address(RVA = "0x67FD2C", Offset = "0x67FD2C", VA = "0x67FD2C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x67FC0C", Offset = "0x67FC0C", VA = "0x67FC0C")]
		public ValueAnimation()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x67FD34", Offset = "0x67FD34", VA = "0x67FD34")]
		public void Play(int index)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x67FDD4", Offset = "0x67FDD4", VA = "0x67FDD4")]
		public void PlayNext()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x67FE24", Offset = "0x67FE24", VA = "0x67FE24")]
		public void TogglePlayState()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x67FE34", Offset = "0x67FE34", VA = "0x67FE34")]
		private void Start()
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x67FE40", Offset = "0x67FE40", VA = "0x67FE40")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56CB54", Offset = "0x56CB54")]
	public class ValueMap : MonoBehaviour
	{
		[Token(Token = "0x2000150")]
		public enum ModulationType
		{
			[Token(Token = "0x400065B")]
			Off,
			[Token(Token = "0x400065C")]
			Add,
			[Token(Token = "0x400065D")]
			Subtract,
			[Token(Token = "0x400065E")]
			Multiply,
			[Token(Token = "0x400065F")]
			Divide,
			[Token(Token = "0x4000660")]
			Minimum,
			[Token(Token = "0x4000661")]
			Maximum
		}

		[Token(Token = "0x2000151")]
		public enum OutputType
		{
			[Token(Token = "0x4000663")]
			Bool,
			[Token(Token = "0x4000664")]
			Int,
			[Token(Token = "0x4000665")]
			Float,
			[Token(Token = "0x4000666")]
			Vector3
		}

		[Serializable]
		[Token(Token = "0x2000152")]
		public class BoolEvent : UnityEvent<bool>
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0x68058C", Offset = "0x68058C", VA = "0x68058C")]
			public BoolEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000153")]
		public class IntEvent : UnityEvent<int>
		{
			[Token(Token = "0x60007A9")]
			[Address(RVA = "0x68062C", Offset = "0x68062C", VA = "0x68062C")]
			public IntEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000154")]
		public class FloatEvent : UnityEvent<float>
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0x6805DC", Offset = "0x6805DC", VA = "0x6805DC")]
			public FloatEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000155")]
		public class Vector3Event : UnityEvent<Vector3>
		{
			[Token(Token = "0x60007AB")]
			[Address(RVA = "0x68067C", Offset = "0x68067C", VA = "0x68067C")]
			public Vector3Event()
			{
			}
		}

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AnimationCurve _inputCurve;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ModulationType _modulationType;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AnimationCurve _modulationCurve;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Klak.Math.FloatInterpolator.Config _interpolator;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private OutputType _outputType;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _threshold;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int _intOutput0;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private int _intOutput1;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _floatOutput0;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float _floatOutput1;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Vector3 _vector3Output0;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private Vector3 _vector3Output1;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private BoolEvent _boolEvent;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private IntEvent _intEvent;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private FloatEvent _floatEvent;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3Event _vector3Event;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _inputValue;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _modulationValue;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Klak.Math.FloatInterpolator _value;

		[Token(Token = "0x17000099")]
		public float inputValue
		{
			[Token(Token = "0x60007A0")]
			[Address(RVA = "0x680094", Offset = "0x680094", VA = "0x680094")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public float modulationValue
		{
			[Token(Token = "0x60007A1")]
			[Address(RVA = "0x680418", Offset = "0x680418", VA = "0x680418")]
			set
			{
			}
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x67FF94", Offset = "0x67FF94", VA = "0x67FF94")]
		public ValueMap()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x680478", Offset = "0x680478", VA = "0x680478")]
		private float EvalInputCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x6804B4", Offset = "0x6804B4", VA = "0x6804B4")]
		private float EvalModulationCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x6800F4", Offset = "0x6800F4", VA = "0x6800F4")]
		private float CalculateTargetValue()
		{
			return default(float);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x680254", Offset = "0x680254", VA = "0x680254")]
		private void InvokeValueEvent(float p)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x6804F0", Offset = "0x6804F0", VA = "0x6804F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x680540", Offset = "0x680540", VA = "0x680540")]
		private void Update()
		{
		}
	}
}
[Token(Token = "0x2000156")]
public class MB2_TestShowHide : MonoBehaviour
{
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker mb;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objs;

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x68867C", Offset = "0x68867C", VA = "0x68867C")]
	public MB2_TestShowHide()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x688684", Offset = "0x688684", VA = "0x688684")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000157")]
public class MB2_TestUpdate : MonoBehaviour
{
	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB3_MultiMeshBaker multiMeshBaker;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objsToMove;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject objWithChangingUVs;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2[] uvs;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Mesh m;

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x688800", Offset = "0x688800", VA = "0x688800")]
	public MB2_TestUpdate()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x688808", Offset = "0x688808", VA = "0x688808")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x688AB8", Offset = "0x688AB8", VA = "0x688AB8")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x2000158")]
public class MB3_TestAddingRemovingSkinnedMeshes : MonoBehaviour
{
	[Token(Token = "0x2000571")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CC9C", Offset = "0x56CC9C")]
	private sealed class <TestScript>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal GameObject[] <a2>__0;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal GameObject[] <d1>__0;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal MB3_TestAddingRemovingSkinnedMeshes $this;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x17000481")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002346")]
			[Address(RVA = "0x690DA4", Offset = "0x690DA4", VA = "0x690DA4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000482")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002347")]
			[Address(RVA = "0x690DAC", Offset = "0x690DAC", VA = "0x690DAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0x68FF9C", Offset = "0x68FF9C", VA = "0x68FF9C")]
		[DebuggerHidden]
		public <TestScript>c__Iterator0()
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0x68FFA4", Offset = "0x68FFA4", VA = "0x68FFA4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0x690DB4", Offset = "0x690DB4", VA = "0x690DB4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0x690DC8", Offset = "0x690DC8", VA = "0x690DC8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] g;

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x68FEFC", Offset = "0x68FEFC", VA = "0x68FEFC")]
	public MB3_TestAddingRemovingSkinnedMeshes()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x68FF04", Offset = "0x68FF04", VA = "0x68FF04")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x68FF30", Offset = "0x68FF30", VA = "0x68FF30")]
	[DebuggerHidden]
	private IEnumerator TestScript()
	{
		return null;
	}
}
[Token(Token = "0x2000159")]
public class MB3_TestBakeAllWithSameMaterial : MonoBehaviour
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] listOfObjsToCombineGood;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] listOfObjsToCombineBad;

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x690E2C", Offset = "0x690E2C", VA = "0x690E2C")]
	public MB3_TestBakeAllWithSameMaterial()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x690E34", Offset = "0x690E34", VA = "0x690E34")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x690E38", Offset = "0x690E38", VA = "0x690E38")]
	private void testCombine()
	{
	}
}
[Token(Token = "0x200015A")]
public class MB3_TestRenderTextureTestHarness : MonoBehaviour
{
	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D input;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool doColor;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color32 color;

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x691344", Offset = "0x691344", VA = "0x691344")]
	public MB3_TestRenderTextureTestHarness()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x69134C", Offset = "0x69134C", VA = "0x69134C")]
	public Texture2D Create3x3Tex()
	{
		return null;
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x6914AC", Offset = "0x6914AC", VA = "0x6914AC")]
	public Texture2D Create3x3Clone()
	{
		return null;
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x6917C4", Offset = "0x6917C4", VA = "0x6917C4")]
	public static void TestRender(Texture2D input, Texture2D output)
	{
	}
}
[Token(Token = "0x200015B")]
public class AssemblyInfo
{
	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x69E53C", Offset = "0x69E53C", VA = "0x69E53C")]
	public AssemblyInfo()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x69E544", Offset = "0x69E544", VA = "0x69E544")]
	private void Start()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x69E548", Offset = "0x69E548", VA = "0x69E548")]
	private void Update()
	{
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x200015C")]
	public static class MB_TGAWriter
	{
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x6AF668", Offset = "0x6AF668", VA = "0x6AF668")]
		public static void Write(Color[] pixels, int width, int height, string path)
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x6AF6DC", Offset = "0x6AF6DC", VA = "0x6AF6DC")]
		public static void Write(Color[] pixels, int width, int height, Stream output)
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class MB_Utility
	{
		[Token(Token = "0x200015E")]
		public struct MeshAnalysisResult
		{
			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rect uvRect;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool hasOutOfBoundsUVs;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool hasOverlappingSubmeshVerts;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool hasOverlappingSubmeshTris;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool hasUVs;

			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float submeshArea;
		}

		[Token(Token = "0x200015F")]
		private class MB_Triangle
		{
			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int submeshIdx;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int[] vs;

			[Token(Token = "0x60007D2")]
			[Address(RVA = "0x6B165C", Offset = "0x6B165C", VA = "0x6B165C")]
			public MB_Triangle()
			{
			}

			[Token(Token = "0x60007D3")]
			[Address(RVA = "0x6B183C", Offset = "0x6B183C", VA = "0x6B183C")]
			public bool isSame(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60007D4")]
			[Address(RVA = "0x6B1A40", Offset = "0x6B1A40", VA = "0x6B1A40")]
			public bool sharesVerts(MB_Triangle obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60007D5")]
			[Address(RVA = "0x6B16C8", Offset = "0x6B16C8", VA = "0x6B16C8")]
			public void Initialize(int[] ts, int idx, int sIdx)
			{
			}
		}

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DO_INTEGRITY_CHECKS;

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x6AFB18", Offset = "0x6AFB18", VA = "0x6AFB18")]
		public MB_Utility()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x6AFB20", Offset = "0x6AFB20", VA = "0x6AFB20")]
		public static Texture2D createTextureCopy(Texture2D source)
		{
			return null;
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x6AFC04", Offset = "0x6AFC04", VA = "0x6AFC04")]
		public static bool ArrayBIsSubsetOfA(object[] a, object[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x6AFCD4", Offset = "0x6AFCD4", VA = "0x6AFCD4")]
		public static Material[] GetGOMaterials(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x6B0404", Offset = "0x6B0404", VA = "0x6B0404")]
		public static Mesh GetMesh(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x6B0574", Offset = "0x6B0574", VA = "0x6B0574")]
		public static void SetMesh(GameObject go, Mesh m)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x6B06EC", Offset = "0x6B06EC", VA = "0x6B06EC")]
		public static Renderer GetRenderer(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x6B0828", Offset = "0x6B0828", VA = "0x6B0828")]
		public static void DisableRendererInSource(GameObject go)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x6B0990", Offset = "0x6B0990", VA = "0x6B0990")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref Rect uvBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x6B0A2C", Offset = "0x6B0A2C", VA = "0x6B0A2C")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1, int uvChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x6B0B84", Offset = "0x6B0B84", VA = "0x6B0B84")]
		public static bool hasOutOfBoundsUVs(Vector2[] uvs, Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x6AD70C", Offset = "0x6AD70C", VA = "0x6AD70C")]
		public static void setSolidColor(Texture2D t, Color c)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x6B104C", Offset = "0x6B104C", VA = "0x6B104C")]
		public static Texture2D resampleTexture(Texture2D source, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x6B1218", Offset = "0x6B1218", VA = "0x6B1218")]
		public static bool AreAllSharedMaterialsDistinct(Material[] sharedMaterials)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x6B133C", Offset = "0x6B133C", VA = "0x6B133C")]
		public static int doSubmeshesShareVertsOrTris(Mesh m, ref MeshAnalysisResult mar)
		{
			return default(int);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x6B1E04", Offset = "0x6B1E04", VA = "0x6B1E04")]
		public static bool GetBounds(GameObject go, out Bounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x6B2088", Offset = "0x6B2088", VA = "0x6B2088")]
		public static void Destroy(UnityEngine.Object o)
		{
		}
	}
	[Token(Token = "0x2000160")]
	public delegate void ProgressUpdateDelegate(string msg, float progress);
	[Token(Token = "0x2000161")]
	public delegate bool ProgressUpdateCancelableDelegate(string msg, float progress);
	[Token(Token = "0x2000162")]
	public enum MB_ObjsToCombineTypes
	{
		[Token(Token = "0x4000680")]
		prefabOnly,
		[Token(Token = "0x4000681")]
		sceneObjOnly,
		[Token(Token = "0x4000682")]
		dontCare
	}
	[Token(Token = "0x2000163")]
	public enum MB_OutputOptions
	{
		[Token(Token = "0x4000684")]
		bakeIntoPrefab,
		[Token(Token = "0x4000685")]
		bakeMeshsInPlace,
		[Token(Token = "0x4000686")]
		bakeTextureAtlasesOnly,
		[Token(Token = "0x4000687")]
		bakeIntoSceneObject
	}
	[Token(Token = "0x2000164")]
	public enum MB_RenderType
	{
		[Token(Token = "0x4000689")]
		meshRenderer,
		[Token(Token = "0x400068A")]
		skinnedMeshRenderer
	}
	[Token(Token = "0x2000165")]
	public enum MB2_OutputOptions
	{
		[Token(Token = "0x400068C")]
		bakeIntoSceneObject,
		[Token(Token = "0x400068D")]
		bakeMeshAssetsInPlace,
		[Token(Token = "0x400068E")]
		bakeIntoPrefab
	}
	[Token(Token = "0x2000166")]
	public enum MB2_LightmapOptions
	{
		[Token(Token = "0x4000690")]
		preserve_current_lightmapping,
		[Token(Token = "0x4000691")]
		ignore_UV2,
		[Token(Token = "0x4000692")]
		copy_UV2_unchanged,
		[Token(Token = "0x4000693")]
		generate_new_UV2_layout,
		[Token(Token = "0x4000694")]
		copy_UV2_unchanged_to_separate_rects
	}
	[Token(Token = "0x2000167")]
	public enum MB2_PackingAlgorithmEnum
	{
		[Token(Token = "0x4000696")]
		UnitysPackTextures,
		[Token(Token = "0x4000697")]
		MeshBakerTexturePacker,
		[Token(Token = "0x4000698")]
		MeshBakerTexturePacker_Fast,
		[Token(Token = "0x4000699")]
		MeshBakerTexturePacker_Horizontal,
		[Token(Token = "0x400069A")]
		MeshBakerTexturePacker_Vertical
	}
	[Token(Token = "0x2000168")]
	public enum MB_TextureTilingTreatment
	{
		[Token(Token = "0x400069C")]
		none,
		[Token(Token = "0x400069D")]
		considerUVs,
		[Token(Token = "0x400069E")]
		edgeToEdgeX,
		[Token(Token = "0x400069F")]
		edgeToEdgeY,
		[Token(Token = "0x40006A0")]
		edgeToEdgeXY,
		[Token(Token = "0x40006A1")]
		unknown
	}
	[Token(Token = "0x2000169")]
	public enum MB2_ValidationLevel
	{
		[Token(Token = "0x40006A3")]
		none,
		[Token(Token = "0x40006A4")]
		quick,
		[Token(Token = "0x40006A5")]
		robust
	}
	[Token(Token = "0x200016A")]
	public interface MB2_EditorMethodsInterface
	{
		[Token(Token = "0x60007DE")]
		void Clear();

		[Token(Token = "0x60007DF")]
		void RestoreReadFlagsAndFormats(ProgressUpdateDelegate progressInfo);

		[Token(Token = "0x60007E0")]
		void SetReadWriteFlag(Texture2D tx, bool isReadable, bool addToList);

		[Token(Token = "0x60007E1")]
		void AddTextureFormat(Texture2D tx, bool isNormalMap);

		[Token(Token = "0x60007E2")]
		void SaveAtlasToAssetDatabase(Texture2D atlas, ShaderTextureProperty texPropertyName, int atlasNum, Material resMat);

		[Token(Token = "0x60007E3")]
		bool IsNormalMap(Texture2D tx);

		[Token(Token = "0x60007E4")]
		string GetPlatformString();

		[Token(Token = "0x60007E5")]
		void SetTextureSize(Texture2D tx, int size);

		[Token(Token = "0x60007E6")]
		bool IsCompressed(Texture2D tx);

		[Token(Token = "0x60007E7")]
		void CheckBuildSettings(long estimatedAtlasSize);

		[Token(Token = "0x60007E8")]
		bool CheckPrefabTypes(MB_ObjsToCombineTypes prefabType, List<GameObject> gos);

		[Token(Token = "0x60007E9")]
		bool ValidateSkinnedMeshes(List<GameObject> mom);

		[Token(Token = "0x60007EA")]
		void CommitChangesToAssets();

		[Token(Token = "0x60007EB")]
		void OnPreTextureBake();

		[Token(Token = "0x60007EC")]
		void OnPostTextureBake();

		[Token(Token = "0x60007ED")]
		void Destroy(UnityEngine.Object o);
	}
	[Token(Token = "0x200016B")]
	public enum MB2_LogLevel
	{
		[Token(Token = "0x40006A7")]
		none,
		[Token(Token = "0x40006A8")]
		error,
		[Token(Token = "0x40006A9")]
		warn,
		[Token(Token = "0x40006AA")]
		info,
		[Token(Token = "0x40006AB")]
		debug,
		[Token(Token = "0x40006AC")]
		trace
	}
	[Token(Token = "0x200016C")]
	public class MB2_Log
	{
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x6B21D4", Offset = "0x6B21D4", VA = "0x6B21D4")]
		public MB2_Log()
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x6B21DC", Offset = "0x6B21DC", VA = "0x6B21DC")]
		public static void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x6B256C", Offset = "0x6B256C", VA = "0x6B256C")]
		public static string Error(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x6B267C", Offset = "0x6B267C", VA = "0x6B267C")]
		public static string Warn(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x6B278C", Offset = "0x6B278C", VA = "0x6B278C")]
		public static string Info(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x6B289C", Offset = "0x6B289C", VA = "0x6B289C")]
		public static string LogDebug(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x6B29AC", Offset = "0x6B29AC", VA = "0x6B29AC")]
		public static string Trace(string msg, params object[] args)
		{
			return null;
		}
	}
	[Token(Token = "0x200016D")]
	public class ObjectLog
	{
		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int pos;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] logMessages;

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x78BC54", Offset = "0x78BC54", VA = "0x78BC54")]
		public ObjectLog(short bufferSize)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x78BCD4", Offset = "0x78BCD4", VA = "0x78BCD4")]
		private void _CacheLogMessage(string msg)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x78BD8C", Offset = "0x78BD8C", VA = "0x78BD8C")]
		public void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x78BDC0", Offset = "0x78BDC0", VA = "0x78BDC0")]
		public void Error(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x78BDF0", Offset = "0x78BDF0", VA = "0x78BDF0")]
		public void Warn(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x78BE20", Offset = "0x78BE20", VA = "0x78BE20")]
		public void Info(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x78BE50", Offset = "0x78BE50", VA = "0x78BE50")]
		public void LogDebug(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x78BE80", Offset = "0x78BE80", VA = "0x78BE80")]
		public void Trace(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x78BEB0", Offset = "0x78BEB0", VA = "0x78BEB0")]
		public string Dump()
		{
			return null;
		}
	}
	[Token(Token = "0x200016E")]
	public interface MBVersionInterface
	{
		[Token(Token = "0x60007FE")]
		string version();

		[Token(Token = "0x60007FF")]
		int GetMajorVersion();

		[Token(Token = "0x6000800")]
		int GetMinorVersion();

		[Token(Token = "0x6000801")]
		bool GetActive(GameObject go);

		[Token(Token = "0x6000802")]
		void SetActive(GameObject go, bool isActive);

		[Token(Token = "0x6000803")]
		void SetActiveRecursively(GameObject go, bool isActive);

		[Token(Token = "0x6000804")]
		UnityEngine.Object[] FindSceneObjectsOfType(Type t);

		[Token(Token = "0x6000805")]
		bool IsRunningAndMeshNotReadWriteable(Mesh m);

		[Token(Token = "0x6000806")]
		Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000807")]
		void MeshClear(Mesh m, bool t);

		[Token(Token = "0x6000808")]
		void MeshAssignUV3(Mesh m, Vector2[] uv3s);

		[Token(Token = "0x6000809")]
		void MeshAssignUV4(Mesh m, Vector2[] uv4s);

		[Token(Token = "0x600080A")]
		Vector4 GetLightmapTilingOffset(Renderer r);

		[Token(Token = "0x600080B")]
		Transform[] GetBones(Renderer r);

		[Token(Token = "0x600080C")]
		void OptimizeMesh(Mesh m);

		[Token(Token = "0x600080D")]
		int GetBlendShapeFrameCount(Mesh m, int shapeIndex);

		[Token(Token = "0x600080E")]
		float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex);

		[Token(Token = "0x600080F")]
		void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts);

		[Token(Token = "0x6000810")]
		void ClearBlendShapes(Mesh m);

		[Token(Token = "0x6000811")]
		void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts);

		[Token(Token = "0x6000812")]
		int MaxMeshVertexCount();

		[Token(Token = "0x6000813")]
		void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles);

		[Token(Token = "0x6000814")]
		bool GraphicsUVStartsAtTop();
	}
	[Token(Token = "0x200016F")]
	public class MBVersion
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MBVersionInterface _MBVersion;

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x7894C0", Offset = "0x7894C0", VA = "0x7894C0")]
		public MBVersion()
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x7894C8", Offset = "0x7894C8", VA = "0x7894C8")]
		private static MBVersionInterface _CreateMBVersionConcrete()
		{
			return null;
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x7895C4", Offset = "0x7895C4", VA = "0x7895C4")]
		public static string version()
		{
			return null;
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x7896A8", Offset = "0x7896A8", VA = "0x7896A8")]
		public static int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x789790", Offset = "0x789790", VA = "0x789790")]
		public static int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x789878", Offset = "0x789878", VA = "0x789878")]
		public static bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x789970", Offset = "0x789970", VA = "0x789970")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x789A70", Offset = "0x789A70", VA = "0x789A70")]
		public static void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x789B70", Offset = "0x789B70", VA = "0x789B70")]
		public static UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x789C68", Offset = "0x789C68", VA = "0x789C68")]
		public static bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x789D60", Offset = "0x789D60", VA = "0x789D60")]
		public static Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x789E70", Offset = "0x789E70", VA = "0x789E70")]
		public static void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x789F70", Offset = "0x789F70", VA = "0x789F70")]
		public static void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x78A070", Offset = "0x78A070", VA = "0x78A070")]
		public static void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x78A170", Offset = "0x78A170", VA = "0x78A170")]
		public static Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x78A268", Offset = "0x78A268", VA = "0x78A268")]
		public static Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x78A360", Offset = "0x78A360", VA = "0x78A360")]
		public static void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x78A458", Offset = "0x78A458", VA = "0x78A458")]
		public static int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x78A558", Offset = "0x78A558", VA = "0x78A558")]
		public static float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x78A668", Offset = "0x78A668", VA = "0x78A668")]
		public static void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x78A798", Offset = "0x78A798", VA = "0x78A798")]
		public static void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x78A890", Offset = "0x78A890", VA = "0x78A890")]
		public static void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x78A9C8", Offset = "0x78A9C8", VA = "0x78A9C8")]
		public static int MaxMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x78AAB0", Offset = "0x78AAB0", VA = "0x78AAB0")]
		public static void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles)
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x78ABC8", Offset = "0x78ABC8", VA = "0x78ABC8")]
		public static bool GraphicsUVStartsAtTop()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000170")]
	public class MB3_AgglomerativeClustering
	{
		[Serializable]
		[Token(Token = "0x2000171")]
		public class ClusterNode
		{
			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public item_s leaf;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode cha;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ClusterNode chb;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int height;

			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float distToMergedCentroid;

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 centroid;

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int[] leafs;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int idx;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isUnclustered;

			[Token(Token = "0x6000838")]
			[Address(RVA = "0x6BDB24", Offset = "0x6BDB24", VA = "0x6BDB24")]
			public ClusterNode(item_s ii, int index)
			{
			}

			[Token(Token = "0x6000839")]
			[Address(RVA = "0x6BE0E0", Offset = "0x6BE0E0", VA = "0x6BE0E0")]
			public ClusterNode(ClusterNode a, ClusterNode b, int index, int h, float dist, ClusterNode[] clusters)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000172")]
		public class item_s
		{
			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 coord;

			[Token(Token = "0x600083A")]
			[Address(RVA = "0x6BE600", Offset = "0x6BE600", VA = "0x6BE600")]
			public item_s()
			{
			}
		}

		[Token(Token = "0x2000173")]
		public class ClusterDistance
		{
			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ClusterNode a;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode b;

			[Token(Token = "0x600083B")]
			[Address(RVA = "0x6BE3F4", Offset = "0x6BE3F4", VA = "0x6BE3F4")]
			public ClusterDistance(ClusterNode aa, ClusterNode bb)
			{
			}
		}

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<item_s> items;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ClusterNode[] clusters;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool wasCanceled;

		[Token(Token = "0x40006B3")]
		private const int MAX_PRIORITY_Q_SIZE = 2048;

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x6BC3BC", Offset = "0x6BC3BC", VA = "0x6BC3BC")]
		public MB3_AgglomerativeClustering()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x6BC42C", Offset = "0x6BC42C", VA = "0x6BC42C")]
		private float euclidean_distance(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x6BC4D8", Offset = "0x6BC4D8", VA = "0x6BC4D8")]
		public bool agglomerate(ProgressUpdateCancelableDelegate progFunc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x6BDBF4", Offset = "0x6BDBF4", VA = "0x6BDBF4")]
		private float _RefillPriorityQWithSome(PriorityQueue<float, ClusterDistance> pq, List<ClusterNode> unclustered, ClusterNode[] clusters, ProgressUpdateCancelableDelegate progFunc)
		{
			return default(float);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x6BE42C", Offset = "0x6BE42C", VA = "0x6BE42C")]
		public int TestRun(List<GameObject> gos)
		{
			return default(int);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x6BE608", Offset = "0x6BE608", VA = "0x6BE608")]
		public static void Main()
		{
		}

		[Token(Token = "0x6000834")]
		public static T NthSmallestElement<T>(List<T> array, int n) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x6000835")]
		private static List<T> QuickSelectSmallest<T>(List<T> input, int n) where T : IComparable<T>
		{
			return null;
		}

		[Token(Token = "0x6000836")]
		private static int QuickSelectPartition<T>(List<T> array, int startIndex, int endIndex, int pivotIndex) where T : IComparable<T>
		{
			return default(int);
		}

		[Token(Token = "0x6000837")]
		private static void Swap<T>(List<T> array, int index1, int index2)
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class MB3_CopyBoneWeights
	{
		[Token(Token = "0x600083C")]
		[Address(RVA = "0x6BE754", Offset = "0x6BE754", VA = "0x6BE754")]
		public MB3_CopyBoneWeights()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x6BE75C", Offset = "0x6BE75C", VA = "0x6BE75C")]
		public static void CopyBoneWeightsFromSeamMeshToOtherMeshes(float radius, Mesh seamMesh, Mesh[] targetMeshes)
		{
		}
	}
}
[Token(Token = "0x2000175")]
public class MB3_KMeansClustering
{
	[Token(Token = "0x2000176")]
	private class DataPoint
	{
		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Cluster;

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x68C30C", Offset = "0x68C30C", VA = "0x68C30C")]
		public DataPoint(GameObject go)
		{
		}
	}

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<DataPoint> _normalizedDataToCluster;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3[] _clusters;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _numberOfClusters;

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x68BFC0", Offset = "0x68BFC0", VA = "0x68BFC0")]
	public MB3_KMeansClustering(List<GameObject> gos, int numClusters)
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x68C478", Offset = "0x68C478", VA = "0x68C478")]
	private void InitializeCentroids()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x68C594", Offset = "0x68C594", VA = "0x68C594")]
	private bool UpdateDataPointMeans(bool force)
	{
		return default(bool);
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x68C898", Offset = "0x68C898", VA = "0x68C898")]
	private bool AnyAreEmpty(List<DataPoint> data)
	{
		return default(bool);
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x68C9F8", Offset = "0x68C9F8", VA = "0x68C9F8")]
	private bool UpdateClusterMembership()
	{
		return default(bool);
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x68CBEC", Offset = "0x68CBEC", VA = "0x68CBEC")]
	private float ElucidanDistance(DataPoint dataPoint, Vector3 mean)
	{
		return default(float);
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x68CCA0", Offset = "0x68CCA0", VA = "0x68CCA0")]
	private int MinIndex(float[] distances)
	{
		return default(int);
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x68CD70", Offset = "0x68CD70", VA = "0x68CD70")]
	public List<Renderer> GetCluster(int idx, out Vector3 mean, out float size)
	{
		return null;
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x68D0C0", Offset = "0x68D0C0", VA = "0x68D0C0")]
	public void Cluster()
	{
	}
}
namespace DigitalOpus.MB.Core
{
	[Serializable]
	[Token(Token = "0x2000177")]
	public abstract class MB3_MeshCombiner
	{
		[Token(Token = "0x2000178")]
		public delegate void GenerateUV2Delegate(Mesh m, float hardAngle, float packMargin);

		[Token(Token = "0x2000179")]
		public class MBBlendShapeKey
		{
			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjecID;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int blendShapeIndexInSrc;

			[Token(Token = "0x600088F")]
			[Address(RVA = "0x9EE164", Offset = "0x9EE164", VA = "0x9EE164")]
			public MBBlendShapeKey(int srcSkinnedMeshRenderGameObjectID, int blendShapeIndexInSource)
			{
			}

			[Token(Token = "0x6000890")]
			[Address(RVA = "0x9EE19C", Offset = "0x9EE19C", VA = "0x9EE19C", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000891")]
			[Address(RVA = "0x9EE248", Offset = "0x9EE248", VA = "0x9EE248", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x200017A")]
		public class MBBlendShapeValue
		{
			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject combinedMeshGameObject;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int blendShapeIndex;

			[Token(Token = "0x6000892")]
			[Address(RVA = "0x9EE264", Offset = "0x9EE264", VA = "0x9EE264")]
			public MBBlendShapeValue()
			{
			}
		}

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected MB2_LogLevel _LOG_LEVEL;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected MB2_ValidationLevel _validationLevel;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string _name;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected GameObject _resultSceneObject;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Renderer _targetRenderer;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected MB_RenderType _renderType;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected MB2_OutputOptions _outputOption;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected MB2_LightmapOptions _lightmapOption;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		protected bool _doNorm;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		protected bool _doTan;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		protected bool _doCol;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[SerializeField]
		protected bool _doUV;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected bool _doUV3;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		protected bool _doUV4;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[SerializeField]
		protected bool _doBlendShapes;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[SerializeField]
		protected bool _recenterVertsToBoundsCenter;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		public bool _optimizeAfterBake;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public float uv2UnwrappingParamsHardAngle;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public float uv2UnwrappingParamsPackMargin;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool _usingTemporaryTextureBakeResult;

		[Token(Token = "0x1700009B")]
		public static bool EVAL_VERSION
		{
			[Token(Token = "0x6000849")]
			[Address(RVA = "0x6C3ACC", Offset = "0x6C3ACC", VA = "0x6C3ACC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		public virtual MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0x6C3AD4", Offset = "0x6C3AD4", VA = "0x6C3AD4", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x600084B")]
			[Address(RVA = "0x6C3ADC", Offset = "0x6C3ADC", VA = "0x6C3ADC", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public virtual MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0x6C3AE4", Offset = "0x6C3AE4", VA = "0x6C3AE4", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x600084D")]
			[Address(RVA = "0x6C3AEC", Offset = "0x6C3AEC", VA = "0x6C3AEC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public string name
		{
			[Token(Token = "0x600084E")]
			[Address(RVA = "0x6C3AF4", Offset = "0x6C3AF4", VA = "0x6C3AF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600084F")]
			[Address(RVA = "0x6C3AFC", Offset = "0x6C3AFC", VA = "0x6C3AFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public virtual MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000850")]
			[Address(RVA = "0x6C3B04", Offset = "0x6C3B04", VA = "0x6C3B04", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000851")]
			[Address(RVA = "0x6C3B0C", Offset = "0x6C3B0C", VA = "0x6C3B0C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public virtual GameObject resultSceneObject
		{
			[Token(Token = "0x6000852")]
			[Address(RVA = "0x6C3B14", Offset = "0x6C3B14", VA = "0x6C3B14", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000853")]
			[Address(RVA = "0x6C3B1C", Offset = "0x6C3B1C", VA = "0x6C3B1C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public virtual Renderer targetRenderer
		{
			[Token(Token = "0x6000854")]
			[Address(RVA = "0x6C3B24", Offset = "0x6C3B24", VA = "0x6C3B24", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000855")]
			[Address(RVA = "0x6C3B2C", Offset = "0x6C3B2C", VA = "0x6C3B2C", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public virtual MB_RenderType renderType
		{
			[Token(Token = "0x6000856")]
			[Address(RVA = "0x6C3C24", Offset = "0x6C3C24", VA = "0x6C3C24", Slot = "14")]
			get
			{
				return default(MB_RenderType);
			}
			[Token(Token = "0x6000857")]
			[Address(RVA = "0x6C3C2C", Offset = "0x6C3C2C", VA = "0x6C3C2C", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public virtual MB2_OutputOptions outputOption
		{
			[Token(Token = "0x6000858")]
			[Address(RVA = "0x6C3C34", Offset = "0x6C3C34", VA = "0x6C3C34", Slot = "16")]
			get
			{
				return default(MB2_OutputOptions);
			}
			[Token(Token = "0x6000859")]
			[Address(RVA = "0x6C3C3C", Offset = "0x6C3C3C", VA = "0x6C3C3C", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public virtual MB2_LightmapOptions lightmapOption
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0x6C3C44", Offset = "0x6C3C44", VA = "0x6C3C44", Slot = "18")]
			get
			{
				return default(MB2_LightmapOptions);
			}
			[Token(Token = "0x600085B")]
			[Address(RVA = "0x6C3C4C", Offset = "0x6C3C4C", VA = "0x6C3C4C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public virtual bool doNorm
		{
			[Token(Token = "0x600085C")]
			[Address(RVA = "0x6C3C54", Offset = "0x6C3C54", VA = "0x6C3C54", Slot = "20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600085D")]
			[Address(RVA = "0x6C3C5C", Offset = "0x6C3C5C", VA = "0x6C3C5C", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public virtual bool doTan
		{
			[Token(Token = "0x600085E")]
			[Address(RVA = "0x6C3C68", Offset = "0x6C3C68", VA = "0x6C3C68", Slot = "22")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600085F")]
			[Address(RVA = "0x6C3C70", Offset = "0x6C3C70", VA = "0x6C3C70", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public virtual bool doCol
		{
			[Token(Token = "0x6000860")]
			[Address(RVA = "0x6C3C7C", Offset = "0x6C3C7C", VA = "0x6C3C7C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000861")]
			[Address(RVA = "0x6C3C84", Offset = "0x6C3C84", VA = "0x6C3C84", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public virtual bool doUV
		{
			[Token(Token = "0x6000862")]
			[Address(RVA = "0x6C3C90", Offset = "0x6C3C90", VA = "0x6C3C90", Slot = "26")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000863")]
			[Address(RVA = "0x6C3C98", Offset = "0x6C3C98", VA = "0x6C3C98", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public virtual bool doUV1
		{
			[Token(Token = "0x6000864")]
			[Address(RVA = "0x6C3CA4", Offset = "0x6C3CA4", VA = "0x6C3CA4", Slot = "28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x6C3CAC", Offset = "0x6C3CAC", VA = "0x6C3CAC", Slot = "29")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public virtual bool doUV3
		{
			[Token(Token = "0x6000867")]
			[Address(RVA = "0x6C3CD0", Offset = "0x6C3CD0", VA = "0x6C3CD0", Slot = "31")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000868")]
			[Address(RVA = "0x6C3CD8", Offset = "0x6C3CD8", VA = "0x6C3CD8", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		public virtual bool doUV4
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x6C3CE4", Offset = "0x6C3CE4", VA = "0x6C3CE4", Slot = "33")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086A")]
			[Address(RVA = "0x6C3CEC", Offset = "0x6C3CEC", VA = "0x6C3CEC", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public virtual bool doBlendShapes
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x6C3CF8", Offset = "0x6C3CF8", VA = "0x6C3CF8", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x6C3D00", Offset = "0x6C3D00", VA = "0x6C3D00", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public virtual bool recenterVertsToBoundsCenter
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0x6C3D0C", Offset = "0x6C3D0C", VA = "0x6C3D0C", Slot = "37")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x6C3D14", Offset = "0x6C3D14", VA = "0x6C3D14", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public bool optimizeAfterBake
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x6C3D20", Offset = "0x6C3D20", VA = "0x6C3D20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x6C3D28", Offset = "0x6C3D28", VA = "0x6C3D28")]
			set
			{
			}
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x6C3A8C", Offset = "0x6C3A8C", VA = "0x6C3A8C")]
		protected MB3_MeshCombiner()
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x6C3CB0", Offset = "0x6C3CB0", VA = "0x6C3CB0", Slot = "30")]
		public virtual bool doUV2()
		{
			return default(bool);
		}

		[Token(Token = "0x6000871")]
		public abstract int GetLightmapIndex();

		[Token(Token = "0x6000872")]
		public abstract void ClearBuffers();

		[Token(Token = "0x6000873")]
		public abstract void ClearMesh();

		[Token(Token = "0x6000874")]
		public abstract void DisposeRuntimeCreated();

		[Token(Token = "0x6000875")]
		public abstract void DestroyMesh();

		[Token(Token = "0x6000876")]
		public abstract void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods);

		[Token(Token = "0x6000877")]
		public abstract List<GameObject> GetObjectsInCombined();

		[Token(Token = "0x6000878")]
		public abstract int GetNumObjectsInCombined();

		[Token(Token = "0x6000879")]
		public abstract int GetNumVerticesFor(GameObject go);

		[Token(Token = "0x600087A")]
		public abstract int GetNumVerticesFor(int instanceID);

		[Token(Token = "0x600087B")]
		public abstract Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap();

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x6C3D34", Offset = "0x6C3D34", VA = "0x6C3D34", Slot = "50")]
		public virtual void Apply()
		{
		}

		[Token(Token = "0x600087D")]
		public abstract void Apply(GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x600087E")]
		public abstract void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapeFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x600087F")]
		public abstract bool UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false);

		[Token(Token = "0x6000880")]
		public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

		[Token(Token = "0x6000881")]
		public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource);

		[Token(Token = "0x6000882")]
		public abstract bool CombinedMeshContains(GameObject go);

		[Token(Token = "0x6000883")]
		public abstract void UpdateSkinnedMeshApproximateBounds();

		[Token(Token = "0x6000884")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBones();

		[Token(Token = "0x6000885")]
		public abstract void CheckIntegrity();

		[Token(Token = "0x6000886")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBounds();

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x6C3D48", Offset = "0x6C3D48", VA = "0x6C3D48")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBonesStatic(Transform[] bs, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x6C4100", Offset = "0x6C4100", VA = "0x6C4100")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBoundsStatic(List<GameObject> objectsInCombined, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x6C42E8", Offset = "0x6C42E8", VA = "0x6C42E8", Slot = "61")]
		protected virtual bool _CreateTemporaryTextrueBakeResult(GameObject[] gos, List<Material> matsOnTargetRenderer)
		{
			return default(bool);
		}

		[Token(Token = "0x600088A")]
		public abstract List<Material> GetMaterialsOnTargetRenderer();
	}
	[Serializable]
	[Token(Token = "0x200017B")]
	public class MB3_MeshCombinerSingle : MB3_MeshCombiner
	{
		[Token(Token = "0x200017C")]
		public enum MeshCreationConditions
		{
			[Token(Token = "0x40006F7")]
			NoMesh,
			[Token(Token = "0x40006F8")]
			CreatedInEditor,
			[Token(Token = "0x40006F9")]
			CreatedAtRuntime,
			[Token(Token = "0x40006FA")]
			AssignedByUser
		}

		[Serializable]
		[Token(Token = "0x200017D")]
		public class SerializableIntArray
		{
			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] data;

			[Token(Token = "0x60008D8")]
			[Address(RVA = "0x9F0474", Offset = "0x9F0474", VA = "0x9F0474")]
			public SerializableIntArray()
			{
			}

			[Token(Token = "0x60008D9")]
			[Address(RVA = "0x9EFA40", Offset = "0x9EFA40", VA = "0x9EFA40")]
			public SerializableIntArray(int len)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200017E")]
		public class MB_DynamicGameObject : IComparable<MB_DynamicGameObject>
		{
			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int instanceID;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject gameObject;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int vertIdx;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int blendShapeIdx;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int numVerts;

			[Token(Token = "0x4000702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int numBlendShapes;

			[Token(Token = "0x4000703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int[] indexesOfBonesUsed;

			[Token(Token = "0x4000704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int lightmapIndex;

			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector4 lightmapTilingOffset;

			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 meshSize;

			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public bool show;

			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
			public bool invertTriangles;

			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] submeshTriIdxs;

			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int[] submeshNumTris;

			[Token(Token = "0x400070B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public int[] targetSubmeshIdxs;

			[Token(Token = "0x400070C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Rect[] uvRects;

			[Token(Token = "0x400070D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Rect[] encapsulatingRect;

			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Rect[] sourceMaterialTiling;

			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Rect[] obUVRects;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public bool _beingDeleted;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public int _triangleIdxAdjustment;

			[NonSerialized]
			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public SerializableIntArray[] _tmpSubmeshTris;

			[NonSerialized]
			[Token(Token = "0x4000713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Transform[] _tmpCachedBones;

			[NonSerialized]
			[Token(Token = "0x4000714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public Matrix4x4[] _tmpCachedBindposes;

			[NonSerialized]
			[Token(Token = "0x4000715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public BoneWeight[] _tmpCachedBoneWeights;

			[NonSerialized]
			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public int[] _tmpIndexesOfSourceBonesUsed;

			[Token(Token = "0x60008DA")]
			[Address(RVA = "0x9F796C", Offset = "0x9F796C", VA = "0x9F796C")]
			public MB_DynamicGameObject()
			{
			}

			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xA04368", Offset = "0xA04368", VA = "0xA04368", Slot = "4")]
			public int CompareTo(MB_DynamicGameObject b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200017F")]
		public class MeshChannels
		{
			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x4000718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2[] uv0raw;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv0modified;

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2[] uv2;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2[] uv3;

			[Token(Token = "0x400071E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector2[] uv4;

			[Token(Token = "0x400071F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Color[] colors;

			[Token(Token = "0x4000720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public BoneWeight[] boneWeights;

			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Matrix4x4[] bindPoses;

			[Token(Token = "0x4000722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] triangles;

			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public MBBlendShape[] blendShapes;

			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xA043A8", Offset = "0xA043A8", VA = "0xA043A8")]
			public MeshChannels()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000180")]
		public class MBBlendShapeFrame
		{
			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float frameWeight;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] vertices;

			[Token(Token = "0x4000726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3[] normals;

			[Token(Token = "0x4000727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3[] tangents;

			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xA043A0", Offset = "0xA043A0", VA = "0xA043A0")]
			public MBBlendShapeFrame()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000181")]
		public class MBBlendShape
		{
			[Token(Token = "0x4000728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjectID;

			[Token(Token = "0x4000729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject gameObject;

			[Token(Token = "0x400072A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x400072B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int indexInSource;

			[Token(Token = "0x400072C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MBBlendShapeFrame[] frames;

			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xA04398", Offset = "0xA04398", VA = "0xA04398")]
			public MBBlendShape()
			{
			}
		}

		[Token(Token = "0x2000182")]
		public class MeshChannelsCache
		{
			[Token(Token = "0x400072D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_MeshCombinerSingle mc;

			[Token(Token = "0x400072E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected Dictionary<int, MeshChannels> meshID2MeshChannels;

			[Token(Token = "0x400072F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector2 _HALF_UV;

			[Token(Token = "0x60008DF")]
			[Address(RVA = "0x9F78B4", Offset = "0x9F78B4", VA = "0x9F78B4")]
			public MeshChannelsCache(MB3_MeshCombinerSingle mcs)
			{
			}

			[Token(Token = "0x60008E0")]
			[Address(RVA = "0x9F898C", Offset = "0x9F898C", VA = "0x9F898C")]
			internal Vector3[] GetVertices(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E1")]
			[Address(RVA = "0x9F8ADC", Offset = "0x9F8ADC", VA = "0x9F8ADC")]
			internal Vector3[] GetNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E2")]
			[Address(RVA = "0x9F8C2C", Offset = "0x9F8C2C", VA = "0x9F8C2C")]
			internal Vector4[] GetTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E3")]
			[Address(RVA = "0x9F08E0", Offset = "0x9F08E0", VA = "0x9F08E0")]
			internal Vector2[] GetUv0Raw(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xA04AFC", Offset = "0xA04AFC", VA = "0xA04AFC")]
			internal Vector2[] GetUv0Modified(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E5")]
			[Address(RVA = "0x9FB4B0", Offset = "0x9FB4B0", VA = "0x9FB4B0")]
			internal Vector2[] GetUv2(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E6")]
			[Address(RVA = "0x9F98BC", Offset = "0x9F98BC", VA = "0x9F98BC")]
			internal Vector2[] GetUv3(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E7")]
			[Address(RVA = "0x9F9A34", Offset = "0x9F9A34", VA = "0x9F9A34")]
			internal Vector2[] GetUv4(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E8")]
			[Address(RVA = "0x9F9BAC", Offset = "0x9F9BAC", VA = "0x9F9BAC")]
			internal Color[] GetColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008E9")]
			[Address(RVA = "0xA03D6C", Offset = "0xA03D6C", VA = "0xA03D6C")]
			internal Matrix4x4[] GetBindposes(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x60008EA")]
			[Address(RVA = "0xA00A84", Offset = "0xA00A84", VA = "0xA00A84")]
			internal BoneWeight[] GetBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x60008EB")]
			[Address(RVA = "0xA0566C", Offset = "0xA0566C", VA = "0xA0566C")]
			internal int[] GetTriangles(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008EC")]
			[Address(RVA = "0x9F9CFC", Offset = "0x9F9CFC", VA = "0x9F9CFC")]
			internal MBBlendShape[] GetBlendShapes(Mesh m, int gameObjectID)
			{
				return null;
			}

			[Token(Token = "0x60008ED")]
			[Address(RVA = "0xA04F18", Offset = "0xA04F18", VA = "0xA04F18")]
			private Color[] _getMeshColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xA043B0", Offset = "0xA043B0", VA = "0xA043B0")]
			private Vector3[] _getMeshNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xA04618", Offset = "0xA04618", VA = "0xA04618")]
			private Vector4[] _getMeshTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xA048B0", Offset = "0xA048B0", VA = "0xA048B0")]
			private Vector2[] _getMeshUVs(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008F1")]
			[Address(RVA = "0xA04C34", Offset = "0xA04C34", VA = "0xA04C34")]
			private Vector2[] _getMeshUV2s(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xA0518C", Offset = "0xA0518C", VA = "0xA0518C")]
			public static Matrix4x4[] _getBindPoses(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xA053CC", Offset = "0xA053CC", VA = "0xA053CC")]
			public static BoneWeight[] _getBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x60008F4")]
			[Address(RVA = "0xA057BC", Offset = "0xA057BC", VA = "0xA057BC")]
			private void _generateTangents(int[] triangles, Vector3[] verts, Vector2[] uvs, Vector3[] normals, Vector4[] outTangents)
			{
			}
		}

		[Token(Token = "0x2000183")]
		public struct BoneAndBindpose
		{
			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform bone;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Matrix4x4 bindPose;

			[Token(Token = "0x60008F5")]
			[Address(RVA = "0xA040B4", Offset = "0xA040B4", VA = "0xA040B4")]
			public BoneAndBindpose(Transform t, Matrix4x4 bp)
			{
			}

			[Token(Token = "0x60008F6")]
			[Address(RVA = "0xA042E4", Offset = "0xA042E4", VA = "0xA042E4", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60008F7")]
			[Address(RVA = "0xA04360", Offset = "0xA04360", VA = "0xA04360", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000573")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56CFFC", Offset = "0x56CFFC")]
		private sealed class <_addToCombined>c__AnonStorey0
		{
			[Token(Token = "0x4001772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal GameObject[] _goToAdd;

			[Token(Token = "0x600234A")]
			[Address(RVA = "0x9F7010", Offset = "0x9F7010", VA = "0x9F7010")]
			public <_addToCombined>c__AnonStorey0()
			{
			}
		}

		[Token(Token = "0x2000574")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D00C", Offset = "0x56D00C")]
		private sealed class <_addToCombined>c__AnonStorey1
		{
			[Token(Token = "0x4001773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int i;

			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal <_addToCombined>c__AnonStorey0 <>f__ref$0;

			[Token(Token = "0x600234B")]
			[Address(RVA = "0x9F7964", Offset = "0x9F7964", VA = "0x9F7964")]
			public <_addToCombined>c__AnonStorey1()
			{
			}

			[Token(Token = "0x600234C")]
			[Address(RVA = "0xA03FF0", Offset = "0xA03FF0", VA = "0xA03FF0")]
			internal bool <>m__0(int o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected List<GameObject> objectsInCombinedMesh;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int lightmapIndex;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<MB_DynamicGameObject> mbDynamicObjectsInCombinedMesh;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<GameObject, MB_DynamicGameObject> _instance2combined_map;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3[] verts;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Vector3[] normals;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Vector4[] tangents;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Vector2[] uvs;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Vector2[] uv2s;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Vector2[] uv3s;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Vector2[] uv4s;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Color[] colors;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Matrix4x4[] bindPoses;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Transform[] bones;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		internal MBBlendShape[] blendShapes;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		internal MBBlendShape[] blendShapesInCombined;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private SerializableIntArray[] submeshTris;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private MeshCreationConditions _meshBirth;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Mesh _mesh;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private BoneWeight[] boneWeights;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private GameObject[] empty;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int[] emptyIDs;

		[Token(Token = "0x170000AF")]
		public override MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0x9EE554", Offset = "0x9EE554", VA = "0x9EE554", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public override MB_RenderType renderType
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0x9EE68C", Offset = "0x9EE68C", VA = "0x9EE68C", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public override GameObject resultSceneObject
		{
			[Token(Token = "0x6000896")]
			[Address(RVA = "0x9EE74C", Offset = "0x9EE74C", VA = "0x9EE74C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x9EE26C", Offset = "0x9EE26C", VA = "0x9EE26C")]
		public MB3_MeshCombinerSingle()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x9EE854", Offset = "0x9EE854", VA = "0x9EE854")]
		private MB_DynamicGameObject instance2Combined_MapGet(GameObject gameObjectID)
		{
			return null;
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x9EE8C0", Offset = "0x9EE8C0", VA = "0x9EE8C0")]
		private void instance2Combined_MapAdd(GameObject gameObjectID, MB_DynamicGameObject dgo)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x9EE934", Offset = "0x9EE934", VA = "0x9EE934")]
		private void instance2Combined_MapRemove(GameObject gameObjectID)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x9EE9A0", Offset = "0x9EE9A0", VA = "0x9EE9A0")]
		private bool instance2Combined_MapTryGetValue(GameObject gameObjectID, out MB_DynamicGameObject dgo)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x9EEA14", Offset = "0x9EEA14", VA = "0x9EEA14")]
		private int instance2Combined_MapCount()
		{
			return default(int);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x9EEA70", Offset = "0x9EEA70", VA = "0x9EEA70")]
		private void instance2Combined_MapClear()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x9EEACC", Offset = "0x9EEACC", VA = "0x9EEACC")]
		private bool instance2Combined_MapContainsKey(GameObject gameObjectID)
		{
			return default(bool);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x9EEB38", Offset = "0x9EEB38", VA = "0x9EEB38")]
		private bool InstanceID2DGO(int instanceID, out MB_DynamicGameObject dgoGameObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x9EEC38", Offset = "0x9EEC38", VA = "0x9EEC38", Slot = "46")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x9EEC94", Offset = "0x9EEC94", VA = "0x9EEC94", Slot = "45")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x9EED20", Offset = "0x9EED20", VA = "0x9EED20")]
		public Mesh GetMesh()
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x9EEE30", Offset = "0x9EEE30", VA = "0x9EEE30")]
		public void SetMesh(Mesh m)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x9EEEC4", Offset = "0x9EEEC4", VA = "0x9EEEC4")]
		public Transform[] GetBones()
		{
			return null;
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x9EEECC", Offset = "0x9EEECC", VA = "0x9EEECC", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x9EEF24", Offset = "0x9EEF24", VA = "0x9EEF24", Slot = "47")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x9EEF6C", Offset = "0x9EEF6C", VA = "0x9EEF6C", Slot = "48")]
		public override int GetNumVerticesFor(int instanceID)
		{
			return default(int);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x9EEFA4", Offset = "0x9EEFA4", VA = "0x9EEFA4", Slot = "49")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x9EF164", Offset = "0x9EF164", VA = "0x9EF164")]
		private bool _Initialize(int numResultMats)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x9EFABC", Offset = "0x9EFABC", VA = "0x9EFABC")]
		private bool _collectMaterialTriangles(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x9F047C", Offset = "0x9F047C", VA = "0x9F047C")]
		private bool _collectOutOfBoundsUVRects2(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisResults, MeshChannelsCache meshChannelCache)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x9F0A30", Offset = "0x9F0A30", VA = "0x9F0A30")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x9F0BB0", Offset = "0x9F0BB0", VA = "0x9F0BB0")]
		private bool _validateMeshFlags()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x9F0E44", Offset = "0x9F0E44", VA = "0x9F0E44")]
		private bool _showHide(GameObject[] goToShow, GameObject[] goToHide)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x9F1188", Offset = "0x9F1188", VA = "0x9F1188")]
		private bool _addToCombined(GameObject[] goToAdd, int[] goToDelete, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x9F8D7C", Offset = "0x9F8D7C", VA = "0x9F8D7C")]
		private void _copyAndAdjustUVsFromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x9F95A4", Offset = "0x9F95A4", VA = "0x9F95A4")]
		private void _copyAndAdjustUV2FromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x9FB600", Offset = "0x9FB600", VA = "0x9FB600", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x9FB610", Offset = "0x9FB610", VA = "0x9FB610", Slot = "58")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x9FB94C", Offset = "0x9FB94C", VA = "0x9FB94C", Slot = "60")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x9FBCAC", Offset = "0x9FBCAC", VA = "0x9FBCAC")]
		private int _getNumBones(Renderer r)
		{
			return default(int);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x9FBE44", Offset = "0x9FBE44", VA = "0x9FBE44")]
		private Transform[] _getBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x9FBE50", Offset = "0x9FBE50", VA = "0x9FBE50", Slot = "51")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x9FBF74", Offset = "0x9FBF74", VA = "0x9FBF74", Slot = "63")]
		public virtual void ApplyShowHide()
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x9FCE1C", Offset = "0x9FCE1C", VA = "0x9FCE1C", Slot = "52")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x9FCB68", Offset = "0x9FCB68", VA = "0x9FCB68")]
		private int _numNonZeroLengthSubmeshTris(SerializableIntArray[] subTris)
		{
			return default(int);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x9FCBF8", Offset = "0x9FCBF8", VA = "0x9FCBF8")]
		private void _updateMaterialsOnTargetRenderer(SerializableIntArray[] subTris, int numNonZeroLengthSubmeshTris)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x9FC5C0", Offset = "0x9FC5C0", VA = "0x9FC5C0")]
		public SerializableIntArray[] GetSubmeshTrisWithShowHideApplied()
		{
			return null;
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x9FF100", Offset = "0x9FF100", VA = "0x9FF100", Slot = "53")]
		public override bool UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x9FF14C", Offset = "0x9FF14C", VA = "0x9FF14C")]
		private bool _updateGameObjects(GameObject[] gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x9FF53C", Offset = "0x9FF53C", VA = "0x9FF53C")]
		private bool _updateGameObject(GameObject go, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo, MeshChannelsCache meshChannelCache, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisResultsCache, OrderedDictionary sourceMats2submeshIdx_map, MB2_TextureBakeResults.Material2AtlasRectangleMapper mat2rect_map)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xA00C28", Offset = "0xA00C28", VA = "0xA00C28")]
		public bool ShowHideGameObjects(GameObject[] toShow, GameObject[] toHide)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xA00D20", Offset = "0xA00D20", VA = "0xA00D20", Slot = "54")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xA00F60", Offset = "0xA00F60", VA = "0xA00F60", Slot = "55")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xA01760", Offset = "0xA01760", VA = "0xA01760", Slot = "56")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xA017CC", Offset = "0xA017CC", VA = "0xA017CC", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x9EEDB4", Offset = "0x9EEDB4", VA = "0x9EEDB4")]
		private Mesh NewMesh()
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xA01B6C", Offset = "0xA01B6C", VA = "0xA01B6C", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xA01C1C", Offset = "0xA01C1C", VA = "0xA01C1C", Slot = "42")]
		public override void DisposeRuntimeCreated()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xA01CD8", Offset = "0xA01CD8", VA = "0xA01CD8", Slot = "43")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xA01E00", Offset = "0xA01E00", VA = "0xA01E00", Slot = "44")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x9F7018", Offset = "0x9F7018", VA = "0x9F7018")]
		public bool ValidateTargRendererAndMeshAndResultSceneObj()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x9F73A8", Offset = "0x9F73A8", VA = "0x9F73A8")]
		private OrderedDictionary BuildSourceMatsToSubmeshIdxMap(int numResultMats)
		{
			return null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xA01F84", Offset = "0xA01F84", VA = "0xA01F84")]
		internal static Renderer BuildSceneHierarchPreBake(MB3_MeshCombinerSingle mom, GameObject root, Mesh m, bool createNewChild = false, [Optional] GameObject[] objsToBeAdded)
		{
			return null;
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xA02E40", Offset = "0xA02E40", VA = "0xA02E40")]
		public static void BuildPrefabHierarchy(MB3_MeshCombinerSingle mom, GameObject instantiatedPrefabRoot, Mesh m, bool createNewChild = false, [Optional] GameObject[] objsToBeAdded)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xA02A54", Offset = "0xA02A54", VA = "0xA02A54")]
		private static void _ConfigureSceneHierarch(MB3_MeshCombinerSingle mom, GameObject root, MeshRenderer mr, MeshFilter mf, SkinnedMeshRenderer smr, Mesh m, [Optional] GameObject[] objsToBeAdded)
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xA01620", Offset = "0xA01620", VA = "0xA01620")]
		public void BuildSceneMeshObject([Optional] GameObject[] gos, bool createNewChild = false)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x9F80F0", Offset = "0x9F80F0", VA = "0x9F80F0")]
		private bool IsMirrored(Matrix4x4 tm)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xA0362C", Offset = "0xA0362C", VA = "0xA0362C", Slot = "59")]
		public override void CheckIntegrity()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x9FF010", Offset = "0x9FF010", VA = "0x9FF010")]
		private void _ZeroArray(Vector3[] arr, int idx, int length)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x9F7680", Offset = "0x9F7680", VA = "0x9F7680")]
		private List<MB_DynamicGameObject>[] _buildBoneIdx2dgoMap()
		{
			return null;
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x9F7A50", Offset = "0x9F7A50", VA = "0x9F7A50")]
		private void _CollectBonesToAddForDGO(MB_DynamicGameObject dgo, Dictionary<Transform, int> bone2idx, HashSet<int> boneIdxsToDelete, HashSet<BoneAndBindpose> bonesToAdd, Renderer r, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x9F82A8", Offset = "0x9F82A8", VA = "0x9F82A8")]
		private void _CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes(HashSet<int> boneIdxsToDeleteHS, HashSet<BoneAndBindpose> bonesToAdd, Transform[] nbones, Matrix4x4[] nbindPoses, BoneWeight[] nboneWeights, int totalDeleteVerts)
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x9FA3F4", Offset = "0x9FA3F4", VA = "0x9FA3F4")]
		private void _AddBonesToNewBonesArrayAndAdjustBWIndexes(MB_DynamicGameObject dgo, Renderer r, int vertsIdx, Transform[] nbones, BoneWeight[] nboneWeights, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x9FABA4", Offset = "0x9FABA4", VA = "0x9FABA4")]
		private void _copyUV2unchangedToSeparateRects()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xA03F08", Offset = "0xA03F08", VA = "0xA03F08", Slot = "62")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000184")]
	public class MB3_MultiMeshCombiner : MB3_MeshCombiner
	{
		[Serializable]
		[Token(Token = "0x2000185")]
		public class CombinedMesh
		{
			[Token(Token = "0x4000737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MB3_MeshCombinerSingle combinedMesh;

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int extraSpace;

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int numVertsInListToDelete;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numVertsInListToAdd;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<GameObject> gosToAdd;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> gosToDelete;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<GameObject> gosToUpdate;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool isDirty;

			[Token(Token = "0x600091B")]
			[Address(RVA = "0xA0A208", Offset = "0xA0A208", VA = "0xA0A208")]
			public CombinedMesh(int maxNumVertsInMesh, GameObject resultSceneObject, MB2_LogLevel ll)
			{
			}

			[Token(Token = "0x600091C")]
			[Address(RVA = "0xA0B288", Offset = "0xA0B288", VA = "0xA0B288")]
			public bool isEmpty()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject[] empty;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[] emptyIDs;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<int, CombinedMesh> obj2MeshCombinerMap;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public List<CombinedMesh> meshCombiners;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private int _maxVertsInMesh;

		[Token(Token = "0x170000B2")]
		public override MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x60008F9")]
			[Address(RVA = "0xA06028", Offset = "0xA06028", VA = "0xA06028", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xA06030", Offset = "0xA06030", VA = "0xA06030", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public override MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xA061F4", Offset = "0xA061F4", VA = "0xA061F4", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xA06110", Offset = "0xA06110", VA = "0xA06110", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public int maxVertsInMesh
		{
			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xA061FC", Offset = "0xA061FC", VA = "0xA061FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xA06204", Offset = "0xA06204", VA = "0xA06204")]
			set
			{
			}
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xA05F88", Offset = "0xA05F88", VA = "0xA05F88")]
		public MB3_MultiMeshCombiner()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xA0639C", Offset = "0xA0639C", VA = "0xA0639C", Slot = "46")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xA063F8", Offset = "0xA063F8", VA = "0xA063F8", Slot = "47")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xA064CC", Offset = "0xA064CC", VA = "0xA064CC", Slot = "48")]
		public override int GetNumVerticesFor(int gameObjectID)
		{
			return default(int);
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xA06588", Offset = "0xA06588", VA = "0xA06588", Slot = "45")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xA066B4", Offset = "0xA066B4", VA = "0xA066B4", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xA06778", Offset = "0xA06778", VA = "0xA06778", Slot = "56")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xA067FC", Offset = "0xA067FC", VA = "0xA067FC")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xA0697C", Offset = "0xA0697C", VA = "0xA0697C", Slot = "51")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xA06AB8", Offset = "0xA06AB8", VA = "0xA06AB8", Slot = "52")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xA06CD0", Offset = "0xA06CD0", VA = "0xA06CD0", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xA06DA8", Offset = "0xA06DA8", VA = "0xA06DA8", Slot = "58")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xA06E80", Offset = "0xA06E80", VA = "0xA06E80", Slot = "60")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xA06F58", Offset = "0xA06F58", VA = "0xA06F58", Slot = "53")]
		public override bool UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xA073FC", Offset = "0xA073FC", VA = "0xA073FC", Slot = "54")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xA0763C", Offset = "0xA0763C", VA = "0xA0763C", Slot = "55")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xA07BCC", Offset = "0xA07BCC", VA = "0xA07BCC")]
		private bool _validate(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xA083EC", Offset = "0xA083EC", VA = "0xA083EC")]
		private void _distributeAmongBakers(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xA08FEC", Offset = "0xA08FEC", VA = "0xA08FEC")]
		private bool _bakeStep1(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xA0A678", Offset = "0xA0A678", VA = "0xA0A678", Slot = "49")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xA0A8FC", Offset = "0xA0A8FC", VA = "0xA0A8FC", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xA0A9F0", Offset = "0xA0A9F0", VA = "0xA0A9F0", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xA0AA00", Offset = "0xA0AA00", VA = "0xA0AA00", Slot = "42")]
		public override void DisposeRuntimeCreated()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xA0AAD8", Offset = "0xA0AAD8", VA = "0xA0AAD8", Slot = "43")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xA0AD0C", Offset = "0xA0AD0C", VA = "0xA0AD0C", Slot = "44")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xA0A340", Offset = "0xA0A340", VA = "0xA0A340")]
		private void _setMBValues(MB3_MeshCombinerSingle targ)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xA0AF88", Offset = "0xA0AF88", VA = "0xA0AF88", Slot = "62")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xA0B0DC", Offset = "0xA0B0DC", VA = "0xA0B0DC", Slot = "59")]
		public override void CheckIntegrity()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class PriorityQueue<TPriority, TValue> : ICollection<KeyValuePair<TPriority, TValue>>, IEnumerable, IEnumerable<KeyValuePair<TPriority, TValue>>
	{
		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<KeyValuePair<TPriority, TValue>> _baseHeap;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IComparer<TPriority> _comparer;

		[Token(Token = "0x170000B5")]
		public bool IsEmpty
		{
			[Token(Token = "0x600092A")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B6")]
		public int Count
		{
			[Token(Token = "0x6000934")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B7")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000936")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600091D")]
		public PriorityQueue()
		{
		}

		[Token(Token = "0x600091E")]
		public PriorityQueue(int capacity)
		{
		}

		[Token(Token = "0x600091F")]
		public PriorityQueue(int capacity, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000920")]
		public PriorityQueue(IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000921")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data)
		{
		}

		[Token(Token = "0x6000922")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000923")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2)
		{
			return null;
		}

		[Token(Token = "0x6000924")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2, IComparer<TPriority> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000925")]
		public void Enqueue(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000926")]
		public KeyValuePair<TPriority, TValue> Dequeue()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000927")]
		public TValue DequeueValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000928")]
		public KeyValuePair<TPriority, TValue> Peek()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000929")]
		public TValue PeekValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x600092B")]
		private void ExchangeElements(int pos1, int pos2)
		{
		}

		[Token(Token = "0x600092C")]
		private void Insert(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x600092D")]
		private int HeapifyFromEndToBeginning(int pos)
		{
			return default(int);
		}

		[Token(Token = "0x600092E")]
		private void DeleteRoot()
		{
		}

		[Token(Token = "0x600092F")]
		private void HeapifyFromBeginningToEnd(int pos)
		{
		}

		[Token(Token = "0x6000930")]
		public void Add(KeyValuePair<TPriority, TValue> item)
		{
		}

		[Token(Token = "0x6000931")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000932")]
		public bool Contains(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000933")]
		public bool TryFindValue(TPriority item, out TValue foundVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000935")]
		public void CopyTo(KeyValuePair<TPriority, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000937")]
		public bool Remove(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000938")]
		public IEnumerator<KeyValuePair<TPriority, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000939")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000187")]
	public struct DVector2
	{
		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static double epsilon;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x6AC370", Offset = "0x6AC370", VA = "0x6AC370")]
		public DVector2(double xx, double yy)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x6AC378", Offset = "0x6AC378", VA = "0x6AC378")]
		public DVector2(DVector2 r)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x6AC380", Offset = "0x6AC380", VA = "0x6AC380")]
		public static DVector2 Subtract(DVector2 a, DVector2 b)
		{
			return default(DVector2);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x6AC38C", Offset = "0x6AC38C", VA = "0x6AC38C")]
		public Vector2 GetVector2()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x6AC3C4", Offset = "0x6AC3C4", VA = "0x6AC3C4")]
		public bool IsContainedIn(DRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x6AC54C", Offset = "0x6AC54C", VA = "0x6AC54C")]
		public bool IsContainedInWithMargin(DRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x6AC61C", Offset = "0x6AC61C", VA = "0x6AC61C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x6AC6D8", Offset = "0x6AC6D8", VA = "0x6AC6D8")]
		public string ToString(string formatS)
		{
			return null;
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x6AC6E0", Offset = "0x6AC6E0", VA = "0x6AC6E0")]
		public static double Distance(DVector2 a, DVector2 b)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000188")]
	public struct DRect
	{
		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double width;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double height;

		[Token(Token = "0x170000B8")]
		public DVector2 minD
		{
			[Token(Token = "0x600094A")]
			[Address(RVA = "0x6ABC74", Offset = "0x6ABC74", VA = "0x6ABC74")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x170000B9")]
		public DVector2 maxD
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0x6ABC7C", Offset = "0x6ABC7C", VA = "0x6ABC7C")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x170000BA")]
		public Vector2 min
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0x6ABCC8", Offset = "0x6ABCC8", VA = "0x6ABCC8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000BB")]
		public Vector2 max
		{
			[Token(Token = "0x600094D")]
			[Address(RVA = "0x6ABD00", Offset = "0x6ABD00", VA = "0x6ABD00")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000BC")]
		public Vector2 size
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0x6ABD7C", Offset = "0x6ABD7C", VA = "0x6ABD7C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000BD")]
		public DVector2 center
		{
			[Token(Token = "0x600094F")]
			[Address(RVA = "0x6ABDD4", Offset = "0x6ABDD4", VA = "0x6ABDD4")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x6ABB78", Offset = "0x6ABB78", VA = "0x6ABB78")]
		public DRect(Rect r)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x6ABB9C", Offset = "0x6ABB9C", VA = "0x6ABB9C")]
		public DRect(Vector2 o, Vector2 s)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x6ABBC4", Offset = "0x6ABBC4", VA = "0x6ABBC4")]
		public DRect(DRect r)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x6ABBEC", Offset = "0x6ABBEC", VA = "0x6ABBEC")]
		public DRect(float xx, float yy, float w, float h)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x6ABC14", Offset = "0x6ABC14", VA = "0x6ABC14")]
		public DRect(double xx, double yy, double w, double h)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x6ABC64", Offset = "0x6ABC64", VA = "0x6ABC64")]
		public Rect GetRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x6ABEFC", Offset = "0x6ABEFC", VA = "0x6ABEFC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x6ABF04", Offset = "0x6ABF04", VA = "0x6ABF04")]
		public static bool operator ==(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x6ABFA4", Offset = "0x6ABFA4", VA = "0x6ABFA4")]
		public static bool operator !=(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x6AC248", Offset = "0x6AC248", VA = "0x6AC248", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x6AC250", Offset = "0x6AC250", VA = "0x6AC250")]
		public void Expand(float amt)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x6AC2F8", Offset = "0x6AC2F8", VA = "0x6AC2F8")]
		public bool Encloses(DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x6AC368", Offset = "0x6AC368", VA = "0x6AC368", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000189")]
	public class MB3_UVTransformUtility
	{
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x7884A4", Offset = "0x7884A4", VA = "0x7884A4")]
		public MB3_UVTransformUtility()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x7884AC", Offset = "0x7884AC", VA = "0x7884AC")]
		public static void Test()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x7889C4", Offset = "0x7889C4", VA = "0x7889C4")]
		public static float TransformX(DRect r, double x)
		{
			return default(float);
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x788914", Offset = "0x788914", VA = "0x788914")]
		public static DRect CombineTransforms(ref DRect r1, ref DRect r2)
		{
			return default(DRect);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x7889D4", Offset = "0x7889D4", VA = "0x7889D4")]
		public static Rect CombineTransforms(ref Rect r1, ref Rect r2)
		{
			return default(Rect);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x7888EC", Offset = "0x7888EC", VA = "0x7888EC")]
		public static DRect InverseTransform(ref DRect t)
		{
			return default(DRect);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x788AF0", Offset = "0x788AF0", VA = "0x788AF0")]
		public static DRect GetShiftTransformToFitBinA(ref DRect A, ref DRect B)
		{
			return default(DRect);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x788C30", Offset = "0x788C30", VA = "0x788C30")]
		public static DRect GetEncapsulatingRectShifted(ref DRect uvRect1, ref DRect willBeIn)
		{
			return default(DRect);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x788DF4", Offset = "0x788DF4", VA = "0x788DF4")]
		public static DRect GetEncapsulatingRect(ref DRect uvRect1, ref DRect uvRect2)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x788E90", Offset = "0x788E90", VA = "0x788E90")]
		public static bool RectContainsShifted(ref DRect bucket, ref DRect tryFit)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x788FE8", Offset = "0x788FE8", VA = "0x788FE8")]
		public static bool RectContainsShifted(ref Rect bucket, ref Rect tryFit)
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x7892E0", Offset = "0x7892E0", VA = "0x7892E0")]
		public static bool LineSegmentContainsShifted(float bucketOffset, float bucketLength, float tryFitOffset, float tryFitLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x7893E0", Offset = "0x7893E0", VA = "0x7893E0")]
		public static bool RectContains(ref DRect bigRect, ref DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x789160", Offset = "0x789160", VA = "0x789160")]
		public static bool RectContains(ref Rect bigRect, ref Rect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x788970", Offset = "0x788970", VA = "0x788970")]
		public static Vector2 TransformPoint(ref DRect r, Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x789480", Offset = "0x789480", VA = "0x789480")]
		public static DVector2 TransformPoint(ref DRect r, DVector2 p)
		{
			return default(DVector2);
		}
	}
	[Serializable]
	[Token(Token = "0x200018A")]
	public struct AtlasPadding
	{
		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int topBottom;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int leftRight;

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x6ABAF0", Offset = "0x6ABAF0", VA = "0x6ABAF0")]
		public AtlasPadding(int p)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x6ABAF8", Offset = "0x6ABAF8", VA = "0x6ABAF8")]
		public AtlasPadding(int px, int py)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018B")]
	public class AtlasPackingResult
	{
		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int atlasX;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int atlasY;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int usedW;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int usedH;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rect[] rects;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AtlasPadding[] padding;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int[] srcImgIdxs;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public object data;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x6AB57C", Offset = "0x6AB57C", VA = "0x6AB57C")]
		public AtlasPackingResult(AtlasPadding[] pds)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x6AB5A8", Offset = "0x6AB5A8", VA = "0x6AB5A8")]
		public void CalcUsedWidthAndHeight()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x6AB868", Offset = "0x6AB868", VA = "0x6AB868", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200018C")]
	public abstract class MB2_TexturePacker
	{
		[Token(Token = "0x200018D")]
		internal enum NodeType
		{
			[Token(Token = "0x4000755")]
			Container,
			[Token(Token = "0x4000756")]
			maxDim,
			[Token(Token = "0x4000757")]
			regular
		}

		[Token(Token = "0x200018E")]
		internal class PixRect
		{
			[Token(Token = "0x4000758")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int x;

			[Token(Token = "0x4000759")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int y;

			[Token(Token = "0x400075A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int w;

			[Token(Token = "0x400075B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int h;

			[Token(Token = "0x6000973")]
			[Address(RVA = "0x6B37A8", Offset = "0x6B37A8", VA = "0x6B37A8")]
			public PixRect()
			{
			}

			[Token(Token = "0x6000974")]
			[Address(RVA = "0x6B37B0", Offset = "0x6B37B0", VA = "0x6B37B0")]
			public PixRect(int xx, int yy, int ww, int hh)
			{
			}

			[Token(Token = "0x6000975")]
			[Address(RVA = "0x6B37FC", Offset = "0x6B37FC", VA = "0x6B37FC", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x200018F")]
		internal class Image
		{
			[Token(Token = "0x400075C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int imgId;

			[Token(Token = "0x400075D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int w;

			[Token(Token = "0x400075E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int h;

			[Token(Token = "0x400075F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int x;

			[Token(Token = "0x4000760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int y;

			[Token(Token = "0x6000976")]
			[Address(RVA = "0x6B3458", Offset = "0x6B3458", VA = "0x6B3458")]
			public Image(int id, int tw, int th, AtlasPadding padding, int minImageSizeX, int minImageSizeY)
			{
			}

			[Token(Token = "0x6000977")]
			[Address(RVA = "0x6B3530", Offset = "0x6B3530", VA = "0x6B3530")]
			public Image(Image im)
			{
			}
		}

		[Token(Token = "0x2000190")]
		internal class ImgIDComparer : IComparer<Image>
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0x6B3738", Offset = "0x6B3738", VA = "0x6B3738")]
			public ImgIDComparer()
			{
			}

			[Token(Token = "0x6000979")]
			[Address(RVA = "0x6B3740", Offset = "0x6B3740", VA = "0x6B3740", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000191")]
		internal class ImageHeightComparer : IComparer<Image>
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0x6B3658", Offset = "0x6B3658", VA = "0x6B3658")]
			public ImageHeightComparer()
			{
			}

			[Token(Token = "0x600097B")]
			[Address(RVA = "0x6B3660", Offset = "0x6B3660", VA = "0x6B3660", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000192")]
		internal class ImageWidthComparer : IComparer<Image>
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0x6B36C8", Offset = "0x6B36C8", VA = "0x6B36C8")]
			public ImageWidthComparer()
			{
			}

			[Token(Token = "0x600097D")]
			[Address(RVA = "0x6B36D0", Offset = "0x6B36D0", VA = "0x6B36D0", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000193")]
		internal class ImageAreaComparer : IComparer<Image>
		{
			[Token(Token = "0x600097E")]
			[Address(RVA = "0x6B35CC", Offset = "0x6B35CC", VA = "0x6B35CC")]
			public ImageAreaComparer()
			{
			}

			[Token(Token = "0x600097F")]
			[Address(RVA = "0x6B35D4", Offset = "0x6B35D4", VA = "0x6B35D4", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool atlasMustBePowerOfTwo;

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x6B2ABC", Offset = "0x6B2ABC", VA = "0x6B2ABC")]
		protected MB2_TexturePacker()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x6B2AD4", Offset = "0x6B2AD4", VA = "0x6B2AD4")]
		public static int RoundToNearestPositivePowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x6B2B6C", Offset = "0x6B2B6C", VA = "0x6B2B6C")]
		public static int CeilToNearestPowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x600096F")]
		public abstract AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding);

		[Token(Token = "0x6000970")]
		public abstract AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas);

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x6B2BF8", Offset = "0x6B2BF8", VA = "0x6B2BF8")]
		internal bool ScaleAtlasToFitMaxDim(Vector2 rootWH, List<Image> images, int maxDimensionX, int maxDimensionY, AtlasPadding padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, ref int outW, ref int outH, out float padX, out float padY, out int newMinSizeX, out int newMinSizeY)
		{
			return default(bool);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x6B31A0", Offset = "0x6B31A0", VA = "0x6B31A0")]
		public void normalizeRects(AtlasPackingResult rr, AtlasPadding padding)
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class MB2_TexturePackerRegular : MB2_TexturePacker
	{
		[Token(Token = "0x2000195")]
		private class ProbeResult
		{
			[Token(Token = "0x4000763")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int w;

			[Token(Token = "0x4000764")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int h;

			[Token(Token = "0x4000765")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int outW;

			[Token(Token = "0x4000766")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int outH;

			[Token(Token = "0x4000767")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Node root;

			[Token(Token = "0x4000768")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool largerOrEqualToMaxDim;

			[Token(Token = "0x4000769")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float efficiency;

			[Token(Token = "0x400076A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float squareness;

			[Token(Token = "0x400076B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float totalAtlasArea;

			[Token(Token = "0x400076C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int numAtlases;

			[Token(Token = "0x600098E")]
			[Address(RVA = "0x6BC2B0", Offset = "0x6BC2B0", VA = "0x6BC2B0")]
			public ProbeResult()
			{
			}

			[Token(Token = "0x600098F")]
			[Address(RVA = "0x6B8254", Offset = "0x6B8254", VA = "0x6B8254")]
			public void Set(int ww, int hh, int outw, int outh, Node r, bool fits, float e, float sq)
			{
			}

			[Token(Token = "0x6000990")]
			[Address(RVA = "0x6BC2B8", Offset = "0x6BC2B8", VA = "0x6BC2B8")]
			public float GetScore(bool doPowerOfTwoScore)
			{
				return default(float);
			}

			[Token(Token = "0x6000991")]
			[Address(RVA = "0x6BC36C", Offset = "0x6BC36C", VA = "0x6BC36C")]
			public void PrintTree()
			{
			}
		}

		[Token(Token = "0x2000196")]
		internal class Node
		{
			[Token(Token = "0x400076D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NodeType isFullAtlas;

			[Token(Token = "0x400076E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Node[] child;

			[Token(Token = "0x400076F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal PixRect r;

			[Token(Token = "0x4000770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Image img;

			[Token(Token = "0x4000771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ProbeResult bestRoot;

			[Token(Token = "0x6000992")]
			[Address(RVA = "0x6B7A90", Offset = "0x6B7A90", VA = "0x6B7A90")]
			internal Node(NodeType rootType)
			{
			}

			[Token(Token = "0x6000993")]
			[Address(RVA = "0x6BC2F0", Offset = "0x6BC2F0", VA = "0x6BC2F0")]
			private bool isLeaf()
			{
				return default(bool);
			}

			[Token(Token = "0x6000994")]
			[Address(RVA = "0x6B7B10", Offset = "0x6B7B10", VA = "0x6B7B10")]
			internal Node Insert(Image im, bool handed)
			{
				return null;
			}
		}

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ProbeResult bestRoot;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int atlasY;

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x6B68E4", Offset = "0x6B68E4", VA = "0x6B68E4")]
		public MB2_TexturePackerRegular()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x6B68FC", Offset = "0x6B68FC", VA = "0x6B68FC")]
		private static void printTree(Node r, string spc)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x6B6CB4", Offset = "0x6B6CB4", VA = "0x6B6CB4")]
		private static void flattenTree(Node r, List<Image> putHere)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x6B6E50", Offset = "0x6B6E50", VA = "0x6B6E50")]
		private static void drawGizmosNode(Node r)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x6B716C", Offset = "0x6B716C", VA = "0x6B716C")]
		private static Texture2D createFilledTex(Color c, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x6B7278", Offset = "0x6B7278", VA = "0x6B7278")]
		public void DrawGizmos()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x6B735C", Offset = "0x6B735C", VA = "0x6B735C")]
		private bool ProbeSingleAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDimX, int maxAtlasDimY, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x6B8270", Offset = "0x6B8270", VA = "0x6B8270")]
		private bool ProbeMultiAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDimX, int maxAtlasDimY, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x6B806C", Offset = "0x6B806C", VA = "0x6B806C")]
		internal void GetExtent(Node r, ref int x, ref int y)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x6B8824", Offset = "0x6B8824", VA = "0x6B8824")]
		private int StepWidthHeight(int oldVal, int step, int maxDim)
		{
			return default(int);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x6B8854", Offset = "0x6B8854", VA = "0x6B8854", Slot = "4")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int atPadding)
		{
			return null;
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x6B8964", Offset = "0x6B8964", VA = "0x6B8964", Slot = "5")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas)
		{
			return null;
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x6BA11C", Offset = "0x6BA11C", VA = "0x6BA11C")]
		private AtlasPackingResult _GetRectsSingleAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x6B8B78", Offset = "0x6B8B78", VA = "0x6B8B78")]
		private AtlasPackingResult[] _GetRectsMultiAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}
	}
	[Token(Token = "0x2000197")]
	public class MB2_TexturePackerHorizontalVert : MB2_TexturePacker
	{
		[Token(Token = "0x2000198")]
		public enum TexturePackingOrientation
		{
			[Token(Token = "0x4000775")]
			horizontal,
			[Token(Token = "0x4000776")]
			vertical
		}

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TexturePackingOrientation packingOrientation;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool stretchImagesToEdges;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x6B3A1C", Offset = "0x6B3A1C", VA = "0x6B3A1C")]
		public MB2_TexturePackerHorizontalVert()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x6B3A38", Offset = "0x6B3A38", VA = "0x6B3A38", Slot = "4")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding)
		{
			return null;
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x6B3B58", Offset = "0x6B3B58", VA = "0x6B3B58", Slot = "5")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas)
		{
			return null;
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x6B5550", Offset = "0x6B5550", VA = "0x6B5550")]
		private AtlasPackingResult _GetRectsSingleAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x6B3DA4", Offset = "0x6B3DA4", VA = "0x6B3DA4")]
		private AtlasPackingResult[] _GetRectsMultiAtlasVertical(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x6B4978", Offset = "0x6B4978", VA = "0x6B4978")]
		private AtlasPackingResult[] _GetRectsMultiAtlasHorizontal(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x6B66FC", Offset = "0x6B66FC", VA = "0x6B66FC")]
		private Image PopLargestThatFits(List<Image> images, int spaceRemaining, int maxDim, bool emptyAtlas)
		{
			return null;
		}
	}
}
[Token(Token = "0x2000199")]
public class MB_TextureCombinerRenderTexture
{
	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mat;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture _destinationTexture;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera myCamera;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _padding;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool _isNormalMap;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool _fixOutOfBoundsUVs;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	private bool _doRenderAtlas;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rect[] rs;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<MB_TexSet> textureSets;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int indexOfTexSetToRender;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ShaderTextureProperty _texPropertyName;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MB3_TextureCombinerNonTextureProperties _resultMaterialTextureBlender;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Texture2D targTex;

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x6855BC", Offset = "0x6855BC", VA = "0x6855BC")]
	public MB_TextureCombinerRenderTexture()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x6855CC", Offset = "0x6855CC", VA = "0x6855CC")]
	public Texture2D DoRenderAtlas(GameObject gameObject, int width, int height, int padding, Rect[] rss, List<MB_TexSet> textureSetss, int indexOfTexSetToRenders, ShaderTextureProperty texPropertyname, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender, bool isNormalMap, bool fixOutOfBoundsUVs, bool considerNonTextureProperties, MB3_TextureCombiner texCombiner, MB2_LogLevel LOG_LEV)
	{
		return null;
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x685CB8", Offset = "0x685CB8", VA = "0x685CB8")]
	public void OnRenderObject()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x688560", Offset = "0x688560", VA = "0x688560")]
	private Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
	{
		return default(Color32);
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x686DC8", Offset = "0x686DC8", VA = "0x686DC8")]
	public bool YisFlipped()
	{
		return default(bool);
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x687028", Offset = "0x687028", VA = "0x687028")]
	private void CopyScaledAndTiledToAtlas(MB_TexSet texSet, MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, Rect rec, ShaderTextureProperty texturePropertyName, MB3_TextureCombinerNonTextureProperties resultMatTexBlender, bool yIsFlipped)
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x6881B8", Offset = "0x6881B8", VA = "0x6881B8")]
	private void _printTexture(Texture2D t)
	{
	}
}
[Token(Token = "0x200019A")]
[ExecuteInEditMode]
public class MB3_AtlasPackerRenderTexture : MonoBehaviour
{
	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MB_TextureCombinerRenderTexture fastRenderer;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _doRenderAtlas;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int width;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int height;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int padding;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isNormalMap;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool fixOutOfBoundsUVs;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool considerNonTextureProperties;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rect[] rects;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D tex1;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<MB_TexSet> textureSets;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int indexOfTexSetToRender;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ShaderTextureProperty texPropertyName;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D testTex;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material testMat;

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x68BA40", Offset = "0x68BA40", VA = "0x68BA40")]
	public MB3_AtlasPackerRenderTexture()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x68BA50", Offset = "0x68BA50", VA = "0x68BA50")]
	public Texture2D OnRenderAtlas(MB3_TextureCombiner combiner)
	{
		return null;
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x68BB70", Offset = "0x68BB70", VA = "0x68BB70")]
	private void OnRenderObject()
	{
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x200019B")]
	internal interface MB_ITextureCombinerPacker
	{
		[Token(Token = "0x60009A6")]
		IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x60009A7")]
		AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x60009A8")]
		IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);
	}
	[Token(Token = "0x200019C")]
	internal abstract class MB3_TextureCombinerPackerRoot : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x2000575")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D05C", Offset = "0x56D05C")]
		private sealed class <ConvertTexturesToReadableFormats>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001776")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001777")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001778")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x400177A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x17000483")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600234F")]
				[Address(RVA = "0x77D408", Offset = "0x77D408", VA = "0x77D408", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000484")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002350")]
				[Address(RVA = "0x77D410", Offset = "0x77D410", VA = "0x77D410", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600234D")]
			[Address(RVA = "0x77D0D8", Offset = "0x77D0D8", VA = "0x77D0D8")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>c__Iterator0()
			{
			}

			[Token(Token = "0x600234E")]
			[Address(RVA = "0x77D0E8", Offset = "0x77D0E8", VA = "0x77D0E8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002351")]
			[Address(RVA = "0x77D418", Offset = "0x77D418", VA = "0x77D418", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002352")]
			[Address(RVA = "0x77D41C", Offset = "0x77D41C", VA = "0x77D41C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x77CFC4", Offset = "0x77CFC4", VA = "0x77CFC4")]
		protected MB3_TextureCombinerPackerRoot()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x7792B8", Offset = "0x7792B8", VA = "0x7792B8")]
		internal static void CreateTemporaryTexturesForAtlas(List<MB_TexSet> distinctMaterialTextures, MB3_TextureCombiner combiner, int propIdx, MB3_TextureCombinerPipeline.TexturePipelineData data)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x777B00", Offset = "0x777B00", VA = "0x777B00")]
		public static AtlasPackingResult[] CalculateAtlasRectanglesStatic(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x77CFCC", Offset = "0x77CFCC", VA = "0x77CFCC")]
		public static void MakeProceduralTexturesReadable(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x77D03C", Offset = "0x77D03C", VA = "0x77D03C", Slot = "7")]
		[DebuggerHidden]
		public virtual IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x77D0E0", Offset = "0x77D0E0", VA = "0x77D0E0", Slot = "8")]
		public virtual AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		public abstract IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);
	}
	[Serializable]
	[Token(Token = "0x200019D")]
	public class ShaderTextureProperty
	{
		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isNormalMap;

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x7832A0", Offset = "0x7832A0", VA = "0x7832A0")]
		public ShaderTextureProperty(string n, bool norm)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x78C660", Offset = "0x78C660", VA = "0x78C660", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x78C730", Offset = "0x78C730", VA = "0x78C730", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x786654", Offset = "0x786654", VA = "0x786654")]
		public static string[] GetNames(List<ShaderTextureProperty> props)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200019E")]
	public class MB3_TextureCombiner
	{
		[Token(Token = "0x200019F")]
		private class TemporaryTexture
		{
			[Token(Token = "0x40007AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string property;

			[Token(Token = "0x40007AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Texture2D texture;

			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xA0CB84", Offset = "0xA0CB84", VA = "0xA0CB84")]
			public TemporaryTexture(string prop, Texture2D tex)
			{
			}
		}

		[Token(Token = "0x20001A0")]
		public class CombineTexturesIntoAtlasesCoroutineResult
		{
			[Token(Token = "0x40007AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool success;

			[Token(Token = "0x40007AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool isFinished;

			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xA0BA98", Offset = "0xA0BA98", VA = "0xA0BA98")]
			public CombineTexturesIntoAtlasesCoroutineResult()
			{
			}
		}

		[Token(Token = "0x2000576")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D1FC", Offset = "0x56D1FC")]
		private sealed class <CombineTexturesIntoAtlasesCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400177B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CombineTexturesIntoAtlasesCoroutineResult coroutineResult;

			[Token(Token = "0x400177C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float maxTimePerFrame;

			[Token(Token = "0x400177D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400177E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x400177F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Material resultMaterial;

			[Token(Token = "0x4001780")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal List<GameObject> objsToMesh;

			[Token(Token = "0x4001781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal List<AtlasPackingResult> packingResults;

			[Token(Token = "0x4001784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal bool onlyPackRects;

			[Token(Token = "0x4001785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
			internal bool splitAtlasWhenPackingIfTooBig;

			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal MB3_TextureCombiner $this;

			[Token(Token = "0x4001787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal object $current;

			[Token(Token = "0x4001788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal bool $disposing;

			[Token(Token = "0x4001789")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal int $PC;

			[Token(Token = "0x17000485")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002355")]
				[Address(RVA = "0xA11118", Offset = "0xA11118", VA = "0xA11118", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000486")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002356")]
				[Address(RVA = "0xA11120", Offset = "0xA11120", VA = "0xA11120", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002353")]
			[Address(RVA = "0xA0BD98", Offset = "0xA0BD98", VA = "0xA0BD98")]
			[DebuggerHidden]
			public <CombineTexturesIntoAtlasesCoroutine>c__Iterator0()
			{
			}

			[Token(Token = "0x6002354")]
			[Address(RVA = "0xA10EBC", Offset = "0xA10EBC", VA = "0xA10EBC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002357")]
			[Address(RVA = "0xA11128", Offset = "0xA11128", VA = "0xA11128", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002358")]
			[Address(RVA = "0xA1113C", Offset = "0xA1113C", VA = "0xA1113C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000577")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D25C", Offset = "0x56D25C")]
		private sealed class <_CombineTexturesIntoAtlases>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400178A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Stopwatch <sw>__0;

			[Token(Token = "0x400178B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400178C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<GameObject> objsToMesh;

			[Token(Token = "0x400178D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x400178E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400178F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Material resultMaterial;

			[Token(Token = "0x4001790")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData <data>__1;

			[Token(Token = "0x4001792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool onlyPackRects;

			[Token(Token = "0x4001793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
			internal bool splitAtlasWhenPackingIfTooBig;

			[Token(Token = "0x4001794")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal List<AtlasPackingResult> atlasPackingResult;

			[Token(Token = "0x4001795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001796")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal MB3_TextureCombiner $this;

			[Token(Token = "0x4001797")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal object $current;

			[Token(Token = "0x4001798")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal bool $disposing;

			[Token(Token = "0x4001799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal int $PC;

			[Token(Token = "0x17000487")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600235B")]
				[Address(RVA = "0xA10E18", Offset = "0xA10E18", VA = "0xA10E18", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000488")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600235C")]
				[Address(RVA = "0xA10E20", Offset = "0xA10E20", VA = "0xA10E20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002359")]
			[Address(RVA = "0xA0BDA0", Offset = "0xA0BDA0", VA = "0xA0BDA0")]
			[DebuggerHidden]
			public <_CombineTexturesIntoAtlases>c__Iterator1()
			{
			}

			[Token(Token = "0x600235A")]
			[Address(RVA = "0xA101EC", Offset = "0xA101EC", VA = "0xA101EC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600235D")]
			[Address(RVA = "0xA10E28", Offset = "0xA10E28", VA = "0xA10E28", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600235E")]
			[Address(RVA = "0xA10E58", Offset = "0xA10E58", VA = "0xA10E58", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x600235F")]
			[Address(RVA = "0xA10AC8", Offset = "0xA10AC8", VA = "0xA10AC8")]
			private void <>__Finally0()
			{
			}
		}

		[Token(Token = "0x2000578")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D2BC", Offset = "0x56D2BC")]
		private sealed class <__CombineTexturesIntoAtlases>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400179A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x400179B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400179C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<GameObject> <usedObjsToMesh>__0;

			[Token(Token = "0x400179D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400179F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal StringBuilder <report>__0;

			[Token(Token = "0x40017A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal MB_ITextureCombinerPacker <texturePaker>__0;

			[Token(Token = "0x40017A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool splitAtlasWhenPackingIfTooBig;

			[Token(Token = "0x40017A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal AtlasPackingResult[] <uvRects>__0;

			[Token(Token = "0x40017A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x40017A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal MB3_TextureCombiner $this;

			[Token(Token = "0x40017A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal object $current;

			[Token(Token = "0x40017A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal bool $disposing;

			[Token(Token = "0x40017A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal int $PC;

			[Token(Token = "0x17000489")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002362")]
				[Address(RVA = "0xA0FA6C", Offset = "0xA0FA6C", VA = "0xA0FA6C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700048A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002363")]
				[Address(RVA = "0xA0FA74", Offset = "0xA0FA74", VA = "0xA0FA74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002360")]
			[Address(RVA = "0xA0C800", Offset = "0xA0C800", VA = "0xA0C800")]
			[DebuggerHidden]
			public <__CombineTexturesIntoAtlases>c__Iterator2()
			{
			}

			[Token(Token = "0x6002361")]
			[Address(RVA = "0xA0EE6C", Offset = "0xA0EE6C", VA = "0xA0EE6C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002364")]
			[Address(RVA = "0xA0FA7C", Offset = "0xA0FA7C", VA = "0xA0FA7C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002365")]
			[Address(RVA = "0xA0FA90", Offset = "0xA0FA90", VA = "0xA0FA90", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000579")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D31C", Offset = "0x56D31C")]
		private sealed class <__RunTexturePackerOnly>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal List<GameObject> <usedObjsToMesh>__0;

			[Token(Token = "0x40017AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x40017AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x40017AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB_ITextureCombinerPacker <texturePaker>__0;

			[Token(Token = "0x40017AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool splitAtlasWhenPackingIfTooBig;

			[Token(Token = "0x40017AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal AtlasPackingResult[] <aprs>__0;

			[Token(Token = "0x40017AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal List<AtlasPackingResult> packingResult;

			[Token(Token = "0x40017B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal MB3_TextureCombiner $this;

			[Token(Token = "0x40017B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal object $current;

			[Token(Token = "0x40017B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal bool $disposing;

			[Token(Token = "0x40017B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal int $PC;

			[Token(Token = "0x1700048B")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002368")]
				[Address(RVA = "0xA10164", Offset = "0xA10164", VA = "0xA10164", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700048C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002369")]
				[Address(RVA = "0xA1016C", Offset = "0xA1016C", VA = "0xA1016C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002366")]
			[Address(RVA = "0xA0C8F8", Offset = "0xA0C8F8", VA = "0xA0C8F8")]
			[DebuggerHidden]
			public <__RunTexturePackerOnly>c__Iterator3()
			{
			}

			[Token(Token = "0x6002367")]
			[Address(RVA = "0xA0FAF4", Offset = "0xA0FAF4", VA = "0xA0FAF4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600236A")]
			[Address(RVA = "0xA10174", Offset = "0xA10174", VA = "0xA10174", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600236B")]
			[Address(RVA = "0xA10188", Offset = "0xA10188", VA = "0xA10188", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected int _atlasPadding;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected int _maxAtlasSize;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected int _maxAtlasWidthOverride;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected int _maxAtlasHeightOverride;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool _useMaxAtlasWidthOverride;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		protected bool _useMaxAtlasHeightOverride;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[SerializeField]
		protected bool _resizePowerOfTwoTextures;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[SerializeField]
		protected bool _fixOutOfBoundsUVs;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		protected int _maxTilingBakeSize;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected bool _saveAtlasesAsAssets;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected MB2_PackingAlgorithmEnum _packingAlgorithm;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected bool _meshBakerTexturePackerForcePowerOfTwo;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected List<ShaderTextureProperty> _customShaderPropNames;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected bool _normalizeTexelDensity;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		protected bool _considerNonTextureProperties;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<TemporaryTexture> _temporaryTextures;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool _RunCorutineWithoutPauseIsRunning;

		[Token(Token = "0x170000BE")]
		public MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x60009B5")]
			[Address(RVA = "0xA0B518", Offset = "0xA0B518", VA = "0xA0B518")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B6")]
			[Address(RVA = "0xA0B520", Offset = "0xA0B520", VA = "0xA0B520")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public int atlasPadding
		{
			[Token(Token = "0x60009B7")]
			[Address(RVA = "0xA0B528", Offset = "0xA0B528", VA = "0xA0B528")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0xA0B530", Offset = "0xA0B530", VA = "0xA0B530")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public int maxAtlasSize
		{
			[Token(Token = "0x60009B9")]
			[Address(RVA = "0xA0B538", Offset = "0xA0B538", VA = "0xA0B538")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009BA")]
			[Address(RVA = "0xA0B540", Offset = "0xA0B540", VA = "0xA0B540")]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public virtual int maxAtlasWidthOverride
		{
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0xA0B548", Offset = "0xA0B548", VA = "0xA0B548", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0xA0B550", Offset = "0xA0B550", VA = "0xA0B550", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public virtual int maxAtlasHeightOverride
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xA0B558", Offset = "0xA0B558", VA = "0xA0B558", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xA0B560", Offset = "0xA0B560", VA = "0xA0B560", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public virtual bool useMaxAtlasWidthOverride
		{
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xA0B568", Offset = "0xA0B568", VA = "0xA0B568", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xA0B570", Offset = "0xA0B570", VA = "0xA0B570", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public virtual bool useMaxAtlasHeightOverride
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0xA0B57C", Offset = "0xA0B57C", VA = "0xA0B57C", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xA0B584", Offset = "0xA0B584", VA = "0xA0B584", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public bool resizePowerOfTwoTextures
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xA0B590", Offset = "0xA0B590", VA = "0xA0B590")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xA0B598", Offset = "0xA0B598", VA = "0xA0B598")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public bool fixOutOfBoundsUVs
		{
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xA0B5A4", Offset = "0xA0B5A4", VA = "0xA0B5A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xA0B5AC", Offset = "0xA0B5AC", VA = "0xA0B5AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public int maxTilingBakeSize
		{
			[Token(Token = "0x60009C7")]
			[Address(RVA = "0xA0B5B8", Offset = "0xA0B5B8", VA = "0xA0B5B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xA0B5C0", Offset = "0xA0B5C0", VA = "0xA0B5C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public bool saveAtlasesAsAssets
		{
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xA0B5C8", Offset = "0xA0B5C8", VA = "0xA0B5C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xA0B5D0", Offset = "0xA0B5D0", VA = "0xA0B5D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public MB2_PackingAlgorithmEnum packingAlgorithm
		{
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xA0B5DC", Offset = "0xA0B5DC", VA = "0xA0B5DC")]
			get
			{
				return default(MB2_PackingAlgorithmEnum);
			}
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xA0B5E4", Offset = "0xA0B5E4", VA = "0xA0B5E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public bool meshBakerTexturePackerForcePowerOfTwo
		{
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0xA0B5EC", Offset = "0xA0B5EC", VA = "0xA0B5EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xA0B5F4", Offset = "0xA0B5F4", VA = "0xA0B5F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public List<ShaderTextureProperty> customShaderPropNames
		{
			[Token(Token = "0x60009CF")]
			[Address(RVA = "0xA0B600", Offset = "0xA0B600", VA = "0xA0B600")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xA0B608", Offset = "0xA0B608", VA = "0xA0B608")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public bool considerNonTextureProperties
		{
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xA0B610", Offset = "0xA0B610", VA = "0xA0B610")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0xA0B618", Offset = "0xA0B618", VA = "0xA0B618")]
			set
			{
			}
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xA0B45C", Offset = "0xA0B45C", VA = "0xA0B45C")]
		public MB3_TextureCombiner()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xA0B624", Offset = "0xA0B624", VA = "0xA0B624")]
		public static void RunCorutineWithoutPause(IEnumerator cor, int recursionDepth)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xA0B970", Offset = "0xA0B970", VA = "0xA0B970")]
		public bool CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false, bool splitAtlasWhenPackingIfTooBig = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xA0BC0C", Offset = "0xA0BC0C", VA = "0xA0BC0C")]
		[DebuggerHidden]
		public IEnumerator CombineTexturesIntoAtlasesCoroutine(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] CombineTexturesIntoAtlasesCoroutineResult coroutineResult, float maxTimePerFrame = 0.01f, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false, bool splitAtlasWhenPackingIfTooBig = false)
		{
			return null;
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xA0BAA8", Offset = "0xA0BAA8", VA = "0xA0BAA8")]
		[DebuggerHidden]
		private IEnumerator _CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> atlasPackingResult, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig)
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xA0BDA8", Offset = "0xA0BDA8", VA = "0xA0BDA8")]
		private MB3_TextureCombinerPipeline.TexturePipelineData LoadPipelineData(Material resultMaterial, List<ShaderTextureProperty> texPropertyNames, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, List<MB_TexSet> distinctMaterialTextures)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xA0C700", Offset = "0xA0C700", VA = "0xA0C700")]
		[DebuggerHidden]
		private IEnumerator __CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, MB3_TextureCombinerPipeline.TexturePipelineData data, bool splitAtlasWhenPackingIfTooBig, MB2_EditorMethodsInterface textureEditorMethods)
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xA0C808", Offset = "0xA0C808", VA = "0xA0C808")]
		[DebuggerHidden]
		private IEnumerator __RunTexturePackerOnly(CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, bool splitAtlasWhenPackingIfTooBig, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> packingResult)
		{
			return null;
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xA0C900", Offset = "0xA0C900", VA = "0xA0C900")]
		internal int _getNumTemporaryTextures()
		{
			return default(int);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xA0C95C", Offset = "0xA0C95C", VA = "0xA0C95C")]
		public Texture2D _createTemporaryTexture(string propertyName, int w, int h, TextureFormat texFormat, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xA0CBBC", Offset = "0xA0CBBC", VA = "0xA0CBBC")]
		internal Texture2D _createTextureCopy(string propertyName, Texture2D t)
		{
			return null;
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xA0CD90", Offset = "0xA0CD90", VA = "0xA0CD90")]
		internal Texture2D _resizeTexture(string propertyName, Texture2D t, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xA0CF58", Offset = "0xA0CF58", VA = "0xA0CF58")]
		internal void _destroyAllTemporaryTextures()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xA0D12C", Offset = "0xA0D12C", VA = "0xA0D12C")]
		internal void _destroyTemporaryTextures(string propertyName)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xA0D538", Offset = "0xA0D538", VA = "0xA0D538")]
		public void _restoreProceduralMaterials()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xA0D53C", Offset = "0xA0D53C", VA = "0xA0D53C")]
		public void SuggestTreatment(List<GameObject> objsToMesh, Material[] resultMaterials, List<ShaderTextureProperty> _customShaderPropNames)
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xA0ED2C", Offset = "0xA0ED2C", VA = "0xA0ED2C")]
		private string PrintList(List<GameObject> gos)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A1")]
	public class MeshBakerMaterialTexture
	{
		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D _t;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float texelDensity;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool readyToBuildAtlases;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DRect encapsulatingSamplingRect;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D37C", Offset = "0x56D37C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D37C", Offset = "0x56D37C")]
		private DRect <matTilingRect>k__BackingField;

		[Token(Token = "0x170000CD")]
		public Texture2D t
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0x78BC3C", Offset = "0x78BC3C", VA = "0x78BC3C")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public DRect matTilingRect
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0x77DF8C", Offset = "0x77DF8C", VA = "0x77DF8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D3B8", Offset = "0x56D3B8")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0x78BC30", Offset = "0x78BC30", VA = "0x78BC30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D3C8", Offset = "0x56D3C8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public bool isNull
		{
			[Token(Token = "0x60009EF")]
			[Address(RVA = "0x77C7A4", Offset = "0x77C7A4", VA = "0x77C7A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D0")]
		public int width
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0x77C818", Offset = "0x77C818", VA = "0x77C818")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D1")]
		public int height
		{
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0x77C8EC", Offset = "0x77C8EC", VA = "0x77C8EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x78BAF4", Offset = "0x78BAF4", VA = "0x78BAF4")]
		public MeshBakerMaterialTexture()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x78BAFC", Offset = "0x78BAFC", VA = "0x78BAFC")]
		public MeshBakerMaterialTexture(Texture tx)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x7854C4", Offset = "0x7854C4", VA = "0x7854C4")]
		public MeshBakerMaterialTexture(Texture tx, Vector2 matTilingOffset, Vector2 matTilingScale, float texelDens)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x77BC2C", Offset = "0x77BC2C", VA = "0x77BC2C")]
		public DRect GetEncapsulatingSamplingRect()
		{
			return default(DRect);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x78BC44", Offset = "0x78BC44", VA = "0x78BC44")]
		public void SetEncapsulatingSamplingRect(MB_TexSet ts, DRect r)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x77CE60", Offset = "0x77CE60", VA = "0x77CE60")]
		public Texture2D GetTexture2D()
		{
			return null;
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x782574", Offset = "0x782574", VA = "0x782574")]
		public string GetTexName()
		{
			return null;
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x780F7C", Offset = "0x780F7C", VA = "0x780F7C")]
		public bool AreTexturesEqual(MeshBakerMaterialTexture b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A2")]
	public class MatAndTransformToMerged
	{
		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material mat;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D3D8", Offset = "0x56D3D8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D3D8", Offset = "0x56D3D8")]
		private DRect <obUVRectIfTilingSame>k__BackingField;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D414", Offset = "0x56D414")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D414", Offset = "0x56D414")]
		private DRect <samplingRectMatAndUVTiling>k__BackingField;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D450", Offset = "0x56D450")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D450", Offset = "0x56D450")]
		private DRect <materialTiling>k__BackingField;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string objName;

		[Token(Token = "0x170000D2")]
		public DRect obUVRectIfTilingSame
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x6AC900", Offset = "0x6AC900", VA = "0x6AC900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D48C", Offset = "0x56D48C")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x6AC90C", Offset = "0x6AC90C", VA = "0x6AC90C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D49C", Offset = "0x56D49C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public DRect samplingRectMatAndUVTiling
		{
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x6AC918", Offset = "0x6AC918", VA = "0x6AC918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D4AC", Offset = "0x56D4AC")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0x6AC924", Offset = "0x6AC924", VA = "0x6AC924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D4BC", Offset = "0x56D4BC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public DRect materialTiling
		{
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0x6AC930", Offset = "0x6AC930", VA = "0x6AC930")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D4CC", Offset = "0x56D4CC")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x6AC93C", Offset = "0x6AC93C", VA = "0x6AC93C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D4DC", Offset = "0x56D4DC")]
			private set
			{
			}
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x6AC800", Offset = "0x6AC800", VA = "0x6AC800")]
		public MatAndTransformToMerged(DRect obUVrect, bool fixOutOfBoundsUVs)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x6AC88C", Offset = "0x6AC88C", VA = "0x6AC88C")]
		public MatAndTransformToMerged(DRect obUVrect, bool fixOutOfBoundsUVs, Material m)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x6AC868", Offset = "0x6AC868", VA = "0x6AC868")]
		private void _init(DRect obUVrect, bool fixOutOfBoundsUVs, Material m)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x6AC948", Offset = "0x6AC948", VA = "0x6AC948", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x6ACA34", Offset = "0x6ACA34", VA = "0x6ACA34", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x6ACACC", Offset = "0x6ACACC", VA = "0x6ACACC")]
		public string GetMaterialName()
		{
			return null;
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x6ACBC0", Offset = "0x6ACBC0", VA = "0x6ACBC0")]
		public void AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling(bool allTexturesUseSameMatTiling, DRect matTiling)
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class MatsAndGOs
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MatAndTransformToMerged> mats;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> gos;

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x6ACC44", Offset = "0x6ACC44", VA = "0x6ACC44")]
		public MatsAndGOs()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class MB_TexSet
	{
		[Token(Token = "0x20001A5")]
		private interface PipelineVariation
		{
			[Token(Token = "0x6000A22")]
			void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect);

			[Token(Token = "0x6000A23")]
			void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment);

			[Token(Token = "0x6000A24")]
			Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex);

			[Token(Token = "0x6000A25")]
			void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props);
		}

		[Token(Token = "0x20001A6")]
		private class PipelineVariationAllTexturesUseSameMatTiling : PipelineVariation
		{
			[Token(Token = "0x40007C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB_TexSet texSet;

			[Token(Token = "0x6000A26")]
			[Address(RVA = "0x6AD860", Offset = "0x6AD860", VA = "0x6AD860")]
			public PipelineVariationAllTexturesUseSameMatTiling(MB_TexSet ts)
			{
			}

			[Token(Token = "0x6000A27")]
			[Address(RVA = "0x6AEBC4", Offset = "0x6AEBC4", VA = "0x6AEBC4", Slot = "4")]
			public void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
			{
			}

			[Token(Token = "0x6000A28")]
			[Address(RVA = "0x6AECEC", Offset = "0x6AECEC", VA = "0x6AECEC", Slot = "5")]
			public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
			{
			}

			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x6AEF54", Offset = "0x6AEF54", VA = "0x6AEF54", Slot = "6")]
			public Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
			{
				return default(Rect);
			}

			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0x6AF010", Offset = "0x6AF010", VA = "0x6AF010", Slot = "7")]
			public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
			{
			}
		}

		[Token(Token = "0x20001A7")]
		private class PipelineVariationSomeTexturesUseDifferentMatTiling : PipelineVariation
		{
			[Token(Token = "0x40007C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB_TexSet texSet;

			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0x6ACDB4", Offset = "0x6ACDB4", VA = "0x6ACDB4")]
			public PipelineVariationSomeTexturesUseDifferentMatTiling(MB_TexSet ts)
			{
			}

			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0x6AF014", Offset = "0x6AF014", VA = "0x6AF014", Slot = "4")]
			public void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
			{
			}

			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x6AF154", Offset = "0x6AF154", VA = "0x6AF154", Slot = "5")]
			public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
			{
			}

			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x6AF3BC", Offset = "0x6AF3BC", VA = "0x6AF3BC", Slot = "6")]
			public Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
			{
				return default(Rect);
			}

			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x6AF3F8", Offset = "0x6AF3F8", VA = "0x6AF3F8", Slot = "7")]
			public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
			{
			}
		}

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshBakerMaterialTexture[] ts;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MatsAndGOs matsAndGOs;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D4EC", Offset = "0x56D4EC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D4EC", Offset = "0x56D4EC")]
		private bool <allTexturesUseSameMatTiling>k__BackingField;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D528", Offset = "0x56D528")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D528", Offset = "0x56D528")]
		private bool <thisIsOnlyTexSetInAtlas>k__BackingField;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D564", Offset = "0x56D564")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D564", Offset = "0x56D564")]
		private MB_TextureTilingTreatment <tilingTreatment>k__BackingField;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D5A0", Offset = "0x56D5A0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D5A0", Offset = "0x56D5A0")]
		private Vector2 <obUVoffset>k__BackingField;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D5DC", Offset = "0x56D5DC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D5DC", Offset = "0x56D5DC")]
		private Vector2 <obUVscale>k__BackingField;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int idealWidth;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int idealHeight;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PipelineVariation pipelineVariation;

		[Token(Token = "0x170000D5")]
		public bool allTexturesUseSameMatTiling
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x6ACDE0", Offset = "0x6ACDE0", VA = "0x6ACDE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D618", Offset = "0x56D618")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A05")]
			[Address(RVA = "0x6ACD9C", Offset = "0x6ACD9C", VA = "0x6ACD9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D628", Offset = "0x56D628")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public bool thisIsOnlyTexSetInAtlas
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0x6ACDE8", Offset = "0x6ACDE8", VA = "0x6ACDE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D638", Offset = "0x56D638")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x6ACDA8", Offset = "0x6ACDA8", VA = "0x6ACDA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D648", Offset = "0x56D648")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public MB_TextureTilingTreatment tilingTreatment
		{
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x6ACDF0", Offset = "0x6ACDF0", VA = "0x6ACDF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D658", Offset = "0x56D658")]
			get
			{
				return default(MB_TextureTilingTreatment);
			}
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0x6ACD84", Offset = "0x6ACD84", VA = "0x6ACD84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D668", Offset = "0x56D668")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public Vector2 obUVoffset
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0x6ACDF8", Offset = "0x6ACDF8", VA = "0x6ACDF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D678", Offset = "0x56D678")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0x6ACD8C", Offset = "0x6ACD8C", VA = "0x6ACD8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D688", Offset = "0x56D688")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public Vector2 obUVscale
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x6ACE00", Offset = "0x6ACE00", VA = "0x6ACE00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D698", Offset = "0x56D698")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000A0D")]
			[Address(RVA = "0x6ACD94", Offset = "0x6ACD94", VA = "0x6ACD94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D6A8", Offset = "0x56D6A8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		internal DRect obUVrect
		{
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0x6ACE08", Offset = "0x6ACE08", VA = "0x6ACE08")]
			get
			{
				return default(DRect);
			}
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x6ACC4C", Offset = "0x6ACC4C", VA = "0x6ACC4C")]
		public MB_TexSet(MeshBakerMaterialTexture[] tss, Vector2 uvOffset, Vector2 uvScale, MB_TextureTilingTreatment treatment)
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x6ACE24", Offset = "0x6ACE24", VA = "0x6ACE24")]
		internal bool IsEqual(object obj, bool fixOutOfBoundsUVs, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x6AD148", Offset = "0x6AD148", VA = "0x6AD148")]
		public Vector2 GetMaxRawTextureHeightWidth()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x6AD2C0", Offset = "0x6AD2C0", VA = "0x6AD2C0")]
		private Rect GetEncapsulatingSamplingRectIfTilingSame()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x6AD380", Offset = "0x6AD380", VA = "0x6AD380")]
		public void SetEncapsulatingSamplingRectWhenMergingTexSets(DRect newEncapsulatingSamplingRect)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x6AD444", Offset = "0x6AD444", VA = "0x6AD444")]
		public void SetEncapsulatingSamplingRectForTesting(int propIdx, DRect newEncapsulatingSamplingRect)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x6AD4E0", Offset = "0x6AD4E0", VA = "0x6AD4E0")]
		public void SetEncapsulatingRect(int propIdx, bool considerMeshUVs)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x6AD5BC", Offset = "0x6AD5BC", VA = "0x6AD5BC")]
		public void CreateColoredTexToReplaceNull(string propName, int propIdx, bool considerMeshUVs, MB3_TextureCombiner combiner, Color col)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x6AD7E8", Offset = "0x6AD7E8", VA = "0x6AD7E8")]
		public void SetThisIsOnlyTexSetInAtlasTrue()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x6AD7F4", Offset = "0x6AD7F4", VA = "0x6AD7F4")]
		public void SetAllTexturesUseSameMatTilingTrue()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x6AD88C", Offset = "0x6AD88C", VA = "0x6AD88C")]
		public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x6AD958", Offset = "0x6AD958", VA = "0x6AD958")]
		public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x6ADA20", Offset = "0x6ADA20", VA = "0x6ADA20")]
		internal void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x6ADAE8", Offset = "0x6ADAE8", VA = "0x6ADAE8")]
		internal Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x6ADBAC", Offset = "0x6ADBAC", VA = "0x6ADBAC")]
		internal void CalcInitialFullSamplingRects(bool fixOutOfBoundsUVs)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x6ADEC0", Offset = "0x6ADEC0", VA = "0x6ADEC0")]
		internal void CalcMatAndUVSamplingRects()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x6AE0A0", Offset = "0x6AE0A0", VA = "0x6AE0A0")]
		public bool AllTexturesAreSameForMerge(MB_TexSet other, bool considerNonTextureProperties, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x6AE3B4", Offset = "0x6AE3B4", VA = "0x6AE3B4")]
		public void DrawRectsToMergeGizmos(Color encC, Color innerC)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x6AE774", Offset = "0x6AE774", VA = "0x6AE774")]
		internal string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x6AEA18", Offset = "0x6AEA18", VA = "0x6AEA18")]
		internal string GetMatSubrectDescriptions()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A8")]
	public class MB3_TextureCombinerMerging
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _considerNonTextureProperties;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool fixOutOfBoundsUVs;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool LOG_LEVEL_TRACE_MERGE_MAT_SUBRECTS;

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xA111A0", Offset = "0xA111A0", VA = "0xA111A0")]
		public MB3_TextureCombinerMerging(bool considerNonTextureProps, MB3_TextureCombinerNonTextureProperties resultMaterialTexBlender, bool fixObUVs, MB2_LogLevel logLevel)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x9FB298", Offset = "0x9FB298", VA = "0x9FB298")]
		public static Rect BuildTransformMeshUV2AtlasRect(bool considerMeshUVs, Rect _atlasRect, Rect _obUVRect, Rect _sourceMaterialTiling, Rect _encapsulatingRect)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xA1120C", Offset = "0xA1120C", VA = "0xA1120C")]
		public void MergeOverlappingDistinctMaterialTexturesAndCalcMaterialSubrects(List<MB_TexSet> distinctMaterialTextures)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xA129CC", Offset = "0xA129CC", VA = "0xA129CC")]
		public void DoIntegrityCheckMergedEncapsulatingSamplingRects(List<MB_TexSet> distinctMaterialTextures)
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public class MB3_TextureCombinerNonTextureProperties
	{
		[Token(Token = "0x20001AA")]
		public interface MaterialProperty
		{
			[Token(Token = "0x170000DB")]
			string PropertyName
			{
				[Token(Token = "0x6000A42")]
				get;
				[Token(Token = "0x6000A43")]
				set;
			}

			[Token(Token = "0x6000A44")]
			MaterialPropertyValueAveraged GetAverageCalculator();

			[Token(Token = "0x6000A45")]
			object GetDefaultValue();
		}

		[Token(Token = "0x20001AB")]
		public class MaterialPropertyFloat : MaterialProperty
		{
			[Token(Token = "0x40007D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D6B8", Offset = "0x56D6B8")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D6B8", Offset = "0x56D6B8")]
			private string <PropertyName>k__BackingField;

			[Token(Token = "0x40007D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MaterialPropertyValueAveragedFloat _averageCalc;

			[Token(Token = "0x40007D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float _defaultValue;

			[Token(Token = "0x170000DC")]
			public string PropertyName
			{
				[Token(Token = "0x6000A47")]
				[Address(RVA = "0xA1467C", Offset = "0xA1467C", VA = "0xA1467C", Slot = "4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D6F4", Offset = "0x56D6F4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000A48")]
				[Address(RVA = "0xA14674", Offset = "0xA14674", VA = "0xA14674", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D704", Offset = "0x56D704")]
				set
				{
				}
			}

			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xA134BC", Offset = "0xA134BC", VA = "0xA134BC")]
			public MaterialPropertyFloat(string name, float defValue)
			{
			}

			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xA14684", Offset = "0xA14684", VA = "0xA14684", Slot = "6")]
			public MaterialPropertyValueAveraged GetAverageCalculator()
			{
				return null;
			}

			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0xA1468C", Offset = "0xA1468C", VA = "0xA1468C", Slot = "7")]
			public object GetDefaultValue()
			{
				return null;
			}
		}

		[Token(Token = "0x20001AC")]
		public class MaterialPropertyColor : MaterialProperty
		{
			[Token(Token = "0x40007D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D714", Offset = "0x56D714")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56D714", Offset = "0x56D714")]
			private string <PropertyName>k__BackingField;

			[Token(Token = "0x40007D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MaterialPropertyValueAveragedColor _averageCalc;

			[Token(Token = "0x40007DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Color _defaultValue;

			[Token(Token = "0x170000DD")]
			public string PropertyName
			{
				[Token(Token = "0x6000A4C")]
				[Address(RVA = "0xA145F8", Offset = "0xA145F8", VA = "0xA145F8", Slot = "4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D750", Offset = "0x56D750")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000A4D")]
				[Address(RVA = "0xA145F0", Offset = "0xA145F0", VA = "0xA145F0", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D760", Offset = "0x56D760")]
				set
				{
				}
			}

			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xA1341C", Offset = "0xA1341C", VA = "0xA1341C")]
			public MaterialPropertyColor(string name, Color defaultVal)
			{
			}

			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0xA14600", Offset = "0xA14600", VA = "0xA14600", Slot = "6")]
			public MaterialPropertyValueAveraged GetAverageCalculator()
			{
				return null;
			}

			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xA14608", Offset = "0xA14608", VA = "0xA14608", Slot = "7")]
			public object GetDefaultValue()
			{
				return null;
			}
		}

		[Token(Token = "0x20001AD")]
		public interface MaterialPropertyValueAveraged
		{
			[Token(Token = "0x6000A50")]
			void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property);

			[Token(Token = "0x6000A51")]
			object GetAverage();

			[Token(Token = "0x6000A52")]
			int NumValues();

			[Token(Token = "0x6000A53")]
			void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property);
		}

		[Token(Token = "0x20001AE")]
		public class MaterialPropertyValueAveragedFloat : MaterialPropertyValueAveraged
		{
			[Token(Token = "0x40007DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float averageVal;

			[Token(Token = "0x40007DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int numValues;

			[Token(Token = "0x6000A54")]
			[Address(RVA = "0xA1466C", Offset = "0xA1466C", VA = "0xA1466C")]
			public MaterialPropertyValueAveragedFloat()
			{
			}

			[Token(Token = "0x6000A55")]
			[Address(RVA = "0xA14C64", Offset = "0xA14C64", VA = "0xA14C64", Slot = "4")]
			public void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6000A56")]
			[Address(RVA = "0xA14DFC", Offset = "0xA14DFC", VA = "0xA14DFC", Slot = "5")]
			public object GetAverage()
			{
				return null;
			}

			[Token(Token = "0x6000A57")]
			[Address(RVA = "0xA14E60", Offset = "0xA14E60", VA = "0xA14E60", Slot = "6")]
			public int NumValues()
			{
				return default(int);
			}

			[Token(Token = "0x6000A58")]
			[Address(RVA = "0xA14E68", Offset = "0xA14E68", VA = "0xA14E68", Slot = "7")]
			public void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property)
			{
			}
		}

		[Token(Token = "0x20001AF")]
		public class MaterialPropertyValueAveragedColor : MaterialPropertyValueAveraged
		{
			[Token(Token = "0x40007DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color averageVal;

			[Token(Token = "0x40007DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numValues;

			[Token(Token = "0x6000A59")]
			[Address(RVA = "0xA145E8", Offset = "0xA145E8", VA = "0xA145E8")]
			public MaterialPropertyValueAveragedColor()
			{
			}

			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0xA146F0", Offset = "0xA146F0", VA = "0xA146F0", Slot = "4")]
			public void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0xA1493C", Offset = "0xA1493C", VA = "0xA1493C", Slot = "5")]
			public object GetAverage()
			{
				return null;
			}

			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0xA149A0", Offset = "0xA149A0", VA = "0xA149A0", Slot = "6")]
			public int NumValues()
			{
				return default(int);
			}

			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0xA149A8", Offset = "0xA149A8", VA = "0xA149A8", Slot = "7")]
			public void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property)
			{
			}
		}

		[Token(Token = "0x20001B0")]
		public struct TexPropertyNameColorPair
		{
			[Token(Token = "0x40007DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x40007E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color color;

			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0xA16088", Offset = "0xA16088", VA = "0xA16088")]
			public TexPropertyNameColorPair(string nm, Color col)
			{
			}
		}

		[Token(Token = "0x20001B1")]
		private interface NonTextureProperties
		{
			[Token(Token = "0x6000A5F")]
			bool NonTexturePropertiesAreEqual(Material a, Material b);

			[Token(Token = "0x6000A60")]
			Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName);

			[Token(Token = "0x6000A61")]
			void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods);

			[Token(Token = "0x6000A62")]
			Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty);

			[Token(Token = "0x6000A63")]
			Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty);
		}

		[Token(Token = "0x20001B2")]
		private class NonTexturePropertiesDontBlendProps : NonTextureProperties
		{
			[Token(Token = "0x40007E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_TextureCombinerNonTextureProperties _textureProperties;

			[Token(Token = "0x6000A64")]
			[Address(RVA = "0xA13544", Offset = "0xA13544", VA = "0xA13544")]
			public NonTexturePropertiesDontBlendProps(MB3_TextureCombinerNonTextureProperties textureProperties)
			{
			}

			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xA15AFC", Offset = "0xA15AFC", VA = "0xA15AFC", Slot = "4")]
			public bool NonTexturePropertiesAreEqual(Material a, Material b)
			{
				return default(bool);
			}

			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xA15B04", Offset = "0xA15B04", VA = "0xA15B04", Slot = "5")]
			public Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
			{
				return null;
			}

			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xA15B80", Offset = "0xA15B80", VA = "0xA15B80", Slot = "6")]
			public void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
			{
			}

			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xA15E94", Offset = "0xA15E94", VA = "0xA15E94", Slot = "8")]
			public Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}

			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xA15EA0", Offset = "0xA15EA0", VA = "0xA15EA0", Slot = "7")]
			public Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}
		}

		[Token(Token = "0x20001B3")]
		private class NonTexturePropertiesBlendProps : NonTextureProperties
		{
			[Token(Token = "0x40007E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_TextureCombinerNonTextureProperties _textureProperties;

			[Token(Token = "0x40007E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private TextureBlender resultMaterialTextureBlender;

			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0xA140C4", Offset = "0xA140C4", VA = "0xA140C4")]
			public NonTexturePropertiesBlendProps(MB3_TextureCombinerNonTextureProperties textureProperties, TextureBlender resultMats)
			{
			}

			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xA15104", Offset = "0xA15104", VA = "0xA15104", Slot = "4")]
			public bool NonTexturePropertiesAreEqual(Material a, Material b)
			{
				return default(bool);
			}

			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xA151D0", Offset = "0xA151D0", VA = "0xA151D0", Slot = "5")]
			public Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
			{
				return null;
			}

			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0xA15638", Offset = "0xA15638", VA = "0xA15638", Slot = "6")]
			public void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
			{
			}

			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xA15890", Offset = "0xA15890", VA = "0xA15890", Slot = "8")]
			public Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}

			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xA15A30", Offset = "0xA15A30", VA = "0xA15A30", Slot = "7")]
			public Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}
		}

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Color NEUTRAL_NORMAL_MAP_COLOR;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TexPropertyNameColorPair[] defaultTextureProperty2DefaultColorMap;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaterialProperty[] _nonTextureProperties;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool _considerNonTextureProperties;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextureBlender resultMaterialTextureBlender;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextureBlender[] textureBlenders;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, Color> textureProperty2DefaultColorMap;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NonTextureProperties _nonTexturePropertiesBlender;

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xA0BF48", Offset = "0xA0BF48", VA = "0xA0BF48")]
		public MB3_TextureCombinerNonTextureProperties(MB2_LogLevel ll, bool considerNonTextureProps)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xA13570", Offset = "0xA13570", VA = "0xA13570")]
		internal void CollectAverageValuesOfNonTextureProperties(Material resultMaterial, Material mat)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xA10A84", Offset = "0xA10A84", VA = "0xA10A84")]
		internal void LoadTextureBlendersIfNeeded(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xA13EB8", Offset = "0xA13EB8", VA = "0xA13EB8")]
		private static bool InterfaceFilter(Type typeObj, object criteriaObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xA13D1C", Offset = "0xA13D1C", VA = "0xA13D1C")]
		private void FindBestTextureBlender(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xA137A0", Offset = "0xA137A0", VA = "0xA137A0")]
		private void LoadTextureBlenders()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xA140FC", Offset = "0xA140FC", VA = "0xA140FC")]
		internal bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xA141C4", Offset = "0xA141C4", VA = "0xA141C4")]
		internal Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xA142A0", Offset = "0xA142A0", VA = "0xA142A0")]
		internal void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xA143D8", Offset = "0xA143D8", VA = "0xA143D8")]
		internal Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xA144A4", Offset = "0xA144A4", VA = "0xA144A4")]
		internal Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xA13F70", Offset = "0xA13F70", VA = "0xA13F70")]
		private TextureBlender FindMatchingTextureBlender(string shaderName)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B4")]
	internal class MB3_TextureCombinerPackerMeshBaker : MB3_TextureCombinerPackerRoot
	{
		[Token(Token = "0x200057A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D790", Offset = "0x56D790")]
		private sealed class <CreateAtlases>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x40017B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Rect[] <uvRects>__0;

			[Token(Token = "0x40017B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <atlasSizeX>__0;

			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <atlasSizeY>__0;

			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int <propIdx>__1;

			[Token(Token = "0x40017BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Texture2D <atlas>__2;

			[Token(Token = "0x40017BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal ShaderTextureProperty <property>__2;

			[Token(Token = "0x40017BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal MB3_TextureCombiner combiner;

			[Token(Token = "0x40017BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Color[][] <atlasPixels>__3;

			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal bool <isNormalMap>__3;

			[Token(Token = "0x40017C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal int <texSetIdx>__4;

			[Token(Token = "0x40017C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal MB_TexSet <texSet>__5;

			[Token(Token = "0x40017C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal MeshBakerMaterialTexture <matTex>__5;

			[Token(Token = "0x40017C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal string <s>__5;

			[Token(Token = "0x40017C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal Rect <r>__5;

			[Token(Token = "0x40017C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal Texture2D <t>__5;

			[Token(Token = "0x40017C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal int <x>__5;

			[Token(Token = "0x40017C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			internal int <y>__5;

			[Token(Token = "0x40017C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal int <ww>__5;

			[Token(Token = "0x40017CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			internal int <hh>__5;

			[Token(Token = "0x40017CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x40017CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal DRect <samplingRect>__5;

			[Token(Token = "0x40017CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			internal Texture2D[] atlases;

			[Token(Token = "0x40017CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			internal Stopwatch <sw>__2;

			[Token(Token = "0x40017CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			internal object $current;

			[Token(Token = "0x40017D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			internal bool $disposing;

			[Token(Token = "0x40017D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			internal int $PC;

			[Token(Token = "0x1700048D")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600236E")]
				[Address(RVA = "0xA18A10", Offset = "0xA18A10", VA = "0xA18A10", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700048E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600236F")]
				[Address(RVA = "0xA18A18", Offset = "0xA18A18", VA = "0xA18A18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600236C")]
			[Address(RVA = "0xA161A0", Offset = "0xA161A0", VA = "0xA161A0")]
			[DebuggerHidden]
			public <CreateAtlases>c__Iterator0()
			{
			}

			[Token(Token = "0x600236D")]
			[Address(RVA = "0xA172F0", Offset = "0xA172F0", VA = "0xA172F0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002370")]
			[Address(RVA = "0xA18A20", Offset = "0xA18A20", VA = "0xA18A20", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002371")]
			[Address(RVA = "0xA18A34", Offset = "0xA18A34", VA = "0xA18A34", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200057B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D7F0", Offset = "0x56D7F0")]
		private sealed class <CopyScaledAndTiledToAtlas>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MeshBakerMaterialTexture source;

			[Token(Token = "0x40017D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Texture2D <t>__0;

			[Token(Token = "0x40017D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x40017D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int targX;

			[Token(Token = "0x40017D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int targY;

			[Token(Token = "0x40017D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int targW;

			[Token(Token = "0x40017D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int targH;

			[Token(Token = "0x40017D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal AtlasPadding padding;

			[Token(Token = "0x40017DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal DRect srcSamplingRect;

			[Token(Token = "0x40017DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal float <newWidth>__0;

			[Token(Token = "0x40017DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal float <newHeight>__0;

			[Token(Token = "0x40017DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal float <scx>__0;

			[Token(Token = "0x40017DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal float <scy>__0;

			[Token(Token = "0x40017DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal float <ox>__0;

			[Token(Token = "0x40017E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal float <oy>__0;

			[Token(Token = "0x40017E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal int <w>__0;

			[Token(Token = "0x40017E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal int <h>__0;

			[Token(Token = "0x40017E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal MB3_TextureCombiner combiner;

			[Token(Token = "0x40017E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal ShaderTextureProperty shaderPropertyName;

			[Token(Token = "0x40017E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal MB_TexSet sourceMaterial;

			[Token(Token = "0x40017E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal Color[][] atlasPixels;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal int <i>__1;

			[Token(Token = "0x40017EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			internal int <j>__2;

			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			internal object $current;

			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			internal bool $disposing;

			[Token(Token = "0x40017ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			internal int $PC;

			[Token(Token = "0x1700048F")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002374")]
				[Address(RVA = "0xA17268", Offset = "0xA17268", VA = "0xA17268", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000490")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002375")]
				[Address(RVA = "0xA17270", Offset = "0xA17270", VA = "0xA17270", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002372")]
			[Address(RVA = "0xA1633C", Offset = "0xA1633C", VA = "0xA1633C")]
			[DebuggerHidden]
			public <CopyScaledAndTiledToAtlas>c__Iterator1()
			{
			}

			[Token(Token = "0x6002373")]
			[Address(RVA = "0xA16344", Offset = "0xA16344", VA = "0xA16344", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002376")]
			[Address(RVA = "0xA17278", Offset = "0xA17278", VA = "0xA17278", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002377")]
			[Address(RVA = "0xA1728C", Offset = "0xA1728C", VA = "0xA1728C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xA16098", Offset = "0xA16098", VA = "0xA16098")]
		public MB3_TextureCombinerPackerMeshBaker()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xA160A0", Offset = "0xA160A0", VA = "0xA160A0", Slot = "9")]
		[DebuggerHidden]
		public override IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xA161A8", Offset = "0xA161A8", VA = "0xA161A8")]
		[DebuggerHidden]
		internal static IEnumerator CopyScaledAndTiledToAtlas(MeshBakerMaterialTexture source, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName, DRect srcSamplingRect, int targX, int targY, int targW, int targH, AtlasPadding padding, Color[][] atlasPixels, bool isNormalMap, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, [Optional] ProgressUpdateDelegate progressInfo, MB2_LogLevel LOG_LEVEL = MB2_LogLevel.info)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B5")]
	internal class MB3_TextureCombinerPackerMeshBakerFast : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x200057C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D870", Offset = "0x56D870")]
		private sealed class <ConvertTexturesToReadableFormats>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40017F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40017F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x17000491")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600237A")]
				[Address(RVA = "0x777EC8", Offset = "0x777EC8", VA = "0x777EC8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000492")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600237B")]
				[Address(RVA = "0x777ED0", Offset = "0x777ED0", VA = "0x777ED0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002378")]
			[Address(RVA = "0x777AF0", Offset = "0x777AF0", VA = "0x777AF0")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>c__Iterator0()
			{
			}

			[Token(Token = "0x6002379")]
			[Address(RVA = "0x777EB8", Offset = "0x777EB8", VA = "0x777EB8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600237C")]
			[Address(RVA = "0x777ED8", Offset = "0x777ED8", VA = "0x777ED8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600237D")]
			[Address(RVA = "0x777EDC", Offset = "0x777EDC", VA = "0x777EDC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200057D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D8D0", Offset = "0x56D8D0")]
		private sealed class <CreateAtlases>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x40017F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x40017F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB3_TextureCombiner combiner;

			[Token(Token = "0x40017F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x40017F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Texture2D[] atlases;

			[Token(Token = "0x40017F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x40017F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object $current;

			[Token(Token = "0x40017FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x40017FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x17000493")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002380")]
				[Address(RVA = "0x779950", Offset = "0x779950", VA = "0x779950", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000494")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002381")]
				[Address(RVA = "0x779958", Offset = "0x779958", VA = "0x779958", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600237E")]
			[Address(RVA = "0x777EB0", Offset = "0x777EB0", VA = "0x777EB0")]
			[DebuggerHidden]
			public <CreateAtlases>c__Iterator1()
			{
			}

			[Token(Token = "0x600237F")]
			[Address(RVA = "0x777F40", Offset = "0x777F40", VA = "0x777F40", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002382")]
			[Address(RVA = "0x779960", Offset = "0x779960", VA = "0x779960", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002383")]
			[Address(RVA = "0x779964", Offset = "0x779964", VA = "0x779964", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x777A7C", Offset = "0x777A7C", VA = "0x777A7C")]
		public MB3_TextureCombinerPackerMeshBakerFast()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x777A84", Offset = "0x777A84", VA = "0x777A84", Slot = "4")]
		[DebuggerHidden]
		public IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x777AF8", Offset = "0x777AF8", VA = "0x777AF8", Slot = "7")]
		public virtual AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x777DB8", Offset = "0x777DB8", VA = "0x777DB8", Slot = "6")]
		[DebuggerHidden]
		public IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B6")]
	internal class MB3_TextureCombinerPackerMeshBakerHorizontalVertical : MB3_TextureCombinerPackerMeshBaker
	{
		[Token(Token = "0x20001B7")]
		private interface IPipeline
		{
			[Token(Token = "0x6000A7C")]
			MB2_PackingAlgorithmEnum GetPackingAlg();

			[Token(Token = "0x6000A7D")]
			void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight);

			[Token(Token = "0x6000A7E")]
			MB_TextureTilingTreatment GetEdge2EdgeTreatment();

			[Token(Token = "0x6000A7F")]
			void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue);

			[Token(Token = "0x6000A80")]
			void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY);

			[Token(Token = "0x6000A81")]
			void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight);
		}

		[Token(Token = "0x20001B8")]
		private class VerticalPipeline : IPipeline
		{
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0x77B0C4", Offset = "0x77B0C4", VA = "0x77B0C4")]
			public VerticalPipeline()
			{
			}

			[Token(Token = "0x6000A83")]
			[Address(RVA = "0x77BEE8", Offset = "0x77BEE8", VA = "0x77BEE8", Slot = "4")]
			public MB2_PackingAlgorithmEnum GetPackingAlg()
			{
				return default(MB2_PackingAlgorithmEnum);
			}

			[Token(Token = "0x6000A84")]
			[Address(RVA = "0x77BEF0", Offset = "0x77BEF0", VA = "0x77BEF0", Slot = "5")]
			public void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight)
			{
			}

			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x77BFD4", Offset = "0x77BFD4", VA = "0x77BFD4", Slot = "6")]
			public MB_TextureTilingTreatment GetEdge2EdgeTreatment()
			{
				return default(MB_TextureTilingTreatment);
			}

			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x77BFDC", Offset = "0x77BFDC", VA = "0x77BFDC", Slot = "7")]
			public void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue)
			{
			}

			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x77BFE4", Offset = "0x77BFE4", VA = "0x77BFE4", Slot = "8")]
			public void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY)
			{
			}

			[Token(Token = "0x6000A88")]
			[Address(RVA = "0x77C27C", Offset = "0x77C27C", VA = "0x77C27C", Slot = "9")]
			public void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight)
			{
			}
		}

		[Token(Token = "0x20001B9")]
		private class HorizontalPipeline : IPipeline
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0x77B0BC", Offset = "0x77B0BC", VA = "0x77B0BC")]
			public HorizontalPipeline()
			{
			}

			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0x77BB40", Offset = "0x77BB40", VA = "0x77BB40", Slot = "4")]
			public MB2_PackingAlgorithmEnum GetPackingAlg()
			{
				return default(MB2_PackingAlgorithmEnum);
			}

			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0x77BB48", Offset = "0x77BB48", VA = "0x77BB48", Slot = "5")]
			public void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight)
			{
			}

			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0x77BC38", Offset = "0x77BC38", VA = "0x77BC38", Slot = "6")]
			public MB_TextureTilingTreatment GetEdge2EdgeTreatment()
			{
				return default(MB_TextureTilingTreatment);
			}

			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x77BC40", Offset = "0x77BC40", VA = "0x77BC40", Slot = "7")]
			public void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue)
			{
			}

			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x77BC48", Offset = "0x77BC48", VA = "0x77BC48", Slot = "8")]
			public void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY)
			{
			}

			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x77BED8", Offset = "0x77BED8", VA = "0x77BED8", Slot = "9")]
			public void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight)
			{
			}
		}

		[Token(Token = "0x20001BA")]
		public enum AtlasDirection
		{
			[Token(Token = "0x40007E6")]
			horizontal,
			[Token(Token = "0x40007E7")]
			vertical
		}

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AtlasDirection _atlasDirection;

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x7799C8", Offset = "0x7799C8", VA = "0x7799C8")]
		public MB3_TextureCombinerPackerMeshBakerHorizontalVertical(AtlasDirection ad)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x7799F4", Offset = "0x7799F4", VA = "0x7799F4", Slot = "8")]
		public override AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x77BA18", Offset = "0x77BA18", VA = "0x77BA18")]
		public static AtlasPackingResult TestStackRectanglesHorizontal(AtlasPackingResult a, AtlasPackingResult b, int maxHeightDim, int maxWidthDim, bool stretchBToAtlasWidth)
		{
			return null;
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x77BAAC", Offset = "0x77BAAC", VA = "0x77BAAC")]
		public static AtlasPackingResult TestStackRectanglesVertical(AtlasPackingResult a, AtlasPackingResult b, int maxHeightDim, int maxWidthDim, bool stretchBToAtlasWidth)
		{
			return null;
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x77B1E8", Offset = "0x77B1E8", VA = "0x77B1E8")]
		private static AtlasPackingResult MergeAtlasPackingResultStackBonA(AtlasPackingResult a, AtlasPackingResult b, int maxWidthDim, int maxHeightDim, bool stretchBToAtlasWidth, IPipeline pipeline)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BB")]
	internal class MB3_TextureCombinerPackerOneTextureInAtlas : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x200057E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D950", Offset = "0x56D950")]
		private sealed class <ConvertTexturesToReadableFormats>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x40017FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40017FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40017FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x17000495")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002386")]
				[Address(RVA = "0x77CA78", Offset = "0x77CA78", VA = "0x77CA78", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000496")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002387")]
				[Address(RVA = "0x77CA80", Offset = "0x77CA80", VA = "0x77CA80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002384")]
			[Address(RVA = "0x77C300", Offset = "0x77C300", VA = "0x77C300")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>c__Iterator0()
			{
			}

			[Token(Token = "0x6002385")]
			[Address(RVA = "0x77CA68", Offset = "0x77CA68", VA = "0x77CA68", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002388")]
			[Address(RVA = "0x77CA88", Offset = "0x77CA88", VA = "0x77CA88", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002389")]
			[Address(RVA = "0x77CA8C", Offset = "0x77CA8C", VA = "0x77CA8C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200057F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56D9B0", Offset = "0x56D9B0")]
		private sealed class <CreateAtlases>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Texture2D[] atlases;

			[Token(Token = "0x4001803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x4001805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x17000497")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600238C")]
				[Address(RVA = "0x77CF4C", Offset = "0x77CF4C", VA = "0x77CF4C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000498")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600238D")]
				[Address(RVA = "0x77CF54", Offset = "0x77CF54", VA = "0x77CF54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600238A")]
			[Address(RVA = "0x77CA60", Offset = "0x77CA60", VA = "0x77CA60")]
			[DebuggerHidden]
			public <CreateAtlases>c__Iterator1()
			{
			}

			[Token(Token = "0x600238B")]
			[Address(RVA = "0x77CAF0", Offset = "0x77CAF0", VA = "0x77CAF0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600238E")]
			[Address(RVA = "0x77CF5C", Offset = "0x77CF5C", VA = "0x77CF5C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600238F")]
			[Address(RVA = "0x77CF60", Offset = "0x77CF60", VA = "0x77CF60", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x77C28C", Offset = "0x77C28C", VA = "0x77C28C")]
		public MB3_TextureCombinerPackerOneTextureInAtlas()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x77C294", Offset = "0x77C294", VA = "0x77C294", Slot = "4")]
		[DebuggerHidden]
		public IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x77C308", Offset = "0x77C308", VA = "0x77C308", Slot = "5")]
		public AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x77C9C0", Offset = "0x77C9C0", VA = "0x77C9C0", Slot = "6")]
		[DebuggerHidden]
		public IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BC")]
	internal class MB3_TextureCombinerPackerUnity : MB3_TextureCombinerPackerRoot
	{
		[Token(Token = "0x2000580")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DA20", Offset = "0x56DA20")]
		private sealed class <CreateAtlases>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x4001808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB3_TextureCombiner combiner;

			[Token(Token = "0x400180A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400180B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400180C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Texture2D[] atlases;

			[Token(Token = "0x400180D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object $current;

			[Token(Token = "0x400180E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x400180F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x17000499")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002392")]
				[Address(RVA = "0x77F958", Offset = "0x77F958", VA = "0x77F958", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700049A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002393")]
				[Address(RVA = "0x77F960", Offset = "0x77F960", VA = "0x77F960", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002390")]
			[Address(RVA = "0x77D678", Offset = "0x77D678", VA = "0x77D678")]
			[DebuggerHidden]
			public <CreateAtlases>c__Iterator0()
			{
			}

			[Token(Token = "0x6002391")]
			[Address(RVA = "0x77E408", Offset = "0x77E408", VA = "0x77E408", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002394")]
			[Address(RVA = "0x77F968", Offset = "0x77F968", VA = "0x77F968", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002395")]
			[Address(RVA = "0x77F96C", Offset = "0x77F96C", VA = "0x77F96C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x77D480", Offset = "0x77D480", VA = "0x77D480")]
		public MB3_TextureCombinerPackerUnity()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x77D488", Offset = "0x77D488", VA = "0x77D488", Slot = "8")]
		public override AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x77D580", Offset = "0x77D580", VA = "0x77D580", Slot = "9")]
		[DebuggerHidden]
		public override IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x77D680", Offset = "0x77D680", VA = "0x77D680")]
		internal static Texture2D _copyTexturesIntoAtlas(Texture2D[] texToPack, int padding, Rect[] rs, int w, int h, MB3_TextureCombiner combiner)
		{
			return null;
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x77D9EC", Offset = "0x77D9EC", VA = "0x77D9EC")]
		internal static Texture2D GetAdjustedForScaleAndOffset2(string propertyName, MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BD")]
	public class MB3_TextureCombinerPipeline
	{
		[Token(Token = "0x20001BE")]
		public struct CreateAtlasForProperty
		{
			[Token(Token = "0x40007EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool allTexturesAreNull;

			[Token(Token = "0x40007EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool allTexturesAreSame;

			[Token(Token = "0x40007EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			public bool allNonTexturePropsAreSame;

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x788358", Offset = "0x788358", VA = "0x788358", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x20001BF")]
		internal class TexturePipelineData
		{
			[Token(Token = "0x40007ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB2_TextureBakeResults _textureBakeResults;

			[Token(Token = "0x40007EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int _atlasPadding;

			[Token(Token = "0x40007EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int _maxAtlasWidth;

			[Token(Token = "0x40007F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _maxAtlasHeight;

			[Token(Token = "0x40007F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _useMaxAtlasHeightOverride;

			[Token(Token = "0x40007F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _useMaxAtlasWidthOverride;

			[Token(Token = "0x40007F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _resizePowerOfTwoTextures;

			[Token(Token = "0x40007F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixOutOfBoundsUVs;

			[Token(Token = "0x40007F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int _maxTilingBakeSize;

			[Token(Token = "0x40007F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool _saveAtlasesAsAssets;

			[Token(Token = "0x40007F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB2_PackingAlgorithmEnum _packingAlgorithm;

			[Token(Token = "0x40007F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _meshBakerTexturePackerForcePowerOfTwo;

			[Token(Token = "0x40007F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal List<ShaderTextureProperty> _customShaderPropNames;

			[Token(Token = "0x40007FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool _normalizeTexelDensity;

			[Token(Token = "0x40007FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			internal bool _considerNonTextureProperties;

			[Token(Token = "0x40007FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal MB3_TextureCombinerNonTextureProperties nonTexturePropertyBlender;

			[Token(Token = "0x40007FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x40007FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal List<GameObject> allObjsToMesh;

			[Token(Token = "0x40007FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4000800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x4000801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal CreateAtlasForProperty[] allTexturesAreNullAndSameColor;

			[Token(Token = "0x4000802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal Material resultMaterial;

			[Token(Token = "0x170000DE")]
			internal int numAtlases
			{
				[Token(Token = "0x6000AAD")]
				[Address(RVA = "0x7798EC", Offset = "0x7798EC", VA = "0x7798EC")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x788360", Offset = "0x788360", VA = "0x788360")]
			public TexturePipelineData()
			{
			}

			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0x7883E8", Offset = "0x7883E8", VA = "0x7883E8")]
			internal bool OnlyOneTextureInAtlasReuseTextures()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000581")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DAB0", Offset = "0x56DAB0")]
		private sealed class <_CollectPropertyNames>c__AnonStorey3
		{
			[Token(Token = "0x4001810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TexturePipelineData data;

			[Token(Token = "0x6002396")]
			[Address(RVA = "0x780580", Offset = "0x780580", VA = "0x780580")]
			public <_CollectPropertyNames>c__AnonStorey3()
			{
			}
		}

		[Token(Token = "0x2000582")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DAC0", Offset = "0x56DAC0")]
		private sealed class <_CollectPropertyNames>c__AnonStorey4
		{
			[Token(Token = "0x4001811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int i;

			[Token(Token = "0x4001812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal <_CollectPropertyNames>c__AnonStorey3 <>f__ref$3;

			[Token(Token = "0x6002397")]
			[Address(RVA = "0x780588", Offset = "0x780588", VA = "0x780588")]
			public <_CollectPropertyNames>c__AnonStorey4()
			{
			}

			[Token(Token = "0x6002398")]
			[Address(RVA = "0x786818", Offset = "0x786818", VA = "0x786818")]
			internal bool <>m__0(ShaderTextureProperty x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000583")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DAD0", Offset = "0x56DAD0")]
		private sealed class <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x2000586")]
			private sealed class <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__AnonStorey6
			{
				[Token(Token = "0x4001832")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal TexturePipelineData data;

				[Token(Token = "0x4001833")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				internal <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__Iterator0 <>f__ref$0;

				[Token(Token = "0x60023AB")]
				[Address(RVA = "0x7854B4", Offset = "0x7854B4", VA = "0x7854B4")]
				public <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__AnonStorey6()
				{
				}
			}

			[Token(Token = "0x2000587")]
			private sealed class <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__AnonStorey5
			{
				[Token(Token = "0x4001834")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal MB_TexSet setOfTexs;

				[Token(Token = "0x4001835")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				internal <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__Iterator0 <>f__ref$0;

				[Token(Token = "0x4001836")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				internal <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__AnonStorey6 <>f__ref$6;

				[Token(Token = "0x60023AC")]
				[Address(RVA = "0x7854BC", Offset = "0x7854BC", VA = "0x7854BC")]
				public <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__AnonStorey5()
				{
				}

				[Token(Token = "0x60023AD")]
				[Address(RVA = "0x7856D4", Offset = "0x7856D4", VA = "0x7856D4")]
				internal bool <>m__0(MB_TexSet x)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TexturePipelineData data;

			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal List<GameObject> usedObjsToMesh;

			[Token(Token = "0x4001819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal object $current;

			[Token(Token = "0x400181A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool $disposing;

			[Token(Token = "0x400181B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal int $PC;

			[Token(Token = "0x1700049B")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600239B")]
				[Address(RVA = "0x78565C", Offset = "0x78565C", VA = "0x78565C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700049C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600239C")]
				[Address(RVA = "0x785664", Offset = "0x785664", VA = "0x785664", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002399")]
			[Address(RVA = "0x780838", Offset = "0x780838", VA = "0x780838")]
			[DebuggerHidden]
			public <__Step1_CollectDistinctMatTexturesAndUsedObjects>c__Iterator0()
			{
			}

			[Token(Token = "0x600239A")]
			[Address(RVA = "0x7832E0", Offset = "0x7832E0", VA = "0x7832E0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600239D")]
			[Address(RVA = "0x78566C", Offset = "0x78566C", VA = "0x78566C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600239E")]
			[Address(RVA = "0x785670", Offset = "0x785670", VA = "0x785670", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000584")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DB30", Offset = "0x56DB30")]
		private sealed class <CalculateIdealSizesForTexturesInAtlasAndPadding>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400181C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TexturePipelineData data;

			[Token(Token = "0x400181D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x400181E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x400181F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x4001820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x1700049D")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023A1")]
				[Address(RVA = "0x78819C", Offset = "0x78819C", VA = "0x78819C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700049E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023A2")]
				[Address(RVA = "0x7881A4", Offset = "0x7881A4", VA = "0x7881A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600239F")]
			[Address(RVA = "0x781094", Offset = "0x781094", VA = "0x781094")]
			[DebuggerHidden]
			public <CalculateIdealSizesForTexturesInAtlasAndPadding>c__Iterator1()
			{
			}

			[Token(Token = "0x60023A0")]
			[Address(RVA = "0x7868D4", Offset = "0x7868D4", VA = "0x7868D4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023A3")]
			[Address(RVA = "0x7881AC", Offset = "0x7881AC", VA = "0x7881AC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023A4")]
			[Address(RVA = "0x7881B0", Offset = "0x7881B0", VA = "0x7881B0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000585")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DB90", Offset = "0x56DB90")]
		private sealed class <__Step3_BuildAndSaveAtlasesAndStoreResults>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Stopwatch <sw>__0;

			[Token(Token = "0x4001822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal TexturePipelineData data;

			[Token(Token = "0x4001823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Texture2D[] <atlases>__0;

			[Token(Token = "0x4001824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB_ITextureCombinerPacker packer;

			[Token(Token = "0x4001826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal MB3_TextureCombiner combiner;

			[Token(Token = "0x4001828")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal AtlasPackingResult atlasPackingResult;

			[Token(Token = "0x4001829")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400182A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal float <t3>__0;

			[Token(Token = "0x400182B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal StringBuilder <atlasMessage>__0;

			[Token(Token = "0x400182C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal StringBuilder report;

			[Token(Token = "0x400182D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal List<MB_MaterialAndUVRect> <mat2rect_map>__0;

			[Token(Token = "0x400182E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x400182F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal object $current;

			[Token(Token = "0x4001830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal bool $disposing;

			[Token(Token = "0x4001831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			internal int $PC;

			[Token(Token = "0x1700049F")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023A7")]
				[Address(RVA = "0x786790", Offset = "0x786790", VA = "0x786790", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023A8")]
				[Address(RVA = "0x786798", Offset = "0x786798", VA = "0x786798", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023A5")]
			[Address(RVA = "0x7815A8", Offset = "0x7815A8", VA = "0x7815A8")]
			[DebuggerHidden]
			public <__Step3_BuildAndSaveAtlasesAndStoreResults>c__Iterator2()
			{
			}

			[Token(Token = "0x60023A6")]
			[Address(RVA = "0x785758", Offset = "0x785758", VA = "0x785758", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023A9")]
			[Address(RVA = "0x7867A0", Offset = "0x7867A0", VA = "0x7867A0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023AA")]
			[Address(RVA = "0x7867B4", Offset = "0x7867B4", VA = "0x7867B4", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool USE_EXPERIMENTAL_HOIZONTALVERTICAL;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ShaderTextureProperty[] shaderTexPropertyNames;

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x77F9D0", Offset = "0x77F9D0", VA = "0x77F9D0")]
		public MB3_TextureCombinerPipeline()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x779234", Offset = "0x779234", VA = "0x779234")]
		internal static bool _ShouldWeCreateAtlasForThisProperty(int propertyIndex, bool considerNonTextureProperties, CreateAtlasForProperty[] allTexturesAreNullAndSameColor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x77F9D8", Offset = "0x77F9D8", VA = "0x77F9D8")]
		internal static bool _CollectPropertyNames(TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x780590", Offset = "0x780590", VA = "0x780590")]
		internal static bool _ShouldWeCreateAtlasForThisProperty(int propertyIndex, CreateAtlasForProperty[] allTexturesAreNullAndSameColor, TexturePipelineData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x780620", Offset = "0x780620", VA = "0x780620")]
		public static Texture GetTextureConsideringStandardShaderKeywords(string shaderName, Material mat, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x780754", Offset = "0x780754", VA = "0x780754")]
		[DebuggerHidden]
		internal static IEnumerator __Step1_CollectDistinctMatTexturesAndUsedObjects(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, List<GameObject> usedObjsToMesh, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x780840", Offset = "0x780840", VA = "0x780840")]
		private static CreateAtlasForProperty[] CalculateAllTexturesAreNullAndSameColor(TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x781008", Offset = "0x781008", VA = "0x781008")]
		[DebuggerHidden]
		internal static IEnumerator CalculateIdealSizesForTexturesInAtlasAndPadding(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x78109C", Offset = "0x78109C", VA = "0x78109C")]
		internal static AtlasPackingResult[] RunTexturePackerOnly(TexturePipelineData data, bool doSplitIntoMultiAtlasIfTooBig, MB_ITextureCombinerPacker texturePacker, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x781310", Offset = "0x781310", VA = "0x781310")]
		internal static MB_ITextureCombinerPacker CreatePacker(bool onlyOneTextureInAtlasReuseTextures, MB2_PackingAlgorithmEnum packingAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x781484", Offset = "0x781484", VA = "0x781484")]
		[DebuggerHidden]
		internal static IEnumerator __Step3_BuildAndSaveAtlasesAndStoreResults(MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, ProgressUpdateDelegate progressInfo, TexturePipelineData data, MB3_TextureCombiner combiner, MB_ITextureCombinerPacker packer, AtlasPackingResult atlasPackingResult, MB2_EditorMethodsInterface textureEditorMethods, MB_AtlasesAndRects resultAtlasesAndRects, StringBuilder report, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x7815B0", Offset = "0x7815B0", VA = "0x7815B0")]
		internal static StringBuilder GenerateReport(TexturePipelineData data)
		{
			return null;
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x77B0CC", Offset = "0x77B0CC", VA = "0x77B0CC")]
		internal static MB2_TexturePacker CreateTexturePacker(MB2_PackingAlgorithmEnum _packingAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x77DF98", Offset = "0x77DF98", VA = "0x77DF98")]
		internal static Vector2 GetAdjustedForScaleAndOffset2Dimensions(MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x78261C", Offset = "0x78261C", VA = "0x78261C")]
		internal static Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x782738", Offset = "0x782738", VA = "0x782738")]
		internal static float GetSubmeshArea(Mesh m, int submeshIdx)
		{
			return default(float);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x782A2C", Offset = "0x782A2C", VA = "0x782A2C")]
		internal static bool IsPowerOfTwo(int x)
		{
			return default(bool);
		}
	}
}
[Serializable]
[Token(Token = "0x20001C0")]
public class MB_AtlasesAndRects
{
	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D[] atlases;

	[NonSerialized]
	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MB_MaterialAndUVRect> mat2rect_map;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] texPropertyNames;

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x6851E4", Offset = "0x6851E4", VA = "0x6851E4")]
	public MB_AtlasesAndRects()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C1")]
public class MB_MultiMaterial
{
	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material combinedMaterial;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool considerMeshUVs;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Material> sourceMaterials;

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x68554C", Offset = "0x68554C", VA = "0x68554C")]
	public MB_MultiMaterial()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C2")]
public class MB_MaterialAndUVRect
{
	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rect atlasRect;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string srcObjName;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool allPropsUseSameTiling;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x56DBF0", Offset = "0x56DBF0")]
	public Rect allPropsUseSameTiling_sourceMaterialTiling;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x56DC28", Offset = "0x56DC28")]
	public Rect allPropsUseSameTiling_samplingEncapsulatinRect;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Rect propsUseDifferntTiling_srcUVsamplingRect;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MB_TextureTilingTreatment tilingTreatment;

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x6851EC", Offset = "0x6851EC", VA = "0x6851EC")]
	public MB_MaterialAndUVRect(Material mat, Rect destRect, bool allPropsUseSameTiling, Rect sourceMaterialTiling, Rect samplingEncapsulatingRect, Rect srcUVsamplingRect, MB_TextureTilingTreatment treatment, string objName)
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x685310", Offset = "0x685310", VA = "0x685310", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x685374", Offset = "0x685374", VA = "0x685374", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x6854C0", Offset = "0x6854C0", VA = "0x6854C0")]
	public Rect GetEncapsulatingRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x6854E0", Offset = "0x6854E0", VA = "0x6854E0")]
	public Rect GetMaterialTilingRect()
	{
		return default(Rect);
	}
}
[Token(Token = "0x20001C3")]
public class MB2_TextureBakeResults : ScriptableObject
{
	[Token(Token = "0x20001C4")]
	public class Material2AtlasRectangleMapper
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MB2_TextureBakeResults tbr;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] numTimesMatAppearsInAtlas;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MB_MaterialAndUVRect[] matsAndSrcUVRect;

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x68A508", Offset = "0x68A508", VA = "0x68A508")]
		public Material2AtlasRectangleMapper(MB2_TextureBakeResults res)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x68A824", Offset = "0x68A824", VA = "0x68A824")]
		public bool TryMapMaterialToUVRect(Material mat, Mesh m, int submeshIdx, int idxInResultMats, MB3_MeshCombinerSingle.MeshChannelsCache meshChannelCache, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisCache, out MB_TextureTilingTreatment tilingTreatment, out Rect rectInAtlas, out Rect encapsulatingRectOut, out Rect sourceMaterialTilingOut, ref string errorMsg, MB2_LogLevel logLevel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x68B39C", Offset = "0x68B39C", VA = "0x68B39C")]
		private void UpgradeToCurrentVersion(MB2_TextureBakeResults tbr)
		{
		}
	}

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int version;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB_MaterialAndUVRect[] materialsAndUVRects;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool doMultiMaterial;

	[Token(Token = "0x170000DF")]
	public static int VERSION
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x689020", Offset = "0x689020", VA = "0x689020")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x688FF4", Offset = "0x688FF4", VA = "0x688FF4")]
	public MB2_TextureBakeResults()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x689028", Offset = "0x689028", VA = "0x689028")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x6890D0", Offset = "0x6890D0", VA = "0x6890D0")]
	public static MB2_TextureBakeResults CreateForMaterialsOnRenderer(GameObject[] gos, List<Material> matsOnTargetRenderer)
	{
		return null;
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x6899BC", Offset = "0x6899BC", VA = "0x6899BC")]
	public bool DoAnyResultMatsUseConsiderMeshUVs()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x689A5C", Offset = "0x689A5C", VA = "0x689A5C")]
	public bool ContainsMaterial(Material m)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x689B54", Offset = "0x689B54", VA = "0x689B54")]
	public string GetDescription()
	{
		return null;
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x689FC0", Offset = "0x689FC0", VA = "0x689FC0")]
	public static bool IsMeshAndMaterialRectEnclosedByAtlasRect(MB_TextureTilingTreatment tilingTreatment, Rect uvR, Rect sourceMaterialTiling, Rect samplingEncapsulatinRect, MB2_LogLevel logLevel)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C5")]
public class MB2_UpdateSkinnedMeshBoundsFromBones : MonoBehaviour
{
	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] bones;

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x68B454", Offset = "0x68B454", VA = "0x68B454")]
	public MB2_UpdateSkinnedMeshBoundsFromBones()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x68B45C", Offset = "0x68B45C", VA = "0x68B45C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x68B5A8", Offset = "0x68B5A8", VA = "0x68B5A8")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001C6")]
public class MB2_UpdateSkinnedMeshBoundsFromBounds : MonoBehaviour
{
	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objects;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x68B63C", Offset = "0x68B63C", VA = "0x68B63C")]
	public MB2_UpdateSkinnedMeshBoundsFromBounds()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x68B644", Offset = "0x68B644", VA = "0x68B644")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x68B9A4", Offset = "0x68B9A4", VA = "0x68B9A4")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001C7")]
public class MB3_BatchPrefabBaker : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001C8")]
	public class MB3_PrefabBakerRow
	{
		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject sourcePrefab;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject resultPrefab;

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x68BBBC", Offset = "0x68BBBC", VA = "0x68BBBC")]
		public MB3_PrefabBakerRow()
		{
		}
	}

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB3_PrefabBakerRow[] prefabRows;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string outputPrefabFolder;

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x68BBAC", Offset = "0x68BBAC", VA = "0x68BBAC")]
	public MB3_BatchPrefabBaker()
	{
	}
}
[Token(Token = "0x20001C9")]
public class MB3_BoneWeightCopier : MonoBehaviour
{
	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject inputGameObject;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject outputPrefab;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float radius;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SkinnedMeshRenderer seamMesh;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string outputFolder;

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x68BBC4", Offset = "0x68BBC4", VA = "0x68BBC4")]
	public MB3_BoneWeightCopier()
	{
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x20001CA")]
	public class MB3_Comment : MonoBehaviour
	{
		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string comment;

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x6BE74C", Offset = "0x6BE74C", VA = "0x6BE74C")]
		public MB3_Comment()
		{
		}
	}
}
[Token(Token = "0x20001CB")]
public class MB3_DisableHiddenAnimations : MonoBehaviour
{
	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Animation> animationsToCull;

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x68BBD8", Offset = "0x68BBD8", VA = "0x68BBD8")]
	public MB3_DisableHiddenAnimations()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x68BC48", Offset = "0x68BC48", VA = "0x68BC48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x68BD78", Offset = "0x68BD78", VA = "0x68BD78")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x68BE9C", Offset = "0x68BE9C", VA = "0x68BE9C")]
	private void OnBecameInvisible()
	{
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x20001CC")]
	public class MBVersionConcrete : MBVersionInterface
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 _HALF_UV;

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x78ACB0", Offset = "0x78ACB0", VA = "0x78ACB0")]
		public MBVersionConcrete()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x78AD04", Offset = "0x78AD04", VA = "0x78AD04", Slot = "4")]
		public string version()
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x78AD4C", Offset = "0x78AD4C", VA = "0x78AD4C", Slot = "5")]
		public int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x78AE24", Offset = "0x78AE24", VA = "0x78AE24", Slot = "6")]
		public int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x78AF00", Offset = "0x78AF00", VA = "0x78AF00", Slot = "7")]
		public bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x78AF2C", Offset = "0x78AF2C", VA = "0x78AF2C", Slot = "8")]
		public void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x78AF60", Offset = "0x78AF60", VA = "0x78AF60", Slot = "9")]
		public void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x78AF94", Offset = "0x78AF94", VA = "0x78AF94", Slot = "10")]
		public UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x78B000", Offset = "0x78B000", VA = "0x78B000", Slot = "18")]
		public void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x78B004", Offset = "0x78B004", VA = "0x78B004", Slot = "11")]
		public bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x78B054", Offset = "0x78B054", VA = "0x78B054")]
		public Vector2[] GetMeshUV1s(Mesh m, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x78B2B4", Offset = "0x78B2B4", VA = "0x78B2B4", Slot = "12")]
		public Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x78B5E4", Offset = "0x78B5E4", VA = "0x78B5E4", Slot = "13")]
		public void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x78B618", Offset = "0x78B618", VA = "0x78B618", Slot = "14")]
		public void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x78B64C", Offset = "0x78B64C", VA = "0x78B64C", Slot = "15")]
		public void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x78B680", Offset = "0x78B680", VA = "0x78B680", Slot = "16")]
		public Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x78B6AC", Offset = "0x78B6AC", VA = "0x78B6AC", Slot = "17")]
		public Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x78B88C", Offset = "0x78B88C", VA = "0x78B88C", Slot = "19")]
		public int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x78B8C0", Offset = "0x78B8C0", VA = "0x78B8C0", Slot = "20")]
		public float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x78B904", Offset = "0x78B904", VA = "0x78B904", Slot = "21")]
		public void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x78B968", Offset = "0x78B968", VA = "0x78B968", Slot = "22")]
		public void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x78B994", Offset = "0x78B994", VA = "0x78B994", Slot = "23")]
		public void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x78BA00", Offset = "0x78BA00", VA = "0x78BA00", Slot = "24")]
		public int MaxMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x78BA08", Offset = "0x78BA08", VA = "0x78BA08", Slot = "25")]
		public void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x78BAE8", Offset = "0x78BAE8", VA = "0x78BAE8", Slot = "26")]
		public bool GraphicsUVStartsAtTop()
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x20001CD")]
public class MB3_MeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MeshCombinerSingle _meshCombiner;

	[Token(Token = "0x170000E0")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x68D248", Offset = "0x68D248", VA = "0x68D248", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0x68D174", Offset = "0x68D174", VA = "0x68D174")]
	public MB3_MeshBaker()
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x68D250", Offset = "0x68D250", VA = "0x68D250")]
	public void BuildSceneMeshObject()
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x68D284", Offset = "0x68D284", VA = "0x68D284", Slot = "23")]
	public virtual bool ShowHide(GameObject[] gos, GameObject[] deleteGOs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x68D2C8", Offset = "0x68D2C8", VA = "0x68D2C8", Slot = "24")]
	public virtual void ApplyShowHide()
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x68D2FC", Offset = "0x68D2FC", VA = "0x68D2FC", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x68D3F0", Offset = "0x68D3F0", VA = "0x68D3F0", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x68D4E4", Offset = "0x68D4E4", VA = "0x68D4E4")]
	public void OnDestroy()
	{
	}
}
[Token(Token = "0x20001CE")]
public abstract class MB3_MeshBakerCommon : MB3_MeshBakerRoot
{
	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useObjsToMeshFromTexBaker;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool clearBuffersAfterBake;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string bakeAssetsInPlaceFolderPath;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public GameObject resultPrefab;

	[Token(Token = "0x170000E1")]
	public abstract MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000AF1")]
		get;
	}

	[Token(Token = "0x170000E2")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x68D520", Offset = "0x68D520", VA = "0x68D520", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x68D55C", Offset = "0x68D55C", VA = "0x68D55C", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x68D1D8", Offset = "0x68D1D8", VA = "0x68D1D8")]
	protected MB3_MeshBakerCommon()
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x68D5A4", Offset = "0x68D5A4", VA = "0x68D5A4", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x68D7A8", Offset = "0x68D7A8", VA = "0x68D7A8")]
	public void EnableDisableSourceObjectRenderers(bool show)
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x68DB10", Offset = "0x68DB10", VA = "0x68DB10", Slot = "8")]
	public virtual void ClearMesh()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x68DB50", Offset = "0x68DB50", VA = "0x68DB50", Slot = "9")]
	public virtual void DestroyMesh()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x68DB90", Offset = "0x68DB90", VA = "0x68DB90", Slot = "10")]
	public virtual void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x68DBDC", Offset = "0x68DBDC", VA = "0x68DBDC", Slot = "11")]
	public virtual int GetNumObjectsInCombined()
	{
		return default(int);
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x68DC1C", Offset = "0x68DC1C", VA = "0x68DC1C", Slot = "12")]
	public virtual int GetNumVerticesFor(GameObject go)
	{
		return default(int);
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x68DC68", Offset = "0x68DC68", VA = "0x68DC68")]
	public MB3_TextureBaker GetTextureBaker()
	{
		return null;
	}

	[Token(Token = "0x6000AFC")]
	public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

	[Token(Token = "0x6000AFD")]
	public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true);

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0x68DDAC", Offset = "0x68DDAC", VA = "0x68DDAC", Slot = "15")]
	public virtual void Apply([Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0x68DEA8", Offset = "0x68DEA8", VA = "0x68DEA8", Slot = "16")]
	public virtual void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x68E03C", Offset = "0x68E03C", VA = "0x68E03C", Slot = "17")]
	public virtual bool CombinedMeshContains(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x68E088", Offset = "0x68E088", VA = "0x68E088", Slot = "18")]
	public virtual void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV1 = false, bool updateUV2 = false, bool updateColors = false, bool updateSkinningInfo = false)
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x68E208", Offset = "0x68E208", VA = "0x68E208", Slot = "19")]
	public virtual void UpdateSkinnedMeshApproximateBounds()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x68E270", Offset = "0x68E270", VA = "0x68E270", Slot = "20")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBones()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x68E2D8", Offset = "0x68E2D8", VA = "0x68E2D8", Slot = "21")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBounds()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x68E340", Offset = "0x68E340", VA = "0x68E340", Slot = "22")]
	protected virtual bool _ValidateForUpdateSkinnedMeshBounds()
	{
		return default(bool);
	}
}
[Token(Token = "0x20001CF")]
public class MB3_MeshBakerGrouper : MonoBehaviour
{
	[Token(Token = "0x20001D0")]
	public enum ClusterType
	{
		[Token(Token = "0x4000834")]
		none,
		[Token(Token = "0x4000835")]
		grid,
		[Token(Token = "0x4000836")]
		pie,
		[Token(Token = "0x4000837")]
		agglomerative
	}

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBakerGrouperCore grouper;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ClusterType clusterType;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GrouperData data;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Bounds sourceObjectBounds;

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x68E54C", Offset = "0x68E54C", VA = "0x68E54C")]
	public MB3_MeshBakerGrouper()
	{
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x68E650", Offset = "0x68E650", VA = "0x68E650")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x68E700", Offset = "0x68E700", VA = "0x68E700")]
	public MB3_MeshBakerGrouperCore CreateGrouper(ClusterType t, GrouperData data)
	{
		return null;
	}
}
namespace DigitalOpus.MB.Core
{
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class GrouperData
	{
		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool clusterOnLMIndex;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool clusterByLODLevel;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 origin;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 cellSize;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int pieNumSegments;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pieAxis;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int height;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxDistBetweenClusters;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool includeCellsWithOnlyOneRenderer;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x6AC76C", Offset = "0x6AC76C", VA = "0x6AC76C")]
		public GrouperData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public abstract class MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x2000588")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DCA0", Offset = "0x56DCA0")]
		private sealed class <DoClustering>c__AnonStorey0
		{
			[Token(Token = "0x4001837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Renderer r;

			[Token(Token = "0x60023AE")]
			[Address(RVA = "0x6C1594", Offset = "0x6C1594", VA = "0x6C1594")]
			public <DoClustering>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60023AF")]
			[Address(RVA = "0x6C1928", Offset = "0x6C1928", VA = "0x6C1928")]
			internal bool <>m__0(Renderer x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrouperData d;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x6BF504", Offset = "0x6BF504", VA = "0x6BF504")]
		protected MB3_MeshBakerGrouperCore()
		{
		}

		[Token(Token = "0x6000B0B")]
		public abstract Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection);

		[Token(Token = "0x6000B0C")]
		public abstract void DrawGizmos(Bounds sourceObjectBounds);

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x6C0678", Offset = "0x6C0678", VA = "0x6C0678")]
		public void DoClustering(MB3_TextureBaker tb, MB3_MeshBakerGrouper grouper)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x6C1364", Offset = "0x6C1364", VA = "0x6C1364")]
		private Dictionary<int, List<Renderer>> GroupByLightmapIndex(List<Renderer> gaws)
		{
			return null;
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x6C159C", Offset = "0x6C159C", VA = "0x6C159C")]
		private void AddMeshBaker(MB3_TextureBaker tb, string key, List<Renderer> gaws)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class MB3_MeshBakerGrouperNone : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x6C2B30", Offset = "0x6C2B30", VA = "0x6C2B30")]
		public MB3_MeshBakerGrouperNone(GrouperData d)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x6C2B5C", Offset = "0x6C2B5C", VA = "0x6C2B5C", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x6C2D5C", Offset = "0x6C2D5C", VA = "0x6C2D5C", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class MB3_MeshBakerGrouperGrid : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x6C19A8", Offset = "0x6C19A8", VA = "0x6C19A8")]
		public MB3_MeshBakerGrouperGrid(GrouperData d)
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x6C19D4", Offset = "0x6C19D4", VA = "0x6C19D4", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x6C1F20", Offset = "0x6C1F20", VA = "0x6C1F20", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public class MB3_MeshBakerGrouperPie : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x6C2D60", Offset = "0x6C2D60", VA = "0x6C2D60")]
		public MB3_MeshBakerGrouperPie(GrouperData data)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x6C2D8C", Offset = "0x6C2D8C", VA = "0x6C2D8C", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x6C347C", Offset = "0x6C347C", VA = "0x6C347C", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x6C3830", Offset = "0x6C3830", VA = "0x6C3830")]
		public static void DrawCircle(Vector3 axis, Vector3 center, float radius, int subdiv)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public class MB3_MeshBakerGrouperKMeans : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numClusters;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] clusterCenters;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] clusterSizes;

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x6C2554", Offset = "0x6C2554", VA = "0x6C2554")]
		public MB3_MeshBakerGrouperKMeans(GrouperData data)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x6C2600", Offset = "0x6C2600", VA = "0x6C2600", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x6C2A40", Offset = "0x6C2A40", VA = "0x6C2A40", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D7")]
	public class MB3_MeshBakerGrouperCluster : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x2000589")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DCB0", Offset = "0x56DCB0")]
		private sealed class <BuildClusters>c__AnonStorey0
		{
			[Token(Token = "0x4001838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<GameObject> gos;

			[Token(Token = "0x60023B0")]
			[Address(RVA = "0x6BFD34", Offset = "0x6BFD34", VA = "0x6BFD34")]
			public <BuildClusters>c__AnonStorey0()
			{
			}
		}

		[Token(Token = "0x200058A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DCC0", Offset = "0x56DCC0")]
		private sealed class <BuildClusters>c__AnonStorey1
		{
			[Token(Token = "0x4001839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int i;

			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal <BuildClusters>c__AnonStorey0 <>f__ref$0;

			[Token(Token = "0x60023B1")]
			[Address(RVA = "0x6BFD3C", Offset = "0x6BFD3C", VA = "0x6BFD3C")]
			public <BuildClusters>c__AnonStorey1()
			{
			}

			[Token(Token = "0x60023B2")]
			[Address(RVA = "0x6C05B4", Offset = "0x6C05B4", VA = "0x6C05B4")]
			internal bool <>m__0(MB3_AgglomerativeClustering.item_s x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MB3_AgglomerativeClustering cluster;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _lastMaxDistBetweenClusters;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float _ObjsExtents;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float _minDistBetweenClusters;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MB3_AgglomerativeClustering.ClusterNode> _clustersToDraw;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] _radii;

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x6BF470", Offset = "0x6BF470", VA = "0x6BF470")]
		public MB3_MeshBakerGrouperCluster(GrouperData data, List<GameObject> gos)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x6BF50C", Offset = "0x6BF50C", VA = "0x6BF50C", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x6BF818", Offset = "0x6BF818", VA = "0x6BF818")]
		public void BuildClusters(List<GameObject> gos, ProgressUpdateCancelableDelegate progFunc)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x6BFD44", Offset = "0x6BFD44", VA = "0x6BFD44")]
		private void _BuildListOfClustersToDraw(ProgressUpdateCancelableDelegate progFunc, out float smallest, out float largest)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x6C0424", Offset = "0x6C0424", VA = "0x6C0424", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
}
[Token(Token = "0x20001D8")]
public abstract class MB3_MeshBakerRoot : MonoBehaviour
{
	[Token(Token = "0x20001D9")]
	public class ZSortObjects
	{
		[Token(Token = "0x20001DA")]
		public class Item
		{
			[Token(Token = "0x400084E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x400084F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 point;

			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0x68F9A4", Offset = "0x68F9A4", VA = "0x68F9A4")]
			public Item()
			{
			}
		}

		[Token(Token = "0x20001DB")]
		public class ItemComparer : IComparer<Item>
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0x68F9AC", Offset = "0x68F9AC", VA = "0x68F9AC")]
			public ItemComparer()
			{
			}

			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0x68F9B4", Offset = "0x68F9B4", VA = "0x68F9B4", Slot = "4")]
			public int Compare(Item a, Item b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 sortAxis;

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x68F490", Offset = "0x68F490", VA = "0x68F490")]
		public ZSortObjects()
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x68F498", Offset = "0x68F498", VA = "0x68F498")]
		public void SortByDistanceAlongAxis(List<GameObject> gos)
		{
		}
	}

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DO_INTEGRITY_CHECKS;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 sortAxis;

	[Token(Token = "0x170000E3")]
	[HideInInspector]
	public abstract MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000B23")]
		get;
		[Token(Token = "0x6000B24")]
		set;
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x68D518", Offset = "0x68D518", VA = "0x68D518")]
	protected MB3_MeshBakerRoot()
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x68E8A8", Offset = "0x68E8A8", VA = "0x68E8A8", Slot = "6")]
	public virtual List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x68E8B0", Offset = "0x68E8B0", VA = "0x68E8B0")]
	public static bool DoCombinedValidate(MB3_MeshBakerRoot mom, MB_ObjsToCombineTypes objToCombineType, MB2_EditorMethodsInterface editorMethods, MB2_ValidationLevel validationLevel)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001DC")]
public class MB3_MultiMeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MultiMeshCombiner _meshCombiner;

	[Token(Token = "0x170000E4")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x68FAB8", Offset = "0x68FAB8", VA = "0x68FAB8", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x68FA54", Offset = "0x68FA54", VA = "0x68FA54")]
	public MB3_MultiMeshBaker()
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x68FAC0", Offset = "0x68FAC0", VA = "0x68FAC0", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x68FCC4", Offset = "0x68FCC4", VA = "0x68FCC4", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x68FEC8", Offset = "0x68FEC8", VA = "0x68FEC8")]
	public void OnDestroy()
	{
	}
}
[Token(Token = "0x20001DD")]
public class MB3_TextureBaker : MB3_MeshBakerRoot
{
	[Token(Token = "0x20001DE")]
	public delegate void OnCombinedTexturesCoroutineSuccess();

	[Token(Token = "0x20001DF")]
	public delegate void OnCombinedTexturesCoroutineFail();

	[Token(Token = "0x20001E0")]
	public class CreateAtlasesCoroutineResult
	{
		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool success;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isFinished;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x692B5C", Offset = "0x692B5C", VA = "0x692B5C")]
		public CreateAtlasesCoroutineResult()
		{
		}
	}

	[Token(Token = "0x200058B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DE40", Offset = "0x56DE40")]
	private sealed class <CreateAtlasesCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MBVersionConcrete <mbv>__0;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal CreateAtlasesCoroutineResult coroutineResult;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float maxTimePerFrame;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal MB2_ValidationLevel <vl>__0;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal MB3_TextureCombiner <combiner>__0;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool saveAtlasesAsAssets;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int <numResults>__0;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal int <i>__1;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Material <resMatToPass>__2;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal List<Material> <sourceMats>__2;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult <coroutineResult2>__2;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal ProgressUpdateDelegate progressInfo;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal MB2_EditorMethodsInterface editorMethods;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal MB3_MeshBakerCommon[] <mb>__0;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal MB3_TextureBaker $this;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal object $current;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal bool $disposing;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int $PC;

		[Token(Token = "0x170004A1")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023B5")]
			[Address(RVA = "0x695490", Offset = "0x695490", VA = "0x695490", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023B6")]
			[Address(RVA = "0x695498", Offset = "0x695498", VA = "0x695498", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0x692B54", Offset = "0x692B54", VA = "0x692B54")]
		[DebuggerHidden]
		public <CreateAtlasesCoroutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0x6940B0", Offset = "0x6940B0", VA = "0x6940B0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0x6954A0", Offset = "0x6954A0", VA = "0x6954A0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x6954B4", Offset = "0x6954B4", VA = "0x6954B4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected MB2_TextureBakeResults _textureBakeResults;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected int _atlasPadding;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected int _maxAtlasSize;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected bool _useMaxAtlasWidthOverride;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	protected int _maxAtlasWidthOverride;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool _useMaxAtlasHeightOverride;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected int _maxAtlasHeightOverride;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected bool _resizePowerOfTwoTextures;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	protected bool _fixOutOfBoundsUVs;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	protected int _maxTilingBakeSize;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected MB2_PackingAlgorithmEnum _packingAlgorithm;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected bool _meshBakerTexturePackerForcePowerOfTwo;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected List<ShaderTextureProperty> _customShaderProperties;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected List<string> _customShaderPropNames_Depricated;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected bool _doMultiMaterial;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfTooBig;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfOBUVs;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected Material _resultMaterial;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected bool _considerNonTextureProperties;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[SerializeField]
	protected bool _doSuggestTreatment;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CreateAtlasesCoroutineResult _coroutineResult;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public OnCombinedTexturesCoroutineSuccess onBuiltAtlasesSuccess;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public OnCombinedTexturesCoroutineFail onBuiltAtlasesFail;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public MB_AtlasesAndRects[] OnCombinedTexturesCoroutineAtlasesAndRects;

	[Token(Token = "0x170000E5")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x692474", Offset = "0x692474", VA = "0x692474", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x69247C", Offset = "0x69247C", VA = "0x69247C", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public virtual int atlasPadding
	{
		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x692484", Offset = "0x692484", VA = "0x692484", Slot = "7")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x69248C", Offset = "0x69248C", VA = "0x69248C", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	public virtual int maxAtlasSize
	{
		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x692494", Offset = "0x692494", VA = "0x692494", Slot = "9")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x69249C", Offset = "0x69249C", VA = "0x69249C", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public virtual bool useMaxAtlasWidthOverride
	{
		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x6924A4", Offset = "0x6924A4", VA = "0x6924A4", Slot = "11")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x6924AC", Offset = "0x6924AC", VA = "0x6924AC", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public virtual int maxAtlasWidthOverride
	{
		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x6924B8", Offset = "0x6924B8", VA = "0x6924B8", Slot = "13")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x6924C0", Offset = "0x6924C0", VA = "0x6924C0", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x170000EA")]
	public virtual bool useMaxAtlasHeightOverride
	{
		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x6924C8", Offset = "0x6924C8", VA = "0x6924C8", Slot = "15")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x6924D0", Offset = "0x6924D0", VA = "0x6924D0", Slot = "16")]
		set
		{
		}
	}

	[Token(Token = "0x170000EB")]
	public virtual int maxAtlasHeightOverride
	{
		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x6924DC", Offset = "0x6924DC", VA = "0x6924DC", Slot = "17")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x6924E4", Offset = "0x6924E4", VA = "0x6924E4", Slot = "18")]
		set
		{
		}
	}

	[Token(Token = "0x170000EC")]
	public virtual bool resizePowerOfTwoTextures
	{
		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x6924EC", Offset = "0x6924EC", VA = "0x6924EC", Slot = "19")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x6924F4", Offset = "0x6924F4", VA = "0x6924F4", Slot = "20")]
		set
		{
		}
	}

	[Token(Token = "0x170000ED")]
	public virtual bool fixOutOfBoundsUVs
	{
		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x692500", Offset = "0x692500", VA = "0x692500", Slot = "21")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x692508", Offset = "0x692508", VA = "0x692508", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x170000EE")]
	public virtual int maxTilingBakeSize
	{
		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x692514", Offset = "0x692514", VA = "0x692514", Slot = "23")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x69251C", Offset = "0x69251C", VA = "0x69251C", Slot = "24")]
		set
		{
		}
	}

	[Token(Token = "0x170000EF")]
	public virtual MB2_PackingAlgorithmEnum packingAlgorithm
	{
		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x692524", Offset = "0x692524", VA = "0x692524", Slot = "25")]
		get
		{
			return default(MB2_PackingAlgorithmEnum);
		}
		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x69252C", Offset = "0x69252C", VA = "0x69252C", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x170000F0")]
	public bool meshBakerTexturePackerForcePowerOfTwo
	{
		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x692534", Offset = "0x692534", VA = "0x692534")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x69253C", Offset = "0x69253C", VA = "0x69253C")]
		set
		{
		}
	}

	[Token(Token = "0x170000F1")]
	public virtual List<ShaderTextureProperty> customShaderProperties
	{
		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x692548", Offset = "0x692548", VA = "0x692548", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x692550", Offset = "0x692550", VA = "0x692550", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public virtual List<string> customShaderPropNames
	{
		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x692558", Offset = "0x692558", VA = "0x692558", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x692560", Offset = "0x692560", VA = "0x692560", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	public virtual bool doMultiMaterial
	{
		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x692568", Offset = "0x692568", VA = "0x692568", Slot = "31")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x692570", Offset = "0x692570", VA = "0x692570", Slot = "32")]
		set
		{
		}
	}

	[Token(Token = "0x170000F4")]
	public virtual bool doMultiMaterialSplitAtlasesIfTooBig
	{
		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x69257C", Offset = "0x69257C", VA = "0x69257C", Slot = "33")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x692584", Offset = "0x692584", VA = "0x692584", Slot = "34")]
		set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public virtual bool doMultiMaterialSplitAtlasesIfOBUVs
	{
		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x692590", Offset = "0x692590", VA = "0x692590", Slot = "35")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x692598", Offset = "0x692598", VA = "0x692598", Slot = "36")]
		set
		{
		}
	}

	[Token(Token = "0x170000F6")]
	public virtual Material resultMaterial
	{
		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x6925A4", Offset = "0x6925A4", VA = "0x6925A4", Slot = "37")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x6925AC", Offset = "0x6925AC", VA = "0x6925AC", Slot = "38")]
		set
		{
		}
	}

	[Token(Token = "0x170000F7")]
	public bool considerNonTextureProperties
	{
		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x6925B4", Offset = "0x6925B4", VA = "0x6925B4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x6925BC", Offset = "0x6925BC", VA = "0x6925BC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F8")]
	public bool doSuggestTreatment
	{
		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x6925C8", Offset = "0x6925C8", VA = "0x6925C8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x6925D0", Offset = "0x6925D0", VA = "0x6925D0")]
		set
		{
		}
	}

	[Token(Token = "0x170000F9")]
	public CreateAtlasesCoroutineResult CoroutineResult
	{
		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x6925DC", Offset = "0x6925DC", VA = "0x6925DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x69235C", Offset = "0x69235C", VA = "0x69235C")]
	public MB3_TextureBaker()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x6925E4", Offset = "0x6925E4", VA = "0x6925E4", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0x692658", Offset = "0x692658", VA = "0x692658")]
	public MB_AtlasesAndRects[] CreateAtlases()
	{
		return null;
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x692A64", Offset = "0x692A64", VA = "0x692A64")]
	[DebuggerHidden]
	public IEnumerator CreateAtlasesCoroutine(ProgressUpdateDelegate progressInfo, CreateAtlasesCoroutineResult coroutineResult, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods, float maxTimePerFrame = 0.01f)
	{
		return null;
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x692668", Offset = "0x692668", VA = "0x692668")]
	public MB_AtlasesAndRects[] CreateAtlases(ProgressUpdateDelegate progressInfo, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods)
	{
		return null;
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x692B6C", Offset = "0x692B6C", VA = "0x692B6C")]
	private void unpackMat2RectMap(MB2_TextureBakeResults tbr)
	{
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x692E00", Offset = "0x692E00", VA = "0x692E00")]
	public MB3_TextureCombiner CreateAndConfigureTextureCombiner()
	{
		return null;
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x693054", Offset = "0x693054", VA = "0x693054")]
	public static void ConfigureNewMaterialToMatchOld(Material newMat, Material original)
	{
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x6934A4", Offset = "0x6934A4", VA = "0x6934A4")]
	private string PrintSet(HashSet<Material> s)
	{
		return null;
	}

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x69362C", Offset = "0x69362C", VA = "0x69362C")]
	private bool _ValidateResultMaterials()
	{
		return default(bool);
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x20001E1")]
	public interface TextureBlender
	{
		[Token(Token = "0x6000B6E")]
		bool DoesShaderNameMatch(string shaderName);

		[Token(Token = "0x6000B6F")]
		void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName);

		[Token(Token = "0x6000B70")]
		Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor);

		[Token(Token = "0x6000B71")]
		bool NonTexturePropertiesAreEqual(Material a, Material b);

		[Token(Token = "0x6000B72")]
		void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial);

		[Token(Token = "0x6000B73")]
		Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName);
	}
	[Token(Token = "0x20001E2")]
	public class TextureBlenderFallback : TextureBlender
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_doTintColor;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultColor;

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x78C738", Offset = "0x78C738", VA = "0x78C738")]
		public TextureBlenderFallback()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x78C770", Offset = "0x78C770", VA = "0x78C770", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x78C778", Offset = "0x78C778", VA = "0x78C778", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x78C8B4", Offset = "0x78C8B4", VA = "0x78C8B4", Slot = "6")]
		public Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x78C91C", Offset = "0x78C91C", VA = "0x78C91C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x78CB10", Offset = "0x78CB10", VA = "0x78CB10", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x78CC00", Offset = "0x78CC00", VA = "0x78CC00", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x78C9E8", Offset = "0x78C9E8", VA = "0x78C9E8")]
		public static bool _compareColor(Material a, Material b, Color defaultVal, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x78D6C8", Offset = "0x78D6C8", VA = "0x78D6C8")]
		public static bool _compareFloat(Material a, Material b, float defaultVal, string propertyName)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001E3")]
	public class TextureBlenderLegacyBumpDiffuse : TextureBlender
	{
		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x78D77C", Offset = "0x78D77C", VA = "0x78D77C")]
		public TextureBlenderLegacyBumpDiffuse()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x78D7B4", Offset = "0x78D7B4", VA = "0x78D7B4", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x78D848", Offset = "0x78D848", VA = "0x78D848", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x78D8F4", Offset = "0x78D8F4", VA = "0x78D8F4", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x78D95C", Offset = "0x78D95C", VA = "0x78D95C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x78D9C8", Offset = "0x78D9C8", VA = "0x78D9C8", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x78DA60", Offset = "0x78DA60", VA = "0x78DA60", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20001E4")]
	public class TextureBlenderLegacyDiffuse : TextureBlender
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x78DC48", Offset = "0x78DC48", VA = "0x78DC48")]
		public TextureBlenderLegacyDiffuse()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x78DC80", Offset = "0x78DC80", VA = "0x78DC80", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x78DD14", Offset = "0x78DD14", VA = "0x78DD14", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x78DDC0", Offset = "0x78DDC0", VA = "0x78DDC0", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x78DE28", Offset = "0x78DE28", VA = "0x78DE28", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x78DE94", Offset = "0x78DE94", VA = "0x78DE94", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x78DF2C", Offset = "0x78DF2C", VA = "0x78DF2C", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20001E5")]
	public class TextureBlenderMaterialPropertyCacheHelper
	{
		[Token(Token = "0x20001E6")]
		private struct MaterialPropertyPair
		{
			[Token(Token = "0x4000878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Material material;

			[Token(Token = "0x4000879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string property;

			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x78E5E8", Offset = "0x78E5E8", VA = "0x78E5E8")]
			public MaterialPropertyPair(Material m, string prop)
			{
			}

			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x78E6D0", Offset = "0x78E6D0", VA = "0x78E6D0", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x78E754", Offset = "0x78E754", VA = "0x78E754", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<MaterialPropertyPair, object> nonTexturePropertyValuesForSourceMaterials;

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x78E0C4", Offset = "0x78E0C4", VA = "0x78E0C4")]
		public TextureBlenderMaterialPropertyCacheHelper()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x78E134", Offset = "0x78E134", VA = "0x78E134")]
		private bool AllNonTexturePropertyValuesAreEqual(string prop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x78E354", Offset = "0x78E354", VA = "0x78E354")]
		public void CacheMaterialProperty(Material m, string property, object value)
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x78E3D8", Offset = "0x78E3D8", VA = "0x78E3D8")]
		public object GetValueIfAllSourceAreTheSameOrDefault(string property, object defaultValue)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	public class TextureBlenderStandardMetallic : TextureBlender
	{
		[Token(Token = "0x20001E8")]
		private enum Prop
		{
			[Token(Token = "0x4000890")]
			doColor,
			[Token(Token = "0x4000891")]
			doMetallic,
			[Token(Token = "0x4000892")]
			doEmission,
			[Token(Token = "0x4000893")]
			doBump,
			[Token(Token = "0x4000894")]
			doNone
		}

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_glossiness;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_glossMapScale;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_metallic;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_hasMetallicGlossMap;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_bumpScale;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color m_emissionColor;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Prop propertyToDo;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color m_generatingTintedAtlasColor;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_generatingTintedAtlasMetallic;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_generatingTintedAtlasGlossiness;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_generatingTintedAtlasGlossMapScale;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_generatingTintedAtlasBumpScale;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color m_generatingTintedAtlasEmission;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_notGeneratingAtlasDefaultMetallic;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x78E75C", Offset = "0x78E75C", VA = "0x78E75C")]
		public TextureBlenderStandardMetallic()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x78E830", Offset = "0x78E830", VA = "0x78E830", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x78E88C", Offset = "0x78E88C", VA = "0x78E88C", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x78EC30", Offset = "0x78EC30", VA = "0x78EC30", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x78EDDC", Offset = "0x78EDDC", VA = "0x78EDDC", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x78F064", Offset = "0x78F064", VA = "0x78F064", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x78F680", Offset = "0x78F680", VA = "0x78F680", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20001E9")]
	public class TextureBlenderStandardMetallicRoughness : TextureBlender
	{
		[Token(Token = "0x20001EA")]
		private enum Prop
		{
			[Token(Token = "0x40008AA")]
			doColor,
			[Token(Token = "0x40008AB")]
			doMetallic,
			[Token(Token = "0x40008AC")]
			doRoughness,
			[Token(Token = "0x40008AD")]
			doEmission,
			[Token(Token = "0x40008AE")]
			doBump,
			[Token(Token = "0x40008AF")]
			doNone
		}

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_roughness;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_metallic;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_hasMetallicGlossMap;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool m_hasSpecGlossMap;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_bumpScale;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color m_emissionColor;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Prop propertyToDo;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color m_generatingTintedAtlasColor;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_generatingTintedAtlasMetallic;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_generatingTintedAtlasRoughness;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_generatingTintedAtlasBumpScale;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Color m_generatingTintedAtlasEmission;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_notGeneratingAtlasDefaultMetallic;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x78FE28", Offset = "0x78FE28", VA = "0x78FE28")]
		public TextureBlenderStandardMetallicRoughness()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x78FEF8", Offset = "0x78FEF8", VA = "0x78FEF8", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x78FF54", Offset = "0x78FF54", VA = "0x78FF54", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x790344", Offset = "0x790344", VA = "0x790344", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x790500", Offset = "0x790500", VA = "0x790500", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x790898", Offset = "0x790898", VA = "0x790898", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x790EF4", Offset = "0x790EF4", VA = "0x790EF4", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20001EB")]
	public class TextureBlenderStandardSpecular : TextureBlender
	{
		[Token(Token = "0x20001EC")]
		private enum Prop
		{
			[Token(Token = "0x40008C6")]
			doColor,
			[Token(Token = "0x40008C7")]
			doSpecular,
			[Token(Token = "0x40008C8")]
			doEmission,
			[Token(Token = "0x40008C9")]
			doBump,
			[Token(Token = "0x40008CA")]
			doNone
		}

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_glossiness;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_SpecGlossMapScale;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color m_specColor;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_hasSpecGlossMap;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_bumpScale;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Color m_emissionColor;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Prop propertyToDo;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color m_generatingTintedAtlaColor;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color m_generatingTintedAtlaSpecular;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_generatingTintedAtlaGlossiness;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float m_generatingTintedAtlaSpecGlossMapScale;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_generatingTintedAtlaBumpScale;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color m_generatingTintedAtlaEmission;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Color m_notGeneratingAtlasDefaultSpecularColor;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x791794", Offset = "0x791794", VA = "0x791794")]
		public TextureBlenderStandardSpecular()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x7918B0", Offset = "0x7918B0", VA = "0x7918B0", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x79190C", Offset = "0x79190C", VA = "0x79190C", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x791CE0", Offset = "0x791CE0", VA = "0x791CE0", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x791E8C", Offset = "0x791E8C", VA = "0x791E8C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x792138", Offset = "0x792138", VA = "0x792138", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x79279C", Offset = "0x79279C", VA = "0x79279C", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}
	}
}
namespace Nest.Addons
{
	[Token(Token = "0x20001ED")]
	public class ButtonInterpreter : MonoBehaviour
	{
		[Token(Token = "0x20001EE")]
		public enum InteractionState
		{
			[Token(Token = "0x40008D3")]
			Dormant,
			[Token(Token = "0x40008D4")]
			Active,
			[Token(Token = "0x40008D5")]
			Used
		}

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x56DEA0", Offset = "0x56DEA0")]
		public float MaxInteractDistance;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode InteractKey;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera _camera;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionState _eventState;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool _canInteract;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NestInput _currentInteractableEvent;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit[] _results;

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x69638C", Offset = "0x69638C", VA = "0x69638C")]
		public ButtonInterpreter()
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x69639C", Offset = "0x69639C", VA = "0x69639C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x69646C", Offset = "0x69646C", VA = "0x69646C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x696610", Offset = "0x696610", VA = "0x696610")]
		private void InvokeButton(bool state)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x69677C", Offset = "0x69677C", VA = "0x69677C", Slot = "4")]
		protected virtual bool FindInteractable()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EF")]
	public class SceneController : Singleton<SceneController>
	{
		[Token(Token = "0x20001F0")]
		public class PostboxProperty
		{
			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Scene Scene;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ScenePostbox Postbox;

			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x696E3C", Offset = "0x696E3C", VA = "0x696E3C")]
			public PostboxProperty()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001F1")]
		public class Message
		{
			[Token(Token = "0x40008DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string Recipient;

			[Token(Token = "0x40008DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string Contents;

			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x697A00", Offset = "0x697A00", VA = "0x697A00")]
			public Message()
			{
			}
		}

		[Token(Token = "0x200058C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DEF8", Offset = "0x56DEF8")]
		private sealed class <LoadPause>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string scene;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal SceneController $this;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x4001851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004A3")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023BB")]
				[Address(RVA = "0x6977F8", Offset = "0x6977F8", VA = "0x6977F8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023BC")]
				[Address(RVA = "0x697800", Offset = "0x697800", VA = "0x697800", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023B9")]
			[Address(RVA = "0x697694", Offset = "0x697694", VA = "0x697694")]
			[DebuggerHidden]
			public <LoadPause>c__Iterator0()
			{
			}

			[Token(Token = "0x60023BA")]
			[Address(RVA = "0x6976E0", Offset = "0x6976E0", VA = "0x6976E0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023BD")]
			[Address(RVA = "0x697808", Offset = "0x697808", VA = "0x697808", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023BE")]
			[Address(RVA = "0x69781C", Offset = "0x69781C", VA = "0x69781C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200058D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DF58", Offset = "0x56DF58")]
		private sealed class <LoadSceneOperation>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string scene;

			[Token(Token = "0x4001853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal LoadSceneMode sceneMode;

			[Token(Token = "0x4001854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal AsyncOperation <op>__0;

			[Token(Token = "0x4001855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal SceneController $this;

			[Token(Token = "0x4001856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal object $current;

			[Token(Token = "0x4001857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x4001858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x170004A5")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023C1")]
				[Address(RVA = "0x697978", Offset = "0x697978", VA = "0x697978", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023C2")]
				[Address(RVA = "0x697980", Offset = "0x697980", VA = "0x697980", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023BF")]
			[Address(RVA = "0x69769C", Offset = "0x69769C", VA = "0x69769C")]
			[DebuggerHidden]
			public <LoadSceneOperation>c__Iterator1()
			{
			}

			[Token(Token = "0x60023C0")]
			[Address(RVA = "0x697880", Offset = "0x697880", VA = "0x697880", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023C3")]
			[Address(RVA = "0x697988", Offset = "0x697988", VA = "0x697988", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023C4")]
			[Address(RVA = "0x69799C", Offset = "0x69799C", VA = "0x69799C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent LoadSceneCallback;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PauseScene;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ScenePostbox _pausePostbox;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Scene _pauseScene;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Dictionary<string, PostboxProperty> _postboxes;

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x696B18", Offset = "0x696B18", VA = "0x696B18")]
		public SceneController()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x696BA0", Offset = "0x696BA0", VA = "0x696BA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x696C2C", Offset = "0x696C2C", VA = "0x696C2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x696CB8", Offset = "0x696CB8", VA = "0x696CB8")]
		public void RegisterPostbox(ScenePostbox postbox)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x696E44", Offset = "0x696E44", VA = "0x696E44")]
		public void RemovePostbox(string postboxName)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x696E48", Offset = "0x696E48", VA = "0x696E48")]
		public Scene FindPostboxSceneFromName(string postboxName)
		{
			return default(Scene);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x696EE4", Offset = "0x696EE4", VA = "0x696EE4")]
		public void LoadSceneSimple(string scene)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x696F24", Offset = "0x696F24", VA = "0x696F24")]
		public void LoadScene(string scene)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x696FF4", Offset = "0x696FF4", VA = "0x696FF4")]
		public void LoadSceneSingle(string scene)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x697024", Offset = "0x697024", VA = "0x697024")]
		public void UnloadScene(string scene)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x697030", Offset = "0x697030", VA = "0x697030")]
		public void UnloadScene(int index)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x69703C", Offset = "0x69703C", VA = "0x69703C")]
		public void SendSceneMessage(string message)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x69729C", Offset = "0x69729C", VA = "0x69729C")]
		public void SendSceneMessage(string recipient, string message)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x69741C", Offset = "0x69741C", VA = "0x69741C")]
		public void SendPauseEvent(string message)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x6974FC", Offset = "0x6974FC", VA = "0x6974FC")]
		public void DisplayPause()
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x697608", Offset = "0x697608", VA = "0x697608")]
		[DebuggerHidden]
		private IEnumerator LoadPause(string scene)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x696F54", Offset = "0x696F54", VA = "0x696F54")]
		[DebuggerHidden]
		private IEnumerator LoadSceneOperation(string scene, LoadSceneMode sceneMode = LoadSceneMode.Additive)
		{
			return null;
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x6976A4", Offset = "0x6976A4", VA = "0x6976A4")]
		private void SceneUnloaded(Scene scene)
		{
		}
	}
}
[Token(Token = "0x20001F2")]
public class SceneEvents : MonoBehaviour
{
	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x1107FD8", Offset = "0x1107FD8", VA = "0x1107FD8")]
	public SceneEvents()
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x1107FE0", Offset = "0x1107FE0", VA = "0x1107FE0")]
	public void Send(string message)
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x110804C", Offset = "0x110804C", VA = "0x110804C")]
	public void LoadSceneSingle(string sceneName)
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x11080B8", Offset = "0x11080B8", VA = "0x11080B8")]
	public void LoadSceneAdditively(string sceneName)
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x1108124", Offset = "0x1108124", VA = "0x1108124")]
	public void UnloadScene(string sceneName)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x1108190", Offset = "0x1108190", VA = "0x1108190")]
	public void UnloadScene(int index)
	{
	}
}
namespace Nest.Addons
{
	[Token(Token = "0x20001F3")]
	public class ScenePostbox : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F4")]
		public class EventDictionary : SerializableDictionaryBase<string, UnityEvent>
		{
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0x697A78", Offset = "0x697A78", VA = "0x697A78")]
			public EventDictionary()
			{
			}
		}

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EventDictionary Events;

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x697A08", Offset = "0x697A08", VA = "0x697A08")]
		public ScenePostbox()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x697200", Offset = "0x697200", VA = "0x697200")]
		public void RecieveEvent(string message)
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x697A10", Offset = "0x697A10", VA = "0x697A10")]
		private void OnEnable()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public abstract class Singleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Persistent;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DFB8", Offset = "0x56DFB8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56DFB8", Offset = "0x56DFB8")]
		private static bool <Instantiated>k__BackingField;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56DFF4", Offset = "0x56DFF4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56DFF4", Offset = "0x56DFF4")]
		private static bool <Destroyed>k__BackingField;

		[Token(Token = "0x170000FA")]
		public static T Instance
		{
			[Token(Token = "0x6000BCE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		public static bool Instantiated
		{
			[Token(Token = "0x6000BCF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E030", Offset = "0x56E030")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E040", Offset = "0x56E040")]
			private set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public static bool Destroyed
		{
			[Token(Token = "0x6000BD1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E050", Offset = "0x56E050")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E060", Offset = "0x56E060")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BCD")]
		protected Singleton()
		{
		}

		[Token(Token = "0x6000BD3")]
		private static void CreateInstance()
		{
		}

		[Token(Token = "0x6000BD4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000BD5")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BD6")]
		public void Touch()
		{
		}
	}
}
namespace Nest.Components
{
	[Token(Token = "0x20001F6")]
	public class AudioInput : NestInput
	{
		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float DecibelReference;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int DecibelLimit;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[NestOption]
		public bool LessThan;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[NestOption]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56E080", Offset = "0x56E080")]
		public float TriggerTarget;

		[Token(Token = "0x40008E8")]
		private const int SampleCount = 1024;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioSource _audioSource;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _rmsValue;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _decibels;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float[] _wLeftChannel;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] _wRightChannel;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float[] _waveform;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float CurrentAudioValue;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float[] _combineChannelsResult;

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x697AC8", Offset = "0x697AC8", VA = "0x697AC8")]
		public AudioInput()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x697B08", Offset = "0x697B08", VA = "0x697B08", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x697BF0", Offset = "0x697BF0", VA = "0x697BF0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x697C90", Offset = "0x697C90", VA = "0x697C90")]
		private void AnalyzeSound()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x697E64", Offset = "0x697E64", VA = "0x697E64")]
		private float[] CombineChannels(float[] left, float[] right)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x697E40", Offset = "0x697E40", VA = "0x697E40")]
		public float Remap(float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001F7")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E0C0", Offset = "0x56E0C0")]
	public class ColliderResponder : NestInput
	{
		[Token(Token = "0x20001F8")]
		[Flags]
		public enum CollisionType
		{
			[Token(Token = "0x40008F6")]
			Enter = 1,
			[Token(Token = "0x40008F7")]
			Stay = 2,
			[Token(Token = "0x40008F8")]
			Exit = 4,
			[Token(Token = "0x40008F9")]
			EnterAndExit = 5
		}

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public CollisionType CollisionEvent;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _force;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public int TagMask;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private string[] _tagValues;

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x6983F0", Offset = "0x6983F0", VA = "0x6983F0")]
		public ColliderResponder()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x698414", Offset = "0x698414", VA = "0x698414")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x69858C", Offset = "0x69858C", VA = "0x69858C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x69864C", Offset = "0x69864C", VA = "0x69864C")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x69870C", Offset = "0x69870C", VA = "0x69870C")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x698570", Offset = "0x698570", VA = "0x698570")]
		public void Invoke(CollisionType type)
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public delegate void CastEvent(NestInput input);
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E128", Offset = "0x56E128")]
	public class NestInput : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001FB")]
		public class ValueEvent : UnityEvent<float>
		{
			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0x699380", Offset = "0x699380", VA = "0x699380")]
			public ValueEvent()
			{
			}
		}

		[Token(Token = "0x20001FC")]
		[Flags]
		public enum EventType
		{
			[Token(Token = "0x4000908")]
			Trigger = 1,
			[Token(Token = "0x4000909")]
			Bool = 2,
			[Token(Token = "0x400090A")]
			Float = 4,
			[Token(Token = "0x400090B")]
			Toggle = 0x10
		}

		[Token(Token = "0x200058E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E23C", Offset = "0x56E23C")]
		private sealed class <InvokeDelay>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NestInput $this;

			[Token(Token = "0x400185A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x400185B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x400185C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004A7")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023C7")]
				[Address(RVA = "0x6992F8", Offset = "0x6992F8", VA = "0x6992F8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023C8")]
				[Address(RVA = "0x699300", Offset = "0x699300", VA = "0x699300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023C5")]
			[Address(RVA = "0x698C30", Offset = "0x698C30", VA = "0x698C30")]
			[DebuggerHidden]
			public <InvokeDelay>c__Iterator0()
			{
			}

			[Token(Token = "0x60023C6")]
			[Address(RVA = "0x699210", Offset = "0x699210", VA = "0x699210", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023C9")]
			[Address(RVA = "0x699308", Offset = "0x699308", VA = "0x699308", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023CA")]
			[Address(RVA = "0x69931C", Offset = "0x69931C", VA = "0x69931C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventType _eventType;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _eventOffValue;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _eventOnValue;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SerializableDictionaryBase<string, UnityEventBase> _events;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEvent _event;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEvent _event2;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ValueEvent _eventValue;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool FireOnce;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Nest.Util.FloatInterpolator.Config _interpolation;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _fired;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float Delay;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Nest.Util.FloatInterpolator Value;

		[Token(Token = "0x170000FD")]
		public bool HasFired
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x6988F4", Offset = "0x6988F4", VA = "0x6988F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FE")]
		public EventType CurrentEventType
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x697E5C", Offset = "0x697E5C", VA = "0x697E5C")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x170000FF")]
		public UnityEventBase CurrentEvent
		{
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0x6988FC", Offset = "0x6988FC", VA = "0x6988FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public bool EventPosition
		{
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0x698974", Offset = "0x698974", VA = "0x698974")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x6989F4", Offset = "0x6989F4", VA = "0x6989F4")]
			set
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event CastEvent EventFired
		{
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0x698724", Offset = "0x698724", VA = "0x698724")]
			add
			{
			}
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x69880C", Offset = "0x69880C", VA = "0x69880C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x697AF0", Offset = "0x697AF0", VA = "0x697AF0")]
		public NestInput()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x697BD8", Offset = "0x697BD8", VA = "0x697BD8", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x6966FC", Offset = "0x6966FC", VA = "0x6966FC")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x698A0C", Offset = "0x698A0C", VA = "0x698A0C")]
		[DebuggerHidden]
		private IEnumerator InvokeDelay()
		{
			return null;
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x698A78", Offset = "0x698A78", VA = "0x698A78")]
		private void InvokeEvent()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x698F0C", Offset = "0x698F0C", VA = "0x698F0C")]
		public int[] FindGameObjectsReferences()
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x6966E0", Offset = "0x6966E0", VA = "0x6966E0")]
		public void SetBool(bool value)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x699204", Offset = "0x699204", VA = "0x699204")]
		public void SoloInvoke()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x699208", Offset = "0x699208", VA = "0x699208")]
		public void ResetFireOnce()
		{
		}
	}
}
[Token(Token = "0x20001FD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x56E29C", Offset = "0x56E29C")]
public class ParticleTriggers : NestInput
{
	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x113BE04", Offset = "0x113BE04", VA = "0x113BE04")]
	public ParticleTriggers()
	{
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0x113BE0C", Offset = "0x113BE0C", VA = "0x113BE0C")]
	public void OnParticleTrigger()
	{
	}
}
namespace Nest.Components
{
	[Token(Token = "0x20001FE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E300", Offset = "0x56E300")]
	public class TriggerLook : NestInput
	{
		[Token(Token = "0x20001FF")]
		[Flags]
		public enum CameraType
		{
			[Token(Token = "0x4000916")]
			Enter = 1,
			[Token(Token = "0x4000917")]
			WithinView = 2,
			[Token(Token = "0x4000918")]
			OutOfView = 4,
			[Token(Token = "0x4000919")]
			WithinCrosshair = 8,
			[Token(Token = "0x400091A")]
			OutsideCrosshair = 0x10,
			[Token(Token = "0x400091B")]
			Exit = 0x20
		}

		[Serializable]
		[Token(Token = "0x2000200")]
		public struct TypeComposition
		{
			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CameraType First;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public CameraType Second;
		}

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public CameraType CameraEvent;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[NestOption]
		public bool RestrictToTrigger;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[NestOption]
		public bool TrackTimeWithinView;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[NestOption]
		public Transform Tracking;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _timeWithinView;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool _withinTrigger;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CameraType _previousState;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RaycastHit[] results;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private TypeComposition _eventComposition;

		[Token(Token = "0x17000101")]
		public static RaycastHit[] Results
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x6993FC", Offset = "0x6993FC", VA = "0x6993FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x6993D8", Offset = "0x6993D8", VA = "0x6993D8")]
		public TriggerLook()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x69944C", Offset = "0x69944C", VA = "0x69944C", Slot = "4")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x699530", Offset = "0x699530", VA = "0x699530")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x699948", Offset = "0x699948", VA = "0x699948")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x6999BC", Offset = "0x6999BC", VA = "0x6999BC")]
		public void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x6998C0", Offset = "0x6998C0", VA = "0x6998C0")]
		public bool Invoke(CameraType type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000201")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E388", Offset = "0x56E388")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x56E388", Offset = "0x56E388")]
	public class TriggerVolume : NestInput
	{
		[Token(Token = "0x2000202")]
		[Flags]
		public enum TriggerType
		{
			[Token(Token = "0x4000922")]
			Enter = 1,
			[Token(Token = "0x4000923")]
			Stay = 2,
			[Token(Token = "0x4000924")]
			Exit = 4
		}

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TriggerType TriggerEvent;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		public int TagMask;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private string[] _tagValues;

		[Token(Token = "0x17000102")]
		public bool IsEnterAndExit
		{
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0x699A54", Offset = "0x699A54", VA = "0x699A54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000103")]
		public bool IsEnterAndStay
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x699A64", Offset = "0x699A64", VA = "0x699A64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000104")]
		public bool IsExitAndStay
		{
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0x699A74", Offset = "0x699A74", VA = "0x699A74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x699A34", Offset = "0x699A34", VA = "0x699A34")]
		public TriggerVolume()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x699A84", Offset = "0x699A84", VA = "0x699A84")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x699B6C", Offset = "0x699B6C", VA = "0x699B6C")]
		public void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x699C24", Offset = "0x699C24", VA = "0x699C24")]
		public void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x699B58", Offset = "0x699B58", VA = "0x699B58")]
		public void Invoke(TriggerType type)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x699B3C", Offset = "0x699B3C", VA = "0x699B3C")]
		public void SetValue(bool value)
		{
		}
	}
}
namespace Nest.Integrations
{
	[Token(Token = "0x2000203")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E440", Offset = "0x56E440")]
	public class AnimationScrubbing : BaseIntegration
	{
		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator _animator;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _value;

		[Token(Token = "0x17000105")]
		public override float InputValue
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0x699CE8", Offset = "0x699CE8", VA = "0x699CE8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x699CD8", Offset = "0x699CD8", VA = "0x699CD8")]
		public AnimationScrubbing()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x699CF0", Offset = "0x699CF0", VA = "0x699CF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x699D60", Offset = "0x699D60", VA = "0x699D60")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x699D64", Offset = "0x699D64", VA = "0x699D64")]
		public void PlayAnimator()
		{
		}
	}
	[Token(Token = "0x2000204")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E478", Offset = "0x56E478")]
	public class AnimationValuePassthrough : BaseIntegration
	{
		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator _animator;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _value;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _parameter;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimatorControllerParameterType _parameterType;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string ParameterName;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56E4C0", Offset = "0x56E4C0")]
		public float Threshold;

		[Token(Token = "0x17000106")]
		public override float InputValue
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0x699E48", Offset = "0x699E48", VA = "0x699E48", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0x699E40", Offset = "0x699E40", VA = "0x699E40", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x699E30", Offset = "0x699E30", VA = "0x699E30")]
		public AnimationValuePassthrough()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x699E50", Offset = "0x699E50", VA = "0x699E50")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x699FF0", Offset = "0x699FF0", VA = "0x699FF0")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class BaseIntegration : MonoBehaviour
	{
		[Token(Token = "0x17000107")]
		public virtual float InputValue
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x69A254", Offset = "0x69A254", VA = "0x69A254", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x69A2B8", Offset = "0x69A2B8", VA = "0x69A2B8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x699CE0", Offset = "0x699CE0", VA = "0x699CE0")]
		public BaseIntegration()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class Collection : BaseIntegration
	{
		[Token(Token = "0x2000207")]
		public enum CollectionType
		{
			[Token(Token = "0x4000937")]
			None,
			[Token(Token = "0x4000938")]
			Sequence,
			[Token(Token = "0x4000939")]
			ShuffleBag,
			[Token(Token = "0x400093A")]
			DefinedRandom,
			[Token(Token = "0x400093B")]
			UnityRandom
		}

		[Serializable]
		[Token(Token = "0x2000208")]
		public class Item
		{
			[Token(Token = "0x400093C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float Weight;

			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Duration;

			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEngine.Object Object;

			[Token(Token = "0x6000C23")]
			[Address(RVA = "0x69B254", Offset = "0x69B254", VA = "0x69B254")]
			public Item()
			{
			}
		}

		[Token(Token = "0x200058F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E518", Offset = "0x56E518")]
		private sealed class <InvokeSequence>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400185D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <i>__1;

			[Token(Token = "0x400185E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Item <item>__2;

			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Collection $this;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x4001862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x170004A9")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023CD")]
				[Address(RVA = "0x69B1CC", Offset = "0x69B1CC", VA = "0x69B1CC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004AA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023CE")]
				[Address(RVA = "0x69B1D4", Offset = "0x69B1D4", VA = "0x69B1D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023CB")]
			[Address(RVA = "0x69AF54", Offset = "0x69AF54", VA = "0x69AF54")]
			[DebuggerHidden]
			public <InvokeSequence>c__Iterator0()
			{
			}

			[Token(Token = "0x60023CC")]
			[Address(RVA = "0x69AF5C", Offset = "0x69AF5C", VA = "0x69AF5C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023CF")]
			[Address(RVA = "0x69B1DC", Offset = "0x69B1DC", VA = "0x69B1DC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023D0")]
			[Address(RVA = "0x69B1F0", Offset = "0x69B1F0", VA = "0x69B1F0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float RepeatInvokeTime;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public CollectionType Type;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Item[] Items;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource Source;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Type, Action> @switch;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int _selectedIndex;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _sequenceRunning;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ShuffleBag<Item> _shuffledItems;

		[Token(Token = "0x4000935")]
		private const int _sequenceSelected = int.MinValue;

		[Token(Token = "0x17000108")]
		public override float InputValue
		{
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x69A32C", Offset = "0x69A32C", VA = "0x69A32C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public Item Selected
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x69A818", Offset = "0x69A818", VA = "0x69A818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x69A31C", Offset = "0x69A31C", VA = "0x69A31C")]
		public Collection()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x69A894", Offset = "0x69A894", VA = "0x69A894")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x69AA4C", Offset = "0x69AA4C", VA = "0x69AA4C")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x69AA78", Offset = "0x69AA78", VA = "0x69AA78")]
		public void Invoke(int value)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x69A3DC", Offset = "0x69A3DC", VA = "0x69A3DC")]
		private bool SelectNewProperty(float value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x69A578", Offset = "0x69A578", VA = "0x69A578")]
		private void InvokeSelected()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x69AC70", Offset = "0x69AC70", VA = "0x69AC70")]
		private void InvokeAudio()
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x69AE10", Offset = "0x69AE10", VA = "0x69AE10")]
		private void InvokeNest()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x69AC04", Offset = "0x69AC04", VA = "0x69AC04")]
		[DebuggerHidden]
		private IEnumerator InvokeSequence()
		{
			return null;
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x69AAA0", Offset = "0x69AAA0", VA = "0x69AAA0")]
		private int RandomWeighted(int? value)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000209")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E578", Offset = "0x56E578")]
	public class ColorMap : BaseIntegration
	{
		[Token(Token = "0x200020A")]
		public enum ColorMode
		{
			[Token(Token = "0x4000944")]
			Gradient,
			[Token(Token = "0x4000945")]
			ColorArray
		}

		[Serializable]
		[Token(Token = "0x200020B")]
		public class ColorEvent : UnityEvent<Color>
		{
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0x69B59C", Offset = "0x69B59C", VA = "0x69B59C")]
			public ColorEvent()
			{
			}
		}

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ColorMode _colorMode;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Gradient _gradient;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x56E5D0", Offset = "0x56E5D0")]
		private Color[] _colorArray;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ColorEvent _colorEvent;

		[Token(Token = "0x1700010A")]
		public override float InputValue
		{
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0x69B384", Offset = "0x69B384", VA = "0x69B384", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x69B268", Offset = "0x69B268", VA = "0x69B268")]
		public ColorMap()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class MirrorLocalTransform : BaseIntegration
	{
		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform MirroredTransform;

		[Token(Token = "0x1700010B")]
		public override float InputValue
		{
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0x69B5F4", Offset = "0x69B5F4", VA = "0x69B5F4", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x69B658", Offset = "0x69B658", VA = "0x69B658", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x69B5EC", Offset = "0x69B5EC", VA = "0x69B5EC")]
		public MirrorLocalTransform()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x69B6BC", Offset = "0x69B6BC", VA = "0x69B6BC")]
		public void Update()
		{
		}
	}
}
[Serializable]
[Token(Token = "0x200020D")]
public class PhaseItem
{
	[Token(Token = "0x200020E")]
	public enum PhaseMode
	{
		[Token(Token = "0x400094C")]
		Default,
		[Token(Token = "0x400094D")]
		Disabled
	}

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PhaseMode Mode;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Description;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent PhaseEvent;

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x113C0F8", Offset = "0x113C0F8", VA = "0x113C0F8")]
	public PhaseItem()
	{
	}
}
[Serializable]
[Token(Token = "0x200020F")]
public class Phase : BaseIntegration
{
	[Token(Token = "0x2000590")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E640", Offset = "0x56E640")]
	private sealed class <PhaseRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int <i>__1;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal PhaseItem[] itemArray;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float <itemDuration>__2;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x170004AB")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023D3")]
			[Address(RVA = "0x113C070", Offset = "0x113C070", VA = "0x113C070", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023D4")]
			[Address(RVA = "0x113C078", Offset = "0x113C078", VA = "0x113C078", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x113BEC8", Offset = "0x113BEC8", VA = "0x113BEC8")]
		[DebuggerHidden]
		public <PhaseRoutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x113BED0", Offset = "0x113BED0", VA = "0x113BED0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x113C080", Offset = "0x113C080", VA = "0x113C080", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x113C094", Offset = "0x113C094", VA = "0x113C094", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PhaseItem[] EnterItems;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhaseItem[] LeaveItems;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Index;

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0x113BE14", Offset = "0x113BE14", VA = "0x113BE14")]
	public Phase()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x113BE1C", Offset = "0x113BE1C", VA = "0x113BE1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x113BE5C", Offset = "0x113BE5C", VA = "0x113BE5C")]
	[DebuggerHidden]
	public IEnumerator PhaseRoutine(PhaseItem[] itemArray)
	{
		return null;
	}
}
[Token(Token = "0x2000210")]
public class PhaseManager : MonoBehaviour
{
	[Token(Token = "0x2000591")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E6C0", Offset = "0x56E6C0")]
	private sealed class <SwitchRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool first;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Phase newPhase;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal PhaseManager $this;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x170004AD")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023D9")]
			[Address(RVA = "0x113C9BC", Offset = "0x113C9BC", VA = "0x113C9BC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023DA")]
			[Address(RVA = "0x113C9C4", Offset = "0x113C9C4", VA = "0x113C9C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x113C43C", Offset = "0x113C43C", VA = "0x113C43C")]
		[DebuggerHidden]
		public <SwitchRoutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x113C7A0", Offset = "0x113C7A0", VA = "0x113C7A0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x113C9CC", Offset = "0x113C9CC", VA = "0x113C9CC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x113C9E0", Offset = "0x113C9E0", VA = "0x113C9E0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000592")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E720", Offset = "0x56E720")]
	private sealed class <PhaseRoutine>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int <i>__1;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal PhaseItem[] itemArray;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float <itemDuration>__2;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal PhaseManager $this;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal object $current;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool $disposing;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int $PC;

		[Token(Token = "0x170004AF")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023DF")]
			[Address(RVA = "0x113C718", Offset = "0x113C718", VA = "0x113C718", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023E0")]
			[Address(RVA = "0x113C720", Offset = "0x113C720", VA = "0x113C720", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x113C4D0", Offset = "0x113C4D0", VA = "0x113C4D0")]
		[DebuggerHidden]
		public <PhaseRoutine>c__Iterator1()
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x113C524", Offset = "0x113C524", VA = "0x113C524", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x113C728", Offset = "0x113C728", VA = "0x113C728", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x113C73C", Offset = "0x113C73C", VA = "0x113C73C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Phase[] phaseArray;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Phase currentPhase;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentPhaseIndex;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool AutoStart;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool disabled;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine currentPhaseRoutine;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine currentSwitchRoutine;

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x113C100", Offset = "0x113C100", VA = "0x113C100")]
	public PhaseManager()
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x113C110", Offset = "0x113C110", VA = "0x113C110")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x113C168", Offset = "0x113C168", VA = "0x113C168")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x113C204", Offset = "0x113C204", VA = "0x113C204")]
	public void Disable()
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x113C178", Offset = "0x113C178", VA = "0x113C178")]
	public void StartFirstPhase()
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x113C2B8", Offset = "0x113C2B8", VA = "0x113C2B8")]
	public void AdvanceToNextPhase()
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x113C3BC", Offset = "0x113C3BC", VA = "0x113C3BC")]
	public void AdvanceToLastPhase()
	{
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x113C34C", Offset = "0x113C34C", VA = "0x113C34C")]
	public void EnterPhase(Phase newPhase)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x113C210", Offset = "0x113C210", VA = "0x113C210")]
	[DebuggerHidden]
	private IEnumerator SwitchRoutine(Phase newPhase, bool first = false)
	{
		return null;
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x113C444", Offset = "0x113C444", VA = "0x113C444")]
	[DebuggerHidden]
	private IEnumerator PhaseRoutine(PhaseItem[] itemArray)
	{
		return null;
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x113C4D8", Offset = "0x113C4D8", VA = "0x113C4D8")]
	private void OnDestroy()
	{
	}
}
namespace Nest.Integrations
{
	[Token(Token = "0x2000211")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E780", Offset = "0x56E780")]
	public class ThresholdTrigger : BaseIntegration
	{
		[Token(Token = "0x2000212")]
		private enum State
		{
			[Token(Token = "0x4000960")]
			Dormant,
			[Token(Token = "0x4000961")]
			Enabled,
			[Token(Token = "0x4000962")]
			Disabled
		}

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _threshold;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _delayToOff;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent _onEvent;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent _offEvent;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private State _currentState;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _currentValue;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _delayTimer;

		[Token(Token = "0x1700010C")]
		public float threshold
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x69B7AC", Offset = "0x69B7AC", VA = "0x69B7AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x69B7B4", Offset = "0x69B7B4", VA = "0x69B7B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public float offDelay
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x69B7BC", Offset = "0x69B7BC", VA = "0x69B7BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x69B7C4", Offset = "0x69B7C4", VA = "0x69B7C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public override float InputValue
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x69B7CC", Offset = "0x69B7CC", VA = "0x69B7CC", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x69B798", Offset = "0x69B798", VA = "0x69B798")]
		public ThresholdTrigger()
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x69B7D4", Offset = "0x69B7D4", VA = "0x69B7D4")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x56E7F8", Offset = "0x56E7F8")]
	public class TransformMovement : BaseIntegration
	{
		[Token(Token = "0x2000214")]
		public enum Translation
		{
			[Token(Token = "0x4000981")]
			XAxis,
			[Token(Token = "0x4000982")]
			YAxis,
			[Token(Token = "0x4000983")]
			ZAxis,
			[Token(Token = "0x4000984")]
			Mirror,
			[Token(Token = "0x4000985")]
			Vector,
			[Token(Token = "0x4000986")]
			Random
		}

		[Token(Token = "0x2000215")]
		public enum Rotation
		{
			[Token(Token = "0x4000988")]
			XAxis,
			[Token(Token = "0x4000989")]
			YAxis,
			[Token(Token = "0x400098A")]
			ZAxis,
			[Token(Token = "0x400098B")]
			Mirror,
			[Token(Token = "0x400098C")]
			LookTowards,
			[Token(Token = "0x400098D")]
			Vector,
			[Token(Token = "0x400098E")]
			Random
		}

		[Token(Token = "0x2000216")]
		public enum Scale
		{
			[Token(Token = "0x4000990")]
			Uniform,
			[Token(Token = "0x4000991")]
			Vector,
			[Token(Token = "0x4000992")]
			Random
		}

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _translationEnabled;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Translation _translationMode;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector3 _translationVector;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _translationAmount0;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float _translationAmount1;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool _rotationEnabled;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Rotation _rotationMode;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Vector3 _rotationAxis;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _rotationAngle0;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float _rotationAngle1;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly VectorPid _angularVelocityController;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VectorPid _headingController;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Scale _scaleMode;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private Vector3 _scaleVector;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float _scaleAmount0;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _scaleAmount1;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _scaleEnabled;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Transform _referenceTransform;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool _addToOriginal;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private float _smoothing;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _originalPosition;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion _originalRotation;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 _originalScale;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 _randomVectorT;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 _randomVectorR;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 _randomVectorS;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Rigidbody _rigidBody;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _rotationSpeed;

		[Token(Token = "0x1700010F")]
		public Transform TargetTransform
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x69B9C8", Offset = "0x69B9C8", VA = "0x69B9C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x69B9D0", Offset = "0x69B9D0", VA = "0x69B9D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public override float InputValue
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x69BCC4", Offset = "0x69BCC4", VA = "0x69BCC4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		private Vector3 TranslationVector
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x69C210", Offset = "0x69C210", VA = "0x69C210")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000112")]
		private Vector3 RotationAxis
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x69C320", Offset = "0x69C320", VA = "0x69C320")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000113")]
		private Vector3 ScaleVector
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x69C440", Offset = "0x69C440", VA = "0x69C440")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x69B890", Offset = "0x69B890", VA = "0x69B890")]
		public TransformMovement()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x69BDA4", Offset = "0x69BDA4", VA = "0x69BDA4")]
		private void UpdatePosition(float value)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x69BF14", Offset = "0x69BF14", VA = "0x69BF14")]
		private void UpdateRotation(float value)
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x69C0A0", Offset = "0x69C0A0", VA = "0x69C0A0")]
		private void UpdateScale(float value)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x69BBCC", Offset = "0x69BBCC", VA = "0x69BBCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x69BAA8", Offset = "0x69BAA8", VA = "0x69BAA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x69C4D8", Offset = "0x69C4D8", VA = "0x69C4D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x69C5D0", Offset = "0x69C5D0", VA = "0x69C5D0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x69CFE0", Offset = "0x69CFE0", VA = "0x69CFE0")]
		public void ResetPosition()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x69D0D0", Offset = "0x69D0D0", VA = "0x69D0D0")]
		public void ResetPosition(Transform tr)
		{
		}
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x2000217")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4000994")]
		Array = 1,
		[Token(Token = "0x4000995")]
		Class,
		[Token(Token = "0x4000996")]
		Value,
		[Token(Token = "0x4000997")]
		IntValue,
		[Token(Token = "0x4000998")]
		DoubleValue,
		[Token(Token = "0x4000999")]
		BoolValue,
		[Token(Token = "0x400099A")]
		FloatValue
	}
	[Token(Token = "0x2000218")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56E960", Offset = "0x56E960")]
	public class JSONNode
	{
		[Token(Token = "0x2000593")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56E998", Offset = "0x56E998")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal JSONNode $current;

			[Token(Token = "0x4001877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x4001878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x170004B1")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60023E5")]
				[Address(RVA = "0x1118E20", Offset = "0x1118E20", VA = "0x1118E20", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023E6")]
				[Address(RVA = "0x1118E28", Offset = "0x1118E28", VA = "0x1118E28", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023E3")]
			[Address(RVA = "0x1117B00", Offset = "0x1117B00", VA = "0x1117B00")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x60023E4")]
			[Address(RVA = "0x1118E10", Offset = "0x1118E10", VA = "0x1118E10", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023E7")]
			[Address(RVA = "0x1118E30", Offset = "0x1118E30", VA = "0x1118E30", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023E8")]
			[Address(RVA = "0x1118E34", Offset = "0x1118E34", VA = "0x1118E34", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60023E9")]
			[Address(RVA = "0x1118E98", Offset = "0x1118E98", VA = "0x1118E98", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60023EA")]
			[Address(RVA = "0x1118E9C", Offset = "0x1118E9C", VA = "0x1118E9C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000594")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EA18", Offset = "0x56EA18")]
		private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal IEnumerator<JSONNode> $locvar0;

			[Token(Token = "0x400187A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode <C>__1;

			[Token(Token = "0x400187B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal IEnumerator<JSONNode> $locvar1;

			[Token(Token = "0x400187C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <D>__2;

			[Token(Token = "0x400187D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONNode $this;

			[Token(Token = "0x400187E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal JSONNode $current;

			[Token(Token = "0x400187F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x4001880")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x170004B3")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60023ED")]
				[Address(RVA = "0x1119488", Offset = "0x1119488", VA = "0x1119488", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023EE")]
				[Address(RVA = "0x1119490", Offset = "0x1119490", VA = "0x1119490", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023EB")]
			[Address(RVA = "0x1117B8C", Offset = "0x1117B8C", VA = "0x1117B8C")]
			[DebuggerHidden]
			public <>c__Iterator1()
			{
			}

			[Token(Token = "0x60023EC")]
			[Address(RVA = "0x1118F1C", Offset = "0x1118F1C", VA = "0x1118F1C", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023EF")]
			[Address(RVA = "0x1119498", Offset = "0x1119498", VA = "0x1119498", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023F0")]
			[Address(RVA = "0x111961C", Offset = "0x111961C", VA = "0x111961C", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60023F1")]
			[Address(RVA = "0x1119680", Offset = "0x1119680", VA = "0x1119680", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60023F2")]
			[Address(RVA = "0x1119684", Offset = "0x1119684", VA = "0x1119684", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0x1117968", Offset = "0x1117968", VA = "0x1117968", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0x1117970", Offset = "0x1117970", VA = "0x1117970", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0x1117974", Offset = "0x1117974", VA = "0x1117974", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0x111797C", Offset = "0x111797C", VA = "0x111797C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public virtual string Value
		{
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0x1117980", Offset = "0x1117980", VA = "0x1117980", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0x11179E8", Offset = "0x11179E8", VA = "0x11179E8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public virtual int Count
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x11179EC", Offset = "0x11179EC", VA = "0x11179EC", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000118")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x1117A94", Offset = "0x1117A94", VA = "0x1117A94", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x1117B08", Offset = "0x1117B08", VA = "0x1117B08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public virtual int AsInt
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0x1117C24", Offset = "0x1117C24", VA = "0x1117C24", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0x1117C6C", Offset = "0x1117C6C", VA = "0x1117C6C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x1117CB4", Offset = "0x1117CB4", VA = "0x1117CB4", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0x1117D00", Offset = "0x1117D00", VA = "0x1117D00", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x1117D48", Offset = "0x1117D48", VA = "0x1117D48", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0x1117D94", Offset = "0x1117D94", VA = "0x1117D94", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x1117DDC", Offset = "0x1117DDC", VA = "0x1117DDC", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x1117ED8", Offset = "0x1117ED8", VA = "0x1117ED8", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x1117F58", Offset = "0x1117F58", VA = "0x1117F58", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x1117FD8", Offset = "0x1117FD8", VA = "0x1117FD8", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1113A9C", Offset = "0x1113A9C", VA = "0x1113A9C")]
		public JSONNode()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1117964", Offset = "0x1117964", VA = "0x1117964", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x11179F4", Offset = "0x11179F4", VA = "0x11179F4", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1117A7C", Offset = "0x1117A7C", VA = "0x1117A7C", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1117A84", Offset = "0x1117A84", VA = "0x1117A84", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1117A8C", Offset = "0x1117A8C", VA = "0x1117A8C", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1117B94", Offset = "0x1117B94", VA = "0x1117B94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1117BDC", Offset = "0x1117BDC", VA = "0x1117BDC", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x1118058", Offset = "0x1118058", VA = "0x1118058")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x11180BC", Offset = "0x11180BC", VA = "0x11180BC")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x1116868", Offset = "0x1116868", VA = "0x1116868")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x111810C", Offset = "0x111810C", VA = "0x111810C")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x1118128", Offset = "0x1118128", VA = "0x1118128", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1117374", Offset = "0x1117374", VA = "0x1117374", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x111597C", Offset = "0x111597C", VA = "0x111597C")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x111304C", Offset = "0x111304C", VA = "0x111304C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x1118144", Offset = "0x1118144", VA = "0x1118144", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x1118148", Offset = "0x1118148", VA = "0x1118148")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x11181C8", Offset = "0x11181C8", VA = "0x11181C8")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x1118238", Offset = "0x1118238", VA = "0x1118238")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x11182A8", Offset = "0x11182A8", VA = "0x11182A8")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x1118318", Offset = "0x1118318", VA = "0x1118318")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x1118490", Offset = "0x1118490", VA = "0x1118490")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1118610", Offset = "0x1118610", VA = "0x1118610")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x11189DC", Offset = "0x11189DC", VA = "0x11189DC")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x1118A4C", Offset = "0x1118A4C", VA = "0x1118A4C")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1118ABC", Offset = "0x1118ABC", VA = "0x1118ABC")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x1118B2C", Offset = "0x1118B2C", VA = "0x1118B2C")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x1118C48", Offset = "0x1118C48", VA = "0x1118C48")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1118D58", Offset = "0x1118D58", VA = "0x1118D58")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}
	}
	[Token(Token = "0x2000219")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56EA98", Offset = "0x56EA98")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000595")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EAE0", Offset = "0x56EAE0")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001881")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001882")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <N>__1;

			[Token(Token = "0x4001883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONArray $this;

			[Token(Token = "0x4001884")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal JSONNode $current;

			[Token(Token = "0x4001885")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x4001886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x170004B5")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60023F5")]
				[Address(RVA = "0x1114768", Offset = "0x1114768", VA = "0x1114768", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023F6")]
				[Address(RVA = "0x1114770", Offset = "0x1114770", VA = "0x1114770", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023F3")]
			[Address(RVA = "0x1113FD0", Offset = "0x1113FD0", VA = "0x1113FD0")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x60023F4")]
			[Address(RVA = "0x11145F4", Offset = "0x11145F4", VA = "0x11145F4", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023F7")]
			[Address(RVA = "0x1114778", Offset = "0x1114778", VA = "0x1114778", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023F8")]
			[Address(RVA = "0x11147F0", Offset = "0x11147F0", VA = "0x11147F0", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x60023F9")]
			[Address(RVA = "0x1114854", Offset = "0x1114854", VA = "0x1114854", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60023FA")]
			[Address(RVA = "0x1114858", Offset = "0x1114858", VA = "0x1114858", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000596")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EB60", Offset = "0x56EB60")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode <N>__1;

			[Token(Token = "0x4001889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal JSONArray $this;

			[Token(Token = "0x400188A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal object $current;

			[Token(Token = "0x400188B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool $disposing;

			[Token(Token = "0x400188C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal int $PC;

			[Token(Token = "0x170004B7")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023FD")]
				[Address(RVA = "0x1114A64", Offset = "0x1114A64", VA = "0x1114A64", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023FE")]
				[Address(RVA = "0x1114A6C", Offset = "0x1114A6C", VA = "0x1114A6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023FB")]
			[Address(RVA = "0x1114044", Offset = "0x1114044", VA = "0x1114044")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x60023FC")]
			[Address(RVA = "0x11148F0", Offset = "0x11148F0", VA = "0x11148F0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023FF")]
			[Address(RVA = "0x1114A74", Offset = "0x1114A74", VA = "0x1114A74", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002400")]
			[Address(RVA = "0x1114AEC", Offset = "0x1114AEC", VA = "0x1114AEC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x17000120")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0x1113AA4", Offset = "0x1113AA4", VA = "0x1113AA4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0x1113B9C", Offset = "0x1113B9C", VA = "0x1113B9C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0x1113C6C", Offset = "0x1113C6C", VA = "0x1113C6C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0x1113CD0", Offset = "0x1113CD0", VA = "0x1113CD0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public override int Count
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x1113D3C", Offset = "0x1113D3C", VA = "0x1113D3C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000123")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x1113F4C", Offset = "0x1113F4C", VA = "0x1113F4C", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1113A2C", Offset = "0x1113A2C", VA = "0x1113A2C")]
		public JSONArray()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x1113D98", Offset = "0x1113D98", VA = "0x1113D98", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x1113E04", Offset = "0x1113E04", VA = "0x1113E04", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x1113ED8", Offset = "0x1113ED8", VA = "0x1113ED8", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1113FD8", Offset = "0x1113FD8", VA = "0x1113FD8", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x111404C", Offset = "0x111404C", VA = "0x111404C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1114260", Offset = "0x1114260", VA = "0x1114260", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x11144D4", Offset = "0x11144D4", VA = "0x11144D4", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x200021A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56EBC0", Offset = "0x56EBC0")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000597")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EC08", Offset = "0x56EC08")]
		private sealed class <Remove>c__AnonStorey2
		{
			[Token(Token = "0x400188D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal JSONNode aNode;

			[Token(Token = "0x6002401")]
			[Address(RVA = "0x1115490", Offset = "0x1115490", VA = "0x1115490")]
			public <Remove>c__AnonStorey2()
			{
			}

			[Token(Token = "0x6002402")]
			[Address(RVA = "0x11167FC", Offset = "0x11167FC", VA = "0x11167FC")]
			internal bool <>m__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000598")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EC18", Offset = "0x56EC18")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x400188E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x400188F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x4001890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal JSONClass $this;

			[Token(Token = "0x4001891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal JSONNode $current;

			[Token(Token = "0x4001892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x4001893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x170004B9")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002405")]
				[Address(RVA = "0x11163F8", Offset = "0x11163F8", VA = "0x11163F8", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002406")]
				[Address(RVA = "0x1116400", Offset = "0x1116400", VA = "0x1116400", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002403")]
			[Address(RVA = "0x111551C", Offset = "0x111551C", VA = "0x111551C")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6002404")]
			[Address(RVA = "0x1116268", Offset = "0x1116268", VA = "0x1116268", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002407")]
			[Address(RVA = "0x1116408", Offset = "0x1116408", VA = "0x1116408", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002408")]
			[Address(RVA = "0x1116480", Offset = "0x1116480", VA = "0x1116480", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6002409")]
			[Address(RVA = "0x11164E4", Offset = "0x11164E4", VA = "0x11164E4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600240A")]
			[Address(RVA = "0x11164E8", Offset = "0x11164E8", VA = "0x11164E8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000599")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EC98", Offset = "0x56EC98")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x4001896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal JSONClass $this;

			[Token(Token = "0x4001897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object $current;

			[Token(Token = "0x4001898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal bool $disposing;

			[Token(Token = "0x4001899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal int $PC;

			[Token(Token = "0x170004BB")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600240D")]
				[Address(RVA = "0x1116710", Offset = "0x1116710", VA = "0x1116710", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600240E")]
				[Address(RVA = "0x1116718", Offset = "0x1116718", VA = "0x1116718", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600240B")]
			[Address(RVA = "0x1115590", Offset = "0x1115590", VA = "0x1115590")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x600240C")]
			[Address(RVA = "0x1116580", Offset = "0x1116580", VA = "0x1116580", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600240F")]
			[Address(RVA = "0x1116720", Offset = "0x1116720", VA = "0x1116720", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002410")]
			[Address(RVA = "0x1116798", Offset = "0x1116798", VA = "0x1116798", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000124")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x1114BC0", Offset = "0x1114BC0", VA = "0x1114BC0", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x1114CC0", Offset = "0x1114CC0", VA = "0x1114CC0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0x1114D88", Offset = "0x1114D88", VA = "0x1114D88", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0x1114E54", Offset = "0x1114E54", VA = "0x1114E54", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public override int Count
		{
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0x1114F44", Offset = "0x1114F44", VA = "0x1114F44", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000127")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0x1115498", Offset = "0x1115498", VA = "0x1115498", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1114B50", Offset = "0x1114B50", VA = "0x1114B50")]
		public JSONClass()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x1114FA0", Offset = "0x1114FA0", VA = "0x1114FA0", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1115104", Offset = "0x1115104", VA = "0x1115104", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x11151D0", Offset = "0x11151D0", VA = "0x11151D0", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x11152D4", Offset = "0x11152D4", VA = "0x11152D4", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x1115524", Offset = "0x1115524", VA = "0x1115524", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x1115598", Offset = "0x1115598", VA = "0x1115598", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1115C40", Offset = "0x1115C40", VA = "0x1115C40", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1116080", Offset = "0x1116080", VA = "0x1116080", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x17000128")]
		public override string Value
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x1116A40", Offset = "0x1116A40", VA = "0x1116A40", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x1116A48", Offset = "0x1116A48", VA = "0x1116A48", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x1116914", Offset = "0x1116914", VA = "0x1116914")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x1116940", Offset = "0x1116940", VA = "0x1116940")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1116984", Offset = "0x1116984", VA = "0x1116984")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x11169C8", Offset = "0x11169C8", VA = "0x11169C8")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x1116A04", Offset = "0x1116A04", VA = "0x1116A04")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x1116A50", Offset = "0x1116A50", VA = "0x1116A50", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x1116ADC", Offset = "0x1116ADC", VA = "0x1116ADC", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x1116B68", Offset = "0x1116B68", VA = "0x1116B68", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x200021C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56ECF8", Offset = "0x56ECF8")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x17000129")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x1116FF8", Offset = "0x1116FF8", VA = "0x1116FF8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x111705C", Offset = "0x111705C", VA = "0x111705C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0x11170E4", Offset = "0x11170E4", VA = "0x11170E4", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0x1117154", Offset = "0x1117154", VA = "0x1117154", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public override int AsInt
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x111744C", Offset = "0x111744C", VA = "0x111744C", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x11174D0", Offset = "0x11174D0", VA = "0x11174D0", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public override float AsFloat
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x1117558", Offset = "0x1117558", VA = "0x1117558", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x11175E8", Offset = "0x11175E8", VA = "0x11175E8", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public override double AsDouble
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x1117670", Offset = "0x1117670", VA = "0x1117670", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x1117700", Offset = "0x1117700", VA = "0x1117700", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public override bool AsBool
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x1117788", Offset = "0x1117788", VA = "0x1117788", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0x111780C", Offset = "0x111780C", VA = "0x111780C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x1117894", Offset = "0x1117894", VA = "0x1117894", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x11178FC", Offset = "0x11178FC", VA = "0x11178FC", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x1113B70", Offset = "0x1113B70", VA = "0x1113B70")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1114C88", Offset = "0x1114C88", VA = "0x1114C88")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x1116F84", Offset = "0x1116F84", VA = "0x1116F84")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x11171E4", Offset = "0x11171E4", VA = "0x11171E4", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x111726C", Offset = "0x111726C", VA = "0x111726C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x11172FC", Offset = "0x11172FC", VA = "0x11172FC")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x1117314", Offset = "0x1117314", VA = "0x1117314")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x1117344", Offset = "0x1117344", VA = "0x1117344", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x111736C", Offset = "0x111736C", VA = "0x111736C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x111737C", Offset = "0x111737C", VA = "0x111737C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x11173E4", Offset = "0x11173E4", VA = "0x11173E4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x200021D")]
	public static class JSON
	{
		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x1113048", Offset = "0x1113048", VA = "0x1113048")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace Nest.Util
{
	[Token(Token = "0x200021E")]
	public struct FloatInterpolator
	{
		[Serializable]
		[Token(Token = "0x200021F")]
		public class Config
		{
			[Token(Token = "0x2000220")]
			public enum InterpolationType
			{
				[Token(Token = "0x40009A9")]
				Instant,
				[Token(Token = "0x40009AA")]
				Linear,
				[Token(Token = "0x40009AB")]
				Sine,
				[Token(Token = "0x40009AC")]
				Quadratic,
				[Token(Token = "0x40009AD")]
				Exponential,
				[Token(Token = "0x40009AE")]
				DampedSpring,
				[Token(Token = "0x40009AF")]
				AnimatedCurve
			}

			[Token(Token = "0x40009A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private InterpolationType _interpolationType;

			[Token(Token = "0x40009A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56EE54", Offset = "0x56EE54")]
			private float _interpolationSpeed;

			[Token(Token = "0x40009A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private AnimationCurve _curve;

			[Token(Token = "0x17000134")]
			public InterpolationType Interpolation
			{
				[Token(Token = "0x6000CCD")]
				[Address(RVA = "0x582C5C", Offset = "0x582C5C", VA = "0x582C5C")]
				get
				{
					return default(InterpolationType);
				}
				[Token(Token = "0x6000CCE")]
				[Address(RVA = "0x582C64", Offset = "0x582C64", VA = "0x582C64")]
				set
				{
				}
			}

			[Token(Token = "0x17000135")]
			public AnimationCurve Curve
			{
				[Token(Token = "0x6000CCF")]
				[Address(RVA = "0x582C6C", Offset = "0x582C6C", VA = "0x582C6C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000CD0")]
				[Address(RVA = "0x582C74", Offset = "0x582C74", VA = "0x582C74")]
				set
				{
				}
			}

			[Token(Token = "0x17000136")]
			public bool Enabled
			{
				[Token(Token = "0x6000CD1")]
				[Address(RVA = "0x582C7C", Offset = "0x582C7C", VA = "0x582C7C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000137")]
			public float InterpolationSpeed
			{
				[Token(Token = "0x6000CD2")]
				[Address(RVA = "0x582C8C", Offset = "0x582C8C", VA = "0x582C8C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000CD3")]
				[Address(RVA = "0x582C94", Offset = "0x582C94", VA = "0x582C94")]
				set
				{
				}
			}

			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x582C0C", Offset = "0x582C0C", VA = "0x582C0C")]
			public Config()
			{
			}
		}

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float _velocity;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float _timeElapsed;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56ED30", Offset = "0x56ED30")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56ED30", Offset = "0x56ED30")]
		private Config <Configuration>k__BackingField;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56ED6C", Offset = "0x56ED6C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56ED6C", Offset = "0x56ED6C")]
		private float <CurrentValue>k__BackingField;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EDA8", Offset = "0x56EDA8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56EDA8", Offset = "0x56EDA8")]
		private float <TargetValue>k__BackingField;

		[Token(Token = "0x17000131")]
		public Config Configuration
		{
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0x69E0D0", Offset = "0x69E0D0", VA = "0x69E0D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EDE4", Offset = "0x56EDE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0x69E0D8", Offset = "0x69E0D8", VA = "0x69E0D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EDF4", Offset = "0x56EDF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public float CurrentValue
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0x69E0E0", Offset = "0x69E0E0", VA = "0x69E0E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EE04", Offset = "0x56EE04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0x69E0E8", Offset = "0x69E0E8", VA = "0x69E0E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EE14", Offset = "0x56EE14")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public float TargetValue
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0x69E0F0", Offset = "0x69E0F0", VA = "0x69E0F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EE24", Offset = "0x56EE24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x69E0F8", Offset = "0x69E0F8", VA = "0x69E0F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56EE34", Offset = "0x56EE34")]
			set
			{
			}
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x69E0C4", Offset = "0x69E0C4", VA = "0x69E0C4")]
		public FloatInterpolator(float initialValue, float targetValue, Config config)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x69E100", Offset = "0x69E100", VA = "0x69E100")]
		public float Step(float targetValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x69E110", Offset = "0x69E110", VA = "0x69E110")]
		public float Step()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000221")]
	internal static class Math
	{
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x582C9C", Offset = "0x582C9C", VA = "0x582C9C")]
		public static float Lerp(float a, float b, float mix)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x582CB4", Offset = "0x582CB4", VA = "0x582CB4")]
		public static Vector3 Lerp(Vector3 a, Vector3 b, float mix)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000222")]
	internal static class Ease
	{
		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _piOver2;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _twoPi;

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x69D118", Offset = "0x69D118", VA = "0x69D118")]
		public static float Linear(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x69D120", Offset = "0x69D120", VA = "0x69D120")]
		public static float InSine(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x69D1D4", Offset = "0x69D1D4", VA = "0x69D1D4")]
		public static float OutSine(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x69D27C", Offset = "0x69D27C", VA = "0x69D27C")]
		public static float InOutSine(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x69D30C", Offset = "0x69D30C", VA = "0x69D30C")]
		public static float InQuad(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x69D318", Offset = "0x69D318", VA = "0x69D318")]
		public static float OutQuad(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x69D32C", Offset = "0x69D32C", VA = "0x69D32C")]
		public static float InOutQuad(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x69D370", Offset = "0x69D370", VA = "0x69D370")]
		public static float InCubic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x69D380", Offset = "0x69D380", VA = "0x69D380")]
		public static float OutCubic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x69D3A0", Offset = "0x69D3A0", VA = "0x69D3A0")]
		public static float InOutCubic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x69D3E8", Offset = "0x69D3E8", VA = "0x69D3E8")]
		public static float InQuart(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x69D3FC", Offset = "0x69D3FC", VA = "0x69D3FC")]
		public static float OutQuart(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x69D420", Offset = "0x69D420", VA = "0x69D420")]
		public static float InOutQuart(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x69D46C", Offset = "0x69D46C", VA = "0x69D46C")]
		public static float InQuint(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x69D484", Offset = "0x69D484", VA = "0x69D484")]
		public static float OutQuint(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x69D4AC", Offset = "0x69D4AC", VA = "0x69D4AC")]
		public static float InOutQuint(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x69D504", Offset = "0x69D504", VA = "0x69D504")]
		public static float InExpo(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x69D5A0", Offset = "0x69D5A0", VA = "0x69D5A0")]
		public static float OutExpo(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x69D634", Offset = "0x69D634", VA = "0x69D634")]
		public static float InOutExpo(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x69D730", Offset = "0x69D730", VA = "0x69D730")]
		public static float InCirc(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x69D7CC", Offset = "0x69D7CC", VA = "0x69D7CC")]
		public static float OutCirc(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x69D870", Offset = "0x69D870", VA = "0x69D870")]
		public static float InOutCirc(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x69D970", Offset = "0x69D970", VA = "0x69D970")]
		public static float InElastic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x69DB08", Offset = "0x69DB08", VA = "0x69DB08")]
		public static float OutElastic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x69DC9C", Offset = "0x69DC9C", VA = "0x69DC9C")]
		public static float InOutElastic(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x69DEE0", Offset = "0x69DEE0", VA = "0x69DEE0")]
		public static float InBack(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x69DF00", Offset = "0x69DF00", VA = "0x69DF00")]
		public static float OutBack(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x69DF2C", Offset = "0x69DF2C", VA = "0x69DF2C")]
		public static float InOutBack(float time, float duration = 1f, float overshootOrAmplitude = 0.1f, float period = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x69DF98", Offset = "0x69DF98", VA = "0x69DF98")]
		public static float DampenedSpring(float current, float target, ref float velocity, float omega)
		{
			return default(float);
		}
	}
}
namespace Nest.Components
{
	[Token(Token = "0x2000223")]
	public class NestOptionAttribute : Attribute
	{
		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x6993D0", Offset = "0x6993D0", VA = "0x6993D0")]
		public NestOptionAttribute()
		{
		}
	}
}
namespace Nest.Util
{
	[Token(Token = "0x2000224")]
	public abstract class DrawableDictionary
	{
		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x69D110", Offset = "0x69D110", VA = "0x69D110")]
		protected DrawableDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000225")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56EEAC", Offset = "0x56EEAC")]
	public class SerializableDictionaryBase<TKey, TValue> : DrawableDictionary, IDictionary<TKey, TValue>, ISerializationCallbackReceiver, IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>
	{
		[NonSerialized]
		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<TKey, TValue> _dict;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private TKey[] _keys;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private TValue[] _values;

		[Token(Token = "0x17000138")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
		{
			[Token(Token = "0x6000D05")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000139")]
		public int Count
		{
			[Token(Token = "0x6000CF7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013A")]
		public ICollection<TKey> Keys
		{
			[Token(Token = "0x6000CFA")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public ICollection<TValue> Values
		{
			[Token(Token = "0x6000CFD")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public TValue Item
		{
			[Token(Token = "0x6000CFE")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000CFF")]
			set
			{
			}
		}

		[Token(Token = "0x6000CF6")]
		public SerializableDictionaryBase()
		{
		}

		[Token(Token = "0x6000CF8")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000CF9")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFC")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D00")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D01")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x6000D02")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D03")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000D04")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D06")]
		public Dictionary<TKey, TValue>.Enumerator GetEnumerator()
		{
			return default(Dictionary<TKey, TValue>.Enumerator);
		}

		[Token(Token = "0x6000D07")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D08")]
		private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D09")]
		private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000D0A")]
		private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000226")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x56EF04", Offset = "0x56EF04")]
	public class ShuffleBag<T> : ICollection<T>, IList<T>, IEnumerable, IEnumerable<T>
	{
		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> data;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int cursor;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T last;

		[Token(Token = "0x1700013D")]
		public T Item
		{
			[Token(Token = "0x6000D12")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000D13")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public int Count
		{
			[Token(Token = "0x6000D16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013F")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000D1B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D0B")]
		public ShuffleBag(T[] initalValues)
		{
		}

		[Token(Token = "0x6000D0C")]
		public ShuffleBag()
		{
		}

		[Token(Token = "0x6000D0D")]
		public T Next()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D0E")]
		public int NextIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0F")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000D10")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000D11")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000D14")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000D17")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D18")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D19")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000D1A")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000227")]
	public class VectorPid
	{
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float PFactor;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float IFactor;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DFactor;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 _integral;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _lastError;

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x582DB4", Offset = "0x582DB4", VA = "0x582DB4")]
		public VectorPid(float pFactor, float factor, float dFactor)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x582DFC", Offset = "0x582DFC", VA = "0x582DFC")]
		public Vector3 Update(Vector3 currentError, float timeFrame)
		{
			return default(Vector3);
		}
	}
}
namespace NewtonVR
{
	[Token(Token = "0x2000228")]
	public class NVRCollisionSoundController : MonoBehaviour
	{
		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NVRCollisionSoundController Instance;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56EF3C", Offset = "0x56EF3C")]
		public int SoundPoolSize;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56EF74", Offset = "0x56EF74")]
		public bool PitchModulationEnabled;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x56EFAC", Offset = "0x56EFAC")]
		public float PitchModulationRange;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56EFC4", Offset = "0x56EFC4")]
		public float MinCollisionVolume;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxCollisionVelocity;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public NVRCollisionSoundProviders SoundEngine;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static NVRCollisionSoundProvider Provider;

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x58BB4C", Offset = "0x58BB4C", VA = "0x58BB4C")]
		public NVRCollisionSoundController()
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x58BB80", Offset = "0x58BB80", VA = "0x58BB80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x58BC0C", Offset = "0x58BC0C", VA = "0x58BC0C")]
		public static void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}
	}
	[Token(Token = "0x2000229")]
	public enum NVRCollisionSoundProviders
	{
		[Token(Token = "0x40009C6")]
		None,
		[Token(Token = "0x40009C7")]
		Unity,
		[Token(Token = "0x40009C8")]
		FMOD
	}
	[Token(Token = "0x200022A")]
	public enum NVRCollisionSoundMaterials
	{
		[Token(Token = "0x40009CA")]
		none = 0,
		[Token(Token = "0x40009CB")]
		_default = 1,
		[Token(Token = "0x40009CC")]
		carpet = 2,
		[Token(Token = "0x40009CD")]
		wood = 3,
		[Token(Token = "0x40009CE")]
		metal = 4,
		[Token(Token = "0x40009CF")]
		glass = 5,
		[Token(Token = "0x40009D0")]
		plastic = 6,
		[Token(Token = "0x40009D1")]
		cardboard = 7,
		[Token(Token = "0x40009D2")]
		EndNewtonVRMaterials = 50
	}
	[Token(Token = "0x200022B")]
	public class NVRCollisionSoundMaterialsList
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Type typeCache;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static NVRCollisionSoundMaterials[] list;

		[Token(Token = "0x17000140")]
		public static Type TypeCache
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0x58BD14", Offset = "0x58BD14", VA = "0x58BD14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public static NVRCollisionSoundMaterials[] List
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x58BDBC", Offset = "0x58BDBC", VA = "0x58BDBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x58BD0C", Offset = "0x58BD0C", VA = "0x58BD0C")]
		public NVRCollisionSoundMaterialsList()
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x58C15C", Offset = "0x58C15C", VA = "0x58C15C")]
		public static NVRCollisionSoundMaterials? Parse(string materialString)
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	public class NVRCollisionSoundObject : MonoBehaviour
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRCollisionSoundObject> SoundObjects;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRCollisionSoundMaterials Material;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Collider[] Colliders;

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x58C2D8", Offset = "0x58C2D8", VA = "0x58C2D8")]
		public NVRCollisionSoundObject()
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x58C2E0", Offset = "0x58C2E0", VA = "0x58C2E0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x58C400", Offset = "0x58C400", VA = "0x58C400", Slot = "5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x58C51C", Offset = "0x58C51C", VA = "0x58C51C", Slot = "6")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x58C71C", Offset = "0x58C71C", VA = "0x58C71C")]
		private float CalculateImpactVolume(Collision collision)
		{
			return default(float);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x58C7D0", Offset = "0x58C7D0", VA = "0x58C7D0")]
		public static float CubicEaseOut(float velocity, float startingValue = 0f, float changeInValue = 1f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200022D")]
	public abstract class NVRCollisionSoundProvider : MonoBehaviour
	{
		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x58C8E0", Offset = "0x58C8E0", VA = "0x58C8E0")]
		protected NVRCollisionSoundProvider()
		{
		}

		[Token(Token = "0x6000D2E")]
		public abstract void Awake();

		[Token(Token = "0x6000D2F")]
		public abstract void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume);
	}
	[Token(Token = "0x200022E")]
	public class NVRCollisionSoundProviderFMOD : NVRCollisionSoundProvider
	{
		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x58C8E8", Offset = "0x58C8E8", VA = "0x58C8E8")]
		public NVRCollisionSoundProviderFMOD()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x58C8F0", Offset = "0x58C8F0", VA = "0x58C8F0", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x58C8F4", Offset = "0x58C8F4", VA = "0x58C8F4", Slot = "5")]
		public override void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class NVRCollisionSoundProviderUnity : NVRCollisionSoundProvider
	{
		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string AudioSourcePrefabPath;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string CollisionSoundsPath;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject AudioSourcePrefab;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource[] AudioPool;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int CurrentPoolIndex;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<NVRCollisionSoundMaterials, List<AudioClip>> Clips;

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x58C8F8", Offset = "0x58C8F8", VA = "0x58C8F8")]
		public NVRCollisionSoundProviderUnity()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x58C900", Offset = "0x58C900", VA = "0x58C900", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x58CE94", Offset = "0x58CE94", VA = "0x58CE94", Slot = "5")]
		public override void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x58D150", Offset = "0x58D150", VA = "0x58D150")]
		private AudioClip GetClip(NVRCollisionSoundMaterials material)
		{
			return null;
		}
	}
	[Token(Token = "0x2000230")]
	internal struct EnumEqualityComparer<TEnum> : IEqualityComparer<TEnum> where TEnum : struct
	{
		[Token(Token = "0x2000231")]
		private static class BoxAvoidance
		{
			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Func<TEnum, int> _wrapper;

			[Token(Token = "0x6000D3A")]
			static BoxAvoidance()
			{
			}

			[Token(Token = "0x6000D3B")]
			public static int ToInt(TEnum enu)
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D38")]
		public bool Equals(TEnum firstEnum, TEnum secondEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		public int GetHashCode(TEnum firstEnum)
		{
			return default(int);
		}
	}
}
namespace NewtonVR.Example
{
	[Token(Token = "0x2000232")]
	public class NVRExampleButtonDropSphere : MonoBehaviour
	{
		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x58320C", Offset = "0x58320C", VA = "0x58320C")]
		public NVRExampleButtonDropSphere()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x583214", Offset = "0x583214", VA = "0x583214")]
		public void DropSphere()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class NVRExampleButtonResetScene : MonoBehaviour
	{
		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x5833A4", Offset = "0x5833A4", VA = "0x5833A4")]
		public NVRExampleButtonResetScene()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x5833AC", Offset = "0x5833AC", VA = "0x5833AC")]
		public void ResetScene()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class NVRExampleColorLever : MonoBehaviour
	{
		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color From;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color To;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer Result;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NVRLever Lever;

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x5833F0", Offset = "0x5833F0", VA = "0x5833F0")]
		public NVRExampleColorLever()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x5833F8", Offset = "0x5833F8", VA = "0x5833F8")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class NVRExampleColorSlider : MonoBehaviour
	{
		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color From;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color To;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer Result;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NVRSlider Slider;

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x5834D8", Offset = "0x5834D8", VA = "0x5834D8")]
		public NVRExampleColorSlider()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x5834E0", Offset = "0x5834E0", VA = "0x5834E0")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class NVRExampleDegreeResult : MonoBehaviour
	{
		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRInteractableItem Knob;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh Text;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x5835C0", Offset = "0x5835C0", VA = "0x5835C0")]
		public NVRExampleDegreeResult()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x5835C8", Offset = "0x5835C8", VA = "0x5835C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x583620", Offset = "0x583620", VA = "0x583620")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class NVRExampleEvent : MonoBehaviour
	{
		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x5836A4", Offset = "0x5836A4", VA = "0x5836A4")]
		public NVRExampleEvent()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x5836AC", Offset = "0x5836AC", VA = "0x5836AC")]
		public void Duplicate()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class NVRExampleGrower : NVRInteractableItem
	{
		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x5837C4", Offset = "0x5837C4", VA = "0x5837C4")]
		public NVRExampleGrower()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x583868", Offset = "0x583868", VA = "0x583868", Slot = "12")]
		public override void InteractingUpdate(NVRHand hand)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class NVRExampleGun : NVRInteractableItem
	{
		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject BulletPrefab;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform FirePoint;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector3 BulletForce;

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x583ED8", Offset = "0x583ED8", VA = "0x583ED8")]
		public NVRExampleGun()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x583F38", Offset = "0x583F38", VA = "0x583F38", Slot = "17")]
		public override void UseButtonDown()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class NVRExampleLaserPointer : MonoBehaviour
	{
		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LineWidth;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ForceLineVisible;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool OnlyVisibleOnTrigger;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer Line;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRHand Hand;

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x5842B0", Offset = "0x5842B0", VA = "0x5842B0")]
		public NVRExampleLaserPointer()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x5842CC", Offset = "0x5842CC", VA = "0x5842CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x5845C0", Offset = "0x5845C0", VA = "0x5845C0")]
		private void LateUpdate()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class NVRExampleLetterResult : MonoBehaviour
	{
		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRLetterSpinner LetterSpinner;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh Text;

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x584A94", Offset = "0x584A94", VA = "0x584A94")]
		public NVRExampleLetterResult()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x584A9C", Offset = "0x584A9C", VA = "0x584A9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x584AF4", Offset = "0x584AF4", VA = "0x584AF4")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class NVRExampleLeverResultRocket : MonoBehaviour
	{
		[Token(Token = "0x200059A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F02C", Offset = "0x56F02C")]
		private sealed class <DoBlastOff>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400189A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Rigidbody <rb>__0;

			[Token(Token = "0x400189B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal NVRExampleLeverResultRocket $this;

			[Token(Token = "0x400189C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x400189D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x400189E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004BD")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002413")]
				[Address(RVA = "0x584FA0", Offset = "0x584FA0", VA = "0x584FA0", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002414")]
				[Address(RVA = "0x584FA8", Offset = "0x584FA8", VA = "0x584FA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002411")]
			[Address(RVA = "0x584E10", Offset = "0x584E10", VA = "0x584E10")]
			[DebuggerHidden]
			public <DoBlastOff>c__Iterator0()
			{
			}

			[Token(Token = "0x6002412")]
			[Address(RVA = "0x584E20", Offset = "0x584E20", VA = "0x584E20", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002415")]
			[Address(RVA = "0x584FB0", Offset = "0x584FB0", VA = "0x584FB0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002416")]
			[Address(RVA = "0x584FC4", Offset = "0x584FC4", VA = "0x584FC4", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200059B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F08C", Offset = "0x56F08C")]
		private sealed class <DoSpawnShip>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400189F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3 <startScale>__0;

			[Token(Token = "0x40018A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 <endScale>__0;

			[Token(Token = "0x40018A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal float <startTime>__0;

			[Token(Token = "0x40018A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <overTime>__0;

			[Token(Token = "0x40018A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal float <stopTime>__0;

			[Token(Token = "0x40018A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal NVRExampleLeverResultRocket $this;

			[Token(Token = "0x40018A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal object $current;

			[Token(Token = "0x40018A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool $disposing;

			[Token(Token = "0x40018A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal int $PC;

			[Token(Token = "0x170004BF")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002419")]
				[Address(RVA = "0x585464", Offset = "0x585464", VA = "0x585464", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600241A")]
				[Address(RVA = "0x58546C", Offset = "0x58546C", VA = "0x58546C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002417")]
			[Address(RVA = "0x584E18", Offset = "0x584E18", VA = "0x584E18")]
			[DebuggerHidden]
			public <DoSpawnShip>c__Iterator1()
			{
			}

			[Token(Token = "0x6002418")]
			[Address(RVA = "0x585028", Offset = "0x585028", VA = "0x585028", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600241B")]
			[Address(RVA = "0x585474", Offset = "0x585474", VA = "0x585474", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600241C")]
			[Address(RVA = "0x585488", Offset = "0x585488", VA = "0x585488", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject RocketPrefab;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRLever Control;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject RocketInstance;

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x584CB4", Offset = "0x584CB4", VA = "0x584CB4")]
		public NVRExampleLeverResultRocket()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x584CBC", Offset = "0x584CBC", VA = "0x584CBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x584D54", Offset = "0x584D54", VA = "0x584D54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x584DA4", Offset = "0x584DA4", VA = "0x584DA4")]
		[DebuggerHidden]
		public IEnumerator DoBlastOff()
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x584CE8", Offset = "0x584CE8", VA = "0x584CE8")]
		[DebuggerHidden]
		private IEnumerator DoSpawnShip()
		{
			return null;
		}
	}
	[Token(Token = "0x200023D")]
	public class NVRExampleRGBResult : MonoBehaviour
	{
		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRSlider SliderRed;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRSlider SliderGreen;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRSlider SliderBlue;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer Result;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ResultColor;

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x5854EC", Offset = "0x5854EC", VA = "0x5854EC")]
		public NVRExampleRGBResult()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x585524", Offset = "0x585524", VA = "0x585524")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class NVRExampleSpawner : MonoBehaviour
	{
		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRButton Button;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToCopy;

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x5856B8", Offset = "0x5856B8", VA = "0x5856B8")]
		public NVRExampleSpawner()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x5856C0", Offset = "0x5856C0", VA = "0x5856C0")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class NVRExampleSwitchResult : MonoBehaviour
	{
		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRSwitch Switch;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light SpotLight;

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x5858BC", Offset = "0x5858BC", VA = "0x5858BC")]
		public NVRExampleSwitchResult()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x5858C4", Offset = "0x5858C4", VA = "0x5858C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x58591C", Offset = "0x58591C", VA = "0x58591C")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x56F0EC", Offset = "0x56F0EC")]
	public class NVRExampleTeleporter : MonoBehaviour
	{
		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LineWidth;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer Line;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRHand Hand;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NVRPlayer Player;

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x58595C", Offset = "0x58595C", VA = "0x58595C")]
		public NVRExampleTeleporter()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x585970", Offset = "0x585970", VA = "0x585970")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x585BA8", Offset = "0x585BA8", VA = "0x585BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x585BD8", Offset = "0x585BD8", VA = "0x585BD8")]
		private void LateUpdate()
		{
		}
	}
}
namespace NewtonVR
{
	[Token(Token = "0x2000241")]
	public class NonVRPlayerRig : MonoBehaviour
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform headTransform;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightHandTransform;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform LeftHandTransform;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float handDistance;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool cursorLocked;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 MovementLimitation;

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x5863D0", Offset = "0x5863D0", VA = "0x5863D0")]
		public NonVRPlayerRig()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x586440", Offset = "0x586440", VA = "0x586440")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x5864B0", Offset = "0x5864B0", VA = "0x5864B0")]
		private void OnApplicationFocus(bool status)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x5864C0", Offset = "0x5864C0", VA = "0x5864C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x586BA0", Offset = "0x586BA0", VA = "0x586BA0")]
		private void RotateItem()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x58695C", Offset = "0x58695C", VA = "0x58695C")]
		private void MovePlayer()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x586CCC", Offset = "0x586CCC", VA = "0x586CCC")]
		private void RotatePlayer()
		{
		}
	}
}
[Token(Token = "0x2000242")]
public class NVRnonVRInputDevice : NVRInputDevice
{
	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject RenderModel;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool primaryInput;

	[Token(Token = "0x17000142")]
	public override bool IsCurrentlyTracked
	{
		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x5A363C", Offset = "0x5A363C", VA = "0x5A363C", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x5A3634", Offset = "0x5A3634", VA = "0x5A3634")]
	public NVRnonVRInputDevice()
	{
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x5A3644", Offset = "0x5A3644", VA = "0x5A3644", Slot = "4")]
	public override void Initialize(NVRHand hand)
	{
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x5A3678", Offset = "0x5A3678", VA = "0x5A3678", Slot = "6")]
	public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
	{
		return null;
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x5A39E4", Offset = "0x5A39E4", VA = "0x5A39E4", Slot = "7")]
	public override GameObject SetupDefaultRenderModel()
	{
		return null;
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x5A3CF8", Offset = "0x5A3CF8", VA = "0x5A3CF8", Slot = "8")]
	public override bool ReadyToInitialize()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x5A3D00", Offset = "0x5A3D00", VA = "0x5A3D00", Slot = "9")]
	public override Collider[] SetupDefaultColliders()
	{
		return null;
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x5A3E24", Offset = "0x5A3E24", VA = "0x5A3E24", Slot = "10")]
	public override string GetDeviceName()
	{
		return null;
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0x5A3E6C", Offset = "0x5A3E6C", VA = "0x5A3E6C", Slot = "11")]
	public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
	{
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0x5A3E70", Offset = "0x5A3E70", VA = "0x5A3E70", Slot = "12")]
	public override float GetAxis1D(NVRButtons button)
	{
		return default(float);
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0x5A3EEC", Offset = "0x5A3EEC", VA = "0x5A3EEC", Slot = "13")]
	public override Vector2 GetAxis2D(NVRButtons button)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0x5A3F50", Offset = "0x5A3F50", VA = "0x5A3F50", Slot = "14")]
	public override bool GetPressDown(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0x5A421C", Offset = "0x5A421C", VA = "0x5A421C", Slot = "15")]
	public override bool GetPressUp(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0x5A44F8", Offset = "0x5A44F8", VA = "0x5A44F8", Slot = "16")]
	public override bool GetPress(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0x5A47D0", Offset = "0x5A47D0", VA = "0x5A47D0", Slot = "17")]
	public override bool GetTouchDown(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0x5A47D8", Offset = "0x5A47D8", VA = "0x5A47D8", Slot = "18")]
	public override bool GetTouchUp(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x5A47E0", Offset = "0x5A47E0", VA = "0x5A47E0", Slot = "19")]
	public override bool GetTouch(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x5A47E8", Offset = "0x5A47E8", VA = "0x5A47E8", Slot = "20")]
	public override bool GetNearTouchDown(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x5A47F0", Offset = "0x5A47F0", VA = "0x5A47F0", Slot = "21")]
	public override bool GetNearTouchUp(NVRButtons button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x5A47F8", Offset = "0x5A47F8", VA = "0x5A47F8", Slot = "22")]
	public override bool GetNearTouch(NVRButtons button)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000243")]
public class NVRnonVRIntegration : NVRIntegration
{
	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0x59D5DC", Offset = "0x59D5DC", VA = "0x59D5DC")]
	public NVRnonVRIntegration()
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x5A4800", Offset = "0x5A4800", VA = "0x5A4800", Slot = "4")]
	public override void Initialize(NVRPlayer player)
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x5A498C", Offset = "0x5A498C", VA = "0x5A498C", Slot = "5")]
	public override Vector3 GetPlayspaceBounds()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0x5A4A00", Offset = "0x5A4A00", VA = "0x5A4A00", Slot = "6")]
	public override bool IsHmdPresent()
	{
		return default(bool);
	}
}
namespace NewtonVR
{
	[Token(Token = "0x2000244")]
	public class NVRAttachJoint : MonoBehaviour
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRInteractableItem AttachedItem;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRAttachPoint AttachedPoint;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PullRange;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AttachRange;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DropDistance;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool MatchRotation;

		[Token(Token = "0x17000143")]
		public bool IsAttached
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x586DEC", Offset = "0x586DEC", VA = "0x586DEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x586DBC", Offset = "0x586DBC", VA = "0x586DBC")]
		public NVRAttachJoint()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x586E60", Offset = "0x586E60", VA = "0x586E60", Slot = "4")]
		protected virtual void OnTriggerStay(Collider col)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x587044", Offset = "0x587044", VA = "0x587044", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x587080", Offset = "0x587080", VA = "0x587080", Slot = "6")]
		protected virtual void FixedUpdateAttached()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x5871D4", Offset = "0x5871D4", VA = "0x5871D4", Slot = "7")]
		protected virtual void Attach(NVRAttachPoint point)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x58721C", Offset = "0x58721C", VA = "0x58721C", Slot = "8")]
		protected virtual void Detach()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class NVRAttachPoint : MonoBehaviour
	{
		[Token(Token = "0x4000A13")]
		private const float MaxVelocityChange = 5f;

		[Token(Token = "0x4000A14")]
		private const float MaxAngularVelocityChange = 10f;

		[Token(Token = "0x4000A15")]
		private const float VelocityMagic = 3000f;

		[Token(Token = "0x4000A16")]
		private const float AngularVelocityMagic = 25f;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public NVRInteractableItem Item;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsAttached;

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x58725C", Offset = "0x58725C", VA = "0x58725C")]
		public NVRAttachPoint()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x587264", Offset = "0x587264", VA = "0x587264", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x587578", Offset = "0x587578", VA = "0x587578", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x587400", Offset = "0x587400", VA = "0x587400")]
		private NVRInteractableItem FindNVRItem(GameObject gameobject)
		{
			return null;
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x5875A8", Offset = "0x5875A8", VA = "0x5875A8", Slot = "6")]
		public virtual void Attached(NVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x587874", Offset = "0x587874", VA = "0x587874", Slot = "7")]
		public virtual void Detached(NVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x5878CC", Offset = "0x5878CC", VA = "0x5878CC", Slot = "8")]
		public virtual void PullTowards(NVRAttachJoint joint)
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class AttachPointMapper
	{
		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRAttachPoint> Colliders;

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x582FD0", Offset = "0x582FD0", VA = "0x582FD0")]
		public AttachPointMapper()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x582FD8", Offset = "0x582FD8", VA = "0x582FD8")]
		public static void Register(Collider col, NVRAttachPoint point)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x583070", Offset = "0x583070", VA = "0x583070")]
		public static void Deregister(Collider col)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x5830F8", Offset = "0x5830F8", VA = "0x5830F8")]
		public static NVRAttachPoint GetAttachPoint(Collider col)
		{
			return null;
		}
	}
	[Token(Token = "0x2000247")]
	public class NVRButton : MonoBehaviour
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F170", Offset = "0x56F170")]
		public float DistanceToEngage;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F1A8", Offset = "0x56F1A8")]
		public bool ButtonDown;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F1E0", Offset = "0x56F1E0")]
		public bool ButtonUp;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F218", Offset = "0x56F218")]
		public bool ButtonIsPushed;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F250", Offset = "0x56F250")]
		public bool ButtonWasPushed;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Transform InitialPosition;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float MinDistance;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float PositionMagic;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float CurrentDistance;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 InitialLocalPosition;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 ConstrainedPosition;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion InitialLocalRotation;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion ConstrainedRotation;

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x587DCC", Offset = "0x587DCC", VA = "0x587DCC")]
		public NVRButton()
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x587DF8", Offset = "0x587DF8", VA = "0x587DF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x58812C", Offset = "0x58812C", VA = "0x58812C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x5883C4", Offset = "0x5883C4", VA = "0x5883C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x588304", Offset = "0x588304", VA = "0x588304")]
		private void ConstrainPosition()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x58840C", Offset = "0x58840C", VA = "0x58840C")]
		private void LateUpdate()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class NVRButtonInputs
	{
		[Token(Token = "0x2000249")]
		public enum SimpleButtonState
		{
			[Token(Token = "0x4000A44")]
			Idle,
			[Token(Token = "0x4000A45")]
			Pressed,
			[Token(Token = "0x4000A46")]
			Hold
		}

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool PressDownCached;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool PressDownExpired;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool PressUpCached;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool PressUpExpired;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool IsPressedCached;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool IsPressedExpired;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool TouchDownCached;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		private bool TouchDownExpired;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool TouchUpCached;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool TouchUpExpired;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool IsTouchedCached;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		private bool IsTouchedExpired;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool NearTouchDownCached;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool NearTouchDownExpired;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private bool NearTouchUpCached;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		private bool NearTouchUpExpired;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool IsNearTouchedCached;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool IsNearTouchedExpired;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector2 AxisCached;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool AxisExpired;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float SingleAxisCached;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool SingleAxisExpired;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRInputDevice InputDevice;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NVRButtons NVRbutton;

		[Token(Token = "0x4000A41")]
		private const float axisNoDpadThreshold = 0.09f;

		[Token(Token = "0x4000A42")]
		private const float axisDPadDotThreshold = 0.5f;

		[Token(Token = "0x17000144")]
		public bool PressDown
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x586364", Offset = "0x586364", VA = "0x586364")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000145")]
		public bool PressUp
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x583C94", Offset = "0x583C94", VA = "0x583C94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000146")]
		public bool IsPressed
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x5849BC", Offset = "0x5849BC", VA = "0x5849BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000147")]
		public bool TouchDown
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x588418", Offset = "0x588418", VA = "0x588418")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000148")]
		public bool TouchUp
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x588488", Offset = "0x588488", VA = "0x588488")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000149")]
		public bool IsTouched
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x5884F8", Offset = "0x5884F8", VA = "0x5884F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014A")]
		public bool NearTouchDown
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x588568", Offset = "0x588568", VA = "0x588568")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014B")]
		public bool NearTouchUp
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x5885D8", Offset = "0x5885D8", VA = "0x5885D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014C")]
		public bool IsNearTouched
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x588648", Offset = "0x588648", VA = "0x588648")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014D")]
		public Vector2 Axis
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x5886B8", Offset = "0x5886B8", VA = "0x5886B8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700014E")]
		public float SingleAxis
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x586304", Offset = "0x586304", VA = "0x586304")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700014F")]
		public NVRButtons AsDPad
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x588754", Offset = "0x588754", VA = "0x588754")]
			get
			{
				return default(NVRButtons);
			}
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x588410", Offset = "0x588410", VA = "0x588410")]
		public NVRButtonInputs()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x588718", Offset = "0x588718", VA = "0x588718")]
		public void FrameReset(NVRInputDevice inputDevice, NVRButtons button)
		{
		}
	}
	[Token(Token = "0x200024A")]
	public enum NVRButtons
	{
		[Token(Token = "0x4000A48")]
		System = 0,
		[Token(Token = "0x4000A49")]
		ApplicationMenu = 1,
		[Token(Token = "0x4000A4A")]
		Grip = 2,
		[Token(Token = "0x4000A4B")]
		DPad_Left = 3,
		[Token(Token = "0x4000A4C")]
		DPad_Up = 4,
		[Token(Token = "0x4000A4D")]
		DPad_Right = 5,
		[Token(Token = "0x4000A4E")]
		DPad_Down = 6,
		[Token(Token = "0x4000A4F")]
		A = 7,
		[Token(Token = "0x4000A50")]
		B = 8,
		[Token(Token = "0x4000A51")]
		X = 9,
		[Token(Token = "0x4000A52")]
		Y = 10,
		[Token(Token = "0x4000A53")]
		Axis0 = 11,
		[Token(Token = "0x4000A54")]
		Axis1 = 12,
		[Token(Token = "0x4000A55")]
		Axis2 = 13,
		[Token(Token = "0x4000A56")]
		Axis3 = 14,
		[Token(Token = "0x4000A57")]
		Axis4 = 15,
		[Token(Token = "0x4000A58")]
		Touchpad = 16,
		[Token(Token = "0x4000A59")]
		Trigger = 17,
		[Token(Token = "0x4000A5A")]
		Back = 18,
		[Token(Token = "0x4000A5B")]
		Stick = 19,
		[Token(Token = "0x4000A5C")]
		None = 255
	}
	[Token(Token = "0x200024B")]
	public class NVRButtonsHelper
	{
		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NVRButtons[] array;

		[Token(Token = "0x17000150")]
		public static NVRButtons[] Array
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x588970", Offset = "0x588970", VA = "0x588970")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x588968", Offset = "0x588968", VA = "0x588968")]
		public NVRButtonsHelper()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public struct NVRButtonsComparer : IEqualityComparer<NVRButtons>
	{
		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x588954", Offset = "0x588954", VA = "0x588954", Slot = "4")]
		public bool Equals(NVRButtons x, NVRButtons y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x588960", Offset = "0x588960", VA = "0x588960", Slot = "5")]
		public int GetHashCode(NVRButtons obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200024D")]
	public class NVRCanvasInput : BaseInputModule
	{
		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool GeometryBlocksLaser;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask LayersThatBlockLaser;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite CursorSprite;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material CursorMaterial;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float NormalCursorScale;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool LaserEnabled;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color LaserColor;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float LaserStartWidth;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float LaserEndWidth;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool OnCanvas;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool CanvasUsed;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform[] Cursors;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer[] Lasers;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject[] CurrentPoint;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject[] CurrentPressed;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject[] CurrentDragging;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData[] PointEvents;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool Initialized;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool DelayedInitialized;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Camera ControllerCamera;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private NVRPlayer Player;

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x588B18", Offset = "0x588B18", VA = "0x588B18")]
		public NVRCanvasInput()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x588B90", Offset = "0x588B90", VA = "0x588B90", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x589580", Offset = "0x589580", VA = "0x589580")]
		protected void DelayedCameraInit()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x5896C4", Offset = "0x5896C4", VA = "0x5896C4")]
		private bool GetLookPointerEventData(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x589B68", Offset = "0x589B68", VA = "0x589B68")]
		private bool UpdateCursor(int index, PointerEventData pointData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x58A3AC", Offset = "0x58A3AC", VA = "0x58A3AC")]
		public void ClearSelection()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x58A47C", Offset = "0x58A47C", VA = "0x58A47C")]
		private void Select(GameObject go)
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x58A578", Offset = "0x58A578", VA = "0x58A578")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x58A6D4", Offset = "0x58A6D4", VA = "0x58A6D4")]
		private void UpdateCameraPosition(int index)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x58A834", Offset = "0x58A834", VA = "0x58A834", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x58A838", Offset = "0x58A838", VA = "0x58A838")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x58B9C4", Offset = "0x58B9C4", VA = "0x58B9C4")]
		private bool ButtonDown(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x58BA88", Offset = "0x58BA88", VA = "0x58BA88")]
		private bool ButtonUp(int index)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200024E")]
	public class NVREventLever : NVRInteractableItem
	{
		[Token(Token = "0x200024F")]
		public enum LeverPosition
		{
			[Token(Token = "0x4000A82")]
			Off,
			[Token(Token = "0x4000A83")]
			Mid,
			[Token(Token = "0x4000A84")]
			On
		}

		[Token(Token = "0x2000250")]
		public enum RotationAxis
		{
			[Token(Token = "0x4000A86")]
			XAxis,
			[Token(Token = "0x4000A87")]
			YAxis,
			[Token(Token = "0x4000A88")]
			ZAxis
		}

		[Token(Token = "0x200059C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F298", Offset = "0x56F298")]
		private sealed class <HoldPosition>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float time;

			[Token(Token = "0x40018A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal NVREventLever $this;

			[Token(Token = "0x40018AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x40018AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40018AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004C1")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600241F")]
				[Address(RVA = "0x58E6DC", Offset = "0x58E6DC", VA = "0x58E6DC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002420")]
				[Address(RVA = "0x58E6E4", Offset = "0x58E6E4", VA = "0x58E6E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600241D")]
			[Address(RVA = "0x58DC20", Offset = "0x58DC20", VA = "0x58DC20")]
			[DebuggerHidden]
			public <HoldPosition>c__Iterator0()
			{
			}

			[Token(Token = "0x600241E")]
			[Address(RVA = "0x58E5A8", Offset = "0x58E5A8", VA = "0x58E5A8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002421")]
			[Address(RVA = "0x58E6EC", Offset = "0x58E6EC", VA = "0x58E6EC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002422")]
			[Address(RVA = "0x58E700", Offset = "0x58E700", VA = "0x58E700", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float LastValue;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float CurrentValue;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public LeverPosition LastLeverPosition;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public LeverPosition CurrentLeverPosition;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool LeverEngaged;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float EngageWaitTime;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Transform InitialAttachPoint;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected HingeJoint HingeJoint;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool UseMotor;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected Quaternion Max;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Quaternion Mid;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected Quaternion Min;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float AngleRange;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public UnityEvent OnEngange;

		[Token(Token = "0x17000151")]
		protected virtual float DeltaMagic
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x58D3FC", Offset = "0x58D3FC", VA = "0x58D3FC", Slot = "27")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x58D3F0", Offset = "0x58D3F0", VA = "0x58D3F0")]
		public NVREventLever()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x58D404", Offset = "0x58D404", VA = "0x58D404", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x58D90C", Offset = "0x58D90C", VA = "0x58D90C", Slot = "10")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x58DAB0", Offset = "0x58DAB0", VA = "0x58DAB0", Slot = "28")]
		protected virtual void Engage()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x58DB94", Offset = "0x58DB94", VA = "0x58DB94")]
		[DebuggerHidden]
		private IEnumerator HoldPosition(float time)
		{
			return null;
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x58DC28", Offset = "0x58DC28", VA = "0x58DC28", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x58E16C", Offset = "0x58E16C", VA = "0x58E16C", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x58D9B0", Offset = "0x58D9B0", VA = "0x58D9B0")]
		private float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x58DA74", Offset = "0x58DA74", VA = "0x58DA74")]
		private LeverPosition GetPosition()
		{
			return default(LeverPosition);
		}
	}
	[Token(Token = "0x2000251")]
	public class NVRHand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000252")]
		public class NVRInteractableEvent : UnityEvent<NVRInteractable>
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x58E800", Offset = "0x58E800", VA = "0x58E800")]
			public NVRInteractableEvent()
			{
			}
		}

		[Token(Token = "0x200059D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F3C8", Offset = "0x56F3C8")]
		private sealed class <DoLongHapticPulse>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <startTime>__0;

			[Token(Token = "0x40018AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float seconds;

			[Token(Token = "0x40018AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <endTime>__0;

			[Token(Token = "0x40018B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal NVRButtons button;

			[Token(Token = "0x40018B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal NVRHand $this;

			[Token(Token = "0x40018B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x40018B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x40018B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x170004C3")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002425")]
				[Address(RVA = "0x5930BC", Offset = "0x5930BC", VA = "0x5930BC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002426")]
				[Address(RVA = "0x5930C4", Offset = "0x5930C4", VA = "0x5930C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002423")]
			[Address(RVA = "0x590DB0", Offset = "0x590DB0", VA = "0x590DB0")]
			[DebuggerHidden]
			public <DoLongHapticPulse>c__Iterator0()
			{
			}

			[Token(Token = "0x6002424")]
			[Address(RVA = "0x592FDC", Offset = "0x592FDC", VA = "0x592FDC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002427")]
			[Address(RVA = "0x5930CC", Offset = "0x5930CC", VA = "0x5930CC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002428")]
			[Address(RVA = "0x5930E0", Offset = "0x5930E0", VA = "0x5930E0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRButtons HoldButton;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public NVRButtons UseButton;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool IsRight;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[HideInInspector]
		public bool IsLeft;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public NVRPlayer Player;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<NVRButtons, NVRButtonInputs> Inputs;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public InterationStyle CurrentInteractionStyle;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public GameObject CustomModel;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public GameObject CustomPhysicalColliders;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VisibilityLevel CurrentVisibility;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool VisibilityLocked;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public HandState CurrentHandState;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<NVRInteractable, Dictionary<Collider, float>> CurrentlyHoveringOver;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public NVRInteractable CurrentlyInteracting;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public NVRInteractableEvent OnBeginInteraction;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public NVRInteractableEvent OnEndInteraction;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int EstimationSampleIndex;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] LastPositions;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion[] LastRotations;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] LastDeltas;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int EstimationSamples;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public NVRPhysicalController PhysicalController;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Collider[] GhostColliders;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Renderer[] GhostRenderers;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private NVRInputDevice InputDevice;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GameObject RenderModel;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F378", Offset = "0x56F378")]
		private static Func<KeyValuePair<NVRInteractable, Dictionary<Collider, float>>, bool> <>f__am$cache0;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F388", Offset = "0x56F388")]
		private static Func<KeyValuePair<Collider, float>, float> <>f__am$cache1;

		[Token(Token = "0x17000152")]
		public bool HoldButtonDown
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x58E850", Offset = "0x58E850", VA = "0x58E850")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000153")]
		public bool HoldButtonUp
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x58E8C8", Offset = "0x58E8C8", VA = "0x58E8C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000154")]
		public bool HoldButtonPressed
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0x58E940", Offset = "0x58E940", VA = "0x58E940")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000155")]
		public float HoldButtonAxis
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x58E9B8", Offset = "0x58E9B8", VA = "0x58E9B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000156")]
		public bool UseButtonDown
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x58EA30", Offset = "0x58EA30", VA = "0x58EA30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000157")]
		public bool UseButtonUp
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x58EAA8", Offset = "0x58EAA8", VA = "0x58EAA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000158")]
		public bool UseButtonPressed
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x58EB20", Offset = "0x58EB20", VA = "0x58EB20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000159")]
		public float UseButtonAxis
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x58EB98", Offset = "0x58EB98", VA = "0x58EB98")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700015A")]
		public bool IsHovering
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x58EC10", Offset = "0x58EC10", VA = "0x58EC10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015B")]
		public bool IsInteracting
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x58ECD8", Offset = "0x58ECD8", VA = "0x58ECD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015C")]
		public bool HasCustomModel
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x58ED4C", Offset = "0x58ED4C", VA = "0x58ED4C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015D")]
		public bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x58B920", Offset = "0x58B920", VA = "0x58B920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015E")]
		public Vector3 CurrentForward
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x58A2D4", Offset = "0x58A2D4", VA = "0x58A2D4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700015F")]
		public Vector3 CurrentPosition
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x58A1FC", Offset = "0x58A1FC", VA = "0x58A1FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x58E764", Offset = "0x58E764", VA = "0x58E764")]
		public NVRHand()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x58EDC0", Offset = "0x58EDC0", VA = "0x58EDC0", Slot = "4")]
		public virtual void PreInitialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x58F7F8", Offset = "0x58F7F8", VA = "0x58F7F8", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x5900B8", Offset = "0x5900B8", VA = "0x5900B8")]
		protected void UpdateHovering()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x58FD88", Offset = "0x58FD88", VA = "0x58FD88")]
		protected void UpdateButtonStates()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x58FEE4", Offset = "0x58FEE4", VA = "0x58FEE4")]
		protected void UpdateInteractions()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x5903D0", Offset = "0x5903D0", VA = "0x5903D0")]
		private void UpdateVisibilityAndColliders()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x5841A4", Offset = "0x5841A4", VA = "0x5841A4")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Grip)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x590CE4", Offset = "0x590CE4", VA = "0x590CE4")]
		public void LongHapticPulse(float seconds, NVRButtons button = NVRButtons.Grip)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x590D10", Offset = "0x590D10", VA = "0x590D10")]
		[DebuggerHidden]
		private IEnumerator DoLongHapticPulse(float seconds, NVRButtons button)
		{
			return null;
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x590DB8", Offset = "0x590DB8", VA = "0x590DB8")]
		public Vector3 GetVelocityEstimation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x590FB4", Offset = "0x590FB4", VA = "0x590FB4")]
		public Vector3 GetAngularVelocityEstimation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x5911A4", Offset = "0x5911A4", VA = "0x5911A4")]
		public Vector3 GetPositionDelta()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x5912D4", Offset = "0x5912D4", VA = "0x5912D4")]
		public Quaternion GetRotationDelta()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x59141C", Offset = "0x59141C", VA = "0x59141C", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x591590", Offset = "0x591590", VA = "0x591590", Slot = "7")]
		public virtual void BeginInteraction(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x5916B4", Offset = "0x5916B4", VA = "0x5916B4", Slot = "8")]
		public virtual void EndInteraction(NVRInteractable item)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x5905C4", Offset = "0x5905C4", VA = "0x5905C4")]
		private bool PickupClosest()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x591818", Offset = "0x591818", VA = "0x591818", Slot = "9")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x591B28", Offset = "0x591B28", VA = "0x591B28", Slot = "10")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x591D38", Offset = "0x591D38", VA = "0x591D38", Slot = "11")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x591F20", Offset = "0x591F20", VA = "0x591F20")]
		public string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x591FC4", Offset = "0x591FC4", VA = "0x591FC4")]
		public Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x591FFC", Offset = "0x591FFC", VA = "0x591FFC")]
		public void DeregisterInteractable(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x5908FC", Offset = "0x5908FC", VA = "0x5908FC")]
		protected void SetVisibility(VisibilityLevel visibility)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x58F544", Offset = "0x58F544", VA = "0x58F544")]
		protected void InitializeRenderModel()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x58F8D8", Offset = "0x58F8D8", VA = "0x58F8D8")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x592ED0", Offset = "0x592ED0", VA = "0x592ED0")]
		public void ForceGhost()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x592F04", Offset = "0x592F04", VA = "0x592F04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F3A8", Offset = "0x56F3A8")]
		private static bool <get_IsHovering>m__0(KeyValuePair<NVRInteractable, Dictionary<Collider, float>> kvp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x592F84", Offset = "0x592F84", VA = "0x592F84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F3B8", Offset = "0x56F3B8")]
		private static float <UpdateHovering>m__1(KeyValuePair<Collider, float> colliderTime)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000253")]
	public enum VisibilityLevel
	{
		[Token(Token = "0x4000AA7")]
		Invisible = 0,
		[Token(Token = "0x4000AA8")]
		Ghost = 70,
		[Token(Token = "0x4000AA9")]
		Visible = 100
	}
	[Token(Token = "0x2000254")]
	public enum HandState
	{
		[Token(Token = "0x4000AAB")]
		Uninitialized,
		[Token(Token = "0x4000AAC")]
		Idle,
		[Token(Token = "0x4000AAD")]
		GripDownNotInteracting,
		[Token(Token = "0x4000AAE")]
		GripDownInteracting,
		[Token(Token = "0x4000AAF")]
		GripToggleOnNotInteracting,
		[Token(Token = "0x4000AB0")]
		GripToggleOnInteracting,
		[Token(Token = "0x4000AB1")]
		GripToggleOff
	}
	[Token(Token = "0x2000255")]
	public enum InterationStyle
	{
		[Token(Token = "0x4000AB3")]
		Hold,
		[Token(Token = "0x4000AB4")]
		Toggle,
		[Token(Token = "0x4000AB5")]
		ByScript
	}
	[Token(Token = "0x2000256")]
	public class NVRHead : MonoBehaviour
	{
		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x593144", Offset = "0x593144", VA = "0x593144")]
		public NVRHead()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x59314C", Offset = "0x59314C", VA = "0x59314C", Slot = "4")]
		public virtual void Initialize()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class NVRHelpers
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader standardShader;

		[Token(Token = "0x17000160")]
		private static Shader StandardShader
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x593158", Offset = "0x593158", VA = "0x593158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x593150", Offset = "0x593150", VA = "0x593150")]
		public NVRHelpers()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x592B10", Offset = "0x592B10", VA = "0x592B10")]
		public static void SetTransparent(Material material, [Optional] Color? newcolor)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x593210", Offset = "0x593210", VA = "0x593210")]
		public static void SetOpaque(Material material)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x5934BC", Offset = "0x5934BC", VA = "0x5934BC")]
		public static void SetProperty(object obj, string propertyName, object value, bool isPublic)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x59355C", Offset = "0x59355C", VA = "0x59355C")]
		public static void SetField(object obj, string fieldName, object value, bool isPublic)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x584504", Offset = "0x584504", VA = "0x584504")]
		public static void LineRendererSetColor(LineRenderer lineRenderer, Color startColor, Color endColor)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x584A2C", Offset = "0x584A2C", VA = "0x584A2C")]
		public static void LineRendererSetWidth(LineRenderer lineRenderer, float startWidth, float endWidth)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x5935F8", Offset = "0x5935F8", VA = "0x5935F8")]
		public static Quaternion AverageQuaternion(ref Vector4 cumulative, Quaternion newRotation, Quaternion firstRotation, int addAmount)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x5937B0", Offset = "0x5937B0", VA = "0x5937B0")]
		public static Quaternion NormalizeQuaternion(float x, float y, float z, float w)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x593774", Offset = "0x593774", VA = "0x593774")]
		public static Quaternion InverseSignQuaternion(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x5936A4", Offset = "0x5936A4", VA = "0x5936A4")]
		public static bool AreQuaternionsClose(Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000258")]
	public abstract class NVRInputDevice : MonoBehaviour
	{
		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NVRHand _hand;

		[Token(Token = "0x17000161")]
		protected NVRHand Hand
		{
			[Token(Token = "0x6000E01")]
			[Address(RVA = "0x593818", Offset = "0x593818", VA = "0x593818")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x593820", Offset = "0x593820", VA = "0x593820")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public abstract bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000E04")]
			get;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x593810", Offset = "0x593810", VA = "0x593810")]
		protected NVRInputDevice()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x593828", Offset = "0x593828", VA = "0x593828", Slot = "4")]
		public virtual void Initialize(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E05")]
		public abstract Collider[] SetupDefaultPhysicalColliders(Transform ModelParent);

		[Token(Token = "0x6000E06")]
		public abstract GameObject SetupDefaultRenderModel();

		[Token(Token = "0x6000E07")]
		public abstract bool ReadyToInitialize();

		[Token(Token = "0x6000E08")]
		public abstract Collider[] SetupDefaultColliders();

		[Token(Token = "0x6000E09")]
		public abstract string GetDeviceName();

		[Token(Token = "0x6000E0A")]
		public abstract void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad);

		[Token(Token = "0x6000E0B")]
		public abstract float GetAxis1D(NVRButtons button);

		[Token(Token = "0x6000E0C")]
		public abstract Vector2 GetAxis2D(NVRButtons button);

		[Token(Token = "0x6000E0D")]
		public abstract bool GetPressDown(NVRButtons button);

		[Token(Token = "0x6000E0E")]
		public abstract bool GetPressUp(NVRButtons button);

		[Token(Token = "0x6000E0F")]
		public abstract bool GetPress(NVRButtons button);

		[Token(Token = "0x6000E10")]
		public abstract bool GetTouchDown(NVRButtons button);

		[Token(Token = "0x6000E11")]
		public abstract bool GetTouchUp(NVRButtons button);

		[Token(Token = "0x6000E12")]
		public abstract bool GetTouch(NVRButtons button);

		[Token(Token = "0x6000E13")]
		public abstract bool GetNearTouchDown(NVRButtons button);

		[Token(Token = "0x6000E14")]
		public abstract bool GetNearTouchUp(NVRButtons button);

		[Token(Token = "0x6000E15")]
		public abstract bool GetNearTouch(NVRButtons button);
	}
	[Token(Token = "0x2000259")]
	public abstract class NVRIntegration
	{
		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected NVRPlayer Player;

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x593830", Offset = "0x593830", VA = "0x593830")]
		protected NVRIntegration()
		{
		}

		[Token(Token = "0x6000E17")]
		public abstract void Initialize(NVRPlayer player);

		[Token(Token = "0x6000E18")]
		public abstract Vector3 GetPlayspaceBounds();

		[Token(Token = "0x6000E19")]
		public abstract bool IsHmdPresent();
	}
	[Token(Token = "0x200025A")]
	public abstract class NVRInteractable : MonoBehaviour
	{
		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool CanAttach;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool AllowTwoHanded;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DisableKinematicOnAttach;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool EnableKinematicOnDetach;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float DropDistance;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableGravityOnDetach;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<NVRHand> AttachedHands;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Collider[] Colliders;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 ClosestHeldPoint;

		[Token(Token = "0x17000163")]
		public NVRHand AttachedHand
		{
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x584114", Offset = "0x584114", VA = "0x584114")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public virtual bool IsAttached
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x5938E4", Offset = "0x5938E4", VA = "0x5938E4", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x593838", Offset = "0x593838", VA = "0x593838")]
		protected NVRInteractable()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x593964", Offset = "0x593964", VA = "0x593964", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x593A84", Offset = "0x593A84", VA = "0x593A84", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x593A90", Offset = "0x593A90", VA = "0x593A90", Slot = "7")]
		public virtual void ResetInteractable()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x593B0C", Offset = "0x593B0C", VA = "0x593B0C", Slot = "8")]
		public virtual void UpdateColliders()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x593DD8", Offset = "0x593DD8", VA = "0x593DD8", Slot = "9")]
		protected virtual bool CheckForDrop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x58D9AC", Offset = "0x58D9AC", VA = "0x58D9AC", Slot = "10")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x594074", Offset = "0x594074", VA = "0x594074", Slot = "11")]
		public virtual void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x583C1C", Offset = "0x583C1C", VA = "0x583C1C", Slot = "12")]
		public virtual void InteractingUpdate(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x594114", Offset = "0x594114", VA = "0x594114", Slot = "13")]
		public virtual void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x594118", Offset = "0x594118", VA = "0x594118")]
		public void ForceDetach([Optional] NVRHand hand)
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x594260", Offset = "0x594260", VA = "0x594260", Slot = "14")]
		public virtual void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x594358", Offset = "0x594358", VA = "0x594358", Slot = "15")]
		protected virtual void DroppedBecauseOfDistance(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x594390", Offset = "0x594390", VA = "0x594390", Slot = "16")]
		public virtual void UseButtonUp()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x594394", Offset = "0x594394", VA = "0x594394", Slot = "17")]
		public virtual void UseButtonDown()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x594398", Offset = "0x594398", VA = "0x594398", Slot = "18")]
		public virtual void AddExternalVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x5943F0", Offset = "0x5943F0", VA = "0x5943F0", Slot = "19")]
		public virtual void AddExternalAngularVelocity(Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x594448", Offset = "0x594448", VA = "0x594448", Slot = "20")]
		protected virtual void OnDestroy()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class NVRInteractableItem : NVRInteractable
	{
		[Token(Token = "0x4000AC3")]
		protected const float MaxVelocityChange = 10f;

		[Token(Token = "0x4000AC4")]
		protected const float MaxAngularVelocityChange = 20f;

		[Token(Token = "0x4000AC5")]
		protected const float VelocityMagic = 6000f;

		[Token(Token = "0x4000AC6")]
		protected const float AngularVelocityMagic = 50f;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F428", Offset = "0x56F428")]
		public Transform InteractionPoint;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUseButtonDown;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnUseButtonUp;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent OnHovering;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnBeginInteraction;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnEndInteraction;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Dictionary<NVRHand, Transform> PickupTransforms;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Vector3 ExternalVelocity;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Vector3 ExternalAngularVelocity;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Vector3?[] VelocityHistory;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3?[] AngularVelocityHistory;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int CurrentVelocityHistoryStep;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float StartingDrag;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float StartingAngularDrag;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Dictionary<Collider, PhysicMaterial> MaterialCache;

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x5837C8", Offset = "0x5837C8", VA = "0x5837C8")]
		public NVRInteractableItem()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x58D8D0", Offset = "0x58D8D0", VA = "0x58D8D0", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x5947F0", Offset = "0x5947F0", VA = "0x5947F0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x594A14", Offset = "0x594A14", VA = "0x594A14", Slot = "21")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x594A7C", Offset = "0x594A7C", VA = "0x594A7C", Slot = "22")]
		protected virtual void GetTargetValues(out Vector3 targetHandPosition, out Quaternion targetHandRotation, out Vector3 targetItemPosition, out Quaternion targetItemRotation)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x5952EC", Offset = "0x5952EC", VA = "0x5952EC", Slot = "23")]
		protected virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x595820", Offset = "0x595820", VA = "0x595820", Slot = "24")]
		protected virtual void AddExternalVelocities()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x595A88", Offset = "0x595A88", VA = "0x595A88", Slot = "18")]
		public override void AddExternalVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x595BA4", Offset = "0x595BA4", VA = "0x595BA4", Slot = "19")]
		public override void AddExternalAngularVelocity(Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x58DEA8", Offset = "0x58DEA8", VA = "0x58DEA8", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x58E270", Offset = "0x58E270", VA = "0x58E270", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x596068", Offset = "0x596068", VA = "0x596068", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x59607C", Offset = "0x59607C", VA = "0x59607C", Slot = "7")]
		public override void ResetInteractable()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x584100", Offset = "0x584100", VA = "0x584100", Slot = "17")]
		public override void UseButtonDown()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x5960AC", Offset = "0x5960AC", VA = "0x5960AC", Slot = "16")]
		public override void UseButtonUp()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x5960C0", Offset = "0x5960C0", VA = "0x5960C0", Slot = "25")]
		protected virtual void ApplyVelocityHistory()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x5963C8", Offset = "0x5963C8", VA = "0x5963C8", Slot = "26")]
		protected virtual void ResetVelocityHistory()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x5961FC", Offset = "0x5961FC", VA = "0x5961FC")]
		protected Vector3? GetMeanVector(Vector3?[] positions)
		{
			return null;
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x595CC0", Offset = "0x595CC0", VA = "0x595CC0")]
		protected void DisablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x595E88", Offset = "0x595E88", VA = "0x595E88")]
		protected void EnablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x583D04", Offset = "0x583D04", VA = "0x583D04", Slot = "8")]
		public override void UpdateColliders()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class NVRInteractableItemAutoAttach : NVRInteractableItem
	{
		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float PickupAfterSeconds;

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x596478", Offset = "0x596478", VA = "0x596478")]
		public NVRInteractableItemAutoAttach()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x596484", Offset = "0x596484", VA = "0x596484", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class NVRInteractableItemClippable : NVRInteractableItem
	{
		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x59650C", Offset = "0x59650C", VA = "0x59650C")]
		public NVRInteractableItemClippable()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x596510", Offset = "0x596510", VA = "0x596510", Slot = "23")]
		protected override void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x5965D8", Offset = "0x5965D8", VA = "0x5965D8", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x596610", Offset = "0x596610", VA = "0x596610", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class NVRInteractableRotator : NVRInteractable
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float CurrentAngle;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform InitialAttachPoint;

		[Token(Token = "0x17000165")]
		protected virtual float DeltaMagic
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x59664C", Offset = "0x59664C", VA = "0x59664C", Slot = "21")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x596648", Offset = "0x596648", VA = "0x596648")]
		public NVRInteractableRotator()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x596654", Offset = "0x596654", VA = "0x596654", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x596690", Offset = "0x596690", VA = "0x596690", Slot = "22")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x5968E0", Offset = "0x5968E0", VA = "0x5968E0", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x596B44", Offset = "0x596B44", VA = "0x596B44", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class NVRInteractables : MonoBehaviour
	{
		[Token(Token = "0x200059E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F4A0", Offset = "0x56F4A0")]
		private sealed class <Deregister>c__AnonStorey0
		{
			[Token(Token = "0x40018B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NVRInteractable interactable;

			[Token(Token = "0x6002429")]
			[Address(RVA = "0x596D30", Offset = "0x596D30", VA = "0x596D30")]
			public <Deregister>c__AnonStorey0()
			{
			}

			[Token(Token = "0x600242A")]
			[Address(RVA = "0x597184", Offset = "0x597184", VA = "0x597184")]
			internal bool <>m__0(KeyValuePair<Collider, NVRInteractable> mapping)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRInteractable> ColliderMapping;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<NVRInteractable, Collider[]> NVRInteractableMapping;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<NVRInteractable> NVRInteractableList;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool Initialized;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F460", Offset = "0x56F460")]
		private static Func<KeyValuePair<Collider, NVRInteractable>, Collider> <>f__am$cache0;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F470", Offset = "0x56F470")]
		private static Func<KeyValuePair<Collider, NVRInteractable>, NVRInteractable> <>f__am$cache1;

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x596C2C", Offset = "0x596C2C", VA = "0x596C2C")]
		public NVRInteractables()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x596C34", Offset = "0x596C34", VA = "0x596C34")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x593B90", Offset = "0x593B90", VA = "0x593B90")]
		public static void Register(NVRInteractable interactable, Collider[] colliders)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x5944B8", Offset = "0x5944B8", VA = "0x5944B8")]
		public static void Deregister(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x591A28", Offset = "0x591A28", VA = "0x591A28")]
		public static NVRInteractable GetInteractable(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x597068", Offset = "0x597068", VA = "0x597068")]
		public static List<NVRInteractable> GetAllInteractables()
		{
			return null;
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x5970D4", Offset = "0x5970D4", VA = "0x5970D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F480", Offset = "0x56F480")]
		private static Collider <Deregister>m__0(KeyValuePair<Collider, NVRInteractable> mapping)
		{
			return null;
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x59712C", Offset = "0x59712C", VA = "0x59712C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F490", Offset = "0x56F490")]
		private static NVRInteractable <Deregister>m__1(KeyValuePair<Collider, NVRInteractable> mapping)
		{
			return null;
		}
	}
	[Token(Token = "0x2000260")]
	public class NVRInteractableSimpleItem : NVRInteractable
	{
		[Token(Token = "0x4000ADF")]
		private const float MaxVelocityChange = 10f;

		[Token(Token = "0x4000AE0")]
		private const float MaxAngularVelocityChange = 20f;

		[Token(Token = "0x4000AE1")]
		private const float VelocityMagic = 6000f;

		[Token(Token = "0x4000AE2")]
		private const float AngularVelocityMagic = 50f;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool DisablePhysicalMaterialsOnAttach;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F4B0", Offset = "0x56F4B0")]
		public Transform InteractionPoint;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnUseButtonDown;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnUseButtonUp;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent OnHovering;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnBeginInteraction;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnEndInteraction;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action OnBeginInteractionAction;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Vector3 ExternalVelocity;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Vector3 ExternalAngularVelocity;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Vector3?[] VelocityHistory;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3?[] AngularVelocityHistory;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int CurrentVelocityHistoryStep;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float StartingDrag;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float StartingAngularDrag;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Dictionary<Collider, PhysicMaterial> MaterialCache;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Vector3 PickupPointItem;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Quaternion PickupRotationItem;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected Vector3 PickupPointHand;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Quaternion PickupRotationHand;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Vector3 PickupPointDiff;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected Quaternion PickupRotationDelta;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Transform cachedTransform;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		public Transform HelperTransform;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		private NVRHand LastAttachedHand;

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x597224", Offset = "0x597224", VA = "0x597224")]
		public NVRInteractableSimpleItem()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x5972A4", Offset = "0x5972A4", VA = "0x5972A4", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x59746C", Offset = "0x59746C", VA = "0x59746C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x5974CC", Offset = "0x5974CC", VA = "0x5974CC", Slot = "21")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x5972F8", Offset = "0x5972F8", VA = "0x5972F8")]
		protected void CreateHelper()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x59752C", Offset = "0x59752C", VA = "0x59752C", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x5979A4", Offset = "0x5979A4", VA = "0x5979A4", Slot = "22")]
		[HideInInspector]
		public virtual void Deregister()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x597AB0", Offset = "0x597AB0", VA = "0x597AB0")]
		public void DeregisterLastAttachedHand()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x597B4C", Offset = "0x597B4C", VA = "0x597B4C")]
		public void ForceDetach()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x597B80", Offset = "0x597B80", VA = "0x597B80", Slot = "23")]
		protected virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x59812C", Offset = "0x59812C", VA = "0x59812C", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x5984F8", Offset = "0x5984F8", VA = "0x5984F8", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x59850C", Offset = "0x59850C", VA = "0x59850C", Slot = "7")]
		public override void ResetInteractable()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x59853C", Offset = "0x59853C", VA = "0x59853C", Slot = "17")]
		public override void UseButtonDown()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x598550", Offset = "0x598550", VA = "0x598550", Slot = "16")]
		public override void UseButtonUp()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x598564", Offset = "0x598564", VA = "0x598564", Slot = "24")]
		protected virtual void ApplyVelocityHistory()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x59886C", Offset = "0x59886C", VA = "0x59886C", Slot = "25")]
		protected virtual void ResetVelocityHistory()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x5986A0", Offset = "0x5986A0", VA = "0x5986A0")]
		protected Vector3? GetMeanVector(Vector3?[] positions)
		{
			return null;
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x5977DC", Offset = "0x5977DC", VA = "0x5977DC")]
		protected void DisablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x598318", Offset = "0x598318", VA = "0x598318")]
		protected void EnablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x598974", Offset = "0x598974", VA = "0x598974", Slot = "8")]
		public override void UpdateColliders()
		{
		}
	}
}
[Token(Token = "0x2000261")]
public class NVRInteractableStickyItem : NVRInteractableSimpleItem
{
	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool stuck;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private NVRHand targetHand;

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x5A3228", Offset = "0x5A3228", VA = "0x5A3228")]
	public NVRInteractableStickyItem()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x5A322C", Offset = "0x5A322C", VA = "0x5A322C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x5A33C4", Offset = "0x5A33C4", VA = "0x5A33C4", Slot = "11")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x5A3404", Offset = "0x5A3404", VA = "0x5A3404", Slot = "14")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x5A3444", Offset = "0x5A3444", VA = "0x5A3444", Slot = "10")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x5A358C", Offset = "0x5A358C", VA = "0x5A358C", Slot = "12")]
	public override void InteractingUpdate(NVRHand hand)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x5A3590", Offset = "0x5A3590", VA = "0x5A3590")]
	public void Unstuck()
	{
	}
}
namespace NewtonVR
{
	[Token(Token = "0x2000262")]
	public class NVRLetterSpinner : NVRInteractableRotator
	{
		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LETTERLIST;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float SnapDistance;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float RungAngleInterval;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 LastAngularVelocity;

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x598B50", Offset = "0x598B50", VA = "0x598B50")]
		public NVRLetterSpinner()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x598BD0", Offset = "0x598BD0", VA = "0x598BD0", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x598C6C", Offset = "0x598C6C", VA = "0x598C6C", Slot = "22")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x598F08", Offset = "0x598F08", VA = "0x598F08", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x584B38", Offset = "0x584B38", VA = "0x584B38")]
		public string GetLetter()
		{
			return null;
		}
	}
	[Token(Token = "0x2000263")]
	public class NVRLever : NVRInteractableItem
	{
		[Token(Token = "0x2000264")]
		public enum LeverPosition
		{
			[Token(Token = "0x4000B10")]
			Off,
			[Token(Token = "0x4000B11")]
			Mid,
			[Token(Token = "0x4000B12")]
			On
		}

		[Token(Token = "0x2000265")]
		public enum RotationAxis
		{
			[Token(Token = "0x4000B14")]
			XAxis,
			[Token(Token = "0x4000B15")]
			YAxis,
			[Token(Token = "0x4000B16")]
			ZAxis
		}

		[Token(Token = "0x200059F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F528", Offset = "0x56F528")]
		private sealed class <HoldPosition>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float time;

			[Token(Token = "0x40018B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal NVRLever $this;

			[Token(Token = "0x40018B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x40018B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40018BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004C5")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600242D")]
				[Address(RVA = "0x599C48", Offset = "0x599C48", VA = "0x599C48", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600242E")]
				[Address(RVA = "0x599C50", Offset = "0x599C50", VA = "0x599C50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600242B")]
			[Address(RVA = "0x599788", Offset = "0x599788", VA = "0x599788")]
			[DebuggerHidden]
			public <HoldPosition>c__Iterator0()
			{
			}

			[Token(Token = "0x600242C")]
			[Address(RVA = "0x599B14", Offset = "0x599B14", VA = "0x599B14", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600242F")]
			[Address(RVA = "0x599C58", Offset = "0x599C58", VA = "0x599C58", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002430")]
			[Address(RVA = "0x599C6C", Offset = "0x599C6C", VA = "0x599C6C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float LastValue;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float CurrentValue;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public LeverPosition LastLeverPosition;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public LeverPosition CurrentLeverPosition;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool LeverEngaged;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float EngageWaitTime;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Transform InitialAttachPoint;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected HingeJoint HingeJoint;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool UseMotor;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected Quaternion Max;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Quaternion Mid;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected Quaternion Min;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float AngleRange;

		[Token(Token = "0x17000166")]
		protected virtual float DeltaMagic
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0x598FBC", Offset = "0x598FBC", VA = "0x598FBC", Slot = "27")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x598FB0", Offset = "0x598FB0", VA = "0x598FB0")]
		public NVRLever()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x598FC4", Offset = "0x598FC4", VA = "0x598FC4", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x599490", Offset = "0x599490", VA = "0x599490", Slot = "10")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x599630", Offset = "0x599630", VA = "0x599630", Slot = "28")]
		protected virtual void Engage()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x5996FC", Offset = "0x5996FC", VA = "0x5996FC")]
		[DebuggerHidden]
		private IEnumerator HoldPosition(float time)
		{
			return null;
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x599790", Offset = "0x599790", VA = "0x599790", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x599A10", Offset = "0x599A10", VA = "0x599A10", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x599530", Offset = "0x599530", VA = "0x599530")]
		private float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x5995F4", Offset = "0x5995F4", VA = "0x5995F4")]
		private LeverPosition GetPosition()
		{
			return default(LeverPosition);
		}
	}
	[Token(Token = "0x2000266")]
	public class NVRPhysicalController : MonoBehaviour
	{
		[Token(Token = "0x20005A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F598", Offset = "0x56F598")]
		private sealed class <Initialize>c__AnonStorey0
		{
			[Token(Token = "0x40018BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Type componentType;

			[Token(Token = "0x6002431")]
			[Address(RVA = "0x59C134", Offset = "0x59C134", VA = "0x59C134")]
			public <Initialize>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6002432")]
			[Address(RVA = "0x59CB4C", Offset = "0x59CB4C", VA = "0x59CB4C")]
			internal bool <>m__0(Type keepType)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NVRHand Hand;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool State;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public GameObject PhysicalController;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider[] Colliders;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 ClosestHeldPoint;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float AttachedRotationMagic;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float AttachedPositionMagic;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Type[] KeepTypes;

		[Token(Token = "0x17000167")]
		protected float DropDistance
		{
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x59C12C", Offset = "0x59C12C", VA = "0x59C12C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x59BF08", Offset = "0x59BF08", VA = "0x59BF08")]
		public NVRPhysicalController()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x592424", Offset = "0x592424", VA = "0x592424")]
		public void Initialize(NVRHand trackingHand, bool initialState)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x5923A4", Offset = "0x5923A4", VA = "0x5923A4")]
		public void Kill()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x59C63C", Offset = "0x59C63C", VA = "0x59C63C")]
		private bool CheckForDrop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x59C76C", Offset = "0x59C76C", VA = "0x59C76C")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x59CAE0", Offset = "0x59CAE0", VA = "0x59CAE0", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x59CB24", Offset = "0x59CB24", VA = "0x59CB24", Slot = "5")]
		protected virtual void DroppedBecauseOfDistance()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x592114", Offset = "0x592114", VA = "0x592114")]
		public void On()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x5920D8", Offset = "0x5920D8", VA = "0x5920D8")]
		public void Off()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x59C13C", Offset = "0x59C13C", VA = "0x59C13C")]
		protected void SetupCustomModel()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class NVRPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DecimalConstantAttribute", RVA = "0x56F5A8", Offset = "0x56F5A8")]
		public static readonly decimal NewtonVRVersion;

		[Token(Token = "0x4000B21")]
		public const float NewtonVRExpectedDeltaTime = 0.0111f;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static List<NVRPlayer> Instances;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool SteamVREnabled;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool OculusSDKEnabled;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[HideInInspector]
		public bool UseNonVRInput;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[HideInInspector]
		public bool ForcePSVR;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public bool WindowsMREnabled;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InterationStyle InteractionStyle;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool PhysicalHands;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool MakeControllerInvisibleOnInteraction;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool AutomaticallySetControllerTransparency;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool VibrateOnHover;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int VelocityHistorySteps;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnInitialized;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56F61C", Offset = "0x56F61C")]
		public bool EnableEditorPlayerPreview;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Mesh EditorPlayerPreview;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Mesh EditorPlayspacePreview;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool EditorPlayspaceOverride;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector2 EditorPlayspaceDefault;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56F62C", Offset = "0x56F62C")]
		[HideInInspector]
		public bool OverrideAll;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public GameObject OverrideAllLeftHand;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GameObject OverrideAllLeftHandPhysicalColliders;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public GameObject OverrideAllRightHand;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public GameObject OverrideAllRightHandPhysicalColliders;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public bool OverrideSteamVR;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public GameObject OverrideSteamVRLeftHand;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public GameObject OverrideSteamVRLeftHandPhysicalColliders;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public GameObject OverrideSteamVRRightHand;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public GameObject OverrideSteamVRRightHandPhysicalColliders;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public bool OverrideOculus;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public GameObject OverrideOculusLeftHand;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public GameObject OverrideOculusLeftHandPhysicalColliders;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public GameObject OverrideOculusRightHand;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public GameObject OverrideOculusRightHandPhysicalColliders;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56F744", Offset = "0x56F744")]
		public NVRHead Head;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public NVRHand LeftHand;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public NVRHand RightHand;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public NVRHand[] Hands;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public NVRSDKIntegrations CurrentIntegrationType;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private NVRIntegration Integration;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Dictionary<Collider, NVRHand> ColliderToHandMapping;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x56F774", Offset = "0x56F774")]
		public bool DEBUGDropFrames;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public int DEBUGSleepPerFrame;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool AutoSetFixedDeltaTime;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		public bool NotifyOnVersionUpdate;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F784", Offset = "0x56F784")]
		private static Func<NVRPlayer, bool> <>f__am$cache0;

		[Token(Token = "0x17000168")]
		public static NVRPlayer Instance
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x594904", Offset = "0x594904", VA = "0x594904")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public Vector3 PlayspaceSize
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x59CC20", Offset = "0x59CC20", VA = "0x59CC20")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x59CBA0", Offset = "0x59CBA0", VA = "0x59CBA0")]
		public NVRPlayer()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x59CE74", Offset = "0x59CE74", VA = "0x59CE74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x59D208", Offset = "0x59D208", VA = "0x59D208")]
		private void SetupIntegration(bool logOutput = true)
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x59D394", Offset = "0x59D394", VA = "0x59D394")]
		private NVRSDKIntegrations DetermineCurrentIntegration(bool logOutput = true)
		{
			return default(NVRSDKIntegrations);
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x592264", Offset = "0x592264", VA = "0x592264")]
		public void RegisterHand(NVRHand hand)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x59D5E4", Offset = "0x59D5E4", VA = "0x59D5E4")]
		public NVRHand GetHand(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x596D38", Offset = "0x596D38", VA = "0x596D38")]
		public static void DeregisterInteractable(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x59D650", Offset = "0x59D650", VA = "0x59D650")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x59D6D8", Offset = "0x59D6D8", VA = "0x59D6D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x59D80C", Offset = "0x59D80C", VA = "0x59D80C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F794", Offset = "0x56F794")]
		private static bool <get_Instance>m__0(NVRPlayer player)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000268")]
	public enum NVRSDKIntegrations
	{
		[Token(Token = "0x4000B50")]
		None,
		[Token(Token = "0x4000B51")]
		FallbackNonVR,
		[Token(Token = "0x4000B52")]
		SteamVR,
		[Token(Token = "0x4000B53")]
		Oculus,
		[Token(Token = "0x4000B54")]
		PSVR,
		[Token(Token = "0x4000B55")]
		WindowsMR
	}
	[Token(Token = "0x2000269")]
	public class NVRSlider : NVRInteractable
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F7A4", Offset = "0x56F7A4")]
		public float CurrentValue;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F7DC", Offset = "0x56F7DC")]
		public Transform StartPoint;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F814", Offset = "0x56F814")]
		public Transform EndPoint;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float AttachedPositionMagic;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform PickupTransform;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 SliderPath;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x59E114", Offset = "0x59E114", VA = "0x59E114")]
		public NVRSlider()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x59E124", Offset = "0x59E124", VA = "0x59E124", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x59E3AC", Offset = "0x59E3AC", VA = "0x59E3AC", Slot = "21")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x59E75C", Offset = "0x59E75C", VA = "0x59E75C", Slot = "11")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x59E94C", Offset = "0x59E94C", VA = "0x59E94C", Slot = "14")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x59E6B0", Offset = "0x59E6B0", VA = "0x59E6B0")]
		protected Vector3 ProjectVelocityOnPath(Vector3 velocity, Vector3 path)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x59EA34", Offset = "0x59EA34", VA = "0x59EA34")]
		public void SetValue(float newValue)
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class NVRSwitch : MonoBehaviour
	{
		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool CurrentState;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LastState;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool FixedState;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform OnButton;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer OnButtonRenderer;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform OffButton;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer OffButtonRenderer;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float ForceMagic;

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x59EE98", Offset = "0x59EE98", VA = "0x59EE98")]
		public NVRSwitch()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x59EEB8", Offset = "0x59EEB8", VA = "0x59EEB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x59F204", Offset = "0x59F204", VA = "0x59F204")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x59F4D8", Offset = "0x59F4D8", VA = "0x59F4D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x59EF18", Offset = "0x59EF18", VA = "0x59EF18")]
		private void SetRotation(bool forState)
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class NVRTeleportController : MonoBehaviour
	{
		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BeamStart;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NVRTeleporter teleporter;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int controllerIndex;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool held;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3? validTeleportPosition;

		[Token(Token = "0x1700016A")]
		private NVRHand nvrHand
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0x59F4F4", Offset = "0x59F4F4", VA = "0x59F4F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x59F4EC", Offset = "0x59F4EC", VA = "0x59F4EC")]
		public NVRTeleportController()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x59F5C4", Offset = "0x59F5C4", VA = "0x59F5C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x59F75C", Offset = "0x59F75C", VA = "0x59F75C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x5A074C", Offset = "0x5A074C", VA = "0x5A074C")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class NVRTeleporter : MonoBehaviour
	{
		[Token(Token = "0x200026D")]
		public class TeleportPreview
		{
			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LineRenderer ArcLine;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject PlaySpaceDisplay;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject InvalidPointDisplay;

			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject TeleportTargetDisplay;

			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0x5A0C10", Offset = "0x5A0C10", VA = "0x5A0C10")]
			public TeleportPreview()
			{
			}
		}

		[Token(Token = "0x20005A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F85C", Offset = "0x56F85C")]
		private sealed class <DoTunnelTeleport>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <easeInStartTime>__0;

			[Token(Token = "0x40018BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <easeInEndTime>__0;

			[Token(Token = "0x40018BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <moveTimeStart>__0;

			[Token(Token = "0x40018BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float <moveTimeEnd>__0;

			[Token(Token = "0x40018C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Vector3 <initialPosition>__0;

			[Token(Token = "0x40018C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Vector3 teleportPosition;

			[Token(Token = "0x40018C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3 <endPosition>__0;

			[Token(Token = "0x40018C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal Vector3 <lerpPosition>__1;

			[Token(Token = "0x40018C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal float <easeOutStartTime>__0;

			[Token(Token = "0x40018C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal float <easeOutEndTime>__0;

			[Token(Token = "0x40018C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal NVRTeleporter $this;

			[Token(Token = "0x40018C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal object $current;

			[Token(Token = "0x40018C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal bool $disposing;

			[Token(Token = "0x40018C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal int $PC;

			[Token(Token = "0x170004C7")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002435")]
				[Address(RVA = "0x5A223C", Offset = "0x5A223C", VA = "0x5A223C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002436")]
				[Address(RVA = "0x5A2244", Offset = "0x5A2244", VA = "0x5A2244", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002433")]
			[Address(RVA = "0x5A1BB4", Offset = "0x5A1BB4", VA = "0x5A1BB4")]
			[DebuggerHidden]
			public <DoTunnelTeleport>c__Iterator0()
			{
			}

			[Token(Token = "0x6002434")]
			[Address(RVA = "0x5A1BE8", Offset = "0x5A1BE8", VA = "0x5A1BE8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002437")]
			[Address(RVA = "0x5A224C", Offset = "0x5A224C", VA = "0x5A224C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002438")]
			[Address(RVA = "0x5A2260", Offset = "0x5A2260", VA = "0x5A2260", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool TunnelTeleport;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TunnelOverTime;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VignettePower;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float VignetteEaseInTime;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float VignetteEaseOutTime;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer ArcRendererDisplay;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject PlaySpaceDisplay;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject InvalidPointDisplay;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject TargetDisplay;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LimitToHorizontal;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float LimitSensitivity;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public NVRButtons TeleportButton;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public LayerMask TeleportSurfaceMask;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LayerMask TeleportBlockMask;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private LayerMask fullMask;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource teleportAudioSource;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine teleportRoutine;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float ArcStrength;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float ArcMaxLength;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float SampleFrequency;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float curveMod;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float acceleration;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float arcLineDisplayOffset;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float playspaceVerticalOffset;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<int, TeleportPreview> teleportPreviews;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NVRPlayer player;

		[Token(Token = "0x1700016B")]
		private int samplePoints
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0x5A0840", Offset = "0x5A0840", VA = "0x5A0840")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x5A07EC", Offset = "0x5A07EC", VA = "0x5A07EC")]
		public NVRTeleporter()
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x5A08B8", Offset = "0x5A08B8", VA = "0x5A08B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x5A0970", Offset = "0x5A0970", VA = "0x5A0970")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x5A0B54", Offset = "0x5A0B54", VA = "0x5A0B54")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x59F920", Offset = "0x59F920", VA = "0x59F920")]
		public Vector3? UpdateArcTeleport(Transform origin, int controllerIndex)
		{
			return null;
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x5A0480", Offset = "0x5A0480", VA = "0x5A0480")]
		public void HideArcTeleport(int controllerIndex)
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x5A0C18", Offset = "0x5A0C18", VA = "0x5A0C18")]
		private bool CheckTeleportCurve(Vector3 startingPoint, Vector3 initialVelocity, Vector3 initialAcceleration, out List<Vector3> points, out bool hit, out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x5A065C", Offset = "0x5A065C", VA = "0x5A065C")]
		public void TeleportPlayer(Vector3 teleportPosition)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x5A10D4", Offset = "0x5A10D4", VA = "0x5A10D4")]
		private void MovePosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x5A1598", Offset = "0x5A1598", VA = "0x5A1598")]
		private Vector3 GetPlayerPositionFromCameraPosition(Vector3 newCameraFloor)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x5A1784", Offset = "0x5A1784", VA = "0x5A1784")]
		private void MovePlayer(Vector3 newPlayerPosition)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x5A102C", Offset = "0x5A102C", VA = "0x5A102C")]
		[DebuggerHidden]
		private IEnumerator DoTunnelTeleport(Vector3 teleportPosition)
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x5A0FB4", Offset = "0x5A0FB4", VA = "0x5A0FB4")]
		private Vector3 CurveDerivitive(Vector3 velocity, Vector3 acceleration, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x5A1BBC", Offset = "0x5A1BBC", VA = "0x5A1BBC")]
		private float CurveDerivitive(float velocity, float acceleration, float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x5A0FD0", Offset = "0x5A0FD0", VA = "0x5A0FD0")]
		private Vector3 Curve(Vector3 point, Vector3 velocity, Vector3 acceleration, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x5A1BC8", Offset = "0x5A1BC8", VA = "0x5A1BC8")]
		private float Curve(float point, float velocity, float acceleration, float time)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200026E")]
	public class NVRUIIgnoreRaycast : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x5A22C4", Offset = "0x5A22C4", VA = "0x5A22C4")]
		public NVRUIIgnoreRaycast()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x5A22CC", Offset = "0x5A22CC", VA = "0x5A22CC", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200026F")]
	public class NVRVignette : MonoBehaviour
	{
		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform vignetteOverlay;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 originScale;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NVRVignette instance;

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x5A22D4", Offset = "0x5A22D4", VA = "0x5A22D4")]
		public NVRVignette()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x5A22DC", Offset = "0x5A22DC", VA = "0x5A22DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x5A20EC", Offset = "0x5A20EC", VA = "0x5A20EC")]
		public void SetAmount(float newFeather)
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class NVROculusInputDevice : NVRInputDevice
	{
		[Token(Token = "0x20005A2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56F8DC", Offset = "0x56F8DC")]
		private sealed class <DoHapticPulse>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal ushort durationMicroSec;

			[Token(Token = "0x40018CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <endTime>__0;

			[Token(Token = "0x40018CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal NVROculusInputDevice $this;

			[Token(Token = "0x40018CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x40018CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40018CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004C9")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600243B")]
				[Address(RVA = "0x59B94C", Offset = "0x59B94C", VA = "0x59B94C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600243C")]
				[Address(RVA = "0x59B954", Offset = "0x59B954", VA = "0x59B954", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002439")]
			[Address(RVA = "0x59AEBC", Offset = "0x59AEBC", VA = "0x59AEBC")]
			[DebuggerHidden]
			public <DoHapticPulse>c__Iterator0()
			{
			}

			[Token(Token = "0x600243A")]
			[Address(RVA = "0x59B7D8", Offset = "0x59B7D8", VA = "0x59B7D8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600243D")]
			[Address(RVA = "0x59B95C", Offset = "0x59B95C", VA = "0x59B95C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600243E")]
			[Address(RVA = "0x59B970", Offset = "0x59B970", VA = "0x59B970", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject RenderModel;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRInput.Controller Controller;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<NVRButtons, OVRInput.Button> ButtonMapping;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<NVRButtons, OVRInput.Touch> TouchMapping;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<NVRButtons, OVRInput.NearTouch> NearTouchMapping;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<NVRButtons, OVRInput.Axis1D> TriggerMapping;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<NVRButtons, OVRInput.Axis2D> StickMapping;

		[Token(Token = "0x1700016C")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0x59AEC4", Offset = "0x59AEC4", VA = "0x59AEC4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x599CD0", Offset = "0x599CD0", VA = "0x599CD0")]
		public NVROculusInputDevice()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x599E88", Offset = "0x599E88", VA = "0x599E88", Slot = "4")]
		public override void Initialize(NVRHand hand)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x599F4C", Offset = "0x599F4C", VA = "0x599F4C", Slot = "23")]
		protected virtual void SetupButtonMapping()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x59A2B8", Offset = "0x59A2B8", VA = "0x59A2B8")]
		private OVRInput.Button GetButtonMap(NVRButtons button)
		{
			return default(OVRInput.Button);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x59A434", Offset = "0x59A434", VA = "0x59A434")]
		private OVRInput.Touch GetTouchMap(NVRButtons button)
		{
			return default(OVRInput.Touch);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x59A5B0", Offset = "0x59A5B0", VA = "0x59A5B0")]
		private OVRInput.NearTouch GetNearTouchMap(NVRButtons button)
		{
			return default(OVRInput.NearTouch);
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x59A658", Offset = "0x59A658", VA = "0x59A658")]
		private OVRInput.Axis1D GetTriggerMap(NVRButtons button)
		{
			return default(OVRInput.Axis1D);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x59A700", Offset = "0x59A700", VA = "0x59A700")]
		private OVRInput.Axis2D GetStickMap(NVRButtons button)
		{
			return default(OVRInput.Axis2D);
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x59A7A8", Offset = "0x59A7A8", VA = "0x59A7A8", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x59A83C", Offset = "0x59A83C", VA = "0x59A83C", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x59A8D0", Offset = "0x59A8D0", VA = "0x59A8D0", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x59A964", Offset = "0x59A964", VA = "0x59A964", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x59A9F8", Offset = "0x59A9F8", VA = "0x59A9F8", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x59AA8C", Offset = "0x59AA8C", VA = "0x59AA8C", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x59AB20", Offset = "0x59AB20", VA = "0x59AB20", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x59ABB4", Offset = "0x59ABB4", VA = "0x59ABB4", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x59AC48", Offset = "0x59AC48", VA = "0x59AC48", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x59ACDC", Offset = "0x59ACDC", VA = "0x59ACDC", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x59AD70", Offset = "0x59AD70", VA = "0x59AD70", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x59AE04", Offset = "0x59AE04", VA = "0x59AE04", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x59AE30", Offset = "0x59AE30", VA = "0x59AE30")]
		[DebuggerHidden]
		private IEnumerator DoHapticPulse(ushort durationMicroSec)
		{
			return null;
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x59AF34", Offset = "0x59AF34", VA = "0x59AF34", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x59B248", Offset = "0x59B248", VA = "0x59B248", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x59B250", Offset = "0x59B250", VA = "0x59B250", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x59B348", Offset = "0x59B348", VA = "0x59B348", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x59B6B4", Offset = "0x59B6B4", VA = "0x59B6B4", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}
	}
	[Token(Token = "0x2000271")]
	public class NVROculusIntegration : NVRIntegration
	{
		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OVRBoundary boundary;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRDisplay display;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRTracker tracker;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 PlayspaceBounds;

		[Token(Token = "0x1700016D")]
		private OVRBoundary Boundary
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x59BA50", Offset = "0x59BA50", VA = "0x59BA50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		private OVRDisplay Display
		{
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x59BABC", Offset = "0x59BABC", VA = "0x59BABC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		private OVRTracker Tracker
		{
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x59BB28", Offset = "0x59BB28", VA = "0x59BB28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x59B9D4", Offset = "0x59B9D4", VA = "0x59B9D4")]
		public NVROculusIntegration()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x59BB94", Offset = "0x59BB94", VA = "0x59BB94", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x59BDC8", Offset = "0x59BDC8", VA = "0x59BDC8", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x59BE40", Offset = "0x59BE40", VA = "0x59BE40", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000272")]
	public class NVRPSVRInputDevice : NVRInputDevice
	{
		[Token(Token = "0x17000170")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x59D8E0", Offset = "0x59D8E0", VA = "0x59D8E0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x59D8D8", Offset = "0x59D8D8", VA = "0x59D8D8")]
		public NVRPSVRInputDevice()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x59D944", Offset = "0x59D944", VA = "0x59D944", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x59D9A8", Offset = "0x59D9A8", VA = "0x59D9A8", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x59DA0C", Offset = "0x59DA0C", VA = "0x59DA0C", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x59DA70", Offset = "0x59DA70", VA = "0x59DA70", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x59DAD4", Offset = "0x59DAD4", VA = "0x59DAD4", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x59DB38", Offset = "0x59DB38", VA = "0x59DB38", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x59DB9C", Offset = "0x59DB9C", VA = "0x59DB9C", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x59DC00", Offset = "0x59DC00", VA = "0x59DC00", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x59DC64", Offset = "0x59DC64", VA = "0x59DC64", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x59DCC8", Offset = "0x59DCC8", VA = "0x59DCC8", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x59DD2C", Offset = "0x59DD2C", VA = "0x59DD2C", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x59DD90", Offset = "0x59DD90", VA = "0x59DD90", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x59DDF4", Offset = "0x59DDF4", VA = "0x59DDF4", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x59DE58", Offset = "0x59DE58", VA = "0x59DE58", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x59DEBC", Offset = "0x59DEBC", VA = "0x59DEBC", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x59DF20", Offset = "0x59DF20", VA = "0x59DF20", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x59DF84", Offset = "0x59DF84", VA = "0x59DF84", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class NVRPSVRIntegration : NVRIntegration
	{
		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x59D5D4", Offset = "0x59D5D4", VA = "0x59D5D4")]
		public NVRPSVRIntegration()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x59DFE8", Offset = "0x59DFE8", VA = "0x59DFE8", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x59E04C", Offset = "0x59E04C", VA = "0x59E04C", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x59E0B0", Offset = "0x59E0B0", VA = "0x59E0B0", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000274")]
	public class NVRSteamVRInputDevice : NVRInputDevice
	{
		[Token(Token = "0x17000171")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x59EB78", Offset = "0x59EB78", VA = "0x59EB78", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x59EB70", Offset = "0x59EB70", VA = "0x59EB70")]
		public NVRSteamVRInputDevice()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x59EC00", Offset = "0x59EC00", VA = "0x59EC00", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x59EC18", Offset = "0x59EC18", VA = "0x59EC18", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x59EC80", Offset = "0x59EC80", VA = "0x59EC80", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x59ECEC", Offset = "0x59ECEC", VA = "0x59ECEC", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x59ED04", Offset = "0x59ED04", VA = "0x59ED04", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x59ED1C", Offset = "0x59ED1C", VA = "0x59ED1C", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x59ED34", Offset = "0x59ED34", VA = "0x59ED34", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x59ED4C", Offset = "0x59ED4C", VA = "0x59ED4C", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x59ED64", Offset = "0x59ED64", VA = "0x59ED64", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x59ED7C", Offset = "0x59ED7C", VA = "0x59ED7C", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x59ED94", Offset = "0x59ED94", VA = "0x59ED94", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x59EDAC", Offset = "0x59EDAC", VA = "0x59EDAC", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x59EDC4", Offset = "0x59EDC4", VA = "0x59EDC4", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x59EDDC", Offset = "0x59EDDC", VA = "0x59EDDC", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x59EDF4", Offset = "0x59EDF4", VA = "0x59EDF4", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x59EE0C", Offset = "0x59EE0C", VA = "0x59EE0C", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x59EE24", Offset = "0x59EE24", VA = "0x59EE24", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x59EB90", Offset = "0x59EB90", VA = "0x59EB90")]
		private void PrintNotEnabledError()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class NVRSteamVRIntegration : NVRIntegration
	{
		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x59CDA8", Offset = "0x59CDA8", VA = "0x59CDA8")]
		public NVRSteamVRIntegration()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x59EE28", Offset = "0x59EE28", VA = "0x59EE28", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x59EE2C", Offset = "0x59EE2C", VA = "0x59EE2C", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x59EE90", Offset = "0x59EE90", VA = "0x59EE90", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000276")]
	public class NVRWindowsMRInput : NVRInputDevice
	{
		[Token(Token = "0x17000172")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000F16")]
			[Address(RVA = "0x5A2368", Offset = "0x5A2368", VA = "0x5A2368", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x5A2360", Offset = "0x5A2360", VA = "0x5A2360")]
		public NVRWindowsMRInput()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x5A23F0", Offset = "0x5A23F0", VA = "0x5A23F0", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x5A2408", Offset = "0x5A2408", VA = "0x5A2408", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x5A2470", Offset = "0x5A2470", VA = "0x5A2470", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x5A24DC", Offset = "0x5A24DC", VA = "0x5A24DC", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x5A24F4", Offset = "0x5A24F4", VA = "0x5A24F4", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x5A250C", Offset = "0x5A250C", VA = "0x5A250C", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x5A2524", Offset = "0x5A2524", VA = "0x5A2524", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x5A253C", Offset = "0x5A253C", VA = "0x5A253C", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x5A2554", Offset = "0x5A2554", VA = "0x5A2554", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x5A256C", Offset = "0x5A256C", VA = "0x5A256C", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x5A2584", Offset = "0x5A2584", VA = "0x5A2584", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x5A259C", Offset = "0x5A259C", VA = "0x5A259C", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x5A25B4", Offset = "0x5A25B4", VA = "0x5A25B4", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x5A25CC", Offset = "0x5A25CC", VA = "0x5A25CC", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x5A25E4", Offset = "0x5A25E4", VA = "0x5A25E4", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x5A25FC", Offset = "0x5A25FC", VA = "0x5A25FC", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x5A2614", Offset = "0x5A2614", VA = "0x5A2614", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x5A2380", Offset = "0x5A2380", VA = "0x5A2380")]
		private void PrintNotEnabledError()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class NVRWindowsMRIntegration : NVRIntegration
	{
		[Token(Token = "0x2000278")]
		public enum DisplayType
		{
			[Token(Token = "0x4000BA2")]
			Opaque,
			[Token(Token = "0x4000BA3")]
			Transparent
		}

		[Token(Token = "0x2000279")]
		public delegate void DisplayEventHandler(DisplayType displayType);

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F93C", Offset = "0x56F93C")]
		public float NearClipPlane_OpaqueDisplay;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F974", Offset = "0x56F974")]
		public CameraClearFlags CameraClearFlags_OpaqueDisplay;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F9AC", Offset = "0x56F9AC")]
		public Color BackgroundColor_OpaqueDisplay;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56F9E4", Offset = "0x56F9E4")]
		public int OpaqueQualityLevel;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56FA1C", Offset = "0x56FA1C")]
		public float NearClipPlane_TransparentDisplay;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56FA54", Offset = "0x56FA54")]
		public CameraClearFlags CameraClearFlags_TransparentDisplay;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56FA8C", Offset = "0x56FA8C")]
		public Color BackgroundColor_TransparentDisplay;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x56FAC4", Offset = "0x56FAC4")]
		public int HoloLensQualityLevel;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 PlayspaceBounds;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56FAFC", Offset = "0x56FAFC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x56FAFC", Offset = "0x56FAFC")]
		private DisplayType <CurrentDisplayType>k__BackingField;

		[Token(Token = "0x17000173")]
		public DisplayType CurrentDisplayType
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0x5A2AEC", Offset = "0x5A2AEC", VA = "0x5A2AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56FB74", Offset = "0x56FB74")]
			get
			{
				return default(DisplayType);
			}
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0x5A2724", Offset = "0x5A2724", VA = "0x5A2724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x56FB84", Offset = "0x56FB84")]
			private set
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event DisplayEventHandler OnDisplayDetected
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0x5A2AF4", Offset = "0x5A2AF4", VA = "0x5A2AF4")]
			add
			{
			}
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x5A2BDC", Offset = "0x5A2BDC", VA = "0x5A2BDC")]
			remove
			{
			}
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x59CDB0", Offset = "0x59CDB0", VA = "0x59CDB0")]
		public NVRWindowsMRIntegration()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x5A2618", Offset = "0x5A2618", VA = "0x5A2618", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x5A2A58", Offset = "0x5A2A58", VA = "0x5A2A58", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x5A2A9C", Offset = "0x5A2A9C", VA = "0x5A2A9C", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x5A272C", Offset = "0x5A272C", VA = "0x5A272C")]
		public void ApplySettingsForOpaqueDisplay(Camera cam)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x5A2CD4", Offset = "0x5A2CD4", VA = "0x5A2CD4")]
		public void ApplySettingsForTransparentDisplay(Camera cam)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x5A2CC4", Offset = "0x5A2CC4", VA = "0x5A2CC4")]
		private static void SetQuality(int level)
		{
		}
	}
}
namespace Oculus.Platform.Samples.EntitlementCheck
{
	[Token(Token = "0x200027A")]
	public class EntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool exitAppOnFailure;

		[Token(Token = "0x14000006")]
		public static event Action UserFailedEntitlementCheck
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x741600", Offset = "0x741600", VA = "0x741600")]
			add
			{
			}
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0x741704", Offset = "0x741704", VA = "0x741704")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public static event Action UserPassedEntitlementCheck
		{
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0x741808", Offset = "0x741808", VA = "0x741808")]
			add
			{
			}
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0x74190C", Offset = "0x74190C", VA = "0x74190C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x7415F0", Offset = "0x7415F0", VA = "0x7415F0")]
		public EntitlementCheck()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x741A10", Offset = "0x741A10", VA = "0x741A10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x741E14", Offset = "0x741E14", VA = "0x741E14")]
		private void EntitlementCheckCallback(Message msg)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x741B70", Offset = "0x741B70", VA = "0x741B70")]
		private void HandleEntitlementCheckResult(bool result)
		{
		}
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x200027B")]
	public class AbuseReportOptions
	{
		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x5A4A08", Offset = "0x5A4A08", VA = "0x5A4A08")]
		public AbuseReportOptions()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x5A4B04", Offset = "0x5A4B04", VA = "0x5A4B04")]
		public void SetPreventPeopleChooser(bool value)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x5A4C24", Offset = "0x5A4C24", VA = "0x5A4C24")]
		public void SetReportType(AbuseReportType value)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x5A4D44", Offset = "0x5A4D44", VA = "0x5A4D44")]
		public static explicit operator IntPtr(AbuseReportOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x5A4D94", Offset = "0x5A4D94", VA = "0x5A4D94", Slot = "1")]
		~AbuseReportOptions()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public enum AbuseReportType
	{
		[Token(Token = "0x4000BA9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FC0C", Offset = "0x56FC0C")]
		Unknown,
		[Token(Token = "0x4000BAA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FC44", Offset = "0x56FC44")]
		Object,
		[Token(Token = "0x4000BAB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FC7C", Offset = "0x56FC7C")]
		User
	}
	[Token(Token = "0x200027D")]
	public enum AchievementType
	{
		[Token(Token = "0x4000BAD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FCB4", Offset = "0x56FCB4")]
		Unknown,
		[Token(Token = "0x4000BAE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FCEC", Offset = "0x56FCEC")]
		Simple,
		[Token(Token = "0x4000BAF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FD24", Offset = "0x56FD24")]
		Bitfield,
		[Token(Token = "0x4000BB0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FD5C", Offset = "0x56FD5C")]
		Count
	}
	[Token(Token = "0x200027E")]
	public class AndroidPlatform
	{
		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x5A5E74", Offset = "0x5A5E74", VA = "0x5A5E74")]
		public AndroidPlatform()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x5A5E7C", Offset = "0x5A5E7C", VA = "0x5A5E7C")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x5A6008", Offset = "0x5A6008", VA = "0x5A6008")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}
	}
	[Token(Token = "0x200027F")]
	public class ApplicationOptions
	{
		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x5A6638", Offset = "0x5A6638", VA = "0x5A6638")]
		public ApplicationOptions()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x5A6734", Offset = "0x5A6734", VA = "0x5A6734")]
		public void SetDeeplinkMessage(string value)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x5A642C", Offset = "0x5A642C", VA = "0x5A642C")]
		public static explicit operator IntPtr(ApplicationOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x5A685C", Offset = "0x5A685C", VA = "0x5A685C", Slot = "1")]
		~ApplicationOptions()
		{
		}
	}
}
[Token(Token = "0x2000280")]
public class BufferedAudioStream
{
	[Token(Token = "0x4000BB2")]
	private const bool VerboseLogging = false;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioSource audio;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] audioBuffer;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int writePos;

	[Token(Token = "0x4000BB6")]
	private const float bufferLengthSeconds = 0.25f;

	[Token(Token = "0x4000BB7")]
	private const int sampleRate = 48000;

	[Token(Token = "0x4000BB8")]
	private const int bufferSize = 12000;

	[Token(Token = "0x4000BB9")]
	private const float playbackDelayTimeSeconds = 0.05f;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float playbackDelayRemaining;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float remainingBufferTime;

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x69F20C", Offset = "0x69F20C", VA = "0x69F20C")]
	public BufferedAudioStream(AudioSource audio)
	{
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x69F364", Offset = "0x69F364", VA = "0x69F364")]
	public void Update()
	{
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x69F308", Offset = "0x69F308", VA = "0x69F308")]
	private void Stop()
	{
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x69F5A4", Offset = "0x69F5A4", VA = "0x69F5A4")]
	public void AddData(float[] samples)
	{
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x2000281")]
	public static class Callback
	{
		[Token(Token = "0x2000282")]
		private class RequestCallback
		{
			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Message.Callback messageCallback;

			[Token(Token = "0x6000F59")]
			[Address(RVA = "0x5A8450", Offset = "0x5A8450", VA = "0x5A8450")]
			public RequestCallback()
			{
			}

			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0x5A7DB8", Offset = "0x5A7DB8", VA = "0x5A7DB8")]
			public RequestCallback(Message.Callback callback)
			{
			}

			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0x5A8458", Offset = "0x5A8458", VA = "0x5A8458", Slot = "4")]
			public virtual void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x2000283")]
		private sealed class RequestCallback<T> : RequestCallback
		{
			[Token(Token = "0x4000BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Message<T>.Callback callback;

			[Token(Token = "0x6000F5C")]
			public RequestCallback(Message<T>.Callback callback)
			{
			}

			[Token(Token = "0x6000F5D")]
			public override void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<ulong, RequestCallback> requestIDsToCallbacks;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Message.MessageType, RequestCallback> notificationCallbacks;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool hasRegisteredRoomInviteNotificationHandler;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<Message> pendingRoomInviteNotifications;

		[Token(Token = "0x6000F50")]
		internal static void SetNotificationCallback<T>(Message.MessageType type, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x5A7CBC", Offset = "0x5A7CBC", VA = "0x5A7CBC")]
		internal static void SetNotificationCallback(Message.MessageType type, Message.Callback callback)
		{
		}

		[Token(Token = "0x6000F52")]
		internal static void OnComplete<T>(Request<T> request, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x5A7DE4", Offset = "0x5A7DE4", VA = "0x5A7DE4")]
		internal static void OnComplete(Request request, Message.Callback callback)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x5A7EB8", Offset = "0x5A7EB8", VA = "0x5A7EB8")]
		internal static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x5A8144", Offset = "0x5A8144", VA = "0x5A8144")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x5A81E4", Offset = "0x5A81E4", VA = "0x5A81E4")]
		private static void FlushRoomInviteNotificationQueue()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x5A7F44", Offset = "0x5A7F44", VA = "0x5A7F44")]
		private static void HandleMessage(Message msg)
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class CallbackRunner : MonoBehaviour
	{
		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsPersistantBetweenSceneLoads;

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x5A846C", Offset = "0x5A846C", VA = "0x5A846C")]
		public CallbackRunner()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x5A847C", Offset = "0x5A847C", VA = "0x5A847C")]
		private static extern void ovr_UnityResetTestPlatform();

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x5A8504", Offset = "0x5A8504", VA = "0x5A8504")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x5A8614", Offset = "0x5A8614", VA = "0x5A8614")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x5A8624", Offset = "0x5A8624", VA = "0x5A8624")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class CAPI
	{
		[Token(Token = "0x2000286")]
		public struct ovrKeyValuePair
		{
			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private KeyValuePairType valueType_;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string stringValue_;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int intValue_;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double doubleValue_;

			[Token(Token = "0x6001277")]
			[Address(RVA = "0x72C758", Offset = "0x72C758", VA = "0x72C758")]
			public ovrKeyValuePair(string key, string value)
			{
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0x72C78C", Offset = "0x72C78C", VA = "0x72C78C")]
			public ovrKeyValuePair(string key, int value)
			{
			}

			[Token(Token = "0x6001279")]
			[Address(RVA = "0x72C7C4", Offset = "0x72C7C4", VA = "0x72C7C4")]
			public ovrKeyValuePair(string key, double value)
			{
			}
		}

		[Token(Token = "0x2000287")]
		public struct ovrMatchmakingCriterion
		{
			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MatchmakingCriterionImportance importance_;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IntPtr parameterArray;

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint parameterArrayCount;

			[Token(Token = "0x600127A")]
			[Address(RVA = "0x72C890", Offset = "0x72C890", VA = "0x72C890")]
			public ovrMatchmakingCriterion(string key, MatchmakingCriterionImportance importance)
			{
			}
		}

		[Token(Token = "0x2000288")]
		public struct ovrMatchmakingCustomQueryData
		{
			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr dataArray;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public uint dataArrayCount;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IntPtr criterionArray;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint criterionArrayCount;
		}

		[Token(Token = "0x2000289")]
		public struct OculusInitParams
		{
			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int sType;

			[Token(Token = "0x4000BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string email;

			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string password;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ulong appId;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string uriPrefixOverride;
		}

		[Token(Token = "0x200028A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x56FD94", Offset = "0x56FD94")]
		public delegate void FilterCallback([In][Out] short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels);

		[Token(Token = "0x4000BC3")]
		public const string DLL_NAME = "ovrplatformloader";

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UTF8Encoding nativeStringEncoding;

		[Token(Token = "0x4000BC5")]
		public const int VoipFilterBufferSize = 480;

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x5A8628", Offset = "0x5A8628", VA = "0x5A8628")]
		public CAPI()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x5A8630", Offset = "0x5A8630", VA = "0x5A8630")]
		public static IntPtr ArrayOfStructsToIntPtr(Array ar)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x5A8804", Offset = "0x5A8804", VA = "0x5A8804")]
		public static ovrKeyValuePair[] DictionaryToOVRKeyValuePairs(Dictionary<string, object> dict)
		{
			return null;
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x5A8DF8", Offset = "0x5A8DF8", VA = "0x5A8DF8")]
		public static byte[] IntPtrToByteArray(IntPtr data, ulong size)
		{
			return null;
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x5A8ED0", Offset = "0x5A8ED0", VA = "0x5A8ED0")]
		public static Dictionary<string, string> DataStoreFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x5A9204", Offset = "0x5A9204", VA = "0x5A9204")]
		public static string StringFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x5A9334", Offset = "0x5A9334", VA = "0x5A9334")]
		public static int GetNativeStringLengthNotIncludingNullTerminator(IntPtr pointer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x5A93BC", Offset = "0x5A93BC", VA = "0x5A93BC")]
		public static DateTime DateTimeFromNative(ulong seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x5A9430", Offset = "0x5A9430", VA = "0x5A9430")]
		public static byte[] BlobFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x5A9530", Offset = "0x5A9530", VA = "0x5A9530")]
		public static byte[] FiledataFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x5A95E4", Offset = "0x5A95E4", VA = "0x5A95E4")]
		public static IntPtr StringToNative(string s)
		{
			return default(IntPtr);
		}

		[PreserveSig]
		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x5A5F54", Offset = "0x5A5F54", VA = "0x5A5F54")]
		public static extern bool ovr_UnityInitWrapper(string appId);

		[PreserveSig]
		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x5A9784", Offset = "0x5A9784", VA = "0x5A9784")]
		public static extern void ovr_UnityInitGlobals(IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x5A6118", Offset = "0x5A6118", VA = "0x5A6118")]
		public static extern ulong ovr_UnityInitWrapperAsynchronous(string appId);

		[PreserveSig]
		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x5A981C", Offset = "0x5A981C", VA = "0x5A981C")]
		public static extern bool ovr_UnityInitWrapperStandalone(string accessToken, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x5A98E0", Offset = "0x5A98E0", VA = "0x5A98E0")]
		public static extern ulong ovr_Platform_InitializeStandaloneOculus(ref OculusInitParams init);

		[PreserveSig]
		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x5A99D0", Offset = "0x5A99D0", VA = "0x5A99D0")]
		public static extern ulong ovr_PlatformInitializeWithAccessToken(ulong appId, string accessToken);

		[PreserveSig]
		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x5A9A94", Offset = "0x5A9A94", VA = "0x5A9A94")]
		public static extern bool ovr_UnityInitWrapperWindows(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x5A9B58", Offset = "0x5A9B58", VA = "0x5A9B58")]
		public static extern ulong ovr_UnityInitWrapperWindowsAsynchronous(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x5A9C18", Offset = "0x5A9C18", VA = "0x5A9C18")]
		public static extern bool ovr_SetDeveloperAccessToken(string accessToken);

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x5A9CCC", Offset = "0x5A9CCC", VA = "0x5A9CCC")]
		public static string ovr_GetLoggedInUserLocale()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x5A9D30", Offset = "0x5A9D30", VA = "0x5A9D30")]
		private static extern IntPtr ovr_GetLoggedInUserLocale_Native();

		[PreserveSig]
		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x5A9DB8", Offset = "0x5A9DB8", VA = "0x5A9DB8")]
		public static extern IntPtr ovr_PopMessage();

		[PreserveSig]
		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x5A9E40", Offset = "0x5A9E40", VA = "0x5A9E40")]
		public static extern void ovr_FreeMessage(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x5A9ED8", Offset = "0x5A9ED8", VA = "0x5A9ED8")]
		public static extern uint ovr_NetworkingPeer_GetSendPolicy(IntPtr networkingPeer);

		[PreserveSig]
		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x5A9F70", Offset = "0x5A9F70", VA = "0x5A9F70")]
		public static extern IntPtr ovr_Voip_CreateEncoder();

		[PreserveSig]
		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x5A9FF8", Offset = "0x5A9FF8", VA = "0x5A9FF8")]
		public static extern void ovr_Voip_DestroyEncoder(IntPtr encoder);

		[PreserveSig]
		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x5AA090", Offset = "0x5AA090", VA = "0x5AA090")]
		public static extern IntPtr ovr_Voip_CreateDecoder();

		[PreserveSig]
		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x5AA118", Offset = "0x5AA118", VA = "0x5AA118")]
		public static extern void ovr_Voip_DestroyDecoder(IntPtr decoder);

		[PreserveSig]
		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x5AA1B0", Offset = "0x5AA1B0", VA = "0x5AA1B0")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, ulong compressedSize);

		[PreserveSig]
		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x5AA268", Offset = "0x5AA268", VA = "0x5AA268")]
		public static extern IntPtr ovr_Microphone_Create();

		[PreserveSig]
		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x5AA2F0", Offset = "0x5AA2F0", VA = "0x5AA2F0")]
		public static extern void ovr_Microphone_Destroy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x5AA388", Offset = "0x5AA388", VA = "0x5AA388")]
		public static extern void ovr_Voip_SetSystemVoipPassthrough(bool passthrough);

		[PreserveSig]
		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x5AA420", Offset = "0x5AA420", VA = "0x5AA420")]
		public static extern void ovr_Voip_SetSystemVoipMicrophoneMuted(VoipMuteState muted);

		[PreserveSig]
		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x5AA4B8", Offset = "0x5AA4B8", VA = "0x5AA4B8")]
		public static extern void ovr_UnityResetTestPlatform();

		[PreserveSig]
		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x5A5C54", Offset = "0x5A5C54", VA = "0x5A5C54")]
		public static extern ulong ovr_HTTP_GetWithMessageType(string url, int messageType);

		[PreserveSig]
		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x5AA540", Offset = "0x5AA540", VA = "0x5AA540")]
		public static extern void ovr_CrashApplication();

		[PreserveSig]
		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x5AA5C8", Offset = "0x5AA5C8", VA = "0x5AA5C8")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallback(FilterCallback cb);

		[PreserveSig]
		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x5AA664", Offset = "0x5AA664", VA = "0x5AA664")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallbackWithFixedSizeBuffer(FilterCallback cb, UIntPtr bufferSizeElements);

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x5AA710", Offset = "0x5AA710", VA = "0x5AA710")]
		public static void LogNewEvent(string eventName, Dictionary<string, string> values)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x5AAA68", Offset = "0x5AAA68", VA = "0x5AAA68")]
		public static extern void ovr_Log_NewEvent(IntPtr eventName, IntPtr[] values, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x5A65B0", Offset = "0x5A65B0", VA = "0x5A65B0")]
		public static extern IntPtr ovr_ApplicationLifecycle_GetLaunchDetails();

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x5AAB20", Offset = "0x5AAB20", VA = "0x5AAB20")]
		public static ulong ovr_HTTP_StartTransfer(string url, ovrKeyValuePair[] headers)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x5AAC1C", Offset = "0x5AAC1C", VA = "0x5AAC1C")]
		private static extern ulong ovr_HTTP_StartTransfer_Native(IntPtr url, ovrKeyValuePair[] headers, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x5AAD88", Offset = "0x5AAD88", VA = "0x5AAD88")]
		public static extern bool ovr_HTTP_Write(ulong transferId, byte[] bytes, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x5AAE48", Offset = "0x5AAE48", VA = "0x5AAE48")]
		public static extern void ovr_HTTP_WriteEOM(ulong transferId);

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x5AAEDC", Offset = "0x5AAEDC", VA = "0x5AAEDC")]
		public static string ovr_Message_GetStringForJavascript(IntPtr message)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x5AAF48", Offset = "0x5AAF48", VA = "0x5AAF48")]
		private static extern IntPtr ovr_Message_GetStringForJavascript_Native(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x5AAFE0", Offset = "0x5AAFE0", VA = "0x5AAFE0")]
		public static extern void ovr_Net_Accept(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x5AB078", Offset = "0x5AB078", VA = "0x5AB078")]
		public static extern bool ovr_Net_AcceptForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x5AB108", Offset = "0x5AB108", VA = "0x5AB108")]
		public static extern void ovr_Net_Close(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x5AB1A0", Offset = "0x5AB1A0", VA = "0x5AB1A0")]
		public static extern void ovr_Net_CloseForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x5AB228", Offset = "0x5AB228", VA = "0x5AB228")]
		public static extern void ovr_Net_Connect(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x5AB2C0", Offset = "0x5AB2C0", VA = "0x5AB2C0")]
		public static extern bool ovr_Net_IsConnected(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x5AB360", Offset = "0x5AB360", VA = "0x5AB360")]
		public static extern ulong ovr_Net_Ping(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x5AB3F8", Offset = "0x5AB3F8", VA = "0x5AB3F8")]
		public static extern IntPtr ovr_Net_ReadPacket();

		[PreserveSig]
		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x5AB480", Offset = "0x5AB480", VA = "0x5AB480")]
		public static extern bool ovr_Net_SendPacket(ulong userID, UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x5AB550", Offset = "0x5AB550", VA = "0x5AB550")]
		public static extern bool ovr_Net_SendPacketToCurrentRoom(UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x5AB610", Offset = "0x5AB610", VA = "0x5AB610")]
		public static extern int ovr_Party_PluginGetSharedMemHandle();

		[PreserveSig]
		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x5AB698", Offset = "0x5AB698", VA = "0x5AB698")]
		public static extern VoipMuteState ovr_Party_PluginGetVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x5AB720", Offset = "0x5AB720", VA = "0x5AB720")]
		public static extern bool ovr_Party_PluginGetVoipPassthrough();

		[PreserveSig]
		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x5AB7B0", Offset = "0x5AB7B0", VA = "0x5AB7B0")]
		public static extern SystemVoipStatus ovr_Party_PluginGetVoipStatus();

		[PreserveSig]
		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x5AB838", Offset = "0x5AB838", VA = "0x5AB838")]
		public static extern void ovr_Voip_Accept(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x5AB8D0", Offset = "0x5AB8D0", VA = "0x5AB8D0")]
		public static extern VoipDtxState ovr_Voip_GetIsConnectionUsingDtx(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x5AB968", Offset = "0x5AB968", VA = "0x5AB968")]
		public static extern VoipBitrate ovr_Voip_GetLocalBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x5ABA00", Offset = "0x5ABA00", VA = "0x5ABA00")]
		public static extern UIntPtr ovr_Voip_GetOutputBufferMaxSize();

		[PreserveSig]
		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x5ABA88", Offset = "0x5ABA88", VA = "0x5ABA88")]
		public static extern UIntPtr ovr_Voip_GetPCM(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x5ABB40", Offset = "0x5ABB40", VA = "0x5ABB40")]
		public static extern UIntPtr ovr_Voip_GetPCMFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x5ABBF8", Offset = "0x5ABBF8", VA = "0x5ABBF8")]
		public static extern UIntPtr ovr_Voip_GetPCMSize(ulong senderID);

		[PreserveSig]
		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x5ABC90", Offset = "0x5ABC90", VA = "0x5ABC90")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestamp(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x5ABD60", Offset = "0x5ABD60", VA = "0x5ABD60")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestampFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x5ABE30", Offset = "0x5ABE30", VA = "0x5ABE30")]
		public static extern VoipBitrate ovr_Voip_GetRemoteBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x5ABEC8", Offset = "0x5ABEC8", VA = "0x5ABEC8")]
		public static extern uint ovr_Voip_GetSyncTimestamp(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x5ABF60", Offset = "0x5ABF60", VA = "0x5ABF60")]
		public static extern long ovr_Voip_GetSyncTimestampDifference(uint lhs, uint rhs);

		[PreserveSig]
		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x5AC008", Offset = "0x5AC008", VA = "0x5AC008")]
		public static extern VoipMuteState ovr_Voip_GetSystemVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x5AC090", Offset = "0x5AC090", VA = "0x5AC090")]
		public static extern SystemVoipStatus ovr_Voip_GetSystemVoipStatus();

		[PreserveSig]
		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x5AC118", Offset = "0x5AC118", VA = "0x5AC118")]
		public static extern void ovr_Voip_SetMicrophoneMuted(VoipMuteState state);

		[PreserveSig]
		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x5AC1B0", Offset = "0x5AC1B0", VA = "0x5AC1B0")]
		public static extern void ovr_Voip_SetNewConnectionOptions(IntPtr voipOptions);

		[PreserveSig]
		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x5AC248", Offset = "0x5AC248", VA = "0x5AC248")]
		public static extern void ovr_Voip_SetOutputSampleRate(VoipSampleRate rate);

		[PreserveSig]
		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x5AC2E0", Offset = "0x5AC2E0", VA = "0x5AC2E0")]
		public static extern void ovr_Voip_Start(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x5AC378", Offset = "0x5AC378", VA = "0x5AC378")]
		public static extern void ovr_Voip_Stop(ulong userID);

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x5A4FC8", Offset = "0x5A4FC8", VA = "0x5A4FC8")]
		public static ulong ovr_Achievements_AddCount(string name, ulong count)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x5AC410", Offset = "0x5AC410", VA = "0x5AC410")]
		private static extern ulong ovr_Achievements_AddCount_Native(IntPtr name, ulong count);

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x5A5168", Offset = "0x5A5168", VA = "0x5A5168")]
		public static ulong ovr_Achievements_AddFields(string name, string fields)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x5AC4B8", Offset = "0x5AC4B8", VA = "0x5AC4B8")]
		private static extern ulong ovr_Achievements_AddFields_Native(IntPtr name, IntPtr fields);

		[PreserveSig]
		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x5A530C", Offset = "0x5A530C", VA = "0x5A530C")]
		public static extern ulong ovr_Achievements_GetAllDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x5A545C", Offset = "0x5A545C", VA = "0x5A545C")]
		public static extern ulong ovr_Achievements_GetAllProgress();

		[PreserveSig]
		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x5A55CC", Offset = "0x5A55CC", VA = "0x5A55CC")]
		public static extern ulong ovr_Achievements_GetDefinitionsByName(string[] names, int count);

		[PreserveSig]
		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x5A5814", Offset = "0x5A5814", VA = "0x5A5814")]
		public static extern ulong ovr_Achievements_GetProgressByName(string[] names, int count);

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x5A5A44", Offset = "0x5A5A44", VA = "0x5A5A44")]
		public static ulong ovr_Achievements_Unlock(string name)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x5AC560", Offset = "0x5AC560", VA = "0x5AC560")]
		private static extern ulong ovr_Achievements_Unlock_Native(IntPtr name);

		[PreserveSig]
		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x5AC5F8", Offset = "0x5AC5F8", VA = "0x5AC5F8")]
		public static extern ulong ovr_Application_ExecuteCoordinatedLaunch(ulong appID, ulong roomID);

		[PreserveSig]
		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x5AC6A0", Offset = "0x5AC6A0", VA = "0x5AC6A0")]
		public static extern ulong ovr_Application_GetInstalledApplications();

		[PreserveSig]
		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x5A6290", Offset = "0x5A6290", VA = "0x5A6290")]
		public static extern ulong ovr_Application_GetVersion();

		[PreserveSig]
		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x5A647C", Offset = "0x5A647C", VA = "0x5A647C")]
		public static extern ulong ovr_Application_LaunchOtherApp(ulong appID, IntPtr deeplink_options);

		[PreserveSig]
		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x5AC728", Offset = "0x5AC728", VA = "0x5AC728")]
		public static extern ulong ovr_ApplicationLifecycle_GetRegisteredPIDs();

		[PreserveSig]
		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x5AC7B0", Offset = "0x5AC7B0", VA = "0x5AC7B0")]
		public static extern ulong ovr_ApplicationLifecycle_GetSessionKey();

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x5AC838", Offset = "0x5AC838", VA = "0x5AC838")]
		public static ulong ovr_ApplicationLifecycle_RegisterSessionKey(string sessionKey)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x5AC8E8", Offset = "0x5AC8E8", VA = "0x5AC8E8")]
		private static extern ulong ovr_ApplicationLifecycle_RegisterSessionKey_Native(IntPtr sessionKey);

		[PreserveSig]
		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x5A6A80", Offset = "0x5A6A80", VA = "0x5A6A80")]
		public static extern ulong ovr_AssetFile_Delete(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x5A6BE8", Offset = "0x5A6BE8", VA = "0x5A6BE8")]
		public static extern ulong ovr_AssetFile_DeleteById(ulong assetFileID);

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x5A6D50", Offset = "0x5A6D50", VA = "0x5A6D50")]
		public static ulong ovr_AssetFile_DeleteByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x5AC980", Offset = "0x5AC980", VA = "0x5AC980")]
		private static extern ulong ovr_AssetFile_DeleteByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x5A6ED0", Offset = "0x5A6ED0", VA = "0x5A6ED0")]
		public static extern ulong ovr_AssetFile_Download(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x5A7038", Offset = "0x5A7038", VA = "0x5A7038")]
		public static extern ulong ovr_AssetFile_DownloadById(ulong assetFileID);

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x5A71A0", Offset = "0x5A71A0", VA = "0x5A71A0")]
		public static ulong ovr_AssetFile_DownloadByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x5ACA18", Offset = "0x5ACA18", VA = "0x5ACA18")]
		private static extern ulong ovr_AssetFile_DownloadByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x5A7320", Offset = "0x5A7320", VA = "0x5A7320")]
		public static extern ulong ovr_AssetFile_DownloadCancel(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x5A7488", Offset = "0x5A7488", VA = "0x5A7488")]
		public static extern ulong ovr_AssetFile_DownloadCancelById(ulong assetFileID);

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x5A75F0", Offset = "0x5A75F0", VA = "0x5A75F0")]
		public static ulong ovr_AssetFile_DownloadCancelByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x5ACAB0", Offset = "0x5ACAB0", VA = "0x5ACAB0")]
		private static extern ulong ovr_AssetFile_DownloadCancelByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x5A7768", Offset = "0x5A7768", VA = "0x5A7768")]
		public static extern ulong ovr_AssetFile_GetList();

		[PreserveSig]
		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x5A78C0", Offset = "0x5A78C0", VA = "0x5A78C0")]
		public static extern ulong ovr_AssetFile_Status(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x5A7A28", Offset = "0x5A7A28", VA = "0x5A7A28")]
		public static extern ulong ovr_AssetFile_StatusById(ulong assetFileID);

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x5A7B90", Offset = "0x5A7B90", VA = "0x5A7B90")]
		public static ulong ovr_AssetFile_StatusByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x5ACB48", Offset = "0x5ACB48", VA = "0x5ACB48")]
		private static extern ulong ovr_AssetFile_StatusByName_Native(IntPtr assetFileName);

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x5ACBE0", Offset = "0x5ACBE0", VA = "0x5ACBE0")]
		public static ulong ovr_Avatar_UpdateMetaData(string avatarMetaData, string imageFilePath)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x5ACCBC", Offset = "0x5ACCBC", VA = "0x5ACCBC")]
		private static extern ulong ovr_Avatar_UpdateMetaData_Native(IntPtr avatarMetaData, IntPtr imageFilePath);

		[PreserveSig]
		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x5ACD64", Offset = "0x5ACD64", VA = "0x5ACD64")]
		public static extern ulong ovr_Cal_FinalizeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong finalized_application_ID);

		[PreserveSig]
		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x5ACE2C", Offset = "0x5ACE2C", VA = "0x5ACE2C")]
		public static extern ulong ovr_Cal_GetSuggestedApplications(ulong groupingObject, ulong[] userIDs, int numUserIDs);

		[PreserveSig]
		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x5ACEE4", Offset = "0x5ACEE4", VA = "0x5ACEE4")]
		public static extern ulong ovr_Cal_ProposeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong proposed_application_ID);

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x5ACFAC", Offset = "0x5ACFAC", VA = "0x5ACFAC")]
		public static ulong ovr_CloudStorage_Delete(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x5AD088", Offset = "0x5AD088", VA = "0x5AD088")]
		private static extern ulong ovr_CloudStorage_Delete_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x5AD130", Offset = "0x5AD130", VA = "0x5AD130")]
		public static ulong ovr_CloudStorage_Load(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x5AD20C", Offset = "0x5AD20C", VA = "0x5AD20C")]
		private static extern ulong ovr_CloudStorage_Load_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x5AD2B4", Offset = "0x5AD2B4", VA = "0x5AD2B4")]
		public static ulong ovr_CloudStorage_LoadBucketMetadata(string bucket)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x5AD364", Offset = "0x5AD364", VA = "0x5AD364")]
		private static extern ulong ovr_CloudStorage_LoadBucketMetadata_Native(IntPtr bucket);

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x5AD3FC", Offset = "0x5AD3FC", VA = "0x5AD3FC")]
		public static ulong ovr_CloudStorage_LoadConflictMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x5AD4D8", Offset = "0x5AD4D8", VA = "0x5AD4D8")]
		private static extern ulong ovr_CloudStorage_LoadConflictMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x5AD580", Offset = "0x5AD580", VA = "0x5AD580")]
		public static ulong ovr_CloudStorage_LoadHandle(string handle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x5AD630", Offset = "0x5AD630", VA = "0x5AD630")]
		private static extern ulong ovr_CloudStorage_LoadHandle_Native(IntPtr handle);

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x5AD6C8", Offset = "0x5AD6C8", VA = "0x5AD6C8")]
		public static ulong ovr_CloudStorage_LoadMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x5AD7A4", Offset = "0x5AD7A4", VA = "0x5AD7A4")]
		private static extern ulong ovr_CloudStorage_LoadMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x5AD84C", Offset = "0x5AD84C", VA = "0x5AD84C")]
		public static ulong ovr_CloudStorage_ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x5AD94C", Offset = "0x5AD94C", VA = "0x5AD94C")]
		private static extern ulong ovr_CloudStorage_ResolveKeepLocal_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x5AD9FC", Offset = "0x5AD9FC", VA = "0x5AD9FC")]
		public static ulong ovr_CloudStorage_ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x5ADAFC", Offset = "0x5ADAFC", VA = "0x5ADAFC")]
		private static extern ulong ovr_CloudStorage_ResolveKeepRemote_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x5ADBAC", Offset = "0x5ADBAC", VA = "0x5ADBAC")]
		public static ulong ovr_CloudStorage_Save(string bucket, string key, byte[] data, uint dataSize, long counter, string extraData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x5ADCD4", Offset = "0x5ADCD4", VA = "0x5ADCD4")]
		private static extern ulong ovr_CloudStorage_Save_Native(IntPtr bucket, IntPtr key, byte[] data, uint dataSize, long counter, IntPtr extraData);

		[PreserveSig]
		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x5ADDB4", Offset = "0x5ADDB4", VA = "0x5ADDB4")]
		public static extern ulong ovr_CloudStorage2_GetUserDirectoryPath();

		[PreserveSig]
		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x5ADE3C", Offset = "0x5ADE3C", VA = "0x5ADE3C")]
		public static extern ulong ovr_Entitlement_GetIsViewerEntitled();

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x5ADEC4", Offset = "0x5ADEC4", VA = "0x5ADEC4")]
		public static ulong ovr_GraphAPI_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x5ADF74", Offset = "0x5ADF74", VA = "0x5ADF74")]
		private static extern ulong ovr_GraphAPI_Get_Native(IntPtr url);

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x5AE00C", Offset = "0x5AE00C", VA = "0x5AE00C")]
		public static ulong ovr_GraphAPI_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x5AE0BC", Offset = "0x5AE0BC", VA = "0x5AE0BC")]
		private static extern ulong ovr_GraphAPI_Post_Native(IntPtr url);

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x5AE150", Offset = "0x5AE150", VA = "0x5AE150")]
		public static ulong ovr_HTTP_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x5AE200", Offset = "0x5AE200", VA = "0x5AE200")]
		private static extern ulong ovr_HTTP_Get_Native(IntPtr url);

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x5AE298", Offset = "0x5AE298", VA = "0x5AE298")]
		public static ulong ovr_HTTP_GetToFile(string url, string diskFile)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x5AE374", Offset = "0x5AE374", VA = "0x5AE374")]
		private static extern ulong ovr_HTTP_GetToFile_Native(IntPtr url, IntPtr diskFile);

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x5AE41C", Offset = "0x5AE41C", VA = "0x5AE41C")]
		public static ulong ovr_HTTP_MultiPartPost(string url, string filepath_param_name, string filepath, string access_token, ovrKeyValuePair[] post_params)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x5AE58C", Offset = "0x5AE58C", VA = "0x5AE58C")]
		private static extern ulong ovr_HTTP_MultiPartPost_Native(IntPtr url, IntPtr filepath_param_name, IntPtr filepath, IntPtr access_token, ovrKeyValuePair[] post_params, UIntPtr numItems);

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x5AE728", Offset = "0x5AE728", VA = "0x5AE728")]
		public static ulong ovr_HTTP_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x5AE7D8", Offset = "0x5AE7D8", VA = "0x5AE7D8")]
		private static extern ulong ovr_HTTP_Post_Native(IntPtr url);

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x5AE870", Offset = "0x5AE870", VA = "0x5AE870")]
		public static ulong ovr_IAP_ConsumePurchase(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x5AE920", Offset = "0x5AE920", VA = "0x5AE920")]
		private static extern ulong ovr_IAP_ConsumePurchase_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x5AE9B8", Offset = "0x5AE9B8", VA = "0x5AE9B8")]
		public static extern ulong ovr_IAP_GetProductsBySKU(string[] skus, int count);

		[PreserveSig]
		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x5AEB18", Offset = "0x5AEB18", VA = "0x5AEB18")]
		public static extern ulong ovr_IAP_GetViewerPurchases();

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x5AEBA0", Offset = "0x5AEBA0", VA = "0x5AEBA0")]
		public static ulong ovr_IAP_LaunchCheckoutFlow(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001001")]
		[Address(RVA = "0x5AEC50", Offset = "0x5AEC50", VA = "0x5AEC50")]
		private static extern ulong ovr_IAP_LaunchCheckoutFlow_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6001002")]
		[Address(RVA = "0x5AECE8", Offset = "0x5AECE8", VA = "0x5AECE8")]
		public static extern ulong ovr_LanguagePack_GetCurrent();

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x5AED70", Offset = "0x5AED70", VA = "0x5AED70")]
		public static ulong ovr_LanguagePack_SetCurrent(string tag)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001004")]
		[Address(RVA = "0x5AEE20", Offset = "0x5AEE20", VA = "0x5AEE20")]
		private static extern ulong ovr_LanguagePack_SetCurrent_Native(IntPtr tag);

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x5AEEB8", Offset = "0x5AEEB8", VA = "0x5AEEB8")]
		public static ulong ovr_Leaderboard_GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001006")]
		[Address(RVA = "0x5AEF90", Offset = "0x5AEF90", VA = "0x5AEF90")]
		private static extern ulong ovr_Leaderboard_GetEntries_Native(IntPtr leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt);

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x5AF050", Offset = "0x5AF050", VA = "0x5AF050")]
		public static ulong ovr_Leaderboard_GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001008")]
		[Address(RVA = "0x5AF118", Offset = "0x5AF118", VA = "0x5AF118")]
		private static extern ulong ovr_Leaderboard_GetEntriesAfterRank_Native(IntPtr leaderboardName, int limit, ulong afterRank);

		[PreserveSig]
		[Token(Token = "0x6001009")]
		[Address(RVA = "0x5AF1C8", Offset = "0x5AF1C8", VA = "0x5AF1C8")]
		public static extern ulong ovr_Leaderboard_GetNextEntries(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600100A")]
		[Address(RVA = "0x5AF260", Offset = "0x5AF260", VA = "0x5AF260")]
		public static extern ulong ovr_Leaderboard_GetPreviousEntries(IntPtr handle);

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x5AF2F8", Offset = "0x5AF2F8", VA = "0x5AF2F8")]
		public static ulong ovr_Leaderboard_WriteEntry(string leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600100C")]
		[Address(RVA = "0x5AF3D8", Offset = "0x5AF3D8", VA = "0x5AF3D8")]
		private static extern ulong ovr_Leaderboard_WriteEntry_Native(IntPtr leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate);

		[PreserveSig]
		[Token(Token = "0x600100D")]
		[Address(RVA = "0x5AF4A8", Offset = "0x5AF4A8", VA = "0x5AF4A8")]
		public static extern ulong ovr_Livestreaming_GetStatus();

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x5AF530", Offset = "0x5AF530", VA = "0x5AF530")]
		public static ulong ovr_Livestreaming_IsAllowedForApplication(string packageName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600100F")]
		[Address(RVA = "0x5AF5E0", Offset = "0x5AF5E0", VA = "0x5AF5E0")]
		private static extern ulong ovr_Livestreaming_IsAllowedForApplication_Native(IntPtr packageName);

		[PreserveSig]
		[Token(Token = "0x6001010")]
		[Address(RVA = "0x5AF678", Offset = "0x5AF678", VA = "0x5AF678")]
		public static extern ulong ovr_Livestreaming_PauseStream();

		[PreserveSig]
		[Token(Token = "0x6001011")]
		[Address(RVA = "0x5AF700", Offset = "0x5AF700", VA = "0x5AF700")]
		public static extern ulong ovr_Livestreaming_ResumeStream();

		[PreserveSig]
		[Token(Token = "0x6001012")]
		[Address(RVA = "0x5AF788", Offset = "0x5AF788", VA = "0x5AF788")]
		public static extern ulong ovr_Livestreaming_StartPartyStream();

		[PreserveSig]
		[Token(Token = "0x6001013")]
		[Address(RVA = "0x5AF810", Offset = "0x5AF810", VA = "0x5AF810")]
		public static extern ulong ovr_Livestreaming_StartStream(LivestreamingAudience audience, LivestreamingMicrophoneStatus micStatus);

		[PreserveSig]
		[Token(Token = "0x6001014")]
		[Address(RVA = "0x5AF8B8", Offset = "0x5AF8B8", VA = "0x5AF8B8")]
		public static extern ulong ovr_Livestreaming_StopPartyStream();

		[PreserveSig]
		[Token(Token = "0x6001015")]
		[Address(RVA = "0x5AF940", Offset = "0x5AF940", VA = "0x5AF940")]
		public static extern ulong ovr_Livestreaming_StopStream();

		[PreserveSig]
		[Token(Token = "0x6001016")]
		[Address(RVA = "0x5AF9C8", Offset = "0x5AF9C8", VA = "0x5AF9C8")]
		public static extern ulong ovr_Livestreaming_UpdateCommentsOverlayVisibility(bool isVisible);

		[PreserveSig]
		[Token(Token = "0x6001017")]
		[Address(RVA = "0x5AFA60", Offset = "0x5AFA60", VA = "0x5AFA60")]
		public static extern ulong ovr_Livestreaming_UpdateMicStatus(LivestreamingMicrophoneStatus micStatus);

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x5AFAF8", Offset = "0x5AFAF8", VA = "0x5AFAF8")]
		public static ulong ovr_Matchmaking_Browse(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001019")]
		[Address(RVA = "0x5AFBB8", Offset = "0x5AFBB8", VA = "0x5AFBB8")]
		private static extern ulong ovr_Matchmaking_Browse_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x5AFC60", Offset = "0x5AFC60", VA = "0x5AFC60")]
		public static ulong ovr_Matchmaking_Browse2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600101B")]
		[Address(RVA = "0x5AFD20", Offset = "0x5AFD20", VA = "0x5AFD20")]
		private static extern ulong ovr_Matchmaking_Browse2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x5AFDC8", Offset = "0x5AFDC8", VA = "0x5AFDC8")]
		public static ulong ovr_Matchmaking_Cancel(string pool, string requestHash)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600101D")]
		[Address(RVA = "0x5AFEA4", Offset = "0x5AFEA4", VA = "0x5AFEA4")]
		private static extern ulong ovr_Matchmaking_Cancel_Native(IntPtr pool, IntPtr requestHash);

		[PreserveSig]
		[Token(Token = "0x600101E")]
		[Address(RVA = "0x5AFF4C", Offset = "0x5AFF4C", VA = "0x5AFF4C")]
		public static extern ulong ovr_Matchmaking_Cancel2();

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x5AFFD4", Offset = "0x5AFFD4", VA = "0x5AFFD4")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001020")]
		[Address(RVA = "0x5B00AC", Offset = "0x5B00AC", VA = "0x5B00AC")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData);

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x5B016C", Offset = "0x5B016C", VA = "0x5B016C")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001022")]
		[Address(RVA = "0x5B022C", Offset = "0x5B022C", VA = "0x5B022C")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x5B02D4", Offset = "0x5B02D4", VA = "0x5B02D4")]
		public static ulong ovr_Matchmaking_CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001024")]
		[Address(RVA = "0x5B039C", Offset = "0x5B039C", VA = "0x5B039C")]
		private static extern ulong ovr_Matchmaking_CreateRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates);

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x5B044C", Offset = "0x5B044C", VA = "0x5B044C")]
		public static ulong ovr_Matchmaking_CreateRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001026")]
		[Address(RVA = "0x5B050C", Offset = "0x5B050C", VA = "0x5B050C")]
		private static extern ulong ovr_Matchmaking_CreateRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x5B05B4", Offset = "0x5B05B4", VA = "0x5B05B4")]
		public static ulong ovr_Matchmaking_Enqueue(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001028")]
		[Address(RVA = "0x5B0674", Offset = "0x5B0674", VA = "0x5B0674")]
		private static extern ulong ovr_Matchmaking_Enqueue_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x5B071C", Offset = "0x5B071C", VA = "0x5B071C")]
		public static ulong ovr_Matchmaking_Enqueue2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600102A")]
		[Address(RVA = "0x5B07DC", Offset = "0x5B07DC", VA = "0x5B07DC")]
		private static extern ulong ovr_Matchmaking_Enqueue2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x600102B")]
		[Address(RVA = "0x5B0884", Offset = "0x5B0884", VA = "0x5B0884")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom(ulong roomID, IntPtr customQueryData);

		[PreserveSig]
		[Token(Token = "0x600102C")]
		[Address(RVA = "0x5B092C", Offset = "0x5B092C", VA = "0x5B092C")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom2(ulong roomID, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x600102D")]
		[Address(RVA = "0x5B09D4", Offset = "0x5B09D4", VA = "0x5B09D4")]
		public static extern ulong ovr_Matchmaking_GetAdminSnapshot();

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x5B0A5C", Offset = "0x5B0A5C", VA = "0x5B0A5C")]
		public static ulong ovr_Matchmaking_GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600102F")]
		[Address(RVA = "0x5B0B24", Offset = "0x5B0B24", VA = "0x5B0B24")]
		private static extern ulong ovr_Matchmaking_GetStats_Native(IntPtr pool, uint maxLevel, MatchmakingStatApproach approach);

		[PreserveSig]
		[Token(Token = "0x6001030")]
		[Address(RVA = "0x5B0BD4", Offset = "0x5B0BD4", VA = "0x5B0BD4")]
		public static extern ulong ovr_Matchmaking_JoinRoom(ulong roomID, bool subscribeToUpdates);

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x5B0C7C", Offset = "0x5B0C7C", VA = "0x5B0C7C")]
		public static ulong ovr_Matchmaking_ReportResultInsecure(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001032")]
		[Address(RVA = "0x5B0D34", Offset = "0x5B0D34", VA = "0x5B0D34")]
		private static extern ulong ovr_Matchmaking_ReportResultInsecure_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6001033")]
		[Address(RVA = "0x5B0EA0", Offset = "0x5B0EA0", VA = "0x5B0EA0")]
		public static extern ulong ovr_Matchmaking_StartMatch(ulong roomID);

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x5B0F38", Offset = "0x5B0F38", VA = "0x5B0F38")]
		public static ulong ovr_Media_ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001035")]
		[Address(RVA = "0x5B101C", Offset = "0x5B101C", VA = "0x5B101C")]
		private static extern ulong ovr_Media_ShareToFacebook_Native(IntPtr postTextSuggestion, IntPtr filePath, MediaContentType contentType);

		[PreserveSig]
		[Token(Token = "0x6001036")]
		[Address(RVA = "0x5B10CC", Offset = "0x5B10CC", VA = "0x5B10CC")]
		public static extern ulong ovr_Notification_GetRoomInvites();

		[PreserveSig]
		[Token(Token = "0x6001037")]
		[Address(RVA = "0x5B1154", Offset = "0x5B1154", VA = "0x5B1154")]
		public static extern ulong ovr_Notification_MarkAsRead(ulong notificationID);

		[PreserveSig]
		[Token(Token = "0x6001038")]
		[Address(RVA = "0x5B11EC", Offset = "0x5B11EC", VA = "0x5B11EC")]
		public static extern ulong ovr_Party_Create();

		[PreserveSig]
		[Token(Token = "0x6001039")]
		[Address(RVA = "0x5B1274", Offset = "0x5B1274", VA = "0x5B1274")]
		public static extern ulong ovr_Party_GatherInApplication(ulong partyID, ulong appID);

		[PreserveSig]
		[Token(Token = "0x600103A")]
		[Address(RVA = "0x5B131C", Offset = "0x5B131C", VA = "0x5B131C")]
		public static extern ulong ovr_Party_Get(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x600103B")]
		[Address(RVA = "0x5B13B4", Offset = "0x5B13B4", VA = "0x5B13B4")]
		public static extern ulong ovr_Party_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x600103C")]
		[Address(RVA = "0x5B143C", Offset = "0x5B143C", VA = "0x5B143C")]
		public static extern ulong ovr_Party_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600103D")]
		[Address(RVA = "0x5B14D4", Offset = "0x5B14D4", VA = "0x5B14D4")]
		public static extern ulong ovr_Party_Invite(ulong partyID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x600103E")]
		[Address(RVA = "0x5B1578", Offset = "0x5B1578", VA = "0x5B1578")]
		public static extern ulong ovr_Party_Join(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x600103F")]
		[Address(RVA = "0x5B1610", Offset = "0x5B1610", VA = "0x5B1610")]
		public static extern ulong ovr_Party_Leave(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x6001040")]
		[Address(RVA = "0x5B16A8", Offset = "0x5B16A8", VA = "0x5B16A8")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x6001041")]
		[Address(RVA = "0x5B1758", Offset = "0x5B1758", VA = "0x5B1758")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x6001042")]
		[Address(RVA = "0x5B1808", Offset = "0x5B1808", VA = "0x5B1808")]
		public static extern ulong ovr_Room_Get(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x6001043")]
		[Address(RVA = "0x5B18A0", Offset = "0x5B18A0", VA = "0x5B18A0")]
		public static extern ulong ovr_Room_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x6001044")]
		[Address(RVA = "0x5B1928", Offset = "0x5B1928", VA = "0x5B1928")]
		public static extern ulong ovr_Room_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001045")]
		[Address(RVA = "0x5B19C0", Offset = "0x5B19C0", VA = "0x5B19C0")]
		public static extern ulong ovr_Room_GetInvitableUsers();

		[PreserveSig]
		[Token(Token = "0x6001046")]
		[Address(RVA = "0x5B1A48", Offset = "0x5B1A48", VA = "0x5B1A48")]
		public static extern ulong ovr_Room_GetInvitableUsers2(IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x6001047")]
		[Address(RVA = "0x5B1AE0", Offset = "0x5B1AE0", VA = "0x5B1AE0")]
		public static extern ulong ovr_Room_GetModeratedRooms();

		[PreserveSig]
		[Token(Token = "0x6001048")]
		[Address(RVA = "0x5B1B68", Offset = "0x5B1B68", VA = "0x5B1B68")]
		public static extern ulong ovr_Room_GetSocialRooms(ulong appID);

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x5B1C00", Offset = "0x5B1C00", VA = "0x5B1C00")]
		public static ulong ovr_Room_InviteUser(ulong roomID, string inviteToken)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600104A")]
		[Address(RVA = "0x5B1CC0", Offset = "0x5B1CC0", VA = "0x5B1CC0")]
		private static extern ulong ovr_Room_InviteUser_Native(ulong roomID, IntPtr inviteToken);

		[PreserveSig]
		[Token(Token = "0x600104B")]
		[Address(RVA = "0x5B1D68", Offset = "0x5B1D68", VA = "0x5B1D68")]
		public static extern ulong ovr_Room_Join(ulong roomID, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x600104C")]
		[Address(RVA = "0x5B1E10", Offset = "0x5B1E10", VA = "0x5B1E10")]
		public static extern ulong ovr_Room_Join2(ulong roomID, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x600104D")]
		[Address(RVA = "0x5B1EB8", Offset = "0x5B1EB8", VA = "0x5B1EB8")]
		public static extern ulong ovr_Room_KickUser(ulong roomID, ulong userID, int kickDurationSeconds);

		[PreserveSig]
		[Token(Token = "0x600104E")]
		[Address(RVA = "0x5B1F64", Offset = "0x5B1F64", VA = "0x5B1F64")]
		public static extern ulong ovr_Room_LaunchInvitableUserFlow(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x600104F")]
		[Address(RVA = "0x5B1FFC", Offset = "0x5B1FFC", VA = "0x5B1FFC")]
		public static extern ulong ovr_Room_Leave(ulong roomID);

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x5B2094", Offset = "0x5B2094", VA = "0x5B2094")]
		public static ulong ovr_Room_SetDescription(ulong roomID, string description)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001051")]
		[Address(RVA = "0x5B2154", Offset = "0x5B2154", VA = "0x5B2154")]
		private static extern ulong ovr_Room_SetDescription_Native(ulong roomID, IntPtr description);

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x5B21FC", Offset = "0x5B21FC", VA = "0x5B21FC")]
		public static ulong ovr_Room_UpdateDataStore(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x5B22B4", Offset = "0x5B22B4", VA = "0x5B22B4")]
		private static extern ulong ovr_Room_UpdateDataStore_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6001054")]
		[Address(RVA = "0x5B241C", Offset = "0x5B241C", VA = "0x5B241C")]
		public static extern ulong ovr_Room_UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus);

		[PreserveSig]
		[Token(Token = "0x6001055")]
		[Address(RVA = "0x5B24C4", Offset = "0x5B24C4", VA = "0x5B24C4")]
		public static extern ulong ovr_Room_UpdateOwner(ulong roomID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001056")]
		[Address(RVA = "0x5B256C", Offset = "0x5B256C", VA = "0x5B256C")]
		public static extern ulong ovr_Room_UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy);

		[PreserveSig]
		[Token(Token = "0x6001057")]
		[Address(RVA = "0x5B2614", Offset = "0x5B2614", VA = "0x5B2614")]
		public static extern ulong ovr_SystemPermissions_GetStatus(PermissionType permType);

		[PreserveSig]
		[Token(Token = "0x6001058")]
		[Address(RVA = "0x5B26AC", Offset = "0x5B26AC", VA = "0x5B26AC")]
		public static extern ulong ovr_SystemPermissions_LaunchDeeplink(PermissionType permType);

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x5B2744", Offset = "0x5B2744", VA = "0x5B2744")]
		public static ulong ovr_User_CancelRecordingForReportFlow(string recordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600105A")]
		[Address(RVA = "0x5B27F4", Offset = "0x5B27F4", VA = "0x5B27F4")]
		private static extern ulong ovr_User_CancelRecordingForReportFlow_Native(IntPtr recordingUUID);

		[PreserveSig]
		[Token(Token = "0x600105B")]
		[Address(RVA = "0x5B288C", Offset = "0x5B288C", VA = "0x5B288C")]
		public static extern ulong ovr_User_Get(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600105C")]
		[Address(RVA = "0x5B2924", Offset = "0x5B2924", VA = "0x5B2924")]
		public static extern ulong ovr_User_GetAccessToken();

		[PreserveSig]
		[Token(Token = "0x600105D")]
		[Address(RVA = "0x5B29AC", Offset = "0x5B29AC", VA = "0x5B29AC")]
		public static extern ulong ovr_User_GetLinkedAccounts(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x600105E")]
		[Address(RVA = "0x5B2A44", Offset = "0x5B2A44", VA = "0x5B2A44")]
		public static extern ulong ovr_User_GetLoggedInUser();

		[PreserveSig]
		[Token(Token = "0x600105F")]
		[Address(RVA = "0x5B2ACC", Offset = "0x5B2ACC", VA = "0x5B2ACC")]
		public static extern ulong ovr_User_GetLoggedInUserFriends();

		[PreserveSig]
		[Token(Token = "0x6001060")]
		[Address(RVA = "0x5B2B54", Offset = "0x5B2B54", VA = "0x5B2B54")]
		public static extern ulong ovr_User_GetLoggedInUserFriendsAndRooms();

		[PreserveSig]
		[Token(Token = "0x6001061")]
		[Address(RVA = "0x5B2BDC", Offset = "0x5B2BDC", VA = "0x5B2BDC")]
		public static extern ulong ovr_User_GetLoggedInUserRecentlyMetUsersAndRooms(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x6001062")]
		[Address(RVA = "0x5B2C74", Offset = "0x5B2C74", VA = "0x5B2C74")]
		public static extern ulong ovr_User_GetOrgScopedID(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001063")]
		[Address(RVA = "0x5B2D0C", Offset = "0x5B2D0C", VA = "0x5B2D0C")]
		public static extern ulong ovr_User_GetSdkAccounts();

		[PreserveSig]
		[Token(Token = "0x6001064")]
		[Address(RVA = "0x5B2D94", Offset = "0x5B2D94", VA = "0x5B2D94")]
		public static extern ulong ovr_User_GetUserProof();

		[PreserveSig]
		[Token(Token = "0x6001065")]
		[Address(RVA = "0x5B2E1C", Offset = "0x5B2E1C", VA = "0x5B2E1C")]
		public static extern ulong ovr_User_LaunchBlockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001066")]
		[Address(RVA = "0x5B2EB4", Offset = "0x5B2EB4", VA = "0x5B2EB4")]
		public static extern ulong ovr_User_LaunchFriendRequestFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001067")]
		[Address(RVA = "0x5B2F4C", Offset = "0x5B2F4C", VA = "0x5B2F4C")]
		public static extern ulong ovr_User_LaunchProfile(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001068")]
		[Address(RVA = "0x5B2FE4", Offset = "0x5B2FE4", VA = "0x5B2FE4")]
		public static extern ulong ovr_User_LaunchReportFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6001069")]
		[Address(RVA = "0x5B307C", Offset = "0x5B307C", VA = "0x5B307C")]
		public static extern ulong ovr_User_LaunchReportFlow2(ulong optionalUserID, IntPtr abuseReportOptions);

		[PreserveSig]
		[Token(Token = "0x600106A")]
		[Address(RVA = "0x5B3124", Offset = "0x5B3124", VA = "0x5B3124")]
		public static extern ulong ovr_User_LaunchUnblockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600106B")]
		[Address(RVA = "0x5B31BC", Offset = "0x5B31BC", VA = "0x5B31BC")]
		public static extern ulong ovr_User_NewEntitledTestUser();

		[PreserveSig]
		[Token(Token = "0x600106C")]
		[Address(RVA = "0x5B3244", Offset = "0x5B3244", VA = "0x5B3244")]
		public static extern ulong ovr_User_NewTestUser();

		[PreserveSig]
		[Token(Token = "0x600106D")]
		[Address(RVA = "0x5B32CC", Offset = "0x5B32CC", VA = "0x5B32CC")]
		public static extern ulong ovr_User_NewTestUserFriends();

		[PreserveSig]
		[Token(Token = "0x600106E")]
		[Address(RVA = "0x5B3354", Offset = "0x5B3354", VA = "0x5B3354")]
		public static extern ulong ovr_User_StartRecordingForReportFlow();

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x5B33DC", Offset = "0x5B33DC", VA = "0x5B33DC")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow(ulong optionalUserID, string optionalRecordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001070")]
		[Address(RVA = "0x5B349C", Offset = "0x5B349C", VA = "0x5B349C")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow_Native(ulong optionalUserID, IntPtr optionalRecordingUUID);

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x5B3544", Offset = "0x5B3544", VA = "0x5B3544")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow2(ulong optionalUserID, string optionalRecordingUUID, IntPtr abuseReportOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001072")]
		[Address(RVA = "0x5B360C", Offset = "0x5B360C", VA = "0x5B360C")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow2_Native(ulong optionalUserID, IntPtr optionalRecordingUUID, IntPtr abuseReportOptions);

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x5B36BC", Offset = "0x5B36BC", VA = "0x5B36BC")]
		public static ulong ovr_User_TestUserCreateDeviceManifest(string deviceID, ulong[] appIDs, int numAppIDs)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6001074")]
		[Address(RVA = "0x5B3784", Offset = "0x5B3784", VA = "0x5B3784")]
		private static extern ulong ovr_User_TestUserCreateDeviceManifest_Native(IntPtr deviceID, ulong[] appIDs, int numAppIDs);

		[PreserveSig]
		[Token(Token = "0x6001075")]
		[Address(RVA = "0x5B383C", Offset = "0x5B383C", VA = "0x5B383C")]
		public static extern ulong ovr_Voip_SetSystemVoipSuppressed(bool suppressed);

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x5B38D4", Offset = "0x5B38D4", VA = "0x5B38D4")]
		public static string ovr_AbuseReportRecording_GetRecordingUuid(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001077")]
		[Address(RVA = "0x5B3940", Offset = "0x5B3940", VA = "0x5B3940")]
		private static extern IntPtr ovr_AbuseReportRecording_GetRecordingUuid_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001078")]
		[Address(RVA = "0x5B39D8", Offset = "0x5B39D8", VA = "0x5B39D8")]
		public static extern uint ovr_AchievementDefinition_GetBitfieldLength(IntPtr obj);

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x5B3A70", Offset = "0x5B3A70", VA = "0x5B3A70")]
		public static string ovr_AchievementDefinition_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600107A")]
		[Address(RVA = "0x5B3ADC", Offset = "0x5B3ADC", VA = "0x5B3ADC")]
		private static extern IntPtr ovr_AchievementDefinition_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600107B")]
		[Address(RVA = "0x5B3B74", Offset = "0x5B3B74", VA = "0x5B3B74")]
		public static extern ulong ovr_AchievementDefinition_GetTarget(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600107C")]
		[Address(RVA = "0x5B3C0C", Offset = "0x5B3C0C", VA = "0x5B3C0C")]
		public static extern AchievementType ovr_AchievementDefinition_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600107D")]
		[Address(RVA = "0x5B3CA4", Offset = "0x5B3CA4", VA = "0x5B3CA4")]
		public static extern IntPtr ovr_AchievementDefinitionArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x5B3D4C", Offset = "0x5B3D4C", VA = "0x5B3D4C")]
		public static string ovr_AchievementDefinitionArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600107F")]
		[Address(RVA = "0x5B3DB8", Offset = "0x5B3DB8", VA = "0x5B3DB8")]
		private static extern IntPtr ovr_AchievementDefinitionArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001080")]
		[Address(RVA = "0x5B3E50", Offset = "0x5B3E50", VA = "0x5B3E50")]
		public static extern UIntPtr ovr_AchievementDefinitionArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001081")]
		[Address(RVA = "0x5B3EE8", Offset = "0x5B3EE8", VA = "0x5B3EE8")]
		public static extern bool ovr_AchievementDefinitionArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x5B3F88", Offset = "0x5B3F88", VA = "0x5B3F88")]
		public static string ovr_AchievementProgress_GetBitfield(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001083")]
		[Address(RVA = "0x5B3FF4", Offset = "0x5B3FF4", VA = "0x5B3FF4")]
		private static extern IntPtr ovr_AchievementProgress_GetBitfield_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001084")]
		[Address(RVA = "0x5B408C", Offset = "0x5B408C", VA = "0x5B408C")]
		public static extern ulong ovr_AchievementProgress_GetCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001085")]
		[Address(RVA = "0x5B4124", Offset = "0x5B4124", VA = "0x5B4124")]
		public static extern bool ovr_AchievementProgress_GetIsUnlocked(IntPtr obj);

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x5B41C4", Offset = "0x5B41C4", VA = "0x5B41C4")]
		public static string ovr_AchievementProgress_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001087")]
		[Address(RVA = "0x5B4230", Offset = "0x5B4230", VA = "0x5B4230")]
		private static extern IntPtr ovr_AchievementProgress_GetName_Native(IntPtr obj);

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x5B42C8", Offset = "0x5B42C8", VA = "0x5B42C8")]
		public static DateTime ovr_AchievementProgress_GetUnlockTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6001089")]
		[Address(RVA = "0x5B4334", Offset = "0x5B4334", VA = "0x5B4334")]
		private static extern ulong ovr_AchievementProgress_GetUnlockTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600108A")]
		[Address(RVA = "0x5B43CC", Offset = "0x5B43CC", VA = "0x5B43CC")]
		public static extern IntPtr ovr_AchievementProgressArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x5B4474", Offset = "0x5B4474", VA = "0x5B4474")]
		public static string ovr_AchievementProgressArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600108C")]
		[Address(RVA = "0x5B44E0", Offset = "0x5B44E0", VA = "0x5B44E0")]
		private static extern IntPtr ovr_AchievementProgressArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600108D")]
		[Address(RVA = "0x5B4578", Offset = "0x5B4578", VA = "0x5B4578")]
		public static extern UIntPtr ovr_AchievementProgressArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600108E")]
		[Address(RVA = "0x5B4610", Offset = "0x5B4610", VA = "0x5B4610")]
		public static extern bool ovr_AchievementProgressArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600108F")]
		[Address(RVA = "0x5B46B0", Offset = "0x5B46B0", VA = "0x5B46B0")]
		public static extern bool ovr_AchievementUpdate_GetJustUnlocked(IntPtr obj);

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x5B4750", Offset = "0x5B4750", VA = "0x5B4750")]
		public static string ovr_AchievementUpdate_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001091")]
		[Address(RVA = "0x5B47BC", Offset = "0x5B47BC", VA = "0x5B47BC")]
		private static extern IntPtr ovr_AchievementUpdate_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001092")]
		[Address(RVA = "0x5B4854", Offset = "0x5B4854", VA = "0x5B4854")]
		public static extern ulong ovr_Application_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001093")]
		[Address(RVA = "0x5B48EC", Offset = "0x5B48EC", VA = "0x5B48EC")]
		public static extern int ovr_ApplicationVersion_GetCurrentCode(IntPtr obj);

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x5B4984", Offset = "0x5B4984", VA = "0x5B4984")]
		public static string ovr_ApplicationVersion_GetCurrentName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001095")]
		[Address(RVA = "0x5B49F0", Offset = "0x5B49F0", VA = "0x5B49F0")]
		private static extern IntPtr ovr_ApplicationVersion_GetCurrentName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001096")]
		[Address(RVA = "0x5B4A88", Offset = "0x5B4A88", VA = "0x5B4A88")]
		public static extern int ovr_ApplicationVersion_GetLatestCode(IntPtr obj);

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x5B4B20", Offset = "0x5B4B20", VA = "0x5B4B20")]
		public static string ovr_ApplicationVersion_GetLatestName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001098")]
		[Address(RVA = "0x5B4B8C", Offset = "0x5B4B8C", VA = "0x5B4B8C")]
		private static extern IntPtr ovr_ApplicationVersion_GetLatestName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001099")]
		[Address(RVA = "0x5B4C24", Offset = "0x5B4C24", VA = "0x5B4C24")]
		public static extern ulong ovr_AssetDetails_GetAssetId(IntPtr obj);

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x5B4CBC", Offset = "0x5B4CBC", VA = "0x5B4CBC")]
		public static string ovr_AssetDetails_GetAssetType(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600109B")]
		[Address(RVA = "0x5B4D28", Offset = "0x5B4D28", VA = "0x5B4D28")]
		private static extern IntPtr ovr_AssetDetails_GetAssetType_Native(IntPtr obj);

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x5B4DC0", Offset = "0x5B4DC0", VA = "0x5B4DC0")]
		public static string ovr_AssetDetails_GetDownloadStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600109D")]
		[Address(RVA = "0x5B4E2C", Offset = "0x5B4E2C", VA = "0x5B4E2C")]
		private static extern IntPtr ovr_AssetDetails_GetDownloadStatus_Native(IntPtr obj);

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x5B4EC4", Offset = "0x5B4EC4", VA = "0x5B4EC4")]
		public static string ovr_AssetDetails_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600109F")]
		[Address(RVA = "0x5B4F30", Offset = "0x5B4F30", VA = "0x5B4F30")]
		private static extern IntPtr ovr_AssetDetails_GetFilepath_Native(IntPtr obj);

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x5B4FC8", Offset = "0x5B4FC8", VA = "0x5B4FC8")]
		public static string ovr_AssetDetails_GetIapStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x5B5034", Offset = "0x5B5034", VA = "0x5B5034")]
		private static extern IntPtr ovr_AssetDetails_GetIapStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x5B50CC", Offset = "0x5B50CC", VA = "0x5B50CC")]
		public static extern IntPtr ovr_AssetDetails_GetLanguage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x5B5164", Offset = "0x5B5164", VA = "0x5B5164")]
		public static extern IntPtr ovr_AssetDetailsArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x5B520C", Offset = "0x5B520C", VA = "0x5B520C")]
		public static extern UIntPtr ovr_AssetDetailsArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x5B52A4", Offset = "0x5B52A4", VA = "0x5B52A4")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x5B533C", Offset = "0x5B533C", VA = "0x5B533C")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x5B53D4", Offset = "0x5B53D4", VA = "0x5B53D4")]
		public static string ovr_AssetFileDeleteResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x5B5440", Offset = "0x5B5440", VA = "0x5B5440")]
		private static extern IntPtr ovr_AssetFileDeleteResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x5B54D8", Offset = "0x5B54D8", VA = "0x5B54D8")]
		public static extern bool ovr_AssetFileDeleteResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x5B5578", Offset = "0x5B5578", VA = "0x5B5578")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x5B5610", Offset = "0x5B5610", VA = "0x5B5610")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x5B56A8", Offset = "0x5B56A8", VA = "0x5B56A8")]
		public static string ovr_AssetFileDownloadCancelResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x5B5714", Offset = "0x5B5714", VA = "0x5B5714")]
		private static extern IntPtr ovr_AssetFileDownloadCancelResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x5B57AC", Offset = "0x5B57AC", VA = "0x5B57AC")]
		public static extern bool ovr_AssetFileDownloadCancelResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x5B584C", Offset = "0x5B584C", VA = "0x5B584C")]
		public static extern ulong ovr_AssetFileDownloadResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x5B58E4", Offset = "0x5B58E4", VA = "0x5B58E4")]
		public static string ovr_AssetFileDownloadResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x5B5950", Offset = "0x5B5950", VA = "0x5B5950")]
		private static extern IntPtr ovr_AssetFileDownloadResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x5B59E8", Offset = "0x5B59E8", VA = "0x5B59E8")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x5B5A80", Offset = "0x5B5A80", VA = "0x5B5A80")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x5B5B18", Offset = "0x5B5B18", VA = "0x5B5B18")]
		public static extern uint ovr_AssetFileDownloadUpdate_GetBytesTotal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x5B5BB0", Offset = "0x5B5BB0", VA = "0x5B5BB0")]
		public static extern int ovr_AssetFileDownloadUpdate_GetBytesTransferred(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x5B5C48", Offset = "0x5B5C48", VA = "0x5B5C48")]
		public static extern bool ovr_AssetFileDownloadUpdate_GetCompleted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x5B5CE8", Offset = "0x5B5CE8", VA = "0x5B5CE8")]
		public static extern int ovr_CalApplicationFinalized_GetCountdownMS(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x5B5D80", Offset = "0x5B5D80", VA = "0x5B5D80")]
		public static extern ulong ovr_CalApplicationFinalized_GetID(IntPtr obj);

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x5B5E18", Offset = "0x5B5E18", VA = "0x5B5E18")]
		public static string ovr_CalApplicationFinalized_GetLaunchDetails(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x5B5E84", Offset = "0x5B5E84", VA = "0x5B5E84")]
		private static extern IntPtr ovr_CalApplicationFinalized_GetLaunchDetails_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x5B5F1C", Offset = "0x5B5F1C", VA = "0x5B5F1C")]
		public static extern ulong ovr_CalApplicationProposed_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x5B5FB4", Offset = "0x5B5FB4", VA = "0x5B5FB4")]
		public static extern ulong ovr_CalApplicationSuggestion_GetID(IntPtr obj);

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x5B604C", Offset = "0x5B604C", VA = "0x5B604C")]
		public static string ovr_CalApplicationSuggestion_GetSocialContext(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x5B60B8", Offset = "0x5B60B8", VA = "0x5B60B8")]
		private static extern IntPtr ovr_CalApplicationSuggestion_GetSocialContext_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x5B6150", Offset = "0x5B6150", VA = "0x5B6150")]
		public static extern IntPtr ovr_CalApplicationSuggestionArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x5B61F8", Offset = "0x5B61F8", VA = "0x5B61F8")]
		public static extern UIntPtr ovr_CalApplicationSuggestionArray_GetSize(IntPtr obj);

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x5B6290", Offset = "0x5B6290", VA = "0x5B6290")]
		public static string ovr_CloudStorage2UserDirectoryPathResponse_GetPath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x5B62FC", Offset = "0x5B62FC", VA = "0x5B62FC")]
		private static extern IntPtr ovr_CloudStorage2UserDirectoryPathResponse_GetPath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x5B6394", Offset = "0x5B6394", VA = "0x5B6394")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetLocal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x5B642C", Offset = "0x5B642C", VA = "0x5B642C")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetRemote(IntPtr obj);

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x5B64C4", Offset = "0x5B64C4", VA = "0x5B64C4")]
		public static string ovr_CloudStorageData_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x5B6530", Offset = "0x5B6530", VA = "0x5B6530")]
		private static extern IntPtr ovr_CloudStorageData_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x5B65C8", Offset = "0x5B65C8", VA = "0x5B65C8")]
		public static byte[] ovr_CloudStorageData_GetData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x5B66DC", Offset = "0x5B66DC", VA = "0x5B66DC")]
		private static extern IntPtr ovr_CloudStorageData_GetData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x5B6644", Offset = "0x5B6644", VA = "0x5B6644")]
		public static extern uint ovr_CloudStorageData_GetDataSize(IntPtr obj);

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x5B6774", Offset = "0x5B6774", VA = "0x5B6774")]
		public static string ovr_CloudStorageData_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x5B67E0", Offset = "0x5B67E0", VA = "0x5B67E0")]
		private static extern IntPtr ovr_CloudStorageData_GetKey_Native(IntPtr obj);

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x5B6878", Offset = "0x5B6878", VA = "0x5B6878")]
		public static string ovr_CloudStorageMetadata_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x5B68E4", Offset = "0x5B68E4", VA = "0x5B68E4")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetBucket_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x5B697C", Offset = "0x5B697C", VA = "0x5B697C")]
		public static extern long ovr_CloudStorageMetadata_GetCounter(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x5B6A14", Offset = "0x5B6A14", VA = "0x5B6A14")]
		public static extern uint ovr_CloudStorageMetadata_GetDataSize(IntPtr obj);

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x5B6AAC", Offset = "0x5B6AAC", VA = "0x5B6AAC")]
		public static string ovr_CloudStorageMetadata_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x5B6B18", Offset = "0x5B6B18", VA = "0x5B6B18")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetExtraData_Native(IntPtr obj);

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x5B6BB0", Offset = "0x5B6BB0", VA = "0x5B6BB0")]
		public static string ovr_CloudStorageMetadata_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x5B6C1C", Offset = "0x5B6C1C", VA = "0x5B6C1C")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x5B6CB4", Offset = "0x5B6CB4", VA = "0x5B6CB4")]
		public static extern ulong ovr_CloudStorageMetadata_GetSaveTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x5B6D4C", Offset = "0x5B6D4C", VA = "0x5B6D4C")]
		public static extern CloudStorageDataStatus ovr_CloudStorageMetadata_GetStatus(IntPtr obj);

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x5B6DE4", Offset = "0x5B6DE4", VA = "0x5B6DE4")]
		public static string ovr_CloudStorageMetadata_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x5B6E50", Offset = "0x5B6E50", VA = "0x5B6E50")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetVersionHandle_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x5B6EE8", Offset = "0x5B6EE8", VA = "0x5B6EE8")]
		public static extern IntPtr ovr_CloudStorageMetadataArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x5B6F90", Offset = "0x5B6F90", VA = "0x5B6F90")]
		public static string ovr_CloudStorageMetadataArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x5B6FFC", Offset = "0x5B6FFC", VA = "0x5B6FFC")]
		private static extern IntPtr ovr_CloudStorageMetadataArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x5B7094", Offset = "0x5B7094", VA = "0x5B7094")]
		public static extern UIntPtr ovr_CloudStorageMetadataArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x5B712C", Offset = "0x5B712C", VA = "0x5B712C")]
		public static extern bool ovr_CloudStorageMetadataArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x5B71CC", Offset = "0x5B71CC", VA = "0x5B71CC")]
		public static string ovr_CloudStorageUpdateResponse_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x5B7238", Offset = "0x5B7238", VA = "0x5B7238")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x5B72D0", Offset = "0x5B72D0", VA = "0x5B72D0")]
		public static string ovr_CloudStorageUpdateResponse_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x5B733C", Offset = "0x5B733C", VA = "0x5B733C")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x5B73D4", Offset = "0x5B73D4", VA = "0x5B73D4")]
		public static extern CloudStorageUpdateStatus ovr_CloudStorageUpdateResponse_GetStatus(IntPtr obj);

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x5B746C", Offset = "0x5B746C", VA = "0x5B746C")]
		public static string ovr_CloudStorageUpdateResponse_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x5B74D8", Offset = "0x5B74D8", VA = "0x5B74D8")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetVersionHandle_Native(IntPtr obj);

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x5B7570", Offset = "0x5B7570", VA = "0x5B7570")]
		public static uint ovr_DataStore_Contains(IntPtr obj, string key)
		{
			return default(uint);
		}

		[PreserveSig]
		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x5B7630", Offset = "0x5B7630", VA = "0x5B7630")]
		private static extern uint ovr_DataStore_Contains_Native(IntPtr obj, IntPtr key);

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x5A90C0", Offset = "0x5A90C0", VA = "0x5A90C0")]
		public static string ovr_DataStore_GetKey(IntPtr obj, int index)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x5B76D8", Offset = "0x5B76D8", VA = "0x5B76D8")]
		private static extern IntPtr ovr_DataStore_GetKey_Native(IntPtr obj, int index);

		[PreserveSig]
		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x5A9028", Offset = "0x5A9028", VA = "0x5A9028")]
		public static extern UIntPtr ovr_DataStore_GetNumKeys(IntPtr obj);

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x5A913C", Offset = "0x5A913C", VA = "0x5A913C")]
		public static string ovr_DataStore_GetValue(IntPtr obj, string key)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x5B7780", Offset = "0x5B7780", VA = "0x5B7780")]
		private static extern IntPtr ovr_DataStore_GetValue_Native(IntPtr obj, IntPtr key);

		[PreserveSig]
		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x5B7828", Offset = "0x5B7828", VA = "0x5B7828")]
		public static extern int ovr_Error_GetCode(IntPtr obj);

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x5B78BC", Offset = "0x5B78BC", VA = "0x5B78BC")]
		public static string ovr_Error_GetDisplayableMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x5B7928", Offset = "0x5B7928", VA = "0x5B7928")]
		private static extern IntPtr ovr_Error_GetDisplayableMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x5B79C0", Offset = "0x5B79C0", VA = "0x5B79C0")]
		public static extern int ovr_Error_GetHttpCode(IntPtr obj);

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x5B7A58", Offset = "0x5B7A58", VA = "0x5B7A58")]
		public static string ovr_Error_GetMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x5B7AC4", Offset = "0x5B7AC4", VA = "0x5B7AC4")]
		private static extern IntPtr ovr_Error_GetMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x5B7B5C", Offset = "0x5B7B5C", VA = "0x5B7B5C")]
		public static extern IntPtr ovr_HttpTransferUpdate_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x5B7BF4", Offset = "0x5B7BF4", VA = "0x5B7BF4")]
		public static extern ulong ovr_HttpTransferUpdate_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x5B7C8C", Offset = "0x5B7C8C", VA = "0x5B7C8C")]
		public static extern UIntPtr ovr_HttpTransferUpdate_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x5B7D24", Offset = "0x5B7D24", VA = "0x5B7D24")]
		public static extern bool ovr_HttpTransferUpdate_IsCompleted(IntPtr obj);

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x5B7DC4", Offset = "0x5B7DC4", VA = "0x5B7DC4")]
		public static string ovr_InstalledApplication_GetApplicationId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x5B7E30", Offset = "0x5B7E30", VA = "0x5B7E30")]
		private static extern IntPtr ovr_InstalledApplication_GetApplicationId_Native(IntPtr obj);

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x5B7EC8", Offset = "0x5B7EC8", VA = "0x5B7EC8")]
		public static string ovr_InstalledApplication_GetPackageName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x5B7F34", Offset = "0x5B7F34", VA = "0x5B7F34")]
		private static extern IntPtr ovr_InstalledApplication_GetPackageName_Native(IntPtr obj);

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x5B7FCC", Offset = "0x5B7FCC", VA = "0x5B7FCC")]
		public static string ovr_InstalledApplication_GetStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x5B8038", Offset = "0x5B8038", VA = "0x5B8038")]
		private static extern IntPtr ovr_InstalledApplication_GetStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x5B80D0", Offset = "0x5B80D0", VA = "0x5B80D0")]
		public static extern int ovr_InstalledApplication_GetVersionCode(IntPtr obj);

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x5B8168", Offset = "0x5B8168", VA = "0x5B8168")]
		public static string ovr_InstalledApplication_GetVersionName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x5B81D4", Offset = "0x5B81D4", VA = "0x5B81D4")]
		private static extern IntPtr ovr_InstalledApplication_GetVersionName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x5B826C", Offset = "0x5B826C", VA = "0x5B826C")]
		public static extern IntPtr ovr_InstalledApplicationArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x5B8314", Offset = "0x5B8314", VA = "0x5B8314")]
		public static extern UIntPtr ovr_InstalledApplicationArray_GetSize(IntPtr obj);

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x5B83AC", Offset = "0x5B83AC", VA = "0x5B83AC")]
		public static string ovr_LanguagePackInfo_GetEnglishName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001101")]
		[Address(RVA = "0x5B8418", Offset = "0x5B8418", VA = "0x5B8418")]
		private static extern IntPtr ovr_LanguagePackInfo_GetEnglishName_Native(IntPtr obj);

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x5B84B0", Offset = "0x5B84B0", VA = "0x5B84B0")]
		public static string ovr_LanguagePackInfo_GetNativeName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001103")]
		[Address(RVA = "0x5B851C", Offset = "0x5B851C", VA = "0x5B851C")]
		private static extern IntPtr ovr_LanguagePackInfo_GetNativeName_Native(IntPtr obj);

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x5B85B4", Offset = "0x5B85B4", VA = "0x5B85B4")]
		public static string ovr_LanguagePackInfo_GetTag(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001105")]
		[Address(RVA = "0x5B8620", Offset = "0x5B8620", VA = "0x5B8620")]
		private static extern IntPtr ovr_LanguagePackInfo_GetTag_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001106")]
		[Address(RVA = "0x5B86B8", Offset = "0x5B86B8", VA = "0x5B86B8")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidBlock(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001107")]
		[Address(RVA = "0x5B8758", Offset = "0x5B8758", VA = "0x5B8758")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidCancel(IntPtr obj);

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x5B87F8", Offset = "0x5B87F8", VA = "0x5B87F8")]
		public static string ovr_LaunchDetails_GetDeeplinkMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001109")]
		[Address(RVA = "0x5B8864", Offset = "0x5B8864", VA = "0x5B8864")]
		private static extern IntPtr ovr_LaunchDetails_GetDeeplinkMessage_Native(IntPtr obj);

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x5B88FC", Offset = "0x5B88FC", VA = "0x5B88FC")]
		public static string ovr_LaunchDetails_GetLaunchSource(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600110B")]
		[Address(RVA = "0x5B8968", Offset = "0x5B8968", VA = "0x5B8968")]
		private static extern IntPtr ovr_LaunchDetails_GetLaunchSource_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600110C")]
		[Address(RVA = "0x5B8A00", Offset = "0x5B8A00", VA = "0x5B8A00")]
		public static extern LaunchType ovr_LaunchDetails_GetLaunchType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600110D")]
		[Address(RVA = "0x5B8A98", Offset = "0x5B8A98", VA = "0x5B8A98")]
		public static extern ulong ovr_LaunchDetails_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600110E")]
		[Address(RVA = "0x5B8B30", Offset = "0x5B8B30", VA = "0x5B8B30")]
		public static extern IntPtr ovr_LaunchDetails_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600110F")]
		[Address(RVA = "0x5B8BC8", Offset = "0x5B8BC8", VA = "0x5B8BC8")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001110")]
		[Address(RVA = "0x5B8C68", Offset = "0x5B8C68", VA = "0x5B8C68")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidSendRequest(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001111")]
		[Address(RVA = "0x5B8D08", Offset = "0x5B8D08", VA = "0x5B8D08")]
		public static extern bool ovr_LaunchReportFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001112")]
		[Address(RVA = "0x5B8DA8", Offset = "0x5B8DA8", VA = "0x5B8DA8")]
		public static extern ulong ovr_LaunchReportFlowResult_GetUserReportId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001113")]
		[Address(RVA = "0x5B8E40", Offset = "0x5B8E40", VA = "0x5B8E40")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001114")]
		[Address(RVA = "0x5B8EE0", Offset = "0x5B8EE0", VA = "0x5B8EE0")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidUnblock(IntPtr obj);

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x5B8F80", Offset = "0x5B8F80", VA = "0x5B8F80")]
		public static byte[] ovr_LeaderboardEntry_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001116")]
		[Address(RVA = "0x5B9094", Offset = "0x5B9094", VA = "0x5B9094")]
		private static extern IntPtr ovr_LeaderboardEntry_GetExtraData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001117")]
		[Address(RVA = "0x5B8FFC", Offset = "0x5B8FFC", VA = "0x5B8FFC")]
		public static extern uint ovr_LeaderboardEntry_GetExtraDataLength(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001118")]
		[Address(RVA = "0x5B912C", Offset = "0x5B912C", VA = "0x5B912C")]
		public static extern int ovr_LeaderboardEntry_GetRank(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001119")]
		[Address(RVA = "0x5B91C4", Offset = "0x5B91C4", VA = "0x5B91C4")]
		public static extern long ovr_LeaderboardEntry_GetScore(IntPtr obj);

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x5B925C", Offset = "0x5B925C", VA = "0x5B925C")]
		public static DateTime ovr_LeaderboardEntry_GetTimestamp(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x600111B")]
		[Address(RVA = "0x5B92C8", Offset = "0x5B92C8", VA = "0x5B92C8")]
		private static extern ulong ovr_LeaderboardEntry_GetTimestamp_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600111C")]
		[Address(RVA = "0x5B9360", Offset = "0x5B9360", VA = "0x5B9360")]
		public static extern IntPtr ovr_LeaderboardEntry_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600111D")]
		[Address(RVA = "0x5B93F8", Offset = "0x5B93F8", VA = "0x5B93F8")]
		public static extern IntPtr ovr_LeaderboardEntryArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x5B94A0", Offset = "0x5B94A0", VA = "0x5B94A0")]
		public static string ovr_LeaderboardEntryArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600111F")]
		[Address(RVA = "0x5B950C", Offset = "0x5B950C", VA = "0x5B950C")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetNextUrl_Native(IntPtr obj);

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x5B95A4", Offset = "0x5B95A4", VA = "0x5B95A4")]
		public static string ovr_LeaderboardEntryArray_GetPreviousUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001121")]
		[Address(RVA = "0x5B9610", Offset = "0x5B9610", VA = "0x5B9610")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetPreviousUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001122")]
		[Address(RVA = "0x5B96A8", Offset = "0x5B96A8", VA = "0x5B96A8")]
		public static extern UIntPtr ovr_LeaderboardEntryArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001123")]
		[Address(RVA = "0x5B9740", Offset = "0x5B9740", VA = "0x5B9740")]
		public static extern ulong ovr_LeaderboardEntryArray_GetTotalCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001124")]
		[Address(RVA = "0x5B97D8", Offset = "0x5B97D8", VA = "0x5B97D8")]
		public static extern bool ovr_LeaderboardEntryArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001125")]
		[Address(RVA = "0x5B9878", Offset = "0x5B9878", VA = "0x5B9878")]
		public static extern bool ovr_LeaderboardEntryArray_HasPreviousPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001126")]
		[Address(RVA = "0x5B9918", Offset = "0x5B9918", VA = "0x5B9918")]
		public static extern bool ovr_LeaderboardUpdateStatus_GetDidUpdate(IntPtr obj);

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x5B99B8", Offset = "0x5B99B8", VA = "0x5B99B8")]
		public static string ovr_LinkedAccount_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001128")]
		[Address(RVA = "0x5B9A24", Offset = "0x5B9A24", VA = "0x5B9A24")]
		private static extern IntPtr ovr_LinkedAccount_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001129")]
		[Address(RVA = "0x5B9ABC", Offset = "0x5B9ABC", VA = "0x5B9ABC")]
		public static extern ServiceProvider ovr_LinkedAccount_GetServiceProvider(IntPtr obj);

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x5B9B54", Offset = "0x5B9B54", VA = "0x5B9B54")]
		public static string ovr_LinkedAccount_GetUserId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600112B")]
		[Address(RVA = "0x5B9BC0", Offset = "0x5B9BC0", VA = "0x5B9BC0")]
		private static extern IntPtr ovr_LinkedAccount_GetUserId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600112C")]
		[Address(RVA = "0x5B9C58", Offset = "0x5B9C58", VA = "0x5B9C58")]
		public static extern IntPtr ovr_LinkedAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600112D")]
		[Address(RVA = "0x5B9D00", Offset = "0x5B9D00", VA = "0x5B9D00")]
		public static extern UIntPtr ovr_LinkedAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600112E")]
		[Address(RVA = "0x5B9D98", Offset = "0x5B9D98", VA = "0x5B9D98")]
		public static extern bool ovr_LivestreamingApplicationStatus_GetStreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600112F")]
		[Address(RVA = "0x5B9E38", Offset = "0x5B9E38", VA = "0x5B9E38")]
		public static extern LivestreamingStartStatus ovr_LivestreamingStartResult_GetStreamingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001130")]
		[Address(RVA = "0x5B9ED0", Offset = "0x5B9ED0", VA = "0x5B9ED0")]
		public static extern bool ovr_LivestreamingStatus_GetCommentsVisible(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001131")]
		[Address(RVA = "0x5B9F70", Offset = "0x5B9F70", VA = "0x5B9F70")]
		public static extern bool ovr_LivestreamingStatus_GetIsPaused(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001132")]
		[Address(RVA = "0x5BA010", Offset = "0x5BA010", VA = "0x5BA010")]
		public static extern bool ovr_LivestreamingStatus_GetLivestreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001133")]
		[Address(RVA = "0x5BA0B0", Offset = "0x5BA0B0", VA = "0x5BA0B0")]
		public static extern int ovr_LivestreamingStatus_GetLivestreamingType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001134")]
		[Address(RVA = "0x5BA148", Offset = "0x5BA148", VA = "0x5BA148")]
		public static extern bool ovr_LivestreamingStatus_GetMicEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001135")]
		[Address(RVA = "0x5BA1E8", Offset = "0x5BA1E8", VA = "0x5BA1E8")]
		public static extern int ovr_LivestreamingVideoStats_GetCommentCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001136")]
		[Address(RVA = "0x5BA280", Offset = "0x5BA280", VA = "0x5BA280")]
		public static extern int ovr_LivestreamingVideoStats_GetReactionCount(IntPtr obj);

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x5BA318", Offset = "0x5BA318", VA = "0x5BA318")]
		public static string ovr_LivestreamingVideoStats_GetTotalViews(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001138")]
		[Address(RVA = "0x5BA384", Offset = "0x5BA384", VA = "0x5BA384")]
		private static extern IntPtr ovr_LivestreamingVideoStats_GetTotalViews_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001139")]
		[Address(RVA = "0x5BA41C", Offset = "0x5BA41C", VA = "0x5BA41C")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshot_GetCandidates(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600113A")]
		[Address(RVA = "0x5BA4B4", Offset = "0x5BA4B4", VA = "0x5BA4B4")]
		public static extern double ovr_MatchmakingAdminSnapshot_GetMyCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600113B")]
		[Address(RVA = "0x5BA54C", Offset = "0x5BA54C", VA = "0x5BA54C")]
		public static extern bool ovr_MatchmakingAdminSnapshotCandidate_GetCanMatch(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600113C")]
		[Address(RVA = "0x5BA5EC", Offset = "0x5BA5EC", VA = "0x5BA5EC")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetMyTotalScore(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600113D")]
		[Address(RVA = "0x5BA684", Offset = "0x5BA684", VA = "0x5BA684")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600113E")]
		[Address(RVA = "0x5BA71C", Offset = "0x5BA71C", VA = "0x5BA71C")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirTotalScore(IntPtr obj);

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x5BA7B4", Offset = "0x5BA7B4", VA = "0x5BA7B4")]
		public static string ovr_MatchmakingAdminSnapshotCandidate_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001140")]
		[Address(RVA = "0x5BA820", Offset = "0x5BA820", VA = "0x5BA820")]
		private static extern IntPtr ovr_MatchmakingAdminSnapshotCandidate_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001141")]
		[Address(RVA = "0x5BA8B8", Offset = "0x5BA8B8", VA = "0x5BA8B8")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6001142")]
		[Address(RVA = "0x5BA960", Offset = "0x5BA960", VA = "0x5BA960")]
		public static extern UIntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001143")]
		[Address(RVA = "0x5BA9F8", Offset = "0x5BA9F8", VA = "0x5BA9F8")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001144")]
		[Address(RVA = "0x5BAA90", Offset = "0x5BAA90", VA = "0x5BAA90")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetRooms(IntPtr obj);

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x5BAB28", Offset = "0x5BAB28", VA = "0x5BAB28")]
		public static string ovr_MatchmakingCandidate_GetEntryHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001146")]
		[Address(RVA = "0x5BAB94", Offset = "0x5BAB94", VA = "0x5BAB94")]
		private static extern IntPtr ovr_MatchmakingCandidate_GetEntryHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001147")]
		[Address(RVA = "0x5BAC2C", Offset = "0x5BAC2C", VA = "0x5BAC2C")]
		public static extern ulong ovr_MatchmakingCandidate_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001148")]
		[Address(RVA = "0x5BACC4", Offset = "0x5BACC4", VA = "0x5BACC4")]
		public static extern IntPtr ovr_MatchmakingCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x5BAD6C", Offset = "0x5BAD6C", VA = "0x5BAD6C")]
		public static string ovr_MatchmakingCandidateArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600114A")]
		[Address(RVA = "0x5BADD8", Offset = "0x5BADD8", VA = "0x5BADD8")]
		private static extern IntPtr ovr_MatchmakingCandidateArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600114B")]
		[Address(RVA = "0x5BAE70", Offset = "0x5BAE70", VA = "0x5BAE70")]
		public static extern UIntPtr ovr_MatchmakingCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600114C")]
		[Address(RVA = "0x5BAF08", Offset = "0x5BAF08", VA = "0x5BAF08")]
		public static extern bool ovr_MatchmakingCandidateArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600114D")]
		[Address(RVA = "0x5BAFA8", Offset = "0x5BAFA8", VA = "0x5BAFA8")]
		public static extern IntPtr ovr_MatchmakingEnqueueResult_GetAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600114E")]
		[Address(RVA = "0x5BB040", Offset = "0x5BB040", VA = "0x5BB040")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetAverageWait(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600114F")]
		[Address(RVA = "0x5BB0D8", Offset = "0x5BB0D8", VA = "0x5BB0D8")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMatchesInLastHourCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001150")]
		[Address(RVA = "0x5BB170", Offset = "0x5BB170", VA = "0x5BB170")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMaxExpectedWait(IntPtr obj);

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x5BB208", Offset = "0x5BB208", VA = "0x5BB208")]
		public static string ovr_MatchmakingEnqueueResult_GetPool(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001152")]
		[Address(RVA = "0x5BB274", Offset = "0x5BB274", VA = "0x5BB274")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetPool_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001153")]
		[Address(RVA = "0x5BB30C", Offset = "0x5BB30C", VA = "0x5BB30C")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetRecentMatchPercentage(IntPtr obj);

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x5BB3A4", Offset = "0x5BB3A4", VA = "0x5BB3A4")]
		public static string ovr_MatchmakingEnqueueResult_GetRequestHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001155")]
		[Address(RVA = "0x5BB410", Offset = "0x5BB410", VA = "0x5BB410")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetRequestHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001156")]
		[Address(RVA = "0x5BB4A8", Offset = "0x5BB4A8", VA = "0x5BB4A8")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001157")]
		[Address(RVA = "0x5BB540", Offset = "0x5BB540", VA = "0x5BB540")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001158")]
		[Address(RVA = "0x5BB5D8", Offset = "0x5BB5D8", VA = "0x5BB5D8")]
		public static extern ulong ovr_MatchmakingEnqueuedUser_GetAdditionalUserID(IntPtr obj, uint index);

		[PreserveSig]
		[Token(Token = "0x6001159")]
		[Address(RVA = "0x5BB680", Offset = "0x5BB680", VA = "0x5BB680")]
		public static extern uint ovr_MatchmakingEnqueuedUser_GetAdditionalUserIDsSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600115A")]
		[Address(RVA = "0x5BB718", Offset = "0x5BB718", VA = "0x5BB718")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetCustomData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600115B")]
		[Address(RVA = "0x5BB7B0", Offset = "0x5BB7B0", VA = "0x5BB7B0")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600115C")]
		[Address(RVA = "0x5BB848", Offset = "0x5BB848", VA = "0x5BB848")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUserArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600115D")]
		[Address(RVA = "0x5BB8F0", Offset = "0x5BB8F0", VA = "0x5BB8F0")]
		public static extern UIntPtr ovr_MatchmakingEnqueuedUserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600115E")]
		[Address(RVA = "0x5BB988", Offset = "0x5BB988", VA = "0x5BB988")]
		public static extern ulong ovr_MatchmakingNotification_GetAddedByUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600115F")]
		[Address(RVA = "0x5BBA20", Offset = "0x5BBA20", VA = "0x5BBA20")]
		public static extern IntPtr ovr_MatchmakingNotification_GetRoom(IntPtr obj);

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x5BBAB8", Offset = "0x5BBAB8", VA = "0x5BBAB8")]
		public static string ovr_MatchmakingNotification_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001161")]
		[Address(RVA = "0x5BBB24", Offset = "0x5BBB24", VA = "0x5BBB24")]
		private static extern IntPtr ovr_MatchmakingNotification_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001162")]
		[Address(RVA = "0x5BBBBC", Offset = "0x5BBBBC", VA = "0x5BBBBC")]
		public static extern uint ovr_MatchmakingRoom_GetPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001163")]
		[Address(RVA = "0x5BBC54", Offset = "0x5BBC54", VA = "0x5BBC54")]
		public static extern IntPtr ovr_MatchmakingRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001164")]
		[Address(RVA = "0x5BBCEC", Offset = "0x5BBCEC", VA = "0x5BBCEC")]
		public static extern bool ovr_MatchmakingRoom_HasPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001165")]
		[Address(RVA = "0x5BBD8C", Offset = "0x5BBD8C", VA = "0x5BBD8C")]
		public static extern IntPtr ovr_MatchmakingRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6001166")]
		[Address(RVA = "0x5BBE34", Offset = "0x5BBE34", VA = "0x5BBE34")]
		public static extern UIntPtr ovr_MatchmakingRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001167")]
		[Address(RVA = "0x5BBECC", Offset = "0x5BBECC", VA = "0x5BBECC")]
		public static extern uint ovr_MatchmakingStats_GetDrawCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001168")]
		[Address(RVA = "0x5BBF64", Offset = "0x5BBF64", VA = "0x5BBF64")]
		public static extern uint ovr_MatchmakingStats_GetLossCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001169")]
		[Address(RVA = "0x5BBFFC", Offset = "0x5BBFFC", VA = "0x5BBFFC")]
		public static extern uint ovr_MatchmakingStats_GetSkillLevel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116A")]
		[Address(RVA = "0x5BC094", Offset = "0x5BC094", VA = "0x5BC094")]
		public static extern uint ovr_MatchmakingStats_GetWinCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116B")]
		[Address(RVA = "0x5BC12C", Offset = "0x5BC12C", VA = "0x5BC12C")]
		public static extern IntPtr ovr_Message_GetAbuseReportRecording(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116C")]
		[Address(RVA = "0x5BC1C4", Offset = "0x5BC1C4", VA = "0x5BC1C4")]
		public static extern IntPtr ovr_Message_GetAchievementDefinitionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116D")]
		[Address(RVA = "0x5BC25C", Offset = "0x5BC25C", VA = "0x5BC25C")]
		public static extern IntPtr ovr_Message_GetAchievementProgressArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116E")]
		[Address(RVA = "0x5BC2F4", Offset = "0x5BC2F4", VA = "0x5BC2F4")]
		public static extern IntPtr ovr_Message_GetAchievementUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600116F")]
		[Address(RVA = "0x5BC38C", Offset = "0x5BC38C", VA = "0x5BC38C")]
		public static extern IntPtr ovr_Message_GetApplicationVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001170")]
		[Address(RVA = "0x5BC424", Offset = "0x5BC424", VA = "0x5BC424")]
		public static extern IntPtr ovr_Message_GetAssetDetails(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001171")]
		[Address(RVA = "0x5BC4BC", Offset = "0x5BC4BC", VA = "0x5BC4BC")]
		public static extern IntPtr ovr_Message_GetAssetDetailsArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001172")]
		[Address(RVA = "0x5BC554", Offset = "0x5BC554", VA = "0x5BC554")]
		public static extern IntPtr ovr_Message_GetAssetFileDeleteResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001173")]
		[Address(RVA = "0x5BC5EC", Offset = "0x5BC5EC", VA = "0x5BC5EC")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadCancelResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001174")]
		[Address(RVA = "0x5BC684", Offset = "0x5BC684", VA = "0x5BC684")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x5BC71C", Offset = "0x5BC71C", VA = "0x5BC71C")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001176")]
		[Address(RVA = "0x5BC7B4", Offset = "0x5BC7B4", VA = "0x5BC7B4")]
		public static extern IntPtr ovr_Message_GetCalApplicationFinalized(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001177")]
		[Address(RVA = "0x5BC84C", Offset = "0x5BC84C", VA = "0x5BC84C")]
		public static extern IntPtr ovr_Message_GetCalApplicationProposed(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001178")]
		[Address(RVA = "0x5BC8E4", Offset = "0x5BC8E4", VA = "0x5BC8E4")]
		public static extern IntPtr ovr_Message_GetCalApplicationSuggestionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001179")]
		[Address(RVA = "0x5BC97C", Offset = "0x5BC97C", VA = "0x5BC97C")]
		public static extern IntPtr ovr_Message_GetCloudStorageConflictMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117A")]
		[Address(RVA = "0x5BCA14", Offset = "0x5BCA14", VA = "0x5BCA14")]
		public static extern IntPtr ovr_Message_GetCloudStorageData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117B")]
		[Address(RVA = "0x5BCAAC", Offset = "0x5BCAAC", VA = "0x5BCAAC")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117C")]
		[Address(RVA = "0x5BCB44", Offset = "0x5BCB44", VA = "0x5BCB44")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadataArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117D")]
		[Address(RVA = "0x5BCBDC", Offset = "0x5BCBDC", VA = "0x5BCBDC")]
		public static extern IntPtr ovr_Message_GetCloudStorageUpdateResponse(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117E")]
		[Address(RVA = "0x5BCC74", Offset = "0x5BCC74", VA = "0x5BCC74")]
		public static extern IntPtr ovr_Message_GetError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600117F")]
		[Address(RVA = "0x5BCD0C", Offset = "0x5BCD0C", VA = "0x5BCD0C")]
		public static extern IntPtr ovr_Message_GetHttpTransferUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001180")]
		[Address(RVA = "0x5BCDA4", Offset = "0x5BCDA4", VA = "0x5BCDA4")]
		public static extern IntPtr ovr_Message_GetInstalledApplicationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001181")]
		[Address(RVA = "0x5BCE3C", Offset = "0x5BCE3C", VA = "0x5BCE3C")]
		public static extern IntPtr ovr_Message_GetLaunchBlockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001182")]
		[Address(RVA = "0x5BCED4", Offset = "0x5BCED4", VA = "0x5BCED4")]
		public static extern IntPtr ovr_Message_GetLaunchFriendRequestFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001183")]
		[Address(RVA = "0x5BCF6C", Offset = "0x5BCF6C", VA = "0x5BCF6C")]
		public static extern IntPtr ovr_Message_GetLaunchReportFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001184")]
		[Address(RVA = "0x5BD004", Offset = "0x5BD004", VA = "0x5BD004")]
		public static extern IntPtr ovr_Message_GetLaunchUnblockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001185")]
		[Address(RVA = "0x5BD09C", Offset = "0x5BD09C", VA = "0x5BD09C")]
		public static extern IntPtr ovr_Message_GetLeaderboardEntryArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001186")]
		[Address(RVA = "0x5BD134", Offset = "0x5BD134", VA = "0x5BD134")]
		public static extern IntPtr ovr_Message_GetLeaderboardUpdateStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001187")]
		[Address(RVA = "0x5BD1CC", Offset = "0x5BD1CC", VA = "0x5BD1CC")]
		public static extern IntPtr ovr_Message_GetLinkedAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001188")]
		[Address(RVA = "0x5BD264", Offset = "0x5BD264", VA = "0x5BD264")]
		public static extern IntPtr ovr_Message_GetLivestreamingApplicationStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001189")]
		[Address(RVA = "0x5BD2FC", Offset = "0x5BD2FC", VA = "0x5BD2FC")]
		public static extern IntPtr ovr_Message_GetLivestreamingStartResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118A")]
		[Address(RVA = "0x5BD394", Offset = "0x5BD394", VA = "0x5BD394")]
		public static extern IntPtr ovr_Message_GetLivestreamingStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118B")]
		[Address(RVA = "0x5BD42C", Offset = "0x5BD42C", VA = "0x5BD42C")]
		public static extern IntPtr ovr_Message_GetLivestreamingVideoStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118C")]
		[Address(RVA = "0x5BD4C4", Offset = "0x5BD4C4", VA = "0x5BD4C4")]
		public static extern IntPtr ovr_Message_GetMatchmakingAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118D")]
		[Address(RVA = "0x5BD55C", Offset = "0x5BD55C", VA = "0x5BD55C")]
		public static extern IntPtr ovr_Message_GetMatchmakingBrowseResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118E")]
		[Address(RVA = "0x5BD5F4", Offset = "0x5BD5F4", VA = "0x5BD5F4")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600118F")]
		[Address(RVA = "0x5BD68C", Offset = "0x5BD68C", VA = "0x5BD68C")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResultAndRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001190")]
		[Address(RVA = "0x5BD724", Offset = "0x5BD724", VA = "0x5BD724")]
		public static extern IntPtr ovr_Message_GetMatchmakingRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001191")]
		[Address(RVA = "0x5BD7BC", Offset = "0x5BD7BC", VA = "0x5BD7BC")]
		public static extern IntPtr ovr_Message_GetMatchmakingStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001192")]
		[Address(RVA = "0x5BD854", Offset = "0x5BD854", VA = "0x5BD854")]
		public static extern IntPtr ovr_Message_GetNativeMessage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001193")]
		[Address(RVA = "0x5BD8EC", Offset = "0x5BD8EC", VA = "0x5BD8EC")]
		public static extern IntPtr ovr_Message_GetNetworkingPeer(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001194")]
		[Address(RVA = "0x5BD984", Offset = "0x5BD984", VA = "0x5BD984")]
		public static extern IntPtr ovr_Message_GetOrgScopedID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001195")]
		[Address(RVA = "0x5BDA1C", Offset = "0x5BDA1C", VA = "0x5BDA1C")]
		public static extern IntPtr ovr_Message_GetParty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001196")]
		[Address(RVA = "0x5BDAB4", Offset = "0x5BDAB4", VA = "0x5BDAB4")]
		public static extern IntPtr ovr_Message_GetPartyID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001197")]
		[Address(RVA = "0x5BDB4C", Offset = "0x5BDB4C", VA = "0x5BDB4C")]
		public static extern IntPtr ovr_Message_GetPidArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001198")]
		[Address(RVA = "0x5BDBE4", Offset = "0x5BDBE4", VA = "0x5BDBE4")]
		public static extern IntPtr ovr_Message_GetPingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001199")]
		[Address(RVA = "0x5BDC7C", Offset = "0x5BDC7C", VA = "0x5BDC7C")]
		public static extern IntPtr ovr_Message_GetPlatformInitialize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119A")]
		[Address(RVA = "0x5BDD14", Offset = "0x5BDD14", VA = "0x5BDD14")]
		public static extern IntPtr ovr_Message_GetProductArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119B")]
		[Address(RVA = "0x5BDDAC", Offset = "0x5BDDAC", VA = "0x5BDDAC")]
		public static extern IntPtr ovr_Message_GetPurchase(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119C")]
		[Address(RVA = "0x5BDE44", Offset = "0x5BDE44", VA = "0x5BDE44")]
		public static extern IntPtr ovr_Message_GetPurchaseArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119D")]
		[Address(RVA = "0x5BDEDC", Offset = "0x5BDEDC", VA = "0x5BDEDC")]
		public static extern ulong ovr_Message_GetRequestID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119E")]
		[Address(RVA = "0x5BDF74", Offset = "0x5BDF74", VA = "0x5BDF74")]
		public static extern IntPtr ovr_Message_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600119F")]
		[Address(RVA = "0x5BE00C", Offset = "0x5BE00C", VA = "0x5BE00C")]
		public static extern IntPtr ovr_Message_GetRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x5BE0A4", Offset = "0x5BE0A4", VA = "0x5BE0A4")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotification(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x5BE13C", Offset = "0x5BE13C", VA = "0x5BE13C")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotificationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x5BE1D4", Offset = "0x5BE1D4", VA = "0x5BE1D4")]
		public static extern IntPtr ovr_Message_GetSdkAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x5BE26C", Offset = "0x5BE26C", VA = "0x5BE26C")]
		public static extern IntPtr ovr_Message_GetShareMediaResult(IntPtr obj);

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x5BE304", Offset = "0x5BE304", VA = "0x5BE304")]
		public static string ovr_Message_GetString(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x5BE370", Offset = "0x5BE370", VA = "0x5BE370")]
		private static extern IntPtr ovr_Message_GetString_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x5BE408", Offset = "0x5BE408", VA = "0x5BE408")]
		public static extern IntPtr ovr_Message_GetSystemPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x5BE4A0", Offset = "0x5BE4A0", VA = "0x5BE4A0")]
		public static extern IntPtr ovr_Message_GetSystemVoipState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x5BE538", Offset = "0x5BE538", VA = "0x5BE538")]
		public static extern Message.MessageType ovr_Message_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x5BE5D0", Offset = "0x5BE5D0", VA = "0x5BE5D0")]
		public static extern IntPtr ovr_Message_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x5BE668", Offset = "0x5BE668", VA = "0x5BE668")]
		public static extern IntPtr ovr_Message_GetUserAndRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x5BE700", Offset = "0x5BE700", VA = "0x5BE700")]
		public static extern IntPtr ovr_Message_GetUserArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x5BE798", Offset = "0x5BE798", VA = "0x5BE798")]
		public static extern IntPtr ovr_Message_GetUserProof(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x5BE830", Offset = "0x5BE830", VA = "0x5BE830")]
		public static extern IntPtr ovr_Message_GetUserReportID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x5BE8C8", Offset = "0x5BE8C8", VA = "0x5BE8C8")]
		public static extern bool ovr_Message_IsError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x5BE968", Offset = "0x5BE968", VA = "0x5BE968")]
		public static extern UIntPtr ovr_Microphone_GetNumSamplesAvailable(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x5BEA00", Offset = "0x5BEA00", VA = "0x5BEA00")]
		public static extern UIntPtr ovr_Microphone_GetOutputBufferMaxSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x5BEA98", Offset = "0x5BEA98", VA = "0x5BEA98")]
		public static extern UIntPtr ovr_Microphone_GetPCM(IntPtr obj, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x5BEB50", Offset = "0x5BEB50", VA = "0x5BEB50")]
		public static extern UIntPtr ovr_Microphone_GetPCMFloat(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x5BEC08", Offset = "0x5BEC08", VA = "0x5BEC08")]
		public static extern UIntPtr ovr_Microphone_ReadData(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x5BECC0", Offset = "0x5BECC0", VA = "0x5BECC0")]
		public static extern void ovr_Microphone_SetAcceptableRecordingDelayHint(IntPtr obj, UIntPtr delayMs);

		[PreserveSig]
		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x5BED68", Offset = "0x5BED68", VA = "0x5BED68")]
		public static extern void ovr_Microphone_Start(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x5BEE00", Offset = "0x5BEE00", VA = "0x5BEE00")]
		public static extern void ovr_Microphone_Stop(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x5BEE98", Offset = "0x5BEE98", VA = "0x5BEE98")]
		public static extern ulong ovr_NetworkingPeer_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x5BEF30", Offset = "0x5BEF30", VA = "0x5BEF30")]
		public static extern PeerConnectionState ovr_NetworkingPeer_GetState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x5BEFC8", Offset = "0x5BEFC8", VA = "0x5BEFC8")]
		public static extern ulong ovr_OrgScopedID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x5BF060", Offset = "0x5BF060", VA = "0x5BF060")]
		public static extern void ovr_Packet_Free(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x5BF0F8", Offset = "0x5BF0F8", VA = "0x5BF0F8")]
		public static extern IntPtr ovr_Packet_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x5BF190", Offset = "0x5BF190", VA = "0x5BF190")]
		public static extern SendPolicy ovr_Packet_GetSendPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x5BF228", Offset = "0x5BF228", VA = "0x5BF228")]
		public static extern ulong ovr_Packet_GetSenderID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x5BF2C0", Offset = "0x5BF2C0", VA = "0x5BF2C0")]
		public static extern UIntPtr ovr_Packet_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x5BF358", Offset = "0x5BF358", VA = "0x5BF358")]
		public static extern ulong ovr_Party_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x5BF3F0", Offset = "0x5BF3F0", VA = "0x5BF3F0")]
		public static extern IntPtr ovr_Party_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x5BF488", Offset = "0x5BF488", VA = "0x5BF488")]
		public static extern IntPtr ovr_Party_GetLeader(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x5BF520", Offset = "0x5BF520", VA = "0x5BF520")]
		public static extern IntPtr ovr_Party_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x5BF5B4", Offset = "0x5BF5B4", VA = "0x5BF5B4")]
		public static extern IntPtr ovr_Party_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x5BF64C", Offset = "0x5BF64C", VA = "0x5BF64C")]
		public static extern ulong ovr_PartyID_GetID(IntPtr obj);

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x5BF6E0", Offset = "0x5BF6E0", VA = "0x5BF6E0")]
		public static string ovr_Pid_GetId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x5BF74C", Offset = "0x5BF74C", VA = "0x5BF74C")]
		private static extern IntPtr ovr_Pid_GetId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x5BF7E4", Offset = "0x5BF7E4", VA = "0x5BF7E4")]
		public static extern IntPtr ovr_PidArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x5BF88C", Offset = "0x5BF88C", VA = "0x5BF88C")]
		public static extern UIntPtr ovr_PidArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x5BF924", Offset = "0x5BF924", VA = "0x5BF924")]
		public static extern ulong ovr_PingResult_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x5BF9BC", Offset = "0x5BF9BC", VA = "0x5BF9BC")]
		public static extern ulong ovr_PingResult_GetPingTimeUsec(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x5BFA54", Offset = "0x5BFA54", VA = "0x5BFA54")]
		public static extern bool ovr_PingResult_IsTimeout(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x5BFAF4", Offset = "0x5BFAF4", VA = "0x5BFAF4")]
		public static extern PlatformInitializeResult ovr_PlatformInitialize_GetResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x5BFB8C", Offset = "0x5BFB8C", VA = "0x5BFB8C")]
		public static extern uint ovr_Price_GetAmountInHundredths(IntPtr obj);

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x5BFC24", Offset = "0x5BFC24", VA = "0x5BFC24")]
		public static string ovr_Price_GetCurrency(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x5BFC90", Offset = "0x5BFC90", VA = "0x5BFC90")]
		private static extern IntPtr ovr_Price_GetCurrency_Native(IntPtr obj);

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x5BFD28", Offset = "0x5BFD28", VA = "0x5BFD28")]
		public static string ovr_Price_GetFormatted(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x5BFD94", Offset = "0x5BFD94", VA = "0x5BFD94")]
		private static extern IntPtr ovr_Price_GetFormatted_Native(IntPtr obj);

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x5BFE2C", Offset = "0x5BFE2C", VA = "0x5BFE2C")]
		public static string ovr_Product_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x5BFE98", Offset = "0x5BFE98", VA = "0x5BFE98")]
		private static extern IntPtr ovr_Product_GetDescription_Native(IntPtr obj);

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x5BFF30", Offset = "0x5BFF30", VA = "0x5BFF30")]
		public static string ovr_Product_GetFormattedPrice(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x5BFF9C", Offset = "0x5BFF9C", VA = "0x5BFF9C")]
		private static extern IntPtr ovr_Product_GetFormattedPrice_Native(IntPtr obj);

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x5C0034", Offset = "0x5C0034", VA = "0x5C0034")]
		public static string ovr_Product_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x5C00A0", Offset = "0x5C00A0", VA = "0x5C00A0")]
		private static extern IntPtr ovr_Product_GetName_Native(IntPtr obj);

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x5C0138", Offset = "0x5C0138", VA = "0x5C0138")]
		public static string ovr_Product_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x5C01A4", Offset = "0x5C01A4", VA = "0x5C01A4")]
		private static extern IntPtr ovr_Product_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x5C023C", Offset = "0x5C023C", VA = "0x5C023C")]
		public static extern IntPtr ovr_ProductArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x5C02E4", Offset = "0x5C02E4", VA = "0x5C02E4")]
		public static string ovr_ProductArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x5C0350", Offset = "0x5C0350", VA = "0x5C0350")]
		private static extern IntPtr ovr_ProductArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x5C03E8", Offset = "0x5C03E8", VA = "0x5C03E8")]
		public static extern UIntPtr ovr_ProductArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x5C0480", Offset = "0x5C0480", VA = "0x5C0480")]
		public static extern bool ovr_ProductArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x5C0520", Offset = "0x5C0520", VA = "0x5C0520")]
		public static DateTime ovr_Purchase_GetExpirationTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x5C058C", Offset = "0x5C058C", VA = "0x5C058C")]
		private static extern ulong ovr_Purchase_GetExpirationTime_Native(IntPtr obj);

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x5C0624", Offset = "0x5C0624", VA = "0x5C0624")]
		public static DateTime ovr_Purchase_GetGrantTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x5C0690", Offset = "0x5C0690", VA = "0x5C0690")]
		private static extern ulong ovr_Purchase_GetGrantTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x5C0728", Offset = "0x5C0728", VA = "0x5C0728")]
		public static extern ulong ovr_Purchase_GetPurchaseID(IntPtr obj);

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x5C07C0", Offset = "0x5C07C0", VA = "0x5C07C0")]
		public static string ovr_Purchase_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x5C082C", Offset = "0x5C082C", VA = "0x5C082C")]
		private static extern IntPtr ovr_Purchase_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x5C08C4", Offset = "0x5C08C4", VA = "0x5C08C4")]
		public static extern IntPtr ovr_PurchaseArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x5C096C", Offset = "0x5C096C", VA = "0x5C096C")]
		public static string ovr_PurchaseArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x5C09D8", Offset = "0x5C09D8", VA = "0x5C09D8")]
		private static extern IntPtr ovr_PurchaseArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x5C0A70", Offset = "0x5C0A70", VA = "0x5C0A70")]
		public static extern UIntPtr ovr_PurchaseArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x5C0B08", Offset = "0x5C0B08", VA = "0x5C0B08")]
		public static extern bool ovr_PurchaseArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x5C0BA8", Offset = "0x5C0BA8", VA = "0x5C0BA8")]
		public static extern ulong ovr_Room_GetApplicationID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x5C0C40", Offset = "0x5C0C40", VA = "0x5C0C40")]
		public static extern IntPtr ovr_Room_GetDataStore(IntPtr obj);

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x5C0CD8", Offset = "0x5C0CD8", VA = "0x5C0CD8")]
		public static string ovr_Room_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x5C0D44", Offset = "0x5C0D44", VA = "0x5C0D44")]
		private static extern IntPtr ovr_Room_GetDescription_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x5C0DDC", Offset = "0x5C0DDC", VA = "0x5C0DDC")]
		public static extern ulong ovr_Room_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x5C0E74", Offset = "0x5C0E74", VA = "0x5C0E74")]
		public static extern IntPtr ovr_Room_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x5C0F0C", Offset = "0x5C0F0C", VA = "0x5C0F0C")]
		public static extern bool ovr_Room_GetIsMembershipLocked(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x5C0FAC", Offset = "0x5C0FAC", VA = "0x5C0FAC")]
		public static extern RoomJoinPolicy ovr_Room_GetJoinPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x5C1044", Offset = "0x5C1044", VA = "0x5C1044")]
		public static extern RoomJoinability ovr_Room_GetJoinability(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x5C10DC", Offset = "0x5C10DC", VA = "0x5C10DC")]
		public static extern IntPtr ovr_Room_GetMatchedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x5C1174", Offset = "0x5C1174", VA = "0x5C1174")]
		public static extern uint ovr_Room_GetMaxUsers(IntPtr obj);

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x5C120C", Offset = "0x5C120C", VA = "0x5C120C")]
		public static string ovr_Room_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x5C1278", Offset = "0x5C1278", VA = "0x5C1278")]
		private static extern IntPtr ovr_Room_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x5C1310", Offset = "0x5C1310", VA = "0x5C1310")]
		public static extern IntPtr ovr_Room_GetOwner(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x5C13A4", Offset = "0x5C13A4", VA = "0x5C13A4")]
		public static extern RoomType ovr_Room_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x5C143C", Offset = "0x5C143C", VA = "0x5C143C")]
		public static extern IntPtr ovr_Room_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x5C14D0", Offset = "0x5C14D0", VA = "0x5C14D0")]
		public static extern uint ovr_Room_GetVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x5C1568", Offset = "0x5C1568", VA = "0x5C1568")]
		public static extern IntPtr ovr_RoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x5C1610", Offset = "0x5C1610", VA = "0x5C1610")]
		public static string ovr_RoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x5C167C", Offset = "0x5C167C", VA = "0x5C167C")]
		private static extern IntPtr ovr_RoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x5C1714", Offset = "0x5C1714", VA = "0x5C1714")]
		public static extern UIntPtr ovr_RoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001200")]
		[Address(RVA = "0x5C17AC", Offset = "0x5C17AC", VA = "0x5C17AC")]
		public static extern bool ovr_RoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001201")]
		[Address(RVA = "0x5C184C", Offset = "0x5C184C", VA = "0x5C184C")]
		public static extern ulong ovr_RoomInviteNotification_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001202")]
		[Address(RVA = "0x5C18E4", Offset = "0x5C18E4", VA = "0x5C18E4")]
		public static extern ulong ovr_RoomInviteNotification_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001203")]
		[Address(RVA = "0x5C197C", Offset = "0x5C197C", VA = "0x5C197C")]
		public static extern ulong ovr_RoomInviteNotification_GetSenderID(IntPtr obj);

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x5C1A14", Offset = "0x5C1A14", VA = "0x5C1A14")]
		public static DateTime ovr_RoomInviteNotification_GetSentTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6001205")]
		[Address(RVA = "0x5C1A80", Offset = "0x5C1A80", VA = "0x5C1A80")]
		private static extern ulong ovr_RoomInviteNotification_GetSentTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001206")]
		[Address(RVA = "0x5C1B18", Offset = "0x5C1B18", VA = "0x5C1B18")]
		public static extern IntPtr ovr_RoomInviteNotificationArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x5C1BC0", Offset = "0x5C1BC0", VA = "0x5C1BC0")]
		public static string ovr_RoomInviteNotificationArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001208")]
		[Address(RVA = "0x5C1C2C", Offset = "0x5C1C2C", VA = "0x5C1C2C")]
		private static extern IntPtr ovr_RoomInviteNotificationArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001209")]
		[Address(RVA = "0x5C1CC4", Offset = "0x5C1CC4", VA = "0x5C1CC4")]
		public static extern UIntPtr ovr_RoomInviteNotificationArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600120A")]
		[Address(RVA = "0x5C1D5C", Offset = "0x5C1D5C", VA = "0x5C1D5C")]
		public static extern bool ovr_RoomInviteNotificationArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600120B")]
		[Address(RVA = "0x5C1DFC", Offset = "0x5C1DFC", VA = "0x5C1DFC")]
		public static extern SdkAccountType ovr_SdkAccount_GetAccountType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600120C")]
		[Address(RVA = "0x5C1E94", Offset = "0x5C1E94", VA = "0x5C1E94")]
		public static extern ulong ovr_SdkAccount_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600120D")]
		[Address(RVA = "0x5C1F2C", Offset = "0x5C1F2C", VA = "0x5C1F2C")]
		public static extern IntPtr ovr_SdkAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600120E")]
		[Address(RVA = "0x5C1FD4", Offset = "0x5C1FD4", VA = "0x5C1FD4")]
		public static extern UIntPtr ovr_SdkAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600120F")]
		[Address(RVA = "0x5C206C", Offset = "0x5C206C", VA = "0x5C206C")]
		public static extern ShareMediaStatus ovr_ShareMediaResult_GetStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001210")]
		[Address(RVA = "0x5C2104", Offset = "0x5C2104", VA = "0x5C2104")]
		public static extern bool ovr_SystemPermission_GetHasPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001211")]
		[Address(RVA = "0x5C21A4", Offset = "0x5C21A4", VA = "0x5C21A4")]
		public static extern PermissionGrantStatus ovr_SystemPermission_GetPermissionGrantStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001212")]
		[Address(RVA = "0x5C223C", Offset = "0x5C223C", VA = "0x5C223C")]
		public static extern VoipMuteState ovr_SystemVoipState_GetMicrophoneMuted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001213")]
		[Address(RVA = "0x5C22D4", Offset = "0x5C22D4", VA = "0x5C22D4")]
		public static extern SystemVoipStatus ovr_SystemVoipState_GetStatus(IntPtr obj);

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x5C236C", Offset = "0x5C236C", VA = "0x5C236C")]
		public static string ovr_TestUser_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001215")]
		[Address(RVA = "0x5C23D8", Offset = "0x5C23D8", VA = "0x5C23D8")]
		private static extern IntPtr ovr_TestUser_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001216")]
		[Address(RVA = "0x5C2470", Offset = "0x5C2470", VA = "0x5C2470")]
		public static extern IntPtr ovr_TestUser_GetAppAccessArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001217")]
		[Address(RVA = "0x5C2508", Offset = "0x5C2508", VA = "0x5C2508")]
		public static extern IntPtr ovr_TestUser_GetFbAppAccessArray(IntPtr obj);

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x5C25A0", Offset = "0x5C25A0", VA = "0x5C25A0")]
		public static string ovr_TestUser_GetFriendAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001219")]
		[Address(RVA = "0x5C260C", Offset = "0x5C260C", VA = "0x5C260C")]
		private static extern IntPtr ovr_TestUser_GetFriendAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600121A")]
		[Address(RVA = "0x5C26A4", Offset = "0x5C26A4", VA = "0x5C26A4")]
		public static extern IntPtr ovr_TestUser_GetFriendAppAccessArray(IntPtr obj);

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x5C273C", Offset = "0x5C273C", VA = "0x5C273C")]
		public static string ovr_TestUser_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600121C")]
		[Address(RVA = "0x5C27A8", Offset = "0x5C27A8", VA = "0x5C27A8")]
		private static extern IntPtr ovr_TestUser_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600121D")]
		[Address(RVA = "0x5C2840", Offset = "0x5C2840", VA = "0x5C2840")]
		public static extern ulong ovr_TestUser_GetUserFbid(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600121E")]
		[Address(RVA = "0x5C28D8", Offset = "0x5C28D8", VA = "0x5C28D8")]
		public static extern ulong ovr_TestUser_GetUserId(IntPtr obj);

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x5C2970", Offset = "0x5C2970", VA = "0x5C2970")]
		public static string ovr_TestUserAppAccess_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001220")]
		[Address(RVA = "0x5C29DC", Offset = "0x5C29DC", VA = "0x5C29DC")]
		private static extern IntPtr ovr_TestUserAppAccess_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001221")]
		[Address(RVA = "0x5C2A74", Offset = "0x5C2A74", VA = "0x5C2A74")]
		public static extern ulong ovr_TestUserAppAccess_GetAppId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001222")]
		[Address(RVA = "0x5C2B0C", Offset = "0x5C2B0C", VA = "0x5C2B0C")]
		public static extern ulong ovr_TestUserAppAccess_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001223")]
		[Address(RVA = "0x5C2BA4", Offset = "0x5C2BA4", VA = "0x5C2BA4")]
		public static extern IntPtr ovr_TestUserAppAccessArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6001224")]
		[Address(RVA = "0x5C2C4C", Offset = "0x5C2C4C", VA = "0x5C2C4C")]
		public static extern UIntPtr ovr_TestUserAppAccessArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001225")]
		[Address(RVA = "0x5C2CE4", Offset = "0x5C2CE4", VA = "0x5C2CE4")]
		public static extern ulong ovr_User_GetID(IntPtr obj);

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x5C2D7C", Offset = "0x5C2D7C", VA = "0x5C2D7C")]
		public static string ovr_User_GetImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001227")]
		[Address(RVA = "0x5C2DE8", Offset = "0x5C2DE8", VA = "0x5C2DE8")]
		private static extern IntPtr ovr_User_GetImageUrl_Native(IntPtr obj);

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x5C2E80", Offset = "0x5C2E80", VA = "0x5C2E80")]
		public static string ovr_User_GetInviteToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001229")]
		[Address(RVA = "0x5C2EEC", Offset = "0x5C2EEC", VA = "0x5C2EEC")]
		private static extern IntPtr ovr_User_GetInviteToken_Native(IntPtr obj);

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x5C2F84", Offset = "0x5C2F84", VA = "0x5C2F84")]
		public static string ovr_User_GetOculusID(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600122B")]
		[Address(RVA = "0x5C2FF0", Offset = "0x5C2FF0", VA = "0x5C2FF0")]
		private static extern IntPtr ovr_User_GetOculusID_Native(IntPtr obj);

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x5C3088", Offset = "0x5C3088", VA = "0x5C3088")]
		public static string ovr_User_GetPresence(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600122D")]
		[Address(RVA = "0x5C30F4", Offset = "0x5C30F4", VA = "0x5C30F4")]
		private static extern IntPtr ovr_User_GetPresence_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600122E")]
		[Address(RVA = "0x5C318C", Offset = "0x5C318C", VA = "0x5C318C")]
		public static extern UserPresenceStatus ovr_User_GetPresenceStatus(IntPtr obj);

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x5C3224", Offset = "0x5C3224", VA = "0x5C3224")]
		public static string ovr_User_GetSmallImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001230")]
		[Address(RVA = "0x5C3290", Offset = "0x5C3290", VA = "0x5C3290")]
		private static extern IntPtr ovr_User_GetSmallImageUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001231")]
		[Address(RVA = "0x5C3328", Offset = "0x5C3328", VA = "0x5C3328")]
		public static extern IntPtr ovr_UserAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001232")]
		[Address(RVA = "0x5C33C0", Offset = "0x5C33C0", VA = "0x5C33C0")]
		public static extern IntPtr ovr_UserAndRoom_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001233")]
		[Address(RVA = "0x5C3458", Offset = "0x5C3458", VA = "0x5C3458")]
		public static extern IntPtr ovr_UserAndRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x5C3500", Offset = "0x5C3500", VA = "0x5C3500")]
		public static string ovr_UserAndRoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001235")]
		[Address(RVA = "0x5C356C", Offset = "0x5C356C", VA = "0x5C356C")]
		private static extern IntPtr ovr_UserAndRoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001236")]
		[Address(RVA = "0x5C3604", Offset = "0x5C3604", VA = "0x5C3604")]
		public static extern UIntPtr ovr_UserAndRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001237")]
		[Address(RVA = "0x5C369C", Offset = "0x5C369C", VA = "0x5C369C")]
		public static extern bool ovr_UserAndRoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001238")]
		[Address(RVA = "0x5C373C", Offset = "0x5C373C", VA = "0x5C373C")]
		public static extern IntPtr ovr_UserArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x5C37E4", Offset = "0x5C37E4", VA = "0x5C37E4")]
		public static string ovr_UserArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600123A")]
		[Address(RVA = "0x5C3850", Offset = "0x5C3850", VA = "0x5C3850")]
		private static extern IntPtr ovr_UserArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600123B")]
		[Address(RVA = "0x5C38E8", Offset = "0x5C38E8", VA = "0x5C38E8")]
		public static extern UIntPtr ovr_UserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600123C")]
		[Address(RVA = "0x5C3980", Offset = "0x5C3980", VA = "0x5C3980")]
		public static extern bool ovr_UserArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x5C3A20", Offset = "0x5C3A20", VA = "0x5C3A20")]
		public static string ovr_UserProof_GetNonce(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600123E")]
		[Address(RVA = "0x5C3A8C", Offset = "0x5C3A8C", VA = "0x5C3A8C")]
		private static extern IntPtr ovr_UserProof_GetNonce_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600123F")]
		[Address(RVA = "0x5C3B24", Offset = "0x5C3B24", VA = "0x5C3B24")]
		public static extern bool ovr_UserReportID_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001240")]
		[Address(RVA = "0x5C3BC4", Offset = "0x5C3BC4", VA = "0x5C3BC4")]
		public static extern ulong ovr_UserReportID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001241")]
		[Address(RVA = "0x5C3C5C", Offset = "0x5C3C5C", VA = "0x5C3C5C")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, UIntPtr compressedSize);

		[PreserveSig]
		[Token(Token = "0x6001242")]
		[Address(RVA = "0x5C3D14", Offset = "0x5C3D14", VA = "0x5C3D14")]
		public static extern UIntPtr ovr_VoipDecoder_GetDecodedPCM(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001243")]
		[Address(RVA = "0x5C3DCC", Offset = "0x5C3DCC", VA = "0x5C3DCC")]
		public static extern void ovr_VoipEncoder_AddPCM(IntPtr obj, float[] inputData, uint inputSize);

		[PreserveSig]
		[Token(Token = "0x6001244")]
		[Address(RVA = "0x5C3E84", Offset = "0x5C3E84", VA = "0x5C3E84")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedData(IntPtr obj, byte[] outputBuffer, UIntPtr intputSize);

		[PreserveSig]
		[Token(Token = "0x6001245")]
		[Address(RVA = "0x5C3F3C", Offset = "0x5C3F3C", VA = "0x5C3F3C")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedDataSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6001246")]
		[Address(RVA = "0x5A4A7C", Offset = "0x5A4A7C", VA = "0x5A4A7C")]
		public static extern IntPtr ovr_AbuseReportOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6001247")]
		[Address(RVA = "0x5A4E50", Offset = "0x5A4E50", VA = "0x5A4E50")]
		public static extern void ovr_AbuseReportOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6001248")]
		[Address(RVA = "0x5A4B7C", Offset = "0x5A4B7C", VA = "0x5A4B7C")]
		public static extern void ovr_AbuseReportOptions_SetPreventPeopleChooser(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x6001249")]
		[Address(RVA = "0x5A4C9C", Offset = "0x5A4C9C", VA = "0x5A4C9C")]
		public static extern void ovr_AbuseReportOptions_SetReportType(IntPtr handle, AbuseReportType value);

		[PreserveSig]
		[Token(Token = "0x600124A")]
		[Address(RVA = "0x5A66AC", Offset = "0x5A66AC", VA = "0x5A66AC")]
		public static extern IntPtr ovr_ApplicationOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600124B")]
		[Address(RVA = "0x5A6918", Offset = "0x5A6918", VA = "0x5A6918")]
		public static extern void ovr_ApplicationOptions_Destroy(IntPtr handle);

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x5A67AC", Offset = "0x5A67AC", VA = "0x5A67AC")]
		public static void ovr_ApplicationOptions_SetDeeplinkMessage(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600124D")]
		[Address(RVA = "0x5C3FD4", Offset = "0x5C3FD4", VA = "0x5C3FD4")]
		private static extern void ovr_ApplicationOptions_SetDeeplinkMessage_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600124E")]
		[Address(RVA = "0x5C407C", Offset = "0x5C407C", VA = "0x5C407C")]
		public static extern IntPtr ovr_MatchmakingOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600124F")]
		[Address(RVA = "0x5C4104", Offset = "0x5C4104", VA = "0x5C4104")]
		public static extern void ovr_MatchmakingOptions_Destroy(IntPtr handle);

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x5C419C", Offset = "0x5C419C", VA = "0x5C419C")]
		public static void ovr_MatchmakingOptions_SetCreateRoomDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001251")]
		[Address(RVA = "0x5C4270", Offset = "0x5C4270", VA = "0x5C4270")]
		private static extern void ovr_MatchmakingOptions_SetCreateRoomDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x6001252")]
		[Address(RVA = "0x5C4320", Offset = "0x5C4320", VA = "0x5C4320")]
		public static extern void ovr_MatchmakingOptions_ClearCreateRoomDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6001253")]
		[Address(RVA = "0x5C43B8", Offset = "0x5C43B8", VA = "0x5C43B8")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomJoinPolicy(IntPtr handle, RoomJoinPolicy value);

		[PreserveSig]
		[Token(Token = "0x6001254")]
		[Address(RVA = "0x5C4460", Offset = "0x5C4460", VA = "0x5C4460")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x6001255")]
		[Address(RVA = "0x5C4508", Offset = "0x5C4508", VA = "0x5C4508")]
		public static extern void ovr_MatchmakingOptions_AddEnqueueAdditionalUser(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x6001256")]
		[Address(RVA = "0x5C45B0", Offset = "0x5C45B0", VA = "0x5C45B0")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueAdditionalUsers(IntPtr handle);

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x5C4648", Offset = "0x5C4648", VA = "0x5C4648")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt(IntPtr handle, string key, int value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001258")]
		[Address(RVA = "0x5C4700", Offset = "0x5C4700", VA = "0x5C4700")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt_Native(IntPtr handle, IntPtr key, int value);

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x5C47B0", Offset = "0x5C47B0", VA = "0x5C47B0")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble(IntPtr handle, string key, double value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600125A")]
		[Address(RVA = "0x5C4870", Offset = "0x5C4870", VA = "0x5C4870")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble_Native(IntPtr handle, IntPtr key, double value);

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x5C4928", Offset = "0x5C4928", VA = "0x5C4928")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600125C")]
		[Address(RVA = "0x5C49FC", Offset = "0x5C49FC", VA = "0x5C49FC")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600125D")]
		[Address(RVA = "0x5C4AAC", Offset = "0x5C4AAC", VA = "0x5C4AAC")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueDataSettings(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600125E")]
		[Address(RVA = "0x5C4B44", Offset = "0x5C4B44", VA = "0x5C4B44")]
		public static extern void ovr_MatchmakingOptions_SetEnqueueIsDebug(IntPtr handle, bool value);

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x5C4BEC", Offset = "0x5C4BEC", VA = "0x5C4BEC")]
		public static void ovr_MatchmakingOptions_SetEnqueueQueryKey(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001260")]
		[Address(RVA = "0x5C4C9C", Offset = "0x5C4C9C", VA = "0x5C4C9C")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueQueryKey_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x6001261")]
		[Address(RVA = "0x5C4D44", Offset = "0x5C4D44", VA = "0x5C4D44")]
		public static extern IntPtr ovr_RoomOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6001262")]
		[Address(RVA = "0x5C4DCC", Offset = "0x5C4DCC", VA = "0x5C4DCC")]
		public static extern void ovr_RoomOptions_Destroy(IntPtr handle);

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x5C4E64", Offset = "0x5C4E64", VA = "0x5C4E64")]
		public static void ovr_RoomOptions_SetDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001264")]
		[Address(RVA = "0x5C4F38", Offset = "0x5C4F38", VA = "0x5C4F38")]
		private static extern void ovr_RoomOptions_SetDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x6001265")]
		[Address(RVA = "0x5C4FE8", Offset = "0x5C4FE8", VA = "0x5C4FE8")]
		public static extern void ovr_RoomOptions_ClearDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6001266")]
		[Address(RVA = "0x5C5080", Offset = "0x5C5080", VA = "0x5C5080")]
		public static extern void ovr_RoomOptions_SetExcludeRecentlyMet(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x6001267")]
		[Address(RVA = "0x5C5128", Offset = "0x5C5128", VA = "0x5C5128")]
		public static extern void ovr_RoomOptions_SetMaxUserResults(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x6001268")]
		[Address(RVA = "0x5C51D0", Offset = "0x5C51D0", VA = "0x5C51D0")]
		public static extern void ovr_RoomOptions_SetOrdering(IntPtr handle, UserOrdering value);

		[PreserveSig]
		[Token(Token = "0x6001269")]
		[Address(RVA = "0x5C5278", Offset = "0x5C5278", VA = "0x5C5278")]
		public static extern void ovr_RoomOptions_SetRecentlyMetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x600126A")]
		[Address(RVA = "0x5C5320", Offset = "0x5C5320", VA = "0x5C5320")]
		public static extern void ovr_RoomOptions_SetRoomId(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x600126B")]
		[Address(RVA = "0x5C53C8", Offset = "0x5C53C8", VA = "0x5C53C8")]
		public static extern void ovr_RoomOptions_SetTurnOffUpdates(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x600126C")]
		[Address(RVA = "0x5C5470", Offset = "0x5C5470", VA = "0x5C5470")]
		public static extern IntPtr ovr_UserOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600126D")]
		[Address(RVA = "0x5C54F8", Offset = "0x5C54F8", VA = "0x5C54F8")]
		public static extern void ovr_UserOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600126E")]
		[Address(RVA = "0x5C5590", Offset = "0x5C5590", VA = "0x5C5590")]
		public static extern void ovr_UserOptions_SetMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x600126F")]
		[Address(RVA = "0x5C5638", Offset = "0x5C5638", VA = "0x5C5638")]
		public static extern void ovr_UserOptions_AddServiceProvider(IntPtr handle, ServiceProvider value);

		[PreserveSig]
		[Token(Token = "0x6001270")]
		[Address(RVA = "0x5C56E0", Offset = "0x5C56E0", VA = "0x5C56E0")]
		public static extern void ovr_UserOptions_ClearServiceProviders(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6001271")]
		[Address(RVA = "0x5C5778", Offset = "0x5C5778", VA = "0x5C5778")]
		public static extern void ovr_UserOptions_SetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x6001272")]
		[Address(RVA = "0x5C5820", Offset = "0x5C5820", VA = "0x5C5820")]
		public static extern IntPtr ovr_VoipOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6001273")]
		[Address(RVA = "0x5C58A8", Offset = "0x5C58A8", VA = "0x5C58A8")]
		public static extern void ovr_VoipOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6001274")]
		[Address(RVA = "0x5C5940", Offset = "0x5C5940", VA = "0x5C5940")]
		public static extern void ovr_VoipOptions_SetBitrateForNewConnections(IntPtr handle, VoipBitrate value);

		[PreserveSig]
		[Token(Token = "0x6001275")]
		[Address(RVA = "0x5C59E8", Offset = "0x5C59E8", VA = "0x5C59E8")]
		public static extern void ovr_VoipOptions_SetCreateNewConnectionUseDtx(IntPtr handle, VoipDtxState value);
	}
	[Token(Token = "0x200028B")]
	public enum CloudStorageDataStatus
	{
		[Token(Token = "0x4000BD9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FDA8", Offset = "0x56FDA8")]
		Unknown,
		[Token(Token = "0x4000BDA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FDE0", Offset = "0x56FDE0")]
		InSync,
		[Token(Token = "0x4000BDB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FE18", Offset = "0x56FE18")]
		NeedsDownload,
		[Token(Token = "0x4000BDC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FE50", Offset = "0x56FE50")]
		RemoteDownloading,
		[Token(Token = "0x4000BDD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FE88", Offset = "0x56FE88")]
		NeedsUpload,
		[Token(Token = "0x4000BDE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FEC0", Offset = "0x56FEC0")]
		LocalUploading,
		[Token(Token = "0x4000BDF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FEF8", Offset = "0x56FEF8")]
		InConflict
	}
	[Token(Token = "0x200028C")]
	public enum CloudStorageUpdateStatus
	{
		[Token(Token = "0x4000BE1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FF30", Offset = "0x56FF30")]
		Unknown,
		[Token(Token = "0x4000BE2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FF68", Offset = "0x56FF68")]
		Ok,
		[Token(Token = "0x4000BE3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FFA0", Offset = "0x56FFA0")]
		BetterVersionStored,
		[Token(Token = "0x4000BE4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x56FFD8", Offset = "0x56FFD8")]
		ManualMergeRequired
	}
	[Token(Token = "0x200028D")]
	public interface IMicrophone
	{
		[Token(Token = "0x600127F")]
		void Start();

		[Token(Token = "0x6001280")]
		void Stop();

		[Token(Token = "0x6001281")]
		float[] Update();
	}
	[Token(Token = "0x200028E")]
	public interface IVoipPCMSource
	{
		[Token(Token = "0x6001282")]
		int GetPCM(float[] dest, int length);

		[Token(Token = "0x6001283")]
		void SetSenderID(ulong senderID);

		[Token(Token = "0x6001284")]
		void Update();

		[Token(Token = "0x6001285")]
		int PeekSizeElements();
	}
	[Token(Token = "0x200028F")]
	public enum KeyValuePairType
	{
		[Token(Token = "0x4000BE6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570010", Offset = "0x570010")]
		String,
		[Token(Token = "0x4000BE7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570048", Offset = "0x570048")]
		Int,
		[Token(Token = "0x4000BE8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570080", Offset = "0x570080")]
		Double,
		[Token(Token = "0x4000BE9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5700B8", Offset = "0x5700B8")]
		Unknown
	}
	[Token(Token = "0x2000290")]
	public enum LaunchType
	{
		[Token(Token = "0x4000BEB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5700F0", Offset = "0x5700F0")]
		Unknown,
		[Token(Token = "0x4000BEC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570128", Offset = "0x570128")]
		Normal,
		[Token(Token = "0x4000BED")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570160", Offset = "0x570160")]
		Invite,
		[Token(Token = "0x4000BEE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570198", Offset = "0x570198")]
		Coordinated,
		[Token(Token = "0x4000BEF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5701D0", Offset = "0x5701D0")]
		Deeplink
	}
	[Token(Token = "0x2000291")]
	public enum LeaderboardFilterType
	{
		[Token(Token = "0x4000BF1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570208", Offset = "0x570208")]
		None,
		[Token(Token = "0x4000BF2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570240", Offset = "0x570240")]
		Friends,
		[Token(Token = "0x4000BF3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570278", Offset = "0x570278")]
		Unknown
	}
	[Token(Token = "0x2000292")]
	public enum LeaderboardStartAt
	{
		[Token(Token = "0x4000BF5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5702B0", Offset = "0x5702B0")]
		Top,
		[Token(Token = "0x4000BF6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5702E8", Offset = "0x5702E8")]
		CenteredOnViewer,
		[Token(Token = "0x4000BF7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570320", Offset = "0x570320")]
		CenteredOnViewerOrTop,
		[Token(Token = "0x4000BF8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570358", Offset = "0x570358")]
		Unknown
	}
	[Token(Token = "0x2000293")]
	public enum LivestreamingAudience
	{
		[Token(Token = "0x4000BFA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570390", Offset = "0x570390")]
		Unknown,
		[Token(Token = "0x4000BFB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5703C8", Offset = "0x5703C8")]
		Public,
		[Token(Token = "0x4000BFC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570400", Offset = "0x570400")]
		Friends,
		[Token(Token = "0x4000BFD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570438", Offset = "0x570438")]
		OnlyMe
	}
	[Token(Token = "0x2000294")]
	public enum LivestreamingMicrophoneStatus
	{
		[Token(Token = "0x4000BFF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570470", Offset = "0x570470")]
		Unknown,
		[Token(Token = "0x4000C00")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5704A8", Offset = "0x5704A8")]
		MicrophoneOn,
		[Token(Token = "0x4000C01")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5704E0", Offset = "0x5704E0")]
		MicrophoneOff
	}
	[Token(Token = "0x2000295")]
	public enum LivestreamingStartStatus
	{
		[Token(Token = "0x4000C03")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570518", Offset = "0x570518")]
		Success = 1,
		[Token(Token = "0x4000C04")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570550", Offset = "0x570550")]
		Unknown = 0,
		[Token(Token = "0x4000C05")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570588", Offset = "0x570588")]
		NoPackageSet = -1,
		[Token(Token = "0x4000C06")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5705C0", Offset = "0x5705C0")]
		NoFbConnect = -2,
		[Token(Token = "0x4000C07")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5705F8", Offset = "0x5705F8")]
		NoSessionId = -3,
		[Token(Token = "0x4000C08")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570630", Offset = "0x570630")]
		MissingParameters = -4
	}
	[Token(Token = "0x2000296")]
	public enum MatchmakingCriterionImportance
	{
		[Token(Token = "0x4000C0A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570668", Offset = "0x570668")]
		Required,
		[Token(Token = "0x4000C0B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5706A0", Offset = "0x5706A0")]
		High,
		[Token(Token = "0x4000C0C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5706D8", Offset = "0x5706D8")]
		Medium,
		[Token(Token = "0x4000C0D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570710", Offset = "0x570710")]
		Low,
		[Token(Token = "0x4000C0E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570748", Offset = "0x570748")]
		Unknown
	}
	[Token(Token = "0x2000297")]
	public class MatchmakingOptions
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x7308E0", Offset = "0x7308E0", VA = "0x7308E0")]
		public MatchmakingOptions()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x73095C", Offset = "0x73095C", VA = "0x73095C")]
		public void SetCreateRoomDataStore(string key, string value)
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x7309E4", Offset = "0x7309E4", VA = "0x7309E4")]
		public void ClearCreateRoomDataStore()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x730A54", Offset = "0x730A54", VA = "0x730A54")]
		public void SetCreateRoomJoinPolicy(RoomJoinPolicy value)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x730AD4", Offset = "0x730AD4", VA = "0x730AD4")]
		public void SetCreateRoomMaxUsers(uint value)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x730B54", Offset = "0x730B54", VA = "0x730B54")]
		public void AddEnqueueAdditionalUser(ulong userID)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x730BD4", Offset = "0x730BD4", VA = "0x730BD4")]
		public void ClearEnqueueAdditionalUsers()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x730C44", Offset = "0x730C44", VA = "0x730C44")]
		public void SetEnqueueDataSettings(string key, int value)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x730CCC", Offset = "0x730CCC", VA = "0x730CCC")]
		public void SetEnqueueDataSettings(string key, double value)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x730D5C", Offset = "0x730D5C", VA = "0x730D5C")]
		public void SetEnqueueDataSettings(string key, string value)
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x730DE4", Offset = "0x730DE4", VA = "0x730DE4")]
		public void ClearEnqueueDataSettings()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x730E54", Offset = "0x730E54", VA = "0x730E54")]
		public void SetEnqueueIsDebug(bool value)
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x730ED4", Offset = "0x730ED4", VA = "0x730ED4")]
		public void SetEnqueueQueryKey(string value)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x72FB44", Offset = "0x72FB44", VA = "0x72FB44")]
		public static explicit operator IntPtr(MatchmakingOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x730F54", Offset = "0x730F54", VA = "0x730F54", Slot = "1")]
		~MatchmakingOptions()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public enum MatchmakingStatApproach
	{
		[Token(Token = "0x4000C11")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570780", Offset = "0x570780")]
		Unknown,
		[Token(Token = "0x4000C12")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5707B8", Offset = "0x5707B8")]
		Trailing,
		[Token(Token = "0x4000C13")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5707F0", Offset = "0x5707F0")]
		Swingy
	}
	[Token(Token = "0x2000299")]
	public enum MediaContentType
	{
		[Token(Token = "0x4000C15")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570828", Offset = "0x570828")]
		Unknown,
		[Token(Token = "0x4000C16")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570860", Offset = "0x570860")]
		Photo
	}
	[Token(Token = "0x200029A")]
	public abstract class Message<T> : Message
	{
		[Token(Token = "0x200029B")]
		public new delegate void Callback(Message<T> message);

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		[Token(Token = "0x17000174")]
		public T Data
		{
			[Token(Token = "0x6001296")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6001295")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001297")]
		protected abstract T GetDataFromMessage(IntPtr c_message);
	}
	[Token(Token = "0x200029C")]
	public class Message
	{
		[Token(Token = "0x200029D")]
		public delegate void Callback(Message message);

		[Token(Token = "0x200029E")]
		public enum MessageType : uint
		{
			[Token(Token = "0x4000C1D")]
			Unknown = 0u,
			[Token(Token = "0x4000C1E")]
			Achievements_AddCount = 65495601u,
			[Token(Token = "0x4000C1F")]
			Achievements_AddFields = 346693929u,
			[Token(Token = "0x4000C20")]
			Achievements_GetAllDefinitions = 64177549u,
			[Token(Token = "0x4000C21")]
			Achievements_GetAllProgress = 1335877149u,
			[Token(Token = "0x4000C22")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Token(Token = "0x4000C23")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Token(Token = "0x4000C24")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Token(Token = "0x4000C25")]
			Achievements_GetProgressByName = 354837425u,
			[Token(Token = "0x4000C26")]
			Achievements_Unlock = 1497156573u,
			[Token(Token = "0x4000C27")]
			ApplicationLifecycle_GetRegisteredPIDs = 82169698u,
			[Token(Token = "0x4000C28")]
			ApplicationLifecycle_GetSessionKey = 984570141u,
			[Token(Token = "0x4000C29")]
			ApplicationLifecycle_RegisterSessionKey = 1303818232u,
			[Token(Token = "0x4000C2A")]
			Application_GetVersion = 1751583246u,
			[Token(Token = "0x4000C2B")]
			Application_LaunchOtherApp = 1424151032u,
			[Token(Token = "0x4000C2C")]
			AssetFile_Delete = 1834842246u,
			[Token(Token = "0x4000C2D")]
			AssetFile_DeleteById = 1525206354u,
			[Token(Token = "0x4000C2E")]
			AssetFile_DeleteByName = 1108001231u,
			[Token(Token = "0x4000C2F")]
			AssetFile_Download = 289710021u,
			[Token(Token = "0x4000C30")]
			AssetFile_DownloadById = 755009938u,
			[Token(Token = "0x4000C31")]
			AssetFile_DownloadByName = 1664536314u,
			[Token(Token = "0x4000C32")]
			AssetFile_DownloadCancel = 134927303u,
			[Token(Token = "0x4000C33")]
			AssetFile_DownloadCancelById = 1365611796u,
			[Token(Token = "0x4000C34")]
			AssetFile_DownloadCancelByName = 1147858170u,
			[Token(Token = "0x4000C35")]
			AssetFile_GetList = 1258057588u,
			[Token(Token = "0x4000C36")]
			AssetFile_Status = 47394656u,
			[Token(Token = "0x4000C37")]
			AssetFile_StatusById = 1570069816u,
			[Token(Token = "0x4000C38")]
			AssetFile_StatusByName = 1104140880u,
			[Token(Token = "0x4000C39")]
			CloudStorage_Delete = 685393261u,
			[Token(Token = "0x4000C3A")]
			CloudStorage_GetNextCloudStorageMetadataArrayPage = 1544004335u,
			[Token(Token = "0x4000C3B")]
			CloudStorage_Load = 1082420033u,
			[Token(Token = "0x4000C3C")]
			CloudStorage_LoadBucketMetadata = 1931977997u,
			[Token(Token = "0x4000C3D")]
			CloudStorage_LoadConflictMetadata = 1146770162u,
			[Token(Token = "0x4000C3E")]
			CloudStorage_LoadHandle = 845863478u,
			[Token(Token = "0x4000C3F")]
			CloudStorage_LoadMetadata = 65446546u,
			[Token(Token = "0x4000C40")]
			CloudStorage_ResolveKeepLocal = 811109637u,
			[Token(Token = "0x4000C41")]
			CloudStorage_ResolveKeepRemote = 1965400838u,
			[Token(Token = "0x4000C42")]
			CloudStorage_Save = 1270570030u,
			[Token(Token = "0x4000C43")]
			Entitlement_GetIsViewerEntitled = 409688241u,
			[Token(Token = "0x4000C44")]
			IAP_ConsumePurchase = 532378329u,
			[Token(Token = "0x4000C45")]
			IAP_GetNextProductArrayPage = 467225263u,
			[Token(Token = "0x4000C46")]
			IAP_GetNextPurchaseArrayPage = 1196886677u,
			[Token(Token = "0x4000C47")]
			IAP_GetProductsBySKU = 2124073717u,
			[Token(Token = "0x4000C48")]
			IAP_GetViewerPurchases = 974095385u,
			[Token(Token = "0x4000C49")]
			IAP_LaunchCheckoutFlow = 1067126029u,
			[Token(Token = "0x4000C4A")]
			LanguagePack_GetCurrent = 529592533u,
			[Token(Token = "0x4000C4B")]
			LanguagePack_SetCurrent = 1531952096u,
			[Token(Token = "0x4000C4C")]
			Leaderboard_GetEntries = 1572030284u,
			[Token(Token = "0x4000C4D")]
			Leaderboard_GetEntriesAfterRank = 406293487u,
			[Token(Token = "0x4000C4E")]
			Leaderboard_GetNextEntries = 1310751961u,
			[Token(Token = "0x4000C4F")]
			Leaderboard_GetPreviousEntries = 1224858304u,
			[Token(Token = "0x4000C50")]
			Leaderboard_WriteEntry = 293587198u,
			[Token(Token = "0x4000C51")]
			Livestreaming_GetStatus = 1218079125u,
			[Token(Token = "0x4000C52")]
			Livestreaming_PauseStream = 916223619u,
			[Token(Token = "0x4000C53")]
			Livestreaming_ResumeStream = 575827343u,
			[Token(Token = "0x4000C54")]
			Matchmaking_Browse = 509948616u,
			[Token(Token = "0x4000C55")]
			Matchmaking_Browse2 = 1715641947u,
			[Token(Token = "0x4000C56")]
			Matchmaking_Cancel = 543705519u,
			[Token(Token = "0x4000C57")]
			Matchmaking_Cancel2 = 285117908u,
			[Token(Token = "0x4000C58")]
			Matchmaking_CreateAndEnqueueRoom = 1615617480u,
			[Token(Token = "0x4000C59")]
			Matchmaking_CreateAndEnqueueRoom2 = 693889755u,
			[Token(Token = "0x4000C5A")]
			Matchmaking_CreateRoom = 54203178u,
			[Token(Token = "0x4000C5B")]
			Matchmaking_CreateRoom2 = 1231922052u,
			[Token(Token = "0x4000C5C")]
			Matchmaking_Enqueue = 1086418033u,
			[Token(Token = "0x4000C5D")]
			Matchmaking_Enqueue2 = 303174325u,
			[Token(Token = "0x4000C5E")]
			Matchmaking_EnqueueRoom = 1888108644u,
			[Token(Token = "0x4000C5F")]
			Matchmaking_EnqueueRoom2 = 1428741028u,
			[Token(Token = "0x4000C60")]
			Matchmaking_GetAdminSnapshot = 1008820116u,
			[Token(Token = "0x4000C61")]
			Matchmaking_GetStats = 1123849272u,
			[Token(Token = "0x4000C62")]
			Matchmaking_JoinRoom = 1295177725u,
			[Token(Token = "0x4000C63")]
			Matchmaking_ReportResultInsecure = 439800205u,
			[Token(Token = "0x4000C64")]
			Matchmaking_StartMatch = 1154746693u,
			[Token(Token = "0x4000C65")]
			Media_ShareToFacebook = 14912239u,
			[Token(Token = "0x4000C66")]
			Notification_GetNextRoomInviteNotificationArrayPage = 102890359u,
			[Token(Token = "0x4000C67")]
			Notification_GetRoomInvites = 1871801234u,
			[Token(Token = "0x4000C68")]
			Notification_MarkAsRead = 1903319523u,
			[Token(Token = "0x4000C69")]
			Party_GetCurrent = 1200830304u,
			[Token(Token = "0x4000C6A")]
			Room_CreateAndJoinPrivate = 1977017207u,
			[Token(Token = "0x4000C6B")]
			Room_CreateAndJoinPrivate2 = 1513775683u,
			[Token(Token = "0x4000C6C")]
			Room_Get = 1704628152u,
			[Token(Token = "0x4000C6D")]
			Room_GetCurrent = 161916164u,
			[Token(Token = "0x4000C6E")]
			Room_GetCurrentForUser = 234887141u,
			[Token(Token = "0x4000C6F")]
			Room_GetInvitableUsers = 506615698u,
			[Token(Token = "0x4000C70")]
			Room_GetInvitableUsers2 = 1330899120u,
			[Token(Token = "0x4000C71")]
			Room_GetModeratedRooms = 159645047u,
			[Token(Token = "0x4000C72")]
			Room_GetNextRoomArrayPage = 1317239238u,
			[Token(Token = "0x4000C73")]
			Room_InviteUser = 1093266451u,
			[Token(Token = "0x4000C74")]
			Room_Join = 382373641u,
			[Token(Token = "0x4000C75")]
			Room_Join2 = 1303059522u,
			[Token(Token = "0x4000C76")]
			Room_KickUser = 1233344310u,
			[Token(Token = "0x4000C77")]
			Room_LaunchInvitableUserFlow = 843047539u,
			[Token(Token = "0x4000C78")]
			Room_Leave = 1916281973u,
			[Token(Token = "0x4000C79")]
			Room_SetDescription = 809796911u,
			[Token(Token = "0x4000C7A")]
			Room_UpdateDataStore = 40779816u,
			[Token(Token = "0x4000C7B")]
			Room_UpdateMembershipLockStatus = 923514796u,
			[Token(Token = "0x4000C7C")]
			Room_UpdateOwner = 850803997u,
			[Token(Token = "0x4000C7D")]
			Room_UpdatePrivateRoomJoinPolicy = 289473179u,
			[Token(Token = "0x4000C7E")]
			User_Get = 1808768583u,
			[Token(Token = "0x4000C7F")]
			User_GetAccessToken = 111696574u,
			[Token(Token = "0x4000C80")]
			User_GetLoggedInUser = 1131361373u,
			[Token(Token = "0x4000C81")]
			User_GetLoggedInUserFriends = 1484532365u,
			[Token(Token = "0x4000C82")]
			User_GetLoggedInUserFriendsAndRooms = 1585908615u,
			[Token(Token = "0x4000C83")]
			User_GetLoggedInUserRecentlyMetUsersAndRooms = 694139440u,
			[Token(Token = "0x4000C84")]
			User_GetNextUserAndRoomArrayPage = 2143146719u,
			[Token(Token = "0x4000C85")]
			User_GetNextUserArrayPage = 645723971u,
			[Token(Token = "0x4000C86")]
			User_GetOrgScopedID = 418426907u,
			[Token(Token = "0x4000C87")]
			User_GetSdkAccounts = 1733454467u,
			[Token(Token = "0x4000C88")]
			User_GetUserProof = 578880643u,
			[Token(Token = "0x4000C89")]
			User_LaunchFriendRequestFlow = 151303576u,
			[Token(Token = "0x4000C8A")]
			User_LaunchProfile = 171537047u,
			[Token(Token = "0x4000C8B")]
			Voip_SetSystemVoipSuppressed = 1161808298u,
			[Token(Token = "0x4000C8C")]
			Notification_ApplicationLifecycle_LaunchIntentChanged = 78859427u,
			[Token(Token = "0x4000C8D")]
			Notification_AssetFile_DownloadUpdate = 803015885u,
			[Token(Token = "0x4000C8E")]
			Notification_Cal_FinalizeApplication = 1963741337u,
			[Token(Token = "0x4000C8F")]
			Notification_Cal_ProposeApplication = 779375093u,
			[Token(Token = "0x4000C90")]
			Notification_HTTP_Transfer = 2111073839u,
			[Token(Token = "0x4000C91")]
			Notification_Livestreaming_StatusChange = 575101294u,
			[Token(Token = "0x4000C92")]
			Notification_Matchmaking_MatchFound = 197393623u,
			[Token(Token = "0x4000C93")]
			Notification_Networking_ConnectionStateChange = 1577243802u,
			[Token(Token = "0x4000C94")]
			Notification_Networking_PeerConnectRequest = 1295114959u,
			[Token(Token = "0x4000C95")]
			Notification_Networking_PingResult = 1360343058u,
			[Token(Token = "0x4000C96")]
			Notification_Room_InviteAccepted = 1829794225u,
			[Token(Token = "0x4000C97")]
			Notification_Room_InviteReceived = 1783209300u,
			[Token(Token = "0x4000C98")]
			Notification_Room_RoomUpdate = 1626094639u,
			[Token(Token = "0x4000C99")]
			Notification_Voip_ConnectRequest = 908343318u,
			[Token(Token = "0x4000C9A")]
			Notification_Voip_StateChange = 888120928u,
			[Token(Token = "0x4000C9B")]
			Notification_Voip_SystemVoipState = 1490179237u,
			[Token(Token = "0x4000C9C")]
			Platform_InitializeWithAccessToken = 896085803u,
			[Token(Token = "0x4000C9D")]
			Platform_InitializeStandaloneOculus = 1375260172u,
			[Token(Token = "0x4000C9E")]
			Platform_InitializeAndroidAsynchronous = 450037684u,
			[Token(Token = "0x4000C9F")]
			Platform_InitializeWindowsAsynchronous = 1839708815u
		}

		[Token(Token = "0x200029F")]
		internal delegate Message ExtraMessageTypesHandler(IntPtr messageHandle, MessageType message_type);

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MessageType type;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong requestID;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Error error;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570898", Offset = "0x570898")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x570898", Offset = "0x570898")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		[Token(Token = "0x17000175")]
		public MessageType Type
		{
			[Token(Token = "0x600129E")]
			[Address(RVA = "0x7313E4", Offset = "0x7313E4", VA = "0x7313E4")]
			get
			{
				return default(MessageType);
			}
		}

		[Token(Token = "0x17000176")]
		public bool IsError
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x7313EC", Offset = "0x7313EC", VA = "0x7313EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public ulong RequestID
		{
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0x7313FC", Offset = "0x7313FC", VA = "0x7313FC")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000178")]
		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x73444C", Offset = "0x73444C", VA = "0x73444C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5708E4", Offset = "0x5708E4")]
			private get
			{
				return null;
			}
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x7343F8", Offset = "0x7343F8", VA = "0x7343F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5708D4", Offset = "0x5708D4")]
			set
			{
			}
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x731104", Offset = "0x731104", VA = "0x731104")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x7313DC", Offset = "0x7313DC", VA = "0x7313DC", Slot = "1")]
		~Message()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x731404", Offset = "0x731404", VA = "0x731404", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x73140C", Offset = "0x73140C", VA = "0x73140C", Slot = "5")]
		public virtual PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x731414", Offset = "0x731414", VA = "0x731414", Slot = "6")]
		public virtual NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x73141C", Offset = "0x73141C", VA = "0x73141C", Slot = "7")]
		public virtual HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x731424", Offset = "0x731424", VA = "0x731424", Slot = "8")]
		public virtual PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x73142C", Offset = "0x73142C", VA = "0x73142C", Slot = "9")]
		public virtual AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x731434", Offset = "0x731434", VA = "0x731434", Slot = "10")]
		public virtual AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x73143C", Offset = "0x73143C", VA = "0x73143C", Slot = "11")]
		public virtual AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x731444", Offset = "0x731444", VA = "0x731444", Slot = "12")]
		public virtual AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x73144C", Offset = "0x73144C", VA = "0x73144C", Slot = "13")]
		public virtual ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x731454", Offset = "0x731454", VA = "0x731454", Slot = "14")]
		public virtual AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x73145C", Offset = "0x73145C", VA = "0x73145C", Slot = "15")]
		public virtual AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x731464", Offset = "0x731464", VA = "0x731464", Slot = "16")]
		public virtual AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x73146C", Offset = "0x73146C", VA = "0x73146C", Slot = "17")]
		public virtual AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x731474", Offset = "0x731474", VA = "0x731474", Slot = "18")]
		public virtual AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x73147C", Offset = "0x73147C", VA = "0x73147C", Slot = "19")]
		public virtual AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x731484", Offset = "0x731484", VA = "0x731484", Slot = "20")]
		public virtual CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x73148C", Offset = "0x73148C", VA = "0x73148C", Slot = "21")]
		public virtual CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x731494", Offset = "0x731494", VA = "0x731494", Slot = "22")]
		public virtual CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x73149C", Offset = "0x73149C", VA = "0x73149C", Slot = "23")]
		public virtual CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x7314A4", Offset = "0x7314A4", VA = "0x7314A4", Slot = "24")]
		public virtual CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x7314AC", Offset = "0x7314AC", VA = "0x7314AC", Slot = "25")]
		public virtual CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x7314B4", Offset = "0x7314B4", VA = "0x7314B4", Slot = "26")]
		public virtual CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x7314BC", Offset = "0x7314BC", VA = "0x7314BC", Slot = "27")]
		public virtual CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x7314C4", Offset = "0x7314C4", VA = "0x7314C4", Slot = "28")]
		public virtual InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x7314CC", Offset = "0x7314CC", VA = "0x7314CC", Slot = "29")]
		public virtual LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x7314D4", Offset = "0x7314D4", VA = "0x7314D4", Slot = "30")]
		public virtual LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x7314DC", Offset = "0x7314DC", VA = "0x7314DC", Slot = "31")]
		public virtual LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x7314E4", Offset = "0x7314E4", VA = "0x7314E4", Slot = "32")]
		public virtual LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x7314EC", Offset = "0x7314EC", VA = "0x7314EC", Slot = "33")]
		public virtual bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x7314F4", Offset = "0x7314F4", VA = "0x7314F4", Slot = "34")]
		public virtual LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x7314FC", Offset = "0x7314FC", VA = "0x7314FC", Slot = "35")]
		public virtual LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x731504", Offset = "0x731504", VA = "0x731504", Slot = "36")]
		public virtual LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x73150C", Offset = "0x73150C", VA = "0x73150C", Slot = "37")]
		public virtual LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x731514", Offset = "0x731514", VA = "0x731514", Slot = "38")]
		public virtual LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x73151C", Offset = "0x73151C", VA = "0x73151C", Slot = "39")]
		public virtual LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x731524", Offset = "0x731524", VA = "0x731524", Slot = "40")]
		public virtual MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x73152C", Offset = "0x73152C", VA = "0x73152C", Slot = "41")]
		public virtual MatchmakingBrowseResult GetMatchmakingBrowseResult()
		{
			return null;
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x731534", Offset = "0x731534", VA = "0x731534", Slot = "42")]
		public virtual MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x73153C", Offset = "0x73153C", VA = "0x73153C", Slot = "43")]
		public virtual MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x731544", Offset = "0x731544", VA = "0x731544", Slot = "44")]
		public virtual MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x73154C", Offset = "0x73154C", VA = "0x73154C", Slot = "45")]
		public virtual OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x731554", Offset = "0x731554", VA = "0x731554", Slot = "46")]
		public virtual Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x73155C", Offset = "0x73155C", VA = "0x73155C", Slot = "47")]
		public virtual PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x731564", Offset = "0x731564", VA = "0x731564", Slot = "48")]
		public virtual PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x73156C", Offset = "0x73156C", VA = "0x73156C", Slot = "49")]
		public virtual ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x731574", Offset = "0x731574", VA = "0x731574", Slot = "50")]
		public virtual Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x73157C", Offset = "0x73157C", VA = "0x73157C", Slot = "51")]
		public virtual PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x731584", Offset = "0x731584", VA = "0x731584", Slot = "52")]
		public virtual Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x73158C", Offset = "0x73158C", VA = "0x73158C", Slot = "53")]
		public virtual RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x731594", Offset = "0x731594", VA = "0x731594", Slot = "54")]
		public virtual RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x73159C", Offset = "0x73159C", VA = "0x73159C", Slot = "55")]
		public virtual RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x7315A4", Offset = "0x7315A4", VA = "0x7315A4", Slot = "56")]
		public virtual SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x7315AC", Offset = "0x7315AC", VA = "0x7315AC", Slot = "57")]
		public virtual ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x7315B4", Offset = "0x7315B4", VA = "0x7315B4", Slot = "58")]
		public virtual string GetString()
		{
			return null;
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x7315BC", Offset = "0x7315BC", VA = "0x7315BC", Slot = "59")]
		public virtual SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x7315C4", Offset = "0x7315C4", VA = "0x7315C4", Slot = "60")]
		public virtual SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x7315CC", Offset = "0x7315CC", VA = "0x7315CC", Slot = "61")]
		public virtual User GetUser()
		{
			return null;
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x7315D4", Offset = "0x7315D4", VA = "0x7315D4", Slot = "62")]
		public virtual UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x7315DC", Offset = "0x7315DC", VA = "0x7315DC", Slot = "63")]
		public virtual UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x7315E4", Offset = "0x7315E4", VA = "0x7315E4", Slot = "64")]
		public virtual UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x7315EC", Offset = "0x7315EC", VA = "0x7315EC", Slot = "65")]
		public virtual UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x7315F4", Offset = "0x7315F4", VA = "0x7315F4")]
		internal static Message ParseMessageHandle(IntPtr messageHandle)
		{
			return null;
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x73433C", Offset = "0x73433C", VA = "0x73433C")]
		public static Message PopMessage()
		{
			return null;
		}
	}
	[Token(Token = "0x20002A0")]
	public class MessageWithAbuseReportRecording : Message<AbuseReportRecording>
	{
		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x734B7C", Offset = "0x734B7C", VA = "0x734B7C")]
		public MessageWithAbuseReportRecording(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x734BDC", Offset = "0x734BDC", VA = "0x734BDC", Slot = "9")]
		public override AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x734C2C", Offset = "0x734C2C", VA = "0x734C2C", Slot = "66")]
		protected override AbuseReportRecording GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A1")]
	public class MessageWithAchievementDefinitions : Message<AchievementDefinitionList>
	{
		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x73296C", Offset = "0x73296C", VA = "0x73296C")]
		public MessageWithAchievementDefinitions(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x734D60", Offset = "0x734D60", VA = "0x734D60", Slot = "10")]
		public override AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x734DB0", Offset = "0x734DB0", VA = "0x734DB0", Slot = "66")]
		protected override AchievementDefinitionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A2")]
	public class MessageWithAchievementProgressList : Message<AchievementProgressList>
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x7329CC", Offset = "0x7329CC", VA = "0x7329CC")]
		public MessageWithAchievementProgressList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x73506C", Offset = "0x73506C", VA = "0x73506C", Slot = "11")]
		public override AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x7350BC", Offset = "0x7350BC", VA = "0x7350BC", Slot = "66")]
		protected override AchievementProgressList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A3")]
	public class MessageWithAchievementUpdate : Message<AchievementUpdate>
	{
		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x732A2C", Offset = "0x732A2C", VA = "0x732A2C")]
		public MessageWithAchievementUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x735378", Offset = "0x735378", VA = "0x735378", Slot = "12")]
		public override AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x7353C8", Offset = "0x7353C8", VA = "0x7353C8", Slot = "66")]
		protected override AchievementUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A4")]
	public class MessageWithApplicationVersion : Message<ApplicationVersion>
	{
		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x732A8C", Offset = "0x732A8C", VA = "0x732A8C")]
		public MessageWithApplicationVersion(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x735514", Offset = "0x735514", VA = "0x735514", Slot = "13")]
		public override ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x735564", Offset = "0x735564", VA = "0x735564", Slot = "66")]
		protected override ApplicationVersion GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A5")]
	public class MessageWithAssetDetails : Message<AssetDetails>
	{
		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x732AEC", Offset = "0x732AEC", VA = "0x732AEC")]
		public MessageWithAssetDetails(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x7356D4", Offset = "0x7356D4", VA = "0x7356D4", Slot = "14")]
		public override AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x735724", Offset = "0x735724", VA = "0x735724", Slot = "66")]
		protected override AssetDetails GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A6")]
	public class MessageWithAssetDetailsList : Message<AssetDetailsList>
	{
		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x732B4C", Offset = "0x732B4C", VA = "0x732B4C")]
		public MessageWithAssetDetailsList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x735908", Offset = "0x735908", VA = "0x735908", Slot = "15")]
		public override AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x735958", Offset = "0x735958", VA = "0x735958", Slot = "66")]
		protected override AssetDetailsList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A7")]
	public class MessageWithAssetFileDeleteResult : Message<AssetFileDeleteResult>
	{
		[Token(Token = "0x6001300")]
		[Address(RVA = "0x732BAC", Offset = "0x732BAC", VA = "0x732BAC")]
		public MessageWithAssetFileDeleteResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x735BE0", Offset = "0x735BE0", VA = "0x735BE0", Slot = "16")]
		public override AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x735C30", Offset = "0x735C30", VA = "0x735C30", Slot = "66")]
		protected override AssetFileDeleteResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A8")]
	public class MessageWithAssetFileDownloadCancelResult : Message<AssetFileDownloadCancelResult>
	{
		[Token(Token = "0x6001303")]
		[Address(RVA = "0x732C0C", Offset = "0x732C0C", VA = "0x732C0C")]
		public MessageWithAssetFileDownloadCancelResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x735DA4", Offset = "0x735DA4", VA = "0x735DA4", Slot = "17")]
		public override AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x735DF4", Offset = "0x735DF4", VA = "0x735DF4", Slot = "66")]
		protected override AssetFileDownloadCancelResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A9")]
	public class MessageWithAssetFileDownloadResult : Message<AssetFileDownloadResult>
	{
		[Token(Token = "0x6001306")]
		[Address(RVA = "0x732C6C", Offset = "0x732C6C", VA = "0x732C6C")]
		public MessageWithAssetFileDownloadResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x735F68", Offset = "0x735F68", VA = "0x735F68", Slot = "18")]
		public override AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x735FB8", Offset = "0x735FB8", VA = "0x735FB8", Slot = "66")]
		protected override AssetFileDownloadResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AA")]
	public class MessageWithAssetFileDownloadUpdate : Message<AssetFileDownloadUpdate>
	{
		[Token(Token = "0x6001309")]
		[Address(RVA = "0x732CCC", Offset = "0x732CCC", VA = "0x732CCC")]
		public MessageWithAssetFileDownloadUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x736100", Offset = "0x736100", VA = "0x736100", Slot = "19")]
		public override AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x736150", Offset = "0x736150", VA = "0x736150", Slot = "66")]
		protected override AssetFileDownloadUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AB")]
	public class MessageWithCalApplicationFinalized : Message<CalApplicationFinalized>
	{
		[Token(Token = "0x600130C")]
		[Address(RVA = "0x732D2C", Offset = "0x732D2C", VA = "0x732D2C")]
		public MessageWithCalApplicationFinalized(IntPtr c_message)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x7362D8", Offset = "0x7362D8", VA = "0x7362D8", Slot = "20")]
		public override CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x736328", Offset = "0x736328", VA = "0x736328", Slot = "66")]
		protected override CalApplicationFinalized GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	public class MessageWithCalApplicationProposed : Message<CalApplicationProposed>
	{
		[Token(Token = "0x600130F")]
		[Address(RVA = "0x732D8C", Offset = "0x732D8C", VA = "0x732D8C")]
		public MessageWithCalApplicationProposed(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x736484", Offset = "0x736484", VA = "0x736484", Slot = "21")]
		public override CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x7364D4", Offset = "0x7364D4", VA = "0x7364D4", Slot = "66")]
		protected override CalApplicationProposed GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AD")]
	public class MessageWithCalApplicationSuggestionList : Message<CalApplicationSuggestionList>
	{
		[Token(Token = "0x6001312")]
		[Address(RVA = "0x736608", Offset = "0x736608", VA = "0x736608")]
		public MessageWithCalApplicationSuggestionList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x736668", Offset = "0x736668", VA = "0x736668", Slot = "22")]
		public override CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x7366B8", Offset = "0x7366B8", VA = "0x7366B8", Slot = "66")]
		protected override CalApplicationSuggestionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AE")]
	public class MessageWithCloudStorageConflictMetadata : Message<CloudStorageConflictMetadata>
	{
		[Token(Token = "0x6001315")]
		[Address(RVA = "0x732DEC", Offset = "0x732DEC", VA = "0x732DEC")]
		public MessageWithCloudStorageConflictMetadata(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x736940", Offset = "0x736940", VA = "0x736940", Slot = "23")]
		public override CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x736990", Offset = "0x736990", VA = "0x736990", Slot = "66")]
		protected override CloudStorageConflictMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AF")]
	public class MessageWithCloudStorageData : Message<CloudStorageData>
	{
		[Token(Token = "0x6001318")]
		[Address(RVA = "0x732E4C", Offset = "0x732E4C", VA = "0x732E4C")]
		public MessageWithCloudStorageData(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x736B20", Offset = "0x736B20", VA = "0x736B20", Slot = "24")]
		public override CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x736B70", Offset = "0x736B70", VA = "0x736B70", Slot = "66")]
		protected override CloudStorageData GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B0")]
	public class MessageWithCloudStorageMetadataUnderLocal : Message<CloudStorageMetadata>
	{
		[Token(Token = "0x600131B")]
		[Address(RVA = "0x732EAC", Offset = "0x732EAC", VA = "0x732EAC")]
		public MessageWithCloudStorageMetadataUnderLocal(IntPtr c_message)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x736FEC", Offset = "0x736FEC", VA = "0x736FEC", Slot = "25")]
		public override CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x73703C", Offset = "0x73703C", VA = "0x73703C", Slot = "66")]
		protected override CloudStorageMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B1")]
	public class MessageWithCloudStorageMetadataList : Message<CloudStorageMetadataList>
	{
		[Token(Token = "0x600131E")]
		[Address(RVA = "0x732F0C", Offset = "0x732F0C", VA = "0x732F0C")]
		public MessageWithCloudStorageMetadataList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x736CE0", Offset = "0x736CE0", VA = "0x736CE0", Slot = "26")]
		public override CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x736D30", Offset = "0x736D30", VA = "0x736D30", Slot = "66")]
		protected override CloudStorageMetadataList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B2")]
	public class MessageWithCloudStorageUpdateResponse : Message<CloudStorageUpdateResponse>
	{
		[Token(Token = "0x6001321")]
		[Address(RVA = "0x732F6C", Offset = "0x732F6C", VA = "0x732F6C")]
		public MessageWithCloudStorageUpdateResponse(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x7371FC", Offset = "0x7371FC", VA = "0x7371FC", Slot = "27")]
		public override CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x73724C", Offset = "0x73724C", VA = "0x73724C", Slot = "66")]
		protected override CloudStorageUpdateResponse GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B3")]
	public class MessageWithInstalledApplicationList : Message<InstalledApplicationList>
	{
		[Token(Token = "0x6001324")]
		[Address(RVA = "0x73761C", Offset = "0x73761C", VA = "0x73761C")]
		public MessageWithInstalledApplicationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x73767C", Offset = "0x73767C", VA = "0x73767C", Slot = "28")]
		public override InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x7376CC", Offset = "0x7376CC", VA = "0x7376CC", Slot = "66")]
		protected override InstalledApplicationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B4")]
	public class MessageWithLaunchBlockFlowResult : Message<LaunchBlockFlowResult>
	{
		[Token(Token = "0x6001327")]
		[Address(RVA = "0x737954", Offset = "0x737954", VA = "0x737954")]
		public MessageWithLaunchBlockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x7379B4", Offset = "0x7379B4", VA = "0x7379B4", Slot = "29")]
		public override LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x737A04", Offset = "0x737A04", VA = "0x737A04", Slot = "66")]
		protected override LaunchBlockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B5")]
	public class MessageWithLaunchFriendRequestFlowResult : Message<LaunchFriendRequestFlowResult>
	{
		[Token(Token = "0x600132A")]
		[Address(RVA = "0x732FCC", Offset = "0x732FCC", VA = "0x732FCC")]
		public MessageWithLaunchFriendRequestFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x737B54", Offset = "0x737B54", VA = "0x737B54", Slot = "30")]
		public override LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x737BA4", Offset = "0x737BA4", VA = "0x737BA4", Slot = "66")]
		protected override LaunchFriendRequestFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B6")]
	public class MessageWithLaunchReportFlowResult : Message<LaunchReportFlowResult>
	{
		[Token(Token = "0x600132D")]
		[Address(RVA = "0x737CF4", Offset = "0x737CF4", VA = "0x737CF4")]
		public MessageWithLaunchReportFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x737D54", Offset = "0x737D54", VA = "0x737D54", Slot = "31")]
		public override LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x737DA4", Offset = "0x737DA4", VA = "0x737DA4", Slot = "66")]
		protected override LaunchReportFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B7")]
	public class MessageWithLaunchUnblockFlowResult : Message<LaunchUnblockFlowResult>
	{
		[Token(Token = "0x6001330")]
		[Address(RVA = "0x737EF0", Offset = "0x737EF0", VA = "0x737EF0")]
		public MessageWithLaunchUnblockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x737F50", Offset = "0x737F50", VA = "0x737F50", Slot = "32")]
		public override LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x737FA0", Offset = "0x737FA0", VA = "0x737FA0", Slot = "66")]
		protected override LaunchUnblockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B8")]
	public class MessageWithLeaderboardEntryList : Message<LeaderboardEntryList>
	{
		[Token(Token = "0x6001333")]
		[Address(RVA = "0x73302C", Offset = "0x73302C", VA = "0x73302C")]
		public MessageWithLeaderboardEntryList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x7381CC", Offset = "0x7381CC", VA = "0x7381CC", Slot = "34")]
		public override LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x73821C", Offset = "0x73821C", VA = "0x73821C", Slot = "66")]
		protected override LeaderboardEntryList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B9")]
	public class MessageWithLinkedAccountList : Message<LinkedAccountList>
	{
		[Token(Token = "0x6001336")]
		[Address(RVA = "0x738500", Offset = "0x738500", VA = "0x738500")]
		public MessageWithLinkedAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x738560", Offset = "0x738560", VA = "0x738560", Slot = "35")]
		public override LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x7385B0", Offset = "0x7385B0", VA = "0x7385B0", Slot = "66")]
		protected override LinkedAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BA")]
	public class MessageWithLivestreamingApplicationStatus : Message<LivestreamingApplicationStatus>
	{
		[Token(Token = "0x6001339")]
		[Address(RVA = "0x738838", Offset = "0x738838", VA = "0x738838")]
		public MessageWithLivestreamingApplicationStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x738898", Offset = "0x738898", VA = "0x738898", Slot = "36")]
		public override LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x7388E8", Offset = "0x7388E8", VA = "0x7388E8", Slot = "66")]
		protected override LivestreamingApplicationStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BB")]
	public class MessageWithLivestreamingStartResult : Message<LivestreamingStartResult>
	{
		[Token(Token = "0x600133C")]
		[Address(RVA = "0x738A20", Offset = "0x738A20", VA = "0x738A20")]
		public MessageWithLivestreamingStartResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x738A80", Offset = "0x738A80", VA = "0x738A80", Slot = "37")]
		public override LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x738AD0", Offset = "0x738AD0", VA = "0x738AD0", Slot = "66")]
		protected override LivestreamingStartResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BC")]
	public class MessageWithLivestreamingStatus : Message<LivestreamingStatus>
	{
		[Token(Token = "0x600133F")]
		[Address(RVA = "0x7330EC", Offset = "0x7330EC", VA = "0x7330EC")]
		public MessageWithLivestreamingStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x738C04", Offset = "0x738C04", VA = "0x738C04", Slot = "38")]
		public override LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x738C54", Offset = "0x738C54", VA = "0x738C54", Slot = "66")]
		protected override LivestreamingStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BD")]
	public class MessageWithLivestreamingVideoStats : Message<LivestreamingVideoStats>
	{
		[Token(Token = "0x6001342")]
		[Address(RVA = "0x738DE8", Offset = "0x738DE8", VA = "0x738DE8")]
		public MessageWithLivestreamingVideoStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x738E48", Offset = "0x738E48", VA = "0x738E48", Slot = "39")]
		public override LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x738E98", Offset = "0x738E98", VA = "0x738E98", Slot = "66")]
		protected override LivestreamingVideoStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BE")]
	public class MessageWithMatchmakingAdminSnapshot : Message<MatchmakingAdminSnapshot>
	{
		[Token(Token = "0x6001345")]
		[Address(RVA = "0x73314C", Offset = "0x73314C", VA = "0x73314C")]
		public MessageWithMatchmakingAdminSnapshot(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x738FF4", Offset = "0x738FF4", VA = "0x738FF4", Slot = "40")]
		public override MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x739044", Offset = "0x739044", VA = "0x739044", Slot = "66")]
		protected override MatchmakingAdminSnapshot GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BF")]
	public class MessageWithMatchmakingEnqueueResult : Message<MatchmakingEnqueueResult>
	{
		[Token(Token = "0x6001348")]
		[Address(RVA = "0x73320C", Offset = "0x73320C", VA = "0x73320C")]
		public MessageWithMatchmakingEnqueueResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x739408", Offset = "0x739408", VA = "0x739408", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x739458", Offset = "0x739458", VA = "0x739458", Slot = "66")]
		protected override MatchmakingEnqueueResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C0")]
	public class MessageWithMatchmakingEnqueueResultAndRoom : Message<MatchmakingEnqueueResultAndRoom>
	{
		[Token(Token = "0x600134B")]
		[Address(RVA = "0x73326C", Offset = "0x73326C", VA = "0x73326C")]
		public MessageWithMatchmakingEnqueueResultAndRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x739670", Offset = "0x739670", VA = "0x739670", Slot = "43")]
		public override MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x7396C0", Offset = "0x7396C0", VA = "0x7396C0", Slot = "66")]
		protected override MatchmakingEnqueueResultAndRoom GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C1")]
	public class MessageWithMatchmakingStatsUnderMatchmakingStats : Message<MatchmakingStats>
	{
		[Token(Token = "0x600134E")]
		[Address(RVA = "0x7332CC", Offset = "0x7332CC", VA = "0x7332CC")]
		public MessageWithMatchmakingStatsUnderMatchmakingStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x739C90", Offset = "0x739C90", VA = "0x739C90", Slot = "44")]
		public override MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x739CE0", Offset = "0x739CE0", VA = "0x739CE0", Slot = "66")]
		protected override MatchmakingStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C2")]
	public class MessageWithOrgScopedID : Message<OrgScopedID>
	{
		[Token(Token = "0x6001351")]
		[Address(RVA = "0x73332C", Offset = "0x73332C", VA = "0x73332C")]
		public MessageWithOrgScopedID(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x739FAC", Offset = "0x739FAC", VA = "0x739FAC", Slot = "45")]
		public override OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x739FFC", Offset = "0x739FFC", VA = "0x739FFC", Slot = "66")]
		protected override OrgScopedID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C3")]
	public class MessageWithParty : Message<Party>
	{
		[Token(Token = "0x6001354")]
		[Address(RVA = "0x73A130", Offset = "0x73A130", VA = "0x73A130")]
		public MessageWithParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x73A190", Offset = "0x73A190", VA = "0x73A190", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x73A1E0", Offset = "0x73A1E0", VA = "0x73A1E0", Slot = "66")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C4")]
	public class MessageWithPartyUnderCurrentParty : Message<Party>
	{
		[Token(Token = "0x6001357")]
		[Address(RVA = "0x73338C", Offset = "0x73338C", VA = "0x73338C")]
		public MessageWithPartyUnderCurrentParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x73A6C0", Offset = "0x73A6C0", VA = "0x73A6C0", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x73A710", Offset = "0x73A710", VA = "0x73A710", Slot = "66")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C5")]
	public class MessageWithPartyID : Message<PartyID>
	{
		[Token(Token = "0x600135A")]
		[Address(RVA = "0x73A4DC", Offset = "0x73A4DC", VA = "0x73A4DC")]
		public MessageWithPartyID(IntPtr c_message)
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x73A53C", Offset = "0x73A53C", VA = "0x73A53C", Slot = "47")]
		public override PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x73A58C", Offset = "0x73A58C", VA = "0x73A58C", Slot = "66")]
		protected override PartyID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C6")]
	public class MessageWithPidList : Message<PidList>
	{
		[Token(Token = "0x600135D")]
		[Address(RVA = "0x7333EC", Offset = "0x7333EC", VA = "0x7333EC")]
		public MessageWithPidList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x73A7B8", Offset = "0x73A7B8", VA = "0x73A7B8", Slot = "48")]
		public override PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x73A808", Offset = "0x73A808", VA = "0x73A808", Slot = "66")]
		protected override PidList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C7")]
	public class MessageWithProductList : Message<ProductList>
	{
		[Token(Token = "0x6001360")]
		[Address(RVA = "0x73344C", Offset = "0x73344C", VA = "0x73344C")]
		public MessageWithProductList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x73ADDC", Offset = "0x73ADDC", VA = "0x73ADDC", Slot = "49")]
		public override ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x73AE2C", Offset = "0x73AE2C", VA = "0x73AE2C", Slot = "66")]
		protected override ProductList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C8")]
	public class MessageWithPurchase : Message<Purchase>
	{
		[Token(Token = "0x6001363")]
		[Address(RVA = "0x7334AC", Offset = "0x7334AC", VA = "0x7334AC")]
		public MessageWithPurchase(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x73B0E8", Offset = "0x73B0E8", VA = "0x73B0E8", Slot = "50")]
		public override Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x73B138", Offset = "0x73B138", VA = "0x73B138", Slot = "66")]
		protected override Purchase GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C9")]
	public class MessageWithPurchaseList : Message<PurchaseList>
	{
		[Token(Token = "0x6001366")]
		[Address(RVA = "0x73350C", Offset = "0x73350C", VA = "0x73350C")]
		public MessageWithPurchaseList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x73B2A8", Offset = "0x73B2A8", VA = "0x73B2A8", Slot = "51")]
		public override PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x73B2F8", Offset = "0x73B2F8", VA = "0x73B2F8", Slot = "66")]
		protected override PurchaseList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CA")]
	public class MessageWithRoom : Message<Room>
	{
		[Token(Token = "0x6001369")]
		[Address(RVA = "0x73356C", Offset = "0x73356C", VA = "0x73356C")]
		public MessageWithRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x73B5B4", Offset = "0x73B5B4", VA = "0x73B5B4", Slot = "52")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x73B604", Offset = "0x73B604", VA = "0x73B604", Slot = "66")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CB")]
	public class MessageWithRoomUnderCurrentRoom : Message<Room>
	{
		[Token(Token = "0x600136C")]
		[Address(RVA = "0x7335CC", Offset = "0x7335CC", VA = "0x7335CC")]
		public MessageWithRoomUnderCurrentRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x73BE84", Offset = "0x73BE84", VA = "0x73BE84", Slot = "52")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x73BED4", Offset = "0x73BED4", VA = "0x73BED4", Slot = "66")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CC")]
	public class MessageWithRoomUnderViewerRoom : Message<Room>
	{
		[Token(Token = "0x600136F")]
		[Address(RVA = "0x73362C", Offset = "0x73362C", VA = "0x73362C")]
		public MessageWithRoomUnderViewerRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x73BF7C", Offset = "0x73BF7C", VA = "0x73BF7C", Slot = "52")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x73BFCC", Offset = "0x73BFCC", VA = "0x73BFCC", Slot = "66")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CD")]
	public class MessageWithRoomList : Message<RoomList>
	{
		[Token(Token = "0x6001372")]
		[Address(RVA = "0x73368C", Offset = "0x73368C", VA = "0x73368C")]
		public MessageWithRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x73BB78", Offset = "0x73BB78", VA = "0x73BB78", Slot = "55")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x73BBC8", Offset = "0x73BBC8", VA = "0x73BBC8", Slot = "66")]
		protected override RoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CE")]
	public class MessageWithRoomInviteNotification : Message<RoomInviteNotification>
	{
		[Token(Token = "0x6001375")]
		[Address(RVA = "0x7336EC", Offset = "0x7336EC", VA = "0x7336EC")]
		public MessageWithRoomInviteNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x73B6AC", Offset = "0x73B6AC", VA = "0x73B6AC", Slot = "53")]
		public override RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x73B6FC", Offset = "0x73B6FC", VA = "0x73B6FC", Slot = "66")]
		protected override RoomInviteNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CF")]
	public class MessageWithRoomInviteNotificationList : Message<RoomInviteNotificationList>
	{
		[Token(Token = "0x6001378")]
		[Address(RVA = "0x73374C", Offset = "0x73374C", VA = "0x73374C")]
		public MessageWithRoomInviteNotificationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x73B86C", Offset = "0x73B86C", VA = "0x73B86C", Slot = "54")]
		public override RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x73B8BC", Offset = "0x73B8BC", VA = "0x73B8BC", Slot = "66")]
		protected override RoomInviteNotificationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D0")]
	public class MessageWithSdkAccountList : Message<SdkAccountList>
	{
		[Token(Token = "0x600137B")]
		[Address(RVA = "0x7337AC", Offset = "0x7337AC", VA = "0x7337AC")]
		public MessageWithSdkAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x73C074", Offset = "0x73C074", VA = "0x73C074", Slot = "56")]
		public override SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x73C0C4", Offset = "0x73C0C4", VA = "0x73C0C4", Slot = "66")]
		protected override SdkAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D1")]
	public class MessageWithShareMediaResult : Message<ShareMediaResult>
	{
		[Token(Token = "0x600137E")]
		[Address(RVA = "0x73380C", Offset = "0x73380C", VA = "0x73380C")]
		public MessageWithShareMediaResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x73C34C", Offset = "0x73C34C", VA = "0x73C34C", Slot = "57")]
		public override ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x73C39C", Offset = "0x73C39C", VA = "0x73C39C", Slot = "66")]
		protected override ShareMediaResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D2")]
	public class MessageWithString : Message<string>
	{
		[Token(Token = "0x6001381")]
		[Address(RVA = "0x73386C", Offset = "0x73386C", VA = "0x73386C")]
		public MessageWithString(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x73C4D0", Offset = "0x73C4D0", VA = "0x73C4D0", Slot = "58")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x73C520", Offset = "0x73C520", VA = "0x73C520", Slot = "66")]
		protected override string GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D3")]
	public class MessageWithSystemPermission : Message<SystemPermission>
	{
		[Token(Token = "0x6001384")]
		[Address(RVA = "0x73C58C", Offset = "0x73C58C", VA = "0x73C58C")]
		public MessageWithSystemPermission(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x73C5EC", Offset = "0x73C5EC", VA = "0x73C5EC", Slot = "59")]
		public override SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x73C63C", Offset = "0x73C63C", VA = "0x73C63C", Slot = "66")]
		protected override SystemPermission GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D4")]
	public class MessageWithSystemVoipState : Message<SystemVoipState>
	{
		[Token(Token = "0x6001387")]
		[Address(RVA = "0x7338CC", Offset = "0x7338CC", VA = "0x7338CC")]
		public MessageWithSystemVoipState(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x73C788", Offset = "0x73C788", VA = "0x73C788", Slot = "60")]
		public override SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x73C7D8", Offset = "0x73C7D8", VA = "0x73C7D8", Slot = "66")]
		protected override SystemVoipState GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D5")]
	public class MessageWithUser : Message<User>
	{
		[Token(Token = "0x600138A")]
		[Address(RVA = "0x73392C", Offset = "0x73392C", VA = "0x73392C")]
		public MessageWithUser(IntPtr c_message)
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x73C920", Offset = "0x73C920", VA = "0x73C920", Slot = "61")]
		public override User GetUser()
		{
			return null;
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x73C970", Offset = "0x73C970", VA = "0x73C970", Slot = "66")]
		protected override User GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D6")]
	public class MessageWithUserAndRoomList : Message<UserAndRoomList>
	{
		[Token(Token = "0x600138D")]
		[Address(RVA = "0x73398C", Offset = "0x73398C", VA = "0x73398C")]
		public MessageWithUserAndRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x73CB1C", Offset = "0x73CB1C", VA = "0x73CB1C", Slot = "62")]
		public override UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x73CB6C", Offset = "0x73CB6C", VA = "0x73CB6C", Slot = "66")]
		protected override UserAndRoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D7")]
	public class MessageWithUserList : Message<UserList>
	{
		[Token(Token = "0x6001390")]
		[Address(RVA = "0x7339EC", Offset = "0x7339EC", VA = "0x7339EC")]
		public MessageWithUserList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x73CE28", Offset = "0x73CE28", VA = "0x73CE28", Slot = "63")]
		public override UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x73CE78", Offset = "0x73CE78", VA = "0x73CE78", Slot = "66")]
		protected override UserList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D8")]
	public class MessageWithUserProof : Message<UserProof>
	{
		[Token(Token = "0x6001393")]
		[Address(RVA = "0x733A4C", Offset = "0x733A4C", VA = "0x733A4C")]
		public MessageWithUserProof(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x73D134", Offset = "0x73D134", VA = "0x73D134", Slot = "64")]
		public override UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x73D184", Offset = "0x73D184", VA = "0x73D184", Slot = "66")]
		protected override UserProof GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D9")]
	public class MessageWithUserReportID : Message<UserReportID>
	{
		[Token(Token = "0x6001396")]
		[Address(RVA = "0x73D2B8", Offset = "0x73D2B8", VA = "0x73D2B8")]
		public MessageWithUserReportID(IntPtr c_message)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x73D318", Offset = "0x73D318", VA = "0x73D318", Slot = "65")]
		public override UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x73D368", Offset = "0x73D368", VA = "0x73D368", Slot = "66")]
		protected override UserReportID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DA")]
	public class MessageWithNetworkingPeer : Message<NetworkingPeer>
	{
		[Token(Token = "0x6001399")]
		[Address(RVA = "0x733AAC", Offset = "0x733AAC", VA = "0x733AAC")]
		public MessageWithNetworkingPeer(IntPtr c_message)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x739E50", Offset = "0x739E50", VA = "0x739E50", Slot = "6")]
		public override NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x739EA0", Offset = "0x739EA0", VA = "0x739EA0", Slot = "66")]
		protected override NetworkingPeer GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DB")]
	public class MessageWithPingResult : Message<PingResult>
	{
		[Token(Token = "0x600139C")]
		[Address(RVA = "0x733B0C", Offset = "0x733B0C", VA = "0x733B0C")]
		public MessageWithPingResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x73AA90", Offset = "0x73AA90", VA = "0x73AA90", Slot = "5")]
		public override PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x73AAE0", Offset = "0x73AAE0", VA = "0x73AAE0", Slot = "66")]
		protected override PingResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DC")]
	public class MessageWithLeaderboardDidUpdate : Message<bool>
	{
		[Token(Token = "0x600139F")]
		[Address(RVA = "0x73308C", Offset = "0x73308C", VA = "0x73308C")]
		public MessageWithLeaderboardDidUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x7380F0", Offset = "0x7380F0", VA = "0x7380F0", Slot = "33")]
		public override bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x738140", Offset = "0x738140", VA = "0x738140", Slot = "66")]
		protected override bool GetDataFromMessage(IntPtr c_message)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002DD")]
	public class MessageWithMatchmakingNotification : Message<Room>
	{
		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x733B6C", Offset = "0x733B6C", VA = "0x733B6C")]
		public MessageWithMatchmakingNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x739850", Offset = "0x739850", VA = "0x739850", Slot = "52")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x7398A0", Offset = "0x7398A0", VA = "0x7398A0", Slot = "66")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DE")]
	public class MessageWithMatchmakingBrowseResult : Message<MatchmakingBrowseResult>
	{
		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x7331AC", Offset = "0x7331AC", VA = "0x7331AC")]
		public MessageWithMatchmakingBrowseResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x7391B0", Offset = "0x7391B0", VA = "0x7391B0", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x739214", Offset = "0x739214", VA = "0x739214", Slot = "55")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x739278", Offset = "0x739278", VA = "0x739278", Slot = "66")]
		protected override MatchmakingBrowseResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DF")]
	public class MessageWithHttpTransferUpdate : Message<HttpTransferUpdate>
	{
		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x733BCC", Offset = "0x733BCC", VA = "0x733BCC")]
		public MessageWithHttpTransferUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x7373BC", Offset = "0x7373BC", VA = "0x7373BC", Slot = "7")]
		public override HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x73740C", Offset = "0x73740C", VA = "0x73740C", Slot = "66")]
		protected override HttpTransferUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E0")]
	public class MessageWithPlatformInitialize : Message<PlatformInitialize>
	{
		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x733C2C", Offset = "0x733C2C", VA = "0x733C2C")]
		public MessageWithPlatformInitialize(IntPtr c_message)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x73AC58", Offset = "0x73AC58", VA = "0x73AC58", Slot = "8")]
		public override PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x73ACA8", Offset = "0x73ACA8", VA = "0x73ACA8", Slot = "66")]
		protected override PlatformInitialize GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
}
namespace Oculus.Platform.Models
{
	[Token(Token = "0x20002E1")]
	public class AbuseReportRecording
	{
		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string RecordingUuid;

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x734CD4", Offset = "0x734CD4", VA = "0x734CD4")]
		public AbuseReportRecording(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class AchievementDefinition
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly AchievementType Type;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint BitfieldLength;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong Target;

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x73D4B4", Offset = "0x73D4B4", VA = "0x73D4B4")]
		public AchievementDefinition(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class AchievementDefinitionList : DeserializableList<AchievementDefinition>
	{
		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x734E58", Offset = "0x734E58", VA = "0x734E58")]
		public AchievementDefinitionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class AchievementProgress
	{
		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bitfield;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong Count;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool IsUnlocked;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Name;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DateTime UnlockTime;

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x73D57C", Offset = "0x73D57C", VA = "0x73D57C")]
		public AchievementProgress(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class AchievementProgressList : DeserializableList<AchievementProgress>
	{
		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x735164", Offset = "0x735164", VA = "0x735164")]
		public AchievementProgressList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class AchievementUpdate
	{
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool JustUnlocked;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x735470", Offset = "0x735470", VA = "0x735470")]
		public AchievementUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class ApplicationVersion
	{
		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CurrentCode;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string CurrentName;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int LatestCode;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string LatestName;

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x73560C", Offset = "0x73560C", VA = "0x73560C")]
		public ApplicationVersion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class AssetDetails
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string AssetType;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string DownloadStatus;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Filepath;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string IapStatus;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly LanguagePackInfo LanguageOptional;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5708F4", Offset = "0x5708F4")]
		public readonly LanguagePackInfo Language;

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x7357CC", Offset = "0x7357CC", VA = "0x7357CC")]
		public AssetDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class AssetDetailsList : DeserializableList<AssetDetails>
	{
		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x735A00", Offset = "0x735A00", VA = "0x735A00")]
		public AssetDetailsList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class AssetFileDeleteResult
	{
		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Filepath;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Success;

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x735CD8", Offset = "0x735CD8", VA = "0x735CD8")]
		public AssetFileDeleteResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class AssetFileDownloadCancelResult
	{
		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Filepath;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Success;

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x735E9C", Offset = "0x735E9C", VA = "0x735E9C")]
		public AssetFileDownloadCancelResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class AssetFileDownloadResult
	{
		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x736060", Offset = "0x736060", VA = "0x736060")]
		public AssetFileDownloadResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class AssetFileDownloadUpdate
	{
		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint BytesTotal;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly int BytesTransferred;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Completed;

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x7361F8", Offset = "0x7361F8", VA = "0x7361F8")]
		public AssetFileDownloadUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class CalApplicationFinalized
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CountdownMS;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string LaunchDetails;

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x7363D0", Offset = "0x7363D0", VA = "0x7363D0")]
		public CalApplicationFinalized(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class CalApplicationProposed
	{
		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x73657C", Offset = "0x73657C", VA = "0x73657C")]
		public CalApplicationProposed(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class CalApplicationSuggestion
	{
		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string SocialContext;

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x73D710", Offset = "0x73D710", VA = "0x73D710")]
		public CalApplicationSuggestion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class CalApplicationSuggestionList : DeserializableList<CalApplicationSuggestion>
	{
		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x736760", Offset = "0x736760", VA = "0x736760")]
		public CalApplicationSuggestionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class CloudStorageConflictMetadata
	{
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly CloudStorageMetadata Local;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CloudStorageMetadata Remote;

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x736A38", Offset = "0x736A38", VA = "0x736A38")]
		public CloudStorageConflictMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class CloudStorageData
	{
		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly byte[] Data;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint DataSize;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Key;

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x736C18", Offset = "0x736C18", VA = "0x736C18")]
		public CloudStorageData(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class CloudStorageMetadata
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly long Counter;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint DataSize;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string ExtraData;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Key;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly ulong SaveTime;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly CloudStorageDataStatus Status;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string VersionHandle;

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x7370E4", Offset = "0x7370E4", VA = "0x7370E4")]
		public CloudStorageMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class CloudStorageMetadataList : DeserializableList<CloudStorageMetadata>
	{
		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x736DD8", Offset = "0x736DD8", VA = "0x736DD8")]
		public CloudStorageMetadataList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class CloudStorageUpdateResponse
	{
		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Key;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CloudStorageUpdateStatus Status;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string VersionHandle;

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x7372F4", Offset = "0x7372F4", VA = "0x7372F4")]
		public CloudStorageUpdateResponse(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002F7")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57092C", Offset = "0x57092C")]
	public class DeserializableList<T> : IList<T>, IEnumerable, ICollection<T>, IEnumerable<T>
	{
		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> _Data;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _NextUrl;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _PreviousUrl;

		[Token(Token = "0x17000179")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60013C7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017A")]
		public int Count
		{
			[Token(Token = "0x60013C6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017B")]
		public T Item
		{
			[Token(Token = "0x60013C9")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60013CA")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570964", Offset = "0x570964")]
		public List<T> Data
		{
			[Token(Token = "0x60013D5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		public bool HasNextPage
		{
			[Token(Token = "0x60013D6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017E")]
		public bool HasPreviousPage
		{
			[Token(Token = "0x60013D7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017F")]
		public string NextUrl
		{
			[Token(Token = "0x60013D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public string PreviousUrl
		{
			[Token(Token = "0x60013D9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013C5")]
		public DeserializableList()
		{
		}

		[Token(Token = "0x60013C8")]
		public int IndexOf(T obj)
		{
			return default(int);
		}

		[Token(Token = "0x60013CB")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60013CC")]
		public void Clear()
		{
		}

		[Token(Token = "0x60013CD")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CE")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60013CF")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x60013D1")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D2")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x60013D3")]
		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F8")]
	public class Error
	{
		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int Code;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int HttpCode;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Message;

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x73139C", Offset = "0x73139C", VA = "0x73139C")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class HttpTransferUpdate
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly byte[] Payload;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool IsCompleted;

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x7374B4", Offset = "0x7374B4", VA = "0x7374B4")]
		public HttpTransferUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class InstalledApplication
	{
		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ApplicationId;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string PackageName;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Status;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int VersionCode;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string VersionName;

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x73D7B0", Offset = "0x73D7B0", VA = "0x73D7B0")]
		public InstalledApplication(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class InstalledApplicationList : DeserializableList<InstalledApplication>
	{
		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x737774", Offset = "0x737774", VA = "0x737774")]
		public InstalledApplicationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class LanguagePackInfo
	{
		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string EnglishName;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string NativeName;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Tag;

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x73D65C", Offset = "0x73D65C", VA = "0x73D65C")]
		public LanguagePackInfo(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class LaunchBlockFlowResult
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidBlock;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidCancel;

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x737AAC", Offset = "0x737AAC", VA = "0x737AAC")]
		public LaunchBlockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class LaunchDetails
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string DeeplinkMessage;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string LaunchSource;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly LaunchType LaunchType;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong RoomID;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5709A0", Offset = "0x5709A0")]
		public readonly UserList Users;

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x73D88C", Offset = "0x73D88C", VA = "0x73D88C")]
		public LaunchDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class LaunchFriendRequestFlowResult
	{
		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidSendRequest;

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x737C4C", Offset = "0x737C4C", VA = "0x737C4C")]
		public LaunchFriendRequestFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class LaunchReportFlowResult
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong UserReportId;

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x737E4C", Offset = "0x737E4C", VA = "0x737E4C")]
		public LaunchReportFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class LaunchUnblockFlowResult
	{
		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidUnblock;

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x738048", Offset = "0x738048", VA = "0x738048")]
		public LaunchUnblockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class LeaderboardEntry
	{
		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte[] ExtraData;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int Rank;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly long Score;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly DateTime Timestamp;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly User User;

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x73D9B4", Offset = "0x73D9B4", VA = "0x73D9B4")]
		public LeaderboardEntry(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class LeaderboardEntryList : DeserializableList<LeaderboardEntry>
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong TotalCount;

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x7382C4", Offset = "0x7382C4", VA = "0x7382C4")]
		public LeaderboardEntryList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class LinkedAccount
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string AccessToken;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ServiceProvider ServiceProvider;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string UserId;

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x73DAB4", Offset = "0x73DAB4", VA = "0x73DAB4")]
		public LinkedAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class LinkedAccountList : DeserializableList<LinkedAccount>
	{
		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x738658", Offset = "0x738658", VA = "0x738658")]
		public LinkedAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class LivestreamingApplicationStatus
	{
		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool StreamingEnabled;

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x738990", Offset = "0x738990", VA = "0x738990")]
		public LivestreamingApplicationStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class LivestreamingStartResult
	{
		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LivestreamingStartStatus StreamingResult;

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x738B78", Offset = "0x738B78", VA = "0x738B78")]
		public LivestreamingStartResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class LivestreamingStatus
	{
		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool CommentsVisible;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool IsPaused;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public readonly bool LivestreamingEnabled;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int LivestreamingType;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool MicEnabled;

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x738CFC", Offset = "0x738CFC", VA = "0x738CFC")]
		public LivestreamingStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class LivestreamingVideoStats
	{
		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CommentCount;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int ReactionCount;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string TotalViews;

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x738F40", Offset = "0x738F40", VA = "0x738F40")]
		public LivestreamingVideoStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class MatchmakingAdminSnapshot
	{
		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingAdminSnapshotCandidateList Candidates;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double MyCurrentThreshold;

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x7390EC", Offset = "0x7390EC", VA = "0x7390EC")]
		public MatchmakingAdminSnapshot(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class MatchmakingAdminSnapshotCandidate
	{
		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool CanMatch;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double MyTotalScore;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly double TheirCurrentThreshold;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly double TheirTotalScore;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string TraceId;

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x73DD48", Offset = "0x73DD48", VA = "0x73DD48")]
		public MatchmakingAdminSnapshotCandidate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class MatchmakingAdminSnapshotCandidateList : DeserializableList<MatchmakingAdminSnapshotCandidate>
	{
		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x73DB68", Offset = "0x73DB68", VA = "0x73DB68")]
		public MatchmakingAdminSnapshotCandidateList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class MatchmakingBrowseResult
	{
		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingEnqueueResult EnqueueResult;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly RoomList Rooms;

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x739320", Offset = "0x739320", VA = "0x739320")]
		public MatchmakingBrowseResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class MatchmakingEnqueuedUser
	{
		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<string, string> CustomData;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly User UserOptional;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5709D8", Offset = "0x5709D8")]
		public readonly User User;

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x73DE28", Offset = "0x73DE28", VA = "0x73DE28")]
		public MatchmakingEnqueuedUser(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class MatchmakingEnqueuedUserList : DeserializableList<MatchmakingEnqueuedUser>
	{
		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x73DF24", Offset = "0x73DF24", VA = "0x73DF24")]
		public MatchmakingEnqueuedUserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class MatchmakingEnqueueResult
	{
		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingAdminSnapshot AdminSnapshotOptional;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570A10", Offset = "0x570A10")]
		public readonly MatchmakingAdminSnapshot AdminSnapshot;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint AverageWait;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly uint MatchesInLastHourCount;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly uint MaxExpectedWait;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Pool;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly uint RecentMatchPercentage;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string RequestHash;

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x739500", Offset = "0x739500", VA = "0x739500")]
		public MatchmakingEnqueueResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class MatchmakingEnqueueResultAndRoom
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingEnqueueResult MatchmakingEnqueueResult;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Room Room;

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x739768", Offset = "0x739768", VA = "0x739768")]
		public MatchmakingEnqueueResultAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class MatchmakingStats
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint DrawCount;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint LossCount;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint SkillLevel;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly uint WinCount;

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x739D88", Offset = "0x739D88", VA = "0x739D88")]
		public MatchmakingStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class NetworkingPeer
	{
		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570A48", Offset = "0x570A48")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x570A48", Offset = "0x570A48")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570A84", Offset = "0x570A84")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x570A84", Offset = "0x570A84")]
		private PeerConnectionState <State>k__BackingField;

		[Token(Token = "0x17000181")]
		public ulong ID
		{
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0x73E114", Offset = "0x73E114", VA = "0x73E114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570AC0", Offset = "0x570AC0")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60013F7")]
			[Address(RVA = "0x73E104", Offset = "0x73E104", VA = "0x73E104")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570AD0", Offset = "0x570AD0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public PeerConnectionState State
		{
			[Token(Token = "0x60013F8")]
			[Address(RVA = "0x73E11C", Offset = "0x73E11C", VA = "0x73E11C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570AE0", Offset = "0x570AE0")]
			get
			{
				return default(PeerConnectionState);
			}
			[Token(Token = "0x60013F9")]
			[Address(RVA = "0x73E10C", Offset = "0x73E10C", VA = "0x73E10C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570AF0", Offset = "0x570AF0")]
			private set
			{
			}
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x739F70", Offset = "0x739F70", VA = "0x739F70")]
		public NetworkingPeer(ulong id, PeerConnectionState state)
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class OrgScopedID
	{
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x73A0A4", Offset = "0x73A0A4", VA = "0x73A0A4")]
		public OrgScopedID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class Party
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570B00", Offset = "0x570B00")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly User LeaderOptional;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570B38", Offset = "0x570B38")]
		public readonly User Leader;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly Room RoomOptional;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570B70", Offset = "0x570B70")]
		public readonly Room Room;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570BA8", Offset = "0x570BA8")]
		public readonly UserList Users;

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x73A288", Offset = "0x73A288", VA = "0x73A288")]
		public Party(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class PartyID
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x73A634", Offset = "0x73A634", VA = "0x73A634")]
		public PartyID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class Pid
	{
		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Id;

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x73E124", Offset = "0x73E124", VA = "0x73E124")]
		public Pid(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class PidList : DeserializableList<Pid>
	{
		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x73A8B0", Offset = "0x73A8B0", VA = "0x73A8B0")]
		public PidList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class PingResult
	{
		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570BE0", Offset = "0x570BE0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x570BE0", Offset = "0x570BE0")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong? pingTimeUsec;

		[Token(Token = "0x17000183")]
		public ulong ID
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0x73E1B8", Offset = "0x73E1B8", VA = "0x73E1B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570C1C", Offset = "0x570C1C")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6001401")]
			[Address(RVA = "0x73E1B0", Offset = "0x73E1B0", VA = "0x73E1B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x570C2C", Offset = "0x570C2C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public ulong PingTimeUsec
		{
			[Token(Token = "0x6001402")]
			[Address(RVA = "0x73E1C0", Offset = "0x73E1C0", VA = "0x73E1C0")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000185")]
		public bool IsTimeout
		{
			[Token(Token = "0x6001403")]
			[Address(RVA = "0x73E23C", Offset = "0x73E23C", VA = "0x73E23C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x73AC18", Offset = "0x73AC18", VA = "0x73AC18")]
		public PingResult(ulong id, ulong? pingTimeUsec)
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class PlatformInitialize
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly PlatformInitializeResult Result;

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x73AD50", Offset = "0x73AD50", VA = "0x73AD50")]
		public PlatformInitialize(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class Product
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Description;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string FormattedPrice;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Name;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Sku;

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x73E298", Offset = "0x73E298", VA = "0x73E298")]
		public Product(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class ProductList : DeserializableList<Product>
	{
		[Token(Token = "0x6001406")]
		[Address(RVA = "0x73AED4", Offset = "0x73AED4", VA = "0x73AED4")]
		public ProductList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class Purchase
	{
		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly DateTime ExpirationTime;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime GrantTime;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly ulong ID;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string Sku;

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x73B1E0", Offset = "0x73B1E0", VA = "0x73B1E0")]
		public Purchase(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class PurchaseList : DeserializableList<Purchase>
	{
		[Token(Token = "0x6001408")]
		[Address(RVA = "0x73B3A0", Offset = "0x73B3A0", VA = "0x73B3A0")]
		public PurchaseList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class Room
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ApplicationID;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Dictionary<string, string> DataStore;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Description;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong ID;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570C3C", Offset = "0x570C3C")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly bool IsMembershipLocked;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly RoomJoinPolicy JoinPolicy;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly RoomJoinability Joinability;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly MatchmakingEnqueuedUserList MatchedUsersOptional;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570C74", Offset = "0x570C74")]
		public readonly MatchmakingEnqueuedUserList MatchedUsers;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly uint MaxUsers;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly string Name;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly User OwnerOptional;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570CAC", Offset = "0x570CAC")]
		public readonly User Owner;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly RoomType Type;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570CE4", Offset = "0x570CE4")]
		public readonly UserList Users;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly uint Version;

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x739948", Offset = "0x739948", VA = "0x739948")]
		public Room(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class RoomList : DeserializableList<Room>
	{
		[Token(Token = "0x600140A")]
		[Address(RVA = "0x73BC70", Offset = "0x73BC70", VA = "0x73BC70")]
		public RoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class RoomInviteNotification
	{
		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong RoomID;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ulong SenderID;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly DateTime SentTime;

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x73B7A4", Offset = "0x73B7A4", VA = "0x73B7A4")]
		public RoomInviteNotification(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class RoomInviteNotificationList : DeserializableList<RoomInviteNotification>
	{
		[Token(Token = "0x600140C")]
		[Address(RVA = "0x73B964", Offset = "0x73B964", VA = "0x73B964")]
		public RoomInviteNotificationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000323")]
	public class SdkAccount
	{
		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly SdkAccountType AccountType;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong UserId;

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x73E360", Offset = "0x73E360", VA = "0x73E360")]
		public SdkAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class SdkAccountList : DeserializableList<SdkAccount>
	{
		[Token(Token = "0x600140E")]
		[Address(RVA = "0x73C16C", Offset = "0x73C16C", VA = "0x73C16C")]
		public SdkAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class ShareMediaResult
	{
		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ShareMediaStatus Status;

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x73C444", Offset = "0x73C444", VA = "0x73C444")]
		public ShareMediaResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000326")]
	public class SystemPermission
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool HasPermission;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly PermissionGrantStatus PermissionGrantStatus;

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x73C6E4", Offset = "0x73C6E4", VA = "0x73C6E4")]
		public SystemPermission(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class SystemVoipState
	{
		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly VoipMuteState MicrophoneMuted;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly SystemVoipStatus Status;

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x73C880", Offset = "0x73C880", VA = "0x73C880")]
		public SystemVoipState(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class User
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string ImageURL;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string InviteToken;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string OculusID;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Presence;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly UserPresenceStatus PresenceStatus;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string SmallImageUrl;

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x73CA18", Offset = "0x73CA18", VA = "0x73CA18")]
		public User(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class UserList : DeserializableList<User>
	{
		[Token(Token = "0x6001413")]
		[Address(RVA = "0x73CF20", Offset = "0x73CF20", VA = "0x73CF20")]
		public UserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class UserAndRoom
	{
		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Room RoomOptional;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570D1C", Offset = "0x570D1C")]
		public readonly Room Room;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly User User;

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x73E400", Offset = "0x73E400", VA = "0x73E400")]
		public UserAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class UserAndRoomList : DeserializableList<UserAndRoom>
	{
		[Token(Token = "0x6001415")]
		[Address(RVA = "0x73CC14", Offset = "0x73CC14", VA = "0x73CC14")]
		public UserAndRoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class UserProof
	{
		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Value;

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x73D22C", Offset = "0x73D22C", VA = "0x73D22C")]
		public UserProof(IntPtr o)
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class UserReportID
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x73D410", Offset = "0x73D410", VA = "0x73D410")]
		public UserReportID(IntPtr o)
		{
		}
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x200032E")]
	public sealed class Packet : IDisposable
	{
		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ulong size;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IntPtr packetHandle;

		[Token(Token = "0x17000186")]
		public ulong SenderID
		{
			[Token(Token = "0x600141A")]
			[Address(RVA = "0x73F358", Offset = "0x73F358", VA = "0x73F358")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000187")]
		public ulong Size
		{
			[Token(Token = "0x600141B")]
			[Address(RVA = "0x73F3C8", Offset = "0x73F3C8", VA = "0x73F3C8")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000188")]
		public SendPolicy Policy
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0x73F3D0", Offset = "0x73F3D0", VA = "0x73F3D0")]
			get
			{
				return default(SendPolicy);
			}
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x73E60C", Offset = "0x73E60C", VA = "0x73E60C")]
		public Packet(IntPtr packetHandle)
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x73F1C8", Offset = "0x73F1C8", VA = "0x73F1C8")]
		public ulong ReadBytes(byte[] destination)
		{
			return default(ulong);
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x73F440", Offset = "0x73F440", VA = "0x73F440", Slot = "1")]
		~Packet()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x73F4B0", Offset = "0x73F4B0", VA = "0x73F4B0", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public enum PeerConnectionState
	{
		[Token(Token = "0x4000D71")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570D54", Offset = "0x570D54")]
		Unknown,
		[Token(Token = "0x4000D72")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570D8C", Offset = "0x570D8C")]
		Connected,
		[Token(Token = "0x4000D73")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570DC4", Offset = "0x570DC4")]
		Timeout,
		[Token(Token = "0x4000D74")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570DFC", Offset = "0x570DFC")]
		Closed
	}
	[Token(Token = "0x2000330")]
	public enum PermissionGrantStatus
	{
		[Token(Token = "0x4000D76")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570E34", Offset = "0x570E34")]
		Unknown,
		[Token(Token = "0x4000D77")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570E6C", Offset = "0x570E6C")]
		Granted,
		[Token(Token = "0x4000D78")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570EA4", Offset = "0x570EA4")]
		Denied,
		[Token(Token = "0x4000D79")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570EDC", Offset = "0x570EDC")]
		Blocked
	}
	[Token(Token = "0x2000331")]
	public enum PermissionType
	{
		[Token(Token = "0x4000D7B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570F14", Offset = "0x570F14")]
		Unknown,
		[Token(Token = "0x4000D7C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570F4C", Offset = "0x570F4C")]
		Microphone,
		[Token(Token = "0x4000D7D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570F84", Offset = "0x570F84")]
		WriteExternalStorage
	}
	[Token(Token = "0x2000332")]
	public sealed class Core
	{
		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x72D2E0", Offset = "0x72D2E0", VA = "0x72D2E0")]
		public Core()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x72C9D4", Offset = "0x72C9D4", VA = "0x72C9D4")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x72D2E8", Offset = "0x72D2E8", VA = "0x72D2E8")]
		internal static void ForceInitialized()
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x72D354", Offset = "0x72D354", VA = "0x72D354")]
		private static string getAppID([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x72D5E8", Offset = "0x72D5E8", VA = "0x72D5E8")]
		public static Request<PlatformInitialize> AsyncInitialize([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x72DBDC", Offset = "0x72DBDC", VA = "0x72DBDC")]
		public static void Initialize([Optional] string appId)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x72D590", Offset = "0x72D590", VA = "0x72D590")]
		private static string GetAppIDFromConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000333")]
	public static class ApplicationLifecycle
	{
		[Token(Token = "0x6001427")]
		[Address(RVA = "0x5A6524", Offset = "0x5A6524", VA = "0x5A6524")]
		public static LaunchDetails GetLaunchDetails()
		{
			return null;
		}
	}
	[Token(Token = "0x2000334")]
	public static class Rooms
	{
		[Token(Token = "0x6001428")]
		[Address(RVA = "0x740094", Offset = "0x740094", VA = "0x740094")]
		public static Request<Room> UpdateDataStore(ulong roomID, Dictionary<string, string> data)
		{
			return null;
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x740308", Offset = "0x740308", VA = "0x740308")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x570FBC", Offset = "0x570FBC")]
		public static void SetRoomInviteNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x740388", Offset = "0x740388", VA = "0x740388")]
		public static Request<Room> CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x740474", Offset = "0x740474", VA = "0x740474")]
		public static Request<Room> CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x740594", Offset = "0x740594", VA = "0x740594")]
		public static Request<Room> Get(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x740668", Offset = "0x740668", VA = "0x740668")]
		public static Request<Room> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x740734", Offset = "0x740734", VA = "0x740734")]
		public static Request<Room> GetCurrentForUser(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x740808", Offset = "0x740808", VA = "0x740808")]
		public static Request<UserList> GetInvitableUsers()
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x7408D4", Offset = "0x7408D4", VA = "0x7408D4")]
		public static Request<UserList> GetInvitableUsers2([Optional] RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x7409DC", Offset = "0x7409DC", VA = "0x7409DC")]
		public static Request<RoomList> GetModeratedRooms()
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x740AA8", Offset = "0x740AA8", VA = "0x740AA8")]
		public static Request<Room> InviteUser(ulong roomID, string inviteToken)
		{
			return null;
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x740B8C", Offset = "0x740B8C", VA = "0x740B8C")]
		public static Request<Room> Join(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x740C70", Offset = "0x740C70", VA = "0x740C70")]
		public static Request<Room> Join2(ulong roomID, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x740D88", Offset = "0x740D88", VA = "0x740D88")]
		public static Request<Room> KickUser(ulong roomID, ulong userID, int kickDurationSeconds)
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x740E74", Offset = "0x740E74", VA = "0x740E74")]
		public static Request LaunchInvitableUserFlow(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x740F40", Offset = "0x740F40", VA = "0x740F40")]
		public static Request<Room> Leave(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x741014", Offset = "0x741014", VA = "0x741014")]
		public static Request<Room> SetDescription(ulong roomID, string description)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x7410F8", Offset = "0x7410F8", VA = "0x7410F8")]
		public static Request<Room> UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus)
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x7411DC", Offset = "0x7411DC", VA = "0x7411DC")]
		public static Request UpdateOwner(ulong roomID, ulong userID)
		{
			return null;
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x7412B8", Offset = "0x7412B8", VA = "0x7412B8")]
		public static Request<Room> UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy)
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x74030C", Offset = "0x74030C", VA = "0x74030C")]
		public static void SetRoomInviteAcceptedNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x74139C", Offset = "0x74139C", VA = "0x74139C")]
		public static void SetRoomInviteReceivedNotificationCallback(Message<RoomInviteNotification>.Callback callback)
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x741418", Offset = "0x741418", VA = "0x741418")]
		public static void SetUpdateNotificationCallback(Message<Room>.Callback callback)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x741494", Offset = "0x741494", VA = "0x741494")]
		public static Request<RoomList> GetNextRoomListPage(RoomList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000335")]
	public static class Matchmaking
	{
		[Token(Token = "0x2000336")]
		public class CustomQuery
		{
			[Token(Token = "0x2000337")]
			public struct Criterion
			{
				[Token(Token = "0x4000D82")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public string key;

				[Token(Token = "0x4000D83")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public MatchmakingCriterionImportance importance;

				[Token(Token = "0x4000D84")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public Dictionary<string, object> parameters;

				[Token(Token = "0x6001454")]
				[Address(RVA = "0x7308D0", Offset = "0x7308D0", VA = "0x7308D0")]
				public Criterion(string key_, MatchmakingCriterionImportance importance_)
				{
				}
			}

			[Token(Token = "0x4000D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<string, object> data;

			[Token(Token = "0x4000D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Criterion[] criteria;

			[Token(Token = "0x6001452")]
			[Address(RVA = "0x730884", Offset = "0x730884", VA = "0x730884")]
			public CustomQuery()
			{
			}

			[Token(Token = "0x6001453")]
			[Address(RVA = "0x72F580", Offset = "0x72F580", VA = "0x72F580")]
			public IntPtr ToUnmanaged()
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x72F124", Offset = "0x72F124", VA = "0x72F124")]
		public static Request ReportResultsInsecure(ulong roomID, Dictionary<string, int> data)
		{
			return null;
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x72F398", Offset = "0x72F398", VA = "0x72F398")]
		public static Request<MatchmakingStats> GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach = MatchmakingStatApproach.Trailing)
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x72F484", Offset = "0x72F484", VA = "0x72F484")]
		public static Request<MatchmakingBrowseResult> Browse(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x72FA2C", Offset = "0x72FA2C", VA = "0x72FA2C")]
		public static Request<MatchmakingBrowseResult> Browse2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x72FB94", Offset = "0x72FB94", VA = "0x72FB94")]
		public static Request Cancel(string pool, string requestHash)
		{
			return null;
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x72FC70", Offset = "0x72FC70", VA = "0x72FC70")]
		public static Request Cancel()
		{
			return null;
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x72FD34", Offset = "0x72FD34", VA = "0x72FD34")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates = false, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x72FE48", Offset = "0x72FE48", VA = "0x72FE48")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x72FF60", Offset = "0x72FF60", VA = "0x72FF60")]
		public static Request<Room> CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x73004C", Offset = "0x73004C", VA = "0x73004C")]
		public static Request<Room> CreateRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x730164", Offset = "0x730164", VA = "0x730164")]
		public static Request<MatchmakingEnqueueResult> Enqueue(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x730260", Offset = "0x730260", VA = "0x730260")]
		public static Request<MatchmakingEnqueueResult> Enqueue2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x730378", Offset = "0x730378", VA = "0x730378")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom(ulong roomID, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x730474", Offset = "0x730474", VA = "0x730474")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom2(ulong roomID, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x73058C", Offset = "0x73058C", VA = "0x73058C")]
		public static Request<MatchmakingAdminSnapshot> GetAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x730658", Offset = "0x730658", VA = "0x730658")]
		public static Request<Room> JoinRoom(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x73073C", Offset = "0x73073C", VA = "0x73073C")]
		public static Request StartMatch(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x730808", Offset = "0x730808", VA = "0x730808")]
		public static void SetMatchFoundNotificationCallback(Message<Room>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000338")]
	public static class Net
	{
		[Token(Token = "0x6001455")]
		[Address(RVA = "0x73E530", Offset = "0x73E530", VA = "0x73E530")]
		public static Packet ReadPacket()
		{
			return null;
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x73E6D4", Offset = "0x73E6D4", VA = "0x73E6D4")]
		public static bool SendPacket(ulong userID, byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x73E7D8", Offset = "0x73E7D8", VA = "0x73E7D8")]
		public static void Connect(ulong userID)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x73E878", Offset = "0x73E878", VA = "0x73E878")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x73E918", Offset = "0x73E918", VA = "0x73E918")]
		public static void Close(ulong userID)
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x73E9B8", Offset = "0x73E9B8", VA = "0x73E9B8")]
		public static bool IsConnected(ulong userID)
		{
			return default(bool);
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x73EA5C", Offset = "0x73EA5C", VA = "0x73EA5C")]
		public static bool SendPacketToCurrentRoom(byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x73EB58", Offset = "0x73EB58", VA = "0x73EB58")]
		public static bool AcceptForCurrentRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x73EBF4", Offset = "0x73EBF4", VA = "0x73EBF4")]
		public static void CloseForCurrentRoom()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x73EC8C", Offset = "0x73EC8C", VA = "0x73EC8C")]
		public static Request<PingResult> Ping(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x73ED60", Offset = "0x73ED60", VA = "0x73ED60")]
		public static void SetConnectionStateChangedCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x73EDDC", Offset = "0x73EDDC", VA = "0x73EDDC")]
		public static void SetPeerConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x73EE58", Offset = "0x73EE58", VA = "0x73EE58")]
		public static void SetPingResultNotificationCallback(Message<PingResult>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000339")]
	public static class Leaderboards
	{
		[Token(Token = "0x6001462")]
		[Address(RVA = "0x72E948", Offset = "0x72E948", VA = "0x72E948")]
		public static Request<LeaderboardEntryList> GetNextEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x72EA48", Offset = "0x72EA48", VA = "0x72EA48")]
		public static Request<LeaderboardEntryList> GetPreviousEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x72EB48", Offset = "0x72EB48", VA = "0x72EB48")]
		public static Request<LeaderboardEntryList> GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x72EC44", Offset = "0x72EC44", VA = "0x72EC44")]
		public static Request<LeaderboardEntryList> GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return null;
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x72ED30", Offset = "0x72ED30", VA = "0x72ED30")]
		public static Request<bool> WriteEntry(string leaderboardName, long score, [Optional] byte[] extraData, bool forceUpdate = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200033A")]
	public static class Voip
	{
		[Token(Token = "0x6001467")]
		[Address(RVA = "0x7431F4", Offset = "0x7431F4", VA = "0x7431F4")]
		public static void Start(ulong userID)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x743294", Offset = "0x743294", VA = "0x743294")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x743334", Offset = "0x743334", VA = "0x743334")]
		public static void Stop(ulong userID)
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x7433D4", Offset = "0x7433D4", VA = "0x7433D4")]
		public static void SetMicrophoneFilterCallback(CAPI.FilterCallback callback)
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x7434B0", Offset = "0x7434B0", VA = "0x7434B0")]
		public static void SetMicrophoneMuted(VoipMuteState state)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x743550", Offset = "0x743550", VA = "0x743550")]
		public static VoipMuteState GetSystemVoipMicrophoneMuted()
		{
			return default(VoipMuteState);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x7435EC", Offset = "0x7435EC", VA = "0x7435EC")]
		public static SystemVoipStatus GetSystemVoipStatus()
		{
			return default(SystemVoipStatus);
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x743688", Offset = "0x743688", VA = "0x743688")]
		public static VoipDtxState GetIsConnectionUsingDtx(ulong peerID)
		{
			return default(VoipDtxState);
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x74372C", Offset = "0x74372C", VA = "0x74372C")]
		public static VoipBitrate GetLocalBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x7437D0", Offset = "0x7437D0", VA = "0x7437D0")]
		public static VoipBitrate GetRemoteBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x743874", Offset = "0x743874", VA = "0x743874")]
		public static void SetNewConnectionOptions(VoipOptions voipOptions)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x743998", Offset = "0x743998", VA = "0x743998")]
		public static Request<SystemVoipState> SetSystemVoipSuppressed(bool suppressed)
		{
			return null;
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x743A6C", Offset = "0x743A6C", VA = "0x743A6C")]
		public static void SetVoipConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x743AE8", Offset = "0x743AE8", VA = "0x743AE8")]
		public static void SetVoipStateChangeCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x743B64", Offset = "0x743B64", VA = "0x743B64")]
		public static void SetSystemVoipStateNotificationCallback(Message<SystemVoipState>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200033B")]
	public static class Achievements
	{
		[Token(Token = "0x6001476")]
		[Address(RVA = "0x5A4EE8", Offset = "0x5A4EE8", VA = "0x5A4EE8")]
		public static Request<AchievementUpdate> AddCount(string name, ulong count)
		{
			return null;
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x5A5088", Offset = "0x5A5088", VA = "0x5A5088")]
		public static Request<AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x5A5244", Offset = "0x5A5244", VA = "0x5A5244")]
		public static Request<AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x5A5394", Offset = "0x5A5394", VA = "0x5A5394")]
		public static Request<AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x5A54E4", Offset = "0x5A54E4", VA = "0x5A54E4")]
		public static Request<AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x5A572C", Offset = "0x5A572C", VA = "0x5A572C")]
		public static Request<AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x5A5974", Offset = "0x5A5974", VA = "0x5A5974")]
		public static Request<AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x5A5AF4", Offset = "0x5A5AF4", VA = "0x5A5AF4")]
		public static Request<AchievementDefinitionList> GetNextAchievementDefinitionListPage(AchievementDefinitionList list)
		{
			return null;
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x5A5D14", Offset = "0x5A5D14", VA = "0x5A5D14")]
		public static Request<AchievementProgressList> GetNextAchievementProgressListPage(AchievementProgressList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200033C")]
	public static class Application
	{
		[Token(Token = "0x600147F")]
		[Address(RVA = "0x5A61C8", Offset = "0x5A61C8", VA = "0x5A61C8")]
		public static Request<ApplicationVersion> GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x5A6318", Offset = "0x5A6318", VA = "0x5A6318")]
		public static Request<string> LaunchOtherApp(ulong appID, [Optional] ApplicationOptions deeplink_options)
		{
			return null;
		}
	}
	[Token(Token = "0x200033D")]
	public static class AssetFile
	{
		[Token(Token = "0x6001481")]
		[Address(RVA = "0x5A69B0", Offset = "0x5A69B0", VA = "0x5A69B0")]
		public static Request<AssetFileDeleteResult> Delete(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x5A6B18", Offset = "0x5A6B18", VA = "0x5A6B18")]
		public static Request<AssetFileDeleteResult> DeleteById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x5A6C80", Offset = "0x5A6C80", VA = "0x5A6C80")]
		public static Request<AssetFileDeleteResult> DeleteByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x5A6E00", Offset = "0x5A6E00", VA = "0x5A6E00")]
		public static Request<AssetFileDownloadResult> Download(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x5A6F68", Offset = "0x5A6F68", VA = "0x5A6F68")]
		public static Request<AssetFileDownloadResult> DownloadById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x5A70D0", Offset = "0x5A70D0", VA = "0x5A70D0")]
		public static Request<AssetFileDownloadResult> DownloadByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x5A7250", Offset = "0x5A7250", VA = "0x5A7250")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancel(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0x5A73B8", Offset = "0x5A73B8", VA = "0x5A73B8")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x5A7520", Offset = "0x5A7520", VA = "0x5A7520")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x5A76A0", Offset = "0x5A76A0", VA = "0x5A76A0")]
		public static Request<AssetDetailsList> GetList()
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x5A77F0", Offset = "0x5A77F0", VA = "0x5A77F0")]
		public static Request<AssetDetails> Status(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x5A7958", Offset = "0x5A7958", VA = "0x5A7958")]
		public static Request<AssetDetails> StatusById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x5A7AC0", Offset = "0x5A7AC0", VA = "0x5A7AC0")]
		public static Request<AssetDetails> StatusByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0x5A7C40", Offset = "0x5A7C40", VA = "0x5A7C40")]
		public static void SetDownloadUpdateNotificationCallback(Message<AssetFileDownloadUpdate>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200033E")]
	public static class Avatar
	{
	}
	[Token(Token = "0x200033F")]
	public static class Cal
	{
	}
	[Token(Token = "0x2000340")]
	public static class CloudStorage
	{
		[Token(Token = "0x600148F")]
		[Address(RVA = "0x72C8F0", Offset = "0x72C8F0", VA = "0x72C8F0")]
		public static Request<CloudStorageUpdateResponse> Delete(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x72CA3C", Offset = "0x72CA3C", VA = "0x72CA3C")]
		public static Request<CloudStorageData> Load(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x72CB20", Offset = "0x72CB20", VA = "0x72CB20")]
		public static Request<CloudStorageMetadataList> LoadBucketMetadata(string bucket)
		{
			return null;
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x72CBF4", Offset = "0x72CBF4", VA = "0x72CBF4")]
		public static Request<CloudStorageConflictMetadata> LoadConflictMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x72CCD8", Offset = "0x72CCD8", VA = "0x72CCD8")]
		public static Request<CloudStorageData> LoadHandle(string handle)
		{
			return null;
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0x72CDAC", Offset = "0x72CDAC", VA = "0x72CDAC")]
		public static Request<CloudStorageMetadata> LoadMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x72CE90", Offset = "0x72CE90", VA = "0x72CE90")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x72CF7C", Offset = "0x72CF7C", VA = "0x72CF7C")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0x72D068", Offset = "0x72D068", VA = "0x72D068")]
		public static Request<CloudStorageUpdateResponse> Save(string bucket, string key, byte[] data, long counter, string extraData)
		{
			return null;
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x72D184", Offset = "0x72D184", VA = "0x72D184")]
		public static Request<CloudStorageMetadataList> GetNextCloudStorageMetadataListPage(CloudStorageMetadataList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000341")]
	public static class CloudStorage2
	{
	}
	[Token(Token = "0x2000342")]
	public static class Entitlements
	{
		[Token(Token = "0x6001499")]
		[Address(RVA = "0x72E058", Offset = "0x72E058", VA = "0x72E058")]
		public static Request IsUserEntitledToApplication()
		{
			return null;
		}
	}
	[Token(Token = "0x2000343")]
	public static class GraphAPI
	{
	}
	[Token(Token = "0x2000344")]
	public static class HTTP
	{
	}
	[Token(Token = "0x2000345")]
	public static class IAP
	{
		[Token(Token = "0x600149A")]
		[Address(RVA = "0x72E148", Offset = "0x72E148", VA = "0x72E148")]
		public static Request ConsumePurchase(string sku)
		{
			return null;
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x72E214", Offset = "0x72E214", VA = "0x72E214")]
		public static Request<ProductList> GetProductsBySKU(string[] skus)
		{
			return null;
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x72E300", Offset = "0x72E300", VA = "0x72E300")]
		public static Request<PurchaseList> GetViewerPurchases()
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x72E3CC", Offset = "0x72E3CC", VA = "0x72E3CC")]
		public static Request<Purchase> LaunchCheckoutFlow(string sku)
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x72E4F0", Offset = "0x72E4F0", VA = "0x72E4F0")]
		public static Request<ProductList> GetNextProductListPage(ProductList list)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x72E64C", Offset = "0x72E64C", VA = "0x72E64C")]
		public static Request<PurchaseList> GetNextPurchaseListPage(PurchaseList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000346")]
	public static class LanguagePack
	{
		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x72E7A8", Offset = "0x72E7A8", VA = "0x72E7A8")]
		public static Request<AssetDetails> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x72E874", Offset = "0x72E874", VA = "0x72E874")]
		public static Request<AssetFileDownloadResult> SetCurrent(string tag)
		{
			return null;
		}
	}
	[Token(Token = "0x2000347")]
	public static class Livestreaming
	{
		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x72EE44", Offset = "0x72EE44", VA = "0x72EE44")]
		public static Request<LivestreamingStatus> GetStatus()
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x72EF10", Offset = "0x72EF10", VA = "0x72EF10")]
		public static Request<LivestreamingStatus> PauseStream()
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x72EFDC", Offset = "0x72EFDC", VA = "0x72EFDC")]
		public static Request<LivestreamingStatus> ResumeStream()
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x72F0A8", Offset = "0x72F0A8", VA = "0x72F0A8")]
		public static void SetStatusUpdateNotificationCallback(Message<LivestreamingStatus>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000348")]
	public static class Media
	{
		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x731018", Offset = "0x731018", VA = "0x731018")]
		public static Request<ShareMediaResult> ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000349")]
	public static class Notifications
	{
		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x73EED4", Offset = "0x73EED4", VA = "0x73EED4")]
		public static Request<RoomInviteNotificationList> GetRoomInviteNotifications()
		{
			return null;
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x73EFA0", Offset = "0x73EFA0", VA = "0x73EFA0")]
		public static Request MarkAsRead(ulong notificationID)
		{
			return null;
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x73F06C", Offset = "0x73F06C", VA = "0x73F06C")]
		public static Request<RoomInviteNotificationList> GetNextRoomInviteNotificationListPage(RoomInviteNotificationList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200034A")]
	public static class Parties
	{
		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x73F530", Offset = "0x73F530", VA = "0x73F530")]
		public static Request<Party> GetCurrent()
		{
			return null;
		}
	}
	[Token(Token = "0x200034B")]
	public static class Users
	{
		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x742624", Offset = "0x742624", VA = "0x742624")]
		public static Request<User> Get(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x7426F8", Offset = "0x7426F8", VA = "0x7426F8")]
		public static Request<string> GetAccessToken()
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x7427C4", Offset = "0x7427C4", VA = "0x7427C4")]
		public static Request<User> GetLoggedInUser()
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x742890", Offset = "0x742890", VA = "0x742890")]
		public static Request<UserList> GetLoggedInUserFriends()
		{
			return null;
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x74295C", Offset = "0x74295C", VA = "0x74295C")]
		public static Request<UserAndRoomList> GetLoggedInUserFriendsAndRooms()
		{
			return null;
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x742A28", Offset = "0x742A28", VA = "0x742A28")]
		public static Request<UserAndRoomList> GetLoggedInUserRecentlyMetUsersAndRooms([Optional] UserOptions userOptions)
		{
			return null;
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x742B30", Offset = "0x742B30", VA = "0x742B30")]
		public static Request<OrgScopedID> GetOrgScopedID(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x742C04", Offset = "0x742C04", VA = "0x742C04")]
		public static Request<SdkAccountList> GetSdkAccounts()
		{
			return null;
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x742CD0", Offset = "0x742CD0", VA = "0x742CD0")]
		public static Request<UserProof> GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x742D9C", Offset = "0x742D9C", VA = "0x742D9C")]
		public static Request<LaunchFriendRequestFlowResult> LaunchFriendRequestFlow(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x742E70", Offset = "0x742E70", VA = "0x742E70")]
		public static Request LaunchProfile(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x742F3C", Offset = "0x742F3C", VA = "0x742F3C")]
		public static Request<UserAndRoomList> GetNextUserAndRoomListPage(UserAndRoomList list)
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x743098", Offset = "0x743098", VA = "0x743098")]
		public static Request<UserList> GetNextUserListPage(UserList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200034C")]
	public enum PlatformInitializeResult
	{
		[Token(Token = "0x4000D86")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x570FF4", Offset = "0x570FF4")]
		Success = 0,
		[Token(Token = "0x4000D87")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57102C", Offset = "0x57102C")]
		Uninitialized = -1,
		[Token(Token = "0x4000D88")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571064", Offset = "0x571064")]
		PreLoaded = -2,
		[Token(Token = "0x4000D89")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57109C", Offset = "0x57109C")]
		FileInvalid = -3,
		[Token(Token = "0x4000D8A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5710D4", Offset = "0x5710D4")]
		SignatureInvalid = -4,
		[Token(Token = "0x4000D8B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57110C", Offset = "0x57110C")]
		UnableToVerify = -5,
		[Token(Token = "0x4000D8C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571144", Offset = "0x571144")]
		VersionMismatch = -6,
		[Token(Token = "0x4000D8D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57117C", Offset = "0x57117C")]
		Unknown = -7,
		[Token(Token = "0x4000D8E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5711B4", Offset = "0x5711B4")]
		InvalidCredentials = -8,
		[Token(Token = "0x4000D8F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5711EC", Offset = "0x5711EC")]
		NotEntitled = -9
	}
	[Token(Token = "0x200034D")]
	public static class PlatformInternal
	{
		[Token(Token = "0x200034E")]
		public enum MessageTypeInternal : uint
		{
			[Token(Token = "0x4000D91")]
			Application_ExecuteCoordinatedLaunch = 645772532u,
			[Token(Token = "0x4000D92")]
			Application_GetInstalledApplications = 1376744524u,
			[Token(Token = "0x4000D93")]
			Avatar_UpdateMetaData = 2077219214u,
			[Token(Token = "0x4000D94")]
			Cal_FinalizeApplication = 497667029u,
			[Token(Token = "0x4000D95")]
			Cal_GetSuggestedApplications = 1450209301u,
			[Token(Token = "0x4000D96")]
			Cal_ProposeApplication = 1317270237u,
			[Token(Token = "0x4000D97")]
			CloudStorage2_GetUserDirectoryPath = 1990471406u,
			[Token(Token = "0x4000D98")]
			GraphAPI_Get = 822018158u,
			[Token(Token = "0x4000D99")]
			GraphAPI_Post = 1990567876u,
			[Token(Token = "0x4000D9A")]
			HTTP_Get = 1874211363u,
			[Token(Token = "0x4000D9B")]
			HTTP_GetToFile = 1317133401u,
			[Token(Token = "0x4000D9C")]
			HTTP_MultiPartPost = 1480774160u,
			[Token(Token = "0x4000D9D")]
			HTTP_Post = 1798743375u,
			[Token(Token = "0x4000D9E")]
			Livestreaming_IsAllowedForApplication = 191729014u,
			[Token(Token = "0x4000D9F")]
			Livestreaming_StartPartyStream = 2066701532u,
			[Token(Token = "0x4000DA0")]
			Livestreaming_StartStream = 1343932350u,
			[Token(Token = "0x4000DA1")]
			Livestreaming_StopPartyStream = 661065560u,
			[Token(Token = "0x4000DA2")]
			Livestreaming_StopStream = 1155796426u,
			[Token(Token = "0x4000DA3")]
			Livestreaming_UpdateCommentsOverlayVisibility = 528318516u,
			[Token(Token = "0x4000DA4")]
			Livestreaming_UpdateMicStatus = 475495815u,
			[Token(Token = "0x4000DA5")]
			Party_Create = 450042703u,
			[Token(Token = "0x4000DA6")]
			Party_GatherInApplication = 1921499523u,
			[Token(Token = "0x4000DA7")]
			Party_Get = 1586058173u,
			[Token(Token = "0x4000DA8")]
			Party_GetCurrentForUser = 1489764138u,
			[Token(Token = "0x4000DA9")]
			Party_Invite = 901104867u,
			[Token(Token = "0x4000DAA")]
			Party_Join = 1744993395u,
			[Token(Token = "0x4000DAB")]
			Party_Leave = 848430801u,
			[Token(Token = "0x4000DAC")]
			Room_CreateOrUpdateAndJoinNamed = 2089683601u,
			[Token(Token = "0x4000DAD")]
			Room_GetNamedRooms = 125660812u,
			[Token(Token = "0x4000DAE")]
			Room_GetSocialRooms = 1636310390u,
			[Token(Token = "0x4000DAF")]
			SystemPermissions_GetStatus = 493497353u,
			[Token(Token = "0x4000DB0")]
			SystemPermissions_LaunchDeeplink = 442139697u,
			[Token(Token = "0x4000DB1")]
			User_CancelRecordingForReportFlow = 65065289u,
			[Token(Token = "0x4000DB2")]
			User_GetLinkedAccounts = 1469314134u,
			[Token(Token = "0x4000DB3")]
			User_LaunchBlockFlow = 1876305192u,
			[Token(Token = "0x4000DB4")]
			User_LaunchReportFlow = 1449304081u,
			[Token(Token = "0x4000DB5")]
			User_LaunchReportFlow2 = 2139314275u,
			[Token(Token = "0x4000DB6")]
			User_LaunchUnblockFlow = 346172055u,
			[Token(Token = "0x4000DB7")]
			User_NewEntitledTestUser = 292822787u,
			[Token(Token = "0x4000DB8")]
			User_NewTestUser = 921194380u,
			[Token(Token = "0x4000DB9")]
			User_NewTestUserFriends = 517416647u,
			[Token(Token = "0x4000DBA")]
			User_StartRecordingForReportFlow = 1819161571u,
			[Token(Token = "0x4000DBB")]
			User_StopRecordingAndLaunchReportFlow = 1618513035u,
			[Token(Token = "0x4000DBC")]
			User_StopRecordingAndLaunchReportFlow2 = 432190251u,
			[Token(Token = "0x4000DBD")]
			User_TestUserCreateDeviceManifest = 1701884605u
		}

		[Token(Token = "0x200034F")]
		public static class HTTP
		{
			[Token(Token = "0x60014BA")]
			[Address(RVA = "0x73F660", Offset = "0x73F660", VA = "0x73F660")]
			public static void SetHttpTransferUpdateCallback(Message<HttpTransferUpdate>.Callback callback)
			{
			}
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x73F5FC", Offset = "0x73F5FC", VA = "0x73F5FC")]
		public static void CrashApplication()
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x733C8C", Offset = "0x733C8C", VA = "0x733C8C")]
		internal static Message ParseMessageHandle(IntPtr messageHandle, Message.MessageType messageType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000350")]
	public sealed class PlatformSettings : ScriptableObject
	{
		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string ovrAppID;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string ovrMobileAppID;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool ovrUseStandalonePlatform;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool ovrEnableARM64Support;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformSettings instance;

		[Token(Token = "0x17000189")]
		public static string AppID
		{
			[Token(Token = "0x60014BC")]
			[Address(RVA = "0x72E028", Offset = "0x72E028", VA = "0x72E028")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014BD")]
			[Address(RVA = "0x73F890", Offset = "0x73F890", VA = "0x73F890")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public static string MobileAppID
		{
			[Token(Token = "0x60014BE")]
			[Address(RVA = "0x72DFFC", Offset = "0x72DFFC", VA = "0x72DFFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014BF")]
			[Address(RVA = "0x73F8C0", Offset = "0x73F8C0", VA = "0x73F8C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public static bool UseStandalonePlatform
		{
			[Token(Token = "0x60014C0")]
			[Address(RVA = "0x72D894", Offset = "0x72D894", VA = "0x72D894")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014C1")]
			[Address(RVA = "0x73F8F0", Offset = "0x73F8F0", VA = "0x73F8F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public static bool EnableARM64Support
		{
			[Token(Token = "0x60014C2")]
			[Address(RVA = "0x73F924", Offset = "0x73F924", VA = "0x73F924")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014C3")]
			[Address(RVA = "0x73F950", Offset = "0x73F950", VA = "0x73F950")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public static PlatformSettings Instance
		{
			[Token(Token = "0x60014C4")]
			[Address(RVA = "0x73F76C", Offset = "0x73F76C", VA = "0x73F76C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014C5")]
			[Address(RVA = "0x73F984", Offset = "0x73F984", VA = "0x73F984")]
			set
			{
			}
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x73F6DC", Offset = "0x73F6DC", VA = "0x73F6DC")]
		public PlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public sealed class Request<T> : Request
	{
		[Token(Token = "0x60014C6")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x60014C7")]
		public Request<T> OnComplete(Message<T>.Callback callback)
		{
			return null;
		}
	}
	[Token(Token = "0x2000352")]
	public class Request
	{
		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x571264", Offset = "0x571264")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x571264", Offset = "0x571264")]
		private ulong <RequestID>k__BackingField;

		[Token(Token = "0x1700018E")]
		public ulong RequestID
		{
			[Token(Token = "0x60014C9")]
			[Address(RVA = "0x73F9E0", Offset = "0x73F9E0", VA = "0x73F9E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5712A0", Offset = "0x5712A0")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60014CA")]
			[Address(RVA = "0x73F9D8", Offset = "0x73F9D8", VA = "0x73F9D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5712B0", Offset = "0x5712B0")]
			set
			{
			}
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x72E11C", Offset = "0x72E11C", VA = "0x72E11C")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x73F9E8", Offset = "0x73F9E8", VA = "0x73F9E8")]
		public Request OnComplete(Message.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x73FA6C", Offset = "0x73FA6C", VA = "0x73FA6C")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
	[Token(Token = "0x2000353")]
	public enum RoomJoinability
	{
		[Token(Token = "0x4000DC5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5712C0", Offset = "0x5712C0")]
		Unknown,
		[Token(Token = "0x4000DC6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5712F8", Offset = "0x5712F8")]
		AreIn,
		[Token(Token = "0x4000DC7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571330", Offset = "0x571330")]
		AreKicked,
		[Token(Token = "0x4000DC8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571368", Offset = "0x571368")]
		CanJoin,
		[Token(Token = "0x4000DC9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5713A0", Offset = "0x5713A0")]
		IsFull,
		[Token(Token = "0x4000DCA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5713D8", Offset = "0x5713D8")]
		NoViewer,
		[Token(Token = "0x4000DCB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571410", Offset = "0x571410")]
		PolicyPrevents
	}
	[Token(Token = "0x2000354")]
	public enum RoomJoinPolicy
	{
		[Token(Token = "0x4000DCD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571448", Offset = "0x571448")]
		None,
		[Token(Token = "0x4000DCE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571480", Offset = "0x571480")]
		Everyone,
		[Token(Token = "0x4000DCF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5714B8", Offset = "0x5714B8")]
		FriendsOfMembers,
		[Token(Token = "0x4000DD0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5714F0", Offset = "0x5714F0")]
		FriendsOfOwner,
		[Token(Token = "0x4000DD1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571528", Offset = "0x571528")]
		InvitedUsers,
		[Token(Token = "0x4000DD2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571560", Offset = "0x571560")]
		Unknown
	}
	[Token(Token = "0x2000355")]
	public enum RoomMembershipLockStatus
	{
		[Token(Token = "0x4000DD4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571598", Offset = "0x571598")]
		Unknown,
		[Token(Token = "0x4000DD5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5715D0", Offset = "0x5715D0")]
		Lock,
		[Token(Token = "0x4000DD6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571608", Offset = "0x571608")]
		Unlock
	}
	[Token(Token = "0x2000356")]
	public class RoomOptions
	{
		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x73FB0C", Offset = "0x73FB0C", VA = "0x73FB0C")]
		public RoomOptions()
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x73FB88", Offset = "0x73FB88", VA = "0x73FB88")]
		public void SetDataStore(string key, string value)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x73FC10", Offset = "0x73FC10", VA = "0x73FC10")]
		public void ClearDataStore()
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x73FC80", Offset = "0x73FC80", VA = "0x73FC80")]
		public void SetExcludeRecentlyMet(bool value)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x73FD00", Offset = "0x73FD00", VA = "0x73FD00")]
		public void SetMaxUserResults(uint value)
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x73FD80", Offset = "0x73FD80", VA = "0x73FD80")]
		public void SetOrdering(UserOrdering value)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x73FE00", Offset = "0x73FE00", VA = "0x73FE00")]
		public void SetRecentlyMetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x73FE80", Offset = "0x73FE80", VA = "0x73FE80")]
		public void SetRoomId(ulong value)
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x73FF00", Offset = "0x73FF00", VA = "0x73FF00")]
		public void SetTurnOffUpdates(bool value)
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x73FF80", Offset = "0x73FF80", VA = "0x73FF80")]
		public static explicit operator IntPtr(RoomOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x73FFD0", Offset = "0x73FFD0", VA = "0x73FFD0", Slot = "1")]
		~RoomOptions()
		{
		}
	}
	[Token(Token = "0x2000357")]
	public enum RoomType
	{
		[Token(Token = "0x4000DD9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571640", Offset = "0x571640")]
		Unknown,
		[Token(Token = "0x4000DDA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571678", Offset = "0x571678")]
		Matchmaking,
		[Token(Token = "0x4000DDB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5716B0", Offset = "0x5716B0")]
		Moderated,
		[Token(Token = "0x4000DDC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5716E8", Offset = "0x5716E8")]
		Private,
		[Token(Token = "0x4000DDD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571720", Offset = "0x571720")]
		Solo
	}
	[Token(Token = "0x2000358")]
	public enum SdkAccountType
	{
		[Token(Token = "0x4000DDF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571758", Offset = "0x571758")]
		Unknown,
		[Token(Token = "0x4000DE0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571790", Offset = "0x571790")]
		Oculus,
		[Token(Token = "0x4000DE1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5717C8", Offset = "0x5717C8")]
		FacebookGameroom
	}
	[Token(Token = "0x2000359")]
	public enum SendPolicy
	{
		[Token(Token = "0x4000DE3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571800", Offset = "0x571800")]
		Unreliable,
		[Token(Token = "0x4000DE4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571838", Offset = "0x571838")]
		Reliable,
		[Token(Token = "0x4000DE5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571870", Offset = "0x571870")]
		Unknown
	}
	[Token(Token = "0x200035A")]
	public enum ServiceProvider
	{
		[Token(Token = "0x4000DE7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5718A8", Offset = "0x5718A8")]
		Unknown,
		[Token(Token = "0x4000DE8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5718E0", Offset = "0x5718E0")]
		Dropbox,
		[Token(Token = "0x4000DE9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571918", Offset = "0x571918")]
		Facebook,
		[Token(Token = "0x4000DEA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571950", Offset = "0x571950")]
		Google,
		[Token(Token = "0x4000DEB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571988", Offset = "0x571988")]
		Instagram,
		[Token(Token = "0x4000DEC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5719C0", Offset = "0x5719C0")]
		RemoteMedia
	}
	[Token(Token = "0x200035B")]
	public enum ShareMediaStatus
	{
		[Token(Token = "0x4000DEE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5719F8", Offset = "0x5719F8")]
		Unknown,
		[Token(Token = "0x4000DEF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571A30", Offset = "0x571A30")]
		Shared,
		[Token(Token = "0x4000DF0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571A68", Offset = "0x571A68")]
		Canceled
	}
	[Token(Token = "0x200035C")]
	public sealed class StandalonePlatform
	{
		[Token(Token = "0x200035D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x571AA0", Offset = "0x571AA0")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x72D8C0", Offset = "0x72D8C0", VA = "0x72D8C0")]
		public StandalonePlatform()
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x72D8C8", Offset = "0x72D8C8", VA = "0x72D8C8")]
		public Request<PlatformInitialize> InitializeInEditor()
		{
			return null;
		}
	}
	[Token(Token = "0x200035E")]
	public sealed class StandalonePlatformSettings
	{
		[Token(Token = "0x1700018F")]
		public static string OculusPlatformTestUserEmail
		{
			[Token(Token = "0x60014DF")]
			[Address(RVA = "0x7421C8", Offset = "0x7421C8", VA = "0x7421C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0x742230", Offset = "0x742230", VA = "0x742230")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public static string OculusPlatformTestUserPassword
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0x742234", Offset = "0x742234", VA = "0x742234")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0x74229C", Offset = "0x74229C", VA = "0x74229C")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public static string OculusPlatformTestUserAccessToken
		{
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0x741E4C", Offset = "0x741E4C", VA = "0x741E4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E4")]
			[Address(RVA = "0x7422A0", Offset = "0x7422A0", VA = "0x7422A0")]
			set
			{
			}
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x7421C0", Offset = "0x7421C0", VA = "0x7421C0")]
		public StandalonePlatformSettings()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public enum SystemVoipStatus
	{
		[Token(Token = "0x4000DF2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571AB4", Offset = "0x571AB4")]
		Unknown,
		[Token(Token = "0x4000DF3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571AEC", Offset = "0x571AEC")]
		Unavailable,
		[Token(Token = "0x4000DF4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571B24", Offset = "0x571B24")]
		Suppressed,
		[Token(Token = "0x4000DF5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571B5C", Offset = "0x571B5C")]
		Active
	}
	[Token(Token = "0x2000360")]
	public enum TimeWindow
	{
		[Token(Token = "0x4000DF7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571B94", Offset = "0x571B94")]
		Unknown,
		[Token(Token = "0x4000DF8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571BCC", Offset = "0x571BCC")]
		OneHour,
		[Token(Token = "0x4000DF9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571C04", Offset = "0x571C04")]
		OneDay,
		[Token(Token = "0x4000DFA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571C3C", Offset = "0x571C3C")]
		OneWeek,
		[Token(Token = "0x4000DFB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571C74", Offset = "0x571C74")]
		ThirtyDays,
		[Token(Token = "0x4000DFC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571CAC", Offset = "0x571CAC")]
		NinetyDays
	}
	[Token(Token = "0x2000361")]
	public class UserOptions
	{
		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x7422A4", Offset = "0x7422A4", VA = "0x7422A4")]
		public UserOptions()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x742320", Offset = "0x742320", VA = "0x742320")]
		public void SetMaxUsers(uint value)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x7423A0", Offset = "0x7423A0", VA = "0x7423A0")]
		public void AddServiceProvider(ServiceProvider value)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x742420", Offset = "0x742420", VA = "0x742420")]
		public void ClearServiceProviders()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x742490", Offset = "0x742490", VA = "0x742490")]
		public void SetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x742510", Offset = "0x742510", VA = "0x742510")]
		public static explicit operator IntPtr(UserOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x742560", Offset = "0x742560", VA = "0x742560", Slot = "1")]
		~UserOptions()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public enum UserOrdering
	{
		[Token(Token = "0x4000DFF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571CE4", Offset = "0x571CE4")]
		Unknown,
		[Token(Token = "0x4000E00")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571D1C", Offset = "0x571D1C")]
		None,
		[Token(Token = "0x4000E01")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571D54", Offset = "0x571D54")]
		PresenceAlphabetical
	}
	[Token(Token = "0x2000363")]
	public enum UserPresenceStatus
	{
		[Token(Token = "0x4000E03")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571D8C", Offset = "0x571D8C")]
		Unknown,
		[Token(Token = "0x4000E04")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571DC4", Offset = "0x571DC4")]
		Online,
		[Token(Token = "0x4000E05")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571DFC", Offset = "0x571DFC")]
		Offline
	}
	[Token(Token = "0x2000364")]
	public class VoipAudioSourceHiLevel : MonoBehaviour
	{
		[Token(Token = "0x2000365")]
		public class FilterReadDelegate : MonoBehaviour
		{
			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public VoipAudioSourceHiLevel parent;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float[] scratchBuffer;

			[Token(Token = "0x60014F6")]
			[Address(RVA = "0x744424", Offset = "0x744424", VA = "0x744424")]
			public FilterReadDelegate()
			{
			}

			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x74442C", Offset = "0x74442C", VA = "0x74442C")]
			private void Awake()
			{
			}

			[Token(Token = "0x60014F8")]
			[Address(RVA = "0x744500", Offset = "0x744500", VA = "0x744500")]
			private void OnAudioFilterRead(float[] data, int channels)
			{
			}
		}

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int initialPlaybackDelayMS;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audioSource;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float peakAmplitude;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IVoipPCMSource pcmSource;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int audioSystemPlaybackFrequency;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool verboseLogging;

		[Token(Token = "0x17000192")]
		public ulong senderID
		{
			[Token(Token = "0x60014ED")]
			[Address(RVA = "0x743BE8", Offset = "0x743BE8", VA = "0x743BE8")]
			set
			{
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x743BE0", Offset = "0x743BE0", VA = "0x743BE0")]
		public VoipAudioSourceHiLevel()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x743CAC", Offset = "0x743CAC", VA = "0x743CAC")]
		protected void Stop()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x743CB0", Offset = "0x743CB0", VA = "0x743CB0")]
		private VoipSampleRate SampleRateToEnum(int rate)
		{
			return default(VoipSampleRate);
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x743CEC", Offset = "0x743CEC", VA = "0x743CEC")]
		protected void Awake()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x743FF0", Offset = "0x743FF0", VA = "0x743FF0")]
		private void Start()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x74401C", Offset = "0x74401C", VA = "0x74401C", Slot = "4")]
		protected virtual void CreatePCMSource()
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x744084", Offset = "0x744084", VA = "0x744084")]
		protected static int MSToElements(int ms)
		{
			return default(int);
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x744110", Offset = "0x744110", VA = "0x744110")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public enum VoipBitrate
	{
		[Token(Token = "0x4000E0F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571E34", Offset = "0x571E34")]
		Unknown,
		[Token(Token = "0x4000E10")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571E6C", Offset = "0x571E6C")]
		B16000,
		[Token(Token = "0x4000E11")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571EA4", Offset = "0x571EA4")]
		B24000,
		[Token(Token = "0x4000E12")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571EDC", Offset = "0x571EDC")]
		B32000,
		[Token(Token = "0x4000E13")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571F14", Offset = "0x571F14")]
		B64000,
		[Token(Token = "0x4000E14")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571F4C", Offset = "0x571F4C")]
		B96000,
		[Token(Token = "0x4000E15")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571F84", Offset = "0x571F84")]
		B128000
	}
	[Token(Token = "0x2000367")]
	public enum VoipDtxState
	{
		[Token(Token = "0x4000E17")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571FBC", Offset = "0x571FBC")]
		Unknown,
		[Token(Token = "0x4000E18")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x571FF4", Offset = "0x571FF4")]
		Enabled,
		[Token(Token = "0x4000E19")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57202C", Offset = "0x57202C")]
		Disabled
	}
	[Token(Token = "0x2000368")]
	public enum VoipMuteState
	{
		[Token(Token = "0x4000E1B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x572064", Offset = "0x572064")]
		Unknown,
		[Token(Token = "0x4000E1C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57209C", Offset = "0x57209C")]
		Muted,
		[Token(Token = "0x4000E1D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5720D4", Offset = "0x5720D4")]
		Unmuted
	}
	[Token(Token = "0x2000369")]
	public class VoipOptions
	{
		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x744ACC", Offset = "0x744ACC", VA = "0x744ACC")]
		public VoipOptions()
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x744B48", Offset = "0x744B48", VA = "0x744B48")]
		public void SetBitrateForNewConnections(VoipBitrate value)
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x744BC8", Offset = "0x744BC8", VA = "0x744BC8")]
		public void SetCreateNewConnectionUseDtx(VoipDtxState value)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x743948", Offset = "0x743948", VA = "0x743948")]
		public static explicit operator IntPtr(VoipOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x744C48", Offset = "0x744C48", VA = "0x744C48", Slot = "1")]
		~VoipOptions()
		{
		}
	}
	[Token(Token = "0x200036A")]
	public class VoipPCMSourceNative : IVoipPCMSource
	{
		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong senderID;

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x74407C", Offset = "0x74407C", VA = "0x74407C")]
		public VoipPCMSourceNative()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x744D0C", Offset = "0x744D0C", VA = "0x744D0C", Slot = "4")]
		public int GetPCM(float[] dest, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0x744DDC", Offset = "0x744DDC", VA = "0x744DDC", Slot = "5")]
		public void SetSenderID(ulong senderID)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x744DE4", Offset = "0x744DE4", VA = "0x744DE4", Slot = "7")]
		public int PeekSizeElements()
		{
			return default(int);
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x744E8C", Offset = "0x744E8C", VA = "0x744E8C", Slot = "6")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public enum VoipSampleRate
	{
		[Token(Token = "0x4000E21")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57210C", Offset = "0x57210C")]
		Unknown,
		[Token(Token = "0x4000E22")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x572144", Offset = "0x572144")]
		HZ24000,
		[Token(Token = "0x4000E23")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x57217C", Offset = "0x57217C")]
		HZ44100,
		[Token(Token = "0x4000E24")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5721B4", Offset = "0x5721B4")]
		HZ48000
	}
	[Token(Token = "0x200036C")]
	public class WindowsPlatform
	{
		[Token(Token = "0x200036D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5721EC", Offset = "0x5721EC")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x72DA94", Offset = "0x72DA94", VA = "0x72DA94")]
		public WindowsPlatform()
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x744E90", Offset = "0x744E90", VA = "0x744E90")]
		private void CPPLogCallback(IntPtr tag, IntPtr message)
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0x744F9C", Offset = "0x744F9C", VA = "0x744F9C")]
		private IntPtr getCallbackPointer()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0x72DEEC", Offset = "0x72DEEC", VA = "0x72DEEC")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x72DA9C", Offset = "0x72DA9C", VA = "0x72DA9C")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}
	}
}
[Token(Token = "0x200036E")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
[Token(Token = "0x200036F")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x600150C")]
	[Address(RVA = "0x1139CA4", Offset = "0x1139CA4", VA = "0x1139CA4")]
	public ONSPReflectionZone()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0x1139CAC", Offset = "0x1139CAC", VA = "0x1139CAC")]
	private void Start()
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0x1139CB0", Offset = "0x1139CB0", VA = "0x1139CB0")]
	private void Update()
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0x1139CB4", Offset = "0x1139CB4", VA = "0x1139CB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0x1139E38", Offset = "0x1139E38", VA = "0x1139E38")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0x1139D04", Offset = "0x1139D04", VA = "0x1139D04")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0x1139D98", Offset = "0x1139D98", VA = "0x1139D98")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x6001513")]
	[Address(RVA = "0x1139E88", Offset = "0x1139E88", VA = "0x1139E88")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x6001514")]
	[Address(RVA = "0x1139F24", Offset = "0x1139F24", VA = "0x1139F24")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x6001515")]
	[Address(RVA = "0x113A0E0", Offset = "0x113A0E0", VA = "0x113A0E0")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}
}
[Token(Token = "0x2000370")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x2000371")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioRaycastCallback _raycastCallback;

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float particleSize;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float particleOffset;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject room;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] dims;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] coefs;

	[Token(Token = "0x4000E3A")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] points;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] normals;

	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem sys;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x4000E40")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6001517")]
	[Address(RVA = "0x745900", Offset = "0x745900", VA = "0x745900")]
	public OculusSpatializerUnity()
	{
	}

	[Token(Token = "0x6001518")]
	[Address(RVA = "0x745A90", Offset = "0x745A90", VA = "0x745A90")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001519")]
	[Address(RVA = "0x745AC8", Offset = "0x745AC8", VA = "0x745AC8")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0x745CF0", Offset = "0x745CF0", VA = "0x745CF0")]
	private void Start()
	{
	}

	[Token(Token = "0x600151B")]
	[Address(RVA = "0x745DA4", Offset = "0x745DA4", VA = "0x745DA4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600151C")]
	[Address(RVA = "0x745EB0", Offset = "0x745EB0", VA = "0x745EB0")]
	private void Update()
	{
	}

	[Token(Token = "0x600151D")]
	[Address(RVA = "0x746A64", Offset = "0x746A64", VA = "0x746A64")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600151E")]
	[Address(RVA = "0x745D84", Offset = "0x745D84", VA = "0x745D84")]
	private static extern int OSP_Unity_AssignRaycastCallback(MulticastDelegate callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x600151F")]
	[Address(RVA = "0x745E08", Offset = "0x745E08", VA = "0x745E08")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6001520")]
	[Address(RVA = "0x746760", Offset = "0x746760", VA = "0x746760")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6001521")]
	[Address(RVA = "0x7467F8", Offset = "0x7467F8", VA = "0x7467F8")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6001522")]
	[Address(RVA = "0x746894", Offset = "0x746894", VA = "0x746894")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x6001523")]
	[Address(RVA = "0x746930", Offset = "0x746930", VA = "0x746930")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x6001524")]
	[Address(RVA = "0x7469C8", Offset = "0x7469C8", VA = "0x7469C8")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x6001525")]
	[Address(RVA = "0x747DA8", Offset = "0x747DA8", VA = "0x747DA8")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x6001526")]
	[Address(RVA = "0x747E80", Offset = "0x747E80", VA = "0x747E80")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);
}
[Token(Token = "0x2000372")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x2000373")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x4000E47")]
		Uninitialized = -1,
		[Token(Token = "0x4000E48")]
		NotEnabled,
		[Token(Token = "0x4000E49")]
		Success,
		[Token(Token = "0x4000E4A")]
		StreamError,
		[Token(Token = "0x4000E4B")]
		ProcessError,
		[Token(Token = "0x4000E4C")]
		MaxStatValue
	}

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool useVirtualSpeakers;

	[Token(Token = "0x17000193")]
	public bool UseVirtualSpeakers
	{
		[Token(Token = "0x600152D")]
		[Address(RVA = "0x74888C", Offset = "0x74888C", VA = "0x74888C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600152E")]
		[Address(RVA = "0x748894", Offset = "0x748894", VA = "0x748894")]
		set
		{
		}
	}

	[Token(Token = "0x600152C")]
	[Address(RVA = "0x74887C", Offset = "0x74887C", VA = "0x74887C")]
	public ONSPAmbisonicsNative()
	{
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0x7488A0", Offset = "0x7488A0", VA = "0x7488A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0x748B00", Offset = "0x748B00", VA = "0x748B00")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000374")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000375")]
	private enum Parameters
	{
		[Token(Token = "0x4000E58")]
		P_GAIN,
		[Token(Token = "0x4000E59")]
		P_USEINVSQR,
		[Token(Token = "0x4000E5A")]
		P_NEAR,
		[Token(Token = "0x4000E5B")]
		P_FAR,
		[Token(Token = "0x4000E5C")]
		P_RADIUS,
		[Token(Token = "0x4000E5D")]
		P_DISABLE_RFL,
		[Token(Token = "0x4000E5E")]
		P_VSPEAKERMODE,
		[Token(Token = "0x4000E5F")]
		P_AMBISTAT,
		[Token(Token = "0x4000E60")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x4000E61")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x4000E62")]
		P_SENDLEVEL,
		[Token(Token = "0x4000E63")]
		P_NUM
	}

	[Token(Token = "0x4000E4D")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x17000194")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x6001534")]
		[Address(RVA = "0x748F3C", Offset = "0x748F3C", VA = "0x748F3C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001535")]
		[Address(RVA = "0x748F44", Offset = "0x748F44", VA = "0x748F44")]
		set
		{
		}
	}

	[Token(Token = "0x17000195")]
	public float Gain
	{
		[Token(Token = "0x6001536")]
		[Address(RVA = "0x748F50", Offset = "0x748F50", VA = "0x748F50")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001537")]
		[Address(RVA = "0x748F58", Offset = "0x748F58", VA = "0x748F58")]
		set
		{
		}
	}

	[Token(Token = "0x17000196")]
	public bool UseInvSqr
	{
		[Token(Token = "0x6001538")]
		[Address(RVA = "0x748FE0", Offset = "0x748FE0", VA = "0x748FE0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001539")]
		[Address(RVA = "0x748FE8", Offset = "0x748FE8", VA = "0x748FE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000197")]
	public float Near
	{
		[Token(Token = "0x600153A")]
		[Address(RVA = "0x748FF4", Offset = "0x748FF4", VA = "0x748FF4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600153B")]
		[Address(RVA = "0x748FFC", Offset = "0x748FFC", VA = "0x748FFC")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public float Far
	{
		[Token(Token = "0x600153C")]
		[Address(RVA = "0x749088", Offset = "0x749088", VA = "0x749088")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600153D")]
		[Address(RVA = "0x749090", Offset = "0x749090", VA = "0x749090")]
		set
		{
		}
	}

	[Token(Token = "0x17000199")]
	public float VolumetricRadius
	{
		[Token(Token = "0x600153E")]
		[Address(RVA = "0x74911C", Offset = "0x74911C", VA = "0x74911C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600153F")]
		[Address(RVA = "0x749124", Offset = "0x749124", VA = "0x749124")]
		set
		{
		}
	}

	[Token(Token = "0x1700019A")]
	public float ReverbSend
	{
		[Token(Token = "0x6001540")]
		[Address(RVA = "0x7491B0", Offset = "0x7491B0", VA = "0x7491B0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001541")]
		[Address(RVA = "0x7491B8", Offset = "0x7491B8", VA = "0x7491B8")]
		set
		{
		}
	}

	[Token(Token = "0x1700019B")]
	public bool EnableRfl
	{
		[Token(Token = "0x6001542")]
		[Address(RVA = "0x749244", Offset = "0x749244", VA = "0x749244")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001543")]
		[Address(RVA = "0x74924C", Offset = "0x74924C", VA = "0x74924C")]
		set
		{
		}
	}

	[Token(Token = "0x6001532")]
	[Address(RVA = "0x748E28", Offset = "0x748E28", VA = "0x748E28")]
	public ONSPAudioSource()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6001533")]
	[Address(RVA = "0x748E44", Offset = "0x748E44", VA = "0x748E44")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x749258", Offset = "0x749258", VA = "0x749258")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x749430", Offset = "0x749430", VA = "0x749430")]
	private void Start()
	{
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x749434", Offset = "0x749434", VA = "0x749434")]
	private void Update()
	{
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0x7492C4", Offset = "0x7492C4", VA = "0x7492C4")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x749518", Offset = "0x749518", VA = "0x749518")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001549")]
	[Address(RVA = "0x749A58", Offset = "0x749A58", VA = "0x749A58")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x2000376")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Token(Token = "0x4000E65")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Token(Token = "0x4000E67")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x600154B")]
	[Address(RVA = "0x749B2C", Offset = "0x749B2C", VA = "0x749B2C")]
	public ONSPProfiler()
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0x749B3C", Offset = "0x749B3C", VA = "0x749B3C")]
	private void Start()
	{
	}

	[Token(Token = "0x600154D")]
	[Address(RVA = "0x749B4C", Offset = "0x749B4C", VA = "0x749B4C")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600154E")]
	[Address(RVA = "0x749C1C", Offset = "0x749C1C", VA = "0x749C1C")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x600154F")]
	[Address(RVA = "0x749B84", Offset = "0x749B84", VA = "0x749B84")]
	private static extern int ONSP_SetProfilerPort(int port);
}
[Token(Token = "0x2000377")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000378")]
	private struct MeshMaterial
	{
		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000379")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int OSPSuccess;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int terrainDecimation;

	[Token(Token = "0x1700019C")]
	public string filePath
	{
		[Token(Token = "0x6001551")]
		[Address(RVA = "0x749D08", Offset = "0x749D08", VA = "0x749D08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x749CB4", Offset = "0x749CB4", VA = "0x749CB4")]
	public ONSPPropagationGeometry()
	{
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x749D9C", Offset = "0x749D9C", VA = "0x749D9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0x749DA0", Offset = "0x749DA0", VA = "0x749DA0")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x6001554")]
	[Address(RVA = "0x74A2B0", Offset = "0x74A2B0", VA = "0x74A2B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001555")]
	[Address(RVA = "0x74A770", Offset = "0x74A770", VA = "0x74A770")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001556")]
	[Address(RVA = "0x74A8E0", Offset = "0x74A8E0", VA = "0x74A8E0")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic)
	{
	}

	[Token(Token = "0x6001557")]
	[Address(RVA = "0x74B0D4", Offset = "0x74B0D4", VA = "0x74B0D4")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic)
	{
		return default(int);
	}

	[Token(Token = "0x6001558")]
	[Address(RVA = "0x74A168", Offset = "0x74A168", VA = "0x74A168")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6001559")]
	[Address(RVA = "0x749FAC", Offset = "0x749FAC", VA = "0x749FAC")]
	public bool ReadFile()
	{
		return default(bool);
	}
}
namespace ONSPPropagationInterface
{
	[Token(Token = "0x200037A")]
	public enum FaceType : uint
	{
		[Token(Token = "0x4000E73")]
		TRIANGLES,
		[Token(Token = "0x4000E74")]
		QUADS
	}
	[Token(Token = "0x200037B")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x4000E76")]
		ABSORPTION,
		[Token(Token = "0x4000E77")]
		TRANSMISSION,
		[Token(Token = "0x4000E78")]
		SCATTERING
	}
	[Token(Token = "0x200037C")]
	public struct MeshGroup
	{
		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
	[Token(Token = "0x200037D")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x4000E7E")]
		Int8,
		[Token(Token = "0x4000E7F")]
		UInt8,
		[Token(Token = "0x4000E80")]
		Int16,
		[Token(Token = "0x4000E81")]
		UInt16,
		[Token(Token = "0x4000E82")]
		Int32,
		[Token(Token = "0x4000E83")]
		UInt32,
		[Token(Token = "0x4000E84")]
		Int64,
		[Token(Token = "0x4000E85")]
		UInt64,
		[Token(Token = "0x4000E86")]
		Float16,
		[Token(Token = "0x4000E87")]
		Float32,
		[Token(Token = "0x4000E88")]
		Float64
	}
	[Token(Token = "0x200037E")]
	public class ClientType
	{
		[Token(Token = "0x4000E89")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x4000E8A")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x4000E8B")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x4000E8C")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x4000E8D")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x4000E8E")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x4000E8F")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x4000E90")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x4000E91")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x4000E92")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x4000E93")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x4000E94")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x4000E95")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x74C8F4", Offset = "0x74C8F4", VA = "0x74C8F4")]
		public ClientType()
		{
		}
	}
}
namespace ONSPPropagationInterface.Unity_Native
{
	[Token(Token = "0x200037F")]
	public class PropIFace
	{
		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr context_;

		[Token(Token = "0x4000E97")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x1700019D")]
		private static IntPtr context
		{
			[Token(Token = "0x600155D")]
			[Address(RVA = "0x74DC88", Offset = "0x74DC88", VA = "0x74DC88")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x74DC80", Offset = "0x74DC80", VA = "0x74DC80")]
		public PropIFace()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600155E")]
		[Address(RVA = "0x74DD50", Offset = "0x74DD50", VA = "0x74DD50")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x600155F")]
		[Address(RVA = "0x74DE04", Offset = "0x74DE04", VA = "0x74DE04")]
		public static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001560")]
		[Address(RVA = "0x74DEAC", Offset = "0x74DEAC", VA = "0x74DEAC")]
		public static int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001561")]
		[Address(RVA = "0x74DF20", Offset = "0x74DF20", VA = "0x74DF20")]
		public static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x74DFC8", Offset = "0x74DFC8", VA = "0x74DFC8")]
		public static int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001563")]
		[Address(RVA = "0x74E034", Offset = "0x74E034", VA = "0x74E034")]
		public static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x749F40", Offset = "0x749F40", VA = "0x749F40")]
		public static int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001565")]
		[Address(RVA = "0x74E0E4", Offset = "0x74E0E4", VA = "0x74E0E4")]
		public static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001566")]
		[Address(RVA = "0x74A87C", Offset = "0x74A87C", VA = "0x74A87C")]
		public static int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001567")]
		[Address(RVA = "0x74E17C", Offset = "0x74E17C", VA = "0x74E17C")]
		public static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001568")]
		[Address(RVA = "0x74C67C", Offset = "0x74C67C", VA = "0x74C67C")]
		public static int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001569")]
		[Address(RVA = "0x74E290", Offset = "0x74E290", VA = "0x74E290")]
		public static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x74A6FC", Offset = "0x74A6FC", VA = "0x74A6FC")]
		public static int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600156B")]
		[Address(RVA = "0x74E340", Offset = "0x74E340", VA = "0x74E340")]
		public static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x74E484", Offset = "0x74E484", VA = "0x74E484")]
		public static int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600156D")]
		[Address(RVA = "0x74E4F8", Offset = "0x74E4F8", VA = "0x74E4F8")]
		public static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x74E5BC", Offset = "0x74E5BC", VA = "0x74E5BC")]
		public static int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600156F")]
		[Address(RVA = "0x74E630", Offset = "0x74E630", VA = "0x74E630")]
		public static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x74C7A4", Offset = "0x74C7A4", VA = "0x74C7A4")]
		public static int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001571")]
		[Address(RVA = "0x74E6F4", Offset = "0x74E6F4", VA = "0x74E6F4")]
		public static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001572")]
		[Address(RVA = "0x74E7A4", Offset = "0x74E7A4", VA = "0x74E7A4")]
		public static int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001573")]
		[Address(RVA = "0x74E810", Offset = "0x74E810", VA = "0x74E810")]
		public static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x74E8A8", Offset = "0x74E8A8", VA = "0x74E8A8")]
		public static int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001575")]
		[Address(RVA = "0x74E90C", Offset = "0x74E90C", VA = "0x74E90C")]
		public static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001576")]
		[Address(RVA = "0x74E9CC", Offset = "0x74E9CC", VA = "0x74E9CC")]
		public static int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001577")]
		[Address(RVA = "0x74EA58", Offset = "0x74EA58", VA = "0x74EA58")]
		public static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001578")]
		[Address(RVA = "0x74EB24", Offset = "0x74EB24", VA = "0x74EB24")]
		public static int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001579")]
		[Address(RVA = "0x74EBB0", Offset = "0x74EBB0", VA = "0x74EBB0")]
		public static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x74EC58", Offset = "0x74EC58", VA = "0x74EC58")]
		public static int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}
}
namespace ONSPPropagationInterface.Wwise
{
	[Token(Token = "0x2000380")]
	public class PropIFace
	{
		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr context_;

		[Token(Token = "0x4000E99")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x1700019E")]
		private static IntPtr context
		{
			[Token(Token = "0x600157D")]
			[Address(RVA = "0x74ED24", Offset = "0x74ED24", VA = "0x74ED24")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x74ED1C", Offset = "0x74ED1C", VA = "0x74ED1C")]
		public PropIFace()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600157E")]
		[Address(RVA = "0x74EDEC", Offset = "0x74EDEC", VA = "0x74EDEC")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x600157F")]
		[Address(RVA = "0x74EEA0", Offset = "0x74EEA0", VA = "0x74EEA0")]
		public static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x74EF48", Offset = "0x74EF48", VA = "0x74EF48")]
		public static int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001581")]
		[Address(RVA = "0x74EFBC", Offset = "0x74EFBC", VA = "0x74EFBC")]
		public static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x74F064", Offset = "0x74F064", VA = "0x74F064")]
		public static int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001583")]
		[Address(RVA = "0x74F0D0", Offset = "0x74F0D0", VA = "0x74F0D0")]
		public static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x74F184", Offset = "0x74F184", VA = "0x74F184")]
		public static int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001585")]
		[Address(RVA = "0x74F1F0", Offset = "0x74F1F0", VA = "0x74F1F0")]
		public static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x74F288", Offset = "0x74F288", VA = "0x74F288")]
		public static int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001587")]
		[Address(RVA = "0x74F2EC", Offset = "0x74F2EC", VA = "0x74F2EC")]
		public static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x74F400", Offset = "0x74F400", VA = "0x74F400")]
		public static int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001589")]
		[Address(RVA = "0x74F528", Offset = "0x74F528", VA = "0x74F528")]
		public static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x74F5D8", Offset = "0x74F5D8", VA = "0x74F5D8")]
		public static int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600158B")]
		[Address(RVA = "0x74F64C", Offset = "0x74F64C", VA = "0x74F64C")]
		public static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x74F790", Offset = "0x74F790", VA = "0x74F790")]
		public static int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600158D")]
		[Address(RVA = "0x74F804", Offset = "0x74F804", VA = "0x74F804")]
		public static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x74F8C8", Offset = "0x74F8C8", VA = "0x74F8C8")]
		public static int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600158F")]
		[Address(RVA = "0x74F93C", Offset = "0x74F93C", VA = "0x74F93C")]
		public static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x74FA00", Offset = "0x74FA00", VA = "0x74FA00")]
		public static int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001591")]
		[Address(RVA = "0x74FA74", Offset = "0x74FA74", VA = "0x74FA74")]
		public static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x74FB28", Offset = "0x74FB28", VA = "0x74FB28")]
		public static int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001593")]
		[Address(RVA = "0x74FB94", Offset = "0x74FB94", VA = "0x74FB94")]
		public static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001594")]
		[Address(RVA = "0x74FC2C", Offset = "0x74FC2C", VA = "0x74FC2C")]
		public static int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001595")]
		[Address(RVA = "0x74FC90", Offset = "0x74FC90", VA = "0x74FC90")]
		public static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x74FD50", Offset = "0x74FD50", VA = "0x74FD50")]
		public static int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001597")]
		[Address(RVA = "0x74FDDC", Offset = "0x74FDDC", VA = "0x74FDDC")]
		public static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x74FEA8", Offset = "0x74FEA8", VA = "0x74FEA8")]
		public static int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001599")]
		[Address(RVA = "0x74FF34", Offset = "0x74FF34", VA = "0x74FF34")]
		public static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x74FFDC", Offset = "0x74FFDC", VA = "0x74FFDC")]
		public static int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}
}
namespace ONSPPropagationInterface.FMOD
{
	[Token(Token = "0x2000381")]
	public class PropIFace
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr context_;

		[Token(Token = "0x4000E9B")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x1700019F")]
		private static IntPtr context
		{
			[Token(Token = "0x600159D")]
			[Address(RVA = "0x74C904", Offset = "0x74C904", VA = "0x74C904")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x74C8FC", Offset = "0x74C8FC", VA = "0x74C8FC")]
		public PropIFace()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600159E")]
		[Address(RVA = "0x74C9CC", Offset = "0x74C9CC", VA = "0x74C9CC")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x600159F")]
		[Address(RVA = "0x74CA80", Offset = "0x74CA80", VA = "0x74CA80")]
		public static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x74CB28", Offset = "0x74CB28", VA = "0x74CB28")]
		public static int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x74CB9C", Offset = "0x74CB9C", VA = "0x74CB9C")]
		public static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x74CC44", Offset = "0x74CC44", VA = "0x74CC44")]
		public static int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x74CCB0", Offset = "0x74CCB0", VA = "0x74CCB0")]
		public static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0x74CD64", Offset = "0x74CD64", VA = "0x74CD64")]
		public static int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x74CDD0", Offset = "0x74CDD0", VA = "0x74CDD0")]
		public static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x74CE68", Offset = "0x74CE68", VA = "0x74CE68")]
		public static int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x74CECC", Offset = "0x74CECC", VA = "0x74CECC")]
		public static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x74CFE0", Offset = "0x74CFE0", VA = "0x74CFE0")]
		public static int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x74D108", Offset = "0x74D108", VA = "0x74D108")]
		public static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x74D1B8", Offset = "0x74D1B8", VA = "0x74D1B8")]
		public static int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x74D22C", Offset = "0x74D22C", VA = "0x74D22C")]
		public static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x74D370", Offset = "0x74D370", VA = "0x74D370")]
		public static int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x74D3E4", Offset = "0x74D3E4", VA = "0x74D3E4")]
		public static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x74D4A8", Offset = "0x74D4A8", VA = "0x74D4A8")]
		public static int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x74D51C", Offset = "0x74D51C", VA = "0x74D51C")]
		public static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x74D5E0", Offset = "0x74D5E0", VA = "0x74D5E0")]
		public static int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x74D654", Offset = "0x74D654", VA = "0x74D654")]
		public static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x74D708", Offset = "0x74D708", VA = "0x74D708")]
		public static int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x74D774", Offset = "0x74D774", VA = "0x74D774")]
		public static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x74D80C", Offset = "0x74D80C", VA = "0x74D80C")]
		public static int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x74D870", Offset = "0x74D870", VA = "0x74D870")]
		public static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x74D930", Offset = "0x74D930", VA = "0x74D930")]
		public static int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x74D9BC", Offset = "0x74D9BC", VA = "0x74D9BC")]
		public static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x74DA88", Offset = "0x74DA88", VA = "0x74DA88")]
		public static int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x74DB14", Offset = "0x74DB14", VA = "0x74DB14")]
		public static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x74DBBC", Offset = "0x74DBBC", VA = "0x74DBBC")]
		public static int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}
}
[Token(Token = "0x2000382")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x2000383")]
	public enum Preset
	{
		[Token(Token = "0x4000EA2")]
		Custom,
		[Token(Token = "0x4000EA3")]
		AcousticTile,
		[Token(Token = "0x4000EA4")]
		Brick,
		[Token(Token = "0x4000EA5")]
		BrickPainted,
		[Token(Token = "0x4000EA6")]
		Carpet,
		[Token(Token = "0x4000EA7")]
		CarpetHeavy,
		[Token(Token = "0x4000EA8")]
		CarpetHeavyPadded,
		[Token(Token = "0x4000EA9")]
		CeramicTile,
		[Token(Token = "0x4000EAA")]
		Concrete,
		[Token(Token = "0x4000EAB")]
		ConcreteRough,
		[Token(Token = "0x4000EAC")]
		ConcreteBlock,
		[Token(Token = "0x4000EAD")]
		ConcreteBlockPainted,
		[Token(Token = "0x4000EAE")]
		Curtain,
		[Token(Token = "0x4000EAF")]
		Foliage,
		[Token(Token = "0x4000EB0")]
		Glass,
		[Token(Token = "0x4000EB1")]
		GlassHeavy,
		[Token(Token = "0x4000EB2")]
		Grass,
		[Token(Token = "0x4000EB3")]
		Gravel,
		[Token(Token = "0x4000EB4")]
		GypsumBoard,
		[Token(Token = "0x4000EB5")]
		PlasterOnBrick,
		[Token(Token = "0x4000EB6")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x4000EB7")]
		Soil,
		[Token(Token = "0x4000EB8")]
		SoundProof,
		[Token(Token = "0x4000EB9")]
		Snow,
		[Token(Token = "0x4000EBA")]
		Steel,
		[Token(Token = "0x4000EBB")]
		Water,
		[Token(Token = "0x4000EBC")]
		WoodThin,
		[Token(Token = "0x4000EBD")]
		WoodThick,
		[Token(Token = "0x4000EBE")]
		WoodFloor,
		[Token(Token = "0x4000EBF")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x2000384")]
	public sealed class Point
	{
		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x113974C", Offset = "0x113974C", VA = "0x113974C")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x1139784", Offset = "0x1139784", VA = "0x1139784")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x11397F4", Offset = "0x11397F4", VA = "0x11397F4")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x2000385")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x572348", Offset = "0x572348")]
	public sealed class Spectrum
	{
		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x572380", Offset = "0x572380")]
		private static Func<Point, float> <>f__am$cache0;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x572390", Offset = "0x572390")]
		private static Func<Point, float> <>f__am$cache1;

		[Token(Token = "0x170001A1")]
		public float Item
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x1139858", Offset = "0x1139858", VA = "0x1139858")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x11300B0", Offset = "0x11300B0", VA = "0x11300B0")]
		public Spectrum()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0x1139C54", Offset = "0x1139C54", VA = "0x1139C54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5723A0", Offset = "0x5723A0")]
		private static float <get_Item>m__0(Point p)
		{
			return default(float);
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x1139C7C", Offset = "0x1139C7C", VA = "0x1139C7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5723B0", Offset = "0x5723B0")]
		private static float <get_Item>m__1(Point p)
		{
			return default(float);
		}
	}

	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x572290", Offset = "0x572290")]
	public Spectrum absorption;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5722C8", Offset = "0x5722C8")]
	public Spectrum transmission;

	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x572300", Offset = "0x572300")]
	public Spectrum scattering;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x170001A0")]
	public Preset preset
	{
		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x1130128", Offset = "0x1130128", VA = "0x1130128")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x1130130", Offset = "0x1130130", VA = "0x1130130")]
		set
		{
		}
	}

	[Token(Token = "0x60015BC")]
	[Address(RVA = "0x1130018", Offset = "0x1130018", VA = "0x1130018")]
	public ONSPPropagationMaterial()
	{
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0x11302F8", Offset = "0x11302F8", VA = "0x11302F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60015C0")]
	[Address(RVA = "0x11302FC", Offset = "0x11302FC", VA = "0x11302FC")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0x1130858", Offset = "0x1130858", VA = "0x1130858")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0x113085C", Offset = "0x113085C", VA = "0x113085C")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0x1130424", Offset = "0x1130424", VA = "0x1130424")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0x1130158", Offset = "0x1130158", VA = "0x1130158")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0x11308EC", Offset = "0x11308EC", VA = "0x11308EC")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0x1130E20", Offset = "0x1130E20", VA = "0x1130E20")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0x113135C", Offset = "0x113135C", VA = "0x113135C")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0x1131898", Offset = "0x1131898", VA = "0x1131898")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0x1131DD8", Offset = "0x1131DD8", VA = "0x1131DD8")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0x1132310", Offset = "0x1132310", VA = "0x1132310")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0x1132848", Offset = "0x1132848", VA = "0x1132848")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0x1132D88", Offset = "0x1132D88", VA = "0x1132D88")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0x11332C8", Offset = "0x11332C8", VA = "0x11332C8")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0x1133804", Offset = "0x1133804", VA = "0x1133804")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0x1133D44", Offset = "0x1133D44", VA = "0x1133D44")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0x1134284", Offset = "0x1134284", VA = "0x1134284")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0x11347BC", Offset = "0x11347BC", VA = "0x11347BC")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0x1134CF4", Offset = "0x1134CF4", VA = "0x1134CF4")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0x113522C", Offset = "0x113522C", VA = "0x113522C")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D4")]
	[Address(RVA = "0x113576C", Offset = "0x113576C", VA = "0x113576C")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0x1135B40", Offset = "0x1135B40", VA = "0x1135B40")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0x1135F0C", Offset = "0x1135F0C", VA = "0x1135F0C")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0x113644C", Offset = "0x113644C", VA = "0x113644C")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0x1136988", Offset = "0x1136988", VA = "0x1136988")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015D9")]
	[Address(RVA = "0x1136EC4", Offset = "0x1136EC4", VA = "0x1136EC4")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DA")]
	[Address(RVA = "0x1137294", Offset = "0x1137294", VA = "0x1137294")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0x1137408", Offset = "0x1137408", VA = "0x1137408")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0x11377D4", Offset = "0x11377D4", VA = "0x11377D4")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0x1137D10", Offset = "0x1137D10", VA = "0x1137D10")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0x1138250", Offset = "0x1138250", VA = "0x1138250")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0x113878C", Offset = "0x113878C", VA = "0x113878C")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0x1138CCC", Offset = "0x1138CCC", VA = "0x1138CCC")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0x113920C", Offset = "0x113920C", VA = "0x113920C")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}
}
[Token(Token = "0x2000386")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x4000EC6")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0x113A31C", Offset = "0x113A31C", VA = "0x113A31C")]
	public ONSPVersion()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60015EA")]
	[Address(RVA = "0x113A324", Offset = "0x113A324", VA = "0x113A324")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0x113A3D4", Offset = "0x113A3D4", VA = "0x113A3D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0x113A510", Offset = "0x113A510", VA = "0x113A510")]
	private void Start()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0x113A514", Offset = "0x113A514", VA = "0x113A514")]
	private void Update()
	{
	}
}
namespace FluffyUnderware.Curvy.Generator
{
	[Token(Token = "0x2000387")]
	public class SplineInputModuleBase : CGModule
	{
		[Token(Token = "0x20005A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5724C0", Offset = "0x5724C0")]
		private sealed class <GetSplineData>c__AnonStorey0
		{
			[Token(Token = "0x40018D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<float> sourceF;

			[Token(Token = "0x40018D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float curDist;

			[Token(Token = "0x40018D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal CurvySpline spline;

			[Token(Token = "0x40018D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal List<Vector3> pos;

			[Token(Token = "0x40018D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Vector3 curPos;

			[Token(Token = "0x40018D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal List<float> relF;

			[Token(Token = "0x40018D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal float startDist;

			[Token(Token = "0x40018D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal CGShape data;

			[Token(Token = "0x40018D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal bool fullPath;

			[Token(Token = "0x40018D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal List<Vector3> tan;

			[Token(Token = "0x40018DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal Vector3 curTan;

			[Token(Token = "0x40018DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal List<Vector3> up;

			[Token(Token = "0x600243F")]
			[Address(RVA = "0x8F13C4", Offset = "0x8F13C4", VA = "0x8F13C4")]
			public <GetSplineData>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6002440")]
			[Address(RVA = "0x8F2304", Offset = "0x8F2304", VA = "0x8F2304")]
			internal void <>m__0(float f)
			{
			}
		}

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x5723C0", Offset = "0x5723C0")]
		[SerializeField]
		private bool m_UseCache;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x57240C", Offset = "0x57240C")]
		[SerializeField]
		private CurvySplineSegment m_StartCP;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x572458", Offset = "0x572458")]
		[SerializeField]
		private CurvySplineSegment m_EndCP;

		[Token(Token = "0x170001A2")]
		public bool UseCache
		{
			[Token(Token = "0x60015EF")]
			[Address(RVA = "0x8F122C", Offset = "0x8F122C", VA = "0x8F122C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015F0")]
			[Address(RVA = "0x8F1234", Offset = "0x8F1234", VA = "0x8F1234")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public CurvySplineSegment StartCP
		{
			[Token(Token = "0x60015F1")]
			[Address(RVA = "0x8E9D68", Offset = "0x8E9D68", VA = "0x8E9D68")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015F2")]
			[Address(RVA = "0x8E9D70", Offset = "0x8E9D70", VA = "0x8E9D70")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public CurvySplineSegment EndCP
		{
			[Token(Token = "0x60015F3")]
			[Address(RVA = "0x8F125C", Offset = "0x8F125C", VA = "0x8F125C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015F4")]
			[Address(RVA = "0x8E9E08", Offset = "0x8E9E08", VA = "0x8E9E08")]
			set
			{
			}
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x8E9B6C", Offset = "0x8E9B6C", VA = "0x8E9B6C")]
		public SplineInputModuleBase()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x8EA44C", Offset = "0x8EA44C", VA = "0x8EA44C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x8F1264", Offset = "0x8F1264", VA = "0x8F1264")]
		private void getRange(CurvySpline spline, CGDataRequestRasterization raster, out float startDist, out float endDist)
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0x8EA0D8", Offset = "0x8EA0D8", VA = "0x8EA0D8")]
		protected float getPathLength(CurvySpline spline)
		{
			return default(float);
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x8EA268", Offset = "0x8EA268", VA = "0x8EA268")]
		protected bool getPathClosed(CurvySpline spline)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x8EA79C", Offset = "0x8EA79C", VA = "0x8EA79C")]
		protected CGData GetSplineData(CurvySpline spline, bool fullPath, CGDataRequestRasterization raster, CGDataRequestMetaCGOptions options)
		{
			return null;
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x8F145C", Offset = "0x8F145C", VA = "0x8F145C")]
		private void CalculateExtendedUV(CurvySpline spline, float startTF, float endTF, List<SamplePointUData> ext, CGShape data)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x8F1E90", Offset = "0x8F1E90", VA = "0x8F1E90")]
		private MetaCGOptions findPreviousReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x8F1FE0", Offset = "0x8F1FE0", VA = "0x8F1FE0")]
		private MetaCGOptions findNextReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}
	}
	[Token(Token = "0x2000388")]
	public class TRSModuleBase : CGModule
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5724D0", Offset = "0x5724D0")]
		private Vector3 m_Transpose;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x572538", Offset = "0x572538")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5725A0", Offset = "0x5725A0")]
		private Vector3 m_Scale;

		[Token(Token = "0x170001A5")]
		public Vector3 Transpose
		{
			[Token(Token = "0x60015FE")]
			[Address(RVA = "0x8F24B8", Offset = "0x8F24B8", VA = "0x8F24B8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015FF")]
			[Address(RVA = "0x8F24C4", Offset = "0x8F24C4", VA = "0x8F24C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6001600")]
			[Address(RVA = "0x8F258C", Offset = "0x8F258C", VA = "0x8F258C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001601")]
			[Address(RVA = "0x8F2598", Offset = "0x8F2598", VA = "0x8F2598")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public Vector3 Scale
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0x8F2660", Offset = "0x8F2660", VA = "0x8F2660")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001603")]
			[Address(RVA = "0x8F266C", Offset = "0x8F266C", VA = "0x8F266C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0x8EF648", Offset = "0x8EF648", VA = "0x8EF648")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x8EF41C", Offset = "0x8EF41C", VA = "0x8EF41C")]
		public TRSModuleBase()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x8F2734", Offset = "0x8F2734", VA = "0x8F2734", Slot = "6")]
		protected override void OnEnable()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Generator.Modules
{
	[Token(Token = "0x2000389")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x572608", Offset = "0x572608")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x572608", Offset = "0x572608")]
	public class BuildRasterizedPath : CGModule
	{
		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x572688", Offset = "0x572688")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x57274C", Offset = "0x57274C")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x572830", Offset = "0x572830")]
		private int m_Resolution;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5728B4", Offset = "0x5728B4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x5728B4", Offset = "0x5728B4")]
		private float m_AngleTreshold;

		[Token(Token = "0x170001A9")]
		public float From
		{
			[Token(Token = "0x6001607")]
			[Address(RVA = "0x84F64C", Offset = "0x84F64C", VA = "0x84F64C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001608")]
			[Address(RVA = "0x84F654", Offset = "0x84F654", VA = "0x84F654")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public float To
		{
			[Token(Token = "0x6001609")]
			[Address(RVA = "0x84F6EC", Offset = "0x84F6EC", VA = "0x84F6EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600160A")]
			[Address(RVA = "0x84F6F4", Offset = "0x84F6F4", VA = "0x84F6F4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float Length
		{
			[Token(Token = "0x600160B")]
			[Address(RVA = "0x84F8D4", Offset = "0x84F8D4", VA = "0x84F8D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600160C")]
			[Address(RVA = "0x84F904", Offset = "0x84F904", VA = "0x84F904")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public int Resolution
		{
			[Token(Token = "0x600160D")]
			[Address(RVA = "0x84F954", Offset = "0x84F954", VA = "0x84F954")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600160E")]
			[Address(RVA = "0x84F95C", Offset = "0x84F95C", VA = "0x84F95C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public bool Optimize
		{
			[Token(Token = "0x600160F")]
			[Address(RVA = "0x84F9F8", Offset = "0x84F9F8", VA = "0x84F9F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001610")]
			[Address(RVA = "0x84FA00", Offset = "0x84FA00", VA = "0x84FA00")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public float AngleThreshold
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0x84FA24", Offset = "0x84FA24", VA = "0x84FA24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001612")]
			[Address(RVA = "0x84FA2C", Offset = "0x84FA2C", VA = "0x84FA2C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public CGPath Path
		{
			[Token(Token = "0x6001613")]
			[Address(RVA = "0x84FAD0", Offset = "0x84FAD0", VA = "0x84FAD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B0")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001614")]
			[Address(RVA = "0x84F7D0", Offset = "0x84F7D0", VA = "0x84F7D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B1")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6001615")]
			[Address(RVA = "0x84FB2C", Offset = "0x84FB2C", VA = "0x84FB2C")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x84F5AC", Offset = "0x84F5AC", VA = "0x84F5AC")]
		public BuildRasterizedPath()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x84FBF0", Offset = "0x84FBF0", VA = "0x84FBF0", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x84FC38", Offset = "0x84FC38", VA = "0x84FC38", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x84FC94", Offset = "0x84FC94", VA = "0x84FC94", Slot = "11")]
		public override void Refresh()
		{
		}
	}
	[Token(Token = "0x200038A")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x5729B8", Offset = "0x5729B8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5729B8", Offset = "0x5729B8")]
	public class BuildShapeExtrusion : CGModule
	{
		[Token(Token = "0x200038B")]
		public enum ScaleModeEnum
		{
			[Token(Token = "0x4000EF6")]
			Simple,
			[Token(Token = "0x4000EF7")]
			Advanced
		}

		[Token(Token = "0x200038C")]
		public enum CrossShiftModeEnum
		{
			[Token(Token = "0x4000EF9")]
			None,
			[Token(Token = "0x4000EFA")]
			ByOrientation,
			[Token(Token = "0x4000EFB")]
			Custom
		}

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x572A38", Offset = "0x572A38")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x572AEC", Offset = "0x572AEC")]
		public CGModuleInputSlot InCross;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x572BA0", Offset = "0x572BA0")]
		public CGModuleOutputSlot OutVolume;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x572C14", Offset = "0x572C14")]
		public CGModuleOutputSlot OutVolumeHollow;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x572C88", Offset = "0x572C88")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x572D08", Offset = "0x572D08")]
		private int m_Resolution;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x572DA0", Offset = "0x572DA0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x572DA0", Offset = "0x572DA0")]
		private float m_AngleThreshold;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x572EB4", Offset = "0x572EB4")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x572EB4", Offset = "0x572EB4")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x572F60", Offset = "0x572F60")]
		private int m_CrossResolution;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x572FE0", Offset = "0x572FE0")]
		private bool m_CrossOptimize;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x573040", Offset = "0x573040")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x573040", Offset = "0x573040")]
		private float m_CrossAngleThreshold;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573154", Offset = "0x573154")]
		private bool m_CrossIncludeControlpoints;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5731B4", Offset = "0x5731B4")]
		private bool m_CrossHardEdges;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573214", Offset = "0x573214")]
		private bool m_CrossMaterials;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573274", Offset = "0x573274")]
		private bool m_CrossExtendedUV;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5732D4", Offset = "0x5732D4")]
		private CrossShiftModeEnum m_CrossShiftMode;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x573348", Offset = "0x573348")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x573348", Offset = "0x573348")]
		private float m_CrossShiftValue;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57344C", Offset = "0x57344C")]
		[SerializeField]
		private bool m_CrossReverseNormals;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x5734B4", Offset = "0x5734B4")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5734B4", Offset = "0x5734B4")]
		[SerializeField]
		private ScaleModeEnum m_ScaleMode;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x573540", Offset = "0x573540")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573540", Offset = "0x573540")]
		[SerializeField]
		private CGReferenceMode m_ScaleReference;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x573634", Offset = "0x573634")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573634", Offset = "0x573634")]
		[SerializeField]
		private float m_ScaleOffset;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573728", Offset = "0x573728")]
		private bool m_ScaleUniform;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private float m_ScaleX;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5737AC", Offset = "0x5737AC")]
		private float m_ScaleY;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57385C", Offset = "0x57385C")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0x57385C", Offset = "0x57385C")]
		private AnimationCurve m_ScaleCurveX;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x573950", Offset = "0x573950")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0x573950", Offset = "0x573950")]
		private AnimationCurve m_ScaleCurveY;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x573A80", Offset = "0x573A80")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x573A80", Offset = "0x573A80")]
		[SerializeField]
		private float m_HollowInset;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x573B2C", Offset = "0x573B2C")]
		[SerializeField]
		private bool m_HollowReverseNormals;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573B94", Offset = "0x573B94")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x573B94", Offset = "0x573B94")]
		private int <PathSamples>k__BackingField;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573BD0", Offset = "0x573BD0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x573BD0", Offset = "0x573BD0")]
		private int <CrossSamples>k__BackingField;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573C0C", Offset = "0x573C0C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x573C0C", Offset = "0x573C0C")]
		private int <CrossGroups>k__BackingField;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573C48", Offset = "0x573C48")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x573C48", Offset = "0x573C48")]
		private Vector3 <CrossPosition>k__BackingField;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573C84", Offset = "0x573C84")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x573C84", Offset = "0x573C84")]
		private Quaternion <CrossRotation>k__BackingField;

		[Token(Token = "0x170001B2")]
		public float From
		{
			[Token(Token = "0x600161A")]
			[Address(RVA = "0x850114", Offset = "0x850114", VA = "0x850114")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600161B")]
			[Address(RVA = "0x85011C", Offset = "0x85011C", VA = "0x85011C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public float To
		{
			[Token(Token = "0x600161C")]
			[Address(RVA = "0x8501B4", Offset = "0x8501B4", VA = "0x8501B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600161D")]
			[Address(RVA = "0x8501BC", Offset = "0x8501BC", VA = "0x8501BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public float Length
		{
			[Token(Token = "0x600161E")]
			[Address(RVA = "0x85038C", Offset = "0x85038C", VA = "0x85038C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600161F")]
			[Address(RVA = "0x8503BC", Offset = "0x8503BC", VA = "0x8503BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public int Resolution
		{
			[Token(Token = "0x6001620")]
			[Address(RVA = "0x85040C", Offset = "0x85040C", VA = "0x85040C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001621")]
			[Address(RVA = "0x850414", Offset = "0x850414", VA = "0x850414")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public bool Optimize
		{
			[Token(Token = "0x6001622")]
			[Address(RVA = "0x8504B0", Offset = "0x8504B0", VA = "0x8504B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001623")]
			[Address(RVA = "0x8504B8", Offset = "0x8504B8", VA = "0x8504B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		public float AngleThreshold
		{
			[Token(Token = "0x6001624")]
			[Address(RVA = "0x8504DC", Offset = "0x8504DC", VA = "0x8504DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001625")]
			[Address(RVA = "0x8504E4", Offset = "0x8504E4", VA = "0x8504E4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public float CrossFrom
		{
			[Token(Token = "0x6001626")]
			[Address(RVA = "0x850588", Offset = "0x850588", VA = "0x850588")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001627")]
			[Address(RVA = "0x850590", Offset = "0x850590", VA = "0x850590")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public float CrossTo
		{
			[Token(Token = "0x6001628")]
			[Address(RVA = "0x850628", Offset = "0x850628", VA = "0x850628")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001629")]
			[Address(RVA = "0x850630", Offset = "0x850630", VA = "0x850630")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public float CrossLength
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0x850800", Offset = "0x850800", VA = "0x850800")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600162B")]
			[Address(RVA = "0x850830", Offset = "0x850830", VA = "0x850830")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public int CrossResolution
		{
			[Token(Token = "0x600162C")]
			[Address(RVA = "0x850880", Offset = "0x850880", VA = "0x850880")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600162D")]
			[Address(RVA = "0x850888", Offset = "0x850888", VA = "0x850888")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public bool CrossOptimize
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0x850924", Offset = "0x850924", VA = "0x850924")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600162F")]
			[Address(RVA = "0x85092C", Offset = "0x85092C", VA = "0x85092C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public float CrossAngleThreshold
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0x850950", Offset = "0x850950", VA = "0x850950")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001631")]
			[Address(RVA = "0x850958", Offset = "0x850958", VA = "0x850958")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public bool CrossIncludeControlPoints
		{
			[Token(Token = "0x6001632")]
			[Address(RVA = "0x8509FC", Offset = "0x8509FC", VA = "0x8509FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001633")]
			[Address(RVA = "0x850A04", Offset = "0x850A04", VA = "0x850A04")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public bool CrossHardEdges
		{
			[Token(Token = "0x6001634")]
			[Address(RVA = "0x850A28", Offset = "0x850A28", VA = "0x850A28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001635")]
			[Address(RVA = "0x850A30", Offset = "0x850A30", VA = "0x850A30")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public bool CrossMaterials
		{
			[Token(Token = "0x6001636")]
			[Address(RVA = "0x850A54", Offset = "0x850A54", VA = "0x850A54")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001637")]
			[Address(RVA = "0x850A5C", Offset = "0x850A5C", VA = "0x850A5C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public bool CrossExtendedUV
		{
			[Token(Token = "0x6001638")]
			[Address(RVA = "0x850A80", Offset = "0x850A80", VA = "0x850A80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001639")]
			[Address(RVA = "0x850A88", Offset = "0x850A88", VA = "0x850A88")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public CrossShiftModeEnum CrossShiftMode
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0x850AAC", Offset = "0x850AAC", VA = "0x850AAC")]
			get
			{
				return default(CrossShiftModeEnum);
			}
			[Token(Token = "0x600163B")]
			[Address(RVA = "0x850AB4", Offset = "0x850AB4", VA = "0x850AB4")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public float CrossShiftValue
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0x850ACC", Offset = "0x850ACC", VA = "0x850ACC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600163D")]
			[Address(RVA = "0x850AD4", Offset = "0x850AD4", VA = "0x850AD4")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		private bool CrossReverseNormals
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0x850B6C", Offset = "0x850B6C", VA = "0x850B6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600163F")]
			[Address(RVA = "0x850B74", Offset = "0x850B74", VA = "0x850B74")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public ScaleModeEnum ScaleMode
		{
			[Token(Token = "0x6001640")]
			[Address(RVA = "0x850B98", Offset = "0x850B98", VA = "0x850B98")]
			get
			{
				return default(ScaleModeEnum);
			}
			[Token(Token = "0x6001641")]
			[Address(RVA = "0x850BA0", Offset = "0x850BA0", VA = "0x850BA0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public CGReferenceMode ScaleReference
		{
			[Token(Token = "0x6001642")]
			[Address(RVA = "0x850BB8", Offset = "0x850BB8", VA = "0x850BB8")]
			get
			{
				return default(CGReferenceMode);
			}
			[Token(Token = "0x6001643")]
			[Address(RVA = "0x850BC0", Offset = "0x850BC0", VA = "0x850BC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public bool ScaleUniform
		{
			[Token(Token = "0x6001644")]
			[Address(RVA = "0x850BD8", Offset = "0x850BD8", VA = "0x850BD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001645")]
			[Address(RVA = "0x850BE0", Offset = "0x850BE0", VA = "0x850BE0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public float ScaleOffset
		{
			[Token(Token = "0x6001646")]
			[Address(RVA = "0x850C04", Offset = "0x850C04", VA = "0x850C04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001647")]
			[Address(RVA = "0x850C0C", Offset = "0x850C0C", VA = "0x850C0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public float ScaleX
		{
			[Token(Token = "0x6001648")]
			[Address(RVA = "0x850C24", Offset = "0x850C24", VA = "0x850C24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001649")]
			[Address(RVA = "0x850C2C", Offset = "0x850C2C", VA = "0x850C2C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public float ScaleY
		{
			[Token(Token = "0x600164A")]
			[Address(RVA = "0x850C44", Offset = "0x850C44", VA = "0x850C44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600164B")]
			[Address(RVA = "0x850C4C", Offset = "0x850C4C", VA = "0x850C4C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		private float HollowInset
		{
			[Token(Token = "0x600164C")]
			[Address(RVA = "0x850C64", Offset = "0x850C64", VA = "0x850C64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600164D")]
			[Address(RVA = "0x850C6C", Offset = "0x850C6C", VA = "0x850C6C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		private bool HollowReverseNormals
		{
			[Token(Token = "0x600164E")]
			[Address(RVA = "0x850D00", Offset = "0x850D00", VA = "0x850D00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600164F")]
			[Address(RVA = "0x850D08", Offset = "0x850D08", VA = "0x850D08")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public int PathSamples
		{
			[Token(Token = "0x6001650")]
			[Address(RVA = "0x850D2C", Offset = "0x850D2C", VA = "0x850D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573CC0", Offset = "0x573CC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001651")]
			[Address(RVA = "0x850D34", Offset = "0x850D34", VA = "0x850D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573CD0", Offset = "0x573CD0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public int CrossSamples
		{
			[Token(Token = "0x6001652")]
			[Address(RVA = "0x850D3C", Offset = "0x850D3C", VA = "0x850D3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573CE0", Offset = "0x573CE0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001653")]
			[Address(RVA = "0x850D44", Offset = "0x850D44", VA = "0x850D44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573CF0", Offset = "0x573CF0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public int CrossGroups
		{
			[Token(Token = "0x6001654")]
			[Address(RVA = "0x850D4C", Offset = "0x850D4C", VA = "0x850D4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D00", Offset = "0x573D00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001655")]
			[Address(RVA = "0x850D54", Offset = "0x850D54", VA = "0x850D54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D10", Offset = "0x573D10")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public IExternalInput Cross
		{
			[Token(Token = "0x6001656")]
			[Address(RVA = "0x850D5C", Offset = "0x850D5C", VA = "0x850D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		public Vector3 CrossPosition
		{
			[Token(Token = "0x6001657")]
			[Address(RVA = "0x850DC0", Offset = "0x850DC0", VA = "0x850DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D20", Offset = "0x573D20")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001658")]
			[Address(RVA = "0x850DD0", Offset = "0x850DD0", VA = "0x850DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D30", Offset = "0x573D30")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public Quaternion CrossRotation
		{
			[Token(Token = "0x6001659")]
			[Address(RVA = "0x850DE0", Offset = "0x850DE0", VA = "0x850DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D40", Offset = "0x573D40")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600165A")]
			[Address(RVA = "0x850DF4", Offset = "0x850DF4", VA = "0x850DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x573D50", Offset = "0x573D50")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		private bool ClampPath
		{
			[Token(Token = "0x600165B")]
			[Address(RVA = "0x850280", Offset = "0x850280", VA = "0x850280")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D4")]
		private bool ClampCross
		{
			[Token(Token = "0x600165C")]
			[Address(RVA = "0x8506F4", Offset = "0x8506F4", VA = "0x8506F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D5")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x600165D")]
			[Address(RVA = "0x850E08", Offset = "0x850E08", VA = "0x850E08")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170001D6")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x600165E")]
			[Address(RVA = "0x850EC8", Offset = "0x850EC8", VA = "0x850EC8")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x84FFB8", Offset = "0x84FFB8", VA = "0x84FFB8")]
		public BuildShapeExtrusion()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0x850F88", Offset = "0x850F88", VA = "0x850F88", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0x850FD0", Offset = "0x850FD0", VA = "0x850FD0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x851178", Offset = "0x851178", VA = "0x851178", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x8528DC", Offset = "0x8528DC", VA = "0x8528DC")]
		public Vector3 GetScale(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x8527E4", Offset = "0x8527E4", VA = "0x8527E4")]
		private void getScaleInternal(float f, Vector3 baseScale, ref Vector3 scale)
		{
		}
	}
	[Token(Token = "0x200038D")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x573D60", Offset = "0x573D60")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x573D60", Offset = "0x573D60")]
	public class BuildVolumeCaps : CGModule
	{
		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x573DE0", Offset = "0x573DE0")]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x573E7C", Offset = "0x573E7C")]
		public CGModuleInputSlot InVolumeHoles;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x573F34", Offset = "0x573F34")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x573FB4", Offset = "0x573FB4")]
		[SerializeField]
		private CGYesNoAuto m_StartCap;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private CGYesNoAuto m_EndCap;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x574010", Offset = "0x574010")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x57406C", Offset = "0x57406C")]
		[Inline]
		[SerializeField]
		private CGMaterialSettings m_StartMaterialSettings;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5740C8", Offset = "0x5740C8")]
		[SerializeField]
		private Material m_StartMaterial;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x574130", Offset = "0x574130")]
		[SerializeField]
		private bool m_CloneStartCap;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0x57417C", Offset = "0x57417C")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x57417C", Offset = "0x57417C")]
		[SerializeField]
		private CGMaterialSettings m_EndMaterialSettings;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x574248", Offset = "0x574248")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x574248", Offset = "0x574248")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x574248", Offset = "0x574248")]
		[SerializeField]
		private Material m_EndMaterial;

		[Token(Token = "0x170001D7")]
		public bool GenerateUV
		{
			[Token(Token = "0x6001665")]
			[Address(RVA = "0x852ACC", Offset = "0x852ACC", VA = "0x852ACC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001666")]
			[Address(RVA = "0x852AD4", Offset = "0x852AD4", VA = "0x852AD4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6001667")]
			[Address(RVA = "0x852AF8", Offset = "0x852AF8", VA = "0x852AF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001668")]
			[Address(RVA = "0x852B00", Offset = "0x852B00", VA = "0x852B00")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public CGYesNoAuto StartCap
		{
			[Token(Token = "0x6001669")]
			[Address(RVA = "0x852B24", Offset = "0x852B24", VA = "0x852B24")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600166A")]
			[Address(RVA = "0x852B2C", Offset = "0x852B2C", VA = "0x852B2C")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public Material StartMaterial
		{
			[Token(Token = "0x600166B")]
			[Address(RVA = "0x852B44", Offset = "0x852B44", VA = "0x852B44")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166C")]
			[Address(RVA = "0x852B4C", Offset = "0x852B4C", VA = "0x852B4C")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public CGMaterialSettings StartMaterialSettings
		{
			[Token(Token = "0x600166D")]
			[Address(RVA = "0x852BE0", Offset = "0x852BE0", VA = "0x852BE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		public CGYesNoAuto EndCap
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0x852BE8", Offset = "0x852BE8", VA = "0x852BE8")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600166F")]
			[Address(RVA = "0x852BF0", Offset = "0x852BF0", VA = "0x852BF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public bool CloneStartCap
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0x852C08", Offset = "0x852C08", VA = "0x852C08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001671")]
			[Address(RVA = "0x852C10", Offset = "0x852C10", VA = "0x852C10")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public CGMaterialSettings EndMaterialSettings
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0x852C34", Offset = "0x852C34", VA = "0x852C34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		public Material EndMaterial
		{
			[Token(Token = "0x6001673")]
			[Address(RVA = "0x852C3C", Offset = "0x852C3C", VA = "0x852C3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001674")]
			[Address(RVA = "0x852C44", Offset = "0x852C44", VA = "0x852C44")]
			set
			{
			}
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x8529E8", Offset = "0x8529E8", VA = "0x8529E8")]
		public BuildVolumeCaps()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x852CD8", Offset = "0x852CD8", VA = "0x852CD8", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x852DD4", Offset = "0x852DD4", VA = "0x852DD4", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x852EC8", Offset = "0x852EC8", VA = "0x852EC8", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x853B00", Offset = "0x853B00", VA = "0x853B00")]
		private Matrix4x4 getMat(CGVolume vol, int index, bool inverse)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0x854190", Offset = "0x854190", VA = "0x854190")]
		private void flipTris(ref int[] indices, int start, int end)
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x853EAC", Offset = "0x853EAC", VA = "0x853EAC")]
		private Vector3[] applyMat(Vector3[] vt, Matrix4x4 mat, out Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x853940", Offset = "0x853940", VA = "0x853940")]
		private ContourVertex[] make2DSegment(CGVolume vol, int index)
		{
			return null;
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x854298", Offset = "0x854298", VA = "0x854298")]
		private void applyUV(Vector3[] vts, ref Vector2[] uvArray, int index, int count, CGMaterialSettings mat, Bounds bounds)
		{
		}
	}
	[Token(Token = "0x200038E")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x57435C", Offset = "0x57435C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57435C", Offset = "0x57435C")]
	public class BuildVolumeMesh : CGModule
	{
		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x5743DC", Offset = "0x5743DC")]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x574478", Offset = "0x574478")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x5744F8", Offset = "0x5744F8")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		[SerializeField]
		private bool m_Split;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Positive]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x574554", Offset = "0x574554")]
		[SerializeField]
		private float m_SplitLength;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x57462C", Offset = "0x57462C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57462C", Offset = "0x57462C")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private List<CGMaterialSettingsEx> m_MaterialSettings;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private Material[] m_Material;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<SamplePointsMaterialGroupCollection> groupsByMatID;

		[Token(Token = "0x170001E0")]
		public bool GenerateUV
		{
			[Token(Token = "0x600167E")]
			[Address(RVA = "0x854838", Offset = "0x854838", VA = "0x854838")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600167F")]
			[Address(RVA = "0x854840", Offset = "0x854840", VA = "0x854840")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6001680")]
			[Address(RVA = "0x854864", Offset = "0x854864", VA = "0x854864")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001681")]
			[Address(RVA = "0x85486C", Offset = "0x85486C", VA = "0x85486C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public bool Split
		{
			[Token(Token = "0x6001682")]
			[Address(RVA = "0x854890", Offset = "0x854890", VA = "0x854890")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001683")]
			[Address(RVA = "0x854898", Offset = "0x854898", VA = "0x854898")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public float SplitLength
		{
			[Token(Token = "0x6001684")]
			[Address(RVA = "0x8548BC", Offset = "0x8548BC", VA = "0x8548BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001685")]
			[Address(RVA = "0x8548C4", Offset = "0x8548C4", VA = "0x8548C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public List<CGMaterialSettingsEx> MaterialSetttings
		{
			[Token(Token = "0x6001686")]
			[Address(RVA = "0x85495C", Offset = "0x85495C", VA = "0x85495C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E5")]
		public int MaterialCount
		{
			[Token(Token = "0x6001687")]
			[Address(RVA = "0x854964", Offset = "0x854964", VA = "0x854964")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x85475C", Offset = "0x85475C", VA = "0x85475C")]
		public BuildVolumeMesh()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x8549C0", Offset = "0x8549C0", VA = "0x8549C0", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x854AC0", Offset = "0x854AC0", VA = "0x854AC0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x854C98", Offset = "0x854C98", VA = "0x854C98", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x8549FC", Offset = "0x8549FC", VA = "0x8549FC")]
		public int AddMaterial()
		{
			return default(int);
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x8556F0", Offset = "0x8556F0", VA = "0x8556F0")]
		public void RemoveMaterial(int index)
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x855864", Offset = "0x855864", VA = "0x855864")]
		public void SetMaterial(int index, Material mat)
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x855A00", Offset = "0x855A00", VA = "0x855A00")]
		public Material GetMaterial(int index)
		{
			return null;
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x8551A0", Offset = "0x8551A0", VA = "0x8551A0")]
		private void prepare(CGVolume vol)
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x8551C4", Offset = "0x8551C4", VA = "0x8551C4")]
		private void build(CGVMesh vmesh, CGVolume vol, IntRegion subset)
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x855DE8", Offset = "0x855DE8", VA = "0x855DE8")]
		private void prepareSubMeshes(CGVMesh vmesh, List<SamplePointsMaterialGroupCollection> groupsBySubMeshes, int extrusions, ref Material[] materials)
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x856064", Offset = "0x856064", VA = "0x856064")]
		private void createMaterialGroupUV(ref CGVMesh vmesh, ref CGVolume vol, ref SamplePointsMaterialGroup grp, int matIndex, float grpAspectCorrection, int sample, int baseVertex)
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x8562A4", Offset = "0x8562A4", VA = "0x8562A4")]
		private int createPatchTriangles(ref int[] triangles, ref int triIdx, int curVTIndex, int patchSize, int crossSize, bool reverse)
		{
			return default(int);
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x855A68", Offset = "0x855A68", VA = "0x855A68")]
		private List<SamplePointsMaterialGroupCollection> getMaterialIDGroups(CGVolume volume)
		{
			return null;
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x8557A8", Offset = "0x8557A8", VA = "0x8557A8")]
		private bool validateMaterialIndex(int index)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200038F")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x574710", Offset = "0x574710")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x574710", Offset = "0x574710")]
	public class BuildVolumeSpots : CGModule
	{
		[Token(Token = "0x2000390")]
		private class GroupSet
		{
			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGBoundsGroup Group;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Length;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<int> Items;

			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<float> Distances;

			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x85879C", Offset = "0x85879C", VA = "0x85879C")]
			public GroupSet()
			{
			}
		}

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x574798", Offset = "0x574798")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x57484C", Offset = "0x57484C")]
		public CGModuleInputSlot InBounds;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x574900", Offset = "0x574900")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x574974", Offset = "0x574974")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool m_UseVolume;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5749FC", Offset = "0x5749FC")]
		[SerializeField]
		private bool m_Simulate;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x574A48", Offset = "0x574A48")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x574A48", Offset = "0x574A48")]
		private float m_CrossBase;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private AnimationCurve m_CrossCurve;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x574AF8", Offset = "0x574AF8")]
		[ArrayEx]
		[SerializeField]
		private List<CGBoundsGroup> m_Groups;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[IntRegion]
		[SerializeField]
		private IntRegion m_RepeatingGroups;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private bool m_FitEnd;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574BD8", Offset = "0x574BD8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x574BD8", Offset = "0x574BD8")]
		private int <Count>k__BackingField;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public CGSpots SimulatedSpots;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private WeightedRandom<int> mGroupBag;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<CGBounds> mBounds;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool mGroupsHaveDepth;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574C14", Offset = "0x574C14")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x574C14", Offset = "0x574C14")]
		private CGPath <Path>k__BackingField;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574C50", Offset = "0x574C50")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x574C50", Offset = "0x574C50")]
		private float <StartDistance>k__BackingField;

		[Token(Token = "0x170001E6")]
		public FloatRegion Range
		{
			[Token(Token = "0x6001697")]
			[Address(RVA = "0x8565B4", Offset = "0x8565B4", VA = "0x8565B4")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6001698")]
			[Address(RVA = "0x8565C4", Offset = "0x8565C4", VA = "0x8565C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public bool UseVolume
		{
			[Token(Token = "0x6001699")]
			[Address(RVA = "0x856628", Offset = "0x856628", VA = "0x856628")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600169A")]
			[Address(RVA = "0x856630", Offset = "0x856630", VA = "0x856630")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public bool Simulate
		{
			[Token(Token = "0x600169B")]
			[Address(RVA = "0x856654", Offset = "0x856654", VA = "0x856654")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600169C")]
			[Address(RVA = "0x85665C", Offset = "0x85665C", VA = "0x85665C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public float CrossBase
		{
			[Token(Token = "0x600169D")]
			[Address(RVA = "0x856680", Offset = "0x856680", VA = "0x856680")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600169E")]
			[Address(RVA = "0x856688", Offset = "0x856688", VA = "0x856688")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public AnimationCurve CrossCurve
		{
			[Token(Token = "0x600169F")]
			[Address(RVA = "0x856720", Offset = "0x856720", VA = "0x856720")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016A0")]
			[Address(RVA = "0x856728", Offset = "0x856728", VA = "0x856728")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public List<CGBoundsGroup> Groups
		{
			[Token(Token = "0x60016A1")]
			[Address(RVA = "0x856740", Offset = "0x856740", VA = "0x856740")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016A2")]
			[Address(RVA = "0x856748", Offset = "0x856748", VA = "0x856748")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x60016A3")]
			[Address(RVA = "0x85675C", Offset = "0x85675C", VA = "0x85675C")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x60016A4")]
			[Address(RVA = "0x856764", Offset = "0x856764", VA = "0x856764")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public int FirstRepeating
		{
			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x85677C", Offset = "0x85677C", VA = "0x85677C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x856784", Offset = "0x856784", VA = "0x856784")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public int LastRepeating
		{
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x8568A0", Offset = "0x8568A0", VA = "0x8568A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x8568A8", Offset = "0x8568A8", VA = "0x8568A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public bool FitEnd
		{
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x85696C", Offset = "0x85696C", VA = "0x85696C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x856974", Offset = "0x856974", VA = "0x856974")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public int GroupCount
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x856844", Offset = "0x856844", VA = "0x856844")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F1")]
		public GUIContent[] BoundsNames
		{
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x856998", Offset = "0x856998", VA = "0x856998")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F2")]
		public int[] BoundsIndices
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x856BAC", Offset = "0x856BAC", VA = "0x856BAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		public int Count
		{
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x856CC0", Offset = "0x856CC0", VA = "0x856CC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574C8C", Offset = "0x574C8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x856CC8", Offset = "0x856CC8", VA = "0x856CC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574C9C", Offset = "0x574C9C")]
			private set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		private int lastGroupIndex
		{
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x856CD0", Offset = "0x856CD0", VA = "0x856CD0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F5")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x856D50", Offset = "0x856D50", VA = "0x856D50")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170001F6")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x856DAC", Offset = "0x856DAC", VA = "0x856DAC")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x170001F7")]
		private CGPath Path
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x856E58", Offset = "0x856E58", VA = "0x856E58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574CAC", Offset = "0x574CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x856E60", Offset = "0x856E60", VA = "0x856E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574CBC", Offset = "0x574CBC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		private CGVolume Volume
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x856E68", Offset = "0x856E68", VA = "0x856E68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		private bool UsePath
		{
			[Token(Token = "0x60016B6")]
			[Address(RVA = "0x856EEC", Offset = "0x856EEC", VA = "0x856EEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FA")]
		private float Length
		{
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x856F24", Offset = "0x856F24", VA = "0x856F24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FB")]
		private float StartDistance
		{
			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x856F60", Offset = "0x856F60", VA = "0x856F60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574CCC", Offset = "0x574CCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x856F68", Offset = "0x856F68", VA = "0x856F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x574CDC", Offset = "0x574CDC")]
			set
			{
			}
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x8564B0", Offset = "0x8564B0", VA = "0x8564B0")]
		public BuildVolumeSpots()
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x856F70", Offset = "0x856F70", VA = "0x856F70", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x856FA4", Offset = "0x856FA4", VA = "0x856FA4", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x85719C", Offset = "0x85719C", VA = "0x85719C", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x8571E4", Offset = "0x8571E4", VA = "0x8571E4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x8572CC", Offset = "0x8572CC", VA = "0x8572CC", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x857100", Offset = "0x857100", VA = "0x857100")]
		public CGBoundsGroup AddGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x858724", Offset = "0x858724", VA = "0x858724")]
		public void RemoveGroup(CGBoundsGroup group)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x857A90", Offset = "0x857A90", VA = "0x857A90")]
		private GroupSet addGroupItems(CGBoundsGroup group, ref List<CGSpot> spots, ref float remainingLength, ref float currentDistance, bool calcLengthOnly = false)
		{
			return null;
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x85848C", Offset = "0x85848C", VA = "0x85848C")]
		private void rebase(ref List<CGSpot> spots, ref List<GroupSet> sets, float currentDistance, float remainingLength)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x8588DC", Offset = "0x8588DC", VA = "0x8588DC")]
		private CGSpot getSpot(int itemID, ref CGBoundsGroup group, ref CGBounds bounds, float startDist, float remainingDistance)
		{
			return default(CGSpot);
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x857884", Offset = "0x857884", VA = "0x857884")]
		private void prepare()
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x8590F0", Offset = "0x8590F0", VA = "0x8590F0")]
		private float getMinGroupDepth(CGBoundsGroup group)
		{
			return default(float);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x858834", Offset = "0x858834", VA = "0x858834")]
		private CGBounds getItemBounds(int itemIndex)
		{
			return null;
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x859004", Offset = "0x859004", VA = "0x859004")]
		private float getCrossValue(float globalF, CGBoundsGroup group)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000391")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x574CEC", Offset = "0x574CEC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x574CEC", Offset = "0x574CEC")]
	public class ConformPath : CGModule, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x574D6C", Offset = "0x574D6C")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x574E30", Offset = "0x574E30")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x574EA4", Offset = "0x574EA4")]
		private Vector3 m_Direction;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float m_MaxDistance;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_Offset;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool m_Warp;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private LayerMask m_LayerMask;

		[Token(Token = "0x170001FC")]
		public Vector3 Direction
		{
			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x859340", Offset = "0x859340", VA = "0x859340")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x85934C", Offset = "0x85934C", VA = "0x85934C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public float MaxDistance
		{
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x859410", Offset = "0x859410", VA = "0x859410")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x859418", Offset = "0x859418", VA = "0x859418")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public float Offset
		{
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x859430", Offset = "0x859430", VA = "0x859430")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016CF")]
			[Address(RVA = "0x859438", Offset = "0x859438", VA = "0x859438")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public bool Warp
		{
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x859450", Offset = "0x859450", VA = "0x859450")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x859458", Offset = "0x859458", VA = "0x859458")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public LayerMask LayerMask
		{
			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x85947C", Offset = "0x85947C", VA = "0x85947C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x859484", Offset = "0x859484", VA = "0x859484")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public float PathLength
		{
			[Token(Token = "0x60016D6")]
			[Address(RVA = "0x8595EC", Offset = "0x8595EC", VA = "0x8595EC", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016D7")]
			[Address(RVA = "0x859748", Offset = "0x859748", VA = "0x859748", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x859280", Offset = "0x859280", VA = "0x859280")]
		public ConformPath()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x8594E8", Offset = "0x8594E8", VA = "0x8594E8", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x85951C", Offset = "0x85951C", VA = "0x85951C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x85984C", Offset = "0x85984C", VA = "0x85984C", Slot = "17")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x8599AC", Offset = "0x8599AC", VA = "0x8599AC")]
		public static CGPath Conform(Transform refTransform, CGPath path, LayerMask layers, Vector3 dir, float offset, float rayLength, bool warp)
		{
			return null;
		}
	}
	[Token(Token = "0x2000392")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x574F5C", Offset = "0x574F5C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x574F5C", Offset = "0x574F5C")]
	public class CreateGameObject : CGModule
	{
		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x574FCC", Offset = "0x574FCC")]
		public CGModuleInputSlot InGameObjectArray;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x575090", Offset = "0x575090")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0x575144", Offset = "0x575144")]
		private CGGameObjectResourceCollection m_Resources;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x57519C", Offset = "0x57519C")]
		[SerializeField]
		private bool m_MakeStatic;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0x5751E8", Offset = "0x5751E8")]
		private int m_Layer;

		[Token(Token = "0x17000203")]
		public int Layer
		{
			[Token(Token = "0x60016DB")]
			[Address(RVA = "0x859F04", Offset = "0x859F04", VA = "0x859F04")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016DC")]
			[Address(RVA = "0x859F0C", Offset = "0x859F0C", VA = "0x859F0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public bool MakeStatic
		{
			[Token(Token = "0x60016DD")]
			[Address(RVA = "0x859FA8", Offset = "0x859FA8", VA = "0x859FA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016DE")]
			[Address(RVA = "0x859FB0", Offset = "0x859FB0", VA = "0x859FB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public CGGameObjectResourceCollection GameObjects
		{
			[Token(Token = "0x60016DF")]
			[Address(RVA = "0x859FD4", Offset = "0x859FD4", VA = "0x859FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public int GameObjectCount
		{
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0x859FDC", Offset = "0x859FDC", VA = "0x859FDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x859E64", Offset = "0x859E64", VA = "0x859E64")]
		public CreateGameObject()
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x85A004", Offset = "0x85A004", VA = "0x85A004", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x85A194", Offset = "0x85A194", VA = "0x85A194", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x85A1D0", Offset = "0x85A1D0", VA = "0x85A1D0", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x85A04C", Offset = "0x85A04C", VA = "0x85A04C")]
		public void Clear()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x85A1D4", Offset = "0x85A1D4", VA = "0x85A1D4", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x85A21C", Offset = "0x85A21C", VA = "0x85A21C", Slot = "11")]
		public override void Refresh()
		{
		}
	}
	[Token(Token = "0x2000393")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x575250", Offset = "0x575250")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x575250", Offset = "0x575250")]
	public class CreateMesh : CGModule
	{
		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x5752C0", Offset = "0x5752C0")]
		public CGModuleInputSlot InVMeshArray;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x575384", Offset = "0x575384")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0x575448", Offset = "0x575448")]
		private CGMeshResourceCollection m_MeshResources;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x5754A0", Offset = "0x5754A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5754A0", Offset = "0x5754A0")]
		[SerializeField]
		private bool m_Combine;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x575510", Offset = "0x575510")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x575510", Offset = "0x575510")]
		[SerializeField]
		private bool m_GroupMeshes;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private CGYesNoAuto m_AddNormals;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private CGYesNoAuto m_AddTangents;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool m_AddUV2;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		[SerializeField]
		private bool m_MakeStatic;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0x575638", Offset = "0x575638")]
		private int m_Layer;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x5756A0", Offset = "0x5756A0")]
		[SerializeField]
		private ShadowCastingMode m_CastShadows;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private bool m_ReceiveShadows;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private LightProbeUsage m_LightProbeUsage;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		private bool m_UseLightProbes;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private ReflectionProbeUsage m_ReflectionProbes;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Transform m_AnchorOverride;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x575764", Offset = "0x575764")]
		[SerializeField]
		private CGColliderEnum m_Collider;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5757B0", Offset = "0x5757B0")]
		[SerializeField]
		private bool m_Convex;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57586C", Offset = "0x57586C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57586C", Offset = "0x57586C")]
		[SerializeField]
		private bool m_AutoUpdateColliders;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x575964", Offset = "0x575964")]
		[SerializeField]
		private PhysicMaterial m_Material;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575A24", Offset = "0x575A24")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x575A24", Offset = "0x575A24")]
		private int <VertexCount>k__BackingField;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int mCurrentMeshCount;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575A60", Offset = "0x575A60")]
		private static Comparison<CGSpot> <>f__am$cache0;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575A70", Offset = "0x575A70")]
		private static Comparison<CGVMesh> <>f__am$cache1;

		[Token(Token = "0x17000207")]
		public bool Combine
		{
			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x85ABC8", Offset = "0x85ABC8", VA = "0x85ABC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016E9")]
			[Address(RVA = "0x85ABD0", Offset = "0x85ABD0", VA = "0x85ABD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public bool GroupMeshes
		{
			[Token(Token = "0x60016EA")]
			[Address(RVA = "0x85ABF4", Offset = "0x85ABF4", VA = "0x85ABF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016EB")]
			[Address(RVA = "0x85ABFC", Offset = "0x85ABFC", VA = "0x85ABFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public CGYesNoAuto AddNormals
		{
			[Token(Token = "0x60016EC")]
			[Address(RVA = "0x85AC20", Offset = "0x85AC20", VA = "0x85AC20")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x60016ED")]
			[Address(RVA = "0x85AC28", Offset = "0x85AC28", VA = "0x85AC28")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public CGYesNoAuto AddTangents
		{
			[Token(Token = "0x60016EE")]
			[Address(RVA = "0x85AC40", Offset = "0x85AC40", VA = "0x85AC40")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x85AC48", Offset = "0x85AC48", VA = "0x85AC48")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public bool AddUV2
		{
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x85AC60", Offset = "0x85AC60", VA = "0x85AC60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F1")]
			[Address(RVA = "0x85AC68", Offset = "0x85AC68", VA = "0x85AC68")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public int Layer
		{
			[Token(Token = "0x60016F2")]
			[Address(RVA = "0x85AC8C", Offset = "0x85AC8C", VA = "0x85AC8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x85AC94", Offset = "0x85AC94", VA = "0x85AC94")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public bool MakeStatic
		{
			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x85AD30", Offset = "0x85AD30", VA = "0x85AD30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x85AD38", Offset = "0x85AD38", VA = "0x85AD38")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public ShadowCastingMode CastShadows
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x85AD5C", Offset = "0x85AD5C", VA = "0x85AD5C")]
			get
			{
				return default(ShadowCastingMode);
			}
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x85AD64", Offset = "0x85AD64", VA = "0x85AD64")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public bool ReceiveShadows
		{
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x85AD7C", Offset = "0x85AD7C", VA = "0x85AD7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x85AD84", Offset = "0x85AD84", VA = "0x85AD84")]
			set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public bool UseLightProbes
		{
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x85ADA8", Offset = "0x85ADA8", VA = "0x85ADA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x85ADB0", Offset = "0x85ADB0", VA = "0x85ADB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public LightProbeUsage LightProbeUsage
		{
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x85ADD4", Offset = "0x85ADD4", VA = "0x85ADD4")]
			get
			{
				return default(LightProbeUsage);
			}
			[Token(Token = "0x60016FD")]
			[Address(RVA = "0x85ADDC", Offset = "0x85ADDC", VA = "0x85ADDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public ReflectionProbeUsage ReflectionProbes
		{
			[Token(Token = "0x60016FE")]
			[Address(RVA = "0x85ADF4", Offset = "0x85ADF4", VA = "0x85ADF4")]
			get
			{
				return default(ReflectionProbeUsage);
			}
			[Token(Token = "0x60016FF")]
			[Address(RVA = "0x85ADFC", Offset = "0x85ADFC", VA = "0x85ADFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public Transform AnchorOverride
		{
			[Token(Token = "0x6001700")]
			[Address(RVA = "0x85AE14", Offset = "0x85AE14", VA = "0x85AE14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001701")]
			[Address(RVA = "0x85AE1C", Offset = "0x85AE1C", VA = "0x85AE1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public CGColliderEnum Collider
		{
			[Token(Token = "0x6001702")]
			[Address(RVA = "0x85AEB0", Offset = "0x85AEB0", VA = "0x85AEB0")]
			get
			{
				return default(CGColliderEnum);
			}
			[Token(Token = "0x6001703")]
			[Address(RVA = "0x85AEB8", Offset = "0x85AEB8", VA = "0x85AEB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public bool AutoUpdateColliders
		{
			[Token(Token = "0x6001704")]
			[Address(RVA = "0x85AED0", Offset = "0x85AED0", VA = "0x85AED0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001705")]
			[Address(RVA = "0x85AED8", Offset = "0x85AED8", VA = "0x85AED8")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public bool Convex
		{
			[Token(Token = "0x6001706")]
			[Address(RVA = "0x85AEFC", Offset = "0x85AEFC", VA = "0x85AEFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001707")]
			[Address(RVA = "0x85AF04", Offset = "0x85AF04", VA = "0x85AF04")]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public PhysicMaterial Material
		{
			[Token(Token = "0x6001708")]
			[Address(RVA = "0x85AF28", Offset = "0x85AF28", VA = "0x85AF28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001709")]
			[Address(RVA = "0x85AF30", Offset = "0x85AF30", VA = "0x85AF30")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public CGMeshResourceCollection Meshes
		{
			[Token(Token = "0x600170A")]
			[Address(RVA = "0x85AFC4", Offset = "0x85AFC4", VA = "0x85AFC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		public int MeshCount
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0x85AFCC", Offset = "0x85AFCC", VA = "0x85AFCC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021A")]
		public int VertexCount
		{
			[Token(Token = "0x600170C")]
			[Address(RVA = "0x85AFF4", Offset = "0x85AFF4", VA = "0x85AFF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575A80", Offset = "0x575A80")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600170D")]
			[Address(RVA = "0x85AFFC", Offset = "0x85AFFC", VA = "0x85AFFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575A90", Offset = "0x575A90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		private bool canGroupMeshes
		{
			[Token(Token = "0x600170E")]
			[Address(RVA = "0x85B004", Offset = "0x85B004", VA = "0x85B004")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x85AAF8", Offset = "0x85AAF8", VA = "0x85AAF8")]
		public CreateMesh()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x85B04C", Offset = "0x85B04C", VA = "0x85B04C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x85B254", Offset = "0x85B254", VA = "0x85B254", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x85B234", Offset = "0x85B234", VA = "0x85B234")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x85B3BC", Offset = "0x85B3BC", VA = "0x85B3BC", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x85B414", Offset = "0x85B414", VA = "0x85B414", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x85C428", Offset = "0x85C428", VA = "0x85C428")]
		public GameObject SaveToScene([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x85C2F8", Offset = "0x85C2F8", VA = "0x85C2F8")]
		public void UpdateColliders()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x85C990", Offset = "0x85C990", VA = "0x85C990", Slot = "4")]
		protected override bool UpgradeVersion(string oldVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x85BF10", Offset = "0x85BF10", VA = "0x85BF10")]
		private void createMeshes(ref List<CGVMesh> vMeshes, bool combine)
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x85B5D4", Offset = "0x85B5D4", VA = "0x85B5D4")]
		private void createSpotMeshes(ref List<CGVMesh> vMeshes, ref CGSpots spots, bool combine)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x85CA68", Offset = "0x85CA68", VA = "0x85CA68")]
		private CGMeshResource writeVMeshToMesh(ref CGVMesh vmesh)
		{
			return null;
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x85C998", Offset = "0x85C998", VA = "0x85C998")]
		private void sortByVertexCount(ref List<CGVMesh> vMeshes)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x85B274", Offset = "0x85B274", VA = "0x85B274")]
		private void removeUnusedResource()
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x85CE48", Offset = "0x85CE48", VA = "0x85CE48")]
		private CGMeshResource getNewMesh()
		{
			return null;
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x85D23C", Offset = "0x85D23C", VA = "0x85D23C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575AA0", Offset = "0x575AA0")]
		private static int <createSpotMeshes>m__0(CGSpot a, CGSpot b)
		{
			return default(int);
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x85D26C", Offset = "0x85D26C", VA = "0x85D26C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x575AB0", Offset = "0x575AB0")]
		private static int <sortByVertexCount>m__1(CGVMesh a, CGVMesh b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000394")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x575AC0", Offset = "0x575AC0")]
	public class CreatePathLineRenderer : CGModule
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x575B1C", Offset = "0x575B1C")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private LineRenderer mLineRenderer;

		[Token(Token = "0x1700021C")]
		public LineRenderer LineRenderer
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x8E8DA4", Offset = "0x8E8DA4", VA = "0x8E8DA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x8E8E44", Offset = "0x8E8E44", VA = "0x8E8E44", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021E")]
		public override bool IsInitialized
		{
			[Token(Token = "0x6001722")]
			[Address(RVA = "0x8E8E4C", Offset = "0x8E8E4C", VA = "0x8E8E4C", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x8E8D3C", Offset = "0x8E8D3C", VA = "0x8E8D3C")]
		public CreatePathLineRenderer()
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x8E8E54", Offset = "0x8E8E54", VA = "0x8E8E54", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x8E8F98", Offset = "0x8E8F98", VA = "0x8E8F98", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x8E8FA0", Offset = "0x8E8FA0", VA = "0x8E8FA0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x8E8FA8", Offset = "0x8E8FA8", VA = "0x8E8FA8", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x8E8E7C", Offset = "0x8E8E7C", VA = "0x8E8E7C")]
		private void createLR()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x575BB8", Offset = "0x575BB8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x575BB8", Offset = "0x575BB8")]
	public class DebugVMesh : CGModule
	{
		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x575C28", Offset = "0x575C28")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x575CDC", Offset = "0x575CDC")]
		public bool ShowVertices;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool ShowVertexID;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		public bool ShowUV;

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x8E91CC", Offset = "0x8E91CC", VA = "0x8E91CC")]
		public DebugVMesh()
		{
		}
	}
	[Token(Token = "0x2000396")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x575D14", Offset = "0x575D14")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x575D14", Offset = "0x575D14")]
	public class DebugVolume : CGModule
	{
		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x575D84", Offset = "0x575D84")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x575E38", Offset = "0x575E38")]
		public bool ShowPathSamples;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool ShowCrossSamples;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x575E70", Offset = "0x575E70")]
		[IntRegion]
		public IntRegion LimitCross;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool ShowNormals;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool ShowIndex;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool ShowMap;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Color PathColor;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Color VolumeColor;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Color NormalColor;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x575F34", Offset = "0x575F34")]
		public bool Interpolate;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x575F6C", Offset = "0x575F6C")]
		public float InterpolatePathF;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x575FC0", Offset = "0x575FC0")]
		public float InterpolateCrossF;

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x8E9234", Offset = "0x8E9234", VA = "0x8E9234")]
		public DebugVolume()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x576014", Offset = "0x576014")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x576014", Offset = "0x576014")]
	public class InputGameObject : CGModule
	{
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x576094", Offset = "0x576094")]
		public CGModuleOutputSlot OutGameObject;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[ArrayEx]
		[SerializeField]
		private List<CGGameObjectProperties> m_GameObjects;

		[Token(Token = "0x1700021F")]
		public List<CGGameObjectProperties> GameObjects
		{
			[Token(Token = "0x600172B")]
			[Address(RVA = "0x8E9388", Offset = "0x8E9388", VA = "0x8E9388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public bool SupportsIPE
		{
			[Token(Token = "0x600172C")]
			[Address(RVA = "0x8E9390", Offset = "0x8E9390", VA = "0x8E9390")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x8E92F8", Offset = "0x8E92F8", VA = "0x8E92F8")]
		public InputGameObject()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x8E9398", Offset = "0x8E9398", VA = "0x8E9398", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x8E9410", Offset = "0x8E9410", VA = "0x8E9410", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x8E9624", Offset = "0x8E9624", VA = "0x8E9624", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}
	}
	[Token(Token = "0x2000398")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x57614C", Offset = "0x57614C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57614C", Offset = "0x57614C")]
	public class InputMesh : CGModule, IExternalInput
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x5761CC", Offset = "0x5761CC")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[ArrayEx]
		private List<CGMeshProperties> m_Meshes;

		[Token(Token = "0x17000221")]
		public List<CGMeshProperties> Meshes
		{
			[Token(Token = "0x6001731")]
			[Address(RVA = "0x8E97B0", Offset = "0x8E97B0", VA = "0x8E97B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000222")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6001732")]
			[Address(RVA = "0x8E97B8", Offset = "0x8E97B8", VA = "0x8E97B8", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x8E968C", Offset = "0x8E968C", VA = "0x8E968C")]
		public InputMesh()
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x8E97C0", Offset = "0x8E97C0", VA = "0x8E97C0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x8E9838", Offset = "0x8E9838", VA = "0x8E9838", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x8E9A9C", Offset = "0x8E9A9C", VA = "0x8E9A9C", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}
	}
	[Token(Token = "0x2000399")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x576284", Offset = "0x576284")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x576284", Offset = "0x576284")]
	public class InputSplinePath : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x576304", Offset = "0x576304")]
		public CGModuleOutputSlot Path;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x576378", Offset = "0x576378")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0x576378", Offset = "0x576378")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x576378", Offset = "0x576378")]
		private CurvySpline m_Spline;

		[Token(Token = "0x17000223")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0x8E9B74", Offset = "0x8E9B74", VA = "0x8E9B74")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001738")]
			[Address(RVA = "0x8E9B7C", Offset = "0x8E9B7C", VA = "0x8E9B7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public override bool IsInitialized
		{
			[Token(Token = "0x6001739")]
			[Address(RVA = "0x8E9F3C", Offset = "0x8E9F3C", VA = "0x8E9F3C", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000225")]
		public override bool IsConfigured
		{
			[Token(Token = "0x600173A")]
			[Address(RVA = "0x8E9FF8", Offset = "0x8E9FF8", VA = "0x8E9FF8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000226")]
		public bool SupportsIPE
		{
			[Token(Token = "0x600173B")]
			[Address(RVA = "0x8EA08C", Offset = "0x8EA08C", VA = "0x8EA08C", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000227")]
		public float PathLength
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0x8EA094", Offset = "0x8EA094", VA = "0x8EA094", Slot = "16")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000228")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600173D")]
			[Address(RVA = "0x8EA224", Offset = "0x8EA224", VA = "0x8EA224", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x8E9B04", Offset = "0x8E9B04", VA = "0x8E9B04")]
		public InputSplinePath()
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x8EA340", Offset = "0x8EA340", VA = "0x8EA340", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x8EA484", Offset = "0x8EA484", VA = "0x8EA484", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x8EA594", Offset = "0x8EA594", VA = "0x8EA594", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x8EA5C0", Offset = "0x8EA5C0", VA = "0x8EA5C0", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x8ECF58", Offset = "0x8ECF58", VA = "0x8ECF58", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x8ECF60", Offset = "0x8ECF60", VA = "0x8ECF60", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x8ED010", Offset = "0x8ED010", VA = "0x8ED010")]
		private void m_Spline_OnRefresh(CurvySplineEventArgs e)
		{
		}
	}
	[Token(Token = "0x200039A")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x576444", Offset = "0x576444")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x576444", Offset = "0x576444")]
	public class InputSplineShape : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x5764C4", Offset = "0x5764C4")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x576538", Offset = "0x576538")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0x576538", Offset = "0x576538")]
		private CurvySpline m_Shape;

		[Token(Token = "0x17000229")]
		public CurvySpline Shape
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0x8ED1EC", Offset = "0x8ED1EC", VA = "0x8ED1EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001747")]
			[Address(RVA = "0x8ED1F4", Offset = "0x8ED1F4", VA = "0x8ED1F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public bool FreeForm
		{
			[Token(Token = "0x6001748")]
			[Address(RVA = "0x8ED3FC", Offset = "0x8ED3FC", VA = "0x8ED3FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001749")]
			[Address(RVA = "0x8ED4E4", Offset = "0x8ED4E4", VA = "0x8ED4E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public override bool IsInitialized
		{
			[Token(Token = "0x600174A")]
			[Address(RVA = "0x8ED664", Offset = "0x8ED664", VA = "0x8ED664", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022C")]
		public override bool IsConfigured
		{
			[Token(Token = "0x600174B")]
			[Address(RVA = "0x8ED720", Offset = "0x8ED720", VA = "0x8ED720", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022D")]
		public float PathLength
		{
			[Token(Token = "0x600174C")]
			[Address(RVA = "0x8ED7B4", Offset = "0x8ED7B4", VA = "0x8ED7B4", Slot = "16")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022E")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600174D")]
			[Address(RVA = "0x8ED7F8", Offset = "0x8ED7F8", VA = "0x8ED7F8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022F")]
		public bool SupportsIPE
		{
			[Token(Token = "0x600174E")]
			[Address(RVA = "0x8ED83C", Offset = "0x8ED83C", VA = "0x8ED83C", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x8ED184", Offset = "0x8ED184", VA = "0x8ED184")]
		public InputSplineShape()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x8ED840", Offset = "0x8ED840", VA = "0x8ED840", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x8ED868", Offset = "0x8ED868", VA = "0x8ED868", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x8ED870", Offset = "0x8ED870", VA = "0x8ED870", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x8ED89C", Offset = "0x8ED89C", VA = "0x8ED89C", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001753")]
		public T SetManagedShape<T>() where T : CurvyShape2D
		{
			return null;
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x8ED9E4", Offset = "0x8ED9E4", VA = "0x8ED9E4")]
		public void RemoveManagedShape()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x8EDAC0", Offset = "0x8EDAC0", VA = "0x8EDAC0")]
		private void m_Shape_OnRefresh(CurvySplineEventArgs e)
		{
		}
	}
	[Token(Token = "0x200039B")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x5765BC", Offset = "0x5765BC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5765BC", Offset = "0x5765BC")]
	public class InputSpots : CGModule
	{
		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x57663C", Offset = "0x57663C")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[ArrayEx]
		[SerializeField]
		private List<CGSpot> m_Spots;

		[Token(Token = "0x17000230")]
		public List<CGSpot> Spots
		{
			[Token(Token = "0x6001757")]
			[Address(RVA = "0x8EDCC4", Offset = "0x8EDCC4", VA = "0x8EDCC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001758")]
			[Address(RVA = "0x8EDCCC", Offset = "0x8EDCCC", VA = "0x8EDCCC")]
			set
			{
			}
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x8EDC34", Offset = "0x8EDC34", VA = "0x8EDC34")]
		public InputSpots()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x8EDCE8", Offset = "0x8EDCE8", VA = "0x8EDCE8", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x8EDD20", Offset = "0x8EDD20", VA = "0x8EDD20", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x8EDD98", Offset = "0x8EDD98", VA = "0x8EDD98", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x8EDDA0", Offset = "0x8EDDA0", VA = "0x8EDDA0", Slot = "11")]
		public override void Refresh()
		{
		}
	}
	[Token(Token = "0x200039C")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x5766E8", Offset = "0x5766E8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5766E8", Offset = "0x5766E8")]
	public class ModifierMixPaths : CGModule, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x576768", Offset = "0x576768")]
		public CGModuleInputSlot InPathA;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x57681C", Offset = "0x57681C")]
		public CGModuleInputSlot InPathB;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x5768D0", Offset = "0x5768D0")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x576944", Offset = "0x576944")]
		private float m_Mix;

		[Token(Token = "0x17000231")]
		public float Mix
		{
			[Token(Token = "0x600175E")]
			[Address(RVA = "0x8EDF84", Offset = "0x8EDF84", VA = "0x8EDF84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600175F")]
			[Address(RVA = "0x8EDF8C", Offset = "0x8EDF8C", VA = "0x8EDF8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public float PathLength
		{
			[Token(Token = "0x6001760")]
			[Address(RVA = "0x8EDFA8", Offset = "0x8EDFA8", VA = "0x8EDFA8", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000233")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001761")]
			[Address(RVA = "0x8EE1A4", Offset = "0x8EE1A4", VA = "0x8EE1A4", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x8EDEDC", Offset = "0x8EDEDC", VA = "0x8EDEDC")]
		public ModifierMixPaths()
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x8EE364", Offset = "0x8EE364", VA = "0x8EE364", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x8EE3B0", Offset = "0x8EE3B0", VA = "0x8EE3B0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x8EE3F0", Offset = "0x8EE3F0", VA = "0x8EE3F0", Slot = "17")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x8EE54C", Offset = "0x8EE54C", VA = "0x8EE54C")]
		public static CGPath MixPath(CGPath pathA, CGPath pathB, float mix)
		{
			return null;
		}
	}
	[Token(Token = "0x200039D")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x5769D8", Offset = "0x5769D8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5769D8", Offset = "0x5769D8")]
	public class ModifierMixShapes : CGModule, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x576A58", Offset = "0x576A58")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x576B0C", Offset = "0x576B0C")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x576BC0", Offset = "0x576BC0")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x576C34", Offset = "0x576C34")]
		private float m_Mix;

		[Token(Token = "0x17000234")]
		public float Mix
		{
			[Token(Token = "0x6001767")]
			[Address(RVA = "0x8EEAB8", Offset = "0x8EEAB8", VA = "0x8EEAB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001768")]
			[Address(RVA = "0x8EEAC0", Offset = "0x8EEAC0", VA = "0x8EEAC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public float PathLength
		{
			[Token(Token = "0x6001769")]
			[Address(RVA = "0x8EEADC", Offset = "0x8EEADC", VA = "0x8EEADC", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000236")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600176A")]
			[Address(RVA = "0x8EECD8", Offset = "0x8EECD8", VA = "0x8EECD8", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x8EEA10", Offset = "0x8EEA10", VA = "0x8EEA10")]
		public ModifierMixShapes()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x8EEE98", Offset = "0x8EEE98", VA = "0x8EEE98", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x8EEEE4", Offset = "0x8EEEE4", VA = "0x8EEEE4", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x8EEF24", Offset = "0x8EEF24", VA = "0x8EEF24", Slot = "17")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}
	}
	[Token(Token = "0x200039E")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x576CC8", Offset = "0x576CC8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x576CC8", Offset = "0x576CC8")]
	public class ModifierTRSMesh : TRSModuleBase
	{
		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x576D48", Offset = "0x576D48")]
		public CGModuleInputSlot InVMesh;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x576E00", Offset = "0x576E00")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x8EF398", Offset = "0x8EF398", VA = "0x8EF398")]
		public ModifierTRSMesh()
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x8EF498", Offset = "0x8EF498", VA = "0x8EF498", Slot = "11")]
		public override void Refresh()
		{
		}
	}
	[Token(Token = "0x200039F")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x576E80", Offset = "0x576E80")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x576E80", Offset = "0x576E80")]
	public class ModifierTRSPath : TRSModuleBase, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x576F00", Offset = "0x576F00")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x576FC4", Offset = "0x576FC4")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x17000237")]
		public float PathLength
		{
			[Token(Token = "0x6001771")]
			[Address(RVA = "0x8EF7F8", Offset = "0x8EF7F8", VA = "0x8EF7F8", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000238")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001772")]
			[Address(RVA = "0x8EF900", Offset = "0x8EF900", VA = "0x8EF900", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x8EF774", Offset = "0x8EF774", VA = "0x8EF774")]
		public ModifierTRSPath()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x8EFA0C", Offset = "0x8EFA0C", VA = "0x8EFA0C", Slot = "17")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}
	}
	[Token(Token = "0x20003A0")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x577048", Offset = "0x577048")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x577048", Offset = "0x577048")]
	public class ModifierTRSShape : TRSModuleBase, IOnRequestPath, IOnRequestProcessing
	{
		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x5770C8", Offset = "0x5770C8")]
		public CGModuleInputSlot InShape;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x57718C", Offset = "0x57718C")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x17000239")]
		public float PathLength
		{
			[Token(Token = "0x6001775")]
			[Address(RVA = "0x8EFC9C", Offset = "0x8EFC9C", VA = "0x8EFC9C", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700023A")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001776")]
			[Address(RVA = "0x8EFDA4", Offset = "0x8EFDA4", VA = "0x8EFDA4", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x8EFC18", Offset = "0x8EFC18", VA = "0x8EFC18")]
		public ModifierTRSShape()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x8EFEB0", Offset = "0x8EFEB0", VA = "0x8EFEB0", Slot = "17")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}
	}
	[Token(Token = "0x20003A1")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x577210", Offset = "0x577210")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x577210", Offset = "0x577210")]
	public class Note : CGModule, INoProcessing
	{
		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x577298", Offset = "0x577298")]
		private string m_Note;

		[Token(Token = "0x1700023B")]
		public string NoteText
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0x8F00C4", Offset = "0x8F00C4", VA = "0x8F00C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x8F00CC", Offset = "0x8F00CC", VA = "0x8F00CC")]
			set
			{
			}
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x8F00BC", Offset = "0x8F00BC", VA = "0x8F00BC")]
		public Note()
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x8F0158", Offset = "0x8F0158", VA = "0x8F0158", Slot = "6")]
		protected override void OnEnable()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Generator
{
	[Token(Token = "0x20003A2")]
	public enum CGYesNoAuto
	{
		[Token(Token = "0x4000F79")]
		Yes,
		[Token(Token = "0x4000F7A")]
		No,
		[Token(Token = "0x4000F7B")]
		Auto
	}
	[Token(Token = "0x20003A3")]
	public enum CGReferenceMode
	{
		[Token(Token = "0x4000F7D")]
		Source,
		[Token(Token = "0x4000F7E")]
		Self
	}
	[Token(Token = "0x20003A4")]
	public enum CGKeepAspectMode
	{
		[Token(Token = "0x4000F80")]
		Off,
		[Token(Token = "0x4000F81")]
		ScaleU,
		[Token(Token = "0x4000F82")]
		ScaleV
	}
	[Token(Token = "0x20003A5")]
	public enum CGUVEnum
	{
		[Token(Token = "0x4000F84")]
		U,
		[Token(Token = "0x4000F85")]
		V
	}
	[Token(Token = "0x20003A6")]
	public enum CGColliderEnum
	{
		[Token(Token = "0x4000F87")]
		None,
		[Token(Token = "0x4000F88")]
		Mesh,
		[Token(Token = "0x4000F89")]
		Box,
		[Token(Token = "0x4000F8A")]
		Sphere
	}
	[Serializable]
	[Token(Token = "0x20003A7")]
	public struct CGSpot
	{
		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5772D8", Offset = "0x5772D8")]
		private int m_Index;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577338", Offset = "0x577338")]
		private Vector3 m_Position;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5773A8", Offset = "0x5773A8")]
		private Quaternion m_Rotation;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577418", Offset = "0x577418")]
		private Vector3 m_Scale;

		[Token(Token = "0x1700023C")]
		public int Index
		{
			[Token(Token = "0x600177E")]
			[Address(RVA = "0x847584", Offset = "0x847584", VA = "0x847584")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023D")]
		public Vector3 Position
		{
			[Token(Token = "0x600177F")]
			[Address(RVA = "0x84758C", Offset = "0x84758C", VA = "0x84758C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001780")]
			[Address(RVA = "0x847654", Offset = "0x847654", VA = "0x847654")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6001781")]
			[Address(RVA = "0x84765C", Offset = "0x84765C", VA = "0x84765C")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001782")]
			[Address(RVA = "0x847738", Offset = "0x847738", VA = "0x847738")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public Vector3 Scale
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0x847740", Offset = "0x847740", VA = "0x847740")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001784")]
			[Address(RVA = "0x847808", Offset = "0x847808", VA = "0x847808")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001785")]
			[Address(RVA = "0x8478EC", Offset = "0x8478EC", VA = "0x8478EC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x847558", Offset = "0x847558", VA = "0x847558")]
		public CGSpot(int index)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x847560", Offset = "0x847560", VA = "0x847560")]
		public CGSpot(int index, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x84799C", Offset = "0x84799C", VA = "0x84799C")]
		public void ToTransform(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A8")]
	public class CGMaterialSettings
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool SwapUV;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CGKeepAspectMode KeepAspect;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UVRotation;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVOffset;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVScale;

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x83C1A0", Offset = "0x83C1A0", VA = "0x83C1A0")]
		public CGMaterialSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A9")]
	public class CGMaterialSettingsEx : CGMaterialSettings
	{
		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int MaterialID;

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x83C228", Offset = "0x83C228", VA = "0x83C228")]
		public CGMaterialSettingsEx()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AA")]
	public class CGMeshProperties
	{
		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Mesh m_Mesh;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material[] m_Material;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5774A8", Offset = "0x5774A8")]
		private Vector3 m_Translation;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577510", Offset = "0x577510")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577578", Offset = "0x577578")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000241")]
		public Mesh Mesh
		{
			[Token(Token = "0x600178B")]
			[Address(RVA = "0x83C570", Offset = "0x83C570", VA = "0x83C570")]
			get
			{
				return null;
			}
			[Token(Token = "0x600178C")]
			[Address(RVA = "0x83C420", Offset = "0x83C420", VA = "0x83C420")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public Material[] Material
		{
			[Token(Token = "0x600178D")]
			[Address(RVA = "0x83C578", Offset = "0x83C578", VA = "0x83C578")]
			get
			{
				return null;
			}
			[Token(Token = "0x600178E")]
			[Address(RVA = "0x83C55C", Offset = "0x83C55C", VA = "0x83C55C")]
			set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public Vector3 Translation
		{
			[Token(Token = "0x600178F")]
			[Address(RVA = "0x83C580", Offset = "0x83C580", VA = "0x83C580")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001790")]
			[Address(RVA = "0x83C58C", Offset = "0x83C58C", VA = "0x83C58C")]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6001791")]
			[Address(RVA = "0x83C648", Offset = "0x83C648", VA = "0x83C648")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001792")]
			[Address(RVA = "0x83C654", Offset = "0x83C654", VA = "0x83C654")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public Vector3 Scale
		{
			[Token(Token = "0x6001793")]
			[Address(RVA = "0x83C710", Offset = "0x83C710", VA = "0x83C710")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001794")]
			[Address(RVA = "0x83C71C", Offset = "0x83C71C", VA = "0x83C71C")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0x83C7D8", Offset = "0x83C7D8", VA = "0x83C7D8")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x83C22C", Offset = "0x83C22C", VA = "0x83C22C")]
		public CGMeshProperties()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x83C2CC", Offset = "0x83C2CC", VA = "0x83C2CC")]
		public CGMeshProperties(Mesh mesh)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AB")]
	public class CGGameObjectProperties
	{
		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_Object;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5775F0", Offset = "0x5775F0")]
		private Vector3 m_Translation;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577658", Offset = "0x577658")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x5776C0", Offset = "0x5776C0")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000247")]
		public GameObject Object
		{
			[Token(Token = "0x6001798")]
			[Address(RVA = "0x83AE1C", Offset = "0x83AE1C", VA = "0x83AE1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001799")]
			[Address(RVA = "0x83B900", Offset = "0x83B900", VA = "0x83B900")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public Vector3 Translation
		{
			[Token(Token = "0x600179A")]
			[Address(RVA = "0x83AE24", Offset = "0x83AE24", VA = "0x83AE24")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600179B")]
			[Address(RVA = "0x83B98C", Offset = "0x83B98C", VA = "0x83B98C")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public Vector3 Rotation
		{
			[Token(Token = "0x600179C")]
			[Address(RVA = "0x83AE30", Offset = "0x83AE30", VA = "0x83AE30")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600179D")]
			[Address(RVA = "0x83BA48", Offset = "0x83BA48", VA = "0x83BA48")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public Vector3 Scale
		{
			[Token(Token = "0x600179E")]
			[Address(RVA = "0x83AE3C", Offset = "0x83AE3C", VA = "0x83AE3C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600179F")]
			[Address(RVA = "0x83BB04", Offset = "0x83BB04", VA = "0x83BB04")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x83BBC0", Offset = "0x83BBC0", VA = "0x83BBC0")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x83B7F0", Offset = "0x83B7F0", VA = "0x83B7F0")]
		public CGGameObjectProperties()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x83B86C", Offset = "0x83B86C", VA = "0x83B86C")]
		public CGGameObjectProperties(GameObject gameObject)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AC")]
	public class CGBoundsGroup
	{
		[Token(Token = "0x20003AD")]
		public enum DistributionModeEnum
		{
			[Token(Token = "0x4000FAE")]
			Parent,
			[Token(Token = "0x4000FAF")]
			Self
		}

		[Token(Token = "0x20003AE")]
		public enum RotationModeEnum
		{
			[Token(Token = "0x4000FB1")]
			Full,
			[Token(Token = "0x4000FB2")]
			Direction,
			[Token(Token = "0x4000FB3")]
			Horizontal,
			[Token(Token = "0x4000FB4")]
			Independent
		}

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_Name;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_KeepTogether;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_SpaceBefore;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_SpaceAfter;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x5777E0", Offset = "0x5777E0")]
		[SerializeField]
		private float m_Weight;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[IntRegion]
		[SerializeField]
		private IntRegion m_RepeatingItems;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5778C4", Offset = "0x5778C4")]
		private DistributionModeEnum m_DistributionMode;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_PositionOffset;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_Height;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5779C0", Offset = "0x5779C0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x5779C0", Offset = "0x5779C0")]
		[SerializeField]
		private RotationModeEnum m_RotationMode;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577A4C", Offset = "0x577A4C")]
		private Vector3 m_RotationOffset;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x577AB4", Offset = "0x577AB4")]
		private Vector3 m_RotationScatter;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private List<CGBoundsGroupItem> m_Items;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private WeightedRandom<int> mItemBag;

		[Token(Token = "0x1700024C")]
		public string Name
		{
			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x83921C", Offset = "0x83921C", VA = "0x83921C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017A3")]
			[Address(RVA = "0x839190", Offset = "0x839190", VA = "0x839190")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public bool KeepTogether
		{
			[Token(Token = "0x60017A4")]
			[Address(RVA = "0x839224", Offset = "0x839224", VA = "0x839224")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0x83922C", Offset = "0x83922C", VA = "0x83922C")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public FloatRegion SpaceBefore
		{
			[Token(Token = "0x60017A6")]
			[Address(RVA = "0x83924C", Offset = "0x83924C", VA = "0x83924C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x60017A7")]
			[Address(RVA = "0x83925C", Offset = "0x83925C", VA = "0x83925C")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public FloatRegion SpaceAfter
		{
			[Token(Token = "0x60017A8")]
			[Address(RVA = "0x8392B8", Offset = "0x8392B8", VA = "0x8392B8")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x60017A9")]
			[Address(RVA = "0x8392C8", Offset = "0x8392C8", VA = "0x8392C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public float Weight
		{
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x839324", Offset = "0x839324", VA = "0x839324")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x83932C", Offset = "0x83932C", VA = "0x83932C")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x8393B8", Offset = "0x8393B8", VA = "0x8393B8")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x8393C0", Offset = "0x8393C0", VA = "0x8393C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public IntRegion RepeatingItems
		{
			[Token(Token = "0x60017AE")]
			[Address(RVA = "0x8393D4", Offset = "0x8393D4", VA = "0x8393D4")]
			get
			{
				return default(IntRegion);
			}
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x8393E4", Offset = "0x8393E4", VA = "0x8393E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public DistributionModeEnum DistributionMode
		{
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x839440", Offset = "0x839440", VA = "0x839440")]
			get
			{
				return default(DistributionModeEnum);
			}
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x839448", Offset = "0x839448", VA = "0x839448")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public FloatRegion PositionOffset
		{
			[Token(Token = "0x60017B2")]
			[Address(RVA = "0x83945C", Offset = "0x83945C", VA = "0x83945C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0x83946C", Offset = "0x83946C", VA = "0x83946C")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public FloatRegion Height
		{
			[Token(Token = "0x60017B4")]
			[Address(RVA = "0x8394C8", Offset = "0x8394C8", VA = "0x8394C8")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x60017B5")]
			[Address(RVA = "0x8394D8", Offset = "0x8394D8", VA = "0x8394D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public RotationModeEnum RotationMode
		{
			[Token(Token = "0x60017B6")]
			[Address(RVA = "0x839534", Offset = "0x839534", VA = "0x839534")]
			get
			{
				return default(RotationModeEnum);
			}
			[Token(Token = "0x60017B7")]
			[Address(RVA = "0x83953C", Offset = "0x83953C", VA = "0x83953C")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public Vector3 RotationOffset
		{
			[Token(Token = "0x60017B8")]
			[Address(RVA = "0x839550", Offset = "0x839550", VA = "0x839550")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60017B9")]
			[Address(RVA = "0x83955C", Offset = "0x83955C", VA = "0x83955C")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public Vector3 RotationScatter
		{
			[Token(Token = "0x60017BA")]
			[Address(RVA = "0x839618", Offset = "0x839618", VA = "0x839618")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60017BB")]
			[Address(RVA = "0x839624", Offset = "0x839624", VA = "0x839624")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public List<CGBoundsGroupItem> Items
		{
			[Token(Token = "0x60017BC")]
			[Address(RVA = "0x8396E0", Offset = "0x8396E0", VA = "0x8396E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025A")]
		public int FirstRepeating
		{
			[Token(Token = "0x60017BD")]
			[Address(RVA = "0x8396E8", Offset = "0x8396E8", VA = "0x8396E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017BE")]
			[Address(RVA = "0x8396F0", Offset = "0x8396F0", VA = "0x8396F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public int LastRepeating
		{
			[Token(Token = "0x60017BF")]
			[Address(RVA = "0x839804", Offset = "0x839804", VA = "0x839804")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017C0")]
			[Address(RVA = "0x83980C", Offset = "0x83980C", VA = "0x83980C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public int ItemCount
		{
			[Token(Token = "0x60017C1")]
			[Address(RVA = "0x8397A8", Offset = "0x8397A8", VA = "0x8397A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025D")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x60017C2")]
			[Address(RVA = "0x8398C8", Offset = "0x8398C8", VA = "0x8398C8")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x1700025E")]
		private RegionOptions<float> PositionRangeOptions
		{
			[Token(Token = "0x60017C3")]
			[Address(RVA = "0x839974", Offset = "0x839974", VA = "0x839974")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x1700025F")]
		private int lastItemIndex
		{
			[Token(Token = "0x60017C4")]
			[Address(RVA = "0x8399D0", Offset = "0x8399D0", VA = "0x8399D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x839080", Offset = "0x839080", VA = "0x839080")]
		public CGBoundsGroup(string name)
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x839A50", Offset = "0x839A50", VA = "0x839A50")]
		internal void PrepareINTERNAL()
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x839BCC", Offset = "0x839BCC", VA = "0x839BCC")]
		internal int getRandomItemINTERNAL()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003AF")]
	public class CGBoundsGroupItem
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Index;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x577B2C", Offset = "0x577B2C")]
		[SerializeField]
		private float m_Weight;

		[Token(Token = "0x17000260")]
		public float Weight
		{
			[Token(Token = "0x60017C8")]
			[Address(RVA = "0x839BC4", Offset = "0x839BC4", VA = "0x839BC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017C9")]
			[Address(RVA = "0x839C38", Offset = "0x839C38", VA = "0x839C38")]
			set
			{
			}
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x839C28", Offset = "0x839C28", VA = "0x839C28")]
		public CGBoundsGroupItem()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public struct ControlPointOption
	{
		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float TF;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Include;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int MaterialID;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool HardEdge;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MaxStepDistance;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UVEdge;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UVShift;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FirstU;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float SecondU;

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x84D7E0", Offset = "0x84D7E0", VA = "0x84D7E0")]
		public ControlPointOption(float tf, float dist, bool includeAnyways, int materialID, bool hardEdge, float maxStepDistance, bool uvEdge, bool uvShift, float firstU, float secondU)
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public struct SamplePointsPatch
	{
		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Start;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x17000261")]
		public int End
		{
			[Token(Token = "0x60017CC")]
			[Address(RVA = "0x8F0B44", Offset = "0x8F0B44", VA = "0x8F0B44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017CD")]
			[Address(RVA = "0x8F0BD8", Offset = "0x8F0BD8", VA = "0x8F0BD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000262")]
		public int TriangleCount
		{
			[Token(Token = "0x60017CE")]
			[Address(RVA = "0x8F0BE0", Offset = "0x8F0BE0", VA = "0x8F0BE0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x8F0B3C", Offset = "0x8F0B3C", VA = "0x8F0B3C")]
		public SamplePointsPatch(int start)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x8F0E14", Offset = "0x8F0E14", VA = "0x8F0E14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B2")]
	public class SamplePointsMaterialGroup
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MaterialID;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SamplePointsPatch> Patches;

		[Token(Token = "0x17000263")]
		public int TriangleCount
		{
			[Token(Token = "0x60017D1")]
			[Address(RVA = "0x8F03A0", Offset = "0x8F03A0", VA = "0x8F03A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000264")]
		public int StartVertex
		{
			[Token(Token = "0x60017D2")]
			[Address(RVA = "0x8F0460", Offset = "0x8F0460", VA = "0x8F0460")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000265")]
		public int EndVertex
		{
			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x8F04C4", Offset = "0x8F04C4", VA = "0x8F04C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000266")]
		public int VertexCount
		{
			[Token(Token = "0x60017D4")]
			[Address(RVA = "0x8F0574", Offset = "0x8F0574", VA = "0x8F0574")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x8F031C", Offset = "0x8F031C", VA = "0x8F031C")]
		public SamplePointsMaterialGroup(int materialID)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x8F05A8", Offset = "0x8F05A8", VA = "0x8F05A8")]
		public void GetLengths(CGVolume volume, out float worldLength, out float uLength)
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public struct SamplePointUData
	{
		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Vertex;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool UVEdge;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float FirstU;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SecondU;

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x8F0E70", Offset = "0x8F0E70", VA = "0x8F0E70")]
		public SamplePointUData(int vt, bool uvEdge, float uv0, float uv1)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x8F10B4", Offset = "0x8F10B4", VA = "0x8F10B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B4")]
	public class SamplePointsMaterialGroupCollection : List<SamplePointsMaterialGroup>
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MaterialID;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float AspectCorrection;

		[Token(Token = "0x17000267")]
		public int TriangleCount
		{
			[Token(Token = "0x60017DB")]
			[Address(RVA = "0x8F0950", Offset = "0x8F0950", VA = "0x8F0950")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x8F07C8", Offset = "0x8F07C8", VA = "0x8F07C8")]
		public SamplePointsMaterialGroupCollection()
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x8F0840", Offset = "0x8F0840", VA = "0x8F0840")]
		public SamplePointsMaterialGroupCollection(int capacity)
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x8F08C8", Offset = "0x8F08C8", VA = "0x8F08C8")]
		public SamplePointsMaterialGroupCollection(IEnumerable<SamplePointsMaterialGroup> collection)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x8F0A10", Offset = "0x8F0A10", VA = "0x8F0A10")]
		public void CalculateAspectCorrection(CGVolume volume, CGMaterialSettingsEx matSettings)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B5")]
	public class CGDataReference
	{
		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private CGModule m_Module;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGModuleOutputSlot mSlot;

		[Token(Token = "0x17000268")]
		public CGData[] Data
		{
			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x83A0C8", Offset = "0x83A0C8", VA = "0x83A0C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		public CGModuleOutputSlot Slot
		{
			[Token(Token = "0x60017E1")]
			[Address(RVA = "0x83A150", Offset = "0x83A150", VA = "0x83A150")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		public bool HasValue
		{
			[Token(Token = "0x60017E2")]
			[Address(RVA = "0x83A410", Offset = "0x83A410", VA = "0x83A410")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026B")]
		public bool IsEmpty
		{
			[Token(Token = "0x60017E3")]
			[Address(RVA = "0x83A444", Offset = "0x83A444", VA = "0x83A444")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026C")]
		public CGModule Module
		{
			[Token(Token = "0x60017E4")]
			[Address(RVA = "0x83A4BC", Offset = "0x83A4BC", VA = "0x83A4BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026D")]
		public string SlotName
		{
			[Token(Token = "0x60017E5")]
			[Address(RVA = "0x83A4B4", Offset = "0x83A4B4", VA = "0x83A4B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x839FE0", Offset = "0x839FE0", VA = "0x839FE0")]
		public CGDataReference()
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x839FE8", Offset = "0x839FE8", VA = "0x839FE8")]
		public CGDataReference(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x83A030", Offset = "0x83A030", VA = "0x83A030")]
		public CGDataReference(CurvyGenerator generator, string moduleName, string slotName)
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x83A4C4", Offset = "0x83A4C4", VA = "0x83A4C4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60017E7")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60017E8")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x83A024", Offset = "0x83A024", VA = "0x83A024")]
		public void setINTERNAL(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x83A078", Offset = "0x83A078", VA = "0x83A078")]
		public void setINTERNAL(CurvyGenerator generator, string moduleName, string slotName)
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class CGDataInfoAttribute : Attribute
	{
		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Color Color;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x839EE0", Offset = "0x839EE0", VA = "0x839EE0")]
		public CGDataInfoAttribute(Color color)
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x839F2C", Offset = "0x839F2C", VA = "0x839F2C")]
		public CGDataInfoAttribute(float r, float g, float b, float a = 1f)
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x839FA0", Offset = "0x839FA0", VA = "0x839FA0")]
		public CGDataInfoAttribute(string htmlColor)
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class CGData
	{
		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DateTime mTimestamp;

		[Token(Token = "0x1700026E")]
		public DateTime Timestamp
		{
			[Token(Token = "0x60017EF")]
			[Address(RVA = "0x839CC4", Offset = "0x839CC4", VA = "0x839CC4")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x1700026F")]
		public virtual int Count
		{
			[Token(Token = "0x60017F0")]
			[Address(RVA = "0x839CD0", Offset = "0x839CD0", VA = "0x839CD0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x838C68", Offset = "0x838C68", VA = "0x838C68")]
		public CGData()
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x839CD8", Offset = "0x839CD8", VA = "0x839CD8")]
		public static implicit operator bool(CGData a)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F2")]
		public virtual T Clone<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x839D00", Offset = "0x839D00", VA = "0x839D00")]
		protected int getGenericFIndex(ref float[] FMapArray, float fValue, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x838FB0", Offset = "0x838FB0", VA = "0x838FB0")]
		public void Touch()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577BC8", Offset = "0x577BC8")]
	public class CGShape : CGData
	{
		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] SourceF;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] F;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3[] Position;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3[] Normal;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float[] Map;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Bounds Bounds;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<SamplePointsMaterialGroup> MaterialGroups;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool SourceIsManaged;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool Closed;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool Seamless;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float Length;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float mCacheLastF;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int mCacheLastIndex;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float mCacheLastFrag;

		[Token(Token = "0x17000270")]
		public override int Count
		{
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x8464C0", Offset = "0x8464C0", VA = "0x8464C0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x844A9C", Offset = "0x844A9C", VA = "0x844A9C")]
		public CGShape()
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x844CC0", Offset = "0x844CC0", VA = "0x844CC0")]
		public CGShape(CGShape source)
		{
		}

		[Token(Token = "0x60017F8")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x84521C", Offset = "0x84521C", VA = "0x84521C")]
		public static void Copy(CGShape dest, CGShape source)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x8464E8", Offset = "0x8464E8", VA = "0x8464E8")]
		public float DistanceToF(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x846578", Offset = "0x846578", VA = "0x846578")]
		public float FToDistance(float f)
		{
			return default(float);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x8457AC", Offset = "0x8457AC", VA = "0x8457AC")]
		public int GetFIndex(float f, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x8465FC", Offset = "0x8465FC", VA = "0x8465FC")]
		public Vector3 InterpolatePosition(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x846740", Offset = "0x846740", VA = "0x846740")]
		public void Move(ref float f, ref int direction, float speed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x846780", Offset = "0x846780", VA = "0x846780")]
		public void MoveBy(ref float f, ref int direction, float speedDist, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x845D50", Offset = "0x845D50", VA = "0x845D50", Slot = "6")]
		public virtual void Recalculate()
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x8467FC", Offset = "0x8467FC", VA = "0x8467FC")]
		public void RecalculateNormals(List<int> softEdges)
		{
		}
	}
	[Token(Token = "0x20003B9")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577BF4", Offset = "0x577BF4")]
	public class CGPath : CGShape
	{
		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector3[] Direction;

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x844A34", Offset = "0x844A34", VA = "0x844A34")]
		public CGPath()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x844BB4", Offset = "0x844BB4", VA = "0x844BB4")]
		public CGPath(CGPath source)
		{
		}

		[Token(Token = "0x6001804")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x845158", Offset = "0x845158", VA = "0x845158")]
		public static void Copy(CGPath dest, CGPath source)
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x845518", Offset = "0x845518", VA = "0x845518")]
		public void Interpolate(float f, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x845814", Offset = "0x845814", VA = "0x845814")]
		public void Interpolate(float f, float angleF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x8458FC", Offset = "0x8458FC", VA = "0x8458FC")]
		public Vector3 InterpolateDirection(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x845A40", Offset = "0x845A40", VA = "0x845A40")]
		public Vector3 InterpolateUp(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x845B84", Offset = "0x845B84", VA = "0x845B84", Slot = "6")]
		public override void Recalculate()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577C20", Offset = "0x577C20")]
	public class CGVolume : CGPath
	{
		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3[] VertexNormal;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float[] CrossF;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float[] CrossMap;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float[] SegmentLength;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool CrossClosed;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool CrossSeamless;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float CrossFShift;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SamplePointsMaterialGroupCollection CrossMaterialGroups;

		[Token(Token = "0x17000271")]
		public int CrossSize
		{
			[Token(Token = "0x600180F")]
			[Address(RVA = "0x848E3C", Offset = "0x848E3C", VA = "0x848E3C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000272")]
		public int VertexCount
		{
			[Token(Token = "0x6001810")]
			[Address(RVA = "0x84BD80", Offset = "0x84BD80", VA = "0x84BD80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x84B33C", Offset = "0x84B33C", VA = "0x84B33C")]
		public CGVolume()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x84B408", Offset = "0x84B408", VA = "0x84B408")]
		public CGVolume(int samplePoints, CGShape crossShape)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x84B6F0", Offset = "0x84B6F0", VA = "0x84B6F0")]
		public CGVolume(CGPath path, CGShape crossShape)
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x84B9E4", Offset = "0x84B9E4", VA = "0x84B9E4")]
		public CGVolume(CGVolume source)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x84BDA8", Offset = "0x84BDA8", VA = "0x84BDA8")]
		public static CGVolume Get(CGVolume data, CGPath path, CGShape crossShape)
		{
			return null;
		}

		[Token(Token = "0x6001812")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x84BFD0", Offset = "0x84BFD0", VA = "0x84BFD0")]
		public void InterpolateVolume(float f, float crossF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x84C468", Offset = "0x84C468", VA = "0x84C468")]
		public Vector3 InterpolateVolumePosition(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x84C7FC", Offset = "0x84C7FC", VA = "0x84C7FC")]
		public Vector3 InterpolateVolumeDirection(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x84CA74", Offset = "0x84CA74", VA = "0x84CA74")]
		public Vector3 InterpolateVolumeUp(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x84CD84", Offset = "0x84CD84", VA = "0x84CD84")]
		public float GetCrossLength(float pathF)
		{
			return default(float);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x84D214", Offset = "0x84D214", VA = "0x84D214")]
		public float CrossFToDistance(float f, float crossF, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x84D25C", Offset = "0x84D25C", VA = "0x84D25C")]
		public float CrossDistanceToF(float f, float distance, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x84CF84", Offset = "0x84CF84", VA = "0x84CF84")]
		public void GetSegmentIndices(float pathF, out int s0Index, out int s1Index, out float frag)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0x84D2A8", Offset = "0x84D2A8", VA = "0x84D2A8")]
		public int GetSegmentIndex(int segment)
		{
			return default(int);
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x84D2D8", Offset = "0x84D2D8", VA = "0x84D2D8")]
		public int GetCrossFIndex(float crossF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x84D38C", Offset = "0x84D38C", VA = "0x84D38C")]
		public int GetVertexIndex(float pathF, out float pathFrag)
		{
			return default(int);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x84C418", Offset = "0x84C418", VA = "0x84C418")]
		public int GetVertexIndex(float pathF, float crossF, out float pathFrag, out float crossFrag)
		{
			return default(int);
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x84D400", Offset = "0x84D400", VA = "0x84D400")]
		public Vector3[] GetSegmentVertices(params int[] segmentIndices)
		{
			return null;
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x84D06C", Offset = "0x84D06C", VA = "0x84D06C")]
		private float calcSegmentLength(int segmentIndex)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003BB")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577C58", Offset = "0x577C58")]
	public class CGBounds : CGData
	{
		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Bounds? mBounds;

		[Token(Token = "0x17000273")]
		public Bounds Bounds
		{
			[Token(Token = "0x6001824")]
			[Address(RVA = "0x838EA0", Offset = "0x838EA0", VA = "0x838EA0")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6001825")]
			[Address(RVA = "0x838D2C", Offset = "0x838D2C", VA = "0x838D2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public float Depth
		{
			[Token(Token = "0x6001826")]
			[Address(RVA = "0x838F30", Offset = "0x838F30", VA = "0x838F30")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x838C64", Offset = "0x838C64", VA = "0x838C64")]
		public CGBounds()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x838CE4", Offset = "0x838CE4", VA = "0x838CE4")]
		public CGBounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x838E44", Offset = "0x838E44", VA = "0x838E44")]
		public CGBounds(CGBounds source)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x838F78", Offset = "0x838F78", VA = "0x838F78", Slot = "6")]
		public virtual void RecalculateBounds()
		{
		}

		[Token(Token = "0x6001828")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x839020", Offset = "0x839020", VA = "0x839020")]
		public static void Copy(CGBounds dest, CGBounds source)
		{
		}
	}
	[Token(Token = "0x20003BC")]
	public class CGVSubMesh : CGData
	{
		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] Triangles;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material Material;

		[Token(Token = "0x17000275")]
		public override int Count
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0x84D5B4", Offset = "0x84D5B4", VA = "0x84D5B4", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x84ACC8", Offset = "0x84ACC8", VA = "0x84ACC8")]
		public CGVSubMesh([Optional] Material material)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x849B10", Offset = "0x849B10", VA = "0x849B10")]
		public CGVSubMesh(int[] triangles, [Optional] Material material)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x84D534", Offset = "0x84D534", VA = "0x84D534")]
		public CGVSubMesh(int triangleCount, [Optional] Material material)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x8493B4", Offset = "0x8493B4", VA = "0x8493B4")]
		public CGVSubMesh(CGVSubMesh source)
		{
		}

		[Token(Token = "0x600182F")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x84D5DC", Offset = "0x84D5DC", VA = "0x84D5DC")]
		public static CGVSubMesh Get(CGVSubMesh data, int triangleCount, [Optional] Material material)
		{
			return null;
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x84D680", Offset = "0x84D680", VA = "0x84D680")]
		public void ShiftIndices(int offset, int startIndex = 0)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x84A718", Offset = "0x84A718", VA = "0x84A718")]
		public void Add(CGVSubMesh other, int shiftIndexOffset = 0)
		{
		}
	}
	[Token(Token = "0x20003BD")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577C7C", Offset = "0x577C7C")]
	public class CGVMesh : CGBounds
	{
		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2[] UV;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2[] UV2;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3[] Normal;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector4[] Tangents;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CGVSubMesh[] SubMeshes;

		[Token(Token = "0x17000276")]
		public override int Count
		{
			[Token(Token = "0x600183A")]
			[Address(RVA = "0x849C5C", Offset = "0x849C5C", VA = "0x849C5C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000277")]
		public bool HasUV
		{
			[Token(Token = "0x600183B")]
			[Address(RVA = "0x849C84", Offset = "0x849C84", VA = "0x849C84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000278")]
		public bool HasUV2
		{
			[Token(Token = "0x600183C")]
			[Address(RVA = "0x849CB4", Offset = "0x849CB4", VA = "0x849CB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000279")]
		public bool HasNormals
		{
			[Token(Token = "0x600183D")]
			[Address(RVA = "0x849CE4", Offset = "0x849CE4", VA = "0x849CE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027A")]
		public bool HasTangents
		{
			[Token(Token = "0x600183E")]
			[Address(RVA = "0x849D14", Offset = "0x849D14", VA = "0x849D14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027B")]
		public int TriangleCount
		{
			[Token(Token = "0x600183F")]
			[Address(RVA = "0x849D44", Offset = "0x849D44", VA = "0x849D44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x8489E8", Offset = "0x8489E8", VA = "0x8489E8")]
		public CGVMesh()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x848A00", Offset = "0x848A00", VA = "0x848A00")]
		public CGVMesh(int vertexCount, bool addUV = false, bool addUV2 = false, bool addNormals = false, bool addTangents = false)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x848BE4", Offset = "0x848BE4", VA = "0x848BE4")]
		public CGVMesh(CGVolume volume)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x848CE4", Offset = "0x848CE4", VA = "0x848CE4")]
		public CGVMesh(CGVolume volume, IntRegion subset)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x848E64", Offset = "0x848E64", VA = "0x848E64")]
		public CGVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x8494CC", Offset = "0x8494CC", VA = "0x8494CC")]
		public CGVMesh(CGMeshProperties meshProperties)
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x849554", Offset = "0x849554", VA = "0x849554")]
		public CGVMesh(Mesh source, Material[] materials, Matrix4x4 trsMatrix)
		{
		}

		[Token(Token = "0x6001840")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x849E04", Offset = "0x849E04", VA = "0x849E04")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x849E8C", Offset = "0x849E8C", VA = "0x849E8C")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, IntRegion subset, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x849348", Offset = "0x849348", VA = "0x849348")]
		public void SetSubMeshCount(int count)
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x84A1A0", Offset = "0x84A1A0", VA = "0x84A1A0")]
		public void AddSubMesh([Optional] CGVSubMesh submesh)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x84A210", Offset = "0x84A210", VA = "0x84A210")]
		public void MergeVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x84A82C", Offset = "0x84A82C", VA = "0x84A82C")]
		public void MergeVMesh(CGVMesh source, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x84A5B8", Offset = "0x84A5B8", VA = "0x84A5B8")]
		public CGVSubMesh GetMaterialSubMesh(Material mat, bool createIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x84AD44", Offset = "0x84AD44", VA = "0x84AD44")]
		public Mesh AsMesh()
		{
			return null;
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x84ADBC", Offset = "0x84ADBC", VA = "0x84ADBC")]
		public void ToMesh(ref Mesh msh)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x84AF98", Offset = "0x84AF98", VA = "0x84AF98")]
		public Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x84B0A8", Offset = "0x84B0A8", VA = "0x84B0A8", Slot = "6")]
		public override void RecalculateBounds()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x84B314", Offset = "0x84B314", VA = "0x84B314")]
		public void RecalculateUV2()
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x849B3C", Offset = "0x849B3C", VA = "0x849B3C")]
		public void TRS(Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x600184E")]
		private void copyData<T>(ref T[] src, ref T[] dst, int currentSize, int extraSize)
		{
		}
	}
	[Token(Token = "0x20003BE")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577CA0", Offset = "0x577CA0")]
	public class CGGameObject : CGBounds
	{
		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject Object;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 Translate;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 Rotate;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 Scale;

		[Token(Token = "0x1700027C")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001854")]
			[Address(RVA = "0x83B1C0", Offset = "0x83B1C0", VA = "0x83B1C0")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x83ACE8", Offset = "0x83ACE8", VA = "0x83ACE8")]
		public CGGameObject()
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x83AD60", Offset = "0x83AD60", VA = "0x83AD60")]
		public CGGameObject(CGGameObjectProperties properties)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x83AF90", Offset = "0x83AF90", VA = "0x83AF90")]
		public CGGameObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x83AE48", Offset = "0x83AE48", VA = "0x83AE48")]
		public CGGameObject(GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x83B084", Offset = "0x83B084", VA = "0x83B084")]
		public CGGameObject(CGGameObject source)
		{
		}

		[Token(Token = "0x6001855")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x83B2EC", Offset = "0x83B2EC", VA = "0x83B2EC")]
		public static CGGameObject Get(CGGameObject data, GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
			return null;
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x83B430", Offset = "0x83B430", VA = "0x83B430", Slot = "6")]
		public override void RecalculateBounds()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x577CD8", Offset = "0x577CD8")]
	public class CGSpots : CGData
	{
		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CGSpot[] Points;

		[Token(Token = "0x1700027D")]
		public override int Count
		{
			[Token(Token = "0x600185C")]
			[Address(RVA = "0x847C08", Offset = "0x847C08", VA = "0x847C08", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x8479A4", Offset = "0x8479A4", VA = "0x8479A4")]
		public CGSpots()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x847A10", Offset = "0x847A10", VA = "0x847A10")]
		public CGSpots(params CGSpot[] points)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x847A38", Offset = "0x847A38", VA = "0x847A38")]
		public CGSpots(params List<CGSpot>[] lists)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x847BD4", Offset = "0x847BD4", VA = "0x847BD4")]
		public CGSpots(CGSpots source)
		{
		}

		[Token(Token = "0x600185D")]
		public override T Clone<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x20003C0")]
	public class CGDataRequestParameter
	{
		[Token(Token = "0x600185E")]
		[Address(RVA = "0x83A6EC", Offset = "0x83A6EC", VA = "0x83A6EC")]
		public CGDataRequestParameter()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x83A8B0", Offset = "0x83A8B0", VA = "0x83A8B0")]
		public static implicit operator bool(CGDataRequestParameter a)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003C1")]
	public class CGDataRequestMetaCGOptions : CGDataRequestParameter
	{
		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool CheckHardEdges;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool CheckMaterialID;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool IncludeControlPoints;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool CheckExtendedUV;

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x83A688", Offset = "0x83A688", VA = "0x83A688")]
		public CGDataRequestMetaCGOptions(bool checkEdges, bool checkMaterials, bool includeCP, bool extendedUV)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x83A6F4", Offset = "0x83A6F4", VA = "0x83A6F4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x83A7F0", Offset = "0x83A7F0", VA = "0x83A7F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003C2")]
	public class CGDataRequestRasterization : CGDataRequestParameter
	{
		[Token(Token = "0x20003C3")]
		public enum ModeEnum
		{
			[Token(Token = "0x4001001")]
			Even,
			[Token(Token = "0x4001002")]
			Optimized
		}

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Start;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Length;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Resolution;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float AngleThreshold;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ModeEnum Mode;

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x83A8D8", Offset = "0x83A8D8", VA = "0x83A8D8")]
		public CGDataRequestRasterization(float start, float length, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x83A9A8", Offset = "0x83A9A8", VA = "0x83A9A8")]
		public CGDataRequestRasterization(CGDataRequestRasterization source)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x83AA40", Offset = "0x83AA40", VA = "0x83AA40")]
		public static CGDataRequestRasterization RequestEven(float start, float length, int samplePoints)
		{
			return null;
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x83AAC0", Offset = "0x83AAC0", VA = "0x83AAC0")]
		public static CGDataRequestRasterization RequestOptimized(float start, float length, int resolution, float angle)
		{
			return null;
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x83AB4C", Offset = "0x83AB4C", VA = "0x83AB4C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x83AC34", Offset = "0x83AC34", VA = "0x83AC34", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003C4")]
	public interface INoProcessing
	{
	}
	[Token(Token = "0x20003C5")]
	public interface IExternalInput
	{
		[Token(Token = "0x1700027E")]
		bool SupportsIPE
		{
			[Token(Token = "0x6001869")]
			get;
		}
	}
	[Token(Token = "0x20003C6")]
	public interface IOnRequestProcessing
	{
		[Token(Token = "0x600186A")]
		CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests);
	}
	[Token(Token = "0x20003C7")]
	public interface IOnRequestPath : IOnRequestProcessing
	{
		[Token(Token = "0x1700027F")]
		float PathLength
		{
			[Token(Token = "0x600186B")]
			get;
		}

		[Token(Token = "0x17000280")]
		bool PathIsClosed
		{
			[Token(Token = "0x600186C")]
			get;
		}
	}
	[Token(Token = "0x20003C8")]
	public interface ICGResourceLoader
	{
		[Token(Token = "0x600186D")]
		Component Create(CGModule module, string context);

		[Token(Token = "0x600186E")]
		void Destroy(CGModule module, Component obj, string context, bool kill);
	}
	[Token(Token = "0x20003C9")]
	public interface ICGResourceCollection
	{
		[Token(Token = "0x17000281")]
		int Count
		{
			[Token(Token = "0x600186F")]
			get;
		}

		[Token(Token = "0x17000282")]
		Component[] ItemsArray
		{
			[Token(Token = "0x6001870")]
			get;
		}
	}
	[Token(Token = "0x20003CA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x577D2C", Offset = "0x577D2C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x577D2C", Offset = "0x577D2C")]
	public class CGMeshResource : DuplicateEditorMesh, IPoolable
	{
		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer mRenderer;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider mCollider;

		[Token(Token = "0x17000283")]
		public MeshRenderer Renderer
		{
			[Token(Token = "0x6001872")]
			[Address(RVA = "0x83C90C", Offset = "0x83C90C", VA = "0x83C90C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		public Collider Collider
		{
			[Token(Token = "0x6001873")]
			[Address(RVA = "0x83C9AC", Offset = "0x83C9AC", VA = "0x83C9AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x83C904", Offset = "0x83C904", VA = "0x83C904")]
		public CGMeshResource()
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x83CA4C", Offset = "0x83CA4C", VA = "0x83CA4C")]
		public Mesh Prepare()
		{
			return null;
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x83CAB0", Offset = "0x83CAB0", VA = "0x83CAB0")]
		public bool ColliderMatches(CGColliderEnum type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x83CBDC", Offset = "0x83CBDC", VA = "0x83CBDC")]
		public void RemoveCollider()
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x83CCE0", Offset = "0x83CCE0", VA = "0x83CCE0")]
		public bool UpdateCollider(CGColliderEnum mode, bool convex, PhysicMaterial material)
		{
			return default(bool);
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x83D3CC", Offset = "0x83D3CC", VA = "0x83D3CC")]
		private bool canAddMeshCollider(Bounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x83D43C", Offset = "0x83D43C", VA = "0x83D43C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x83D444", Offset = "0x83D444", VA = "0x83D444", Slot = "5")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x83D448", Offset = "0x83D448", VA = "0x83D448", Slot = "6")]
		public void OnAfterPop()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CB")]
	public class CGMeshResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CGMeshResource> Items;

		[Token(Token = "0x17000285")]
		public int Count
		{
			[Token(Token = "0x600187D")]
			[Address(RVA = "0x83D4BC", Offset = "0x83D4BC", VA = "0x83D4BC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000286")]
		public Component[] ItemsArray
		{
			[Token(Token = "0x600187E")]
			[Address(RVA = "0x83D518", Offset = "0x83D518", VA = "0x83D518", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x83D44C", Offset = "0x83D44C", VA = "0x83D44C")]
		public CGMeshResourceCollection()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	[ExecuteInEditMode]
	public class CGModule : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x577DC8", Offset = "0x577DC8")]
		[SerializeField]
		private CurvyCGEvent m_OnBeforeRefresh;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x577E20", Offset = "0x577E20")]
		[SerializeField]
		private CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private string m_ModuleName;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private bool m_Active;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x577EDC", Offset = "0x577EDC")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x577EDC", Offset = "0x577EDC")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x577EDC", Offset = "0x577EDC")]
		[SerializeField]
		private bool m_RandomizeSeed;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[HideInInspector]
		private int m_Seed;

		[NonSerialized]
		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> UIMessages;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvyGenerator mGenerator;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private int m_UniqueID;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x577FF8", Offset = "0x577FF8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x577FF8", Offset = "0x577FF8")]
		private bool <CircularReferenceError>k__BackingField;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int SortAncestors;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public CGModuleProperties Properties;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public List<CGModuleLink> InputLinks;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public List<CGModuleLink> OutputLinks;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578064", Offset = "0x578064")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x578064", Offset = "0x578064")]
		private Dictionary<string, CGModuleInputSlot> <InputByName>k__BackingField;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5780A0", Offset = "0x5780A0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x5780A0", Offset = "0x5780A0")]
		private Dictionary<string, CGModuleOutputSlot> <OutputByName>k__BackingField;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5780DC", Offset = "0x5780DC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x5780DC", Offset = "0x5780DC")]
		private List<CGModuleInputSlot> <Input>k__BackingField;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578118", Offset = "0x578118")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x578118", Offset = "0x578118")]
		private List<CGModuleOutputSlot> <Output>k__BackingField;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ModuleInfoAttribute mInfo;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool mDirty;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		private bool mInitialized;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		private bool mIsConfiguredInternal;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
		private bool mStateChangeDirty;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool mLastIsConfiguredState;

		[Token(Token = "0x17000287")]
		public CurvyCGEvent OnBeforeRefresh
		{
			[Token(Token = "0x6001880")]
			[Address(RVA = "0x83DAC8", Offset = "0x83DAC8", VA = "0x83DAC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001881")]
			[Address(RVA = "0x83DAD0", Offset = "0x83DAD0", VA = "0x83DAD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000288")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6001882")]
			[Address(RVA = "0x83DAE4", Offset = "0x83DAE4", VA = "0x83DAE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001883")]
			[Address(RVA = "0x83DAEC", Offset = "0x83DAEC", VA = "0x83DAEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000289")]
		public string ModuleName
		{
			[Token(Token = "0x6001886")]
			[Address(RVA = "0x83DBD8", Offset = "0x83DBD8", VA = "0x83DBD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001887")]
			[Address(RVA = "0x83DBE0", Offset = "0x83DBE0", VA = "0x83DBE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public bool Active
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0x83DEA4", Offset = "0x83DEA4", VA = "0x83DEA4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001889")]
			[Address(RVA = "0x83DEAC", Offset = "0x83DEAC", VA = "0x83DEAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700028B")]
		public int Seed
		{
			[Token(Token = "0x600188A")]
			[Address(RVA = "0x83E034", Offset = "0x83E034", VA = "0x83E034")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600188B")]
			[Address(RVA = "0x83E03C", Offset = "0x83E03C", VA = "0x83E03C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028C")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x600188C")]
			[Address(RVA = "0x83E054", Offset = "0x83E054", VA = "0x83E054")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600188D")]
			[Address(RVA = "0x83E05C", Offset = "0x83E05C", VA = "0x83E05C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public CurvyGenerator Generator
		{
			[Token(Token = "0x600188E")]
			[Address(RVA = "0x83A368", Offset = "0x83A368", VA = "0x83A368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		public int UniqueID
		{
			[Token(Token = "0x600188F")]
			[Address(RVA = "0x83E07C", Offset = "0x83E07C", VA = "0x83E07C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028F")]
		public bool CircularReferenceError
		{
			[Token(Token = "0x6001890")]
			[Address(RVA = "0x83E084", Offset = "0x83E084", VA = "0x83E084")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578154", Offset = "0x578154")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001891")]
			[Address(RVA = "0x83E08C", Offset = "0x83E08C", VA = "0x83E08C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578164", Offset = "0x578164")]
			set
			{
			}
		}

		[Token(Token = "0x17000290")]
		public Dictionary<string, CGModuleInputSlot> InputByName
		{
			[Token(Token = "0x6001892")]
			[Address(RVA = "0x83E098", Offset = "0x83E098", VA = "0x83E098")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578174", Offset = "0x578174")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001893")]
			[Address(RVA = "0x83E0A0", Offset = "0x83E0A0", VA = "0x83E0A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578184", Offset = "0x578184")]
			private set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public Dictionary<string, CGModuleOutputSlot> OutputByName
		{
			[Token(Token = "0x6001894")]
			[Address(RVA = "0x83E0A8", Offset = "0x83E0A8", VA = "0x83E0A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578194", Offset = "0x578194")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001895")]
			[Address(RVA = "0x83E0B0", Offset = "0x83E0B0", VA = "0x83E0B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5781A4", Offset = "0x5781A4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000292")]
		public List<CGModuleInputSlot> Input
		{
			[Token(Token = "0x6001896")]
			[Address(RVA = "0x83E0B8", Offset = "0x83E0B8", VA = "0x83E0B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5781B4", Offset = "0x5781B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001897")]
			[Address(RVA = "0x83E0C0", Offset = "0x83E0C0", VA = "0x83E0C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5781C4", Offset = "0x5781C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000293")]
		public List<CGModuleOutputSlot> Output
		{
			[Token(Token = "0x6001898")]
			[Address(RVA = "0x83E0C8", Offset = "0x83E0C8", VA = "0x83E0C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5781D4", Offset = "0x5781D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001899")]
			[Address(RVA = "0x83E0D0", Offset = "0x83E0D0", VA = "0x83E0D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5781E4", Offset = "0x5781E4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public ModuleInfoAttribute Info
		{
			[Token(Token = "0x600189A")]
			[Address(RVA = "0x83E0D8", Offset = "0x83E0D8", VA = "0x83E0D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000295")]
		public bool Dirty
		{
			[Token(Token = "0x600189B")]
			[Address(RVA = "0x83E254", Offset = "0x83E254", VA = "0x83E254")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600189C")]
			[Address(RVA = "0x83DF04", Offset = "0x83DF04", VA = "0x83DF04")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public virtual bool IsConfigured
		{
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0x83FF5C", Offset = "0x83FF5C", VA = "0x83FF5C", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000297")]
		public virtual bool IsInitialized
		{
			[Token(Token = "0x60018A4")]
			[Address(RVA = "0x84044C", Offset = "0x84044C", VA = "0x84044C", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x83D918", Offset = "0x83D918", VA = "0x83D918")]
		public CGModule()
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x83DB00", Offset = "0x83DB00", VA = "0x83DB00")]
		protected CurvyCGEventArgs OnBeforeRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x83DB6C", Offset = "0x83DB6C", VA = "0x83DB6C")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x83E490", Offset = "0x83E490", VA = "0x83E490", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x83E4E8", Offset = "0x83E4E8", VA = "0x83E4E8", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x83E57C", Offset = "0x83E57C", VA = "0x83E57C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x83EE74", Offset = "0x83EE74", VA = "0x83EE74", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x83EE78", Offset = "0x83EE78", VA = "0x83EE78", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x83FF54", Offset = "0x83FF54", VA = "0x83FF54")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x840454", Offset = "0x840454", VA = "0x840454", Slot = "11")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x8404B0", Offset = "0x8404B0", VA = "0x8404B0", Slot = "12")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x8405B8", Offset = "0x8405B8", VA = "0x8405B8")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x8406F8", Offset = "0x8406F8", VA = "0x8406F8", Slot = "13")]
		public virtual void OnStateChange()
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x840830", Offset = "0x840830", VA = "0x840830", Slot = "14")]
		public virtual void OnTemplateCreated()
		{
		}

		[Token(Token = "0x60018AA")]
		protected T GetRequestParameter<T>(ref CGDataRequestParameter[] requests) where T : CGDataRequestParameter
		{
			return null;
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x840834", Offset = "0x840834", VA = "0x840834")]
		protected void RemoveRequestParameter(ref CGDataRequestParameter[] requests, CGDataRequestParameter request)
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x84090C", Offset = "0x84090C", VA = "0x84090C")]
		public CGModuleLink GetOutputLink(CGModuleOutputSlot outSlot, CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x840A18", Offset = "0x840A18", VA = "0x840A18")]
		public List<CGModuleLink> GetOutputLinks(CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x840B5C", Offset = "0x840B5C", VA = "0x840B5C")]
		public CGModuleLink GetInputLink(CGModuleInputSlot inSlot, CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x840B78", Offset = "0x840B78", VA = "0x840B78")]
		public List<CGModuleLink> GetInputLinks(CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x840928", Offset = "0x840928", VA = "0x840928")]
		private CGModuleLink GetLink(List<CGModuleLink> lst, CGModuleSlot source, CGModuleSlot target)
		{
			return null;
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x840A2C", Offset = "0x840A2C", VA = "0x840A2C")]
		private List<CGModuleLink> GetLinks(List<CGModuleLink> lst, CGModuleSlot source)
		{
			return null;
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x840DAC", Offset = "0x840DAC", VA = "0x840DAC")]
		public CGModule CopyTo(CurvyGenerator targetGenerator)
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x840F4C", Offset = "0x840F4C", VA = "0x840F4C")]
		public Component AddManagedResource(string resourceName, string context = "", int index = -1)
		{
			return null;
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x83F900", Offset = "0x83F900", VA = "0x83F900")]
		public void DeleteManagedResource(string resourceName, Component res, string context = "", bool dontUsePool = false)
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x8416DC", Offset = "0x8416DC", VA = "0x8416DC")]
		public bool IsManagedResource(Component res)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x8412C8", Offset = "0x8412C8", VA = "0x8412C8")]
		protected void RenameResource(string resourceName, Component resource, int index = -1)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x8417DC", Offset = "0x8417DC", VA = "0x8417DC")]
		protected PrefabPool GetPrefabPool(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x841948", Offset = "0x841948", VA = "0x841948")]
		public List<IPool> GetAllPrefabPools()
		{
			return null;
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x841A20", Offset = "0x841A20", VA = "0x841A20")]
		public void DeleteAllPrefabPools()
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x841AF8", Offset = "0x841AF8", VA = "0x841AF8")]
		public void Delete()
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x841BA4", Offset = "0x841BA4", VA = "0x841BA4")]
		public CGModuleInputSlot GetInputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x83F9DC", Offset = "0x83F9DC", VA = "0x83F9DC")]
		public List<CGModuleInputSlot> GetInputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x83A378", Offset = "0x83A378", VA = "0x83A378")]
		public CGModuleOutputSlot GetOutputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x83FBFC", Offset = "0x83FBFC", VA = "0x83FBFC")]
		public List<CGModuleOutputSlot> GetOutputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x83F410", Offset = "0x83F410", VA = "0x83F410")]
		public bool GetManagedResources(out List<Component> components, out List<string> componentNames)
		{
			return default(bool);
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x840EFC", Offset = "0x840EFC", VA = "0x840EFC")]
		public int SetUniqueIdINTERNAL()
		{
			return default(int);
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x841C3C", Offset = "0x841C3C", VA = "0x841C3C")]
		internal void initializeSort()
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x841D14", Offset = "0x841D14", VA = "0x841D14")]
		internal List<CGModule> decrementChilds()
		{
			return null;
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x841FD4", Offset = "0x841FD4", VA = "0x841FD4")]
		internal void doRefresh()
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x842138", Offset = "0x842138", VA = "0x842138")]
		private void setSeed(int seed)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x83E108", Offset = "0x83E108", VA = "0x83E108")]
		internal ModuleInfoAttribute getInfo()
		{
			return null;
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x842144", Offset = "0x842144", VA = "0x842144")]
		private bool usesRandom()
		{
			return default(bool);
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x83E9C4", Offset = "0x83E9C4", VA = "0x83E9C4")]
		private void loadSlots()
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x8421B8", Offset = "0x8421B8", VA = "0x8421B8")]
		private SlotInfo getSlotInfo(FieldInfo f)
		{
			return null;
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x83F20C", Offset = "0x83F20C", VA = "0x83F20C")]
		private void setTreeDirtyStateChange()
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x83E25C", Offset = "0x83E25C", VA = "0x83E25C")]
		private void setTreeDirtyState()
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x8427B0", Offset = "0x8427B0", VA = "0x8427B0")]
		public void checkOnStateChangedINTERNAL()
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x83DC9C", Offset = "0x83DC9C", VA = "0x83DC9C")]
		public void renameManagedResourcesINTERNAL()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x5781F4", Offset = "0x5781F4")]
	public class ModuleInfoAttribute : Attribute, IComparable
	{
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string MenuName;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ModuleName;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UsesRandom;

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x84F43C", Offset = "0x84F43C", VA = "0x84F43C")]
		public ModuleInfoAttribute(string name)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x84F468", Offset = "0x84F468", VA = "0x84F468", Slot = "6")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20003CE")]
	public class CGModuleProperties
	{
		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect Dimensions;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinWidth;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LabelWidth;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color BackgroundColor;

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x83DA88", Offset = "0x83DA88", VA = "0x83DA88")]
		public CGModuleProperties()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CF")]
	public class CGModuleLink
	{
		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_ModuleID;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_TargetModuleID;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string m_TargetSlotName;

		[Token(Token = "0x17000298")]
		public int ModuleID
		{
			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x8439C8", Offset = "0x8439C8", VA = "0x8439C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000299")]
		public string SlotName
		{
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x8439D0", Offset = "0x8439D0", VA = "0x8439D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public int TargetModuleID
		{
			[Token(Token = "0x60018D4")]
			[Address(RVA = "0x842B4C", Offset = "0x842B4C", VA = "0x842B4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700029B")]
		public string TargetSlotName
		{
			[Token(Token = "0x60018D5")]
			[Address(RVA = "0x842C08", Offset = "0x842C08", VA = "0x842C08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x8438F8", Offset = "0x8438F8", VA = "0x8438F8")]
		public CGModuleLink(int sourceID, string sourceSlotName, int targetID, string targetSlotName)
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x842C38", Offset = "0x842C38", VA = "0x842C38")]
		public CGModuleLink(CGModuleSlot source, CGModuleSlot target)
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x8439D8", Offset = "0x8439D8", VA = "0x8439D8")]
		public bool IsSame(CGModuleLink o)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x840B8C", Offset = "0x840B8C", VA = "0x840B8C")]
		public bool IsSame(CGModuleSlot source, CGModuleSlot target)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x843AE4", Offset = "0x843AE4", VA = "0x843AE4")]
		public bool IsTo(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x840CDC", Offset = "0x840CDC", VA = "0x840CDC")]
		public bool IsFrom(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x843BB4", Offset = "0x843BB4", VA = "0x843BB4")]
		public bool IsUsing(CGModule module)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x843C08", Offset = "0x843C08", VA = "0x843C08")]
		public bool IsBetween(CGModuleSlot one, CGModuleSlot another)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x843C84", Offset = "0x843C84", VA = "0x843C84")]
		public void SetModuleIDIINTERNAL(int moduleID, int targetModuleID)
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x842C10", Offset = "0x842C10", VA = "0x842C10")]
		public static implicit operator bool(CGModuleLink a)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x843C90", Offset = "0x843C90", VA = "0x843C90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D0")]
	public class CGModuleSlot
	{
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578248", Offset = "0x578248")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x578248", Offset = "0x578248")]
		private CGModule <Module>k__BackingField;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578284", Offset = "0x578284")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x578284", Offset = "0x578284")]
		private SlotInfo <Info>k__BackingField;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5782C0", Offset = "0x5782C0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x5782C0", Offset = "0x5782C0")]
		private Vector2 <Origin>k__BackingField;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5782FC", Offset = "0x5782FC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x5782FC", Offset = "0x5782FC")]
		private Rect <DropZone>k__BackingField;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<CGModuleSlot> mLinkedSlots;

		[Token(Token = "0x1700029C")]
		public CGModule Module
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x83A358", Offset = "0x83A358", VA = "0x83A358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578338", Offset = "0x578338")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x8421B0", Offset = "0x8421B0", VA = "0x8421B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578348", Offset = "0x578348")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public SlotInfo Info
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x83A360", Offset = "0x83A360", VA = "0x83A360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578358", Offset = "0x578358")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0x84268C", Offset = "0x84268C", VA = "0x84268C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578368", Offset = "0x578368")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public Vector2 Origin
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x84475C", Offset = "0x84475C", VA = "0x84475C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578378", Offset = "0x578378")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x844764", Offset = "0x844764", VA = "0x844764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578388", Offset = "0x578388")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public Rect DropZone
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x84476C", Offset = "0x84476C", VA = "0x84476C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x578398", Offset = "0x578398")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x844778", Offset = "0x844778", VA = "0x844778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5783A8", Offset = "0x5783A8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public bool IsLinked
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x840258", Offset = "0x840258", VA = "0x840258")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A1")]
		public bool IsLinkedAndConfigured
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x844784", Offset = "0x844784", VA = "0x844784")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A2")]
		public IOnRequestProcessing OnRequestModule
		{
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x843800", Offset = "0x843800", VA = "0x843800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A3")]
		public IOnRequestPath OnRequestPathModule
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x844888", Offset = "0x844888", VA = "0x844888")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A4")]
		public IExternalInput ExternalInput
		{
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x8448D8", Offset = "0x8448D8", VA = "0x8448D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A5")]
		public List<CGModuleSlot> LinkedSlots
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x841F4C", Offset = "0x841F4C", VA = "0x841F4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A6")]
		public int Count
		{
			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x8403E8", Offset = "0x8403E8", VA = "0x8403E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A7")]
		public string Name
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x84394C", Offset = "0x84394C", VA = "0x84394C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x8427F0", Offset = "0x8427F0", VA = "0x8427F0")]
		public CGModuleSlot()
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x842FF0", Offset = "0x842FF0", VA = "0x842FF0")]
		public bool HasLinkTo(CGModuleSlot other)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x842694", Offset = "0x842694", VA = "0x842694")]
		public List<CGModule> GetLinkedModules()
		{
			return null;
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x8430BC", Offset = "0x8430BC", VA = "0x8430BC", Slot = "4")]
		public virtual void LinkTo(CGModuleSlot other)
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x843420", Offset = "0x843420", VA = "0x843420", Slot = "5")]
		public virtual void UnlinkFrom(CGModuleSlot other)
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x844928", Offset = "0x844928", VA = "0x844928", Slot = "6")]
		public virtual void UnlinkAll()
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x8406F0", Offset = "0x8406F0", VA = "0x8406F0")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x83FE0C", Offset = "0x83FE0C", VA = "0x83FE0C")]
		public void ReInitializeLinkedTargetModules()
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x842B48", Offset = "0x842B48", VA = "0x842B48", Slot = "7")]
		protected virtual void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x84492C", Offset = "0x84492C", VA = "0x84492C")]
		public static implicit operator bool(CGModuleSlot a)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x844954", Offset = "0x844954", VA = "0x844954", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003D1")]
	public class CGModuleInputSlot : CGModuleSlot
	{
		[Token(Token = "0x170002A8")]
		public InputSlotInfo InputInfo
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x8401D4", Offset = "0x8401D4", VA = "0x8401D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x8427E8", Offset = "0x8427E8", VA = "0x8427E8")]
		public CGModuleInputSlot()
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x8427F8", Offset = "0x8427F8", VA = "0x8427F8", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x842CD0", Offset = "0x842CD0", VA = "0x842CD0", Slot = "6")]
		public override void UnlinkAll()
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x842E0C", Offset = "0x842E0C", VA = "0x842E0C", Slot = "4")]
		public override void LinkTo(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x8431DC", Offset = "0x8431DC", VA = "0x8431DC", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x8402DC", Offset = "0x8402DC", VA = "0x8402DC")]
		public CGModuleOutputSlot SourceSlot(int index = 0)
		{
			return null;
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x843540", Offset = "0x843540", VA = "0x843540", Slot = "8")]
		public virtual bool IsValidTarget(CGModuleOutputSlot source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x843850", Offset = "0x843850", VA = "0x843850")]
		private CGModule SourceModule(int index)
		{
			return null;
		}

		[Token(Token = "0x6001903")]
		public T GetData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6001904")]
		public List<T> GetAllData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6001905")]
		private CGData[] GetData<T>(int slotIndex, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6001906")]
		private CGData[] cloneData<T>(ref CGData[] source) where T : CGData
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003D2")]
	public class CGModuleOutputSlot : CGModuleSlot
	{
		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CGData[] Data;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CGDataRequestParameter[] LastRequestParameters;

		[Token(Token = "0x170002A9")]
		public OutputSlotInfo OutputInfo
		{
			[Token(Token = "0x6001908")]
			[Address(RVA = "0x843694", Offset = "0x843694", VA = "0x843694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AA")]
		public bool HasData
		{
			[Token(Token = "0x600190C")]
			[Address(RVA = "0x8446B0", Offset = "0x8446B0", VA = "0x8446B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x843E84", Offset = "0x843E84", VA = "0x843E84")]
		public CGModuleOutputSlot()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x843EF0", Offset = "0x843EF0", VA = "0x843EF0", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x844240", Offset = "0x844240", VA = "0x844240", Slot = "4")]
		public override void LinkTo(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x84446C", Offset = "0x84446C", VA = "0x84446C", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x8407CC", Offset = "0x8407CC", VA = "0x8407CC")]
		public void ClearData()
		{
		}

		[Token(Token = "0x600190E")]
		public void SetData<T>(List<T> data) where T : CGData
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x8446DC", Offset = "0x8446DC", VA = "0x8446DC")]
		public void SetData(params CGData[] data)
		{
		}

		[Token(Token = "0x6001910")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6001911")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}
	}
	[Token(Token = "0x20003D3")]
	public class SlotInfo : Attribute, IComparable
	{
		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Type[] DataTypes;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Tooltip;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Array;

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x8F027C", Offset = "0x8F027C", VA = "0x8F027C")]
		protected SlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x8F10BC", Offset = "0x8F10BC", VA = "0x8F10BC")]
		protected SlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x8F10E8", Offset = "0x8F10E8", VA = "0x8F10E8", Slot = "6")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003D4")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x578418", Offset = "0x578418")]
	public class InputSlotInfo : SlotInfo
	{
		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool RequestDataOnly;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool Optional;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool ModifiesData;

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x84F420", Offset = "0x84F420", VA = "0x84F420")]
		public InputSlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x84F428", Offset = "0x84F428", VA = "0x84F428")]
		public InputSlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x843718", Offset = "0x843718", VA = "0x843718")]
		public bool IsValidFrom(Type outType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D5")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x578474", Offset = "0x578474")]
	public class OutputSlotInfo : SlotInfo
	{
		[Token(Token = "0x170002AB")]
		public Type DataType
		{
			[Token(Token = "0x600191A")]
			[Address(RVA = "0x8F02B4", Offset = "0x8F02B4", VA = "0x8F02B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x8F01A4", Offset = "0x8F01A4", VA = "0x8F01A4")]
		public OutputSlotInfo(Type type)
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x8F01B4", Offset = "0x8F01B4", VA = "0x8F01B4")]
		public OutputSlotInfo(string name, Type type)
		{
		}
	}
	[Token(Token = "0x20003D6")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x5784B0", Offset = "0x5784B0")]
	public class ResourceLoaderAttribute : Attribute
	{
		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ResourceName;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x8F02F0", Offset = "0x8F02F0", VA = "0x8F02F0")]
		public ResourceLoaderAttribute(string resName)
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class CGResourceHandler
	{
		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ICGResourceLoader> Loader;

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x846124", Offset = "0x846124", VA = "0x846124")]
		public CGResourceHandler()
		{
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x84106C", Offset = "0x84106C", VA = "0x84106C")]
		public static Component CreateResource(CGModule module, string resName, string context)
		{
			return null;
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x841468", Offset = "0x841468", VA = "0x841468")]
		public static void DestroyResource(CGModule module, string resName, Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x84612C", Offset = "0x84612C", VA = "0x84612C")]
		private static void getLoaders()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0x5784C4", Offset = "0x5784C4")]
	public class CGSplineResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6001921")]
		[Address(RVA = "0x847178", Offset = "0x847178", VA = "0x847178")]
		public CGSplineResourceLoader()
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x847180", Offset = "0x847180", VA = "0x847180", Slot = "4")]
		public Component Create(CGModule module, string context)
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x8473AC", Offset = "0x8473AC", VA = "0x8473AC", Slot = "5")]
		public void Destroy(CGModule module, Component obj, string context, bool kill)
		{
		}
	}
	[Token(Token = "0x20003D9")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0x5784FC", Offset = "0x5784FC")]
	public class CGShapeResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6001924")]
		[Address(RVA = "0x846F18", Offset = "0x846F18", VA = "0x846F18")]
		public CGShapeResourceLoader()
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x846F20", Offset = "0x846F20", VA = "0x846F20", Slot = "4")]
		public Component Create(CGModule module, string context)
		{
			return null;
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x8470D0", Offset = "0x8470D0", VA = "0x8470D0", Slot = "5")]
		public void Destroy(CGModule module, Component obj, string context, bool kill)
		{
		}
	}
	[Token(Token = "0x20003DA")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0x578534", Offset = "0x578534")]
	public class CGMeshResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6001927")]
		[Address(RVA = "0x83D574", Offset = "0x83D574", VA = "0x83D574")]
		public CGMeshResourceLoader()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x83D57C", Offset = "0x83D57C", VA = "0x83D57C", Slot = "4")]
		public Component Create(CGModule module, string context)
		{
			return null;
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x83D610", Offset = "0x83D610", VA = "0x83D610", Slot = "5")]
		public void Destroy(CGModule module, Component obj, string context, bool kill)
		{
		}
	}
	[Token(Token = "0x20003DB")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0x57856C", Offset = "0x57856C")]
	public class CGGameObjectResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x600192A")]
		[Address(RVA = "0x83BE3C", Offset = "0x83BE3C", VA = "0x83BE3C")]
		public CGGameObjectResourceLoader()
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x83BE44", Offset = "0x83BE44", VA = "0x83BE44", Slot = "4")]
		public Component Create(CGModule module, string context)
		{
			return null;
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x83BFBC", Offset = "0x83BFBC", VA = "0x83BFBC", Slot = "5")]
		public void Destroy(CGModule module, Component obj, string context, bool kill)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003DC")]
	public class CGGameObjectResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transform> Items;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> PoolNames;

		[Token(Token = "0x170002AC")]
		public int Count
		{
			[Token(Token = "0x600192E")]
			[Address(RVA = "0x83BD84", Offset = "0x83BD84", VA = "0x83BD84", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AD")]
		public Component[] ItemsArray
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0x83BDE0", Offset = "0x83BDE0", VA = "0x83BDE0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x83BCEC", Offset = "0x83BCEC", VA = "0x83BCEC")]
		public CGGameObjectResourceCollection()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public static class CGUtility
	{
		[Token(Token = "0x6001930")]
		[Address(RVA = "0x847C30", Offset = "0x847C30", VA = "0x847C30")]
		public static int CalculateSamplePointsCacheSize(int density, params float[] pathlengths)
		{
			return default(int);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x847DB8", Offset = "0x847DB8", VA = "0x847DB8")]
		public static Vector2[] CalculateUV2(Vector2[] uv)
		{
			return null;
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x847FA8", Offset = "0x847FA8", VA = "0x847FA8")]
		public static List<ControlPointOption> GetControlPointsWithOptions(CGDataRequestMetaCGOptions options, CurvySpline shape, float startDist, float endDist, bool optimize, out int initialMaterialID, out float initialMaxStep)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DE")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5785B4", Offset = "0x5785B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5785B4", Offset = "0x5785B4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5785B4", Offset = "0x5785B4")]
	public class CurvyGenerator : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x578674", Offset = "0x578674")]
		private float m_MinDistance;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5786DC", Offset = "0x5786DC")]
		[SerializeField]
		private bool m_ShowDebug;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[SerializeField]
		private bool m_AutoRefresh;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578738", Offset = "0x578738")]
		[Positive]
		[SerializeField]
		private int m_RefreshDelay;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578818", Offset = "0x578818")]
		[Positive]
		[SerializeField]
		private int m_RefreshDelayEditor;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x5788F8", Offset = "0x5788F8")]
		[SerializeField]
		private CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<CGModule> Modules;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		internal int m_LastModuleID;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5789A8", Offset = "0x5789A8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x5789A8", Offset = "0x5789A8")]
		private bool <Destroying>k__BackingField;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Dictionary<int, CGModule> ModulesByID;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool mInitialized;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool mInitializedPhaseOne;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool mNeedSort;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double mLastUpdateTime;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PoolManager mPoolManager;

		[Token(Token = "0x170002AE")]
		public float MinDistance
		{
			[Token(Token = "0x6001934")]
			[Address(RVA = "0x84D908", Offset = "0x84D908", VA = "0x84D908")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001935")]
			[Address(RVA = "0x84D910", Offset = "0x84D910", VA = "0x84D910")]
			set
			{
			}
		}

		[Token(Token = "0x170002AF")]
		public bool ShowDebug
		{
			[Token(Token = "0x6001936")]
			[Address(RVA = "0x84DD38", Offset = "0x84DD38", VA = "0x84DD38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001937")]
			[Address(RVA = "0x84DD40", Offset = "0x84DD40", VA = "0x84DD40")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public bool AutoRefresh
		{
			[Token(Token = "0x6001938")]
			[Address(RVA = "0x84DD60", Offset = "0x84DD60", VA = "0x84DD60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001939")]
			[Address(RVA = "0x84DD68", Offset = "0x84DD68", VA = "0x84DD68")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public int RefreshDelay
		{
			[Token(Token = "0x600193A")]
			[Address(RVA = "0x84DD88", Offset = "0x84DD88", VA = "0x84DD88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600193B")]
			[Address(RVA = "0x84DD90", Offset = "0x84DD90", VA = "0x84DD90")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public int RefreshDelayEditor
		{
			[Token(Token = "0x600193C")]
			[Address(RVA = "0x84DE20", Offset = "0x84DE20", VA = "0x84DE20")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600193D")]
			[Address(RVA = "0x84DE28", Offset = "0x84DE28", VA = "0x84DE28")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x600193E")]
			[Address(RVA = "0x83BF1C", Offset = "0x83BF1C", VA = "0x83BF1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x600193F")]
			[Address(RVA = "0x84DEB8", Offset = "0x84DEB8", VA = "0x84DEB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001940")]
			[Address(RVA = "0x84DEC0", Offset = "0x84DEC0", VA = "0x84DEC0")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public bool IsInitialized
		{
			[Token(Token = "0x6001941")]
			[Address(RVA = "0x83A370", Offset = "0x83A370", VA = "0x83A370")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B6")]
		public bool Destroying
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0x84DED4", Offset = "0x84DED4", VA = "0x84DED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5789E4", Offset = "0x5789E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001943")]
			[Address(RVA = "0x84DEDC", Offset = "0x84DEDC", VA = "0x84DEDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5789F4", Offset = "0x5789F4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x84D828", Offset = "0x84D828", VA = "0x84D828")]
		public CurvyGenerator()
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x84DEE8", Offset = "0x84DEE8", VA = "0x84DEE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x84DEEC", Offset = "0x84DEEC", VA = "0x84DEEC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x84DF20", Offset = "0x84DF20", VA = "0x84DF20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x84DF30", Offset = "0x84DF30", VA = "0x84DF30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x84DF3C", Offset = "0x84DF3C", VA = "0x84DF3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x84E43C", Offset = "0x84E43C", VA = "0x84E43C")]
		public static CurvyGenerator Create()
		{
			return null;
		}

		[Token(Token = "0x600194A")]
		public T AddModule<T>() where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x84E568", Offset = "0x84E568", VA = "0x84E568")]
		public CGModule AddModule(Type type)
		{
			return null;
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x84E758", Offset = "0x84E758", VA = "0x84E758")]
		public void ArrangeModules()
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x84EA84", Offset = "0x84EA84", VA = "0x84EA84")]
		public void Clear()
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x84EBD4", Offset = "0x84EBD4", VA = "0x84EBD4")]
		public void DeleteModule(CGModule module)
		{
		}

		[Token(Token = "0x600194F")]
		public List<T> FindModules<T>(bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x84EC60", Offset = "0x84EC60", VA = "0x84EC60")]
		public List<CGModule> GetModules(bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x842B54", Offset = "0x842B54", VA = "0x842B54")]
		public CGModule GetModule(int moduleID, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001952")]
		public T GetModule<T>(int moduleID, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x83A538", Offset = "0x83A538", VA = "0x83A538")]
		public CGModule GetModule(string moduleName, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001954")]
		public T GetModule<T>(string moduleName, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x84EDC8", Offset = "0x84EDC8", VA = "0x84EDC8")]
		public CGModuleOutputSlot GetModuleOutputSlot(int moduleId, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x84EE88", Offset = "0x84EE88", VA = "0x84EE88")]
		public CGModuleOutputSlot GetModuleOutputSlot(string moduleName, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x84DFE4", Offset = "0x84DFE4", VA = "0x84DFE4")]
		public void Initialize(bool force = false)
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x84D9C4", Offset = "0x84D9C4", VA = "0x84D9C4")]
		public void Refresh(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x84F3B4", Offset = "0x84F3B4", VA = "0x84F3B4")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x84EA88", Offset = "0x84EA88", VA = "0x84EA88")]
		private void clearModules()
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x83E7F0", Offset = "0x83E7F0", VA = "0x83E7F0")]
		public string getUniqueModuleNameINTERNAL(string name)
		{
			return null;
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x83E028", Offset = "0x83E028", VA = "0x83E028")]
		internal void sortModulesINTERNAL()
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x84EF48", Offset = "0x84EF48", VA = "0x84EF48")]
		private bool doSortModules()
		{
			return default(bool);
		}
	}
}
namespace FluffyUnderware.Curvy
{
	[Token(Token = "0x20003DF")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x578A04", Offset = "0x578A04")]
	public class MetaCGOptions : CurvyMetadataBase, ICurvyMetadata
	{
		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Positive]
		[SerializeField]
		private int m_MaterialID;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool m_HardEdge;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive]
		[SerializeField]
		private float m_MaxStepDistance;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x578AD0", Offset = "0x578AD0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578AD0", Offset = "0x578AD0")]
		[SerializeField]
		private bool m_UVEdge;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Positive]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578BCC", Offset = "0x578BCC")]
		[SerializeField]
		private bool m_ExplicitU;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578C98", Offset = "0x578C98")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x578C98", Offset = "0x578C98")]
		[Positive]
		[SerializeField]
		private float m_FirstU;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x578D8C", Offset = "0x578D8C")]
		[Positive]
		[SerializeField]
		private float m_SecondU;

		[Token(Token = "0x170002B7")]
		public int MaterialID
		{
			[Token(Token = "0x600195F")]
			[Address(RVA = "0x8F2788", Offset = "0x8F2788", VA = "0x8F2788")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001960")]
			[Address(RVA = "0x8F2790", Offset = "0x8F2790", VA = "0x8F2790")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public bool HardEdge
		{
			[Token(Token = "0x6001961")]
			[Address(RVA = "0x8F13CC", Offset = "0x8F13CC", VA = "0x8F13CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001962")]
			[Address(RVA = "0x8F2838", Offset = "0x8F2838", VA = "0x8F2838")]
			set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public bool UVEdge
		{
			[Token(Token = "0x6001963")]
			[Address(RVA = "0x8F2144", Offset = "0x8F2144", VA = "0x8F2144")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001964")]
			[Address(RVA = "0x8F2860", Offset = "0x8F2860", VA = "0x8F2860")]
			set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public bool ExplicitU
		{
			[Token(Token = "0x6001965")]
			[Address(RVA = "0x8F2218", Offset = "0x8F2218", VA = "0x8F2218")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001966")]
			[Address(RVA = "0x8F2888", Offset = "0x8F2888", VA = "0x8F2888")]
			set
			{
			}
		}

		[Token(Token = "0x170002BB")]
		public float FirstU
		{
			[Token(Token = "0x6001967")]
			[Address(RVA = "0x8F214C", Offset = "0x8F214C", VA = "0x8F214C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001968")]
			[Address(RVA = "0x8F28B0", Offset = "0x8F28B0", VA = "0x8F28B0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public float SecondU
		{
			[Token(Token = "0x6001969")]
			[Address(RVA = "0x8F21A4", Offset = "0x8F21A4", VA = "0x8F21A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600196A")]
			[Address(RVA = "0x8F28CC", Offset = "0x8F28CC", VA = "0x8F28CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002BD")]
		public float MaxStepDistance
		{
			[Token(Token = "0x600196B")]
			[Address(RVA = "0x8F28E8", Offset = "0x8F28E8", VA = "0x8F28E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600196C")]
			[Address(RVA = "0x8F28F0", Offset = "0x8F28F0", VA = "0x8F28F0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public bool HasDifferentMaterial
		{
			[Token(Token = "0x600196D")]
			[Address(RVA = "0x8F2220", Offset = "0x8F2220", VA = "0x8F2220")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BF")]
		private bool showUVEdge
		{
			[Token(Token = "0x600196E")]
			[Address(RVA = "0x8F2998", Offset = "0x8F2998", VA = "0x8F2998")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C0")]
		private bool showExplicitU
		{
			[Token(Token = "0x600196F")]
			[Address(RVA = "0x8F2ABC", Offset = "0x8F2ABC", VA = "0x8F2ABC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C1")]
		private bool showFirstU
		{
			[Token(Token = "0x6001970")]
			[Address(RVA = "0x8F2B64", Offset = "0x8F2B64", VA = "0x8F2B64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C2")]
		private bool showSecondU
		{
			[Token(Token = "0x6001971")]
			[Address(RVA = "0x8F2C18", Offset = "0x8F2C18", VA = "0x8F2C18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x8F2780", Offset = "0x8F2780", VA = "0x8F2780")]
		public MetaCGOptions()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x8F2C2C", Offset = "0x8F2C2C", VA = "0x8F2C2C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x8F2154", Offset = "0x8F2154", VA = "0x8F2154")]
		public float GetDefinedFirstU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x8F21AC", Offset = "0x8F21AC", VA = "0x8F21AC")]
		public float GetDefinedSecondU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x8F2CF0", Offset = "0x8F2CF0", VA = "0x8F2CF0")]
		public MetaCGOptions GetPreviousDefined(out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x8F2EA0", Offset = "0x8F2EA0", VA = "0x8F2EA0")]
		public MetaCGOptions GetNextDefined(out CurvySplineSegment cp)
		{
			return null;
		}
	}
	[Token(Token = "0x20003E0")]
	public interface ICurvyMetadata
	{
	}
	[Token(Token = "0x20003E1")]
	public interface ICurvyInterpolatableMetadata : ICurvyMetadata
	{
		[Token(Token = "0x170002C3")]
		object Value
		{
			[Token(Token = "0x6001977")]
			get;
		}

		[Token(Token = "0x6001978")]
		object InterpolateObject(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x20003E2")]
	public interface ICurvyInterpolatableMetadata<U> : ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x6001979")]
		U Interpolate(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x20003E3")]
	public enum OrientationModeEnum
	{
		[Token(Token = "0x4001053")]
		None,
		[Token(Token = "0x4001054")]
		Orientation,
		[Token(Token = "0x4001055")]
		Tangent
	}
	[Token(Token = "0x20003E4")]
	public enum OrientationAxisEnum
	{
		[Token(Token = "0x4001057")]
		Up,
		[Token(Token = "0x4001058")]
		Down,
		[Token(Token = "0x4001059")]
		Forward,
		[Token(Token = "0x400105A")]
		Backward,
		[Token(Token = "0x400105B")]
		Left,
		[Token(Token = "0x400105C")]
		Right
	}
	[Token(Token = "0x20003E5")]
	public enum ConnectionHeadingEnum
	{
		[Token(Token = "0x400105E")]
		Minus = -1,
		[Token(Token = "0x400105F")]
		Sharp,
		[Token(Token = "0x4001060")]
		Plus,
		[Token(Token = "0x4001061")]
		Auto
	}
	[Token(Token = "0x20003E6")]
	public enum CurvyUpdateMethod
	{
		[Token(Token = "0x4001063")]
		Update,
		[Token(Token = "0x4001064")]
		LateUpdate,
		[Token(Token = "0x4001065")]
		FixedUpdate
	}
	[Token(Token = "0x20003E7")]
	public enum CurvyRepeatingOrderEnum
	{
		[Token(Token = "0x4001067")]
		Random,
		[Token(Token = "0x4001068")]
		Row
	}
	[Token(Token = "0x20003E8")]
	public enum CurvyPlane
	{
		[Token(Token = "0x400106A")]
		XY,
		[Token(Token = "0x400106B")]
		XZ,
		[Token(Token = "0x400106C")]
		YZ
	}
	[Token(Token = "0x20003E9")]
	public enum CurvyPositionMode
	{
		[Token(Token = "0x400106E")]
		Relative,
		[Token(Token = "0x400106F")]
		WorldUnits
	}
	[Token(Token = "0x20003EA")]
	public enum CurvyBezierModeEnum
	{
		[Token(Token = "0x4001071")]
		None = 0,
		[Token(Token = "0x4001072")]
		Direction = 1,
		[Token(Token = "0x4001073")]
		Length = 2,
		[Token(Token = "0x4001074")]
		Connections = 4,
		[Token(Token = "0x4001075")]
		Combine = 8
	}
	[Token(Token = "0x20003EB")]
	public enum CurvyAdvBezierModeEnum
	{
		[Token(Token = "0x4001077")]
		None = 0,
		[Token(Token = "0x4001078")]
		Direction = 1,
		[Token(Token = "0x4001079")]
		Length = 2,
		[Token(Token = "0x400107A")]
		Combine = 8
	}
	[Token(Token = "0x20003EC")]
	public enum CurvyInterpolation
	{
		[Token(Token = "0x400107C")]
		Linear,
		[Token(Token = "0x400107D")]
		CatmullRom,
		[Token(Token = "0x400107E")]
		TCB,
		[Token(Token = "0x400107F")]
		Bezier
	}
	[Token(Token = "0x20003ED")]
	public enum CurvyClamping
	{
		[Token(Token = "0x4001081")]
		Clamp,
		[Token(Token = "0x4001082")]
		Loop,
		[Token(Token = "0x4001083")]
		PingPong
	}
	[Token(Token = "0x20003EE")]
	public enum CurvyOrientation
	{
		[Token(Token = "0x4001085")]
		None,
		[Token(Token = "0x4001086")]
		Dynamic,
		[Token(Token = "0x4001087")]
		Static
	}
	[Token(Token = "0x20003EF")]
	public enum CurvyOrientationSwirl
	{
		[Token(Token = "0x4001089")]
		None,
		[Token(Token = "0x400108A")]
		Segment,
		[Token(Token = "0x400108B")]
		AnchorGroup,
		[Token(Token = "0x400108C")]
		AnchorGroupAbs
	}
	[Token(Token = "0x20003F0")]
	[Flags]
	public enum CurvySplineGizmos
	{
		[Token(Token = "0x400108E")]
		None = 0,
		[Token(Token = "0x400108F")]
		Curve = 2,
		[Token(Token = "0x4001090")]
		Approximation = 4,
		[Token(Token = "0x4001091")]
		Tangents = 8,
		[Token(Token = "0x4001092")]
		Orientation = 0x10,
		[Token(Token = "0x4001093")]
		Labels = 0x20,
		[Token(Token = "0x4001094")]
		Metadata = 0x40,
		[Token(Token = "0x4001095")]
		Bounds = 0x80,
		[Token(Token = "0x4001096")]
		All = 0xFFFF
	}
	[Token(Token = "0x20003F1")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x578E68", Offset = "0x578E68")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x578E68", Offset = "0x578E68")]
	public class CurvyConnection : MonoBehaviour
	{
		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Hide]
		private List<CurvySplineSegment> m_ControlPoints;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TTransform mTTransform;

		[Token(Token = "0x170002C4")]
		public List<CurvySplineSegment> ControlPoints
		{
			[Token(Token = "0x600197B")]
			[Address(RVA = "0x89B278", Offset = "0x89B278", VA = "0x89B278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C5")]
		public int Count
		{
			[Token(Token = "0x600197C")]
			[Address(RVA = "0x89B280", Offset = "0x89B280", VA = "0x89B280")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002C6")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x600197D")]
			[Address(RVA = "0x89B2DC", Offset = "0x89B2DC", VA = "0x89B2DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C7")]
		public TTransform TTransform
		{
			[Token(Token = "0x600197E")]
			[Address(RVA = "0x89B348", Offset = "0x89B348", VA = "0x89B348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x89B208", Offset = "0x89B208", VA = "0x89B208")]
		public CurvyConnection()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x89B3E8", Offset = "0x89B3E8", VA = "0x89B3E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x89B700", Offset = "0x89B700", VA = "0x89B700")]
		public void Update()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x89BA28", Offset = "0x89BA28", VA = "0x89BA28")]
		public static CurvyConnection Create(params CurvySplineSegment[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x89BC24", Offset = "0x89BC24", VA = "0x89BC24")]
		public void AddControlPoints(params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x89BD70", Offset = "0x89BD70", VA = "0x89BD70")]
		public void AutoSetFollowUp()
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x89C258", Offset = "0x89C258", VA = "0x89C258")]
		public void RemoveControlPoint(CurvySplineSegment controlPoint, bool destroySelfIfEmpty = true)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x89C324", Offset = "0x89C324", VA = "0x89C324")]
		public void Delete()
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x89C3C0", Offset = "0x89C3C0", VA = "0x89C3C0")]
		public List<CurvySplineSegment> OtherControlPoints(CurvySplineSegment source)
		{
			return null;
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x89BC9C", Offset = "0x89BC9C", VA = "0x89BC9C")]
		private void addControlPoint(CurvySplineSegment controlPoint)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x89C464", Offset = "0x89C464", VA = "0x89C464")]
		private void synchronize()
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x89B8D4", Offset = "0x89B8D4", VA = "0x89B8D4")]
		public void SynchronizeINTERNAL(Transform tform)
		{
		}
	}
	[Token(Token = "0x20003F2")]
	[ExecuteInEditMode]
	public class CurvyController : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x20003F3")]
		public enum MoveModeEnum
		{
			[Token(Token = "0x40010C1")]
			Relative,
			[Token(Token = "0x40010C2")]
			AbsoluteExtrapolate,
			[Token(Token = "0x40010C3")]
			AbsolutePrecise
		}

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x578F40", Offset = "0x578F40")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x578F40", Offset = "0x578F40")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Space m_Space;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x578FD4", Offset = "0x578FD4")]
		[SerializeField]
		private CurvyPositionMode m_PositionMode;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57903C", Offset = "0x57903C")]
		[SerializeField]
		private float m_InitialPosition;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x5790C4", Offset = "0x5790C4")]
		[SerializeField]
		private MoveModeEnum m_MoveMode;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private CurvyClamping m_Clamping;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private bool m_PlayAutomatically;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		private bool m_AdaptOnChange;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		private bool m_Animate;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57917C", Offset = "0x57917C")]
		[SerializeField]
		private AnimationCurve m_Animation;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579238", Offset = "0x579238")]
		[SerializeField]
		private float m_TimeScale;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5792F4", Offset = "0x5792F4")]
		[SerializeField]
		private bool m_SingleShot;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5793B0", Offset = "0x5793B0")]
		[SerializeField]
		private bool m_ResetOnStop;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57946C", Offset = "0x57946C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57946C", Offset = "0x57946C")]
		[SerializeField]
		private OrientationModeEnum m_OrientationMode;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x579514", Offset = "0x579514")]
		[SerializeField]
		private OrientationAxisEnum m_OrientationAxis;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Positive]
		[SerializeField]
		private float m_DampingDirection;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Positive]
		[SerializeField]
		private float m_DampingUp;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5795EC", Offset = "0x5795EC")]
		[SerializeField]
		private bool m_IgnoreDirection;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579638", Offset = "0x579638")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x579638", Offset = "0x579638")]
		[SerializeField]
		private float m_OffsetAngle;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579740", Offset = "0x579740")]
		[SerializeField]
		private float m_OffsetRadius;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579800", Offset = "0x579800")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x579800", Offset = "0x579800")]
		[SerializeField]
		private bool m_OffsetCompensation;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x5798F8", Offset = "0x5798F8")]
		[SerializeField]
		protected CurvyControllerEvent m_OnAnimationEnd;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float mTF;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int mDirection;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool mForceUpdate;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float mInitialVirtualPos;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool mIsPrepared;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool mIsPlaying;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool mIsPausing;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float mShotTime;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float mShotStartTF;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float mShotStartDistance;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject mGameObject;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 mDampingDirVelocity;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 mDampingUpVelocity;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float mOffsetCompensation;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 oldPos;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 oldOff;

		[Token(Token = "0x170002C8")]
		public CurvyControllerEvent OnAnimationEnd
		{
			[Token(Token = "0x600198B")]
			[Address(RVA = "0x89CA68", Offset = "0x89CA68", VA = "0x89CA68")]
			get
			{
				return null;
			}
			[Token(Token = "0x600198C")]
			[Address(RVA = "0x89CA70", Offset = "0x89CA70", VA = "0x89CA70")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public Space Space
		{
			[Token(Token = "0x600198D")]
			[Address(RVA = "0x89A434", Offset = "0x89A434", VA = "0x89A434")]
			get
			{
				return default(Space);
			}
			[Token(Token = "0x600198E")]
			[Address(RVA = "0x89CA84", Offset = "0x89CA84", VA = "0x89CA84")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public CurvyPositionMode PositionMode
		{
			[Token(Token = "0x600198F")]
			[Address(RVA = "0x89CA98", Offset = "0x89CA98", VA = "0x89CA98")]
			get
			{
				return default(CurvyPositionMode);
			}
			[Token(Token = "0x6001990")]
			[Address(RVA = "0x89CAA0", Offset = "0x89CAA0", VA = "0x89CAA0")]
			set
			{
			}
		}

		[Token(Token = "0x170002CB")]
		public MoveModeEnum MoveMode
		{
			[Token(Token = "0x6001991")]
			[Address(RVA = "0x89CAFC", Offset = "0x89CAFC", VA = "0x89CAFC")]
			get
			{
				return default(MoveModeEnum);
			}
			[Token(Token = "0x6001992")]
			[Address(RVA = "0x89CB04", Offset = "0x89CB04", VA = "0x89CB04")]
			set
			{
			}
		}

		[Token(Token = "0x170002CC")]
		public bool PlayAutomatically
		{
			[Token(Token = "0x6001993")]
			[Address(RVA = "0x89CB18", Offset = "0x89CB18", VA = "0x89CB18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001994")]
			[Address(RVA = "0x89CB20", Offset = "0x89CB20", VA = "0x89CB20")]
			set
			{
			}
		}

		[Token(Token = "0x170002CD")]
		public virtual bool AdaptOnChange
		{
			[Token(Token = "0x6001995")]
			[Address(RVA = "0x89CB40", Offset = "0x89CB40", VA = "0x89CB40", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001996")]
			[Address(RVA = "0x89CB48", Offset = "0x89CB48", VA = "0x89CB48", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002CE")]
		public bool Animate
		{
			[Token(Token = "0x6001997")]
			[Address(RVA = "0x89CB68", Offset = "0x89CB68", VA = "0x89CB68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001998")]
			[Address(RVA = "0x89CB70", Offset = "0x89CB70", VA = "0x89CB70")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public AnimationCurve Animation
		{
			[Token(Token = "0x6001999")]
			[Address(RVA = "0x89CB90", Offset = "0x89CB90", VA = "0x89CB90")]
			get
			{
				return null;
			}
			[Token(Token = "0x600199A")]
			[Address(RVA = "0x89CB98", Offset = "0x89CB98", VA = "0x89CB98")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		public float TimeScale
		{
			[Token(Token = "0x600199B")]
			[Address(RVA = "0x89CBAC", Offset = "0x89CBAC", VA = "0x89CBAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600199C")]
			[Address(RVA = "0x89CBB4", Offset = "0x89CBB4", VA = "0x89CBB4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public bool SingleShot
		{
			[Token(Token = "0x600199D")]
			[Address(RVA = "0x89CBC8", Offset = "0x89CBC8", VA = "0x89CBC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x89CBD0", Offset = "0x89CBD0", VA = "0x89CBD0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public bool ResetOnStop
		{
			[Token(Token = "0x600199F")]
			[Address(RVA = "0x89CBF0", Offset = "0x89CBF0", VA = "0x89CBF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x89CBF8", Offset = "0x89CBF8", VA = "0x89CBF8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public CurvyClamping Clamping
		{
			[Token(Token = "0x60019A1")]
			[Address(RVA = "0x89CC18", Offset = "0x89CC18", VA = "0x89CC18")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x60019A2")]
			[Address(RVA = "0x89CC20", Offset = "0x89CC20", VA = "0x89CC20")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public OrientationModeEnum OrientationMode
		{
			[Token(Token = "0x60019A3")]
			[Address(RVA = "0x89CC34", Offset = "0x89CC34", VA = "0x89CC34")]
			get
			{
				return default(OrientationModeEnum);
			}
			[Token(Token = "0x60019A4")]
			[Address(RVA = "0x89CC3C", Offset = "0x89CC3C", VA = "0x89CC3C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public OrientationAxisEnum OrientationAxis
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x89CC50", Offset = "0x89CC50", VA = "0x89CC50")]
			get
			{
				return default(OrientationAxisEnum);
			}
			[Token(Token = "0x60019A6")]
			[Address(RVA = "0x89CC58", Offset = "0x89CC58", VA = "0x89CC58")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public float DampingDirection
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x89CC6C", Offset = "0x89CC6C", VA = "0x89CC6C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x89CC74", Offset = "0x89CC74", VA = "0x89CC74")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public float DampingUp
		{
			[Token(Token = "0x60019A9")]
			[Address(RVA = "0x89CD04", Offset = "0x89CD04", VA = "0x89CD04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019AA")]
			[Address(RVA = "0x89CD0C", Offset = "0x89CD0C", VA = "0x89CD0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D8")]
		public bool IgnoreDirection
		{
			[Token(Token = "0x60019AB")]
			[Address(RVA = "0x89CD9C", Offset = "0x89CD9C", VA = "0x89CD9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019AC")]
			[Address(RVA = "0x89CDA4", Offset = "0x89CDA4", VA = "0x89CDA4")]
			set
			{
			}
		}

		[Token(Token = "0x170002D9")]
		public float OffsetAngle
		{
			[Token(Token = "0x60019AD")]
			[Address(RVA = "0x89CDC4", Offset = "0x89CDC4", VA = "0x89CDC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019AE")]
			[Address(RVA = "0x89CDCC", Offset = "0x89CDCC", VA = "0x89CDCC")]
			set
			{
			}
		}

		[Token(Token = "0x170002DA")]
		public float OffsetRadius
		{
			[Token(Token = "0x60019AF")]
			[Address(RVA = "0x89CDE0", Offset = "0x89CDE0", VA = "0x89CDE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0x89CDE8", Offset = "0x89CDE8", VA = "0x89CDE8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		public bool OffsetCompensation
		{
			[Token(Token = "0x60019B1")]
			[Address(RVA = "0x89CDFC", Offset = "0x89CDFC", VA = "0x89CDFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0x89CE04", Offset = "0x89CE04", VA = "0x89CE04")]
			set
			{
			}
		}

		[Token(Token = "0x170002DC")]
		public virtual float InitialPosition
		{
			[Token(Token = "0x60019B3")]
			[Address(RVA = "0x89CE30", Offset = "0x89CE30", VA = "0x89CE30", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019B4")]
			[Address(RVA = "0x89CE38", Offset = "0x89CE38", VA = "0x89CE38", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DD")]
		public virtual float Speed
		{
			[Token(Token = "0x60019B5")]
			[Address(RVA = "0x89CF08", Offset = "0x89CF08", VA = "0x89CF08", Slot = "9")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019B6")]
			[Address(RVA = "0x89CF10", Offset = "0x89CF10", VA = "0x89CF10", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		public virtual float RelativePosition
		{
			[Token(Token = "0x60019B7")]
			[Address(RVA = "0x89CFC0", Offset = "0x89CFC0", VA = "0x89CFC0", Slot = "11")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019B8")]
			[Address(RVA = "0x89CFC8", Offset = "0x89CFC8", VA = "0x89CFC8", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		public virtual float AbsolutePosition
		{
			[Token(Token = "0x60019B9")]
			[Address(RVA = "0x89D038", Offset = "0x89D038", VA = "0x89D038", Slot = "13")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019BA")]
			[Address(RVA = "0x89D04C", Offset = "0x89D04C", VA = "0x89D04C", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x170002E0")]
		public virtual float Position
		{
			[Token(Token = "0x60019BB")]
			[Address(RVA = "0x89D0BC", Offset = "0x89D0BC", VA = "0x89D0BC", Slot = "15")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0x89D0DC", Offset = "0x89D0DC", VA = "0x89D0DC", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		public bool Active
		{
			[Token(Token = "0x60019BD")]
			[Address(RVA = "0x89ADD8", Offset = "0x89ADD8", VA = "0x89ADD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E2")]
		public float DeltaTime
		{
			[Token(Token = "0x60019BE")]
			[Address(RVA = "0x89D16C", Offset = "0x89D16C", VA = "0x89D16C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E3")]
		public float AbsSpeed
		{
			[Token(Token = "0x60019BF")]
			[Address(RVA = "0x89D178", Offset = "0x89D178", VA = "0x89D178")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E4")]
		public bool IsPlaying
		{
			[Token(Token = "0x60019C0")]
			[Address(RVA = "0x89AE78", Offset = "0x89AE78", VA = "0x89AE78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E5")]
		public bool IsPaused
		{
			[Token(Token = "0x60019C1")]
			[Address(RVA = "0x89D200", Offset = "0x89D200", VA = "0x89D200")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E6")]
		public int Direction
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0x89D208", Offset = "0x89D208", VA = "0x89D208")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x89D210", Offset = "0x89D210", VA = "0x89D210")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public virtual Transform Transform
		{
			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x89D3E8", Offset = "0x89D3E8", VA = "0x89D3E8", Slot = "24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E8")]
		public virtual bool IsConfigured
		{
			[Token(Token = "0x60019CC")]
			[Address(RVA = "0x89D3F0", Offset = "0x89D3F0", VA = "0x89D3F0", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E9")]
		public virtual bool DependenciesInitialized
		{
			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x89D3F8", Offset = "0x89D3F8", VA = "0x89D3F8", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EA")]
		public virtual bool IsInitialized
		{
			[Token(Token = "0x60019CE")]
			[Address(RVA = "0x89D400", Offset = "0x89D400", VA = "0x89D400", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EB")]
		public virtual float Length
		{
			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x89E128", Offset = "0x89E128", VA = "0x89E128", Slot = "38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EC")]
		private float maxPosition
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0x89EEDC", Offset = "0x89EEDC", VA = "0x89EEDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x899688", Offset = "0x899688", VA = "0x899688")]
		public CurvyController()
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x899CE8", Offset = "0x899CE8", VA = "0x899CE8", Slot = "17")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x899D20", Offset = "0x899D20", VA = "0x899D20", Slot = "18")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x89D2A0", Offset = "0x89D2A0", VA = "0x89D2A0", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x89D310", Offset = "0x89D310", VA = "0x89D310", Slot = "20")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x89D374", Offset = "0x89D374", VA = "0x89D374", Slot = "21")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x89D3D8", Offset = "0x89D3D8", VA = "0x89D3D8", Slot = "22")]
		protected virtual void OnTransformParentChanged()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x899DD8", Offset = "0x899DD8", VA = "0x899DD8", Slot = "23")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x89D46C", Offset = "0x89D46C", VA = "0x89D46C", Slot = "28")]
		public virtual void EditorUpdate()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x899F68", Offset = "0x899F68", VA = "0x899F68", Slot = "29")]
		public virtual void Prepare()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x89D598", Offset = "0x89D598", VA = "0x89D598", Slot = "30")]
		public virtual void Play()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x89D630", Offset = "0x89D630", VA = "0x89D630", Slot = "31")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x89D830", Offset = "0x89D830", VA = "0x89D830", Slot = "32")]
		public virtual void Pause()
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x89D83C", Offset = "0x89D83C", VA = "0x89D83C", Slot = "33")]
		public virtual void Apply()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x89D844", Offset = "0x89D844", VA = "0x89D844", Slot = "34")]
		public virtual void Warp(float delta)
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x89D9B4", Offset = "0x89D9B4", VA = "0x89D9B4", Slot = "35")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x89E098", Offset = "0x89E098", VA = "0x89E098", Slot = "36")]
		public virtual void BeginPreview()
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x89E0D4", Offset = "0x89E0D4", VA = "0x89E0D4", Slot = "37")]
		public virtual void EndPreview()
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x89E130", Offset = "0x89E130", VA = "0x89E130", Slot = "39")]
		protected virtual void Advance(ref float tf, ref int direction, MoveModeEnum mode, float absSpeed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x89E134", Offset = "0x89E134", VA = "0x89E134", Slot = "40")]
		protected virtual void ApplyTransformRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x89E1A0", Offset = "0x89E1A0", VA = "0x89E1A0", Slot = "41")]
		protected virtual void ApplyTransformPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x89E238", Offset = "0x89E238", VA = "0x89E238", Slot = "42")]
		protected virtual float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x89E280", Offset = "0x89E280", VA = "0x89E280", Slot = "43")]
		protected virtual float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x89A188", Offset = "0x89A188", VA = "0x89A188")]
		protected float GetTF(float virtualPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x89E2E8", Offset = "0x89E2E8", VA = "0x89E2E8", Slot = "44")]
		protected virtual Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x89E34C", Offset = "0x89E34C", VA = "0x89E34C", Slot = "45")]
		protected virtual void GetInterpolatedSourcePosition(float tf, out Vector3 position, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x89E3F8", Offset = "0x89E3F8", VA = "0x89E3F8", Slot = "46")]
		protected virtual Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x89E434", Offset = "0x89E434", VA = "0x89E434", Slot = "47")]
		protected virtual Quaternion GetRotation(Vector3 tangent, Vector3 up, bool damp = true)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x89E8F4", Offset = "0x89E8F4", VA = "0x89E8F4", Slot = "48")]
		protected virtual Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x89AA24", Offset = "0x89AA24", VA = "0x89AA24", Slot = "49")]
		protected virtual void BindEvents()
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x89E958", Offset = "0x89E958", VA = "0x89E958", Slot = "50")]
		protected virtual void UnbindEvents()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x89E95C", Offset = "0x89E95C", VA = "0x89E95C", Slot = "51")]
		protected virtual void UserAfterInit()
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x89E960", Offset = "0x89E960", VA = "0x89E960", Slot = "52")]
		protected virtual void UserAfterUpdate()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x89D7C4", Offset = "0x89D7C4", VA = "0x89D7C4")]
		protected CurvyControllerEventArgs OnAnimationEndEvent(CurvyControllerEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x89E964", Offset = "0x89E964", VA = "0x89E964")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x89DF58", Offset = "0x89DF58", VA = "0x89DF58")]
		protected Vector3 offsetPosition(Vector3 pos, Vector3 tan, Vector3 up, float angle, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x89D47C", Offset = "0x89D47C", VA = "0x89D47C")]
		private void applyPositionAndRotation(float tf)
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x89DE4C", Offset = "0x89DE4C", VA = "0x89DE4C")]
		private float getAnimationTF()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003F4")]
	public class CurvyEventArgs : CancelEventArgs
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MonoBehaviour Sender;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object Data;

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x89EEFC", Offset = "0x89EEFC", VA = "0x89EEFC")]
		public CurvyEventArgs()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F5")]
	public class CurvySplineEvent : UnityEventEx<CurvySplineEventArgs>
	{
		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x8B60A4", Offset = "0x8B60A4", VA = "0x8B60A4")]
		public CurvySplineEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F6")]
	public class CurvyControlPointEvent : UnityEventEx<CurvyControlPointEventArgs>
	{
		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x89EF04", Offset = "0x89EF04", VA = "0x89EF04")]
		public CurvyControlPointEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	public class CurvySplineMoveEvent : UnityEventEx<CurvySplineMoveEventArgs>
	{
		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x8B60F4", Offset = "0x8B60F4", VA = "0x8B60F4")]
		public CurvySplineMoveEvent()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public class CurvySplineMoveEventArgs : CurvyControlPointEventArgs
	{
		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool WorldUnits;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int Direction;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Delta;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float TF;

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0x8BBBCC", Offset = "0x8BBBCC", VA = "0x8BBBCC")]
		public CurvySplineMoveEventArgs(MonoBehaviour sender, CurvySpline spline, CurvySplineSegment cp, float tf, float delta, int dir, bool worldUnits = false)
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x8B6038", Offset = "0x8B6038", VA = "0x8B6038")]
		public CurvySplineMoveEventArgs()
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x8BBC48", Offset = "0x8BBC48", VA = "0x8BBC48")]
		public void SetPosition(float tf)
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x8BBD0C", Offset = "0x8BBD0C", VA = "0x8BBD0C")]
		public void SetPosition(CurvySplineSegment segment, float localF = 0f)
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0x8BBD88", Offset = "0x8BBD88", VA = "0x8BBD88")]
		public void Follow(CurvySplineSegment controlPoint, ConnectionHeadingEnum direction = ConnectionHeadingEnum.Auto)
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x8BBEA0", Offset = "0x8BBEA0", VA = "0x8BBEA0")]
		public float AngleTo(CurvySplineSegment controlPoint)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003F9")]
	public class CurvyControlPointEventArgs : CurvySplineEventArgs
	{
		[Token(Token = "0x20003FA")]
		public enum ModeEnum
		{
			[Token(Token = "0x40010CD")]
			AddBefore,
			[Token(Token = "0x40010CE")]
			AddAfter,
			[Token(Token = "0x40010CF")]
			Delete,
			[Token(Token = "0x40010D0")]
			None,
			[Token(Token = "0x40010D1")]
			Added
		}

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ModeEnum Mode;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvySplineSegment ControlPoint;

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0x89EF54", Offset = "0x89EF54", VA = "0x89EF54")]
		public CurvyControlPointEventArgs(MonoBehaviour sender, CurvySpline spline, CurvySplineSegment cp, ModeEnum mode = ModeEnum.None, [Optional] object data)
		{
		}

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0x89EFEC", Offset = "0x89EFEC", VA = "0x89EFEC")]
		public CurvyControlPointEventArgs(CurvySpline spline)
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0x89F024", Offset = "0x89F024", VA = "0x89F024")]
		public CurvyControlPointEventArgs()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class CurvySplineEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CurvySpline Spline;

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x89EFAC", Offset = "0x89EFAC", VA = "0x89EFAC")]
		public CurvySplineEventArgs(MonoBehaviour sender, [Optional] CurvySpline spline, [Optional] object data)
		{
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x89F02C", Offset = "0x89F02C", VA = "0x89F02C")]
		public CurvySplineEventArgs()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FC")]
	public class CurvyCGEvent : UnityEventEx<CurvyCGEventArgs>
	{
		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x89B0A0", Offset = "0x89B0A0", VA = "0x89B0A0")]
		public CurvyCGEvent()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public class CurvyCGEventArgs : EventArgs
	{
		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Sender;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CurvyGenerator Generator;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CGModule Module;

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x89B0F0", Offset = "0x89B0F0", VA = "0x89B0F0")]
		public CurvyCGEventArgs(CGModule module)
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x89B184", Offset = "0x89B184", VA = "0x89B184")]
		public CurvyCGEventArgs(CurvyGenerator generator, CGModule module)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FE")]
	public class CurvyControllerEvent : UnityEventEx<CurvyControllerEventArgs>
	{
		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x89CA18", Offset = "0x89CA18", VA = "0x89CA18")]
		public CurvyControllerEvent()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public class CurvyControllerEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CurvyController Controller;

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x89D788", Offset = "0x89D788", VA = "0x89D788")]
		public CurvyControllerEventArgs(MonoBehaviour sender, CurvyController controller)
		{
		}
	}
	[Token(Token = "0x2000400")]
	public static class CurvyGizmoHelper
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Matrix4x4 Matrix;

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x89F034", Offset = "0x89F034", VA = "0x89F034")]
		public static void SegmentCurveGizmo(CurvySplineSegment seg, Color col, float stepSize = 0.05f)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x89F400", Offset = "0x89F400", VA = "0x89F400")]
		public static void SegmentApproximationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x89F728", Offset = "0x89F728", VA = "0x89F728")]
		public static void SegmentOrientationAnchorGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x89FA90", Offset = "0x89FA90", VA = "0x89FA90")]
		public static void SegmentOrientationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x89FE24", Offset = "0x89FE24", VA = "0x89FE24")]
		public static void SegmentTangentGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x8A00F0", Offset = "0x8A00F0", VA = "0x8A00F0")]
		public static void ControlPointGizmo(CurvySplineSegment cp, bool selected, Color col)
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x8A043C", Offset = "0x8A043C", VA = "0x8A043C")]
		public static void ConnectionGizmo(CurvySplineSegment cp)
		{
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x8A0670", Offset = "0x8A0670", VA = "0x8A0670")]
		public static void BoundsGizmo(CurvySplineSegment cp, Color col)
		{
		}
	}
	[Token(Token = "0x2000401")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x579950", Offset = "0x579950")]
	public class CurvyGlobalManager : DTSingleton<CurvyGlobalManager>, IDTSingleton
	{
		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool HideManager;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int MaxCachePPU;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float SceneViewResolution;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static Color DefaultGizmoColor;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Color DefaultGizmoSelectionColor;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static CurvyInterpolation DefaultInterpolation;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static float GizmoControlPointSize;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float GizmoOrientationLength;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Color GizmoOrientationColor;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int SplineLayer;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static CurvySplineGizmos Gizmos;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PoolManager mPoolManager;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComponentPool mControlPointPool;

		[Token(Token = "0x170002ED")]
		public static bool ShowCurveGizmo
		{
			[Token(Token = "0x6001A0D")]
			[Address(RVA = "0x8A0A10", Offset = "0x8A0A10", VA = "0x8A0A10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0x8A0A7C", Offset = "0x8A0A7C", VA = "0x8A0A7C")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public static bool ShowApproximationGizmo
		{
			[Token(Token = "0x6001A0F")]
			[Address(RVA = "0x8A0B24", Offset = "0x8A0B24", VA = "0x8A0B24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A10")]
			[Address(RVA = "0x8A0B90", Offset = "0x8A0B90", VA = "0x8A0B90")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public static bool ShowTangentsGizmo
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0x8A0C38", Offset = "0x8A0C38", VA = "0x8A0C38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x8A0CA4", Offset = "0x8A0CA4", VA = "0x8A0CA4")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		public static bool ShowOrientationGizmo
		{
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0x8A0D4C", Offset = "0x8A0D4C", VA = "0x8A0D4C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A14")]
			[Address(RVA = "0x8A0DB8", Offset = "0x8A0DB8", VA = "0x8A0DB8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public static bool ShowLabelsGizmo
		{
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0x8A0E60", Offset = "0x8A0E60", VA = "0x8A0E60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x8A0ECC", Offset = "0x8A0ECC", VA = "0x8A0ECC")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public static bool ShowMetadataGizmo
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x8A0F74", Offset = "0x8A0F74", VA = "0x8A0F74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x8A0FE0", Offset = "0x8A0FE0", VA = "0x8A0FE0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public static bool ShowBoundsGizmo
		{
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x8A1088", Offset = "0x8A1088", VA = "0x8A1088")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x8A10F4", Offset = "0x8A10F4", VA = "0x8A10F4")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0x8A119C", Offset = "0x8A119C", VA = "0x8A119C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public ComponentPool ControlPointPool
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x8A123C", Offset = "0x8A123C", VA = "0x8A123C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		public CurvyConnection[] Connections
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x8A1244", Offset = "0x8A1244", VA = "0x8A1244")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x8A09A0", Offset = "0x8A09A0", VA = "0x8A09A0")]
		public CurvyGlobalManager()
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x8A1294", Offset = "0x8A1294", VA = "0x8A1294")]
		public CurvyConnection[] GetContainingConnections(params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x8A16D0", Offset = "0x8A16D0", VA = "0x8A16D0", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x8A18B0", Offset = "0x8A18B0", VA = "0x8A18B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x8A1950", Offset = "0x8A1950", VA = "0x8A1950")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5799D4", Offset = "0x5799D4")]
		private static void LoadRuntimeSettings()
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x8A1C4C", Offset = "0x8A1C4C", VA = "0x8A1C4C")]
		public static void SaveRuntimeSettings()
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x8A1E80", Offset = "0x8A1E80", VA = "0x8A1E80", Slot = "7")]
		public new void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class CurvyImportExport : MonoBehaviour
	{
		[Token(Token = "0x2000403")]
		public enum ExportOptions
		{
			[Token(Token = "0x40010F3")]
			Splines,
			[Token(Token = "0x40010F4")]
			ControlPoints
		}

		[Token(Token = "0x2000404")]
		public enum ImportOptions
		{
			[Token(Token = "0x40010F6")]
			Create,
			[Token(Token = "0x40010F7")]
			Apply,
			[Token(Token = "0x40010F8")]
			Insert
		}

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x5799E4", Offset = "0x5799E4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x5799E4", Offset = "0x5799E4")]
		[AttributeAttribute(Name = "PathSelectorAttribute", RVA = "0x5799E4", Offset = "0x5799E4")]
		public string FilePath;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySerializationSpace Space;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x579AB8", Offset = "0x579AB8")]
		public ImportOptions Mode;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579AFC", Offset = "0x579AFC")]
		public Transform Target;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579B9C", Offset = "0x579B9C")]
		[ArrayEx]
		public CurvySpline[] ApplyTo;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579C58", Offset = "0x579C58")]
		public CurvySplineSegment InsertAfter;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x579CFC", Offset = "0x579CFC")]
		public CurvySplineEvent OnDeserializedSpline;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CurvyControlPointEvent OnDeserializedCP;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x579D38", Offset = "0x579D38")]
		public ExportOptions ExportOption;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579D7C", Offset = "0x579D7C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x579D7C", Offset = "0x579D7C")]
		[ArrayEx]
		public List<CurvySpline> SourceSplines;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x579E64", Offset = "0x579E64")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x579E64", Offset = "0x579E64")]
		[ArrayEx]
		public List<CurvySplineSegment> SourceControlPoints;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<CurvySpline, string> mOnDeserializedSpline;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Action<CurvySplineSegment, string> mOnDeserializedCP;

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x8A2104", Offset = "0x8A2104", VA = "0x8A2104")]
		public CurvyImportExport()
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x8A2114", Offset = "0x8A2114", VA = "0x8A2114")]
		public void Import()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x8A22B8", Offset = "0x8A22B8", VA = "0x8A22B8")]
		public void Export()
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x8A22BC", Offset = "0x8A22BC", VA = "0x8A22BC")]
		public static void Deserialize(string json, Transform target, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x8A23E8", Offset = "0x8A23E8", VA = "0x8A23E8")]
		public static void Deserialize(string json, CurvySpline[] applyTo, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x8A2514", Offset = "0x8A2514", VA = "0x8A2514")]
		public static void Deserialize(string json, CurvySplineSegment insertAfter, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x8A263C", Offset = "0x8A263C", VA = "0x8A263C")]
		public static string Serialize(CurvySerializationSpace space, params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x8A26EC", Offset = "0x8A26EC", VA = "0x8A26EC")]
		public static string Serialize(CurvySerializationSpace space, params CurvySplineSegment[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x8A2288", Offset = "0x8A2288", VA = "0x8A2288")]
		public static void ImportFromFile(string filePath, Transform target, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x8A2840", Offset = "0x8A2840", VA = "0x8A2840")]
		public static void ImportFromFile(string filePath, CurvySpline[] applyTo, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x8A2870", Offset = "0x8A2870", VA = "0x8A2870")]
		public static void ImportFromFile(string filePath, CurvySplineSegment insertAfter, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x8A28A0", Offset = "0x8A28A0", VA = "0x8A28A0")]
		public static void ExportToFile(string filePath, CurvySerializationSpace space, params CurvySpline[] splines)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x8A28F0", Offset = "0x8A28F0", VA = "0x8A28F0")]
		public static void ExportToFile(string filePath, CurvySerializationSpace space, params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x8A28D8", Offset = "0x8A28D8", VA = "0x8A28D8")]
		private static void saveFile(string data, string filePath)
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x8A279C", Offset = "0x8A279C", VA = "0x8A279C")]
		private static string loadFile(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x8A2928", Offset = "0x8A2928", VA = "0x8A2928")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x579F8C", Offset = "0x579F8C")]
		private void <Import>m__0(CurvySpline x, string y)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x8A29C4", Offset = "0x8A29C4", VA = "0x8A29C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x579F9C", Offset = "0x579F9C")]
		private void <Import>m__1(CurvySplineSegment x, string y)
		{
		}
	}
	[Token(Token = "0x2000405")]
	[ExecuteInEditMode]
	public class CurvyMetadataBase : MonoBehaviour
	{
		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySplineSegment mCP;

		[Token(Token = "0x170002F7")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6001A37")]
			[Address(RVA = "0x8A2A8C", Offset = "0x8A2A8C", VA = "0x8A2A8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F8")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001A38")]
			[Address(RVA = "0x8A2A94", Offset = "0x8A2A94", VA = "0x8A2A94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x8A2A84", Offset = "0x8A2A84", VA = "0x8A2A84")]
		public CurvyMetadataBase()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x8A2B2C", Offset = "0x8A2B2C", VA = "0x8A2B2C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A3A")]
		public T GetPreviousData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6001A3B")]
		public T GetNextData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x8A2B84", Offset = "0x8A2B84", VA = "0x8A2B84")]
		public void SetDirty()
		{
		}
	}
	[Token(Token = "0x2000406")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x579FBC", Offset = "0x579FBC")]
	public class CGResourceManagerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string ResourceName;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ReadOnly;

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x798AE8", Offset = "0x798AE8", VA = "0x798AE8")]
		public CGResourceManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x2000407")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x57A008", Offset = "0x57A008")]
	public class CGResourceCollectionManagerAttribute : CGResourceManagerAttribute
	{
		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool ShowCount;

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x798AC0", Offset = "0x798AC0", VA = "0x798AC0")]
		public CGResourceCollectionManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x2000408")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x57A054", Offset = "0x57A054")]
	public class CGDataReferenceSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Type DataType;

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x798A34", Offset = "0x798A34", VA = "0x798A34")]
		public CGDataReferenceSelectorAttribute(Type dataType)
		{
		}
	}
	[Token(Token = "0x2000409")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57A0A0", Offset = "0x57A0A0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57A0A0", Offset = "0x57A0A0")]
	public class CurvyShape : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57A138", Offset = "0x57A138")]
		private CurvyPlane m_Plane;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private bool m_Persistent;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<CurvyShapeInfo, Type> mShapeDefs;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvySpline mSpline;

		[NonSerialized]
		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool Dirty;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool mLoadingInEditor;

		[Token(Token = "0x170002F9")]
		public CurvyPlane Plane
		{
			[Token(Token = "0x6001A41")]
			[Address(RVA = "0x8A3028", Offset = "0x8A3028", VA = "0x8A3028")]
			get
			{
				return default(CurvyPlane);
			}
			[Token(Token = "0x6001A42")]
			[Address(RVA = "0x8A3030", Offset = "0x8A3030", VA = "0x8A3030")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public bool Persistent
		{
			[Token(Token = "0x6001A43")]
			[Address(RVA = "0x8A304C", Offset = "0x8A304C", VA = "0x8A304C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A44")]
			[Address(RVA = "0x8A3054", Offset = "0x8A3054", VA = "0x8A3054")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001A45")]
			[Address(RVA = "0x8A3088", Offset = "0x8A3088", VA = "0x8A3088")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		public static Dictionary<CurvyShapeInfo, Type> ShapeDefinitions
		{
			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x8A5DF0", Offset = "0x8A5DF0", VA = "0x8A5DF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x8A3014", Offset = "0x8A3014", VA = "0x8A3014")]
		public CurvyShape()
		{
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x8A3120", Offset = "0x8A3120", VA = "0x8A3120")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x8A3254", Offset = "0x8A3254", VA = "0x8A3254", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x8A326C", Offset = "0x8A326C", VA = "0x8A326C")]
		public void Delete()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x8A3168", Offset = "0x8A3168", VA = "0x8A3168")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x8A33E4", Offset = "0x8A33E4", VA = "0x8A33E4")]
		public CurvyShape Replace(string menuName)
		{
			return null;
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x8A3760", Offset = "0x8A3760", VA = "0x8A3760")]
		protected void PrepareSpline(CurvyInterpolation interpolation, CurvyOrientation orientation = CurvyOrientation.Dynamic, int cachedensity = 50, bool closed = true)
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x8A3A84", Offset = "0x8A3A84", VA = "0x8A3A84")]
		protected void SetPosition(int no, Vector3 position)
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x8A3CC8", Offset = "0x8A3CC8", VA = "0x8A3CC8")]
		protected void SetRotation(int no, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x8A3F38", Offset = "0x8A3F38", VA = "0x8A3F38")]
		protected void SetBezierHandleIn(int no, Vector3 inHandle)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x8A40D4", Offset = "0x8A40D4", VA = "0x8A40D4")]
		protected void SetBezierHandleOut(int no, Vector3 outHandle)
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x8A4270", Offset = "0x8A4270", VA = "0x8A4270")]
		protected void SetBezierHandles(int no, float distanceFrag)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x8A4278", Offset = "0x8A4278", VA = "0x8A4278")]
		protected void SetBezierHandles(int no, float inDistanceFrag, float outDistanceFrag)
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x8A4874", Offset = "0x8A4874", VA = "0x8A4874")]
		protected void SetBezierHandles(int no, Vector3 i, Vector3 o, Space space = Space.World)
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x8A47BC", Offset = "0x8A47BC", VA = "0x8A47BC")]
		public static void SetBezierHandles(float distanceFrag, bool setIn, bool setOut, params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x8A50B4", Offset = "0x8A50B4", VA = "0x8A50B4")]
		protected void SetCGHardEdges(params int[] controlPoints)
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x8A5284", Offset = "0x8A5284", VA = "0x8A5284", Slot = "6")]
		protected virtual void ApplyShape()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x8A5288", Offset = "0x8A5288", VA = "0x8A5288")]
		protected void PrepareControlPoints(int count)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x8A5F1C", Offset = "0x8A5F1C", VA = "0x8A5F1C")]
		public static List<string> GetShapesMenuNames(bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x8A60D4", Offset = "0x8A60D4", VA = "0x8A60D4")]
		public static List<string> GetShapesMenuNames(Type currentShapeType, out int currentIndex, bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x8A6324", Offset = "0x8A6324", VA = "0x8A6324")]
		public static string GetShapeName(Type shapeType)
		{
			return null;
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x8A3564", Offset = "0x8A3564", VA = "0x8A3564")]
		public static Type GetShapeType(string menuName)
		{
			return null;
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x8A32E0", Offset = "0x8A32E0", VA = "0x8A32E0")]
		private void applyPlane()
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x8A64B0", Offset = "0x8A64B0", VA = "0x8A64B0")]
		private void applyRotation(Quaternion q)
		{
		}
	}
	[Token(Token = "0x200040A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x57A1F0", Offset = "0x57A1F0")]
	public class CurvyShapeInfo : Attribute
	{
		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool Is2D;

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x8A6B7C", Offset = "0x8A6B7C", VA = "0x8A6B7C")]
		public CurvyShapeInfo(string name, bool is2D = true)
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class CurvyShape2D : CurvyShape
	{
		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x8A6B08", Offset = "0x8A6B08", VA = "0x8A6B08")]
		public CurvyShape2D()
		{
		}
	}
	[Token(Token = "0x200040C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57A23C", Offset = "0x57A23C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57A23C", Offset = "0x57A23C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57A23C", Offset = "0x57A23C")]
	public class CurvySpline : CurvySplineBase
	{
		[Token(Token = "0x4001106")]
		public const string VERSION = "2.1.3";

		[Token(Token = "0x4001107")]
		public const string VERSIONSHORT = "210";

		[Token(Token = "0x4001108")]
		public const string WEBROOT = "http://www.fluffyunderware.com/curvy/";

		[Token(Token = "0x4001109")]
		public const string DOCROOT = "http://www.fluffyunderware.com/curvy/documentation/";

		[Token(Token = "0x400110A")]
		public const string DOCLINK = "http://www.fluffyunderware.com/curvy/doclink/210/";

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57A2D4", Offset = "0x57A2D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57A2D4", Offset = "0x57A2D4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A2D4", Offset = "0x57A2D4")]
		private CurvyInterpolation m_Interpolation;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57A384", Offset = "0x57A384")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x57A384", Offset = "0x57A384")]
		[SerializeField]
		private bool m_RestrictTo2D;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A3F8", Offset = "0x57A3F8")]
		private bool m_Closed;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57A444", Offset = "0x57A444")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57A444", Offset = "0x57A444")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A444", Offset = "0x57A444")]
		private bool m_AutoEndTangents;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57A4E0", Offset = "0x57A4E0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A4E0", Offset = "0x57A4E0")]
		private CurvyOrientation m_Orientation;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57A550", Offset = "0x57A550")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x57A550", Offset = "0x57A550")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57A550", Offset = "0x57A550")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57A680", Offset = "0x57A680")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x57A680", Offset = "0x57A680")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0x57A680", Offset = "0x57A680")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A680", Offset = "0x57A680")]
		private float m_Tension;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A7C4", Offset = "0x57A7C4")]
		private float m_Continuity;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A810", Offset = "0x57A810")]
		private float m_Bias;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57A85C", Offset = "0x57A85C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x57A85C", Offset = "0x57A85C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57A85C", Offset = "0x57A85C")]
		[SerializeField]
		private Color m_GizmoColor;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57A930", Offset = "0x57A930")]
		[SerializeField]
		private Color m_GizmoSelectionColor;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57A998", Offset = "0x57A998")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57A998", Offset = "0x57A998")]
		private int m_CacheDensity;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57AA30", Offset = "0x57AA30")]
		private bool m_UsePooling;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57AA7C", Offset = "0x57AA7C")]
		private bool m_UseThreading;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57AAC8", Offset = "0x57AAC8")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57AAC8", Offset = "0x57AAC8")]
		private bool m_CheckTransform;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private CurvyUpdateMethod m_UpdateIn;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public List<CurvySplineSegment> ControlPoints;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<CurvySplineSegment> mSegments;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int mCacheSize;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int mLastCPCount;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Bounds? mBounds;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool mDirtyCurve;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		private bool mDirtyOrientation;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private List<CurvySplineSegment> mDirtyControlPoints;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool mForceRefresh;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private ThreadPoolWorker mThreadWorker;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CurvySplineMoveEventArgs _moveEventArgs;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private CurvySplineSegment _lastDistToSeg;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AB58", Offset = "0x57AB58")]
		private static Comparison<CurvySplineSegment> <>f__am$cache0;

		[Token(Token = "0x170002FD")]
		public CurvyInterpolation Interpolation
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x89F3B4", Offset = "0x89F3B4", VA = "0x89F3B4")]
			get
			{
				return default(CurvyInterpolation);
			}
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x8A3920", Offset = "0x8A3920", VA = "0x8A3920")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public bool RestrictTo2D
		{
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x8A0434", Offset = "0x8A0434", VA = "0x8A0434")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0x8A3A64", Offset = "0x8A3A64", VA = "0x8A3A64")]
			set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6001A66")]
			[Address(RVA = "0x8A6DF0", Offset = "0x8A6DF0", VA = "0x8A6DF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A67")]
			[Address(RVA = "0x8A6DF8", Offset = "0x8A6DF8", VA = "0x8A6DF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		public bool Closed
		{
			[Token(Token = "0x6001A68")]
			[Address(RVA = "0x8A6E94", Offset = "0x8A6E94", VA = "0x8A6E94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x8A3A10", Offset = "0x8A3A10", VA = "0x8A3A10")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public bool AutoEndTangents
		{
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x8A6EEC", Offset = "0x8A6EEC", VA = "0x8A6EEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x8A6E9C", Offset = "0x8A6E9C", VA = "0x8A6E9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public CurvyOrientation Orientation
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x8A6F18", Offset = "0x8A6F18", VA = "0x8A6F18")]
			get
			{
				return default(CurvyOrientation);
			}
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x8A3944", Offset = "0x8A3944", VA = "0x8A3944")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public CurvyUpdateMethod UpdateIn
		{
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x8A6F20", Offset = "0x8A6F20", VA = "0x8A6F20")]
			get
			{
				return default(CurvyUpdateMethod);
			}
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0x8A6F28", Offset = "0x8A6F28", VA = "0x8A6F28")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public Color GizmoColor
		{
			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x8A6F3C", Offset = "0x8A6F3C", VA = "0x8A6F3C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x8A6F48", Offset = "0x8A6F48", VA = "0x8A6F48")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public Color GizmoSelectionColor
		{
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x8A6FC4", Offset = "0x8A6FC4", VA = "0x8A6FC4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x8A6FD0", Offset = "0x8A6FD0", VA = "0x8A6FD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000306")]
		public int CacheDensity
		{
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x8A704C", Offset = "0x8A704C", VA = "0x8A704C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x8A3968", Offset = "0x8A3968", VA = "0x8A3968")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public bool UsePooling
		{
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x8A7054", Offset = "0x8A7054", VA = "0x8A7054")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x8A705C", Offset = "0x8A705C", VA = "0x8A705C")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public bool UseThreading
		{
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0x8A707C", Offset = "0x8A707C", VA = "0x8A707C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x8A7084", Offset = "0x8A7084", VA = "0x8A7084")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public bool CheckTransform
		{
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x8A70A4", Offset = "0x8A70A4", VA = "0x8A70A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x8A70AC", Offset = "0x8A70AC", VA = "0x8A70AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public float Tension
		{
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x8A70CC", Offset = "0x8A70CC", VA = "0x8A70CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x8A70D4", Offset = "0x8A70D4", VA = "0x8A70D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public float Continuity
		{
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x8A70F8", Offset = "0x8A70F8", VA = "0x8A70F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x8A7100", Offset = "0x8A7100", VA = "0x8A7100")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public float Bias
		{
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0x8A7124", Offset = "0x8A7124", VA = "0x8A7124")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0x8A712C", Offset = "0x8A712C", VA = "0x8A712C")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public override Bounds Bounds
		{
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0x8A7150", Offset = "0x8A7150", VA = "0x8A7150", Slot = "9")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700030E")]
		public override int Count
		{
			[Token(Token = "0x6001A83")]
			[Address(RVA = "0x8A73DC", Offset = "0x8A73DC", VA = "0x8A73DC", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700030F")]
		public int ControlPointCount
		{
			[Token(Token = "0x6001A84")]
			[Address(RVA = "0x8A45A0", Offset = "0x8A45A0", VA = "0x8A45A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000310")]
		public int CacheSize
		{
			[Token(Token = "0x6001A85")]
			[Address(RVA = "0x8A7438", Offset = "0x8A7438", VA = "0x8A7438")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000311")]
		public override bool Dirty
		{
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0x8A750C", Offset = "0x8A750C", VA = "0x8A750C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000312")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x6001A87")]
			[Address(RVA = "0x8A7588", Offset = "0x8A7588", VA = "0x8A7588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000313")]
		public List<CurvySplineSegment> Segments
		{
			[Token(Token = "0x6001A88")]
			[Address(RVA = "0x8A7630", Offset = "0x8A7630", VA = "0x8A7630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public CurvySplineSegment FirstVisibleControlPoint
		{
			[Token(Token = "0x6001A89")]
			[Address(RVA = "0x8A7638", Offset = "0x8A7638", VA = "0x8A7638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public CurvySplineSegment LastVisibleControlPoint
		{
			[Token(Token = "0x6001A8A")]
			[Address(RVA = "0x8A5544", Offset = "0x8A5544", VA = "0x8A5544")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public override bool IsContinuous
		{
			[Token(Token = "0x6001A8B")]
			[Address(RVA = "0x8A7808", Offset = "0x8A7808", VA = "0x8A7808", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000317")]
		public override bool IsClosed
		{
			[Token(Token = "0x6001A8C")]
			[Address(RVA = "0x8A7810", Offset = "0x8A7810", VA = "0x8A7810", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000318")]
		public CurvySpline NextSpline
		{
			[Token(Token = "0x6001A8D")]
			[Address(RVA = "0x8A7818", Offset = "0x8A7818", VA = "0x8A7818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000319")]
		public CurvySpline PreviousSpline
		{
			[Token(Token = "0x6001A8E")]
			[Address(RVA = "0x8A78FC", Offset = "0x8A78FC", VA = "0x8A78FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x8A6BBC", Offset = "0x8A6BBC", VA = "0x8A6BBC")]
		public CurvySpline()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x8A79E0", Offset = "0x8A79E0", VA = "0x8A79E0", Slot = "10")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x8A7B64", Offset = "0x8A7B64", VA = "0x8A7B64", Slot = "11")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x8A7DE0", Offset = "0x8A7DE0", VA = "0x8A7DE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x8A7DE8", Offset = "0x8A7DE8", VA = "0x8A7DE8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x8A7FF8", Offset = "0x8A7FF8", VA = "0x8A7FF8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x8A81AC", Offset = "0x8A81AC", VA = "0x8A81AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x8A836C", Offset = "0x8A836C", VA = "0x8A836C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x8A8380", Offset = "0x8A8380", VA = "0x8A8380")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x8A8394", Offset = "0x8A8394", VA = "0x8A8394")]
		public static CurvySpline Create()
		{
			return null;
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x8A8534", Offset = "0x8A8534", VA = "0x8A8534")]
		public static CurvySpline Create(CurvySpline takeOptionsFrom)
		{
			return null;
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x8A8768", Offset = "0x8A8768", VA = "0x8A8768")]
		public static int CalculateCacheSize(int density, float length, float maxPointsPerUnit)
		{
			return default(int);
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x8A884C", Offset = "0x8A884C", VA = "0x8A884C")]
		public static Vector3 Bezier(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x8A899C", Offset = "0x8A899C", VA = "0x8A899C")]
		public static float BezierTangent(float T0, float P0, float P1, float T1, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x8A89EC", Offset = "0x8A89EC", VA = "0x8A89EC")]
		public static Vector3 BezierTangent(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x8A8D38", Offset = "0x8A8D38", VA = "0x8A8D38")]
		public static Vector3 CatmullRom(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x8A8EC0", Offset = "0x8A8EC0", VA = "0x8A8EC0")]
		public static Vector3 TCB(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f, float FT0, float FC0, float FB0, float FT1, float FC1, float FB1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x8A9168", Offset = "0x8A9168", VA = "0x8A9168", Slot = "12")]
		public override Vector3 Interpolate(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x8A9178", Offset = "0x8A9178", VA = "0x8A9178", Slot = "13")]
		public override Vector3 Interpolate(float tf, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x8A92EC", Offset = "0x8A92EC", VA = "0x8A92EC", Slot = "14")]
		public override Vector3 InterpolateFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x8A956C", Offset = "0x8A956C", VA = "0x8A956C", Slot = "16")]
		public override Component GetMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001AA3")]
		public override U InterpolateMetadata<T, U>(float tf)
		{
			return (U)null;
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x8A98E8", Offset = "0x8A98E8", VA = "0x8A98E8", Slot = "18")]
		public override object InterpolateMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x8A9B40", Offset = "0x8A9B40", VA = "0x8A9B40", Slot = "19")]
		public override Vector3 InterpolateScale(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x8A9DB4", Offset = "0x8A9DB4", VA = "0x8A9DB4", Slot = "20")]
		public override Vector3 GetOrientationUpFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x8AA070", Offset = "0x8AA070", VA = "0x8AA070", Slot = "22")]
		public override Quaternion GetOrientationFast(float tf, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x8AA330", Offset = "0x8AA330", VA = "0x8AA330", Slot = "23")]
		public override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x8AA4DC", Offset = "0x8AA4DC", VA = "0x8AA4DC", Slot = "24")]
		public override Vector3 GetTangent(float tf, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x8AA850", Offset = "0x8AA850", VA = "0x8AA850", Slot = "25")]
		public override Vector3 GetTangentFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x8AAAD0", Offset = "0x8AAAD0", VA = "0x8AAAD0", Slot = "26")]
		public override float TFToDistance(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x8AAFE8", Offset = "0x8AAFE8", VA = "0x8AAFE8", Slot = "28")]
		public override CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x8AB0B4", Offset = "0x8AB0B4", VA = "0x8AB0B4")]
		public int TFToSegmentIndex(float tf, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(int);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x8AB14C", Offset = "0x8AB14C", VA = "0x8AB14C", Slot = "29")]
		public override float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x8AB160", Offset = "0x8AB160", VA = "0x8AB160", Slot = "30")]
		public override float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x8AB31C", Offset = "0x8AB31C", VA = "0x8AB31C", Slot = "27")]
		public override float DistanceToTF(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x8AB9C4", Offset = "0x8AB9C4", VA = "0x8AB9C4")]
		public CurvySplineSegment DistanceToSegment(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x8AB424", Offset = "0x8AB424", VA = "0x8AB424")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x8ABA04", Offset = "0x8ABA04", VA = "0x8ABA04", Slot = "37")]
		public override Vector3 Move(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x8AC24C", Offset = "0x8AC24C", VA = "0x8AC24C", Slot = "38")]
		public override Vector3 MoveFast(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x8AC3C0", Offset = "0x8AC3C0", VA = "0x8AC3C0", Slot = "43")]
		public override Vector3 MoveByLengthFast(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x8A553C", Offset = "0x8A553C", VA = "0x8A553C")]
		public CurvySplineSegment Add()
		{
			return null;
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x8AD364", Offset = "0x8AD364", VA = "0x8AD364")]
		public CurvySplineSegment[] Add(params Vector3[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x8AD83C", Offset = "0x8AD83C", VA = "0x8AD83C")]
		public CurvySplineSegment InsertBefore(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x8ACD04", Offset = "0x8ACD04", VA = "0x8ACD04")]
		public CurvySplineSegment InsertAfter(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x8AE4C8", Offset = "0x8AE4C8", VA = "0x8AE4C8", Slot = "33")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x8A5740", Offset = "0x8A5740", VA = "0x8A5740")]
		public void Delete(CurvySplineSegment controlPoint)
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x8AE89C", Offset = "0x8AE89C", VA = "0x8AE89C", Slot = "34")]
		public override Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x8AEAEC", Offset = "0x8AEAEC", VA = "0x8AEAEC", Slot = "35")]
		public override Vector3[] GetApproximationT()
		{
			return null;
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x8AEC44", Offset = "0x8AEC44", VA = "0x8AEC44", Slot = "36")]
		public override Vector3[] GetApproximationUpVectors()
		{
			return null;
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x8AED9C", Offset = "0x8AED9C", VA = "0x8AED9C", Slot = "31")]
		public override float GetNearestPointTF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x8AF094", Offset = "0x8AF094", VA = "0x8AF094", Slot = "32")]
		public override float GetNearestPointTF(Vector3 p, out Vector3 nearest)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0x8AF0A0", Offset = "0x8AF0A0", VA = "0x8AF0A0")]
		public float GetNearestPointTF(Vector3 p, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x8AEDCC", Offset = "0x8AEDCC", VA = "0x8AEDCC")]
		public float GetNearestPointTF(Vector3 p, out Vector3 nearest, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x8AF420", Offset = "0x8AF420", VA = "0x8AF420", Slot = "53")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x8B22A8", Offset = "0x8B22A8", VA = "0x8B22A8", Slot = "54")]
		public override void SetDirtyAll()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x8A5DD4", Offset = "0x8A5DD4", VA = "0x8A5DD4")]
		public void SetDirtyAll(bool dirtyCurve = true, bool dirtyOrientation = true)
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x8AE27C", Offset = "0x8AE27C", VA = "0x8AE27C")]
		public void SetDirty(CurvySplineSegment controlPoint, bool dirtyCurve = true, bool dirtyOrientation = true)
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x8ADEE0", Offset = "0x8ADEE0", VA = "0x8ADEE0")]
		public void SyncHierarchyFromSpline(bool renameControlPoints = true)
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x8B2384", Offset = "0x8B2384", VA = "0x8B2384")]
		public Vector3 ToWorldPosition(Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x8B23E0", Offset = "0x8B23E0", VA = "0x8B23E0")]
		public void ApplyControlPointsNames()
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x8A7C14", Offset = "0x8A7C14", VA = "0x8A7C14")]
		public void SyncSplineFromHierarchy()
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x8B2548", Offset = "0x8B2548", VA = "0x8B2548")]
		public bool IsPlanar(out int ignoreAxis)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0x8B25B4", Offset = "0x8B25B4", VA = "0x8B25B4")]
		public bool IsPlanar(out bool xplanar, out bool yplanar, out bool zplanar)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x8B2830", Offset = "0x8B2830", VA = "0x8B2830")]
		public bool IsPlanar(CurvyPlane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x8B29F4", Offset = "0x8B29F4", VA = "0x8B29F4")]
		public void MakePlanar(CurvyPlane plane)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x8B2E1C", Offset = "0x8B2E1C", VA = "0x8B2E1C")]
		public void Subdivide([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x8B319C", Offset = "0x8B319C", VA = "0x8B319C")]
		public void Simplify([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x8B34DC", Offset = "0x8B34DC", VA = "0x8B34DC")]
		public void Equalize([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x8B38D4", Offset = "0x8B38D4", VA = "0x8B38D4")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x8B3B14", Offset = "0x8B3B14", VA = "0x8B3B14")]
		public void MakePlanar(int axis)
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x8B3CF0", Offset = "0x8B3CF0", VA = "0x8B3CF0")]
		public Vector3 SetPivot(float xRel = 0f, float yRel = 0f, float zRel = 0f, bool preview = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x8B416C", Offset = "0x8B416C", VA = "0x8B416C")]
		public void Flip()
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x8B4734", Offset = "0x8B4734", VA = "0x8B4734")]
		public void MoveControlPoints(int startIndex, int count, CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x8B4A60", Offset = "0x8B4A60", VA = "0x8B4A60")]
		public void JoinWith(CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x8B4B64", Offset = "0x8B4B64", VA = "0x8B4B64")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x8B50DC", Offset = "0x8B50DC", VA = "0x8B50DC", Slot = "4")]
		protected override bool UpgradeVersion(string oldVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x8A81F4", Offset = "0x8A81F4", VA = "0x8A81F4")]
		private void doUpdate()
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x8A7228", Offset = "0x8A7228", VA = "0x8A7228")]
		private Bounds getBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x8B5234", Offset = "0x8B5234", VA = "0x8B5234")]
		private void clearBounds()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x8A6EF4", Offset = "0x8A6EF4", VA = "0x8A6EF4")]
		private bool canHaveManualEndCP()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x8B532C", Offset = "0x8B532C", VA = "0x8B532C")]
		internal void setLengthINTERNAL(float length)
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x8B5334", Offset = "0x8B5334", VA = "0x8B5334")]
		private bool getPreviousApproximationPoint(CurvySplineSegment seg, int idx, out CurvySplineSegment res, out int residx, ref CurvySplineSegment[] validSegments)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x8B54BC", Offset = "0x8B54BC", VA = "0x8B54BC")]
		private bool getNextApproximationPoint(CurvySplineSegment seg, int idx, out CurvySplineSegment res, out int residx, ref CurvySplineSegment[] validSegments)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x8B563C", Offset = "0x8B563C", VA = "0x8B563C")]
		private CurvySplineSegment getNextSegmentWithinRange(CurvySplineSegment seg, float tf, float fDistance, out float segTF)
		{
			return null;
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x8B5818", Offset = "0x8B5818", VA = "0x8B5818")]
		private CurvySplineSegment getNextSegmentWithinRangeDistance(CurvySplineSegment seg, float tf, float tfDist, float distance, out float segDistance)
		{
			return null;
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x8ABB88", Offset = "0x8ABB88", VA = "0x8ABB88")]
		private Vector3 eventAwareMove(ref float tf, ref int direction, float fDistance, CurvyClamping clamping, bool fastMode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x8AC560", Offset = "0x8AC560", VA = "0x8AC560")]
		private Vector3 eventAwareMoveDistance(ref float tf, ref int direction, float distance, CurvyClamping clamping, bool fastMode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x8B5BB8", Offset = "0x8B5BB8", VA = "0x8B5BB8")]
		internal bool MoveByAngleExtINTERNAL(ref float tf, float minDistance, float maxDistance, float maxAngle, out Vector3 pos, out Vector3 tan, out float movedDistance, float stopTF = float.MaxValue, bool loop = true, float stepDist = -1f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x8B1720", Offset = "0x8B1720", VA = "0x8B1720")]
		private CurvySplineSegment getCurrentAnchorGroup(CurvySplineSegment seg)
		{
			return null;
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x8B6040", Offset = "0x8B6040", VA = "0x8B6040")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AB78", Offset = "0x57AB78")]
		private static int <UpgradeVersion>m__0(CurvySplineSegment x, CurvySplineSegment y)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200040D")]
	[AttributeAttribute(Name = "DTVersionAttribute", RVA = "0x57AB88", Offset = "0x57AB88")]
	public class CurvySplineBase : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x20005A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AE5C", Offset = "0x57AE5C")]
		private sealed class <GetPolygon>c__AnonStorey0
		{
			[Token(Token = "0x40018E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<Vector3> vPos;

			[Token(Token = "0x40018E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector3 curPos;

			[Token(Token = "0x40018E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal List<Vector3> vTan;

			[Token(Token = "0x40018E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Vector3 curTangent;

			[Token(Token = "0x40018E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal List<float> vTF;

			[Token(Token = "0x40018EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal float angleFromLast;

			[Token(Token = "0x40018EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal float distAccu;

			[Token(Token = "0x40018EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal int linearSteps;

			[Token(Token = "0x6002452")]
			[Address(RVA = "0x8B7390", Offset = "0x8B7390", VA = "0x8B7390")]
			public <GetPolygon>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6002453")]
			[Address(RVA = "0x8B8C68", Offset = "0x8B8C68", VA = "0x8B8C68")]
			internal void <>m__0(float f)
			{
			}
		}

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57ABC0", Offset = "0x57ABC0")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x57ABC0", Offset = "0x57ABC0")]
		[SerializeField]
		private CurvySplineEvent m_OnRefresh;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57AC3C", Offset = "0x57AC3C")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x57AC3C", Offset = "0x57AC3C")]
		[SerializeField]
		private CurvySplineEvent m_OnAfterControlPointChanges;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57ACA4", Offset = "0x57ACA4")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x57ACA4", Offset = "0x57ACA4")]
		[SerializeField]
		private CurvyControlPointEvent m_OnBeforeControlPointAdd;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57AD0C", Offset = "0x57AD0C")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x57AD0C", Offset = "0x57AD0C")]
		[SerializeField]
		private CurvyControlPointEvent m_OnAfterControlPointAdd;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57AD74", Offset = "0x57AD74")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x57AD74", Offset = "0x57AD74")]
		[SerializeField]
		private CurvyControlPointEvent m_OnBeforeControlPointDelete;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private CurvySplineMoveEvent m_OnMoveControlPointReached;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private CurvySplineMoveEvent m_OnMoveEndReached;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public bool ShowGizmos;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float mLength;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TTransform mTTransform;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Bounds mBounds;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected bool mIsInitialized;

		[Token(Token = "0x1700031A")]
		public CurvySplineEvent OnRefresh
		{
			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0x8B6144", Offset = "0x8B6144", VA = "0x8B6144")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0x8B614C", Offset = "0x8B614C", VA = "0x8B614C")]
			set
			{
			}
		}

		[Token(Token = "0x1700031B")]
		public CurvySplineEvent OnAfterControlPointChanges
		{
			[Token(Token = "0x6001AEC")]
			[Address(RVA = "0x8B6160", Offset = "0x8B6160", VA = "0x8B6160")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AED")]
			[Address(RVA = "0x8B6168", Offset = "0x8B6168", VA = "0x8B6168")]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		public CurvyControlPointEvent OnBeforeControlPointAdd
		{
			[Token(Token = "0x6001AEE")]
			[Address(RVA = "0x8B617C", Offset = "0x8B617C", VA = "0x8B617C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AEF")]
			[Address(RVA = "0x8B6184", Offset = "0x8B6184", VA = "0x8B6184")]
			set
			{
			}
		}

		[Token(Token = "0x1700031D")]
		public CurvyControlPointEvent OnAfterControlPointAdd
		{
			[Token(Token = "0x6001AF0")]
			[Address(RVA = "0x8B6198", Offset = "0x8B6198", VA = "0x8B6198")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0x8B61A0", Offset = "0x8B61A0", VA = "0x8B61A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700031E")]
		public CurvyControlPointEvent OnBeforeControlPointDelete
		{
			[Token(Token = "0x6001AF2")]
			[Address(RVA = "0x8B61B4", Offset = "0x8B61B4", VA = "0x8B61B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AF3")]
			[Address(RVA = "0x8B61BC", Offset = "0x8B61BC", VA = "0x8B61BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700031F")]
		public CurvySplineMoveEvent OnMoveControlPointReached
		{
			[Token(Token = "0x6001AF4")]
			[Address(RVA = "0x8ABB1C", Offset = "0x8ABB1C", VA = "0x8ABB1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AF5")]
			[Address(RVA = "0x8B61D0", Offset = "0x8B61D0", VA = "0x8B61D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000320")]
		public CurvySplineMoveEvent OnMoveEndReached
		{
			[Token(Token = "0x6001AF6")]
			[Address(RVA = "0x8ABB24", Offset = "0x8ABB24", VA = "0x8ABB24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AF7")]
			[Address(RVA = "0x8B61E4", Offset = "0x8B61E4", VA = "0x8B61E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000321")]
		public TTransform TTransform
		{
			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0x8AEAE4", Offset = "0x8AEAE4", VA = "0x8AEAE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		public bool IsInitialized
		{
			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0x8A32D8", Offset = "0x8A32D8", VA = "0x8A32D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000323")]
		public float Length
		{
			[Token(Token = "0x6001B00")]
			[Address(RVA = "0x8AB41C", Offset = "0x8AB41C", VA = "0x8AB41C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000324")]
		public virtual bool IsContinuous
		{
			[Token(Token = "0x6001B01")]
			[Address(RVA = "0x8B6214", Offset = "0x8B6214", VA = "0x8B6214", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000325")]
		public virtual bool IsClosed
		{
			[Token(Token = "0x6001B02")]
			[Address(RVA = "0x8B621C", Offset = "0x8B621C", VA = "0x8B621C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000326")]
		public virtual bool Dirty
		{
			[Token(Token = "0x6001B03")]
			[Address(RVA = "0x8B6224", Offset = "0x8B6224", VA = "0x8B6224", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000327")]
		public virtual int Count
		{
			[Token(Token = "0x6001B04")]
			[Address(RVA = "0x8B622C", Offset = "0x8B622C", VA = "0x8B622C", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000328")]
		public virtual Bounds Bounds
		{
			[Token(Token = "0x6001B05")]
			[Address(RVA = "0x8B6234", Offset = "0x8B6234", VA = "0x8B6234", Slot = "9")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x8A6CF4", Offset = "0x8A6CF4", VA = "0x8A6CF4")]
		public CurvySplineBase()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x8B223C", Offset = "0x8B223C", VA = "0x8B223C")]
		protected CurvySplineEventArgs OnRefreshEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x8AD6F0", Offset = "0x8AD6F0", VA = "0x8AD6F0")]
		protected CurvyControlPointEventArgs OnBeforeControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x8AD764", Offset = "0x8AD764", VA = "0x8AD764")]
		protected CurvyControlPointEventArgs OnAfterControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x8AE824", Offset = "0x8AE824", VA = "0x8AE824")]
		protected CurvyControlPointEventArgs OnBeforeControlPointDeleteEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x8AD7D0", Offset = "0x8AD7D0", VA = "0x8AD7D0")]
		protected CurvySplineEventArgs OnAfterControlPointChangesEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x8B5AB8", Offset = "0x8B5AB8", VA = "0x8B5AB8")]
		protected CurvySplineMoveEventArgs OnMoveControlPointReachedEvent(CurvySplineMoveEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x8A7AE4", Offset = "0x8A7AE4", VA = "0x8A7AE4", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x8B6240", Offset = "0x8B6240", VA = "0x8B6240", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x8B6244", Offset = "0x8B6244", VA = "0x8B6244", Slot = "12")]
		public virtual Vector3 Interpolate(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x8B62A8", Offset = "0x8B62A8", VA = "0x8B62A8", Slot = "13")]
		public virtual Vector3 Interpolate(float tf, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x8B630C", Offset = "0x8B630C", VA = "0x8B630C", Slot = "14")]
		public virtual Vector3 InterpolateFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x8B6370", Offset = "0x8B6370", VA = "0x8B6370", Slot = "15")]
		public virtual Vector3 InterpolateUserValue(float tf, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B0C")]
		public T GetMetadata<T>(float tf) where T : Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x8B63D4", Offset = "0x8B63D4", VA = "0x8B63D4", Slot = "16")]
		public virtual Component GetMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B0E")]
		public virtual U InterpolateMetadata<T, U>(float tf) where T : Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x8B63DC", Offset = "0x8B63DC", VA = "0x8B63DC", Slot = "18")]
		public virtual object InterpolateMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x8B63E4", Offset = "0x8B63E4", VA = "0x8B63E4", Slot = "19")]
		public virtual Vector3 InterpolateScale(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x8B6448", Offset = "0x8B6448", VA = "0x8B6448", Slot = "20")]
		public virtual Vector3 GetOrientationUpFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x8B64AC", Offset = "0x8B64AC", VA = "0x8B64AC", Slot = "21")]
		public virtual Quaternion GetOrientationFast(float tf)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x8B64C0", Offset = "0x8B64C0", VA = "0x8B64C0", Slot = "22")]
		public virtual Quaternion GetOrientationFast(float tf, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x8B6524", Offset = "0x8B6524", VA = "0x8B6524", Slot = "23")]
		public virtual Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x8B6588", Offset = "0x8B6588", VA = "0x8B6588", Slot = "24")]
		public virtual Vector3 GetTangent(float tf, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x8B65EC", Offset = "0x8B65EC", VA = "0x8B65EC", Slot = "25")]
		public virtual Vector3 GetTangentFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x8B6650", Offset = "0x8B6650", VA = "0x8B6650", Slot = "26")]
		public virtual float TFToDistance(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x8B5B90", Offset = "0x8B5B90", VA = "0x8B5B90")]
		public float TFToDistance(float tf)
		{
			return default(float);
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x8B6658", Offset = "0x8B6658", VA = "0x8B6658", Slot = "27")]
		public virtual float DistanceToTF(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x8B5BA4", Offset = "0x8B5BA4", VA = "0x8B5BA4")]
		public float DistanceToTF(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x8B6660", Offset = "0x8B6660", VA = "0x8B6660", Slot = "28")]
		public virtual CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x8B666C", Offset = "0x8B666C", VA = "0x8B666C")]
		public CurvySplineSegment TFToSegment(float tf, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x8B5A84", Offset = "0x8B5A84", VA = "0x8B5A84")]
		public CurvySplineSegment TFToSegment(float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x8A9284", Offset = "0x8A9284", VA = "0x8A9284")]
		public CurvySplineSegment TFToSegment(float tf, out float localF)
		{
			return null;
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x8B66A4", Offset = "0x8B66A4", VA = "0x8B66A4", Slot = "29")]
		public virtual float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x8B66B8", Offset = "0x8B66B8", VA = "0x8B66B8", Slot = "30")]
		public virtual float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x8B66C0", Offset = "0x8B66C0", VA = "0x8B66C0", Slot = "31")]
		public virtual float GetNearestPointTF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x8B66C8", Offset = "0x8B66C8", VA = "0x8B66C8", Slot = "32")]
		public virtual float GetNearestPointTF(Vector3 p, out Vector3 nearest)
		{
			return default(float);
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x8B6740", Offset = "0x8B6740", VA = "0x8B6740", Slot = "33")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x8B6744", Offset = "0x8B6744", VA = "0x8B6744", Slot = "34")]
		public virtual Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x8B679C", Offset = "0x8B679C", VA = "0x8B679C", Slot = "35")]
		public virtual Vector3[] GetApproximationT()
		{
			return null;
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x8B67F4", Offset = "0x8B67F4", VA = "0x8B67F4", Slot = "36")]
		public virtual Vector3[] GetApproximationUpVectors()
		{
			return null;
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x8B684C", Offset = "0x8B684C", VA = "0x8B684C")]
		public Vector3[] GetPolygonByAngle(float angle, float minDistance)
		{
			return null;
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x8B6B28", Offset = "0x8B6B28", VA = "0x8B6B28")]
		public Vector3[] GetPolygon(float fromTF, float toTF, float maxAngle, float minDistance, float maxDistance, out List<float> vertexTF, out List<Vector3> vertexTangents, bool includeEndPoint = true, float stepSize = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x8B7398", Offset = "0x8B7398", VA = "0x8B7398")]
		public Vector3[] GetApproximationPoints(float fromTF, float toTF, bool includeEndPoint = true)
		{
			return null;
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x8ABB2C", Offset = "0x8ABB2C", VA = "0x8ABB2C", Slot = "37")]
		public virtual Vector3 Move(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x8AC364", Offset = "0x8AC364", VA = "0x8AC364", Slot = "38")]
		public virtual Vector3 MoveFast(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x8B7968", Offset = "0x8B7968", VA = "0x8B7968", Slot = "39")]
		public virtual Vector3 MoveBy(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x8B7980", Offset = "0x8B7980", VA = "0x8B7980", Slot = "40")]
		public virtual Vector3 MoveBy(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x8B7BE4", Offset = "0x8B7BE4", VA = "0x8B7BE4", Slot = "41")]
		public virtual Vector3 MoveByFast(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x8B7BFC", Offset = "0x8B7BFC", VA = "0x8B7BFC", Slot = "42")]
		public virtual Vector3 MoveByFast(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x8AC4B4", Offset = "0x8AC4B4", VA = "0x8AC4B4", Slot = "43")]
		public virtual Vector3 MoveByLengthFast(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x8B7E70", Offset = "0x8B7E70", VA = "0x8B7E70", Slot = "44")]
		public virtual Vector3 MoveByAngle(ref float tf, ref int direction, float angle, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x8B7E88", Offset = "0x8B7E88", VA = "0x8B7E88", Slot = "45")]
		public virtual Vector3 MoveByAngle(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x8B81B4", Offset = "0x8B81B4", VA = "0x8B81B4", Slot = "46")]
		public virtual Vector3 MoveByAngleFast(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x8B84D0", Offset = "0x8B84D0", VA = "0x8B84D0", Slot = "47")]
		public virtual Vector3 GetExtrusionPoint(float tf, float radius, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x8B8688", Offset = "0x8B8688", VA = "0x8B8688", Slot = "48")]
		public virtual Vector3 GetExtrusionPointFast(float tf, float radius, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x8B8834", Offset = "0x8B8834", VA = "0x8B8834")]
		public Vector3 GetRotatedUp(float tf, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x8B8940", Offset = "0x8B8940", VA = "0x8B8940")]
		public Vector3 GetRotatedUpFast(float tf, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x8B8A4C", Offset = "0x8B8A4C", VA = "0x8B8A4C", Slot = "49")]
		public virtual Vector3 GetTangentByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x8B8A8C", Offset = "0x8B8A8C", VA = "0x8B8A8C", Slot = "50")]
		public virtual Vector3 GetTangentByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x8B8ACC", Offset = "0x8B8ACC", VA = "0x8B8ACC", Slot = "51")]
		public virtual Vector3 InterpolateByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x8B8B08", Offset = "0x8B8B08", VA = "0x8B8B08", Slot = "52")]
		public virtual Vector3 InterpolateByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x8B79E4", Offset = "0x8B79E4", VA = "0x8B79E4")]
		public float ExtrapolateDistanceToTF(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x8B7C60", Offset = "0x8B7C60", VA = "0x8B7C60")]
		public float ExtrapolateDistanceToTFFast(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x8B8B44", Offset = "0x8B8B44", VA = "0x8B8B44")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x8B8C10", Offset = "0x8B8C10", VA = "0x8B8C10", Slot = "53")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x8B8C14", Offset = "0x8B8C14", VA = "0x8B8C14", Slot = "54")]
		public virtual void SetDirtyAll()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x8B8C18", Offset = "0x8B8C18", VA = "0x8B8C18")]
		public float ClampDistance(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x8B8C28", Offset = "0x8B8C28", VA = "0x8B8C28")]
		public float ClampDistance(float distance, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x8B7E60", Offset = "0x8B7E60", VA = "0x8B7E60")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x8B8C48", Offset = "0x8B8C48", VA = "0x8B8C48")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200040E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57AE6C", Offset = "0x57AE6C")]
	public class CurvySplineGroup : CurvySplineBase
	{
		[Token(Token = "0x20005A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AF88", Offset = "0x57AF88")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <i>__1;

			[Token(Token = "0x40018EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal CurvySplineGroup $this;

			[Token(Token = "0x40018EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x40018F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40018F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004D4")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002456")]
				[Address(RVA = "0x8BBB44", Offset = "0x8BBB44", VA = "0x8BBB44", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002457")]
				[Address(RVA = "0x8BBB4C", Offset = "0x8BBB4C", VA = "0x8BBB4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002454")]
			[Address(RVA = "0x8B9114", Offset = "0x8B9114", VA = "0x8B9114")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6002455")]
			[Address(RVA = "0x8BB97C", Offset = "0x8BB97C", VA = "0x8BB97C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002458")]
			[Address(RVA = "0x8BBB54", Offset = "0x8BBB54", VA = "0x8BBB54", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002459")]
			[Address(RVA = "0x8BBB68", Offset = "0x8BBB68", VA = "0x8BBB68", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[ArrayEx]
		private List<CurvySpline> m_Splines;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AEFC", Offset = "0x57AEFC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57AEFC", Offset = "0x57AEFC")]
		private float[] <Distances>k__BackingField;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool mIsContinuous;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool mIsClosed;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		private bool mDirty;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Bounds? mBounds;

		[Token(Token = "0x17000329")]
		public List<CurvySpline> Splines
		{
			[Token(Token = "0x6001B46")]
			[Address(RVA = "0x8B8DBC", Offset = "0x8B8DBC", VA = "0x8B8DBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B47")]
			[Address(RVA = "0x8B8DC4", Offset = "0x8B8DC4", VA = "0x8B8DC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		public override Bounds Bounds
		{
			[Token(Token = "0x6001B48")]
			[Address(RVA = "0x8B8DD4", Offset = "0x8B8DD4", VA = "0x8B8DD4", Slot = "9")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700032B")]
		public float[] Distances
		{
			[Token(Token = "0x6001B49")]
			[Address(RVA = "0x8B8F68", Offset = "0x8B8F68", VA = "0x8B8F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AF38", Offset = "0x57AF38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0x8B8F70", Offset = "0x8B8F70", VA = "0x8B8F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57AF48", Offset = "0x57AF48")]
			private set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public override int Count
		{
			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0x8B8F78", Offset = "0x8B8F78", VA = "0x8B8F78", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700032D")]
		public CurvySpline Item
		{
			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0x8B8FD4", Offset = "0x8B8FD4", VA = "0x8B8FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032E")]
		public override bool IsContinuous
		{
			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0x8B907C", Offset = "0x8B907C", VA = "0x8B907C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032F")]
		public override bool IsClosed
		{
			[Token(Token = "0x6001B4E")]
			[Address(RVA = "0x8B9084", Offset = "0x8B9084", VA = "0x8B9084", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000330")]
		public override bool Dirty
		{
			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0x8B90A0", Offset = "0x8B90A0", VA = "0x8B90A0", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x8B8D50", Offset = "0x8B8D50", VA = "0x8B8D50")]
		public CurvySplineGroup()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x8B90A8", Offset = "0x8B90A8", VA = "0x8B90A8")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x8B911C", Offset = "0x8B911C", VA = "0x8B911C", Slot = "11")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x8B9168", Offset = "0x8B9168", VA = "0x8B9168")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x8B92C4", Offset = "0x8B92C4", VA = "0x8B92C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x8B930C", Offset = "0x8B930C", VA = "0x8B930C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x8B931C", Offset = "0x8B931C", VA = "0x8B931C")]
		public static CurvySplineGroup Create(params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x8B94F4", Offset = "0x8B94F4", VA = "0x8B94F4", Slot = "54")]
		public override void SetDirtyAll()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x8B9500", Offset = "0x8B9500", VA = "0x8B9500", Slot = "12")]
		public override Vector3 Interpolate(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x8B963C", Offset = "0x8B963C", VA = "0x8B963C", Slot = "14")]
		public override Vector3 InterpolateFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x8B9730", Offset = "0x8B9730", VA = "0x8B9730", Slot = "15")]
		public override Vector3 InterpolateUserValue(float tf, int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x8B9838", Offset = "0x8B9838", VA = "0x8B9838", Slot = "19")]
		public override Vector3 InterpolateScale(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x8B9930", Offset = "0x8B9930", VA = "0x8B9930", Slot = "20")]
		public override Vector3 GetOrientationUpFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x8B9A28", Offset = "0x8B9A28", VA = "0x8B9A28", Slot = "22")]
		public override Quaternion GetOrientationFast(float tf, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x8B9B30", Offset = "0x8B9B30", VA = "0x8B9B30", Slot = "23")]
		public override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x8B9C28", Offset = "0x8B9C28", VA = "0x8B9C28", Slot = "24")]
		public override Vector3 GetTangent(float tf, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x8B9D40", Offset = "0x8B9D40", VA = "0x8B9D40", Slot = "25")]
		public override Vector3 GetTangentFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x8B9E38", Offset = "0x8B9E38", VA = "0x8B9E38", Slot = "40")]
		public override Vector3 MoveBy(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x8B9E48", Offset = "0x8B9E48", VA = "0x8B9E48", Slot = "42")]
		public override Vector3 MoveByFast(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x8B9E58", Offset = "0x8B9E58", VA = "0x8B9E58", Slot = "26")]
		public override float TFToDistance(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x8B9FE8", Offset = "0x8B9FE8", VA = "0x8B9FE8")]
		public CurvySpline TFToSpline(float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x8B95F4", Offset = "0x8B95F4", VA = "0x8B95F4")]
		public CurvySpline TFToSpline(float tf, out float localTF)
		{
			return null;
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x8BA03C", Offset = "0x8BA03C", VA = "0x8BA03C")]
		public float SplineToTF(CurvySpline spline, float splineTF)
		{
			return default(float);
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x8BA11C", Offset = "0x8BA11C", VA = "0x8BA11C", Slot = "28")]
		public override CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x8BA1AC", Offset = "0x8BA1AC", VA = "0x8BA1AC", Slot = "29")]
		public override float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x8BA1E8", Offset = "0x8BA1E8", VA = "0x8BA1E8", Slot = "30")]
		public override float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x8BA258", Offset = "0x8BA258", VA = "0x8BA258", Slot = "27")]
		public override float DistanceToTF(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x8BA4C8", Offset = "0x8BA4C8", VA = "0x8BA4C8")]
		public CurvySpline DistanceToSpline(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x8BA348", Offset = "0x8BA348", VA = "0x8BA348")]
		public CurvySpline DistanceToSpline(float distance, out float localDistance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x8BA4F4", Offset = "0x8BA4F4", VA = "0x8BA4F4", Slot = "34")]
		public override Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x8BA8F8", Offset = "0x8BA8F8", VA = "0x8BA8F8", Slot = "35")]
		public override Vector3[] GetApproximationT()
		{
			return null;
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x8BAB84", Offset = "0x8BAB84", VA = "0x8BAB84", Slot = "36")]
		public override Vector3[] GetApproximationUpVectors()
		{
			return null;
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x8BAE10", Offset = "0x8BAE10", VA = "0x8BAE10", Slot = "31")]
		public override float GetNearestPointTF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x8BAE44", Offset = "0x8BAE44", VA = "0x8BAE44", Slot = "32")]
		public override float GetNearestPointTF(Vector3 p, out Vector3 nearest)
		{
			return default(float);
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x8BB07C", Offset = "0x8BB07C", VA = "0x8BB07C", Slot = "16")]
		public override Component GetMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B72")]
		public override U InterpolateMetadata<T, U>(float tf)
		{
			return (U)null;
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x8BB15C", Offset = "0x8BB15C", VA = "0x8BB15C", Slot = "18")]
		public override object InterpolateMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x8B9474", Offset = "0x8B9474", VA = "0x8B9474")]
		public void Add(params CurvySpline[] splines)
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x8BB23C", Offset = "0x8BB23C", VA = "0x8BB23C")]
		public void Delete(CurvySpline spline)
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x8BB2BC", Offset = "0x8BB2BC", VA = "0x8BB2BC", Slot = "33")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x8BB32C", Offset = "0x8BB32C", VA = "0x8BB32C", Slot = "53")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x8BB514", Offset = "0x8BB514", VA = "0x8BB514")]
		public void RemoveEmptySplines()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x8B8EA0", Offset = "0x8B8EA0", VA = "0x8B8EA0")]
		private Bounds getBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x8BB640", Offset = "0x8BB640", VA = "0x8BB640")]
		private void doRefreshLength()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x8BA790", Offset = "0x8BA790", VA = "0x8BA790")]
		private bool NextSplineConnected(int idx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x8BB828", Offset = "0x8BB828", VA = "0x8BB828")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x8BB768", Offset = "0x8BB768", VA = "0x8BB768")]
		private void doGetProperties()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x8B9F30", Offset = "0x8B9F30", VA = "0x8B9F30")]
		private int TFToSplineIndex(float tf, out float localTF, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200040F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57AFE8", Offset = "0x57AFE8")]
	public class CurvySplineSegment : MonoBehaviour, IComparable, IPoolable
	{
		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57B034", Offset = "0x57B034")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x57B034", Offset = "0x57B034")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57B034", Offset = "0x57B034")]
		[SerializeField]
		private bool m_AutoBakeOrientation;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57B0F0", Offset = "0x57B0F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57B0F0", Offset = "0x57B0F0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57B0F0", Offset = "0x57B0F0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57B0F0", Offset = "0x57B0F0")]
		[SerializeField]
		private bool m_OrientationAnchor;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57B254", Offset = "0x57B254")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57B254", Offset = "0x57B254")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57B254", Offset = "0x57B254")]
		[SerializeField]
		private CurvyOrientationSwirl m_Swirl;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57B36C", Offset = "0x57B36C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x57B36C", Offset = "0x57B36C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57B36C", Offset = "0x57B36C")]
		[SerializeField]
		private float m_SwirlTurns;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57B4C0", Offset = "0x57B4C0")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x57B4C0", Offset = "0x57B4C0")]
		[SerializeField]
		private bool m_AutoHandles;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57B5B8", Offset = "0x57B5B8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57B5B8", Offset = "0x57B5B8")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x57B6BC", Offset = "0x57B6BC")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57B6BC", Offset = "0x57B6BC")]
		private Vector3 m_HandleIn;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x57B764", Offset = "0x57B764")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57B764", Offset = "0x57B764")]
		private Vector3 m_HandleOut;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57B80C", Offset = "0x57B80C")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x57B80C", Offset = "0x57B80C")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0x57B80C", Offset = "0x57B80C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57B80C", Offset = "0x57B80C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57B80C", Offset = "0x57B80C")]
		private bool m_OverrideGlobalTension;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57B98C", Offset = "0x57B98C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57B98C", Offset = "0x57B98C")]
		private bool m_OverrideGlobalContinuity;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BA18", Offset = "0x57BA18")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BA18", Offset = "0x57BA18")]
		private bool m_OverrideGlobalBias;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x57BAA4", Offset = "0x57BAA4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BAA4", Offset = "0x57BAA4")]
		private bool m_SynchronizeTCB;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BB14", Offset = "0x57BB14")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57BB14", Offset = "0x57BB14")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BB14", Offset = "0x57BB14")]
		private float m_StartTension;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BC2C", Offset = "0x57BC2C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57BC2C", Offset = "0x57BC2C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BC2C", Offset = "0x57BC2C")]
		private float m_EndTension;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BD78", Offset = "0x57BD78")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57BD78", Offset = "0x57BD78")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BD78", Offset = "0x57BD78")]
		private float m_StartContinuity;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BE90", Offset = "0x57BE90")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57BE90", Offset = "0x57BE90")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BE90", Offset = "0x57BE90")]
		private float m_EndContinuity;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57BFDC", Offset = "0x57BFDC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57BFDC", Offset = "0x57BFDC")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57BFDC", Offset = "0x57BFDC")]
		private float m_StartBias;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57C0F4", Offset = "0x57C0F4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57C0F4", Offset = "0x57C0F4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x57C0F4", Offset = "0x57C0F4")]
		private float m_EndBias;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private CurvySplineSegment m_FollowUp;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private ConnectionHeadingEnum m_FollowUpHeading;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private bool m_ConnectionSyncPosition;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[SerializeField]
		[HideInInspector]
		private bool m_ConnectionSyncRotation;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[HideInInspector]
		private CurvyConnection m_Connection;

		[NonSerialized]
		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3[] Approximation;

		[NonSerialized]
		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float[] ApproximationDistances;

		[NonSerialized]
		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector3[] ApproximationUp;

		[NonSerialized]
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3[] ApproximationT;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C358", Offset = "0x57C358")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57C358", Offset = "0x57C358")]
		private int <CacheSize>k__BackingField;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C394", Offset = "0x57C394")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57C394", Offset = "0x57C394")]
		private float <Length>k__BackingField;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C3D0", Offset = "0x57C3D0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57C3D0", Offset = "0x57C3D0")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private TTransform mTTransform;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CurvySpline mSpline;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float mStepSize;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int mControlPointIndex;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int mSegmentIndex;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Bounds? mBounds;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int mCacheLastDistanceToLocalFIndex;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Component> mMetaData;

		[Token(Token = "0x17000331")]
		public bool AutoBakeOrientation
		{
			[Token(Token = "0x6001B80")]
			[Address(RVA = "0x8B1E24", Offset = "0x8B1E24", VA = "0x8B1E24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B81")]
			[Address(RVA = "0x8BC27C", Offset = "0x8BC27C", VA = "0x8BC27C")]
			set
			{
			}
		}

		[Token(Token = "0x17000332")]
		public bool OrientationAnchor
		{
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0x8B1AF4", Offset = "0x8B1AF4", VA = "0x8B1AF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B83")]
			[Address(RVA = "0x8B16F4", Offset = "0x8B16F4", VA = "0x8B16F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000333")]
		public CurvyOrientationSwirl Swirl
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0x8B1B90", Offset = "0x8B1B90", VA = "0x8B1B90")]
			get
			{
				return default(CurvyOrientationSwirl);
			}
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0x8BC2A8", Offset = "0x8BC2A8", VA = "0x8BC2A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public float SwirlTurns
		{
			[Token(Token = "0x6001B86")]
			[Address(RVA = "0x8B1B98", Offset = "0x8B1B98", VA = "0x8B1B98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B87")]
			[Address(RVA = "0x8BC2C8", Offset = "0x8BC2C8", VA = "0x8BC2C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public Vector3 HandleIn
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0x8A6A7C", Offset = "0x8A6A7C", VA = "0x8A6A7C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0x8A3FF4", Offset = "0x8A3FF4", VA = "0x8A3FF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public Vector3 HandleOut
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0x8A6A88", Offset = "0x8A6A88", VA = "0x8A6A88")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B8B")]
			[Address(RVA = "0x8A4190", Offset = "0x8A4190", VA = "0x8A4190")]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public Vector3 HandleInPosition
		{
			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0x8BC374", Offset = "0x8BC374", VA = "0x8BC374")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0x8A4AB4", Offset = "0x8A4AB4", VA = "0x8A4AB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000338")]
		public Vector3 HandleOutPosition
		{
			[Token(Token = "0x6001B8E")]
			[Address(RVA = "0x8BC4BC", Offset = "0x8BC4BC", VA = "0x8BC4BC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001B8F")]
			[Address(RVA = "0x8A4BCC", Offset = "0x8A4BCC", VA = "0x8A4BCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000339")]
		public bool AutoHandles
		{
			[Token(Token = "0x6001B90")]
			[Address(RVA = "0x8B07B4", Offset = "0x8B07B4", VA = "0x8B07B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B91")]
			[Address(RVA = "0x8A45FC", Offset = "0x8A45FC", VA = "0x8A45FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700033A")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6001B92")]
			[Address(RVA = "0x8BC6C4", Offset = "0x8BC6C4", VA = "0x8BC6C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B93")]
			[Address(RVA = "0x8A4724", Offset = "0x8A4724", VA = "0x8A4724")]
			set
			{
			}
		}

		[Token(Token = "0x1700033B")]
		public bool SynchronizeTCB
		{
			[Token(Token = "0x6001B94")]
			[Address(RVA = "0x8B4700", Offset = "0x8B4700", VA = "0x8B4700")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B95")]
			[Address(RVA = "0x8B4708", Offset = "0x8B4708", VA = "0x8B4708")]
			set
			{
			}
		}

		[Token(Token = "0x1700033C")]
		public bool OverrideGlobalTension
		{
			[Token(Token = "0x6001B96")]
			[Address(RVA = "0x8B46CC", Offset = "0x8B46CC", VA = "0x8B46CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B97")]
			[Address(RVA = "0x8B46D4", Offset = "0x8B46D4", VA = "0x8B46D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public bool OverrideGlobalContinuity
		{
			[Token(Token = "0x6001B98")]
			[Address(RVA = "0x8B4698", Offset = "0x8B4698", VA = "0x8B4698")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B99")]
			[Address(RVA = "0x8B46A0", Offset = "0x8B46A0", VA = "0x8B46A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public bool OverrideGlobalBias
		{
			[Token(Token = "0x6001B9A")]
			[Address(RVA = "0x8B4664", Offset = "0x8B4664", VA = "0x8B4664")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0x8B466C", Offset = "0x8B466C", VA = "0x8B466C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public float StartTension
		{
			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0x8B45C4", Offset = "0x8B45C4", VA = "0x8B45C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0x8B4644", Offset = "0x8B4644", VA = "0x8B4644")]
			set
			{
			}
		}

		[Token(Token = "0x17000340")]
		public float StartContinuity
		{
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0x8B459C", Offset = "0x8B459C", VA = "0x8B459C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x8B461C", Offset = "0x8B461C", VA = "0x8B461C")]
			set
			{
			}
		}

		[Token(Token = "0x17000341")]
		public float StartBias
		{
			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0x8B4574", Offset = "0x8B4574", VA = "0x8B4574")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0x8B45F4", Offset = "0x8B45F4", VA = "0x8B45F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		public float EndTension
		{
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0x8B463C", Offset = "0x8B463C", VA = "0x8B463C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0x8B45CC", Offset = "0x8B45CC", VA = "0x8B45CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public float EndContinuity
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0x8B4614", Offset = "0x8B4614", VA = "0x8B4614")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0x8B45A4", Offset = "0x8B45A4", VA = "0x8B45A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000344")]
		public float EndBias
		{
			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0x8B45EC", Offset = "0x8B45EC", VA = "0x8B45EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA7")]
			[Address(RVA = "0x8B457C", Offset = "0x8B457C", VA = "0x8B457C")]
			set
			{
			}
		}

		[Token(Token = "0x17000345")]
		public bool CanHaveFollowUp
		{
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0x89C140", Offset = "0x89C140", VA = "0x89C140")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000346")]
		public CurvySplineSegment FollowUp
		{
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0x89C138", Offset = "0x89C138", VA = "0x89C138")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0x8BC6CC", Offset = "0x8BC6CC", VA = "0x8BC6CC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public ConnectionHeadingEnum FollowUpHeading
		{
			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0x8BC774", Offset = "0x8BC774", VA = "0x8BC774")]
			get
			{
				return default(ConnectionHeadingEnum);
			}
			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0x8BC77C", Offset = "0x8BC77C", VA = "0x8BC77C")]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public bool ConnectionSyncPosition
		{
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0x89C130", Offset = "0x89C130", VA = "0x89C130")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0x8BC7A0", Offset = "0x8BC7A0", VA = "0x8BC7A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000349")]
		public bool ConnectionSyncRotation
		{
			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0x89C6E8", Offset = "0x89C6E8", VA = "0x89C6E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0x8BC7C0", Offset = "0x8BC7C0", VA = "0x8BC7C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700034A")]
		public CurvyConnection Connection
		{
			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0x89C45C", Offset = "0x89C45C", VA = "0x89C45C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0x89B524", Offset = "0x89B524", VA = "0x89B524")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		public List<CurvySplineSegment> ConnectedControlPoints
		{
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0x8BC604", Offset = "0x8BC604", VA = "0x8BC604")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034C")]
		public TTransform TTransform
		{
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0x8AD75C", Offset = "0x8AD75C", VA = "0x8AD75C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034D")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0x8A6A50", Offset = "0x8A6A50", VA = "0x8A6A50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0x8A3B40", Offset = "0x8A3B40", VA = "0x8A3B40")]
			set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public Vector3 position
		{
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0x89C104", Offset = "0x89C104", VA = "0x89C104")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0x8BC7E0", Offset = "0x8BC7E0", VA = "0x8BC7E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public Quaternion localRotation
		{
			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0x8BC9A8", Offset = "0x8BC9A8", VA = "0x8BC9A8")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0x8A3D8C", Offset = "0x8A3D8C", VA = "0x8A3D8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000350")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0x8BC9D4", Offset = "0x8BC9D4", VA = "0x8BC9D4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0x8BCA00", Offset = "0x8BCA00", VA = "0x8BCA00")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public int CacheSize
		{
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0x8A00E8", Offset = "0x8A00E8", VA = "0x8A00E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C40C", Offset = "0x57C40C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0x8BCBA8", Offset = "0x8BCBA8", VA = "0x8BCBA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C41C", Offset = "0x57C41C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public Bounds Bounds
		{
			[Token(Token = "0x6001BBF")]
			[Address(RVA = "0x8A0834", Offset = "0x8A0834", VA = "0x8A0834")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x17000353")]
		public float Length
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0x8AB9F0", Offset = "0x8AB9F0", VA = "0x8AB9F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C42C", Offset = "0x57C42C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0x8BCE2C", Offset = "0x8BCE2C", VA = "0x8BCE2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C43C", Offset = "0x57C43C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public float Distance
		{
			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0x8AABCC", Offset = "0x8AABCC", VA = "0x8AABCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C44C", Offset = "0x57C44C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0x8B1470", Offset = "0x8B1470", VA = "0x8B1470")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C45C", Offset = "0x57C45C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000355")]
		public float TF
		{
			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0x8BCE34", Offset = "0x8BCE34", VA = "0x8BCE34")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000356")]
		public bool IsValidSegment
		{
			[Token(Token = "0x6001BC5")]
			[Address(RVA = "0x8AE0E8", Offset = "0x8AE0E8", VA = "0x8AE0E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000357")]
		public bool IsFirstSegment
		{
			[Token(Token = "0x6001BC6")]
			[Address(RVA = "0x8BD1E0", Offset = "0x8BD1E0", VA = "0x8BD1E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000358")]
		public bool IsLastSegment
		{
			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0x8BD338", Offset = "0x8BD338", VA = "0x8BD338")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000359")]
		public bool IsFirstControlPoint
		{
			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0x8B5FB0", Offset = "0x8B5FB0", VA = "0x8B5FB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035A")]
		public bool IsFirstVisibleControlPoint
		{
			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0x8B61F8", Offset = "0x8B61F8", VA = "0x8B61F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035B")]
		public bool IsLastVisibleControlPoint
		{
			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0x8B1AFC", Offset = "0x8B1AFC", VA = "0x8B1AFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035C")]
		public bool IsVisibleControlPoint
		{
			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0x8BD468", Offset = "0x8BD468", VA = "0x8BD468")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035D")]
		public bool IsLastControlPoint
		{
			[Token(Token = "0x6001BCC")]
			[Address(RVA = "0x8BD4A0", Offset = "0x8BD4A0", VA = "0x8BD4A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035E")]
		public List<Component> MetaData
		{
			[Token(Token = "0x6001BCD")]
			[Address(RVA = "0x8BD4EC", Offset = "0x8BD4EC", VA = "0x8BD4EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035F")]
		public CurvySplineSegment NextControlPoint
		{
			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0x8AE890", Offset = "0x8AE890", VA = "0x8AE890")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000360")]
		public CurvySplineSegment PreviousControlPoint
		{
			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0x8AE270", Offset = "0x8AE270", VA = "0x8AE270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000361")]
		public CurvySplineSegment PreviousControlPointWithFollowUp
		{
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0x8BD7D8", Offset = "0x8BD7D8", VA = "0x8BD7D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000362")]
		public CurvySplineSegment NextControlPointWithFollowUp
		{
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0x8BD87C", Offset = "0x8BD87C", VA = "0x8BD87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000363")]
		public Transform NextTransform
		{
			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0x8AE268", Offset = "0x8AE268", VA = "0x8AE268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000364")]
		public TTransform NextTTransform
		{
			[Token(Token = "0x6001BD3")]
			[Address(RVA = "0x8BDA04", Offset = "0x8BDA04", VA = "0x8BDA04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000365")]
		public Transform PreviousTransform
		{
			[Token(Token = "0x6001BD4")]
			[Address(RVA = "0x8ADED8", Offset = "0x8ADED8", VA = "0x8ADED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000366")]
		public TTransform PreviousTTransform
		{
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0x8BDAF0", Offset = "0x8BDAF0", VA = "0x8BDAF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000367")]
		public CurvySplineSegment NextSegment
		{
			[Token(Token = "0x6001BD6")]
			[Address(RVA = "0x8AB9F8", Offset = "0x8AB9F8", VA = "0x8AB9F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000368")]
		public CurvySplineSegment PreviousSegment
		{
			[Token(Token = "0x6001BD7")]
			[Address(RVA = "0x8ADECC", Offset = "0x8ADECC", VA = "0x8ADECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000369")]
		public int SegmentIndex
		{
			[Token(Token = "0x6001BD8")]
			[Address(RVA = "0x8AB294", Offset = "0x8AB294", VA = "0x8AB294")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700036A")]
		public int ControlPointIndex
		{
			[Token(Token = "0x6001BD9")]
			[Address(RVA = "0x8A7780", Offset = "0x8A7780", VA = "0x8A7780")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001BDA")]
			[Address(RVA = "0x8B22BC", Offset = "0x8B22BC", VA = "0x8B22BC")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700036B")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001BDB")]
			[Address(RVA = "0x89F288", Offset = "0x89F288", VA = "0x89F288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036C")]
		private CurvyInterpolation interpolation
		{
			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0x8C1690", Offset = "0x8C1690", VA = "0x8C1690")]
			get
			{
				return default(CurvyInterpolation);
			}
		}

		[Token(Token = "0x1700036D")]
		private bool isDynamicOrientation
		{
			[Token(Token = "0x6001C0F")]
			[Address(RVA = "0x8C16BC", Offset = "0x8C16BC", VA = "0x8C16BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700036E")]
		private bool canHaveSwirl
		{
			[Token(Token = "0x6001C10")]
			[Address(RVA = "0x8C1768", Offset = "0x8C1768", VA = "0x8C1768")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x8BC10C", Offset = "0x8BC10C", VA = "0x8BC10C")]
		public CurvySplineSegment()
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x8BDAF8", Offset = "0x8BDAF8", VA = "0x8BDAF8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x8BE31C", Offset = "0x8BE31C", VA = "0x8BE31C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x8BE3B4", Offset = "0x8BE3B4", VA = "0x8BE3B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x8BE434", Offset = "0x8BE434", VA = "0x8BE434")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x8BE438", Offset = "0x8BE438", VA = "0x8BE438")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x8A5AD0", Offset = "0x8A5AD0", VA = "0x8A5AD0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x8BE548", Offset = "0x8BE548", VA = "0x8BE548")]
		public void SetBezierHandleIn(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x8BED78", Offset = "0x8BED78", VA = "0x8BED78")]
		public void SetBezierHandleOut(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x8A4CE4", Offset = "0x8A4CE4", VA = "0x8A4CE4")]
		public void SetBezierHandles(float distanceFrag = -1f, bool setIn = true, bool setOut = true)
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x8BF554", Offset = "0x8BF554", VA = "0x8BF554")]
		public void SetBezierHandles(float distanceFrag, Vector3 p, Vector3 n, bool setIn = true, bool setOut = true)
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x89C6F0", Offset = "0x89C6F0", VA = "0x89C6F0")]
		public void RefreshTransform(bool refreshConnection = true, bool forceCurve = false, bool forceOrientation = false)
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x8BD51C", Offset = "0x8BD51C", VA = "0x8BD51C")]
		public void ReloadMetaData()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x8B22C4", Offset = "0x8B22C4", VA = "0x8B22C4")]
		public void ApplyName()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x8BF7D8", Offset = "0x8BF7D8", VA = "0x8BF7D8")]
		public bool ConnectTo(CurvySplineSegment targetCP, bool syncPosition = true, bool syncRotation = true, ConnectionHeadingEnum heading = ConnectionHeadingEnum.Auto)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x89C178", Offset = "0x89C178", VA = "0x89C178")]
		public void SetFollowUp(CurvySplineSegment target, ConnectionHeadingEnum heading = ConnectionHeadingEnum.Auto)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x89B5F0", Offset = "0x89B5F0", VA = "0x89B5F0")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x8B34A8", Offset = "0x8B34A8", VA = "0x8B34A8")]
		public void Delete()
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x8BCE3C", Offset = "0x8BCE3C", VA = "0x8BCE3C")]
		public CurvySplineSegment GetNextControlPoint(bool segmentsOnly, bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x8BD5D0", Offset = "0x8BD5D0", VA = "0x8BD5D0")]
		public CurvySplineSegment GetPreviousControlPoint(bool segmentsOnly, bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x8BD920", Offset = "0x8BD920", VA = "0x8BD920")]
		public Transform GetNextTransform(bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x8BD110", Offset = "0x8BD110", VA = "0x8BD110")]
		public TTransform GetNextTTransform(bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x8BDA0C", Offset = "0x8BDA0C", VA = "0x8BDA0C")]
		public Transform GetPreviousTransform(bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x8BD040", Offset = "0x8BD040", VA = "0x8BD040")]
		public TTransform GetPreviousTTransform(bool useFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x8BFCF4", Offset = "0x8BFCF4", VA = "0x8BFCF4")]
		public void SetAsFirstCP()
		{
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x8BFF80", Offset = "0x8BFF80", VA = "0x8BFF80")]
		public Vector3 GetPreviousPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x8C01EC", Offset = "0x8C01EC", VA = "0x8C01EC")]
		public Vector3 GetNextPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x89F3BC", Offset = "0x89F3BC", VA = "0x89F3BC")]
		public Vector3 Interpolate(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x8A9298", Offset = "0x8A9298", VA = "0x8A9298")]
		public Vector3 Interpolate(float localF, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x8A93E8", Offset = "0x8A93E8", VA = "0x8A93E8")]
		public Vector3 InterpolateFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x8A964C", Offset = "0x8A964C", VA = "0x8A964C")]
		public Component GetMetaData(Type type, bool autoCreate = false)
		{
			return null;
		}

		[Token(Token = "0x6001BFA")]
		public T GetMetadata<T>(bool autoCreate = false) where T : Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6001BFB")]
		public U InterpolateMetadata<T, U>(float f) where T : Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x8A99CC", Offset = "0x8A99CC", VA = "0x8A99CC")]
		public object InterpolateMetadata(Type type, float f)
		{
			return null;
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x8C0AE4", Offset = "0x8C0AE4", VA = "0x8C0AE4")]
		public void DeleteMetadata()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x8A9C3C", Offset = "0x8A9C3C", VA = "0x8A9C3C")]
		public Vector3 InterpolateScale(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x8AA42C", Offset = "0x8AA42C", VA = "0x8AA42C")]
		public Vector3 GetTangent(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x8AA620", Offset = "0x8AA620", VA = "0x8AA620")]
		public Vector3 GetTangent(float localF, ref Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x8AA94C", Offset = "0x8AA94C", VA = "0x8AA94C")]
		public Vector3 GetTangentFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x8C0BAC", Offset = "0x8C0BAC", VA = "0x8C0BAC")]
		public Quaternion GetOrientationFast(float localF)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x8AA17C", Offset = "0x8AA17C", VA = "0x8AA17C")]
		public Quaternion GetOrientationFast(float localF, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x8A9EB0", Offset = "0x8A9EB0", VA = "0x8A9EB0")]
		public Vector3 GetOrientationUpFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x8AF0D8", Offset = "0x8AF0D8", VA = "0x8AF0D8")]
		public float GetNearestPointF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x8AB730", Offset = "0x8AB730", VA = "0x8AB730")]
		public float DistanceToLocalF(float localDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x8AABD4", Offset = "0x8AABD4", VA = "0x8AABD4")]
		public float LocalFToDistance(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x8AF3D0", Offset = "0x8AF3D0", VA = "0x8AF3D0")]
		public float LocalFToTF(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x8C0BC4", Offset = "0x8C0BC4", VA = "0x8C0BC4")]
		public bool SnapToFitSplineLength(float newSplineLength, float stepSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x8A2C20", Offset = "0x8A2C20", VA = "0x8A2C20")]
		public void SetDirty(bool dirtyCurve = true, bool dirtyOrientation = true)
		{
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x8C1180", Offset = "0x8C1180", VA = "0x8C1180", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x8B1E2C", Offset = "0x8B1E2C", VA = "0x8B1E2C")]
		public void BakeOrientation(bool setDirty = true)
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x8C1290", Offset = "0x8C1290", VA = "0x8C1290")]
		public CurvySpline SplitSpline()
		{
			return null;
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x8BFC28", Offset = "0x8BFC28", VA = "0x8BFC28")]
		private CurvySplineSegment getFollowUpCP()
		{
			return null;
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x8C17A0", Offset = "0x8C17A0", VA = "0x8C17A0")]
		private Transform getNextNextTransform(bool withFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x8C1860", Offset = "0x8C1860", VA = "0x8C1860")]
		private TTransform getNextNextTTransform(bool withFollowUp)
		{
			return null;
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x8C0BB4", Offset = "0x8C0BB4", VA = "0x8C0BB4")]
		private float getApproximationLocalF(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x8B7868", Offset = "0x8B7868", VA = "0x8B7868")]
		public int getApproximationIndexINTERNAL(float localF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x8C09D4", Offset = "0x8C09D4", VA = "0x8C09D4")]
		private Vector3 interpolateLinear(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x8C0448", Offset = "0x8C0448", VA = "0x8C0448")]
		private Vector3 interpolateBezier(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x8C0624", Offset = "0x8C0624", VA = "0x8C0624")]
		private Vector3 interpolateCatmull(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x8C0798", Offset = "0x8C0798", VA = "0x8C0798")]
		private Vector3 interpolateTCB(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x8B07BC", Offset = "0x8B07BC", VA = "0x8B07BC")]
		internal void refreshCurveINTERNAL()
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x8B1478", Offset = "0x8B1478", VA = "0x8B1478")]
		internal void refreshOrientationStaticINTERNAL()
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x8B1970", Offset = "0x8B1970", VA = "0x8B1970")]
		internal void refreshOrientationPTFINTERNAL(ref Vector3 lastUpVector)
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x8B1BA0", Offset = "0x8B1BA0", VA = "0x8B1BA0")]
		internal void smoothOrientationINTERNAL(ref Vector3 lastUpVector, ref float angleaccu, float angle)
		{
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x8BCBB0", Offset = "0x8BCBB0", VA = "0x8BCBB0")]
		private Bounds getBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x8B5308", Offset = "0x8B5308", VA = "0x8B5308")]
		internal void ClearBoundsINTERNAL()
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x8B17F8", Offset = "0x8B17F8", VA = "0x8B17F8")]
		internal Vector3 getOrthoUp0INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x8C191C", Offset = "0x8C191C", VA = "0x8C191C")]
		internal Vector3 getOrthoUp1INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x8B24A0", Offset = "0x8B24A0", VA = "0x8B24A0")]
		internal void reSettleINTERNAL(bool removeFromCollection = true)
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x8BDBAC", Offset = "0x8BDBAC", VA = "0x8BDBAC")]
		private void doGizmos(bool selected)
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x8B07A8", Offset = "0x8B07A8", VA = "0x8B07A8")]
		internal void ClearSegmentIndexINTERNAL()
		{
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x8C1AB0", Offset = "0x8C1AB0", VA = "0x8C1AB0", Slot = "5")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x8C1ADC", Offset = "0x8C1ADC", VA = "0x8C1ADC", Slot = "6")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x8C1AE0", Offset = "0x8C1AE0", VA = "0x8C1AE0", Slot = "4")]
		private int System.IComparable.CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000410")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57C46C", Offset = "0x57C46C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57C46C", Offset = "0x57C46C")]
	public class CurvyUISpline : CurvySpline
	{
		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x838A80", Offset = "0x838A80", VA = "0x838A80")]
		public CurvyUISpline()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x838AE8", Offset = "0x838AE8", VA = "0x838AE8")]
		public static CurvyUISpline CreateUISpline()
		{
			return null;
		}
	}
}
namespace FluffyUnderware.Curvy.Utils
{
	[Token(Token = "0x2000411")]
	public class CurvyUtility
	{
		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x8F5670", Offset = "0x8F5670", VA = "0x8F5670")]
		public CurvyUtility()
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x8F5678", Offset = "0x8F5678", VA = "0x8F5678")]
		public static float ClampTF(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x8F5774", Offset = "0x8F5774", VA = "0x8F5774")]
		public static float ClampValue(float tf, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x8F58D0", Offset = "0x8F58D0", VA = "0x8F58D0")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x8F5A20", Offset = "0x8F5A20", VA = "0x8F5A20")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x8F5BCC", Offset = "0x8F5BCC", VA = "0x8F5BCC")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x8F5CF0", Offset = "0x8F5CF0", VA = "0x8F5CF0")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x8F5E6C", Offset = "0x8F5E6C", VA = "0x8F5E6C")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x8F5FE8", Offset = "0x8F5FE8", VA = "0x8F5FE8")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x8E90C0", Offset = "0x8E90C0", VA = "0x8E90C0")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}
	}
	[Token(Token = "0x2000412")]
	public class Spline2Mesh
	{
		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<SplinePolyLine> Lines;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WindingRule Winding;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVTiling;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVOffset;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool SuppressUVMapping;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool UV2;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string MeshName;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool VertexLineOnly;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C4F8", Offset = "0x57C4F8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57C4F8", Offset = "0x57C4F8")]
		private string <Error>k__BackingField;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool mUseMeshBounds;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector2 mNewBounds;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Tess mTess;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Mesh mMesh;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x57C534", Offset = "0x57C534")]
		public SplinePolyLine Outline;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x57C56C", Offset = "0x57C56C")]
		public List<SplinePolyLine> Holes;

		[Token(Token = "0x1700036F")]
		public string Error
		{
			[Token(Token = "0x6001C35")]
			[Address(RVA = "0x8F86B0", Offset = "0x8F86B0", VA = "0x8F86B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C5A4", Offset = "0x57C5A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C36")]
			[Address(RVA = "0x8F86B8", Offset = "0x8F86B8", VA = "0x8F86B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57C5B4", Offset = "0x57C5B4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x8F85B0", Offset = "0x8F85B0", VA = "0x8F85B0")]
		public Spline2Mesh()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x8F86C0", Offset = "0x8F86C0", VA = "0x8F86C0")]
		public bool Apply(out Mesh result)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x8F91BC", Offset = "0x8F91BC", VA = "0x8F91BC")]
		public void SetBounds(bool useMeshBounds, Vector2 newSize)
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x8F87D8", Offset = "0x8F87D8", VA = "0x8F87D8")]
		private bool triangulate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x8F91CC", Offset = "0x8F91CC", VA = "0x8F91CC")]
		private bool polyLineIsValid(SplinePolyLine pl)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x8F8BA4", Offset = "0x8F8BA4", VA = "0x8F8BA4")]
		private bool buildMesh()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x8F8DB8", Offset = "0x8F8DB8", VA = "0x8F8DB8")]
		private void uvmap()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000413")]
	public class SplinePolyLine
	{
		[Token(Token = "0x2000414")]
		public enum VertexCalculation
		{
			[Token(Token = "0x4001176")]
			ByApproximation,
			[Token(Token = "0x4001177")]
			ByAngle
		}

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ContourOrientation Orientation;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySplineBase Spline;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VertexCalculation VertexMode;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Angle;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Distance;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Space Space;

		[Token(Token = "0x17000370")]
		public bool IsClosed
		{
			[Token(Token = "0x6001C40")]
			[Address(RVA = "0x8F9514", Offset = "0x8F9514", VA = "0x8F9514")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000371")]
		public bool IsContinuous
		{
			[Token(Token = "0x6001C41")]
			[Address(RVA = "0x8F95B4", Offset = "0x8F95B4", VA = "0x8F95B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x8F9440", Offset = "0x8F9440", VA = "0x8F9440")]
		public SplinePolyLine(CurvySplineBase spline)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x8F94C8", Offset = "0x8F94C8", VA = "0x8F94C8")]
		public SplinePolyLine(CurvySplineBase spline, float angle, float distance)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x8F9470", Offset = "0x8F9470", VA = "0x8F9470")]
		private SplinePolyLine(CurvySplineBase spline, VertexCalculation vertexMode, float angle, float distance, Space space = Space.World)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x8F926C", Offset = "0x8F926C", VA = "0x8F926C")]
		public Vector3[] GetVertices()
		{
			return null;
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x8F9654", Offset = "0x8F9654", VA = "0x8F9654")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x57C5C4", Offset = "0x57C5C4")]
		public Vector3[] getVertices()
		{
			return null;
		}
	}
	[Token(Token = "0x2000415")]
	public static class SerializedCurvyObjectHelper
	{
		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x8F61B0", Offset = "0x8F61B0", VA = "0x8F61B0")]
		public static Type GetJsonSerializedType(string json)
		{
			return null;
		}
	}
	[Token(Token = "0x2000416")]
	public enum CurvySerializationSpace
	{
		[Token(Token = "0x4001179")]
		World,
		[Token(Token = "0x400117A")]
		Self,
		[Token(Token = "0x400117B")]
		WorldSpline
	}
	[Token(Token = "0x2000417")]
	public abstract class SerializedCurvyObject<T>
	{
		[Token(Token = "0x6001C45")]
		protected SerializedCurvyObject()
		{
		}

		[Token(Token = "0x6001C46")]
		public string ToJson()
		{
			return null;
		}

		[Token(Token = "0x6001C47")]
		public static T FromJson(string json)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000418")]
	public class SerializedCurvySplineCollection : SerializedCurvyObject<SerializedCurvySplineCollection>
	{
		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializedCurvySpline[] Splines;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Data;

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x8F7524", Offset = "0x8F7524", VA = "0x8F7524")]
		public SerializedCurvySplineCollection(List<CurvySpline> splines, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x8F76F8", Offset = "0x8F76F8", VA = "0x8F76F8")]
		public CurvySpline[] Deserialize([Optional] Transform parent, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySpline, string> onDeserializedSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x8F78D4", Offset = "0x8F78D4", VA = "0x8F78D4")]
		public CurvySpline[] Deserialize(CurvySpline[] splines, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySpline, string> onDeserializedSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}
	}
	[Token(Token = "0x2000419")]
	public class SerializedCurvySplineSegmentCollection : SerializedCurvyObject<SerializedCurvySplineSegmentCollection>
	{
		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializedCurvySplineSegment[] ControlPoints;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Data;

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x8F7FDC", Offset = "0x8F7FDC", VA = "0x8F7FDC")]
		public SerializedCurvySplineSegmentCollection(List<CurvySplineSegment> cps, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x8F81B0", Offset = "0x8F81B0", VA = "0x8F81B0")]
		public CurvySplineSegment[] Deserialize(CurvySpline spline, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x8F83C0", Offset = "0x8F83C0", VA = "0x8F83C0")]
		public CurvySplineSegment[] Deserialize(CurvySplineSegment controlPoint, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200041A")]
	public class SerializedCurvySpline : SerializedCurvyObject<SerializedCurvySpline>
	{
		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 P;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 R;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CurvyInterpolation Interpolation;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool Keep2D;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool Closed;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool AutoEndTangents;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvyOrientation Orientation;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float BzAutoDist;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int CacheDensity;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool Pooling;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool Threading;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool CheckTForm;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializedCurvySplineSegment[] ControlPoints;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Data;

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x8F63B4", Offset = "0x8F63B4", VA = "0x8F63B4")]
		public SerializedCurvySpline()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x8F64C0", Offset = "0x8F64C0", VA = "0x8F64C0")]
		public SerializedCurvySpline(CurvySpline spline, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x8F6D20", Offset = "0x8F6D20", VA = "0x8F6D20")]
		public CurvySpline Deserialize([Optional] Transform parent, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x8F7310", Offset = "0x8F7310", VA = "0x8F7310")]
		public CurvySpline Deserialize(CurvySpline spline, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
			return null;
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x8F6E50", Offset = "0x8F6E50", VA = "0x8F6E50")]
		public void DeserializeInto(CurvySpline spline, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline, [Optional] Action<CurvySplineSegment, string> onDeserializedCP)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041B")]
	public class SerializedCurvySplineSegment : SerializedCurvyObject<SerializedCurvySplineSegment>
	{
		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 P;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 R;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Bake;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool Anchor;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CurvyOrientationSwirl Swirl;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float SwirlT;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool BzAuto;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float BzAutoDist;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 BzOut;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 BzIn;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Data;

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x8F7AD8", Offset = "0x8F7AD8", VA = "0x8F7AD8")]
		public SerializedCurvySplineSegment()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x8F69F8", Offset = "0x8F69F8", VA = "0x8F69F8")]
		public SerializedCurvySplineSegment(CurvySplineSegment segment, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x8F73DC", Offset = "0x8F73DC", VA = "0x8F73DC")]
		public CurvySplineSegment Deserialize(CurvySpline spline, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
			return null;
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x8F7BE4", Offset = "0x8F7BE4", VA = "0x8F7BE4")]
		public CurvySplineSegment Deserialize(CurvySplineSegment controlPoint, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
			return null;
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x8F7CB4", Offset = "0x8F7CB4", VA = "0x8F7CB4")]
		public void DeserializeInto(CurvySplineSegment controlPoint, CurvySerializationSpace space = CurvySerializationSpace.WorldSpline)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Shapes
{
	[Token(Token = "0x200041C")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57C5FC", Offset = "0x57C5FC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57C5FC", Offset = "0x57C5FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57C5FC", Offset = "0x57C5FC")]
	public class CSCircle : CurvyShape2D
	{
		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		[SerializeField]
		private int m_Count;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x17000372")]
		public int Count
		{
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0x8F3038", Offset = "0x8F3038", VA = "0x8F3038")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0x8F3040", Offset = "0x8F3040", VA = "0x8F3040")]
			set
			{
			}
		}

		[Token(Token = "0x17000373")]
		public float Radius
		{
			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0x8F30D8", Offset = "0x8F30D8", VA = "0x8F30D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C5C")]
			[Address(RVA = "0x8F30E0", Offset = "0x8F30E0", VA = "0x8F30E0")]
			set
			{
			}
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x8F3024", Offset = "0x8F3024", VA = "0x8F3024")]
		public CSCircle()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x8F3178", Offset = "0x8F3178", VA = "0x8F3178", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x8F31B0", Offset = "0x8F31B0", VA = "0x8F31B0", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
	[Token(Token = "0x200041D")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57C708", Offset = "0x57C708")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57C708", Offset = "0x57C708")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57C708", Offset = "0x57C708")]
	public class CSPie : CSCircle
	{
		[Token(Token = "0x200041E")]
		public enum EatModeEnum
		{
			[Token(Token = "0x40011A1")]
			Left,
			[Token(Token = "0x40011A2")]
			Right,
			[Token(Token = "0x40011A3")]
			Center
		}

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x57C7B8", Offset = "0x57C7B8")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57C7F8", Offset = "0x57C7F8")]
		private int m_Empty;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57C878", Offset = "0x57C878")]
		[SerializeField]
		private EatModeEnum m_Eat;

		[Token(Token = "0x17000374")]
		public float Roundness
		{
			[Token(Token = "0x6001C60")]
			[Address(RVA = "0x8F336C", Offset = "0x8F336C", VA = "0x8F336C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C61")]
			[Address(RVA = "0x8F3374", Offset = "0x8F3374", VA = "0x8F3374")]
			set
			{
			}
		}

		[Token(Token = "0x17000375")]
		public int Empty
		{
			[Token(Token = "0x6001C62")]
			[Address(RVA = "0x8F3408", Offset = "0x8F3408", VA = "0x8F3408")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C63")]
			[Address(RVA = "0x8F3410", Offset = "0x8F3410", VA = "0x8F3410")]
			set
			{
			}
		}

		[Token(Token = "0x17000376")]
		private int maxEmpty
		{
			[Token(Token = "0x6001C64")]
			[Address(RVA = "0x8F34B0", Offset = "0x8F34B0", VA = "0x8F34B0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000377")]
		public EatModeEnum Eat
		{
			[Token(Token = "0x6001C65")]
			[Address(RVA = "0x8F34B8", Offset = "0x8F34B8", VA = "0x8F34B8")]
			get
			{
				return default(EatModeEnum);
			}
			[Token(Token = "0x6001C66")]
			[Address(RVA = "0x8F34C0", Offset = "0x8F34C0", VA = "0x8F34C0")]
			set
			{
			}
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x8F3348", Offset = "0x8F3348", VA = "0x8F3348")]
		public CSPie()
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x8F34DC", Offset = "0x8F34DC", VA = "0x8F34DC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x8F352C", Offset = "0x8F352C", VA = "0x8F352C")]
		private Vector3 cpPosition(int i, int empty, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x8F367C", Offset = "0x8F367C", VA = "0x8F367C", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
	[Token(Token = "0x200041F")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57C8C4", Offset = "0x57C8C4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57C8C4", Offset = "0x57C8C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57C8C4", Offset = "0x57C8C4")]
	public class CSRectangle : CurvyShape2D
	{
		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x17000378")]
		public float Width
		{
			[Token(Token = "0x6001C6B")]
			[Address(RVA = "0x8F3F54", Offset = "0x8F3F54", VA = "0x8F3F54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0x8F3F5C", Offset = "0x8F3F5C", VA = "0x8F3F5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000379")]
		public float Height
		{
			[Token(Token = "0x6001C6D")]
			[Address(RVA = "0x8F3FF4", Offset = "0x8F3FF4", VA = "0x8F3FF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0x8F3FFC", Offset = "0x8F3FFC", VA = "0x8F3FFC")]
			set
			{
			}
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x8F3F44", Offset = "0x8F3F44", VA = "0x8F3F44")]
		public CSRectangle()
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x8F4094", Offset = "0x8F4094", VA = "0x8F4094", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x8F40D8", Offset = "0x8F40D8", VA = "0x8F40D8", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
	[Token(Token = "0x2000420")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57C9E4", Offset = "0x57C9E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57C9E4", Offset = "0x57C9E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57C9E4", Offset = "0x57C9E4")]
	public class CSRoundedRectangle : CurvyShape2D
	{
		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x57CB04", Offset = "0x57CB04")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x1700037A")]
		public float Width
		{
			[Token(Token = "0x6001C72")]
			[Address(RVA = "0x8F42A4", Offset = "0x8F42A4", VA = "0x8F42A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C73")]
			[Address(RVA = "0x8F42AC", Offset = "0x8F42AC", VA = "0x8F42AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700037B")]
		public float Height
		{
			[Token(Token = "0x6001C74")]
			[Address(RVA = "0x8F4344", Offset = "0x8F4344", VA = "0x8F4344")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C75")]
			[Address(RVA = "0x8F434C", Offset = "0x8F434C", VA = "0x8F434C")]
			set
			{
			}
		}

		[Token(Token = "0x1700037C")]
		public float Roundness
		{
			[Token(Token = "0x6001C76")]
			[Address(RVA = "0x8F43E4", Offset = "0x8F43E4", VA = "0x8F43E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C77")]
			[Address(RVA = "0x8F43EC", Offset = "0x8F43EC", VA = "0x8F43EC")]
			set
			{
			}
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x8F428C", Offset = "0x8F428C", VA = "0x8F428C")]
		public CSRoundedRectangle()
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x8F4480", Offset = "0x8F4480", VA = "0x8F4480", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x8F44D0", Offset = "0x8F44D0", VA = "0x8F44D0", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
	[Token(Token = "0x2000421")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57CB44", Offset = "0x57CB44")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57CB44", Offset = "0x57CB44")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57CB44", Offset = "0x57CB44")]
	public class CSSpiral : CurvyShape2D
	{
		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		[SerializeField]
		private int m_Count;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		[SerializeField]
		private float m_Circles;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Positive]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x57CCD8", Offset = "0x57CCD8")]
		[SerializeField]
		private AnimationCurve m_RadiusFactor;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AnimationCurve m_Z;

		[Token(Token = "0x1700037D")]
		public int Count
		{
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0x8F4B20", Offset = "0x8F4B20", VA = "0x8F4B20")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0x8F4B28", Offset = "0x8F4B28", VA = "0x8F4B28")]
			set
			{
			}
		}

		[Token(Token = "0x1700037E")]
		public float Circles
		{
			[Token(Token = "0x6001C7D")]
			[Address(RVA = "0x8F4BC0", Offset = "0x8F4BC0", VA = "0x8F4BC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0x8F4BC8", Offset = "0x8F4BC8", VA = "0x8F4BC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public float Radius
		{
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0x8F4C60", Offset = "0x8F4C60", VA = "0x8F4C60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0x8F4C68", Offset = "0x8F4C68", VA = "0x8F4C68")]
			set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public AnimationCurve RadiusFactor
		{
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0x8F4D00", Offset = "0x8F4D00", VA = "0x8F4D00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0x8F4D08", Offset = "0x8F4D08", VA = "0x8F4D08")]
			set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public AnimationCurve Z
		{
			[Token(Token = "0x6001C83")]
			[Address(RVA = "0x8F4D24", Offset = "0x8F4D24", VA = "0x8F4D24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C84")]
			[Address(RVA = "0x8F4D2C", Offset = "0x8F4D2C", VA = "0x8F4D2C")]
			set
			{
			}
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x8F4A98", Offset = "0x8F4A98", VA = "0x8F4A98")]
		public CSSpiral()
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x8F4D48", Offset = "0x8F4D48", VA = "0x8F4D48", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x8F4DF8", Offset = "0x8F4DF8", VA = "0x8F4DF8", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
	[Token(Token = "0x2000422")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x57CD34", Offset = "0x57CD34")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57CD34", Offset = "0x57CD34")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57CD34", Offset = "0x57CD34")]
	public class CSStar : CurvyShape2D
	{
		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Positive]
		private int m_Sides;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Positive]
		private float m_OuterRadius;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57CE74", Offset = "0x57CE74")]
		private float m_OuterRoundness;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Positive]
		private float m_InnerRadius;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57CF1C", Offset = "0x57CF1C")]
		private float m_InnerRoundness;

		[Token(Token = "0x17000382")]
		public int Sides
		{
			[Token(Token = "0x6001C88")]
			[Address(RVA = "0x8F500C", Offset = "0x8F500C", VA = "0x8F500C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C89")]
			[Address(RVA = "0x8F5014", Offset = "0x8F5014", VA = "0x8F5014")]
			set
			{
			}
		}

		[Token(Token = "0x17000383")]
		public float OuterRadius
		{
			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0x8F50AC", Offset = "0x8F50AC", VA = "0x8F50AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0x8F50B4", Offset = "0x8F50B4", VA = "0x8F50B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000384")]
		public float OuterRoundness
		{
			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0x8F5158", Offset = "0x8F5158", VA = "0x8F5158")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0x8F5160", Offset = "0x8F5160", VA = "0x8F5160")]
			set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public float InnerRadius
		{
			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0x8F5150", Offset = "0x8F5150", VA = "0x8F5150")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8F")]
			[Address(RVA = "0x8F51F8", Offset = "0x8F51F8", VA = "0x8F51F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public float InnerRoundness
		{
			[Token(Token = "0x6001C90")]
			[Address(RVA = "0x8F5290", Offset = "0x8F5290", VA = "0x8F5290")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C91")]
			[Address(RVA = "0x8F5298", Offset = "0x8F5298", VA = "0x8F5298")]
			set
			{
			}
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x8F4FF0", Offset = "0x8F4FF0", VA = "0x8F4FF0")]
		public CSStar()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x8F5330", Offset = "0x8F5330", VA = "0x8F5330", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x8F5398", Offset = "0x8F5398", VA = "0x8F5398", Slot = "6")]
		protected override void ApplyShape()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Components
{
	[Token(Token = "0x2000423")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57CF8C", Offset = "0x57CF8C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57CF8C", Offset = "0x57CF8C")]
	public class CurvyDefaultEventHandler : MonoBehaviour
	{
		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x798B74", Offset = "0x798B74", VA = "0x798B74")]
		public CurvyDefaultEventHandler()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x798B7C", Offset = "0x798B7C", VA = "0x798B7C")]
		public static void DebugLogStatic(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x798C6C", Offset = "0x798C6C", VA = "0x798C6C")]
		public static void DebugLogStatic(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x798DA0", Offset = "0x798DA0", VA = "0x798DA0")]
		public static void UseFollowUpStatic(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x7991B8", Offset = "0x7991B8", VA = "0x7991B8")]
		public void DebugLog(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x7991BC", Offset = "0x7991BC", VA = "0x7991BC")]
		public static void DebugLog(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x7991C0", Offset = "0x7991C0", VA = "0x7991C0")]
		public void UseFollowUp(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x7991C4", Offset = "0x7991C4", VA = "0x7991C4")]
		public void UseRandomConnectionStatic(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x79956C", Offset = "0x79956C", VA = "0x79956C")]
		public void UseRandomConnection(CurvySplineMoveEventArgs e)
		{
		}
	}
	[Token(Token = "0x2000424")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57CFEC", Offset = "0x57CFEC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57CFEC", Offset = "0x57CFEC")]
	public class CurvyGLRenderer : MonoBehaviour
	{
		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ArrayEx]
		public List<GLSlotData> Splines;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material lineMaterial;

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x799570", Offset = "0x799570", VA = "0x799570")]
		public CurvyGLRenderer()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x7995E0", Offset = "0x7995E0", VA = "0x7995E0")]
		private void CreateLineMaterial()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x799700", Offset = "0x799700", VA = "0x799700")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x7998FC", Offset = "0x7998FC", VA = "0x7998FC")]
		private void sanitize()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x799F34", Offset = "0x799F34", VA = "0x799F34")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x79A180", Offset = "0x79A180", VA = "0x79A180")]
		private GLSlotData getSlot(CurvySplineBase spline)
		{
			return null;
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x79A318", Offset = "0x79A318", VA = "0x79A318")]
		public void Add(CurvySplineBase spline)
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x79A490", Offset = "0x79A490", VA = "0x79A490")]
		public void Remove(CurvySplineBase spline)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000425")]
	public class GLSlotData
	{
		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public CurvySplineBase Spline;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Vector3[]> VertexData;

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x79A3F0", Offset = "0x79A3F0", VA = "0x79A3F0")]
		public GLSlotData()
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x799A30", Offset = "0x799A30", VA = "0x799A30")]
		public void GetVertexData()
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x799D08", Offset = "0x799D08", VA = "0x799D08")]
		public void Render(Material mat)
		{
		}
	}
	[Token(Token = "0x2000426")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57D090", Offset = "0x57D090")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57D090", Offset = "0x57D090")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57D090", Offset = "0x57D090")]
	public class CurvyLineRenderer : MonoBehaviour
	{
		[Token(Token = "0x20005A9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D15C", Offset = "0x57D15C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CurvyLineRenderer $this;

			[Token(Token = "0x40018F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40018F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40018F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004D6")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600245C")]
				[Address(RVA = "0x79ACD8", Offset = "0x79ACD8", VA = "0x79ACD8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600245D")]
				[Address(RVA = "0x79ACE0", Offset = "0x79ACE0", VA = "0x79ACE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600245A")]
			[Address(RVA = "0x79AB74", Offset = "0x79AB74", VA = "0x79AB74")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x600245B")]
			[Address(RVA = "0x79AB80", Offset = "0x79AB80", VA = "0x79AB80", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600245E")]
			[Address(RVA = "0x79ACE8", Offset = "0x79ACE8", VA = "0x79ACE8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600245F")]
			[Address(RVA = "0x79ACFC", Offset = "0x79ACFC", VA = "0x79ACFC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySplineBase m_Spline;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer mRenderer;

		[Token(Token = "0x17000387")]
		public CurvySplineBase Spline
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x79A5B8", Offset = "0x79A5B8", VA = "0x79A5B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0x79A5C0", Offset = "0x79A5C0", VA = "0x79A5C0")]
			set
			{
			}
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x79A5B0", Offset = "0x79A5B0", VA = "0x79A5B0")]
		public CurvyLineRenderer()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x79A9E4", Offset = "0x79A9E4", VA = "0x79A9E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x79AAA8", Offset = "0x79AAA8", VA = "0x79AAA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x79AB04", Offset = "0x79AB04", VA = "0x79AB04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x79AB08", Offset = "0x79AB08", VA = "0x79AB08")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x79A878", Offset = "0x79A878", VA = "0x79A878")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x79AB7C", Offset = "0x79AB7C", VA = "0x79AB7C")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x79A774", Offset = "0x79A774", VA = "0x79A774")]
		private void bindEvents()
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x79A670", Offset = "0x79A670", VA = "0x79A670")]
		private void unbindEvents()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Controllers
{
	[Token(Token = "0x2000427")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57D1BC", Offset = "0x57D1BC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57D1BC", Offset = "0x57D1BC")]
	public class PathController : CurvyController
	{
		[Token(Token = "0x20005AA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D2EC", Offset = "0x57D2EC")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal PathController $this;

			[Token(Token = "0x40018F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40018F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40018F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004D8")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002462")]
				[Address(RVA = "0x79BCE8", Offset = "0x79BCE8", VA = "0x79BCE8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002463")]
				[Address(RVA = "0x79BCF0", Offset = "0x79BCF0", VA = "0x79BCF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002460")]
			[Address(RVA = "0x79B06C", Offset = "0x79B06C", VA = "0x79B06C")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6002461")]
			[Address(RVA = "0x79BBAC", Offset = "0x79BBAC", VA = "0x79BBAC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002464")]
			[Address(RVA = "0x79BCF8", Offset = "0x79BCF8", VA = "0x79BCF8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002465")]
			[Address(RVA = "0x79BD0C", Offset = "0x79BD0C", VA = "0x79BD0C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57D220", Offset = "0x57D220")]
		[SerializeField]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0x57D220", Offset = "0x57D220")]
		private CGDataReference m_Path;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float mKeepDistanceAt;

		[Token(Token = "0x17000388")]
		public CGDataReference Path
		{
			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0x79ADC8", Offset = "0x79ADC8", VA = "0x79ADC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x79ADD0", Offset = "0x79ADD0", VA = "0x79ADD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000389")]
		public CGPath PathData
		{
			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0x79AE4C", Offset = "0x79AE4C", VA = "0x79AE4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038A")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0x79AED0", Offset = "0x79AED0", VA = "0x79AED0", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700038B")]
		public override bool DependenciesInitialized
		{
			[Token(Token = "0x6001CB8")]
			[Address(RVA = "0x79AF00", Offset = "0x79AF00", VA = "0x79AF00", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700038C")]
		public override float Length
		{
			[Token(Token = "0x6001CB9")]
			[Address(RVA = "0x79AF54", Offset = "0x79AF54", VA = "0x79AF54", Slot = "38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x79AD60", Offset = "0x79AD60", VA = "0x79AD60")]
		public PathController()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x79AF98", Offset = "0x79AF98", VA = "0x79AF98", Slot = "17")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x79AFCC", Offset = "0x79AFCC", VA = "0x79AFCC", Slot = "18")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x79B000", Offset = "0x79B000", VA = "0x79B000")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x79B074", Offset = "0x79B074", VA = "0x79B074", Slot = "23")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x79B0B8", Offset = "0x79B0B8", VA = "0x79B0B8", Slot = "29")]
		public override void Prepare()
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x79B0EC", Offset = "0x79B0EC", VA = "0x79B0EC", Slot = "43")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x79B12C", Offset = "0x79B12C", VA = "0x79B12C", Slot = "42")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x79B16C", Offset = "0x79B16C", VA = "0x79B16C", Slot = "44")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x79B274", Offset = "0x79B274", VA = "0x79B274", Slot = "45")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 position, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x79B444", Offset = "0x79B444", VA = "0x79B444", Slot = "48")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x79B54C", Offset = "0x79B54C", VA = "0x79B54C", Slot = "46")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x79B654", Offset = "0x79B654", VA = "0x79B654", Slot = "39")]
		protected override void Advance(ref float virtualPosition, ref int direction, MoveModeEnum mode, float absSpeed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x79B6F4", Offset = "0x79B6F4", VA = "0x79B6F4", Slot = "53")]
		protected virtual void OnRefreshPath(CurvyCGEventArgs e)
		{
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x79B924", Offset = "0x79B924", VA = "0x79B924", Slot = "49")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x79BA78", Offset = "0x79BA78", VA = "0x79BA78", Slot = "50")]
		protected override void UnbindEvents()
		{
		}
	}
	[Token(Token = "0x2000428")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57D34C", Offset = "0x57D34C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57D34C", Offset = "0x57D34C")]
	public class SplineController : CurvyController
	{
		[Token(Token = "0x20005AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D504", Offset = "0x57D504")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal SplineController $this;

			[Token(Token = "0x40018FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40018FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40018FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004DA")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002468")]
				[Address(RVA = "0x897264", Offset = "0x897264", VA = "0x897264", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002469")]
				[Address(RVA = "0x89726C", Offset = "0x89726C", VA = "0x89726C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002466")]
			[Address(RVA = "0x897120", Offset = "0x897120", VA = "0x897120")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6002467")]
			[Address(RVA = "0x897128", Offset = "0x897128", VA = "0x897128", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600246A")]
			[Address(RVA = "0x897274", Offset = "0x897274", VA = "0x897274", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600246B")]
			[Address(RVA = "0x897288", Offset = "0x897288", VA = "0x897288", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57D3B0", Offset = "0x57D3B0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57D3B0", Offset = "0x57D3B0")]
		[SerializeField]
		private CurvySpline m_Spline;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private bool m_UseCache;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57D46C", Offset = "0x57D46C")]
		[SerializeField]
		private CurvySplineMoveEvent m_OnControlPointReached;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private CurvySplineMoveEvent m_OnEndReached;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private CurvySplineMoveEvent m_OnSwitch;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CurvyController _active;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private CurvySpline mInitialSpline;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float mKeepDistanceAt;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float mSwitchStartTime;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float mSwitchDuration;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private CurvySplineMoveEventArgs mSwitchEventArgs;

		[Token(Token = "0x1700038D")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001CCA")]
			[Address(RVA = "0x79BD78", Offset = "0x79BD78", VA = "0x79BD78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CCB")]
			[Address(RVA = "0x799090", Offset = "0x799090", VA = "0x799090")]
			set
			{
			}
		}

		[Token(Token = "0x1700038E")]
		public bool UseCache
		{
			[Token(Token = "0x6001CCC")]
			[Address(RVA = "0x79BD80", Offset = "0x79BD80", VA = "0x79BD80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CCD")]
			[Address(RVA = "0x79BD88", Offset = "0x79BD88", VA = "0x79BD88")]
			set
			{
			}
		}

		[Token(Token = "0x1700038F")]
		public override bool AdaptOnChange
		{
			[Token(Token = "0x6001CCE")]
			[Address(RVA = "0x79BDA8", Offset = "0x79BDA8", VA = "0x79BDA8", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CCF")]
			[Address(RVA = "0x79BDB0", Offset = "0x79BDB0", VA = "0x79BDB0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000390")]
		public CurvySplineMoveEvent OnControlPointReached
		{
			[Token(Token = "0x6001CD0")]
			[Address(RVA = "0x7991B0", Offset = "0x7991B0", VA = "0x7991B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CD1")]
			[Address(RVA = "0x79BE0C", Offset = "0x79BE0C", VA = "0x79BE0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000391")]
		public CurvySplineMoveEvent OnEndReached
		{
			[Token(Token = "0x6001CD2")]
			[Address(RVA = "0x79BEC0", Offset = "0x79BEC0", VA = "0x79BEC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CD3")]
			[Address(RVA = "0x79BEC8", Offset = "0x79BEC8", VA = "0x79BEC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000392")]
		public CurvySplineMoveEvent OnSwitch
		{
			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0x79BF7C", Offset = "0x79BF7C", VA = "0x79BF7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CD5")]
			[Address(RVA = "0x79BF84", Offset = "0x79BF84", VA = "0x79BF84")]
			set
			{
			}
		}

		[Token(Token = "0x17000393")]
		public bool IsSwitching
		{
			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0x79BF98", Offset = "0x79BF98", VA = "0x79BF98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000394")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0x79BFA8", Offset = "0x79BFA8", VA = "0x79BFA8", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000395")]
		public override bool DependenciesInitialized
		{
			[Token(Token = "0x6001CD8")]
			[Address(RVA = "0x79C01C", Offset = "0x79C01C", VA = "0x79C01C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000396")]
		public override float Length
		{
			[Token(Token = "0x6001CD9")]
			[Address(RVA = "0x79C048", Offset = "0x79C048", VA = "0x79C048", Slot = "38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000397")]
		public override float RelativePosition
		{
			[Token(Token = "0x6001CDA")]
			[Address(RVA = "0x79C0E4", Offset = "0x79C0E4", VA = "0x79C0E4", Slot = "11")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CDB")]
			[Address(RVA = "0x79C0EC", Offset = "0x79C0EC", VA = "0x79C0EC", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x17000398")]
		public override float AbsolutePosition
		{
			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0x79C114", Offset = "0x79C114", VA = "0x79C114", Slot = "13")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0x79C11C", Offset = "0x79C11C", VA = "0x79C11C", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x17000399")]
		public override float Position
		{
			[Token(Token = "0x6001CDE")]
			[Address(RVA = "0x79C144", Offset = "0x79C144", VA = "0x79C144", Slot = "15")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0x79C14C", Offset = "0x79C14C", VA = "0x79C14C", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x79BD70", Offset = "0x79BD70", VA = "0x79BD70")]
		public SplineController()
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x79C174", Offset = "0x79C174", VA = "0x79C174", Slot = "17")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x79C1A8", Offset = "0x79C1A8", VA = "0x79C1A8", Slot = "18")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x79C1DC", Offset = "0x79C1DC", VA = "0x79C1DC")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x79C248", Offset = "0x79C248", VA = "0x79C248", Slot = "23")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x79C274", Offset = "0x79C274", VA = "0x79C274", Slot = "29")]
		public override void Prepare()
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x79C2B0", Offset = "0x79C2B0", VA = "0x79C2B0", Slot = "35")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x79C9C8", Offset = "0x79C9C8", VA = "0x79C9C8", Slot = "53")]
		public virtual void SwitchTo(CurvySpline target, float targetTF, float duration)
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x79CAB8", Offset = "0x79CAB8", VA = "0x79CAB8", Slot = "36")]
		public override void BeginPreview()
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x79CAC8", Offset = "0x79CAC8", VA = "0x79CAC8", Slot = "37")]
		public override void EndPreview()
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x79CAF4", Offset = "0x79CAF4", VA = "0x79CAF4", Slot = "43")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x79CB7C", Offset = "0x79CB7C", VA = "0x79CB7C", Slot = "42")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x79CC04", Offset = "0x79CC04", VA = "0x79CC04", Slot = "44")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x79CD38", Offset = "0x79CD38", VA = "0x79CD38", Slot = "45")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 position, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x79CD5C", Offset = "0x79CD5C", VA = "0x79CD5C", Slot = "48")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x79CEB0", Offset = "0x79CEB0", VA = "0x79CEB0", Slot = "46")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x79D014", Offset = "0x79D014", VA = "0x79D014", Slot = "39")]
		protected override void Advance(ref float tf, ref int direction, MoveModeEnum mode, float absSpeed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x79D310", Offset = "0x79D310", VA = "0x79D310", Slot = "49")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x79D68C", Offset = "0x79D68C", VA = "0x79D68C", Slot = "50")]
		protected override void UnbindEvents()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x79D94C", Offset = "0x79D94C", VA = "0x79D94C", Slot = "54")]
		protected virtual void OnRefreshSpline(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x79C744", Offset = "0x79C744", VA = "0x79C744")]
		private void getInterpolatedSourcePosition(CurvySplineBase spline, float tf, out Vector3 position, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x79DC84", Offset = "0x79DC84", VA = "0x79DC84")]
		private void onBeforeCPChange(CurvyControlPointEventArgs e)
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x79DF64", Offset = "0x79DF64", VA = "0x79DF64")]
		private void onControlPointReachedEvent(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x79E13C", Offset = "0x79E13C", VA = "0x79E13C")]
		private void onEndReachedEvent(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x79C6B8", Offset = "0x79C6B8", VA = "0x79C6B8")]
		private void onSwitchEvent(CurvySplineMoveEventArgs e)
		{
		}
	}
	[Token(Token = "0x2000429")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57D564", Offset = "0x57D564")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57D564", Offset = "0x57D564")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57D564", Offset = "0x57D564")]
	public class UITextSplineController : SplineController, IMeshModifier
	{
		[Token(Token = "0x200042A")]
		protected class GlyphQuad
		{
			[Token(Token = "0x40011CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UIVertex[] V;

			[Token(Token = "0x40011CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x1700039D")]
			public Vector3 Center
			{
				[Token(Token = "0x6001D04")]
				[Address(RVA = "0x897BA0", Offset = "0x897BA0", VA = "0x897BA0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001D03")]
			[Address(RVA = "0x897988", Offset = "0x897988", VA = "0x897988")]
			public GlyphQuad()
			{
			}

			[Token(Token = "0x6001D05")]
			[Address(RVA = "0x8979F4", Offset = "0x8979F4", VA = "0x8979F4")]
			public void Load(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001D06")]
			[Address(RVA = "0x898FF4", Offset = "0x898FF4", VA = "0x898FF4")]
			public void LoadTris(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001D07")]
			[Address(RVA = "0x8994A4", Offset = "0x8994A4", VA = "0x8994A4")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6001D08")]
			[Address(RVA = "0x897E54", Offset = "0x897E54", VA = "0x897E54")]
			public void Save(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001D09")]
			[Address(RVA = "0x8991A0", Offset = "0x8991A0", VA = "0x8991A0")]
			public void Save(VertexHelper vh)
			{
			}

			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0x897C2C", Offset = "0x897C2C", VA = "0x897C2C")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0x897D34", Offset = "0x897D34", VA = "0x897D34")]
			public void Rotate(Quaternion rotation)
			{
			}
		}

		[Token(Token = "0x200042B")]
		protected class GlyphPlain
		{
			[Token(Token = "0x40011CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] V;

			[Token(Token = "0x40011CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x1700039E")]
			public Vector3 Center
			{
				[Token(Token = "0x6001D0D")]
				[Address(RVA = "0x8986D0", Offset = "0x8986D0", VA = "0x8986D0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001D0C")]
			[Address(RVA = "0x898484", Offset = "0x898484", VA = "0x898484")]
			public GlyphPlain()
			{
			}

			[Token(Token = "0x6001D0E")]
			[Address(RVA = "0x8984F0", Offset = "0x8984F0", VA = "0x8984F0")]
			public void Load(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0x89935C", Offset = "0x89935C", VA = "0x89935C")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6001D10")]
			[Address(RVA = "0x898974", Offset = "0x898974", VA = "0x898974")]
			public void Save(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6001D11")]
			[Address(RVA = "0x89875C", Offset = "0x89875C", VA = "0x89875C")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6001D12")]
			[Address(RVA = "0x898850", Offset = "0x898850", VA = "0x898850")]
			public void Rotate(Quaternion rotation)
			{
			}
		}

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Graphic m_Graphic;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private RectTransform mRect;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Text mText;

		[Token(Token = "0x1700039A")]
		protected Text Text
		{
			[Token(Token = "0x6001CF9")]
			[Address(RVA = "0x8972F4", Offset = "0x8972F4", VA = "0x8972F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039B")]
		protected RectTransform Rect
		{
			[Token(Token = "0x6001CFA")]
			[Address(RVA = "0x897394", Offset = "0x897394", VA = "0x897394")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039C")]
		protected Graphic graphic
		{
			[Token(Token = "0x6001CFB")]
			[Address(RVA = "0x897434", Offset = "0x897434", VA = "0x897434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x8972EC", Offset = "0x8972EC", VA = "0x8972EC")]
		public UITextSplineController()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x8974D4", Offset = "0x8974D4", VA = "0x8974D4", Slot = "35")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x89751C", Offset = "0x89751C", VA = "0x89751C", Slot = "54")]
		protected override void OnRefreshSpline(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x897564", Offset = "0x897564", VA = "0x897564", Slot = "57")]
		public virtual void ModifyVertices(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x89800C", Offset = "0x89800C", VA = "0x89800C", Slot = "55")]
		public void ModifyMesh(Mesh verts)
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x898B50", Offset = "0x898B50", VA = "0x898B50", Slot = "56")]
		public void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x8991D4", Offset = "0x8991D4", VA = "0x8991D4", Slot = "17")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x899298", Offset = "0x899298", VA = "0x899298", Slot = "18")]
		protected override void OnDisable()
		{
		}
	}
	[Token(Token = "0x200042C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x57D610", Offset = "0x57D610")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x57D610", Offset = "0x57D610")]
	public class VolumeController : CurvyController
	{
		[Token(Token = "0x20005AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D86C", Offset = "0x57D86C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40018FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal VolumeController $this;

			[Token(Token = "0x40018FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x4001900")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x4001901")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004DC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600246E")]
				[Address(RVA = "0x89B018", Offset = "0x89B018", VA = "0x89B018", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600246F")]
				[Address(RVA = "0x89B020", Offset = "0x89B020", VA = "0x89B020", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600246C")]
			[Address(RVA = "0x899D90", Offset = "0x899D90", VA = "0x899D90")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x600246D")]
			[Address(RVA = "0x89AEDC", Offset = "0x89AEDC", VA = "0x89AEDC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002470")]
			[Address(RVA = "0x89B028", Offset = "0x89B028", VA = "0x89B028", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002471")]
			[Address(RVA = "0x89B03C", Offset = "0x89B03C", VA = "0x89B03C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57D674", Offset = "0x57D674")]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0x57D674", Offset = "0x57D674")]
		[SerializeField]
		private CGDataReference m_Volume;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57D728", Offset = "0x57D728")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x57D7DC", Offset = "0x57D7DC")]
		private float m_CrossInitialPosition;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private CurvyClamping m_CrossClamping;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float mKeepDistanceAt;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float mCrossTF;

		[Token(Token = "0x1700039F")]
		public CGDataReference Volume
		{
			[Token(Token = "0x6001D14")]
			[Address(RVA = "0x899740", Offset = "0x899740", VA = "0x899740")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D15")]
			[Address(RVA = "0x899748", Offset = "0x899748", VA = "0x899748")]
			set
			{
			}
		}

		[Token(Token = "0x170003A0")]
		public CGVolume VolumeData
		{
			[Token(Token = "0x6001D16")]
			[Address(RVA = "0x8997C4", Offset = "0x8997C4", VA = "0x8997C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A1")]
		public float CrossFrom
		{
			[Token(Token = "0x6001D17")]
			[Address(RVA = "0x899848", Offset = "0x899848", VA = "0x899848")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D18")]
			[Address(RVA = "0x899850", Offset = "0x899850", VA = "0x899850")]
			set
			{
			}
		}

		[Token(Token = "0x170003A2")]
		public float CrossTo
		{
			[Token(Token = "0x6001D19")]
			[Address(RVA = "0x899914", Offset = "0x899914", VA = "0x899914")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0x89991C", Offset = "0x89991C", VA = "0x89991C")]
			set
			{
			}
		}

		[Token(Token = "0x170003A3")]
		public float CrossLength
		{
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x8999E8", Offset = "0x8999E8", VA = "0x8999E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003A4")]
		public float CrossInitialPosition
		{
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x8999F4", Offset = "0x8999F4", VA = "0x8999F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0x8999FC", Offset = "0x8999FC", VA = "0x8999FC")]
			set
			{
			}
		}

		[Token(Token = "0x170003A5")]
		public CurvyClamping CrossClamping
		{
			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0x899ABC", Offset = "0x899ABC", VA = "0x899ABC")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x6001D1F")]
			[Address(RVA = "0x899AC4", Offset = "0x899AC4", VA = "0x899AC4")]
			set
			{
			}
		}

		[Token(Token = "0x170003A6")]
		public float CrossPosition
		{
			[Token(Token = "0x6001D20")]
			[Address(RVA = "0x899AD8", Offset = "0x899AD8", VA = "0x899AD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D21")]
			[Address(RVA = "0x899B18", Offset = "0x899B18", VA = "0x899B18")]
			set
			{
			}
		}

		[Token(Token = "0x170003A7")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6001D22")]
			[Address(RVA = "0x899BE8", Offset = "0x899BE8", VA = "0x899BE8", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A8")]
		public override bool DependenciesInitialized
		{
			[Token(Token = "0x6001D23")]
			[Address(RVA = "0x899C18", Offset = "0x899C18", VA = "0x899C18", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A9")]
		public override float Length
		{
			[Token(Token = "0x6001D24")]
			[Address(RVA = "0x899C6C", Offset = "0x899C6C", VA = "0x899C6C", Slot = "38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003AA")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x6001D36")]
			[Address(RVA = "0x89AE80", Offset = "0x89AE80", VA = "0x89AE80")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x8995EC", Offset = "0x8995EC", VA = "0x8995EC")]
		public VolumeController()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x899CB0", Offset = "0x899CB0", VA = "0x899CB0", Slot = "17")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x899D10", Offset = "0x899D10", VA = "0x899D10", Slot = "18")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x899D24", Offset = "0x899D24", VA = "0x899D24")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x899D98", Offset = "0x899D98", VA = "0x899D98", Slot = "23")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x899F00", Offset = "0x899F00", VA = "0x899F00", Slot = "29")]
		public override void Prepare()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x89A0D8", Offset = "0x89A0D8", VA = "0x89A0D8")]
		public float CrossRelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x89A1A8", Offset = "0x89A1A8", VA = "0x89A1A8")]
		public float CrossAbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x89A258", Offset = "0x89A258", VA = "0x89A258", Slot = "43")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x89A2BC", Offset = "0x89A2BC", VA = "0x89A2BC", Slot = "42")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x89A320", Offset = "0x89A320", VA = "0x89A320", Slot = "44")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x89A43C", Offset = "0x89A43C", VA = "0x89A43C", Slot = "45")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 position, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x89A60C", Offset = "0x89A60C", VA = "0x89A60C", Slot = "48")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x89A720", Offset = "0x89A720", VA = "0x89A720", Slot = "46")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x89A834", Offset = "0x89A834", VA = "0x89A834", Slot = "39")]
		protected override void Advance(ref float virtualPosition, ref int direction, MoveModeEnum mode, float absSpeed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x89A8D4", Offset = "0x89A8D4", VA = "0x89A8D4", Slot = "49")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x89AA80", Offset = "0x89AA80", VA = "0x89AA80", Slot = "50")]
		protected override void UnbindEvents()
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x89ABB4", Offset = "0x89ABB4", VA = "0x89ABB4", Slot = "53")]
		protected virtual void OnRefreshPath(CurvyCGEventArgs e)
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x899BC8", Offset = "0x899BC8", VA = "0x899BC8")]
		private float getRangedCross(float f)
		{
			return default(float);
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x899AF8", Offset = "0x899AF8", VA = "0x899AF8")]
		private float getUnrangedCross(float f)
		{
			return default(float);
		}
	}
}
namespace FluffyUnderware.DevTools
{
	[Token(Token = "0x200042D")]
	public interface IDTGroupParsingAttribute
	{
		[Token(Token = "0x170003AB")]
		string Path
		{
			[Token(Token = "0x6001D39")]
			get;
		}
	}
	[Token(Token = "0x200042E")]
	public interface IDTFieldParsingAttribute
	{
	}
	[Token(Token = "0x200042F")]
	public interface IDTGroupRenderAttribute
	{
	}
	[Token(Token = "0x2000430")]
	public interface IDTFieldRenderAttribute
	{
	}
	[Token(Token = "0x2000431")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x57D8CC", Offset = "0x57D8CC")]
	public class DTVersionAttribute : Attribute
	{
		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Version;

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x9015C0", Offset = "0x9015C0", VA = "0x9015C0")]
		public DTVersionAttribute(string version)
		{
		}
	}
	[Token(Token = "0x2000432")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x57D908", Offset = "0x57D908")]
	public class DTAttribute : Attribute, IComparable
	{
		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D944", Offset = "0x57D944")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57D944", Offset = "0x57D944")]
		private int <TypeSort>k__BackingField;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Sort;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowBelowProperty;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Space;

		[Token(Token = "0x170003AC")]
		public int TypeSort
		{
			[Token(Token = "0x6001D3C")]
			[Address(RVA = "0x8FBAD8", Offset = "0x8FBAD8", VA = "0x8FBAD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D980", Offset = "0x57D980")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D3D")]
			[Address(RVA = "0x8F9AFC", Offset = "0x8F9AFC", VA = "0x8F9AFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D990", Offset = "0x57D990")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x8F96B4", Offset = "0x8F96B4", VA = "0x8F96B4")]
		public DTAttribute(int sortOrder, bool showBelow = false)
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x8FBAE0", Offset = "0x8FBAE0", VA = "0x8FBAE0", Slot = "7")]
		public virtual int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000433")]
	public class GroupAttribute : DTAttribute, IDTGroupParsingAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D9A0", Offset = "0x57D9A0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57D9A0", Offset = "0x57D9A0")]
		private bool <PathIsAbsolute>k__BackingField;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Expanded;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool Invisible;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Label;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Tooltip;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string HelpURL;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mPath;

		[Token(Token = "0x170003AD")]
		public string Path
		{
			[Token(Token = "0x6001D40")]
			[Address(RVA = "0x906554", Offset = "0x906554", VA = "0x906554", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D41")]
			[Address(RVA = "0x90643C", Offset = "0x90643C", VA = "0x90643C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		public bool PathIsAbsolute
		{
			[Token(Token = "0x6001D42")]
			[Address(RVA = "0x906568", Offset = "0x906568", VA = "0x906568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D9DC", Offset = "0x57D9DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D43")]
			[Address(RVA = "0x90655C", Offset = "0x90655C", VA = "0x90655C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D9EC", Offset = "0x57D9EC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x8F9AB0", Offset = "0x8F9AB0", VA = "0x8F9AB0")]
		public GroupAttribute(string pathAndName)
		{
		}
	}
	[Token(Token = "0x2000434")]
	public class ActionAttribute : DTAttribute
	{
		[Token(Token = "0x2000435")]
		public enum ActionEnum
		{
			[Token(Token = "0x40011E5")]
			Show,
			[Token(Token = "0x40011E6")]
			Hide,
			[Token(Token = "0x40011E7")]
			Enable,
			[Token(Token = "0x40011E8")]
			Disable,
			[Token(Token = "0x40011E9")]
			ShowInfo,
			[Token(Token = "0x40011EA")]
			ShowWarning,
			[Token(Token = "0x40011EB")]
			ShowError,
			[Token(Token = "0x40011EC")]
			Callback
		}

		[Token(Token = "0x2000436")]
		public enum ActionPositionEnum
		{
			[Token(Token = "0x40011EE")]
			Above,
			[Token(Token = "0x40011EF")]
			Below
		}

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActionEnum Action;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ActionPositionEnum Position;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object ActionData;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MethodInfo mCallback;

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x8F9658", Offset = "0x8F9658", VA = "0x8F9658")]
		protected ActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x8F96FC", Offset = "0x8F96FC", VA = "0x8F96FC")]
		public void Callback(object classInstance)
		{
		}
	}
	[Token(Token = "0x2000437")]
	public class ConditionalAttribute : ActionAttribute
	{
		[Token(Token = "0x2000438")]
		public enum OperatorEnum
		{
			[Token(Token = "0x40011F2")]
			AND,
			[Token(Token = "0x40011F3")]
			OR
		}

		[Token(Token = "0x2000439")]
		public class Condition
		{
			[Token(Token = "0x40011F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string FieldName;

			[Token(Token = "0x40011F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FieldInfo FieldInfo;

			[Token(Token = "0x40011F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropertyInfo PropertyInfo;

			[Token(Token = "0x40011F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public object CompareTo;

			[Token(Token = "0x40011F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool CompareFalse;

			[Token(Token = "0x40011F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public OperatorEnum Operator;

			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MethodInfo MethodInfo;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string MethodName;

			[Token(Token = "0x6001D4C")]
			[Address(RVA = "0x8FAF6C", Offset = "0x8FAF6C", VA = "0x8FAF6C")]
			public Condition()
			{
			}
		}

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Condition[] Conditions;

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x8FAE20", Offset = "0x8FAE20", VA = "0x8FAE20")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x8FAF74", Offset = "0x8FAF74", VA = "0x8FAF74")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x8FB18C", Offset = "0x8FB18C", VA = "0x8FB18C")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x8FB448", Offset = "0x8FB448", VA = "0x8FB448")]
		protected ConditionalAttribute(string methodToQuery)
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x8FB570", Offset = "0x8FB570", VA = "0x8FB570", Slot = "8")]
		public virtual bool ConditionMet(object classInstance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x8FB678", Offset = "0x8FB678", VA = "0x8FB678")]
		private bool evaluate(Condition cond, object classInstance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200043A")]
	public class SortOrderAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x909570", Offset = "0x909570", VA = "0x909570")]
		public SortOrderAttribute(int sort = 100)
		{
		}
	}
	[Token(Token = "0x200043B")]
	public class AsGroupAttribute : GroupAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x8F9A58", Offset = "0x8F9A58", VA = "0x8F9A58")]
		public AsGroupAttribute([Optional] string pathAndName)
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class TabAttribute : GroupAttribute
	{
		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string TabName;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string TabBarName;

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x9095A8", Offset = "0x9095A8", VA = "0x9095A8")]
		public TabAttribute(string pathAndName)
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x909688", Offset = "0x909688", VA = "0x909688")]
		private static bool split(string pathAndName, out string path, out string tabBar, out string tabname)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200043D")]
	public class SectionAttribute : GroupAttribute
	{
		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Fixed;

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x906EAC", Offset = "0x906EAC", VA = "0x906EAC")]
		public SectionAttribute(string name, bool expanded = true, bool fix = false, int sort = 100)
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class NoSectionAttribute : SectionAttribute
	{
		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x906DF4", Offset = "0x906DF4", VA = "0x906DF4")]
		public NoSectionAttribute()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class Hide : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x9065A8", Offset = "0x9065A8", VA = "0x9065A8")]
		public Hide()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class Inline : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x9065E0", Offset = "0x9065E0", VA = "0x9065E0")]
		public Inline()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class ArrayExAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Draggable;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ShowHeader;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool ShowAdd;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool ShowDelete;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool DropTarget;

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x8F9A10", Offset = "0x8F9A10", VA = "0x8F9A10")]
		public ArrayExAttribute()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class FieldActionAttribute : ActionAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6001D56")]
		[Address(RVA = "0x905BA8", Offset = "0x905BA8", VA = "0x905BA8")]
		public FieldActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class GroupActionAttribute : ActionAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x9063E0", Offset = "0x9063E0", VA = "0x9063E0")]
		public GroupActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class FieldConditionAttribute : ConditionalAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x905C04", Offset = "0x905C04", VA = "0x905C04")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false, ActionEnum action = ActionEnum.Show, [Optional] object actionData, ActionPositionEnum position = ActionPositionEnum.Below)
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x905C44", Offset = "0x905C44", VA = "0x905C44")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x905C50", Offset = "0x905C50", VA = "0x905C50")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x905C70", Offset = "0x905C70", VA = "0x905C70")]
		public FieldConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class GroupConditionAttribute : ConditionalAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x906570", Offset = "0x906570", VA = "0x906570")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x906578", Offset = "0x906578", VA = "0x906578")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x906584", Offset = "0x906584", VA = "0x906584")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x9065A4", Offset = "0x9065A4", VA = "0x9065A4")]
		public GroupConditionAttribute(string methodToQuery)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000446")]
	public class TTransform
	{
		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 localPosition;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion localRotation;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 localScale;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Matrix4x4 localToWorldMatrix;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion rotation;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector3 position;

		[Token(Token = "0x170003AF")]
		public Vector3 up
		{
			[Token(Token = "0x6001D61")]
			[Address(RVA = "0x90A8E8", Offset = "0x90A8E8", VA = "0x90A8E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x90A7A4", Offset = "0x90A7A4", VA = "0x90A7A4")]
		public TTransform(Transform t)
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x90A7D4", Offset = "0x90A7D4", VA = "0x90A7D4")]
		public void FromTransform(Transform t)
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x90A9CC", Offset = "0x90A9CC", VA = "0x90A9CC")]
		public void ToTransform(Transform t, Space space = Space.Self)
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x90AAD4", Offset = "0x90AAD4", VA = "0x90AAD4")]
		public bool Changed(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x90AD90", Offset = "0x90AD90", VA = "0x90AD90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x90ADFC", Offset = "0x90ADFC", VA = "0x90ADFC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x90AB20", Offset = "0x90AB20", VA = "0x90AB20")]
		public static bool operator ==(TTransform a, Transform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x90AF68", Offset = "0x90AF68", VA = "0x90AF68")]
		public static bool operator ==(TTransform a, TTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x90B190", Offset = "0x90B190", VA = "0x90B190")]
		public static bool operator !=(TTransform a, Transform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x90B40C", Offset = "0x90B40C", VA = "0x90B40C")]
		public static bool operator !=(TTransform a, TTransform b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x90B640", Offset = "0x90B640", VA = "0x90B640")]
		public static implicit operator bool(TTransform a)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000447")]
	public struct FloatRegion
	{
		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float From;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float To;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x170003B0")]
		public static FloatRegion ZeroOne
		{
			[Token(Token = "0x6001D6E")]
			[Address(RVA = "0x905CF0", Offset = "0x905CF0", VA = "0x905CF0")]
			get
			{
				return default(FloatRegion);
			}
		}

		[Token(Token = "0x170003B1")]
		public bool Positive
		{
			[Token(Token = "0x6001D71")]
			[Address(RVA = "0x905E18", Offset = "0x905E18", VA = "0x905E18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003B2")]
		public float Low
		{
			[Token(Token = "0x6001D72")]
			[Address(RVA = "0x905E28", Offset = "0x905E28", VA = "0x905E28")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D73")]
			[Address(RVA = "0x905E38", Offset = "0x905E38", VA = "0x905E38")]
			set
			{
			}
		}

		[Token(Token = "0x170003B3")]
		public float High
		{
			[Token(Token = "0x6001D74")]
			[Address(RVA = "0x905E54", Offset = "0x905E54", VA = "0x905E54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D75")]
			[Address(RVA = "0x905E64", Offset = "0x905E64", VA = "0x905E64")]
			set
			{
			}
		}

		[Token(Token = "0x170003B4")]
		public float Random
		{
			[Token(Token = "0x6001D76")]
			[Address(RVA = "0x905E80", Offset = "0x905E80", VA = "0x905E80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B5")]
		public float Next
		{
			[Token(Token = "0x6001D77")]
			[Address(RVA = "0x905EB8", Offset = "0x905EB8", VA = "0x905EB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B6")]
		public float Length
		{
			[Token(Token = "0x6001D78")]
			[Address(RVA = "0x905EE8", Offset = "0x905EE8", VA = "0x905EE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B7")]
		public float LengthPositive
		{
			[Token(Token = "0x6001D79")]
			[Address(RVA = "0x905EF4", Offset = "0x905EF4", VA = "0x905EF4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x905CC8", Offset = "0x905CC8", VA = "0x905CC8")]
		public FloatRegion(float value)
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x905CE4", Offset = "0x905CE4", VA = "0x905CE4")]
		public FloatRegion(float A, float B)
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x905CFC", Offset = "0x905CFC", VA = "0x905CFC")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x905E10", Offset = "0x905E10", VA = "0x905E10")]
		public void Clamp(float low, float high)
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x905FD4", Offset = "0x905FD4", VA = "0x905FD4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x905FDC", Offset = "0x905FDC", VA = "0x905FDC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x9060C0", Offset = "0x9060C0", VA = "0x9060C0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x9060C8", Offset = "0x9060C8", VA = "0x9060C8")]
		public static FloatRegion operator +(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x9060FC", Offset = "0x9060FC", VA = "0x9060FC")]
		public static FloatRegion operator -(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x906130", Offset = "0x906130", VA = "0x906130")]
		public static FloatRegion operator -(FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x90614C", Offset = "0x90614C", VA = "0x90614C")]
		public static FloatRegion operator *(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x906174", Offset = "0x906174", VA = "0x906174")]
		public static FloatRegion operator *(float v, FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0x90619C", Offset = "0x90619C", VA = "0x90619C")]
		public static FloatRegion operator /(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x9061C4", Offset = "0x9061C4", VA = "0x9061C4")]
		public static bool operator ==(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x9062D4", Offset = "0x9062D4", VA = "0x9062D4")]
		public static bool operator !=(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000448")]
	public struct IntRegion
	{
		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int From;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int To;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x170003B8")]
		public static IntRegion ZeroOne
		{
			[Token(Token = "0x6001D87")]
			[Address(RVA = "0x906680", Offset = "0x906680", VA = "0x906680")]
			get
			{
				return default(IntRegion);
			}
		}

		[Token(Token = "0x170003B9")]
		public bool Positive
		{
			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0x9067B4", Offset = "0x9067B4", VA = "0x9067B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003BA")]
		public int Low
		{
			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0x9067C4", Offset = "0x9067C4", VA = "0x9067C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0x9067D4", Offset = "0x9067D4", VA = "0x9067D4")]
			set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public int High
		{
			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0x9067F0", Offset = "0x9067F0", VA = "0x9067F0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0x906800", Offset = "0x906800", VA = "0x906800")]
			set
			{
			}
		}

		[Token(Token = "0x170003BC")]
		public int Random
		{
			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x90681C", Offset = "0x90681C", VA = "0x90681C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003BD")]
		public int Length
		{
			[Token(Token = "0x6001D90")]
			[Address(RVA = "0x90683C", Offset = "0x90683C", VA = "0x90683C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003BE")]
		public int LengthPositive
		{
			[Token(Token = "0x6001D91")]
			[Address(RVA = "0x90685C", Offset = "0x90685C", VA = "0x90685C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x906664", Offset = "0x906664", VA = "0x906664")]
		public IntRegion(int value)
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x906674", Offset = "0x906674", VA = "0x906674")]
		public IntRegion(int A, int B)
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x9066A0", Offset = "0x9066A0", VA = "0x9066A0")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x9067AC", Offset = "0x9067AC", VA = "0x9067AC")]
		public void Clamp(int low, int high)
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x906938", Offset = "0x906938", VA = "0x906938", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x906978", Offset = "0x906978", VA = "0x906978", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x906A54", Offset = "0x906A54", VA = "0x906A54", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x906A5C", Offset = "0x906A5C", VA = "0x906A5C")]
		public static IntRegion operator +(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x906A78", Offset = "0x906A78", VA = "0x906A78")]
		public static IntRegion operator -(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x906A94", Offset = "0x906A94", VA = "0x906A94")]
		public static IntRegion operator -(IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x906AB0", Offset = "0x906AB0", VA = "0x906AB0")]
		public static IntRegion operator *(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x906AC8", Offset = "0x906AC8", VA = "0x906AC8")]
		public static IntRegion operator *(int v, IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x906AE0", Offset = "0x906AE0", VA = "0x906AE0")]
		public static IntRegion operator /(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x906AF8", Offset = "0x906AF8", VA = "0x906AF8")]
		public static bool operator ==(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x906B30", Offset = "0x906B30", VA = "0x906B30")]
		public static bool operator !=(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000449")]
	public class WeightedRandom<T>
	{
		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mData;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrentPosition;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T mCurrentItem;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57D9FC", Offset = "0x57D9FC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57D9FC", Offset = "0x57D9FC")]
		private int <Seed>k__BackingField;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DA38", Offset = "0x57DA38")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57DA38", Offset = "0x57DA38")]
		private bool <RandomizeSeed>k__BackingField;

		[Token(Token = "0x170003BF")]
		public int Seed
		{
			[Token(Token = "0x6001D9E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DA74", Offset = "0x57DA74")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D9F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DA84", Offset = "0x57DA84")]
			set
			{
			}
		}

		[Token(Token = "0x170003C0")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x6001DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DA94", Offset = "0x57DA94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DA1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DAA4", Offset = "0x57DAA4")]
			set
			{
			}
		}

		[Token(Token = "0x170003C1")]
		private int Capacity
		{
			[Token(Token = "0x6001DA2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003C2")]
		public int Size
		{
			[Token(Token = "0x6001DA3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001D9D")]
		public WeightedRandom(int initCapacity = 0)
		{
		}

		[Token(Token = "0x6001DA4")]
		public void Add(T item, int amount)
		{
		}

		[Token(Token = "0x6001DA5")]
		public T Next()
		{
			return (T)null;
		}

		[Token(Token = "0x6001DA6")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001DA7")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x200044A")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57DAB4", Offset = "0x57DAB4")]
	public class Ring<T> : IList<T>, IEnumerable, ICollection<T>, IEnumerable<T>
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mList;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DAEC", Offset = "0x57DAEC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57DAEC", Offset = "0x57DAEC")]
		private int <Size>k__BackingField;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mIndex;

		[Token(Token = "0x170003C3")]
		public int Size
		{
			[Token(Token = "0x6001DA9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DB28", Offset = "0x57DB28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001DAA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DB38", Offset = "0x57DB38")]
			private set
			{
			}
		}

		[Token(Token = "0x170003C4")]
		public T Item
		{
			[Token(Token = "0x6001DB0")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001DB1")]
			set
			{
			}
		}

		[Token(Token = "0x170003C5")]
		public int Count
		{
			[Token(Token = "0x6001DB5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003C6")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6001DB6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DA8")]
		public Ring(int size)
		{
		}

		[Token(Token = "0x6001DAB")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6001DAC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001DAD")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001DAE")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6001DAF")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001DB2")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001DB3")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB4")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001DB7")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB8")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200044B")]
	public class Pool<T> : IPool
	{
		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mObjects;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DB48", Offset = "0x57DB48")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57DB48", Offset = "0x57DB48")]
		private string <Identifier>k__BackingField;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DB84", Offset = "0x57DB84")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57DB84", Offset = "0x57DB84")]
		private PoolSettings <Settings>k__BackingField;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mLastTime;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mDeltaTime;

		[Token(Token = "0x170003C7")]
		public string Identifier
		{
			[Token(Token = "0x6001DBA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DBC0", Offset = "0x57DBC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DBB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DBD0", Offset = "0x57DBD0")]
			set
			{
			}
		}

		[Token(Token = "0x170003C8")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6001DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DBE0", Offset = "0x57DBE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DBD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DBF0", Offset = "0x57DBF0")]
			protected set
			{
			}
		}

		[Token(Token = "0x170003C9")]
		public Type Type
		{
			[Token(Token = "0x6001DBE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CA")]
		public int Count
		{
			[Token(Token = "0x6001DC2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DB9")]
		public Pool([Optional] PoolSettings settings)
		{
		}

		[Token(Token = "0x6001DBF")]
		public void Update()
		{
		}

		[Token(Token = "0x6001DC0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001DC1")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001DC3")]
		public virtual T Pop([Optional] Transform parent)
		{
			return (T)null;
		}

		[Token(Token = "0x6001DC4")]
		public virtual void Push(T item)
		{
		}

		[Token(Token = "0x6001DC5")]
		protected virtual void sendBeforePush(T item)
		{
		}

		[Token(Token = "0x6001DC6")]
		protected virtual void sendAfterPop(T item)
		{
		}

		[Token(Token = "0x6001DC7")]
		protected virtual void setParent(T item, Transform parent)
		{
		}

		[Token(Token = "0x6001DC8")]
		protected virtual T create()
		{
			return (T)null;
		}

		[Token(Token = "0x6001DC9")]
		protected virtual void destroy(T item)
		{
		}

		[Token(Token = "0x6001DCA")]
		private void log(string msg)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200044C")]
	public class PoolSettings
	{
		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool m_Prewarm;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private bool m_AutoCreate;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[SerializeField]
		private bool m_AutoEnableDisable;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Positive]
		[SerializeField]
		private int m_MinItems;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Positive]
		[SerializeField]
		private int m_Threshold;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Positive]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Debug;

		[Token(Token = "0x170003CB")]
		public bool Prewarm
		{
			[Token(Token = "0x6001DCD")]
			[Address(RVA = "0x8F9E78", Offset = "0x8F9E78", VA = "0x8F9E78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DCE")]
			[Address(RVA = "0x90809C", Offset = "0x90809C", VA = "0x90809C")]
			set
			{
			}
		}

		[Token(Token = "0x170003CC")]
		public bool AutoCreate
		{
			[Token(Token = "0x6001DCF")]
			[Address(RVA = "0x8FACE0", Offset = "0x8FACE0", VA = "0x8FACE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DD0")]
			[Address(RVA = "0x9080BC", Offset = "0x9080BC", VA = "0x9080BC")]
			set
			{
			}
		}

		[Token(Token = "0x170003CD")]
		public bool AutoEnableDisable
		{
			[Token(Token = "0x6001DD1")]
			[Address(RVA = "0x8FAA8C", Offset = "0x8FAA8C", VA = "0x8FAA8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DD2")]
			[Address(RVA = "0x908290", Offset = "0x908290", VA = "0x908290")]
			set
			{
			}
		}

		[Token(Token = "0x170003CE")]
		public int MinItems
		{
			[Token(Token = "0x6001DD3")]
			[Address(RVA = "0x8FA558", Offset = "0x8FA558", VA = "0x8FA558")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001DD4")]
			[Address(RVA = "0x9080DC", Offset = "0x9080DC", VA = "0x9080DC")]
			set
			{
			}
		}

		[Token(Token = "0x170003CF")]
		public int Threshold
		{
			[Token(Token = "0x6001DD5")]
			[Address(RVA = "0x8FA38C", Offset = "0x8FA38C", VA = "0x8FA38C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001DD6")]
			[Address(RVA = "0x90816C", Offset = "0x90816C", VA = "0x90816C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D0")]
		public float Speed
		{
			[Token(Token = "0x6001DD7")]
			[Address(RVA = "0x8F9E70", Offset = "0x8F9E70", VA = "0x8F9E70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001DD8")]
			[Address(RVA = "0x908200", Offset = "0x908200", VA = "0x908200")]
			set
			{
			}
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x907110", Offset = "0x907110", VA = "0x907110")]
		public PoolSettings()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x907A78", Offset = "0x907A78", VA = "0x907A78")]
		public PoolSettings(PoolSettings src)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x8F9BB4", Offset = "0x8F9BB4", VA = "0x8F9BB4")]
		public void OnValidate()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public interface IPool
	{
		[Token(Token = "0x170003D1")]
		string Identifier
		{
			[Token(Token = "0x6001DDA")]
			get;
			[Token(Token = "0x6001DDB")]
			set;
		}

		[Token(Token = "0x170003D2")]
		PoolSettings Settings
		{
			[Token(Token = "0x6001DDC")]
			get;
		}

		[Token(Token = "0x170003D3")]
		int Count
		{
			[Token(Token = "0x6001DE0")]
			get;
		}

		[Token(Token = "0x6001DDD")]
		void Clear();

		[Token(Token = "0x6001DDE")]
		void Reset();

		[Token(Token = "0x6001DDF")]
		void Update();
	}
	[Token(Token = "0x200044E")]
	public interface IPoolable
	{
		[Token(Token = "0x6001DE1")]
		void OnBeforePush();

		[Token(Token = "0x6001DE2")]
		void OnAfterPop();
	}
	[Token(Token = "0x200044F")]
	public static class DTTween
	{
		[Token(Token = "0x2000450")]
		public enum EasingMethod
		{
			[Token(Token = "0x4001225")]
			Linear,
			[Token(Token = "0x4001226")]
			ExponentialIn,
			[Token(Token = "0x4001227")]
			ExponentialOut,
			[Token(Token = "0x4001228")]
			ExponentialInOut,
			[Token(Token = "0x4001229")]
			ExponentialOutIn,
			[Token(Token = "0x400122A")]
			CircularIn,
			[Token(Token = "0x400122B")]
			CircularOut,
			[Token(Token = "0x400122C")]
			CircularInOut,
			[Token(Token = "0x400122D")]
			CircularOutIn,
			[Token(Token = "0x400122E")]
			QuadraticIn,
			[Token(Token = "0x400122F")]
			QuadraticOut,
			[Token(Token = "0x4001230")]
			QuadraticInOut,
			[Token(Token = "0x4001231")]
			QuadraticOutIn,
			[Token(Token = "0x4001232")]
			SinusIn,
			[Token(Token = "0x4001233")]
			SinusOut,
			[Token(Token = "0x4001234")]
			SinusInOut,
			[Token(Token = "0x4001235")]
			SinusOutIn,
			[Token(Token = "0x4001236")]
			CubicIn,
			[Token(Token = "0x4001237")]
			CubicOut,
			[Token(Token = "0x4001238")]
			CubicInOut,
			[Token(Token = "0x4001239")]
			CubicOutIn,
			[Token(Token = "0x400123A")]
			QuarticIn,
			[Token(Token = "0x400123B")]
			QuarticOut,
			[Token(Token = "0x400123C")]
			QuarticInOut,
			[Token(Token = "0x400123D")]
			QuarticOutIn,
			[Token(Token = "0x400123E")]
			QuinticIn,
			[Token(Token = "0x400123F")]
			QuinticOut,
			[Token(Token = "0x4001240")]
			QuinticInOut,
			[Token(Token = "0x4001241")]
			QuinticOutIn
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x8FE7E4", Offset = "0x8FE7E4", VA = "0x8FE7E4")]
		public static float Ease(EasingMethod method, float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x8FFF28", Offset = "0x8FFF28", VA = "0x8FFF28")]
		public static float Ease(EasingMethod method, float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x8FFE98", Offset = "0x8FFE98", VA = "0x8FFE98")]
		public static float Linear(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x900E24", Offset = "0x900E24", VA = "0x900E24")]
		public static float Linear(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x8FE954", Offset = "0x8FE954", VA = "0x8FE954")]
		public static float ExpoOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x900270", Offset = "0x900270", VA = "0x900270")]
		public static float ExpoOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x8FE888", Offset = "0x8FE888", VA = "0x8FE888")]
		public static float ExpoIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x9001C8", Offset = "0x9001C8", VA = "0x9001C8")]
		public static float ExpoIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x8FEA1C", Offset = "0x8FEA1C", VA = "0x8FEA1C")]
		public static float ExpoInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x900314", Offset = "0x900314", VA = "0x900314")]
		public static float ExpoInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x8FEB4C", Offset = "0x8FEB4C", VA = "0x8FEB4C")]
		public static float ExpoOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x900428", Offset = "0x900428", VA = "0x900428")]
		public static float ExpoOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x8FECCC", Offset = "0x8FECCC", VA = "0x8FECCC")]
		public static float CircOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x900508", Offset = "0x900508", VA = "0x900508")]
		public static float CircOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x8FEC14", Offset = "0x8FEC14", VA = "0x8FEC14")]
		public static float CircIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x900458", Offset = "0x900458", VA = "0x900458")]
		public static float CircIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0x8FED84", Offset = "0x8FED84", VA = "0x8FED84")]
		public static float CircInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0x9005B8", Offset = "0x9005B8", VA = "0x9005B8")]
		public static float CircInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0x8FEEB4", Offset = "0x8FEEB4", VA = "0x8FEEB4")]
		public static float CircOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0x9006D0", Offset = "0x9006D0", VA = "0x9006D0")]
		public static float CircOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x8FF010", Offset = "0x8FF010", VA = "0x8FF010")]
		public static float QuadOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x900714", Offset = "0x900714", VA = "0x900714")]
		public static float QuadOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x8FEF7C", Offset = "0x8FEF7C", VA = "0x8FEF7C")]
		public static float QuadIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x900700", Offset = "0x900700", VA = "0x900700")]
		public static float QuadIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x8FF0AC", Offset = "0x8FF0AC", VA = "0x8FF0AC")]
		public static float QuadInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x900730", Offset = "0x900730", VA = "0x900730")]
		public static float QuadInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x8FF1DC", Offset = "0x8FF1DC", VA = "0x8FF1DC")]
		public static float QuadOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x900848", Offset = "0x900848", VA = "0x900848")]
		public static float QuadOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0x8FF348", Offset = "0x8FF348", VA = "0x8FF348")]
		public static float SineOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0x900934", Offset = "0x900934", VA = "0x900934")]
		public static float SineOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0x8FF2A4", Offset = "0x8FF2A4", VA = "0x8FF2A4")]
		public static float SineIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x900898", Offset = "0x900898", VA = "0x900898")]
		public static float SineIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x8FF3E8", Offset = "0x8FF3E8", VA = "0x8FF3E8")]
		public static float SineInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x9009CC", Offset = "0x9009CC", VA = "0x9009CC")]
		public static float SineInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x8FF508", Offset = "0x8FF508", VA = "0x8FF508")]
		public static float SineOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x900AD0", Offset = "0x900AD0", VA = "0x900AD0")]
		public static float SineOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x8FF668", Offset = "0x8FF668", VA = "0x8FF668")]
		public static float CubicOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x900B18", Offset = "0x900B18", VA = "0x900B18")]
		public static float CubicOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x8FF5D0", Offset = "0x8FF5D0", VA = "0x8FF5D0")]
		public static float CubicIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x900B00", Offset = "0x900B00", VA = "0x900B00")]
		public static float CubicIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x8FF710", Offset = "0x8FF710", VA = "0x8FF710")]
		public static float CubicInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x900B40", Offset = "0x900B40", VA = "0x900B40")]
		public static float CubicInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x8FF7E8", Offset = "0x8FF7E8", VA = "0x8FF7E8")]
		public static float CubicOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x900B94", Offset = "0x900B94", VA = "0x900B94")]
		public static float CubicOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x8FF94C", Offset = "0x8FF94C", VA = "0x8FF94C")]
		public static float QuartOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x900C14", Offset = "0x900C14", VA = "0x900C14")]
		public static float QuartOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x8FF8B0", Offset = "0x8FF8B0", VA = "0x8FF8B0")]
		public static float QuartIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x900BF8", Offset = "0x900BF8", VA = "0x900BF8")]
		public static float QuartIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x8FF9F4", Offset = "0x8FF9F4", VA = "0x8FF9F4")]
		public static float QuartInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x900C3C", Offset = "0x900C3C", VA = "0x900C3C")]
		public static float QuartInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x8FFAD0", Offset = "0x8FFAD0", VA = "0x8FFAD0")]
		public static float QuartOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x900C98", Offset = "0x900C98", VA = "0x900C98")]
		public static float QuartOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0x8FFC38", Offset = "0x8FFC38", VA = "0x8FFC38")]
		public static float QuintOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0x900D1C", Offset = "0x900D1C", VA = "0x900D1C")]
		public static float QuintOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0x8FFB98", Offset = "0x8FFB98", VA = "0x8FFB98")]
		public static float QuintIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x900CFC", Offset = "0x900CFC", VA = "0x900CFC")]
		public static float QuintIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x8FFCE8", Offset = "0x8FFCE8", VA = "0x8FFCE8")]
		public static float QuintInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x900D4C", Offset = "0x900D4C", VA = "0x900D4C")]
		public static float QuintInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x8FFDD0", Offset = "0x8FFDD0", VA = "0x8FFDD0")]
		public static float QuintOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x900DB0", Offset = "0x900DB0", VA = "0x900DB0")]
		public static float QuintOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000451")]
	public class DTObjectDump
	{
		[Token(Token = "0x4001242")]
		private const int INDENTSPACES = 5;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string mIndent;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private StringBuilder mSB;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object mObject;

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x8FD550", Offset = "0x8FD550", VA = "0x8FD550")]
		public DTObjectDump(object o, int indent = 0)
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x8FE580", Offset = "0x8FE580", VA = "0x8FE580", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x8FD890", Offset = "0x8FD890", VA = "0x8FD890")]
		private void AppendHeader(string name)
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x8FD944", Offset = "0x8FD944", VA = "0x8FD944")]
		private void AppendMember(MemberInfo info)
		{
		}
	}
	[Token(Token = "0x2000452")]
	public static class DTUtility
	{
		[Token(Token = "0x170003D4")]
		public static bool IsEditorStateChange
		{
			[Token(Token = "0x6001E24")]
			[Address(RVA = "0x900E3C", Offset = "0x900E3C", VA = "0x900E3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x900E34", Offset = "0x900E34", VA = "0x900E34")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x900E44", Offset = "0x900E44", VA = "0x900E44")]
		public static float GetHandleSize(Vector3 position)
		{
			return default(float);
		}

		[Token(Token = "0x6001E26")]
		public static void SetPlayerPrefs<T>(string key, T value)
		{
		}

		[Token(Token = "0x6001E27")]
		public static T GetPlayerPrefs<T>(string key, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x9011F4", Offset = "0x9011F4", VA = "0x9011F4")]
		public static float RandomSign()
		{
			return default(float);
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x901224", Offset = "0x901224", VA = "0x901224")]
		public static string GetHelpUrl(object forClass)
		{
			return null;
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x9012B0", Offset = "0x9012B0", VA = "0x9012B0")]
		public static string GetHelpUrl(Type classType)
		{
			return null;
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x90144C", Offset = "0x90144C", VA = "0x90144C")]
		public static Vector3 GetCenterPosition(Vector3 fallback, params Vector3[] vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E2C")]
		public static T CreateGameObject<T>(Transform parent, string name) where T : MonoBehaviour
		{
			return null;
		}
	}
	[Token(Token = "0x2000453")]
	public static class DTTime
	{
		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _EditorDeltaTime;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _EditorLastTime;

		[Token(Token = "0x170003D5")]
		public static double TimeSinceStartup
		{
			[Token(Token = "0x6001E2D")]
			[Address(RVA = "0x8F9E50", Offset = "0x8F9E50", VA = "0x8F9E50")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003D6")]
		public static float deltaTime
		{
			[Token(Token = "0x6001E2E")]
			[Address(RVA = "0x8FE698", Offset = "0x8FE698", VA = "0x8FE698")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x8FE70C", Offset = "0x8FE70C", VA = "0x8FE70C")]
		public static void InitializeEditorTime()
		{
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x8FE774", Offset = "0x8FE774", VA = "0x8FE774")]
		public static void UpdateEditorTime()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public class TimeMeasure : Ring<long>
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Stopwatch mWatch;

		[Token(Token = "0x170003D7")]
		public double LastTicks
		{
			[Token(Token = "0x6001E35")]
			[Address(RVA = "0x90A184", Offset = "0x90A184", VA = "0x90A184")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003D8")]
		public double LastMS
		{
			[Token(Token = "0x6001E36")]
			[Address(RVA = "0x90A1F4", Offset = "0x90A1F4", VA = "0x90A1F4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003D9")]
		public double AverageMS
		{
			[Token(Token = "0x6001E37")]
			[Address(RVA = "0x90A214", Offset = "0x90A214", VA = "0x90A214")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003DA")]
		public double MinimumMS
		{
			[Token(Token = "0x6001E38")]
			[Address(RVA = "0x90A308", Offset = "0x90A308", VA = "0x90A308")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003DB")]
		public double MaximumMS
		{
			[Token(Token = "0x6001E39")]
			[Address(RVA = "0x90A404", Offset = "0x90A404", VA = "0x90A404")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003DC")]
		public double AverageTicks
		{
			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0x90A500", Offset = "0x90A500", VA = "0x90A500")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003DD")]
		public double MinimumTicks
		{
			[Token(Token = "0x6001E3B")]
			[Address(RVA = "0x90A5D0", Offset = "0x90A5D0", VA = "0x90A5D0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170003DE")]
		public double MaximumTicks
		{
			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0x90A69C", Offset = "0x90A69C", VA = "0x90A69C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x90A010", Offset = "0x90A010", VA = "0x90A010")]
		public TimeMeasure(int size)
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x90A090", Offset = "0x90A090", VA = "0x90A090")]
		public void Start()
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x90A0BC", Offset = "0x90A0BC", VA = "0x90A0BC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x90A158", Offset = "0x90A158", VA = "0x90A158")]
		public void Pause()
		{
		}
	}
	[Token(Token = "0x2000455")]
	public static class DTMath
	{
		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x8FC29C", Offset = "0x8FC29C", VA = "0x8FC29C")]
		public static Vector3 ParallelTransportFrame(ref Vector3 up, ref Vector3 tan0, ref Vector3 tan1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x8FC424", Offset = "0x8FC424", VA = "0x8FC424")]
		public static Vector3 LeftTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x8FC4A8", Offset = "0x8FC4A8", VA = "0x8FC4A8")]
		public static Vector3 RightTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x8F13D4", Offset = "0x8F13D4", VA = "0x8F13D4")]
		public static float Repeat(float t, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x8FC52C", Offset = "0x8FC52C", VA = "0x8FC52C")]
		public static double FixNaN(double v)
		{
			return default(double);
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x8FC560", Offset = "0x8FC560", VA = "0x8FC560")]
		public static float FixNaN(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x8FC594", Offset = "0x8FC594", VA = "0x8FC594")]
		public static Vector2 FixNaN(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x8FC5F0", Offset = "0x8FC5F0", VA = "0x8FC5F0")]
		public static Vector3 FixNaN(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x8F58B4", Offset = "0x8F58B4", VA = "0x8F58B4")]
		public static float MapValue(float min, float max, float value, float vMin = -1f, float vMax = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x8FC66C", Offset = "0x8FC66C", VA = "0x8FC66C")]
		public static float SnapPrecision(float value, int decimals)
		{
			return default(float);
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x8FC698", Offset = "0x8FC698", VA = "0x8FC698")]
		public static Vector2 SnapPrecision(Vector2 value, int decimals)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x8FC72C", Offset = "0x8FC72C", VA = "0x8FC72C")]
		public static Vector3 SnapPrecision(Vector3 value, int decimals)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x8FC7F0", Offset = "0x8FC7F0", VA = "0x8FC7F0")]
		public static float LinePointDistanceSqr(Vector3 l1, Vector3 l2, Vector3 p, out float frag)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x8FCAB8", Offset = "0x8FCAB8", VA = "0x8FCAB8")]
		public static bool RayLineSegmentIntersection(Vector2 r0, Vector2 dir, Vector2 l1, Vector2 l2, out Vector2 hit, out float frag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x8FCC24", Offset = "0x8FCC24", VA = "0x8FCC24")]
		public static bool ShortestIntersectionLine(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 resultSegmentA, out Vector3 resultSegmentB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x8FCFA0", Offset = "0x8FCFA0", VA = "0x8FCFA0")]
		public static bool LineLineIntersection(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 hitPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x8FD11C", Offset = "0x8FD11C", VA = "0x8FD11C")]
		public static bool LineLineIntersect(Vector2 line1A, Vector2 line1B, Vector2 line2A, Vector2 line2B, out Vector2 hitPoint, bool segmentOnly = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x8FD29C", Offset = "0x8FD29C", VA = "0x8FD29C")]
		public static bool PointInsideTriangle(Vector3 A, Vector3 B, Vector3 C, Vector3 p, out float ac, out float ab, bool edgesAllowed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000456")]
	public class UnityEventEx<T0> : UnityEvent<T0>
	{
		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object mCallerList;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MethodInfo mCallsCount;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCount;

		[Token(Token = "0x6001E4F")]
		public UnityEventEx()
		{
		}

		[Token(Token = "0x6001E50")]
		public void AddListenerOnce(UnityAction<T0> call)
		{
		}

		[Token(Token = "0x6001E51")]
		public bool HasListeners()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E52")]
		public void CheckForListeners()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public static class DTLog
	{
		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x8FBBFC", Offset = "0x8FBBFC", VA = "0x8FBBFC")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x8FBC68", Offset = "0x8FBC68", VA = "0x8FBC68")]
		public static void Log(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x8FBCE4", Offset = "0x8FBCE4", VA = "0x8FBCE4")]
		public static void LogError(object message)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x8FBD50", Offset = "0x8FBD50", VA = "0x8FBD50")]
		public static void LogError(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x8FBDCC", Offset = "0x8FBDCC", VA = "0x8FBDCC")]
		public static void LogErrorFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x8FBE48", Offset = "0x8FBE48", VA = "0x8FBE48")]
		public static void LogErrorFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x8FBECC", Offset = "0x8FBECC", VA = "0x8FBECC")]
		public static void LogException(Exception exception)
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0x8FBF38", Offset = "0x8FBF38", VA = "0x8FBF38")]
		public static void LogException(Exception exception, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x8FBFB4", Offset = "0x8FBFB4", VA = "0x8FBFB4")]
		public static void LogFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x8FC030", Offset = "0x8FC030", VA = "0x8FC030")]
		public static void LogFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x8FC0B4", Offset = "0x8FC0B4", VA = "0x8FC0B4")]
		public static void LogWarning(object message)
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x8FC120", Offset = "0x8FC120", VA = "0x8FC120")]
		public static void LogWarning(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x8FC19C", Offset = "0x8FC19C", VA = "0x8FC19C")]
		public static void LogWarningFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0x8FC218", Offset = "0x8FC218", VA = "0x8FC218")]
		public static void LogWarningFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}
	}
	[Token(Token = "0x2000458")]
	public enum DTMessageType
	{
		[Token(Token = "0x400124D")]
		None,
		[Token(Token = "0x400124E")]
		Info,
		[Token(Token = "0x400124F")]
		Warning,
		[Token(Token = "0x4001250")]
		Error
	}
	[Token(Token = "0x2000459")]
	public enum AttributeOptionsFlags
	{
		[Token(Token = "0x4001252")]
		None = 0,
		[Token(Token = "0x4001253")]
		Compact = 1,
		[Token(Token = "0x4001254")]
		Clipboard = 128,
		[Token(Token = "0x4001255")]
		Zero = 256,
		[Token(Token = "0x4001256")]
		One = 512,
		[Token(Token = "0x4001257")]
		Negate = 1024,
		[Token(Token = "0x4001258")]
		Full = 1920,
		[Token(Token = "0x4001259")]
		FullCompact = 1921
	}
	[Token(Token = "0x200045A")]
	public class DTPropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Label;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Tooltip;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Color;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AttributeOptionsFlags Options;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Precision;

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0x8F99D0", Offset = "0x8F99D0", VA = "0x8F99D0")]
		public DTPropertyAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class LabelAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E62")]
		[Address(RVA = "0x906B6C", Offset = "0x906B6C", VA = "0x906B6C")]
		public LabelAttribute()
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0x906BF0", Offset = "0x906BF0", VA = "0x906BF0")]
		public LabelAttribute(string label, string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class ToggleButtonAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x90A764", Offset = "0x90A764", VA = "0x90A764")]
		public ToggleButtonAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class LayerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x906C30", Offset = "0x906C30", VA = "0x906C30")]
		public LayerAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200045E")]
	public class VectorExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x79E314", Offset = "0x79E314", VA = "0x79E314")]
		public VectorExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class AnimationCurveExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x8F9988", Offset = "0x8F9988", VA = "0x8F9988")]
		public AnimationCurveExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class MinAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x906D08", Offset = "0x906D08", VA = "0x906D08")]
		public MinAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x906D58", Offset = "0x906D58", VA = "0x906D58")]
		public MinAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000461")]
	public class PositiveAttribute : MinAttribute
	{
		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x9082B0", Offset = "0x9082B0", VA = "0x9082B0")]
		public PositiveAttribute()
		{
		}
	}
	[Token(Token = "0x2000462")]
	public class MaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxValue;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x906C70", Offset = "0x906C70", VA = "0x906C70")]
		public MaxAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x906CC0", Offset = "0x906CC0", VA = "0x906CC0")]
		public MaxAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class RangeExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxValue;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Slider;

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x9093F0", Offset = "0x9093F0", VA = "0x9093F0")]
		public RangeExAttribute(float minValue, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x909450", Offset = "0x909450", VA = "0x909450")]
		public RangeExAttribute(string minFieldOrProperty, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x9094B0", Offset = "0x9094B0", VA = "0x9094B0")]
		public RangeExAttribute(float minValue, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x909510", Offset = "0x909510", VA = "0x909510")]
		public RangeExAttribute(string minFieldOrProperty, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000464")]
	public class MinMaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string MaxValueField;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Min;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MinBoundFieldOrPropertyName;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Max;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string MaxBoundFieldOrPropertyName;

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x906DA0", Offset = "0x906DA0", VA = "0x906DA0")]
		public MinMaxAttribute(string maxValueField, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class EnumFlagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x901CE4", Offset = "0x901CE4", VA = "0x901CE4")]
		public EnumFlagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000466")]
	public class ObjectSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x906F30", Offset = "0x906F30", VA = "0x906F30")]
		public ObjectSelectorAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000467")]
	public class PathSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x2000468")]
		public enum DialogMode
		{
			[Token(Token = "0x4001273")]
			OpenFile,
			[Token(Token = "0x4001274")]
			OpenFolder,
			[Token(Token = "0x4001275")]
			CreateFile
		}

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DialogMode Mode;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Title;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Directory;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Extension;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string DefaultName;

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x906F70", Offset = "0x906F70", VA = "0x906F70")]
		public PathSelectorAttribute(DialogMode mode = DialogMode.OpenFile)
		{
		}
	}
	[Token(Token = "0x2000469")]
	public class EnumSelectionGridAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x901D24", Offset = "0x901D24", VA = "0x901D24")]
		public EnumSelectionGridAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200046A")]
	public class DTRegionAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RegionIsOptional;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string RegionOptionsPropertyName;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool UseSlider;

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x8FE60C", Offset = "0x8FE60C", VA = "0x8FE60C")]
		public DTRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200046B")]
	public class FloatRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x9063DC", Offset = "0x9063DC", VA = "0x9063DC")]
		public FloatRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200046C")]
	public class IntRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x906B68", Offset = "0x906B68", VA = "0x906B68")]
		public IntRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public struct RegionOptions<T>
	{
		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelFrom;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelTo;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OptionalTooltip;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampFrom;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampTo;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMin;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMax;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMin;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMax;

		[Token(Token = "0x170003DF")]
		public static RegionOptions<T> Default
		{
			[Token(Token = "0x6001E79")]
			get
			{
				return default(RegionOptions<T>);
			}
		}

		[Token(Token = "0x6001E7A")]
		public static RegionOptions<T> MinMax(T min, T max)
		{
			return default(RegionOptions<T>);
		}
	}
	[Token(Token = "0x200046E")]
	public enum DTValueClamping
	{
		[Token(Token = "0x4001283")]
		None,
		[Token(Token = "0x4001284")]
		Min,
		[Token(Token = "0x4001285")]
		Max,
		[Token(Token = "0x4001286")]
		Range
	}
	[Token(Token = "0x200046F")]
	public class ThreadPoolWorker : IDisposable
	{
		[Token(Token = "0x2000470")]
		private class QueuedCallback
		{
			[Token(Token = "0x4001289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaitCallback Callback;

			[Token(Token = "0x400128A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object State;

			[Token(Token = "0x6001E87")]
			[Address(RVA = "0x909C0C", Offset = "0x909C0C", VA = "0x909C0C")]
			public QueuedCallback()
			{
			}
		}

		[Token(Token = "0x20005AD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DD48", Offset = "0x57DD48")]
		private sealed class <QueueWorkItem>c__AnonStorey0
		{
			[Token(Token = "0x4001902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Action act;

			[Token(Token = "0x6002472")]
			[Address(RVA = "0x909C14", Offset = "0x909C14", VA = "0x909C14")]
			public <QueueWorkItem>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6002473")]
			[Address(RVA = "0x909FE4", Offset = "0x909FE4", VA = "0x909FE4")]
			internal void <>m__0(object x)
			{
			}
		}

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _remainingWorkItems;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManualResetEvent _done;

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x909870", Offset = "0x909870", VA = "0x909870")]
		public ThreadPoolWorker()
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x9098E4", Offset = "0x9098E4", VA = "0x9098E4")]
		public void QueueWorkItem(WaitCallback callback)
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x9099F0", Offset = "0x9099F0", VA = "0x9099F0")]
		public void QueueWorkItem(Action act)
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x9098EC", Offset = "0x9098EC", VA = "0x9098EC")]
		public void QueueWorkItem(WaitCallback callback, object state)
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x9099F8", Offset = "0x9099F8", VA = "0x9099F8")]
		public void QueueWorkItem(Action act, object state)
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x909C1C", Offset = "0x909C1C", VA = "0x909C1C")]
		public bool WaitAll()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x909D14", Offset = "0x909D14", VA = "0x909D14")]
		public bool WaitAll(TimeSpan timeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x909C28", Offset = "0x909C28", VA = "0x909C28")]
		public bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x909E04", Offset = "0x909E04", VA = "0x909E04")]
		private void HandleWorkItem(object state)
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x909D60", Offset = "0x909D60", VA = "0x909D60")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x909B5C", Offset = "0x909B5C", VA = "0x909B5C")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x909F30", Offset = "0x909F30", VA = "0x909F30", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class ComponentPool : MonoBehaviour, IPool
	{
		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Identifier;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PoolManager mManager;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Component> mObjects;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mLastTime;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mDeltaTime;

		[Token(Token = "0x170003E0")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6001E89")]
			[Address(RVA = "0x8F9B74", Offset = "0x8F9B74", VA = "0x8F9B74", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E8A")]
			[Address(RVA = "0x8F9B7C", Offset = "0x8F9B7C", VA = "0x8F9B7C")]
			set
			{
			}
		}

		[Token(Token = "0x170003E1")]
		public PoolManager Manager
		{
			[Token(Token = "0x6001E8B")]
			[Address(RVA = "0x8F9BEC", Offset = "0x8F9BEC", VA = "0x8F9BEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E2")]
		public string Identifier
		{
			[Token(Token = "0x6001E8C")]
			[Address(RVA = "0x8F9C8C", Offset = "0x8F9C8C", VA = "0x8F9C8C", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E8D")]
			[Address(RVA = "0x8F9C94", Offset = "0x8F9C94", VA = "0x8F9C94", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170003E3")]
		public Type Type
		{
			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0x8F9C98", Offset = "0x8F9C98", VA = "0x8F9C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E4")]
		public int Count
		{
			[Token(Token = "0x6001E8F")]
			[Address(RVA = "0x8F9D38", Offset = "0x8F9D38", VA = "0x8F9D38", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x8F9B04", Offset = "0x8F9B04", VA = "0x8F9B04")]
		public ComponentPool()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x8F9D94", Offset = "0x8F9D94", VA = "0x8F9D94")]
		public void Initialize(Type type, PoolSettings settings)
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x8F9FF0", Offset = "0x8F9FF0", VA = "0x8F9FF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x8FA030", Offset = "0x8FA030", VA = "0x8FA030")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x8FA0BC", Offset = "0x8FA0BC", VA = "0x8FA0BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x8FA0C0", Offset = "0x8FA0C0", VA = "0x8FA0C0", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x8F9E80", Offset = "0x8F9E80", VA = "0x8F9E80", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0x8FA690", Offset = "0x8FA690", VA = "0x8FA690")]
		public void OnSceneLoaded(Scene scn, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0x8FA79C", Offset = "0x8FA79C", VA = "0x8FA79C", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x8FA870", Offset = "0x8FA870", VA = "0x8FA870")]
		public void Push(Component item)
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x8FAA94", Offset = "0x8FAA94", VA = "0x8FAA94")]
		public Component Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001E9A")]
		public T Pop<T>(Transform parent) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x8FA560", Offset = "0x8FA560", VA = "0x8FA560")]
		private Component create()
		{
			return null;
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x8FA494", Offset = "0x8FA494", VA = "0x8FA494")]
		private void destroy(Component item)
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x8FAD60", Offset = "0x8FAD60", VA = "0x8FAD60")]
		private void setParent(Component item, Transform parent)
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x8FACE8", Offset = "0x8FACE8", VA = "0x8FACE8")]
		private void sendAfterPop(Component item)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x8FAA14", Offset = "0x8FAA14", VA = "0x8FAA14")]
		private void sendBeforePush(Component item)
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x8FA394", Offset = "0x8FA394", VA = "0x8FA394")]
		private void log(string msg)
		{
		}
	}
	[Token(Token = "0x2000472")]
	public class DTSingleton<T> : MonoBehaviour where T : MonoBehaviour, IDTSingleton
	{
		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool applicationIsQuitting;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDuplicateInstance;

		[Token(Token = "0x170003E5")]
		public static bool HasInstance
		{
			[Token(Token = "0x6001EA2")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003E6")]
		public static T Instance
		{
			[Token(Token = "0x6001EA3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EA1")]
		public DTSingleton()
		{
		}

		[Token(Token = "0x6001EA4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6001EA5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001EA6")]
		protected virtual void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x6001EA7")]
		private void DestroySelf()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public interface IDTSingleton
	{
		[Token(Token = "0x6001EA9")]
		void MergeDoubleLoaded(IDTSingleton newInstance);
	}
	[Token(Token = "0x2000474")]
	public class DTVersionedMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Version;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string mNewVersion;

		[Token(Token = "0x170003E7")]
		public string Version
		{
			[Token(Token = "0x6001EAB")]
			[Address(RVA = "0x9015F4", Offset = "0x9015F4", VA = "0x9015F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0x9015EC", Offset = "0x9015EC", VA = "0x9015EC")]
		public DTVersionedMonoBehaviour()
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0x9015FC", Offset = "0x9015FC", VA = "0x9015FC")]
		protected void CheckForVersionUpgrade()
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0x901600", Offset = "0x901600", VA = "0x901600", Slot = "4")]
		protected virtual bool UpgradeVersion(string oldVersion, string newVersion)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000475")]
	[ExecuteInEditMode]
	public class DuplicateEditorMesh : MonoBehaviour
	{
		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter mFilter;

		[Token(Token = "0x170003E8")]
		public MeshFilter Filter
		{
			[Token(Token = "0x6001EAF")]
			[Address(RVA = "0x901978", Offset = "0x901978", VA = "0x901978")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0x901970", Offset = "0x901970", VA = "0x901970")]
		public DuplicateEditorMesh()
		{
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x901A18", Offset = "0x901A18", VA = "0x901A18", Slot = "4")]
		protected virtual void Awake()
		{
		}
	}
	[Token(Token = "0x2000476")]
	public class InspectorNote : MonoBehaviour
	{
		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x57DE10", Offset = "0x57DE10")]
		[SerializeField]
		private string m_Note;

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x906618", Offset = "0x906618", VA = "0x906618")]
		public InspectorNote()
		{
		}
	}
	[Token(Token = "0x2000477")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class PoolManager : MonoBehaviour
	{
		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x57DE88", Offset = "0x57DE88")]
		[SerializeField]
		private bool m_AutoCreatePools;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0x57DEE0", Offset = "0x57DEE0")]
		[SerializeField]
		private PoolSettings m_DefaultSettings;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DF24", Offset = "0x57DF24")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57DF24", Offset = "0x57DF24")]
		private bool <IsInitialized>k__BackingField;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, IPool> Pools;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<Type, IPool> TypePools;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IPool[] mPools;

		[Token(Token = "0x170003E9")]
		public bool AutoCreatePools
		{
			[Token(Token = "0x6001EB3")]
			[Address(RVA = "0x90712C", Offset = "0x90712C", VA = "0x90712C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001EB4")]
			[Address(RVA = "0x907134", Offset = "0x907134", VA = "0x907134")]
			set
			{
			}
		}

		[Token(Token = "0x170003EA")]
		public PoolSettings DefaultSettings
		{
			[Token(Token = "0x6001EB5")]
			[Address(RVA = "0x907154", Offset = "0x907154", VA = "0x907154")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EB6")]
			[Address(RVA = "0x90715C", Offset = "0x90715C", VA = "0x90715C")]
			set
			{
			}
		}

		[Token(Token = "0x170003EB")]
		public bool IsInitialized
		{
			[Token(Token = "0x6001EB7")]
			[Address(RVA = "0x907194", Offset = "0x907194", VA = "0x907194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DF60", Offset = "0x57DF60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001EB8")]
			[Address(RVA = "0x90719C", Offset = "0x90719C", VA = "0x90719C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57DF70", Offset = "0x57DF70")]
			private set
			{
			}
		}

		[Token(Token = "0x170003EC")]
		public int Count
		{
			[Token(Token = "0x6001EB9")]
			[Address(RVA = "0x9071A8", Offset = "0x9071A8", VA = "0x9071A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x907014", Offset = "0x907014", VA = "0x907014")]
		public PoolManager()
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x907230", Offset = "0x907230", VA = "0x907230")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x907238", Offset = "0x907238", VA = "0x907238")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x907420", Offset = "0x907420", VA = "0x907420")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x907680", Offset = "0x907680", VA = "0x907680")]
		public string GetUniqueIdentifier(string ident)
		{
			return null;
		}

		[Token(Token = "0x6001EBE")]
		public Pool<T> GetTypePool<T>()
		{
			return null;
		}

		[Token(Token = "0x6001EBF")]
		public ComponentPool GetComponentPool<T>() where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x90777C", Offset = "0x90777C", VA = "0x90777C")]
		public PrefabPool GetPrefabPool(string identifier, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6001EC1")]
		public Pool<T> CreateTypePool<T>([Optional] PoolSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6001EC2")]
		public ComponentPool CreateComponentPool<T>([Optional] PoolSettings settings) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x9078B4", Offset = "0x9078B4", VA = "0x9078B4")]
		public PrefabPool CreatePrefabPool(string name, [Optional] PoolSettings settings, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x907C4C", Offset = "0x907C4C", VA = "0x907C4C")]
		public List<IPool> FindPools(string identifierStartsWith)
		{
			return null;
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x907DFC", Offset = "0x907DFC", VA = "0x907DFC")]
		public void DeletePools(string startsWith)
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x907EB0", Offset = "0x907EB0", VA = "0x907EB0")]
		public void DeletePool(IPool pool)
		{
		}

		[Token(Token = "0x6001EC7")]
		public void DeletePool<T>()
		{
		}
	}
	[Token(Token = "0x2000478")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57DFA0", Offset = "0x57DFA0")]
	public class PrefabPool : MonoBehaviour, IPool
	{
		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x57E004", Offset = "0x57E004")]
		[SerializeField]
		private string m_Identifier;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> m_Prefabs;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PoolManager mManager;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GameObject> mObjects;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mLastTime;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double mDeltaTime;

		[Token(Token = "0x170003ED")]
		public string Identifier
		{
			[Token(Token = "0x6001EC9")]
			[Address(RVA = "0x9083C8", Offset = "0x9083C8", VA = "0x9083C8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ECA")]
			[Address(RVA = "0x9083D0", Offset = "0x9083D0", VA = "0x9083D0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170003EE")]
		public List<GameObject> Prefabs
		{
			[Token(Token = "0x6001ECB")]
			[Address(RVA = "0x90854C", Offset = "0x90854C", VA = "0x90854C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ECC")]
			[Address(RVA = "0x908554", Offset = "0x908554", VA = "0x908554")]
			set
			{
			}
		}

		[Token(Token = "0x170003EF")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6001ECD")]
			[Address(RVA = "0x908568", Offset = "0x908568", VA = "0x908568", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ECE")]
			[Address(RVA = "0x908570", Offset = "0x908570", VA = "0x908570")]
			set
			{
			}
		}

		[Token(Token = "0x170003F0")]
		public PoolManager Manager
		{
			[Token(Token = "0x6001ECF")]
			[Address(RVA = "0x9084AC", Offset = "0x9084AC", VA = "0x9084AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F1")]
		public int Count
		{
			[Token(Token = "0x6001ED6")]
			[Address(RVA = "0x908A28", Offset = "0x908A28", VA = "0x908A28", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x908338", Offset = "0x908338", VA = "0x908338")]
		public PrefabPool()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x9085A8", Offset = "0x9085A8", VA = "0x9085A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x9085AC", Offset = "0x9085AC", VA = "0x9085AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x907B34", Offset = "0x907B34", VA = "0x907B34")]
		public void Initialize(string ident, PoolSettings settings, params GameObject[] prefabs)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x90875C", Offset = "0x90875C", VA = "0x90875C", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x9085EC", Offset = "0x9085EC", VA = "0x9085EC", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x908DAC", Offset = "0x908DAC", VA = "0x908DAC", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x908E80", Offset = "0x908E80", VA = "0x908E80")]
		public GameObject Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x909114", Offset = "0x909114", VA = "0x909114", Slot = "11")]
		public virtual void Push(GameObject item)
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x908BF0", Offset = "0x908BF0", VA = "0x908BF0")]
		private GameObject create()
		{
			return null;
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x908B84", Offset = "0x908B84", VA = "0x908B84")]
		private void destroy(GameObject go)
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x908A84", Offset = "0x908A84", VA = "0x908A84")]
		private void log(string msg)
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x909348", Offset = "0x909348", VA = "0x909348")]
		private void setParent(Transform item, Transform parent)
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x9090B4", Offset = "0x9090B4", VA = "0x9090B4")]
		private void sendAfterPop(GameObject item)
		{
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x9092E8", Offset = "0x9092E8", VA = "0x9092E8")]
		private void sendBeforePush(GameObject item)
		{
		}
	}
}
namespace FluffyUnderware.DevTools.Extensions
{
	[Token(Token = "0x2000479")]
	public static class TransformExt
	{
		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x904824", Offset = "0x904824", VA = "0x904824")]
		public static void CopyFrom(this Transform t, Transform other)
		{
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x904918", Offset = "0x904918", VA = "0x904918")]
		public static void SetChildrenHideFlags(this Transform t, HideFlags flags)
		{
		}
	}
	[Token(Token = "0x200047A")]
	public static class ObjectExt
	{
		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x903D4C", Offset = "0x903D4C", VA = "0x903D4C")]
		public static void Destroy(this UnityEngine.Object c)
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x903DB8", Offset = "0x903DB8", VA = "0x903DB8")]
		public static string ToDumpString(this object o)
		{
			return null;
		}
	}
	[Token(Token = "0x200047B")]
	public static class Vector2Ext
	{
		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x905598", Offset = "0x905598", VA = "0x905598")]
		public static Vector2 Snap(this Vector2 v, float snapX, float snapY = -1f)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x90560C", Offset = "0x90560C", VA = "0x90560C")]
		public static float AngleSigned(this Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x9056EC", Offset = "0x9056EC", VA = "0x9056EC")]
		public static Vector2 LeftNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x905724", Offset = "0x905724", VA = "0x905724")]
		public static Vector2 RightNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x90575C", Offset = "0x90575C", VA = "0x90575C")]
		public static Vector2 Rotate(this Vector2 v, float degree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x905828", Offset = "0x905828", VA = "0x905828")]
		public static Vector2 ToVector3(this Vector2 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x200047C")]
	public static class Vector3Ext
	{
		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x9058D0", Offset = "0x9058D0", VA = "0x9058D0")]
		public static float AngleSigned(this Vector3 a, Vector3 b, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x905A38", Offset = "0x905A38", VA = "0x905A38")]
		public static Vector3 RotateAround(this Vector3 point, Vector3 origin, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x905B7C", Offset = "0x905B7C", VA = "0x905B7C")]
		public static Vector2 ToVector2(this Vector3 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x200047D")]
	public static class CameraExt
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Plane[] camPlanes;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3 camPos;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Vector3 camForward;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float fov;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static float screenW;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static float screenH;

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x901D64", Offset = "0x901D64", VA = "0x901D64")]
		public static bool BoundsInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x90208C", Offset = "0x90208C", VA = "0x90208C")]
		public static bool BoundsPartiallyInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200047E")]
	public static class GameObjectExt
	{
		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x9031B4", Offset = "0x9031B4", VA = "0x9031B4")]
		public static GameObject DuplicateGameObject(this GameObject source, Transform newParent, bool keepPrefabReference = false)
		{
			return null;
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x9029B0", Offset = "0x9029B0", VA = "0x9029B0")]
		public static void StripComponents(this GameObject go, params Type[] toKeep)
		{
		}
	}
	[Token(Token = "0x200047F")]
	public static class ComponentExt
	{
		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x9028B4", Offset = "0x9028B4", VA = "0x9028B4")]
		public static void StripComponents(this Component c, params Type[] toKeep)
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0x902C08", Offset = "0x902C08", VA = "0x902C08")]
		public static GameObject AddChildGameObject(this Component c, string name)
		{
			return null;
		}

		[Token(Token = "0x6001EF2")]
		public static T AddChildGameObject<T>(this Component c, string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001EF3")]
		public static T DuplicateGameObject<T>(this Component source, Transform newParent, bool keepPrefabConnection = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0x902CC0", Offset = "0x902CC0", VA = "0x902CC0")]
		public static Component DuplicateGameObject(this Component source, Transform newParent, bool keepPrefabConnection = false)
		{
			return null;
		}
	}
	[Token(Token = "0x2000480")]
	public static class ColorExt
	{
		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x90265C", Offset = "0x90265C", VA = "0x90265C")]
		public static string ToHtml(this Color c)
		{
			return null;
		}
	}
	[Token(Token = "0x2000481")]
	public static class EnumExt
	{
		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x902F40", Offset = "0x902F40", VA = "0x902F40")]
		public static bool HasFlag(this Enum variable, params Enum[] flags)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EF7")]
		public static bool HasFlag<T>(this T value, T flag) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6001EF8")]
		public static T Set<T>(this Enum value, T append)
		{
			return (T)null;
		}

		[Token(Token = "0x6001EF9")]
		public static T Set<T>(this Enum value, T append, bool OnOff)
		{
			return (T)null;
		}

		[Token(Token = "0x6001EFA")]
		public static T Toggle<T>(this Enum value, T toggleValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6001EFB")]
		public static T SetAll<T>(this Enum value)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000482")]
	public static class RectExt
	{
		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x903E2C", Offset = "0x903E2C", VA = "0x903E2C")]
		public static Rect Set(this Rect rect, Vector2 pos, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x903E84", Offset = "0x903E84", VA = "0x903E84")]
		public static Rect SetBetween(this Rect rect, Vector2 pos, Vector2 pos2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x903EDC", Offset = "0x903EDC", VA = "0x903EDC")]
		public static Rect SetPosition(this Rect rect, Vector2 pos)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x903F44", Offset = "0x903F44", VA = "0x903F44")]
		public static Rect SetPosition(this Rect rect, float x, float y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x903FAC", Offset = "0x903FAC", VA = "0x903FAC")]
		public static Vector2 GetSize(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x90400C", Offset = "0x90400C", VA = "0x90400C")]
		public static Rect SetSize(this Rect rect, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x904074", Offset = "0x904074", VA = "0x904074")]
		public static Rect ScaleBy(this Rect rect, int pixel)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x90407C", Offset = "0x90407C", VA = "0x90407C")]
		public static Rect ScaleBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x904150", Offset = "0x904150", VA = "0x904150")]
		public static Rect ShiftBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x9041DC", Offset = "0x9041DC", VA = "0x9041DC")]
		public static Rect Include(this Rect rect, Rect other)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x2000483")]
	public static class StringExt
	{
		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x90435C", Offset = "0x90435C", VA = "0x90435C")]
		public static Color ColorFromHtml(this string hexString)
		{
			return default(Color);
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x9046F0", Offset = "0x9046F0", VA = "0x9046F0")]
		public static string TrimStart(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x90477C", Offset = "0x90477C", VA = "0x90477C")]
		public static string TrimEnd(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}
	}
	[Token(Token = "0x2000484")]
	public static class IEnumerableExt
	{
		[Token(Token = "0x6001F09")]
		public static void ForEach<T>(this IEnumerable<T> ie, Action<T> action)
		{
		}
	}
	[Token(Token = "0x2000485")]
	public static class ArrayExt
	{
		[Token(Token = "0x6001F0A")]
		public static T[] SubArray<T>(this T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x6001F0B")]
		public static T[] RemoveAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6001F0C")]
		public static T[] InsertAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6001F0D")]
		public static T[] Swap<T>(this T[] source, int index, int with)
		{
			return null;
		}

		[Token(Token = "0x6001F0E")]
		public static T[] Add<T>(this T[] source, T item)
		{
			return null;
		}

		[Token(Token = "0x6001F0F")]
		public static T[] AddRange<T>(this T[] source, T[] items)
		{
			return null;
		}

		[Token(Token = "0x6001F10")]
		public static T[] RemoveDuplicates<T>(this T[] source)
		{
			return null;
		}

		[Token(Token = "0x6001F11")]
		public static int IndexOf<T>(this T[] source, T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001F12")]
		public static T[] Remove<T>(this T[] source, T item)
		{
			return null;
		}
	}
	[Token(Token = "0x2000486")]
	public static class MeshFilterExt
	{
		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x9032D0", Offset = "0x9032D0", VA = "0x9032D0")]
		public static Mesh PrepareNewShared(this MeshFilter m, string name = "Mesh")
		{
			return null;
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x9034C4", Offset = "0x9034C4", VA = "0x9034C4")]
		public static void CalculateTangents(this MeshFilter m)
		{
		}
	}
	[Token(Token = "0x2000487")]
	public static class TypeExt
	{
		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x904A08", Offset = "0x904A08", VA = "0x904A08")]
		public static Type[] GetAllTypes(this Type typeFromAssembly)
		{
			return null;
		}

		[Token(Token = "0x6001F16")]
		public static Dictionary<U, Type> GetAllTypesWithAttribute<U>(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6001F17")]
		public static List<FieldInfo> GetFieldsWithAttribute<T>(this Type type, bool includeInherited = false, bool includePrivate = false) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001F18")]
		public static T GetCustomAttribute<T>(this Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x8F9918", Offset = "0x8F9918", VA = "0x8F9918")]
		public static MethodInfo MethodByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x8FB9F0", Offset = "0x8FB9F0", VA = "0x8FB9F0")]
		public static FieldInfo FieldByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x8FBA68", Offset = "0x8FBA68", VA = "0x8FBA68")]
		public static PropertyInfo PropertyByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x8FD704", Offset = "0x8FD704", VA = "0x8FD704")]
		public static FieldInfo[] GetAllFields(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x8FE3F4", Offset = "0x8FE3F4", VA = "0x8FE3F4")]
		public static PropertyInfo[] GetAllProperties(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x904ED8", Offset = "0x904ED8", VA = "0x904ED8")]
		public static bool IsFrameworkType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x904FFC", Offset = "0x904FFC", VA = "0x904FFC")]
		public static bool IsArrayOrList(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x8FE5B0", Offset = "0x8FE5B0", VA = "0x8FE5B0")]
		public static Type GetEnumerableType(this Type t)
		{
			return null;
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x9050E8", Offset = "0x9050E8", VA = "0x9050E8")]
		private static Type FindIEnumerable(Type seqType)
		{
			return null;
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x904A54", Offset = "0x904A54", VA = "0x904A54")]
		private static MethodInfo GetMethodIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x904BDC", Offset = "0x904BDC", VA = "0x904BDC")]
		private static FieldInfo GetFieldIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x904D50", Offset = "0x904D50", VA = "0x904D50")]
		private static PropertyInfo GetPropertyIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x9054F8", Offset = "0x9054F8", VA = "0x9054F8")]
		public static bool Matches(this Type type, params Type[] types)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000488")]
	public static class FieldInfoExt
	{
		[Token(Token = "0x6001F26")]
		public static T GetCustomAttribute<T>(this FieldInfo field) where T : Attribute
		{
			return null;
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x2000489")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57E694", Offset = "0x57E694")]
	public class CanvasPerformerRenderer : MonoBehaviour
	{
		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RenderingStyle Style;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Performer _performer;

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0x6A6BD8", Offset = "0x6A6BD8", VA = "0x6A6BD8")]
		public CanvasPerformerRenderer()
		{
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x6A6BE0", Offset = "0x6A6BE0", VA = "0x6A6BE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x6A6C80", Offset = "0x6A6C80", VA = "0x6A6C80")]
		public void Display(SpokenWord spokenWord)
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class CanvasSubtitleController : MonoBehaviour
	{
		[Token(Token = "0x200048B")]
		public delegate void DisplayContent(SpokenWord content, RenderingStyle style);

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SubtitleRenderer[] GlobalSubtitleRenderers;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool subtitleRenderingEnabled;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool subtitlesEnabled;

		[Token(Token = "0x14000008")]
		public static event DisplayContent OnDisplayContent
		{
			[Token(Token = "0x6001F2B")]
			[Address(RVA = "0x6A6D18", Offset = "0x6A6D18", VA = "0x6A6D18")]
			add
			{
			}
			[Token(Token = "0x6001F2C")]
			[Address(RVA = "0x6A6E1C", Offset = "0x6A6E1C", VA = "0x6A6E1C")]
			remove
			{
			}
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x6A6D08", Offset = "0x6A6D08", VA = "0x6A6D08")]
		public CanvasSubtitleController()
		{
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x6A6F20", Offset = "0x6A6F20", VA = "0x6A6F20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x6A72BC", Offset = "0x6A72BC", VA = "0x6A72BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x6A75EC", Offset = "0x6A75EC", VA = "0x6A75EC")]
		public void SetSubtitleRendering(bool status)
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x6A75F8", Offset = "0x6A75F8", VA = "0x6A75F8")]
		public void SetSubtitleStatus(bool status)
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x6A7604", Offset = "0x6A7604", VA = "0x6A7604")]
		public void OnClearSubtitleRendering()
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x6A7758", Offset = "0x6A7758", VA = "0x6A7758")]
		public bool CanDisplaySubtitles()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x6A7774", Offset = "0x6A7774", VA = "0x6A7774")]
		private void OnPlaySpokenWord(SpokenWord newWord, Performer performer, RenderingStyle style, AudioSource audio)
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x6A7854", Offset = "0x6A7854", VA = "0x6A7854")]
		private SubtitleRenderer GetGlobalSubtitleRenderer(Performer requestingPerformer)
		{
			return null;
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x6A6C88", Offset = "0x6A6C88", VA = "0x6A6C88")]
		public static void Display(SpokenWord content, RenderingStyle style)
		{
		}
	}
	[Token(Token = "0x200048C")]
	public class DebugRenderer : PerformerRenderer
	{
		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _lastValue;

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x6A7FEC", Offset = "0x6A7FEC", VA = "0x6A7FEC")]
		public DebugRenderer()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x6A7FFC", Offset = "0x6A7FFC", VA = "0x6A7FFC", Slot = "7")]
		public override void Update()
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x6A8000", Offset = "0x6A8000", VA = "0x6A8000", Slot = "8")]
		public override void Display(SpokenWord spokenWord)
		{
		}
	}
}
namespace Crows.Performer
{
	[Token(Token = "0x200048D")]
	public enum FaceFXPhonemes
	{
		[Token(Token = "0x40012B4")]
		SIL,
		[Token(Token = "0x40012B5")]
		O,
		[Token(Token = "0x40012B6")]
		C,
		[Token(Token = "0x40012B7")]
		P,
		[Token(Token = "0x40012B8")]
		T,
		[Token(Token = "0x40012B9")]
		B,
		[Token(Token = "0x40012BA")]
		K,
		[Token(Token = "0x40012BB")]
		G,
		[Token(Token = "0x40012BC")]
		H,
		[Token(Token = "0x40012BD")]
		I,
		[Token(Token = "0x40012BE")]
		J,
		[Token(Token = "0x40012BF")]
		F,
		[Token(Token = "0x40012C0")]
		E,
		[Token(Token = "0x40012C1")]
		D,
		[Token(Token = "0x40012C2")]
		W,
		[Token(Token = "0x40012C3")]
		S,
		[Token(Token = "0x40012C4")]
		R,
		[Token(Token = "0x40012C5")]
		L,
		[Token(Token = "0x40012C6")]
		M,
		[Token(Token = "0x40012C7")]
		N,
		[Token(Token = "0x40012C8")]
		U,
		[Token(Token = "0x40012C9")]
		V,
		[Token(Token = "0x40012CA")]
		Y,
		[Token(Token = "0x40012CB")]
		X,
		[Token(Token = "0x40012CC")]
		Z,
		[Token(Token = "0x40012CD")]
		IH,
		[Token(Token = "0x40012CE")]
		AO,
		[Token(Token = "0x40012CF")]
		AE,
		[Token(Token = "0x40012D0")]
		CX,
		[Token(Token = "0x40012D1")]
		JH,
		[Token(Token = "0x40012D2")]
		CH,
		[Token(Token = "0x40012D3")]
		IY,
		[Token(Token = "0x40012D4")]
		AA,
		[Token(Token = "0x40012D5")]
		EH,
		[Token(Token = "0x40012D6")]
		AH,
		[Token(Token = "0x40012D7")]
		DH,
		[Token(Token = "0x40012D8")]
		RU,
		[Token(Token = "0x40012D9")]
		RA,
		[Token(Token = "0x40012DA")]
		PH,
		[Token(Token = "0x40012DB")]
		SH,
		[Token(Token = "0x40012DC")]
		TH,
		[Token(Token = "0x40012DD")]
		ZH,
		[Token(Token = "0x40012DE")]
		UH,
		[Token(Token = "0x40012DF")]
		UW,
		[Token(Token = "0x40012E0")]
		ON,
		[Token(Token = "0x40012E1")]
		EN,
		[Token(Token = "0x40012E2")]
		XR,
		[Token(Token = "0x40012E3")]
		NG,
		[Token(Token = "0x40012E4")]
		HH,
		[Token(Token = "0x40012E5")]
		AY,
		[Token(Token = "0x40012E6")]
		UY,
		[Token(Token = "0x40012E7")]
		OE,
		[Token(Token = "0x40012E8")]
		EU,
		[Token(Token = "0x40012E9")]
		AAN,
		[Token(Token = "0x40012EA")]
		EXR,
		[Token(Token = "0x40012EB")]
		PEN,
		[Token(Token = "0x40012EC")]
		LAP,
		[Token(Token = "0x40012ED")]
		OEN,
		[Token(Token = "0x40012EE")]
		FLAP,
		[Token(Token = "0x40012EF")]
		AX,
		[Token(Token = "0x40012F0")]
		AW
	}
}
[Token(Token = "0x200048E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x57E734", Offset = "0x57E734")]
[ExecuteInEditMode]
public class MaterialTextureHelper : MonoBehaviour
{
	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material _material;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D MainTexture;

	[Token(Token = "0x6001F3D")]
	[Address(RVA = "0x684FD0", Offset = "0x684FD0", VA = "0x684FD0")]
	public MaterialTextureHelper()
	{
	}

	[Token(Token = "0x6001F3E")]
	[Address(RVA = "0x684FD8", Offset = "0x684FD8", VA = "0x684FD8")]
	private void Update()
	{
	}
}
namespace Crows.Performer
{
	[Serializable]
	[Token(Token = "0x200048F")]
	public class PerformanceMixer : PlayableBehaviour
	{
		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57E7A8", Offset = "0x57E7A8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57E7A8", Offset = "0x57E7A8")]
		private Performer <Performer>k__BackingField;

		[Token(Token = "0x170003F2")]
		public Performer Performer
		{
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0x6A4B94", Offset = "0x6A4B94", VA = "0x6A4B94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57E7E4", Offset = "0x57E7E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F41")]
			[Address(RVA = "0x6A4B9C", Offset = "0x6A4B9C", VA = "0x6A4B9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57E7F4", Offset = "0x57E7F4")]
			set
			{
			}
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0x6A4B8C", Offset = "0x6A4B8C", VA = "0x6A4B8C")]
		public PerformanceMixer()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public class Performer : MonoBehaviour
	{
		[Token(Token = "0x2000491")]
		public delegate void UpdateCurrent(SpokenWord spokenWord);

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<SpokenWord, Performer, RenderingStyle, AudioSource> OnPlaySpokenWord;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<SpokenWord> OnStartSpokenWord;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnEndSpokenWord;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SpokenWord _spokenWord;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x57E860", Offset = "0x57E860")]
		[SerializeField]
		private RenderingStyle _subtitleStyle;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool AutoPlay;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool looping;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float audioSourcePitch;

		[Token(Token = "0x14000009")]
		public event UpdateCurrent OnSpokenWordUpdate
		{
			[Token(Token = "0x6001F43")]
			[Address(RVA = "0x6A4BB4", Offset = "0x6A4BB4", VA = "0x6A4BB4")]
			add
			{
			}
			[Token(Token = "0x6001F44")]
			[Address(RVA = "0x6A4C9C", Offset = "0x6A4C9C", VA = "0x6A4C9C")]
			remove
			{
			}
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0x6A4BA4", Offset = "0x6A4BA4", VA = "0x6A4BA4")]
		public Performer()
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0x6A4D84", Offset = "0x6A4D84", VA = "0x6A4D84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0x6A4E1C", Offset = "0x6A4E1C", VA = "0x6A4E1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x6A4E30", Offset = "0x6A4E30", VA = "0x6A4E30")]
		public void Play(SpokenWord spokenWord)
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0x6A50AC", Offset = "0x6A50AC", VA = "0x6A50AC")]
		public void PlayLooping(SpokenWord spokenWord)
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0x6A5170", Offset = "0x6A5170", VA = "0x6A5170")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x6A4EF4", Offset = "0x6A4EF4", VA = "0x6A4EF4")]
		private void Play(SpokenWord spokenWord, bool _looping)
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0x6A52B8", Offset = "0x6A52B8", VA = "0x6A52B8")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0x6A52BC", Offset = "0x6A52BC", VA = "0x6A52BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x6A5A78", Offset = "0x6A5A78", VA = "0x6A5A78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x6A5A7C", Offset = "0x6A5A7C", VA = "0x6A5A7C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x6A5A80", Offset = "0x6A5A80", VA = "0x6A5A80")]
		public void SetupAnimator()
		{
		}
	}
	[Token(Token = "0x2000492")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57E8AC", Offset = "0x57E8AC")]
	public class PerformerComponent : MonoBehaviour
	{
		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected PhonemeMap phonemeMap;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Performer performer;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected SpokenWord currentSpokenWord;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Phoneme currentPhoneme;

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x6A5AC8", Offset = "0x6A5AC8", VA = "0x6A5AC8")]
		public PerformerComponent()
		{
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0x6A5AD0", Offset = "0x6A5AD0", VA = "0x6A5AD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x6A5CA8", Offset = "0x6A5CA8", VA = "0x6A5CA8")]
		private void OnStartSpokenWord(SpokenWord spokenWord)
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x6A5CB0", Offset = "0x6A5CB0", VA = "0x6A5CB0")]
		private void OnEndSpokenWord()
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x6A5CB8", Offset = "0x6A5CB8", VA = "0x6A5CB8")]
		private void OnDestroy()
		{
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x2000493")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57E920", Offset = "0x57E920")]
	public abstract class PerformerRenderer : MonoBehaviour, IRenderPerformances
	{
		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool Initialised;

		[Token(Token = "0x170003F3")]
		public bool IsInitialised
		{
			[Token(Token = "0x6001F5A")]
			[Address(RVA = "0x6A81A8", Offset = "0x6A81A8", VA = "0x6A81A8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x6A7FF4", Offset = "0x6A7FF4", VA = "0x6A7FF4")]
		protected PerformerRenderer()
		{
		}

		[Token(Token = "0x6001F5B")]
		public abstract void Update();

		[Token(Token = "0x6001F5C")]
		public abstract void Display(SpokenWord spokenWord);
	}
}
namespace Crows.Performer
{
	[Token(Token = "0x2000494")]
	public class PerformerTextureChange : PerformerComponent
	{
		[Serializable]
		[Token(Token = "0x2000495")]
		public class PhonemeDictionary : SerializableDictionaryBase<string, Texture>
		{
			[Token(Token = "0x6001F5F")]
			[Address(RVA = "0x6A61E4", Offset = "0x6A61E4", VA = "0x6A61E4")]
			public PhonemeDictionary()
			{
			}
		}

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public PhonemeDictionary PhonemeTextures;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Material targetMaterial;

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x6A5E78", Offset = "0x6A5E78", VA = "0x6A5E78")]
		public PerformerTextureChange()
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x6A5E80", Offset = "0x6A5E80", VA = "0x6A5E80")]
		private void Update()
		{
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x2000496")]
	public class PerPerformerData : Attribute
	{
		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x6A81B0", Offset = "0x6A81B0", VA = "0x6A81B0")]
		public PerPerformerData()
		{
		}
	}
}
namespace Crows.Performer
{
	[Serializable]
	[Token(Token = "0x2000497")]
	public class Phoneme : IStartEnd
	{
		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceFXPhonemes PhonemeValue;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float _start;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _end;

		[Token(Token = "0x170003F4")]
		public float Start
		{
			[Token(Token = "0x6001F65")]
			[Address(RVA = "0x6A642C", Offset = "0x6A642C", VA = "0x6A642C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003F5")]
		public float End
		{
			[Token(Token = "0x6001F66")]
			[Address(RVA = "0x6A6434", Offset = "0x6A6434", VA = "0x6A6434", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x6A6234", Offset = "0x6A6234", VA = "0x6A6234")]
		public Phoneme()
		{
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x6A623C", Offset = "0x6A623C", VA = "0x6A623C")]
		public Phoneme(FaceFXPhonemes phoneme, float start, float end)
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x6A627C", Offset = "0x6A627C", VA = "0x6A627C")]
		public Phoneme(XmlNode node)
		{
		}

		[Token(Token = "0x6001F64")]
		private static TEnum ToEnum<TEnum>(string strEnumValue, TEnum defaultValue)
		{
			return (TEnum)null;
		}
	}
	[Token(Token = "0x2000498")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x57E9C4", Offset = "0x57E9C4")]
	public class PhonemeMap : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000499")]
		public class AnimatorParameter
		{
			[Token(Token = "0x400130A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FaceFXPhonemes[] PhonemeValues;

			[Token(Token = "0x400130B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string AnimationParamaterTarget;

			[Token(Token = "0x400130C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float Amount;

			[Token(Token = "0x6001F6A")]
			[Address(RVA = "0x6A6B54", Offset = "0x6A6B54", VA = "0x6A6B54")]
			public AnimatorParameter(float amount, string paramaterTarget)
			{
			}

			[Token(Token = "0x6001F6B")]
			[Address(RVA = "0x6A6B90", Offset = "0x6A6B90", VA = "0x6A6B90")]
			public AnimatorParameter(float amount, string parameterTarget, params FaceFXPhonemes[] phonemes)
			{
			}
		}

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int _fallbackAnimatorParameterIndex;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimatorParameter[] AnimationParameters;

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x6A643C", Offset = "0x6A643C", VA = "0x6A643C")]
		public PhonemeMap()
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x6A6064", Offset = "0x6A6064", VA = "0x6A6064")]
		public AnimatorParameter GetTarget(FaceFXPhonemes phoneme)
		{
			return null;
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x6A6444", Offset = "0x6A6444", VA = "0x6A6444")]
		public void SetupDefaults()
		{
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x200049A")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x57E9F4", Offset = "0x57E9F4")]
	public class RenderingStyle : ScriptableObject
	{
		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_FontAsset Font;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int FontSize;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color FontColor;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 SubtitlePadding;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float TransitionTime;

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x6A81B8", Offset = "0x6A81B8", VA = "0x6A81B8")]
		public RenderingStyle()
		{
		}
	}
	[Token(Token = "0x200049B")]
	public class ScreenSpaceCanvasController : MonoBehaviour
	{
		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Canvas _canvas;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CanvasScaler _canvasScaler;

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x6A8230", Offset = "0x6A8230", VA = "0x6A8230")]
		public ScreenSpaceCanvasController()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x6A8238", Offset = "0x6A8238", VA = "0x6A8238")]
		public static ScreenSpaceCanvasController Create()
		{
			return null;
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x6A841C", Offset = "0x6A841C", VA = "0x6A841C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x6A84C0", Offset = "0x6A84C0", VA = "0x6A84C0")]
		public void SetAnchoredPosition(Vector3 anchoredPosition)
		{
		}
	}
}
namespace Crows.Performer
{
	[Serializable]
	[Token(Token = "0x200049C")]
	public class SpokenWord : ScriptableObject
	{
		[Token(Token = "0x200049D")]
		public delegate void SubtitleUpdate(string value);

		[Token(Token = "0x200049E")]
		public delegate void SubtitleFinish();

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip Clip;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Word[] Words;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Phoneme[] Phonemes;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double Duration;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SubtitleText[] Languages;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _wordIndex;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _phonemeIndex;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _subtitleSegmentIndex;

		[NonSerialized]
		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x170003F6")]
		public Word CurrentWord
		{
			[Token(Token = "0x6001F72")]
			[Address(RVA = "0x6A9364", Offset = "0x6A9364", VA = "0x6A9364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F7")]
		public Phoneme CurrentPhoneme
		{
			[Token(Token = "0x6001F73")]
			[Address(RVA = "0x6A601C", Offset = "0x6A601C", VA = "0x6A601C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F8")]
		public string CurrentSubtitleSegment
		{
			[Token(Token = "0x6001F74")]
			[Address(RVA = "0x6A80A4", Offset = "0x6A80A4", VA = "0x6A80A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003F9")]
		public bool IsSubtitleUpdateEventRegistered
		{
			[Token(Token = "0x6001F79")]
			[Address(RVA = "0x6A9650", Offset = "0x6A9650", VA = "0x6A9650")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400000A")]
		public event SubtitleUpdate SubtitleUpdateEvent
		{
			[Token(Token = "0x6001F75")]
			[Address(RVA = "0x6A8BF4", Offset = "0x6A8BF4", VA = "0x6A8BF4")]
			add
			{
			}
			[Token(Token = "0x6001F76")]
			[Address(RVA = "0x6A9480", Offset = "0x6A9480", VA = "0x6A9480")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event SubtitleFinish OnSpokenWordFinish
		{
			[Token(Token = "0x6001F77")]
			[Address(RVA = "0x6A8AFC", Offset = "0x6A8AFC", VA = "0x6A8AFC")]
			add
			{
			}
			[Token(Token = "0x6001F78")]
			[Address(RVA = "0x6A9568", Offset = "0x6A9568", VA = "0x6A9568")]
			remove
			{
			}
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x6A935C", Offset = "0x6A935C", VA = "0x6A935C")]
		public SpokenWord()
		{
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x6A9660", Offset = "0x6A9660", VA = "0x6A9660")]
		public int Scrub(int startIndex, IStartEnd[] array, double time)
		{
			return default(int);
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x6A9C80", Offset = "0x6A9C80", VA = "0x6A9C80")]
		public void GetCurrent(ref int wordIndex, ref int phonemeIndex, ref int subtitleSegment, double time)
		{
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x6A56D0", Offset = "0x6A56D0", VA = "0x6A56D0")]
		public void UpdateTime(float time)
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0x6A52AC", Offset = "0x6A52AC", VA = "0x6A52AC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0x6A5264", Offset = "0x6A5264", VA = "0x6A5264")]
		public void Finish()
		{
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x200049F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x57EADC", Offset = "0x57EADC")]
	public class SubtitleRenderer : MonoBehaviour
	{
		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnSubtitlesUpdated;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _head;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI _text;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action SubtitleStateChange;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CanvasSubtitleController _assignedController;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpokenWord _assignedSpokenWord;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Performer _assignedPerformer;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioSource _assignedAudioSource;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderingStyle _style;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform _rectTransform;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 _originAnchoredPosition;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _transitionElapsed;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _previousYOffset;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _currentYOffset;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string _previousText;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EB60", Offset = "0x57EB60")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57EB60", Offset = "0x57EB60")]
		private Vector2 <PreferredSize>k__BackingField;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EB9C", Offset = "0x57EB9C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x57EB9C", Offset = "0x57EB9C")]
		private bool <IsActive>k__BackingField;

		[Token(Token = "0x170003FA")]
		public float YOffset
		{
			[Token(Token = "0x6001F88")]
			[Address(RVA = "0x6A8638", Offset = "0x6A8638", VA = "0x6A8638")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F89")]
			[Address(RVA = "0x6A8640", Offset = "0x6A8640", VA = "0x6A8640")]
			set
			{
			}
		}

		[Token(Token = "0x170003FB")]
		public Vector2 PreferredSize
		{
			[Token(Token = "0x6001F8A")]
			[Address(RVA = "0x6A8650", Offset = "0x6A8650", VA = "0x6A8650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EBD8", Offset = "0x57EBD8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001F8B")]
			[Address(RVA = "0x6A8658", Offset = "0x6A8658", VA = "0x6A8658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EBE8", Offset = "0x57EBE8")]
			private set
			{
			}
		}

		[Token(Token = "0x170003FC")]
		public bool IsActive
		{
			[Token(Token = "0x6001F8C")]
			[Address(RVA = "0x6A7BC8", Offset = "0x6A7BC8", VA = "0x6A7BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EBF8", Offset = "0x57EBF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F8D")]
			[Address(RVA = "0x6A8660", Offset = "0x6A8660", VA = "0x6A8660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EC08", Offset = "0x57EC08")]
			private set
			{
			}
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x6A8630", Offset = "0x6A8630", VA = "0x6A8630")]
		public SubtitleRenderer()
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x6A866C", Offset = "0x6A866C", VA = "0x6A866C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x6A8770", Offset = "0x6A8770", VA = "0x6A8770")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x6A88E0", Offset = "0x6A88E0", VA = "0x6A88E0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x6A79B8", Offset = "0x6A79B8", VA = "0x6A79B8")]
		public void AssignSpokenWord(SpokenWord newSpokenWord, Performer performer, RenderingStyle style, AudioSource source)
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x6A72B4", Offset = "0x6A72B4", VA = "0x6A72B4")]
		public void AssignController(CanvasSubtitleController controller)
		{
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x6A7AFC", Offset = "0x6A7AFC", VA = "0x6A7AFC")]
		public bool IsAssignedPerformer(Performer performerToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x6A7698", Offset = "0x6A7698", VA = "0x6A7698")]
		public void SetBusy(bool value)
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x6A8D9C", Offset = "0x6A8D9C", VA = "0x6A8D9C")]
		private void ClearRenderedText()
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0x6A9070", Offset = "0x6A9070", VA = "0x6A9070")]
		public void OnSpokenWordFinish()
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0x6A8CDC", Offset = "0x6A8CDC", VA = "0x6A8CDC")]
		public SubtitleRenderer SetStyle(RenderingStyle style)
		{
			return null;
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0x6A9078", Offset = "0x6A9078", VA = "0x6A9078")]
		private void UpdateText(string value)
		{
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0x6A8F70", Offset = "0x6A8F70", VA = "0x6A8F70")]
		private void CheckForTextUpdate()
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0x6A8E30", Offset = "0x6A8E30", VA = "0x6A8E30")]
		private void CalculatePerferredSize()
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x6A9358", Offset = "0x6A9358", VA = "0x6A9358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EC18", Offset = "0x57EC18")]
		private static void <OnSubtitlesUpdated>m__0()
		{
		}
	}
}
namespace Crows.Performer
{
	[Token(Token = "0x20004A0")]
	public class SubtitleText : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20004A1")]
		private class AssetMetaData
		{
			[Token(Token = "0x4001336")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string TextAssetPath;

			[Token(Token = "0x4001337")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int TextLength;

			[Token(Token = "0x4001338")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private TextAsset _textAssetCached;

			[Token(Token = "0x170003FD")]
			public TextAsset TextAsset
			{
				[Token(Token = "0x6001FA1")]
				[Address(RVA = "0x6AA5F0", Offset = "0x6AA5F0", VA = "0x6AA5F0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F9F")]
			[Address(RVA = "0x6AA5E0", Offset = "0x6AA5E0", VA = "0x6AA5E0")]
			public AssetMetaData()
			{
			}

			[Token(Token = "0x6001FA0")]
			[Address(RVA = "0x6AA5E8", Offset = "0x6AA5E8", VA = "0x6AA5E8")]
			public AssetMetaData(TextAsset asset)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20004A2")]
		public class Subtitle : IStartEnd
		{
			[Token(Token = "0x4001339")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string Value;

			[Token(Token = "0x400133A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool InferredTiming;

			[Token(Token = "0x400133B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private float _start;

			[Token(Token = "0x400133C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private float _end;

			[Token(Token = "0x400133D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Regex _faceFxArrowTags;

			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static Regex _timingTags;

			[Token(Token = "0x170003FE")]
			public float Start
			{
				[Token(Token = "0x6001FA4")]
				[Address(RVA = "0x6AA318", Offset = "0x6AA318", VA = "0x6AA318", Slot = "4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003FF")]
			public float End
			{
				[Token(Token = "0x6001FA5")]
				[Address(RVA = "0x6AA320", Offset = "0x6AA320", VA = "0x6AA320", Slot = "5")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001FA2")]
			[Address(RVA = "0x6AA5F8", Offset = "0x6AA5F8", VA = "0x6AA5F8")]
			public Subtitle(float start, float end, string value, bool inferredTiming)
			{
			}

			[Token(Token = "0x6001FA3")]
			[Address(RVA = "0x6AA658", Offset = "0x6AA658", VA = "0x6AA658")]
			public Subtitle(float start, float end, string value)
			{
			}

			[Token(Token = "0x6001FA6")]
			[Address(RVA = "0x6AA6A4", Offset = "0x6AA6A4", VA = "0x6AA6A4")]
			private string Parse(string input)
			{
				return null;
			}
		}

		[Token(Token = "0x4001330")]
		public const string RegexForLineBreaks = "(?![;\\n ])[\\W\\w]+?(?=; \\n|;\\n|;$|$)";

		[Token(Token = "0x4001331")]
		public const string RegexForWords = "(?<=\\s|^|\\b)(?:['’%$#&\\/]\\b|[A-Za-z]|\\([A-Za-z]+\\))+(?=\\s|$|\\b)";

		[Token(Token = "0x4001332")]
		public const string RegexForTags = "(?<=\\[)(.*?)(?=\\])";

		[Token(Token = "0x4001333")]
		public const string RegexForOnlyLettersAndSpaces = "[^a-zA-Z ]+";

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Subtitle[] Subtitles;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Language;

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0x6AA5D8", Offset = "0x6AA5D8", VA = "0x6AA5D8")]
		public SubtitleText()
		{
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x6A93AC", Offset = "0x6A93AC", VA = "0x6A93AC")]
		public string TextForTimingIndex(int subtitleSegmentIndex)
		{
			return null;
		}
	}
	[Token(Token = "0x20004A3")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x57EC48", Offset = "0x57EC48")]
	public class SupportedSubtitleLanguages : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20004A4")]
		public class Language
		{
			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SystemLanguage SystemRepresentation;

			[Token(Token = "0x4001345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string CountryCode;

			[Token(Token = "0x4001346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string LocalizationCode;

			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sprite Icon;

			[Token(Token = "0x6001FAF")]
			[Address(RVA = "0x6AB1BC", Offset = "0x6AB1BC", VA = "0x6AB1BC")]
			public Language()
			{
			}
		}

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int CurrentSubtitleLanguageIndex;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool SubtitlesEnabled;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Language[] Languages;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<Language> OnNewLanguageSelected;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<bool> OnToggleSubtitles;

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x6AAB10", Offset = "0x6AAB10", VA = "0x6AAB10")]
		public SupportedSubtitleLanguages()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x6AAB18", Offset = "0x6AAB18", VA = "0x6AAB18")]
		public void SetSubtitleIndex(int index)
		{
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x6AAC5C", Offset = "0x6AAC5C", VA = "0x6AAC5C")]
		public int GetLanugageIndex(SystemLanguage language)
		{
			return default(int);
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x6AACF8", Offset = "0x6AACF8", VA = "0x6AACF8")]
		private Language GetLanguageObject(SystemLanguage language, out int index)
		{
			return null;
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x6AADA8", Offset = "0x6AADA8", VA = "0x6AADA8")]
		public bool ToggleSubtitles()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x6AAE80", Offset = "0x6AAE80", VA = "0x6AAE80")]
		public void SelectNextSubtitleIndex()
		{
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x6AAFBC", Offset = "0x6AAFBC", VA = "0x6AAFBC")]
		public void SelectPreviousSubtitleIndex()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004A5")]
	public class Word : IStartEnd
	{
		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Value;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _start;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _end;

		[Token(Token = "0x17000400")]
		public float Start
		{
			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0x6AB35C", Offset = "0x6AB35C", VA = "0x6AB35C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000401")]
		public float End
		{
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0x6AB364", Offset = "0x6AB364", VA = "0x6AB364", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x6AB1C4", Offset = "0x6AB1C4", VA = "0x6AB1C4")]
		public Word()
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x6AB1CC", Offset = "0x6AB1CC", VA = "0x6AB1CC")]
		public Word(XmlNode node)
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x6AB31C", Offset = "0x6AB31C", VA = "0x6AB31C")]
		public Word(string value, float start, float end)
		{
		}
	}
}
namespace Crows.Performer.Rendering
{
	[Token(Token = "0x20004A6")]
	public interface IRenderPerformances
	{
		[Token(Token = "0x17000402")]
		bool IsInitialised
		{
			[Token(Token = "0x6001FB5")]
			get;
		}

		[Token(Token = "0x6001FB6")]
		void Display(SpokenWord spokenWord);

		[Token(Token = "0x6001FB7")]
		void Update();
	}
}
namespace Crows.Performer
{
	[Token(Token = "0x20004A7")]
	public interface IStartEnd
	{
		[Token(Token = "0x17000403")]
		float Start
		{
			[Token(Token = "0x6001FB8")]
			get;
		}

		[Token(Token = "0x17000404")]
		float End
		{
			[Token(Token = "0x6001FB9")]
			get;
		}
	}
}
[Token(Token = "0x20004A8")]
public class DisableAfterDelay : MonoBehaviour
{
	[Token(Token = "0x20005B0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EC88", Offset = "0x57EC88")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal DisableAfterDelay $this;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004DE")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002476")]
			[Address(RVA = "0x7930D0", Offset = "0x7930D0", VA = "0x7930D0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002477")]
			[Address(RVA = "0x7930D8", Offset = "0x7930D8", VA = "0x7930D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002474")]
		[Address(RVA = "0x792FC0", Offset = "0x792FC0", VA = "0x792FC0")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0x792FC8", Offset = "0x792FC8", VA = "0x792FC8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0x7930E0", Offset = "0x7930E0", VA = "0x7930E0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0x7930F4", Offset = "0x7930F4", VA = "0x7930F4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400134B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x6001FBA")]
	[Address(RVA = "0x792F44", Offset = "0x792F44", VA = "0x792F44")]
	public DisableAfterDelay()
	{
	}

	[Token(Token = "0x6001FBB")]
	[Address(RVA = "0x792F54", Offset = "0x792F54", VA = "0x792F54")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}
}
[Token(Token = "0x20004A9")]
public class InstructionsManager : MonoBehaviour
{
	[Token(Token = "0x20005B1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57ECF8", Offset = "0x57ECF8")]
	private sealed class <BeginGameCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal InstructionsManager $this;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004E0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600247C")]
			[Address(RVA = "0x6477D4", Offset = "0x6477D4", VA = "0x6477D4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600247D")]
			[Address(RVA = "0x6477DC", Offset = "0x6477DC", VA = "0x6477DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600247A")]
		[Address(RVA = "0x64751C", Offset = "0x64751C", VA = "0x64751C")]
		[DebuggerHidden]
		public <BeginGameCoroutine>c__Iterator0()
		{
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x647524", Offset = "0x647524", VA = "0x647524", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0x6477E4", Offset = "0x6477E4", VA = "0x6477E4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0x6477F8", Offset = "0x6477F8", VA = "0x6477F8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup instructionsCanvasGroup;

	[Token(Token = "0x400134D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeSpeed;

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool hasStarted;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WeaponController[] weaponControls;

	[Token(Token = "0x6001FBC")]
	[Address(RVA = "0x6473DC", Offset = "0x6473DC", VA = "0x6473DC")]
	public InstructionsManager()
	{
	}

	[Token(Token = "0x6001FBD")]
	[Address(RVA = "0x6473EC", Offset = "0x6473EC", VA = "0x6473EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FBE")]
	[Address(RVA = "0x647464", Offset = "0x647464", VA = "0x647464")]
	public void BeginGame()
	{
	}

	[Token(Token = "0x6001FBF")]
	[Address(RVA = "0x6474B0", Offset = "0x6474B0", VA = "0x6474B0")]
	[DebuggerHidden]
	private IEnumerator BeginGameCoroutine()
	{
		return null;
	}
}
[Token(Token = "0x20004AA")]
public class LookAtTarget : MonoBehaviour
{
	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lookAtTarget;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lookAtPosition;

	[Token(Token = "0x6001FC0")]
	[Address(RVA = "0x6845B0", Offset = "0x6845B0", VA = "0x6845B0")]
	public LookAtTarget()
	{
	}

	[Token(Token = "0x6001FC1")]
	[Address(RVA = "0x6845C0", Offset = "0x6845C0", VA = "0x6845C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FC2")]
	[Address(RVA = "0x684688", Offset = "0x684688", VA = "0x684688")]
	public void SetNewTarget(Transform newTarget)
	{
	}

	[Token(Token = "0x6001FC3")]
	[Address(RVA = "0x684690", Offset = "0x684690", VA = "0x684690")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x20004AB")]
public class MainMenuManager : MonoBehaviour
{
	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text ds4StatusText;

	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider ds4Slider;

	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text moveStatusText;

	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Slider moveSlider;

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text aimStatusText;

	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider aimSlider;

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text renderScaleText;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider renderScaleSlider;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text socialScreenText;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider socialScreenSlider;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text minOutputColorText;

	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Slider minOutputColorSlider;

	[Token(Token = "0x6001FC4")]
	[Address(RVA = "0x684824", Offset = "0x684824", VA = "0x684824")]
	public MainMenuManager()
	{
	}

	[Token(Token = "0x6001FC5")]
	[Address(RVA = "0x68482C", Offset = "0x68482C", VA = "0x68482C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FC6")]
	[Address(RVA = "0x684980", Offset = "0x684980", VA = "0x684980")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FC7")]
	[Address(RVA = "0x684984", Offset = "0x684984", VA = "0x684984")]
	private void DualShock4Check()
	{
	}

	[Token(Token = "0x6001FC8")]
	[Address(RVA = "0x684988", Offset = "0x684988", VA = "0x684988")]
	private void MoveCheck()
	{
	}

	[Token(Token = "0x6001FC9")]
	[Address(RVA = "0x684A78", Offset = "0x684A78", VA = "0x684A78")]
	private void AimCheck()
	{
	}

	[Token(Token = "0x6001FCA")]
	[Address(RVA = "0x684A7C", Offset = "0x684A7C", VA = "0x684A7C")]
	public void GoToDualShock4Scene()
	{
	}

	[Token(Token = "0x6001FCB")]
	[Address(RVA = "0x684B0C", Offset = "0x684B0C", VA = "0x684B0C")]
	public void GoToMoveScene()
	{
	}

	[Token(Token = "0x6001FCC")]
	[Address(RVA = "0x684B9C", Offset = "0x684B9C", VA = "0x684B9C")]
	public void GoToAimScene()
	{
	}

	[Token(Token = "0x6001FCD")]
	[Address(RVA = "0x684C2C", Offset = "0x684C2C", VA = "0x684C2C")]
	public void OptionsToggleShowHmdView()
	{
	}

	[Token(Token = "0x6001FCE")]
	[Address(RVA = "0x684D4C", Offset = "0x684D4C", VA = "0x684D4C")]
	public void SwitchRenderScale()
	{
	}

	[Token(Token = "0x6001FCF")]
	[Address(RVA = "0x684EAC", Offset = "0x684EAC", VA = "0x684EAC")]
	private void OptionsToggleMinimumOutputColor()
	{
	}
}
[Token(Token = "0x20004AC")]
public class SceneSwitcher : MonoBehaviour
{
	[Token(Token = "0x20005B2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EDA8", Offset = "0x57EDA8")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SceneSwitcher $this;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004E2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002482")]
			[Address(RVA = "0x11087F4", Offset = "0x11087F4", VA = "0x11087F4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002483")]
			[Address(RVA = "0x11087FC", Offset = "0x11087FC", VA = "0x11087FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0x11082AC", Offset = "0x11082AC", VA = "0x11082AC")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0x11086CC", Offset = "0x11086CC", VA = "0x11086CC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x1108804", Offset = "0x1108804", VA = "0x1108804", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x1108818", Offset = "0x1108818", VA = "0x1108818", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005B3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EE08", Offset = "0x57EE08")]
	private sealed class <FadeDownRoutine>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SceneSwitcher $this;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004E4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002488")]
			[Address(RVA = "0x1108644", Offset = "0x1108644", VA = "0x1108644", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002489")]
			[Address(RVA = "0x110864C", Offset = "0x110864C", VA = "0x110864C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x110840C", Offset = "0x110840C", VA = "0x110840C")]
		[DebuggerHidden]
		public <FadeDownRoutine>c__Iterator1()
		{
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x110853C", Offset = "0x110853C", VA = "0x110853C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0x1108654", Offset = "0x1108654", VA = "0x1108654", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0x1108668", Offset = "0x1108668", VA = "0x1108668", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005B4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EE68", Offset = "0x57EE68")]
	private sealed class <SwitchToSceneRoutine>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int sceneIndex;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SceneSwitcher $this;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x170004E6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600248E")]
			[Address(RVA = "0x1108AE4", Offset = "0x1108AE4", VA = "0x1108AE4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600248F")]
			[Address(RVA = "0x1108AEC", Offset = "0x1108AEC", VA = "0x1108AEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0x11084A0", Offset = "0x11084A0", VA = "0x11084A0")]
		[DebuggerHidden]
		public <SwitchToSceneRoutine>c__Iterator2()
		{
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0x110887C", Offset = "0x110887C", VA = "0x110887C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0x1108AF4", Offset = "0x1108AF4", VA = "0x1108AF4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0x1108B08", Offset = "0x1108B08", VA = "0x1108B08", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005B5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EEC8", Offset = "0x57EEC8")]
	private sealed class <SwitchToSceneRoutine>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string sceneName;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SceneSwitcher $this;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x170004E8")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002494")]
			[Address(RVA = "0x1108CF8", Offset = "0x1108CF8", VA = "0x1108CF8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002495")]
			[Address(RVA = "0x1108D00", Offset = "0x1108D00", VA = "0x1108D00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0x1108534", Offset = "0x1108534", VA = "0x1108534")]
		[DebuggerHidden]
		public <SwitchToSceneRoutine>c__Iterator3()
		{
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0x1108B6C", Offset = "0x1108B6C", VA = "0x1108B6C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x1108D08", Offset = "0x1108D08", VA = "0x1108D08", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x1108D1C", Offset = "0x1108D1C", VA = "0x1108D1C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeSpeed;

	[Token(Token = "0x6001FD0")]
	[Address(RVA = "0x1108230", Offset = "0x1108230", VA = "0x1108230")]
	public SceneSwitcher()
	{
	}

	[Token(Token = "0x6001FD1")]
	[Address(RVA = "0x1108240", Offset = "0x1108240", VA = "0x1108240")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001FD2")]
	[Address(RVA = "0x11082B4", Offset = "0x11082B4", VA = "0x11082B4")]
	public void SwitchToScene(int sceneIndex)
	{
	}

	[Token(Token = "0x6001FD3")]
	[Address(RVA = "0x110833C", Offset = "0x110833C", VA = "0x110833C")]
	public void SwitchToScene(string sceneName)
	{
	}

	[Token(Token = "0x6001FD4")]
	[Address(RVA = "0x11083A0", Offset = "0x11083A0", VA = "0x11083A0")]
	[DebuggerHidden]
	private IEnumerator FadeDownRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001FD5")]
	[Address(RVA = "0x1108414", Offset = "0x1108414", VA = "0x1108414")]
	[DebuggerHidden]
	private IEnumerator SwitchToSceneRoutine(int sceneIndex)
	{
		return null;
	}

	[Token(Token = "0x6001FD6")]
	[Address(RVA = "0x11084A8", Offset = "0x11084A8", VA = "0x11084A8")]
	[DebuggerHidden]
	private IEnumerator SwitchToSceneRoutine(string sceneName)
	{
		return null;
	}
}
[Token(Token = "0x20004AD")]
public class ScoreManager : MonoBehaviour
{
	[Token(Token = "0x20005B6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EF38", Offset = "0x57EF38")]
	private sealed class <EndTimer>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ScoreManager $this;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004EA")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600249A")]
			[Address(RVA = "0x11096EC", Offset = "0x11096EC", VA = "0x11096EC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600249B")]
			[Address(RVA = "0x11096F4", Offset = "0x11096F4", VA = "0x11096F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x11092E8", Offset = "0x11092E8", VA = "0x11092E8")]
		[DebuggerHidden]
		public <EndTimer>c__Iterator0()
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0x1109478", Offset = "0x1109478", VA = "0x1109478", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x11096FC", Offset = "0x11096FC", VA = "0x11096FC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x1109710", Offset = "0x1109710", VA = "0x1109710", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text timerText;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image timerDisplay;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text scoreText;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text accuracyText;

	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text highScoreText;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float totalTime;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int scoreValue;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int theScore;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int highScore;

	[Token(Token = "0x400136A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float accuracy;

	[Token(Token = "0x400136B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int rollingScore;

	[Token(Token = "0x400136C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float currentTime;

	[Token(Token = "0x400136D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool timerIsRunning;

	[Token(Token = "0x400136E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TargetsManager targetsManager;

	[Token(Token = "0x400136F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WeaponController[] weaponControls;

	[Token(Token = "0x6001FD7")]
	[Address(RVA = "0x1108D80", Offset = "0x1108D80", VA = "0x1108D80")]
	public ScoreManager()
	{
	}

	[Token(Token = "0x6001FD8")]
	[Address(RVA = "0x1108D9C", Offset = "0x1108D9C", VA = "0x1108D9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FD9")]
	[Address(RVA = "0x1108F7C", Offset = "0x1108F7C", VA = "0x1108F7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FDA")]
	[Address(RVA = "0x110903C", Offset = "0x110903C", VA = "0x110903C")]
	private void Timer()
	{
	}

	[Token(Token = "0x6001FDB")]
	[Address(RVA = "0x1108FD0", Offset = "0x1108FD0", VA = "0x1108FD0")]
	[DebuggerHidden]
	private IEnumerator EndTimer()
	{
		return null;
	}

	[Token(Token = "0x6001FDC")]
	[Address(RVA = "0x110910C", Offset = "0x110910C", VA = "0x110910C")]
	private void UpdateScoreDisplay()
	{
	}

	[Token(Token = "0x6001FDD")]
	[Address(RVA = "0x11093B8", Offset = "0x11093B8", VA = "0x11093B8")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x6001FDE")]
	[Address(RVA = "0x11092F0", Offset = "0x11092F0", VA = "0x11092F0")]
	private void CalculateAccuracy()
	{
	}

	[Token(Token = "0x6001FDF")]
	[Address(RVA = "0x11093D0", Offset = "0x11093D0", VA = "0x11093D0")]
	public void IncreaseScore()
	{
	}

	[Token(Token = "0x6001FE0")]
	[Address(RVA = "0x11093E0", Offset = "0x11093E0", VA = "0x11093E0")]
	public void Quit()
	{
	}
}
[Token(Token = "0x20004AE")]
public class SetupManager : MonoBehaviour
{
	[Token(Token = "0x4001370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator stateMachine;

	[Token(Token = "0x6001FE2")]
	[Address(RVA = "0x1111928", Offset = "0x1111928", VA = "0x1111928")]
	public SetupManager()
	{
	}

	[Token(Token = "0x6001FE3")]
	[Address(RVA = "0x1111930", Offset = "0x1111930", VA = "0x1111930")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FE4")]
	[Address(RVA = "0x1111A04", Offset = "0x1111A04", VA = "0x1111A04")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FE5")]
	[Address(RVA = "0x1111B54", Offset = "0x1111B54", VA = "0x1111B54")]
	public void FinishedUIInteraction()
	{
	}

	[Token(Token = "0x6001FE6")]
	[Address(RVA = "0x1111BB4", Offset = "0x1111BB4", VA = "0x1111BB4")]
	public void ProgressToMainMenu()
	{
	}
}
[Token(Token = "0x20004AF")]
public class Spinner : MonoBehaviour
{
	[Token(Token = "0x4001371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool local;

	[Token(Token = "0x4001372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool allowManual;

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool allowAutomatic;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool lockZ;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float autoTimer;

	[Token(Token = "0x4001376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 spinDirection;

	[Token(Token = "0x4001377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4001378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float goAutomaticTime;

	[Token(Token = "0x4001379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 autoSpinDirection;

	[Token(Token = "0x6001FE7")]
	[Address(RVA = "0x111AC58", Offset = "0x111AC58", VA = "0x111AC58")]
	public Spinner()
	{
	}

	[Token(Token = "0x6001FE8")]
	[Address(RVA = "0x111ACF4", Offset = "0x111ACF4", VA = "0x111ACF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FE9")]
	[Address(RVA = "0x111AD08", Offset = "0x111AD08", VA = "0x111AD08")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FEA")]
	[Address(RVA = "0x111AEA4", Offset = "0x111AEA4", VA = "0x111AEA4")]
	private void FixedUpdate()
	{
	}
}
[Token(Token = "0x20004B0")]
public class TargetObject : MonoBehaviour
{
	[Token(Token = "0x400137A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject explosionEffect;

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject solidTarget;

	[Token(Token = "0x400137C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject brokenTarget;

	[Token(Token = "0x400137D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioClipSpawned;

	[Token(Token = "0x400137E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip audioClipHit;

	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float destructionForce;

	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float debisDestroyDelay;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioPlayer;

	[Token(Token = "0x6001FEB")]
	[Address(RVA = "0x1121A2C", Offset = "0x1121A2C", VA = "0x1121A2C")]
	public TargetObject()
	{
	}

	[Token(Token = "0x6001FEC")]
	[Address(RVA = "0x1121A40", Offset = "0x1121A40", VA = "0x1121A40")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FED")]
	[Address(RVA = "0x1121B60", Offset = "0x1121B60", VA = "0x1121B60")]
	public void DestroyTarget()
	{
	}
}
[Token(Token = "0x20004B1")]
public class TargetsManager : MonoBehaviour
{
	[Token(Token = "0x20005B7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57EFA8", Offset = "0x57EFA8")]
	private sealed class <SpawnTarget>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TargetsManager $this;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004EC")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024A0")]
			[Address(RVA = "0x11226B4", Offset = "0x11226B4", VA = "0x11226B4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024A1")]
			[Address(RVA = "0x11226BC", Offset = "0x11226BC", VA = "0x11226BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x1122350", Offset = "0x1122350", VA = "0x1122350")]
		[DebuggerHidden]
		public <SpawnTarget>c__Iterator0()
		{
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x11224FC", Offset = "0x11224FC", VA = "0x11224FC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x11226C4", Offset = "0x11226C4", VA = "0x11226C4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x11226D8", Offset = "0x11226D8", VA = "0x11226D8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnRateMin;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float spawnRateMax;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject targetPrefab;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform spawnPoint;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 spawnArea;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int maxSpawnedObjects;

	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool allowSpawning;

	[Token(Token = "0x6001FEE")]
	[Address(RVA = "0x11220CC", Offset = "0x11220CC", VA = "0x11220CC")]
	public TargetsManager()
	{
	}

	[Token(Token = "0x6001FEF")]
	[Address(RVA = "0x112215C", Offset = "0x112215C", VA = "0x112215C")]
	public void BeginSpawning()
	{
	}

	[Token(Token = "0x6001FF0")]
	[Address(RVA = "0x11096E0", Offset = "0x11096E0", VA = "0x11096E0")]
	public void StopSpawning()
	{
	}

	[Token(Token = "0x6001FF1")]
	[Address(RVA = "0x1122078", Offset = "0x1122078", VA = "0x1122078")]
	public void SpawnTargetImmediately()
	{
	}

	[Token(Token = "0x6001FF2")]
	[Address(RVA = "0x1122190", Offset = "0x1122190", VA = "0x1122190")]
	[DebuggerHidden]
	private IEnumerator SpawnTarget()
	{
		return null;
	}

	[Token(Token = "0x6001FF3")]
	[Address(RVA = "0x11221FC", Offset = "0x11221FC", VA = "0x11221FC")]
	private void Spawn()
	{
	}

	[Token(Token = "0x6001FF4")]
	[Address(RVA = "0x11224A0", Offset = "0x11224A0", VA = "0x11224A0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001FF5")]
	[Address(RVA = "0x1122358", Offset = "0x1122358", VA = "0x1122358")]
	private Vector3 RandomSpawnPoint()
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20004B2")]
public class InputVisualiser : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004B3")]
	public class Controller
	{
		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform button_cross;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform button_circle;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform button_square;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform button_triangle;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform button_options;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform button_touchpad;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform dpad_down;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform dpad_right;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform dpad_up;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform dpad_left;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform button_l1;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform button_r1;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform button_r1_2;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform trigger_l2;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform trigger_r2;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform thumbstick_l3;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform thumbstick_r3;

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x6473D4", Offset = "0x6473D4", VA = "0x6473D4")]
		public Controller()
		{
		}
	}

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Controller controller;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float buttonPressDistance;

	[Token(Token = "0x400138B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float triggerPullAngle;

	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float thumbstickAngle;

	[Token(Token = "0x6001FF6")]
	[Address(RVA = "0x646438", Offset = "0x646438", VA = "0x646438")]
	public InputVisualiser()
	{
	}

	[Token(Token = "0x6001FF7")]
	[Address(RVA = "0x646440", Offset = "0x646440", VA = "0x646440")]
	private void Update()
	{
	}
}
[Token(Token = "0x20004B4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x57F008", Offset = "0x57F008")]
public class LaserPointer : MonoBehaviour
{
	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer line;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RaycastHit hit;

	[Token(Token = "0x6001FF9")]
	[Address(RVA = "0x6806CC", Offset = "0x6806CC", VA = "0x6806CC")]
	public LaserPointer()
	{
	}

	[Token(Token = "0x6001FFA")]
	[Address(RVA = "0x6806D4", Offset = "0x6806D4", VA = "0x6806D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FFB")]
	[Address(RVA = "0x68072C", Offset = "0x68072C", VA = "0x68072C")]
	private void Update()
	{
	}
}
[Token(Token = "0x20004B5")]
public class WeaponController : MonoBehaviour
{
	[Token(Token = "0x20005B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F08C", Offset = "0x57F08C")]
	private sealed class <Vibrate>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004EE")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024A6")]
			[Address(RVA = "0x7776DC", Offset = "0x7776DC", VA = "0x7776DC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024A7")]
			[Address(RVA = "0x7776E4", Offset = "0x7776E4", VA = "0x7776E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0x777618", Offset = "0x777618", VA = "0x777618")]
		[DebuggerHidden]
		public <Vibrate>c__Iterator0()
		{
		}

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0x777620", Offset = "0x777620", VA = "0x777620", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x7776EC", Offset = "0x7776EC", VA = "0x7776EC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x777700", Offset = "0x777700", VA = "0x777700", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fireRate;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem shotEmitter;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isMoveController;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isSecondaryMoveController;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource shotSound;

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource missSound;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LaserPointer laserPointer;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RaycastHit hit;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float lastShotTime;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool canShoot;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool hasShootInput;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public int shotsFired;

	[Token(Token = "0x6001FFC")]
	[Address(RVA = "0x7771D0", Offset = "0x7771D0", VA = "0x7771D0")]
	public WeaponController()
	{
	}

	[Token(Token = "0x6001FFD")]
	[Address(RVA = "0x7771E0", Offset = "0x7771E0", VA = "0x7771E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001FFE")]
	[Address(RVA = "0x7772BC", Offset = "0x7772BC", VA = "0x7772BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FFF")]
	[Address(RVA = "0x777328", Offset = "0x777328", VA = "0x777328")]
	private bool CheckForInput()
	{
		return default(bool);
	}

	[Token(Token = "0x6002000")]
	[Address(RVA = "0x777398", Offset = "0x777398", VA = "0x777398")]
	private void Fire()
	{
	}

	[Token(Token = "0x6002001")]
	[Address(RVA = "0x7775BC", Offset = "0x7775BC", VA = "0x7775BC")]
	[DebuggerHidden]
	private IEnumerator Vibrate()
	{
		return null;
	}

	[Token(Token = "0x6002002")]
	[Address(RVA = "0x777268", Offset = "0x777268", VA = "0x777268")]
	public void WeaponCanShoot(bool shootBool)
	{
	}
}
[Token(Token = "0x20004B6")]
public class TrackedPlayStationDevices : MonoBehaviour
{
	[Token(Token = "0x20004B7")]
	public enum TrackedDevicesType
	{
		[Token(Token = "0x40013B3")]
		DualShock4 = 1,
		[Token(Token = "0x40013B4")]
		Aim = 2,
		[Token(Token = "0x40013B5")]
		Move = 4
	}

	[Serializable]
	[Token(Token = "0x20004B8")]
	public class TrackedDevice
	{
		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int handle;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform transform;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer light;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion orientation;

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x759F60", Offset = "0x759F60", VA = "0x759F60")]
		public TrackedDevice()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x75A018", Offset = "0x75A018", VA = "0x75A018")]
		public bool registered()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20005B9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F12C", Offset = "0x57F12C")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TrackedPlayStationDevices $this;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004F0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024AC")]
			[Address(RVA = "0x759ED8", Offset = "0x759ED8", VA = "0x759ED8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024AD")]
			[Address(RVA = "0x759EE0", Offset = "0x759EE0", VA = "0x759EE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x7595C8", Offset = "0x7595C8", VA = "0x7595C8")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x759AE4", Offset = "0x759AE4", VA = "0x759AE4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x759EE8", Offset = "0x759EE8", VA = "0x759EE8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x759EFC", Offset = "0x759EFC", VA = "0x759EFC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005BA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F18C", Offset = "0x57F18C")]
	private sealed class <RegisterDualShock4Controller>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004F2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024B2")]
			[Address(RVA = "0x759974", Offset = "0x759974", VA = "0x759974", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024B3")]
			[Address(RVA = "0x75997C", Offset = "0x75997C", VA = "0x75997C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0x759808", Offset = "0x759808", VA = "0x759808")]
		[DebuggerHidden]
		public <RegisterDualShock4Controller>c__Iterator1()
		{
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0x759914", Offset = "0x759914", VA = "0x759914", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x759984", Offset = "0x759984", VA = "0x759984", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0x759998", Offset = "0x759998", VA = "0x759998", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005BB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F1EC", Offset = "0x57F1EC")]
	private sealed class <RegisterAimController>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004F4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024B8")]
			[Address(RVA = "0x75988C", Offset = "0x75988C", VA = "0x75988C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024B9")]
			[Address(RVA = "0x759894", Offset = "0x759894", VA = "0x759894", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0x759810", Offset = "0x759810", VA = "0x759810")]
		[DebuggerHidden]
		public <RegisterAimController>c__Iterator2()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0x75982C", Offset = "0x75982C", VA = "0x75982C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0x75989C", Offset = "0x75989C", VA = "0x75989C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0x7598B0", Offset = "0x7598B0", VA = "0x7598B0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005BC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F24C", Offset = "0x57F24C")]
	private sealed class <RegisterMoveControllers>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004F6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024BE")]
			[Address(RVA = "0x759A5C", Offset = "0x759A5C", VA = "0x759A5C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024BF")]
			[Address(RVA = "0x759A64", Offset = "0x759A64", VA = "0x759A64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x759818", Offset = "0x759818", VA = "0x759818")]
		[DebuggerHidden]
		public <RegisterMoveControllers>c__Iterator3()
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0x7599FC", Offset = "0x7599FC", VA = "0x7599FC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0x759A6C", Offset = "0x759A6C", VA = "0x759A6C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0x759A80", Offset = "0x759A80", VA = "0x759A80", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedDevicesType trackedDevicesType;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrackedDevice deviceDualShock4;

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TrackedDevice deviceAim;

	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TrackedDevice deviceMovePrimary;

	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TrackedDevice deviceMoveSecondary;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool controllerRegistered;

	[Token(Token = "0x6002003")]
	[Address(RVA = "0x75954C", Offset = "0x75954C", VA = "0x75954C")]
	public TrackedPlayStationDevices()
	{
	}

	[Token(Token = "0x6002004")]
	[Address(RVA = "0x75955C", Offset = "0x75955C", VA = "0x75955C")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6002005")]
	[Address(RVA = "0x7595D0", Offset = "0x7595D0", VA = "0x7595D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6002006")]
	[Address(RVA = "0x7595D4", Offset = "0x7595D4", VA = "0x7595D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002007")]
	[Address(RVA = "0x759648", Offset = "0x759648", VA = "0x759648")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002008")]
	[Address(RVA = "0x75964C", Offset = "0x75964C", VA = "0x75964C")]
	public void ResetDeviceTracking()
	{
	}

	[Token(Token = "0x6002009")]
	[Address(RVA = "0x7596E8", Offset = "0x7596E8", VA = "0x7596E8")]
	private void UpdateDualShock4Transforms()
	{
	}

	[Token(Token = "0x600200A")]
	[Address(RVA = "0x7596EC", Offset = "0x7596EC", VA = "0x7596EC")]
	private void UpdateAimTransforms()
	{
	}

	[Token(Token = "0x600200B")]
	[Address(RVA = "0x7596F0", Offset = "0x7596F0", VA = "0x7596F0")]
	private void UpdateMoveTransforms()
	{
	}

	[Token(Token = "0x600200C")]
	[Address(RVA = "0x759670", Offset = "0x759670", VA = "0x759670")]
	public void RegisterDevices()
	{
	}

	[Token(Token = "0x600200D")]
	[Address(RVA = "0x7596F4", Offset = "0x7596F4", VA = "0x7596F4")]
	[DebuggerHidden]
	private IEnumerator RegisterDualShock4Controller()
	{
		return null;
	}

	[Token(Token = "0x600200E")]
	[Address(RVA = "0x759750", Offset = "0x759750", VA = "0x759750")]
	[DebuggerHidden]
	private IEnumerator RegisterAimController()
	{
		return null;
	}

	[Token(Token = "0x600200F")]
	[Address(RVA = "0x7597AC", Offset = "0x7597AC", VA = "0x7597AC")]
	[DebuggerHidden]
	private IEnumerator RegisterMoveControllers()
	{
		return null;
	}

	[Token(Token = "0x6002010")]
	[Address(RVA = "0x7595D8", Offset = "0x7595D8", VA = "0x7595D8")]
	public void UnregisterDevices()
	{
	}

	[Token(Token = "0x6002011")]
	[Address(RVA = "0x759820", Offset = "0x759820", VA = "0x759820")]
	private void UnregisterDualShock4()
	{
	}

	[Token(Token = "0x6002012")]
	[Address(RVA = "0x759824", Offset = "0x759824", VA = "0x759824")]
	private void UnregisterAimController()
	{
	}

	[Token(Token = "0x6002013")]
	[Address(RVA = "0x759828", Offset = "0x759828", VA = "0x759828")]
	private void UnregisterMoveControllers()
	{
	}
}
[Token(Token = "0x20004B9")]
public class VRDeviceNames
{
	[Token(Token = "0x40013BB")]
	public const string None = "None";

	[Token(Token = "0x40013BC")]
	public const string Unknown = "Unknown";

	[Token(Token = "0x40013BD")]
	public const string Oculus = "Oculus";

	[Token(Token = "0x40013BE")]
	public const string PlayStationVR = "PlayStationVR";

	[Token(Token = "0x6002016")]
	[Address(RVA = "0x775DE4", Offset = "0x775DE4", VA = "0x775DE4")]
	public VRDeviceNames()
	{
	}
}
[Token(Token = "0x20004BA")]
public class VRManager : MonoBehaviour
{
	[Token(Token = "0x20005BD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F2CC", Offset = "0x57F2CC")]
	private sealed class <SetupVR>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal VRManager $this;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x170004F8")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024C4")]
			[Address(RVA = "0x776408", Offset = "0x776408", VA = "0x776408", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024C5")]
			[Address(RVA = "0x776410", Offset = "0x776410", VA = "0x776410", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0x77622C", Offset = "0x77622C", VA = "0x77622C")]
		[DebuggerHidden]
		public <SetupVR>c__Iterator0()
		{
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0x77630C", Offset = "0x77630C", VA = "0x77630C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0x776418", Offset = "0x776418", VA = "0x776418", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0x77642C", Offset = "0x77642C", VA = "0x77642C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20005BE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F32C", Offset = "0x57F32C")]
	private sealed class <ShutdownVR>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004FA")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024CA")]
			[Address(RVA = "0x7765BC", Offset = "0x7765BC", VA = "0x7765BC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004FB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024CB")]
			[Address(RVA = "0x7765C4", Offset = "0x7765C4", VA = "0x7765C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0x7762BC", Offset = "0x7762BC", VA = "0x7762BC")]
		[DebuggerHidden]
		public <ShutdownVR>c__Iterator1()
		{
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0x776490", Offset = "0x776490", VA = "0x776490", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0x7765CC", Offset = "0x7765CC", VA = "0x7765CC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0x7765E0", Offset = "0x7765E0", VA = "0x7765E0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float renderScale;

	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool showHmdViewOnMonitor;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRManager _instance;

	[Token(Token = "0x17000405")]
	public static VRManager instance
	{
		[Token(Token = "0x6002018")]
		[Address(RVA = "0x775F40", Offset = "0x775F40", VA = "0x775F40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002017")]
	[Address(RVA = "0x775F24", Offset = "0x775F24", VA = "0x775F24")]
	public VRManager()
	{
	}

	[Token(Token = "0x6002019")]
	[Address(RVA = "0x776044", Offset = "0x776044", VA = "0x776044")]
	private void Awake()
	{
	}

	[Token(Token = "0x600201A")]
	[Address(RVA = "0x776194", Offset = "0x776194", VA = "0x776194")]
	public void BeginVRSetup()
	{
	}

	[Token(Token = "0x600201B")]
	[Address(RVA = "0x7761C0", Offset = "0x7761C0", VA = "0x7761C0")]
	[DebuggerHidden]
	private IEnumerator SetupVR()
	{
		return null;
	}

	[Token(Token = "0x600201C")]
	[Address(RVA = "0x776234", Offset = "0x776234", VA = "0x776234")]
	public void BeginShutdownVR()
	{
	}

	[Token(Token = "0x600201D")]
	[Address(RVA = "0x776260", Offset = "0x776260", VA = "0x776260")]
	[DebuggerHidden]
	private IEnumerator ShutdownVR()
	{
		return null;
	}

	[Token(Token = "0x600201E")]
	[Address(RVA = "0x7762C4", Offset = "0x7762C4", VA = "0x7762C4")]
	public void SetupHMDDevice()
	{
	}

	[Token(Token = "0x600201F")]
	[Address(RVA = "0x7762C8", Offset = "0x7762C8", VA = "0x7762C8")]
	public void ToggleHMDViewOnMonitor(bool showOnMonitor)
	{
	}

	[Token(Token = "0x6002020")]
	[Address(RVA = "0x7762DC", Offset = "0x7762DC", VA = "0x7762DC")]
	public void ToggleHMDViewOnMonitor()
	{
	}

	[Token(Token = "0x6002021")]
	[Address(RVA = "0x776300", Offset = "0x776300", VA = "0x776300")]
	public void ChangeRenderScale(float scale)
	{
	}
}
[Token(Token = "0x20004BB")]
public class VRPlaySpace : MonoBehaviour
{
	[Token(Token = "0x40013C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform frustumTransform;

	[Token(Token = "0x40013C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] frustumRenderers;

	[Token(Token = "0x40013C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float safeDistance;

	[Token(Token = "0x40013C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fadeSpeed;

	[Token(Token = "0x40013C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color showColor;

	[Token(Token = "0x40013C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color hideColor;

	[Token(Token = "0x40013C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool showFrustum;

	[Token(Token = "0x40013C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 camAcceleration;

	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 hmdPositionRaw;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion hmdRotationUnity;

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion hmdRotationRaw;

	[Token(Token = "0x6002022")]
	[Address(RVA = "0x776644", Offset = "0x776644", VA = "0x776644")]
	public VRPlaySpace()
	{
	}

	[Token(Token = "0x6002023")]
	[Address(RVA = "0x77665C", Offset = "0x77665C", VA = "0x77665C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002024")]
	[Address(RVA = "0x77671C", Offset = "0x77671C", VA = "0x77671C")]
	private void Update()
	{
	}

	[Token(Token = "0x6002025")]
	[Address(RVA = "0x776720", Offset = "0x776720", VA = "0x776720")]
	private void UpdateFrustumTransform()
	{
	}

	[Token(Token = "0x6002026")]
	[Address(RVA = "0x776724", Offset = "0x776724", VA = "0x776724")]
	private void UpdateFrustumDisplay()
	{
	}
}
[Token(Token = "0x20004BC")]
public class VRPostReprojection : MonoBehaviour
{
	[Token(Token = "0x6002027")]
	[Address(RVA = "0x7768D0", Offset = "0x7768D0", VA = "0x7768D0")]
	public VRPostReprojection()
	{
	}
}
[Token(Token = "0x20004BD")]
public class VRUIComplete : MonoBehaviour
{
	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string message;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool disableColliderAfterUse;

	[Token(Token = "0x6002028")]
	[Address(RVA = "0x7768D8", Offset = "0x7768D8", VA = "0x7768D8")]
	public VRUIComplete()
	{
	}

	[Token(Token = "0x6002029")]
	[Address(RVA = "0x776950", Offset = "0x776950", VA = "0x776950")]
	public void Complete()
	{
	}
}
[Token(Token = "0x20004BE")]
public class VRUIController : MonoBehaviour
{
	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask uiLayerMask;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float sliderFillSpeed;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RaycastHit hit;

	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Slider currentSlider;

	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource audioSrc;

	[Token(Token = "0x600202A")]
	[Address(RVA = "0x776A44", Offset = "0x776A44", VA = "0x776A44")]
	public VRUIController()
	{
	}

	[Token(Token = "0x600202B")]
	[Address(RVA = "0x776A54", Offset = "0x776A54", VA = "0x776A54")]
	private void Start()
	{
	}

	[Token(Token = "0x600202C")]
	[Address(RVA = "0x776AAC", Offset = "0x776AAC", VA = "0x776AAC")]
	private void Update()
	{
	}
}
namespace Polybrush
{
	[Token(Token = "0x20004BF")]
	public enum z_BrushMirror
	{
		[Token(Token = "0x40013D6")]
		None,
		[Token(Token = "0x40013D7")]
		X,
		[Token(Token = "0x40013D8")]
		Y,
		[Token(Token = "0x40013D9")]
		Z
	}
	[Token(Token = "0x20004C0")]
	public static class z_BrushMirrorUtility
	{
		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 HorizontalReflection;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly Vector3 VerticalReflection;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Vector3 ForwardReflection;

		[Token(Token = "0x600202D")]
		[Address(RVA = "0x1143EB8", Offset = "0x1143EB8", VA = "0x1143EB8")]
		public static Vector3 ToVector3(this z_BrushMirror mirror)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20004C1")]
	public enum z_ComponentIndex
	{
		[Token(Token = "0x40013DE")]
		R = 0,
		[Token(Token = "0x40013DF")]
		X = 0,
		[Token(Token = "0x40013E0")]
		G = 1,
		[Token(Token = "0x40013E1")]
		Y = 1,
		[Token(Token = "0x40013E2")]
		B = 2,
		[Token(Token = "0x40013E3")]
		Z = 2,
		[Token(Token = "0x40013E4")]
		A = 3,
		[Token(Token = "0x40013E5")]
		W = 3
	}
	[Token(Token = "0x20004C2")]
	public enum z_ComponentIndexType
	{
		[Token(Token = "0x40013E7")]
		Vector,
		[Token(Token = "0x40013E8")]
		Color,
		[Token(Token = "0x40013E9")]
		Index
	}
	[Token(Token = "0x20004C3")]
	public static class z_ComponentIndexUtility
	{
		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GUIContent[] ComponentIndexPopupDescriptions;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int[] ComponentIndexPopupValues;

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x1144BB4", Offset = "0x1144BB4", VA = "0x1144BB4")]
		public static float GetValueAtIndex(this Vector3 value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x1144BF0", Offset = "0x1144BF0", VA = "0x1144BF0")]
		public static float GetValueAtIndex(this Vector4 value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x1144C3C", Offset = "0x1144C3C", VA = "0x1144C3C")]
		public static float GetValueAtIndex(this Color value, z_ComponentIndex index)
		{
			return default(float);
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x1144C88", Offset = "0x1144C88", VA = "0x1144C88")]
		public static uint ToFlag(this z_ComponentIndex e)
		{
			return default(uint);
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x1142E50", Offset = "0x1142E50", VA = "0x1142E50")]
		public static string GetString(this z_ComponentIndex component, z_ComponentIndexType type = z_ComponentIndexType.Vector)
		{
			return null;
		}
	}
	[Token(Token = "0x20004C4")]
	public enum Culling
	{
		[Token(Token = "0x40013ED")]
		Back = 1,
		[Token(Token = "0x40013EE")]
		Front = 2,
		[Token(Token = "0x40013EF")]
		FrontBack = 4
	}
	[Token(Token = "0x20004C5")]
	public enum z_Direction
	{
		[Token(Token = "0x40013F1")]
		BrushNormal,
		[Token(Token = "0x40013F2")]
		VertexNormal,
		[Token(Token = "0x40013F3")]
		Up,
		[Token(Token = "0x40013F4")]
		Right,
		[Token(Token = "0x40013F5")]
		Forward
	}
	[Token(Token = "0x20004C6")]
	public static class z_DirectionUtil
	{
		[Token(Token = "0x6002035")]
		[Address(RVA = "0x1144EFC", Offset = "0x1144EFC", VA = "0x1144EFC")]
		public static Vector3 ToVector3(this z_Direction dir)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20004C7")]
	public enum z_MeshChannel
	{
		[Token(Token = "0x40013F7")]
		Null = -1,
		[Token(Token = "0x40013F8")]
		UV0,
		[Token(Token = "0x40013F9")]
		UV2,
		[Token(Token = "0x40013FA")]
		UV3,
		[Token(Token = "0x40013FB")]
		UV4,
		[Token(Token = "0x40013FC")]
		Color,
		[Token(Token = "0x40013FD")]
		Tangent
	}
	[Token(Token = "0x20004C8")]
	public static class z_MeshChannelUtility
	{
		[Token(Token = "0x6002036")]
		[Address(RVA = "0x1147B40", Offset = "0x1147B40", VA = "0x1147B40")]
		public static z_MeshChannel StringToEnum(string str)
		{
			return default(z_MeshChannel);
		}
	}
	[Token(Token = "0x20004C9")]
	public enum z_MirrorCoordinateSpace
	{
		[Token(Token = "0x40013FF")]
		World,
		[Token(Token = "0x4001400")]
		Camera
	}
	[Token(Token = "0x20004CA")]
	public enum z_ModelSource
	{
		[Token(Token = "0x4001402")]
		Imported,
		[Token(Token = "0x4001403")]
		Asset,
		[Token(Token = "0x4001404")]
		Scene
	}
	[Token(Token = "0x20004CB")]
	public enum z_PaintMode
	{
		[Token(Token = "0x4001406")]
		Brush,
		[Token(Token = "0x4001407")]
		Fill
	}
	[Token(Token = "0x20004CC")]
	public class z_ZoomOverride : MonoBehaviour
	{
		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float[] weights;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected float normalizedStrength;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshFilter _meshFilter;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SkinnedMeshRenderer _skinnedMeshRenderer;

		[Token(Token = "0x17000406")]
		public Mesh mesh
		{
			[Token(Token = "0x600203A")]
			[Address(RVA = "0x1151D38", Offset = "0x1151D38", VA = "0x1151D38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x1151D1C", Offset = "0x1151D1C", VA = "0x1151D1C")]
		public z_ZoomOverride()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x1151D24", Offset = "0x1151D24", VA = "0x1151D24", Slot = "4")]
		public virtual void SetWeights(float[] weights, float normalizedStrength)
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x1151D30", Offset = "0x1151D30", VA = "0x1151D30", Slot = "5")]
		public virtual float[] GetWeights()
		{
			return null;
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x1151FBC", Offset = "0x1151FBC", VA = "0x1151FBC", Slot = "6")]
		public virtual void OnVerticesMoved()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x1151FC0", Offset = "0x1151FC0", VA = "0x1151FC0", Slot = "7")]
		protected virtual void OnEnable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004CD")]
	public class z_AttributeLayoutContainer : ScriptableObject, IEquatable<z_AttributeLayoutContainer>
	{
		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public z_AttributeLayout[] attributes;

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x1143CA8", Offset = "0x1143CA8", VA = "0x1143CA8")]
		public z_AttributeLayoutContainer()
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x1143CB0", Offset = "0x1143CB0", VA = "0x1143CB0")]
		public static z_AttributeLayoutContainer Create(Shader shader, z_AttributeLayout[] attributes)
		{
			return null;
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x1143D38", Offset = "0x1143D38", VA = "0x1143D38", Slot = "4")]
		public bool Equals(z_AttributeLayoutContainer other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20004CE")]
	public class z_AttributeLayout : IEquatable<z_AttributeLayout>
	{
		[Token(Token = "0x400140E")]
		public const int NoMask = -1;

		[Token(Token = "0x400140F")]
		public const int DefaultMask = 0;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] DefaultMaskValues;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly GUIContent[] DefaultMaskDescriptions;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2 NormalizedRange;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public z_MeshChannel channel;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public z_ComponentIndex index;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 range;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string propertyTarget;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int mask;

		[NonSerialized]
		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D previewTexture;

		[Token(Token = "0x17000407")]
		public float min
		{
			[Token(Token = "0x6002043")]
			[Address(RVA = "0x11429F4", Offset = "0x11429F4", VA = "0x11429F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002044")]
			[Address(RVA = "0x11429FC", Offset = "0x11429FC", VA = "0x11429FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000408")]
		public float max
		{
			[Token(Token = "0x6002045")]
			[Address(RVA = "0x1142A04", Offset = "0x1142A04", VA = "0x1142A04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002046")]
			[Address(RVA = "0x1142A0C", Offset = "0x1142A0C", VA = "0x1142A0C")]
			set
			{
			}
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x11428AC", Offset = "0x11428AC", VA = "0x11428AC")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index)
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x1142938", Offset = "0x1142938", VA = "0x1142938")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index, Vector2 range, int mask)
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x11429BC", Offset = "0x11429BC", VA = "0x11429BC")]
		public z_AttributeLayout(z_MeshChannel channel, z_ComponentIndex index, Vector2 range, int mask, string targetProperty, [Optional] Texture2D texture)
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0x1142A14", Offset = "0x1142A14", VA = "0x1142A14", Slot = "4")]
		public bool Equals(z_AttributeLayout other)
		{
			return default(bool);
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x1142B2C", Offset = "0x1142B2C", VA = "0x1142B2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004CF")]
	public struct z_ColorMask
	{
		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool r;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool g;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool b;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool a;

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x1144158", Offset = "0x1144158", VA = "0x1144158")]
		public z_ColorMask(bool r, bool g, bool b, bool a)
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public struct z_CommonEdge : IEquatable<z_CommonEdge>
	{
		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public z_Edge edge;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public z_Edge common;

		[Token(Token = "0x17000409")]
		public int x
		{
			[Token(Token = "0x600204C")]
			[Address(RVA = "0x1144194", Offset = "0x1144194", VA = "0x1144194")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700040A")]
		public int y
		{
			[Token(Token = "0x600204D")]
			[Address(RVA = "0x114419C", Offset = "0x114419C", VA = "0x114419C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700040B")]
		public int cx
		{
			[Token(Token = "0x600204E")]
			[Address(RVA = "0x11441A4", Offset = "0x11441A4", VA = "0x11441A4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700040C")]
		public int cy
		{
			[Token(Token = "0x600204F")]
			[Address(RVA = "0x11441AC", Offset = "0x11441AC", VA = "0x11441AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0x114417C", Offset = "0x114417C", VA = "0x114417C")]
		public z_CommonEdge(int _x, int _y, int _cx, int _cy)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x1144224", Offset = "0x1144224", VA = "0x1144224", Slot = "4")]
		public bool Equals(z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0x1144308", Offset = "0x1144308", VA = "0x1144308", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x1144310", Offset = "0x1144310", VA = "0x1144310")]
		public static bool operator ==(z_CommonEdge a, z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x1144348", Offset = "0x1144348", VA = "0x1144348")]
		public static bool operator !=(z_CommonEdge a, z_CommonEdge b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x1144414", Offset = "0x1144414", VA = "0x1144414", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x114463C", Offset = "0x114463C", VA = "0x114463C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x1144644", Offset = "0x1144644", VA = "0x1144644")]
		public static List<int> ToList(IEnumerable<z_CommonEdge> edges)
		{
			return null;
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x11448FC", Offset = "0x11448FC", VA = "0x11448FC")]
		public static HashSet<int> ToHashSet(IEnumerable<z_CommonEdge> edges)
		{
			return null;
		}
	}
	[Token(Token = "0x20004D1")]
	public struct z_Edge : IEquatable<z_Edge>
	{
		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x6002058")]
		[Address(RVA = "0x114501C", Offset = "0x114501C", VA = "0x114501C")]
		public z_Edge(int _x, int _y)
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x1145024", Offset = "0x1145024", VA = "0x1145024", Slot = "4")]
		public bool Equals(z_Edge p)
		{
			return default(bool);
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x1145108", Offset = "0x1145108", VA = "0x1145108", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0x1145110", Offset = "0x1145110", VA = "0x1145110")]
		public static bool operator ==(z_Edge a, z_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x1145148", Offset = "0x1145148", VA = "0x1145148")]
		public static bool operator !=(z_Edge a, z_Edge b)
		{
			return default(bool);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x114517C", Offset = "0x114517C", VA = "0x114517C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0x114524C", Offset = "0x114524C", VA = "0x114524C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0x1145254", Offset = "0x1145254", VA = "0x1145254")]
		public static List<int> ToList(IEnumerable<z_Edge> edges)
		{
			return null;
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0x114550C", Offset = "0x114550C", VA = "0x114550C")]
		public static HashSet<int> ToHashSet(IEnumerable<z_Edge> edges)
		{
			return null;
		}
	}
	[Token(Token = "0x20004D2")]
	public static class z_GradientSerializer
	{
		[Token(Token = "0x6002061")]
		[Address(RVA = "0x11457C4", Offset = "0x11457C4", VA = "0x11457C4")]
		public static string Serialize(this Gradient gradient)
		{
			return null;
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0x1145AD8", Offset = "0x1145AD8", VA = "0x1145AD8")]
		public static bool Deserialize(string str, out Gradient gradient)
		{
			return default(bool);
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0x1146018", Offset = "0x1146018", VA = "0x1146018")]
		private static bool TryParseColor(string str, out Color value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004D3")]
	public interface z_IValid
	{
		[Token(Token = "0x1700040D")]
		bool valid
		{
			[Token(Token = "0x6002064")]
			get;
		}
	}
	[Token(Token = "0x20004D4")]
	public struct z_RndVec3 : IEquatable<z_RndVec3>
	{
		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001424")]
		private const float resolution = 0.0001f;

		[Token(Token = "0x6002065")]
		[Address(RVA = "0x114BC8C", Offset = "0x114BC8C", VA = "0x114BC8C")]
		public z_RndVec3(Vector3 vector)
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x114BD98", Offset = "0x114BD98", VA = "0x114BD98", Slot = "4")]
		public bool Equals(z_RndVec3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x114BEA0", Offset = "0x114BEA0", VA = "0x114BEA0")]
		public bool Equals(Vector3 p)
		{
			return default(bool);
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0x114BF78", Offset = "0x114BF78", VA = "0x114BF78", Slot = "0")]
		public override bool Equals(object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0x114BFC4", Offset = "0x114BFC4", VA = "0x114BFC4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0x114C0F8", Offset = "0x114C0F8", VA = "0x114C0F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0x114C100", Offset = "0x114C100", VA = "0x114C100")]
		private int round(float v)
		{
			return default(int);
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x114C114", Offset = "0x114C114", VA = "0x114C114")]
		public static implicit operator Vector3(z_RndVec3 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x114BB90", Offset = "0x114BB90", VA = "0x114BB90")]
		public static implicit operator z_RndVec3(Vector3 p)
		{
			return default(z_RndVec3);
		}
	}
	[Token(Token = "0x20004D5")]
	public class z_SplatSet
	{
		[Token(Token = "0x4001425")]
		private const float WEIGHT_EPSILON = 0.0001f;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int weightCount;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<z_MeshChannel, int> channelMap;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector4[][] weights;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public z_AttributeLayout[] attributeLayout;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F44C", Offset = "0x57F44C")]
		private static Converter<Color, Vector4> <>f__am$cache0;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F45C", Offset = "0x57F45C")]
		private static Converter<Vector4, Color> <>f__am$cache1;

		[Token(Token = "0x1700040E")]
		public int attributeCount
		{
			[Token(Token = "0x6002071")]
			[Address(RVA = "0x114C9A0", Offset = "0x114C9A0", VA = "0x114C9A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x114C148", Offset = "0x114C148", VA = "0x114C148")]
		public z_SplatSet(int vertexCount, z_AttributeLayout[] attributes, bool preAlloc = true)
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x114C618", Offset = "0x114C618", VA = "0x114C618")]
		public z_SplatSet(z_SplatSet other)
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x114C9C8", Offset = "0x114C9C8", VA = "0x114C9C8")]
		public z_SplatSet(Mesh mesh, z_AttributeLayout[] attributes)
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x114CEB0", Offset = "0x114CEB0", VA = "0x114CEB0")]
		public z_SplatWeight GetMinWeights()
		{
			return null;
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x114D304", Offset = "0x114D304", VA = "0x114D304")]
		public z_SplatWeight GetMaxWeights()
		{
			return null;
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x114D448", Offset = "0x114D448", VA = "0x114D448")]
		public void LerpWeights(z_SplatSet lhs, z_SplatSet rhs, int mask, float[] alpha)
		{
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x114DC28", Offset = "0x114DC28", VA = "0x114DC28")]
		public void LerpWeights(z_SplatSet lhs, z_SplatWeight rhs, float alpha)
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x114DF10", Offset = "0x114DF10", VA = "0x114DF10")]
		public void CopyTo(z_SplatSet other)
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x114E080", Offset = "0x114E080", VA = "0x114E080")]
		public void Apply(Mesh mesh)
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x114E3BC", Offset = "0x114E3BC", VA = "0x114E3BC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x114E55C", Offset = "0x114E55C", VA = "0x114E55C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F46C", Offset = "0x57F46C")]
		private static Vector4 <z_SplatSet>m__0(Color x)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x114E568", Offset = "0x114E568", VA = "0x114E568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F47C", Offset = "0x57F47C")]
		private static Color <Apply>m__1(Vector4 x)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20004D6")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57F48C", Offset = "0x57F48C")]
	public class z_SplatWeight
	{
		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<z_MeshChannel, int> map;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] values;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F4C4", Offset = "0x57F4C4")]
		private static Func<z_AttributeLayout, z_MeshChannel> <>f__am$cache0;

		[Token(Token = "0x1700040F")]
		public Vector4 Item
		{
			[Token(Token = "0x600207D")]
			[Address(RVA = "0x114D1E4", Offset = "0x114D1E4", VA = "0x114D1E4")]
			get
			{
				return default(Vector4);
			}
			[Token(Token = "0x600207E")]
			[Address(RVA = "0x114D25C", Offset = "0x114D25C", VA = "0x114D25C")]
			set
			{
			}
		}

		[Token(Token = "0x17000410")]
		public float Item
		{
			[Token(Token = "0x600207F")]
			[Address(RVA = "0x114E9D0", Offset = "0x114E9D0", VA = "0x114E9D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002080")]
			[Address(RVA = "0x114EA88", Offset = "0x114EA88", VA = "0x114EA88")]
			set
			{
			}
		}

		[Token(Token = "0x17000411")]
		public float Item
		{
			[Token(Token = "0x6002081")]
			[Address(RVA = "0x114EB4C", Offset = "0x114EB4C", VA = "0x114EB4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002082")]
			[Address(RVA = "0x114EBA0", Offset = "0x114EBA0", VA = "0x114EBA0")]
			set
			{
			}
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x114CFF4", Offset = "0x114CFF4", VA = "0x114CFF4")]
		public z_SplatWeight(Dictionary<z_MeshChannel, int> map)
		{
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x114E574", Offset = "0x114E574", VA = "0x114E574")]
		public z_SplatWeight(z_SplatWeight rhs)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0x114C2C4", Offset = "0x114C2C4", VA = "0x114C2C4")]
		public static Dictionary<z_MeshChannel, int> GetChannelMap(z_AttributeLayout[] attributes)
		{
			return null;
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0x114EC00", Offset = "0x114EC00", VA = "0x114EC00")]
		public List<int> GetAffectedIndicesWithMask(z_AttributeLayout[] attributes, int mask)
		{
			return null;
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0x114ED38", Offset = "0x114ED38", VA = "0x114ED38")]
		public bool MatchesAttributes(z_AttributeLayout[] attributes)
		{
			return default(bool);
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0x114E784", Offset = "0x114E784", VA = "0x114E784")]
		private Vector4 GetVec4(int index)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x114E8B8", Offset = "0x114E8B8", VA = "0x114E8B8")]
		private void SetVec4(int index, Vector4 value)
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x114E9D4", Offset = "0x114E9D4", VA = "0x114E9D4")]
		public float GetAttributeValue(z_AttributeLayout attrib)
		{
			return default(float);
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x114EA8C", Offset = "0x114EA8C", VA = "0x114EA8C")]
		public void SetAttributeValue(z_AttributeLayout attrib, float value)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x114EE08", Offset = "0x114EE08", VA = "0x114EE08")]
		public void CopyTo(z_SplatWeight other)
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x114EEC4", Offset = "0x114EEC4", VA = "0x114EEC4")]
		public void Lerp(z_SplatWeight lhs, z_SplatWeight rhs, float alpha)
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x1150238", Offset = "0x1150238", VA = "0x1150238")]
		public void Lerp(z_SplatWeight lhs, z_SplatWeight rhs, float alpha, List<int> mask)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x1151164", Offset = "0x1151164", VA = "0x1151164", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x11513B8", Offset = "0x11513B8", VA = "0x11513B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F4D4", Offset = "0x57F4D4")]
		private static z_MeshChannel <GetChannelMap>m__0(z_AttributeLayout x)
		{
			return default(z_MeshChannel);
		}
	}
	[Token(Token = "0x20004D7")]
	public static class z_Math
	{
		[Token(Token = "0x600208F")]
		[Address(RVA = "0x1146264", Offset = "0x1146264", VA = "0x1146264")]
		public static bool RayIntersectsTriangle(Ray InRay, Vector3 InTriangleA, Vector3 InTriangleB, Vector3 InTriangleC, out float OutDistance, out Vector3 OutPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x1146684", Offset = "0x1146684", VA = "0x1146684")]
		public static Vector3 Normal(Vector3 p0, Vector3 p1, Vector3 p2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x1146838", Offset = "0x1146838", VA = "0x1146838")]
		public static Vector3 Normal(Vector3[] p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0x1146C78", Offset = "0x1146C78", VA = "0x1146C78")]
		public static void NormalTangentBitangent(Vector3[] vertices, Vector2[] uv, int[] tri, out Vector3 normal, out Vector3 tangent, out Vector3 bitangent)
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0x1147258", Offset = "0x1147258", VA = "0x1147258")]
		public static Vector3 Average(Vector3[] array, IEnumerable<int> indices)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0x11475C8", Offset = "0x11475C8", VA = "0x11475C8")]
		public static Vector3 WeightedAverage(Vector3[] array, IList<int> indices, float[] weightLookup)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0x1147A74", Offset = "0x1147A74", VA = "0x1147A74")]
		public static bool VectorIsUniform(Vector3 vec)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004D8")]
	public static class z_MeshUtility
	{
		[Token(Token = "0x20005C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F5A4", Offset = "0x57F5A4")]
		private sealed class <GetCommonVertices>c__AnonStorey0
		{
			[Token(Token = "0x400193C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3[] v;

			[Token(Token = "0x60024CE")]
			[Address(RVA = "0x1149D14", Offset = "0x1149D14", VA = "0x1149D14")]
			public <GetCommonVertices>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60024CF")]
			[Address(RVA = "0x114BB34", Offset = "0x114BB34", VA = "0x114BB34")]
			internal z_RndVec3 <>m__0(int x)
			{
				return default(z_RndVec3);
			}
		}

		[Token(Token = "0x20005C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F5B4", Offset = "0x57F5B4")]
		private sealed class <GetSmoothSeamLookup>c__AnonStorey1
		{
			[Token(Token = "0x400193D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3[] normals;

			[Token(Token = "0x60024D0")]
			[Address(RVA = "0x114B5D4", Offset = "0x114B5D4", VA = "0x114B5D4")]
			public <GetSmoothSeamLookup>c__AnonStorey1()
			{
			}

			[Token(Token = "0x60024D1")]
			[Address(RVA = "0x114BB94", Offset = "0x114BB94", VA = "0x114BB94")]
			internal IEnumerable<IGrouping<z_RndVec3, int>> <>m__0(List<int> x)
			{
				return null;
			}

			[Token(Token = "0x60024D2")]
			[Address(RVA = "0x114BC30", Offset = "0x114BC30", VA = "0x114BC30")]
			internal z_RndVec3 <>m__1(int i)
			{
				return default(z_RndVec3);
			}
		}

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Color clear;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<Mesh, List<List<int>>> commonVerticesCache;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<Mesh, Dictionary<z_Edge, List<int>>> adjacentTrianglesCache;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<Mesh, List<List<int>>> commonNormalsCache;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F4E4", Offset = "0x57F4E4")]
		private static Func<IGrouping<z_RndVec3, int>, List<int>> <>f__mg$cache0;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F4F4", Offset = "0x57F4F4")]
		private static Func<List<int>, int> <>f__am$cache0;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F504", Offset = "0x57F504")]
		private static Func<int, int> <>f__am$cache1;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F514", Offset = "0x57F514")]
		private static Func<int, int> <>f__am$cache2;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F524", Offset = "0x57F524")]
		private static Func<IGrouping<z_RndVec3, int>, List<int>> <>f__mg$cache1;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F534", Offset = "0x57F534")]
		private static Func<IGrouping<z_RndVec3, int>, bool> <>f__am$cache3;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F544", Offset = "0x57F544")]
		private static Func<int, int> <>f__am$cache4;

		[Token(Token = "0x6002096")]
		[Address(RVA = "0x1147C5C", Offset = "0x1147C5C", VA = "0x1147C5C")]
		public static Mesh DeepCopy(Mesh src)
		{
			return null;
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x1147CE8", Offset = "0x1147CE8", VA = "0x1147CE8")]
		public static void Copy(Mesh dest, Mesh src)
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x1148340", Offset = "0x1148340", VA = "0x1148340")]
		public static Mesh CreateOverlayMesh(Mesh src)
		{
			return null;
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x11488C4", Offset = "0x11488C4", VA = "0x11488C4")]
		public static Mesh CreateVertexBillboardMesh(Mesh src, List<List<int>> common)
		{
			return null;
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x1149358", Offset = "0x1149358", VA = "0x1149358")]
		public static Dictionary<int, Vector3> GetSmoothNormalLookup(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x11497B0", Offset = "0x11497B0", VA = "0x11497B0")]
		public static List<List<int>> GetCommonVertices(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x1149D1C", Offset = "0x1149D1C", VA = "0x1149D1C")]
		public static List<z_CommonEdge> GetEdges(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0x1149DA4", Offset = "0x1149DA4", VA = "0x1149DA4")]
		public static List<z_CommonEdge> GetEdges(Mesh m, Dictionary<int, int> lookup)
		{
			return null;
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x114A178", Offset = "0x114A178", VA = "0x114A178")]
		public static HashSet<z_CommonEdge> GetEdgesDistinct(Mesh mesh, out List<z_CommonEdge> duplicates)
		{
			return null;
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0x114A210", Offset = "0x114A210", VA = "0x114A210")]
		private static HashSet<z_CommonEdge> GetEdgesDistinct(Mesh m, Dictionary<int, int> lookup, out List<z_CommonEdge> duplicates)
		{
			return null;
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0x114A6D0", Offset = "0x114A6D0", VA = "0x114A6D0")]
		public static HashSet<int> GetNonManifoldIndices(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0x114A778", Offset = "0x114A778", VA = "0x114A778")]
		public static Dictionary<int, List<int>> GetAdjacentVertices(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0x114ACE8", Offset = "0x114ACE8", VA = "0x114ACE8")]
		public static Dictionary<z_Edge, List<int>> GetAdjacentTriangles(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0x114B28C", Offset = "0x114B28C", VA = "0x114B28C")]
		public static List<List<int>> GetSmoothSeamLookup(Mesh m)
		{
			return null;
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0x114B5DC", Offset = "0x114B5DC", VA = "0x114B5DC")]
		public static void RecalculateNormals(Mesh m)
		{
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0x114B9A8", Offset = "0x114B9A8", VA = "0x114B9A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F554", Offset = "0x57F554")]
		private static int <GetCommonVertices>m__0(List<int> x)
		{
			return default(int);
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x114BABC", Offset = "0x114BABC", VA = "0x114BABC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F564", Offset = "0x57F564")]
		private static int <GetCommonVertices>m__1(int z)
		{
			return default(int);
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x114BAC4", Offset = "0x114BAC4", VA = "0x114BAC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F574", Offset = "0x57F574")]
		private static int <GetCommonVertices>m__2(int x)
		{
			return default(int);
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x114BACC", Offset = "0x114BACC", VA = "0x114BACC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F584", Offset = "0x57F584")]
		private static bool <GetSmoothSeamLookup>m__3(IGrouping<z_RndVec3, int> n)
		{
			return default(bool);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x114BB2C", Offset = "0x114BB2C", VA = "0x114BB2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F594", Offset = "0x57F594")]
		private static int <GetCommonVertices>m__4(int y)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004D9")]
	public static class z_Util
	{
		[Token(Token = "0x60020AB")]
		public static T[] Fill<T>(T value, int count)
		{
			return null;
		}

		[Token(Token = "0x60020AC")]
		public static T[] Fill<T>(Func<int, T> constructor, int count)
		{
			return null;
		}

		[Token(Token = "0x60020AD")]
		public static Dictionary<K, V> InitDictionary<K, V>(Func<int, K> keyFunc, Func<int, V> valueFunc, int count)
		{
			return null;
		}

		[Token(Token = "0x60020AE")]
		public static string ToString<T>(this IEnumerable<T> enumerable, string delim)
		{
			return null;
		}

		[Token(Token = "0x60020AF")]
		public static string ToString<K, V>(this Dictionary<K, V> dictionary, string delim)
		{
			return null;
		}

		[Token(Token = "0x60020B0")]
		public static void Resize<T>(ref T[] array, int newSize)
		{
		}

		[Token(Token = "0x60020B1")]
		public static Dictionary<K, T> SetValuesAsKey<T, K>(this Dictionary<T, IEnumerable<K>> dic)
		{
			return null;
		}

		[Token(Token = "0x60020B2")]
		public static Dictionary<T, int> GetCommonLookup<T>(this List<List<T>> lists)
		{
			return null;
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x11513E0", Offset = "0x11513E0", VA = "0x11513E0")]
		public static Color32 Lerp(Color32 lhs, Color32 rhs, z_ColorMask mask, float alpha)
		{
			return default(Color32);
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0x11514E8", Offset = "0x11514E8", VA = "0x11514E8")]
		public static Color32 Lerp(Color32 lhs, Color32 rhs, float alpha)
		{
			return default(Color32);
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x115159C", Offset = "0x115159C", VA = "0x115159C")]
		public static AnimationCurve ClampAnimationKeys(AnimationCurve curve, float firstKeyTime, float firstKeyValue, float secondKeyTime, float secondKeyValue)
		{
			return null;
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x1151734", Offset = "0x1151734", VA = "0x1151734")]
		public static Enum Next(this Enum value)
		{
			return null;
		}

		[Token(Token = "0x60020B7")]
		public static bool IsValid<T>(this T target) where T : z_IValid
		{
			return default(bool);
		}

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x11480B8", Offset = "0x11480B8", VA = "0x11480B8")]
		internal static string IncrementPrefix(string prefix, string name)
		{
			return null;
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x11518C0", Offset = "0x11518C0", VA = "0x11518C0")]
		public static Mesh GetMesh(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x1151A94", Offset = "0x1151A94", VA = "0x1151A94")]
		public static void SetMesh(this GameObject gameObject, Mesh mesh)
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x1151C08", Offset = "0x1151C08", VA = "0x1151C08")]
		public static List<Material> GetMaterials(this GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x60020BC")]
		public static Dictionary<T, List<K>> ToDictionary<T, K>(this IEnumerable<IGrouping<T, K>> groups)
		{
			return null;
		}

		[Token(Token = "0x60020BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F674", Offset = "0x57F674")]
		private static string <ToString`1>m__0<T>(T x)
		{
			return null;
		}
	}
}
namespace ProBuilder2.Examples
{
	[Token(Token = "0x20004DA")]
	public class CameraControls : MonoBehaviour
	{
		[Token(Token = "0x400143A")]
		private const string INPUT_MOUSE_SCROLLWHEEL = "Mouse ScrollWheel";

		[Token(Token = "0x400143B")]
		private const string INPUT_MOUSE_X = "Mouse X";

		[Token(Token = "0x400143C")]
		private const string INPUT_MOUSE_Y = "Mouse Y";

		[Token(Token = "0x400143D")]
		private const float MIN_CAM_DISTANCE = 10f;

		[Token(Token = "0x400143E")]
		private const float MAX_CAM_DISTANCE = 40f;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x57F684", Offset = "0x57F684")]
		public float orbitSpeed;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x57F69C", Offset = "0x57F69C")]
		public float zoomSpeed;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float distance;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float idleRotation;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 dir;

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0x11522BC", Offset = "0x11522BC", VA = "0x11522BC")]
		public CameraControls()
		{
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x1152330", Offset = "0x1152330", VA = "0x1152330")]
		private void Start()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x1152404", Offset = "0x1152404", VA = "0x1152404")]
		private void LateUpdate()
		{
		}
	}
}
[Token(Token = "0x20004DB")]
public class HighlightNearestFace : MonoBehaviour
{
	[Token(Token = "0x4001444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float travel;

	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private pb_Object target;

	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private pb_Face nearest;

	[Token(Token = "0x60020C1")]
	[Address(RVA = "0x7A3960", Offset = "0x7A3960", VA = "0x7A3960")]
	public HighlightNearestFace()
	{
	}

	[Token(Token = "0x60020C2")]
	[Address(RVA = "0x7A3978", Offset = "0x7A3978", VA = "0x7A3978")]
	private void Start()
	{
	}

	[Token(Token = "0x60020C3")]
	[Address(RVA = "0x7A3C30", Offset = "0x7A3C30", VA = "0x7A3C30")]
	private void Update()
	{
	}

	[Token(Token = "0x60020C4")]
	[Address(RVA = "0x7A4090", Offset = "0x7A4090", VA = "0x7A4090")]
	private Vector3 FaceCenter(pb_Object pb, pb_Face face)
	{
		return default(Vector3);
	}
}
namespace ProGrids
{
	[Token(Token = "0x20004DC")]
	public static class pg_Constant
	{
		[Token(Token = "0x4001448")]
		public const string ProGridsIsEnabled = "pgProGridsIsEnabled";

		[Token(Token = "0x4001449")]
		public const string ProGridsUpgradeURL = "http://u3d.as/content/six-by-seven-studio/pro-grids/3ov";

		[Token(Token = "0x400144A")]
		public const string SnapValue = "pgSnapValue";

		[Token(Token = "0x400144B")]
		public const string SnapMultiplier = "pgSnapMultiplier";

		[Token(Token = "0x400144C")]
		public const string SnapEnabled = "pgSnapEnabled";

		[Token(Token = "0x400144D")]
		public const string UseAxisConstraints = "pgUseAxisConstraints";

		[Token(Token = "0x400144E")]
		public const string LastOrthoToggledRotation = "pgLastOrthoToggledRotation";

		[Token(Token = "0x400144F")]
		public const string BracketIncreaseValue = "pgBracketIncreaseValue";

		[Token(Token = "0x4001450")]
		public const string GridUnit = "pg_GridUnit";

		[Token(Token = "0x4001451")]
		public const string LockGrid = "pg_LockGrid";

		[Token(Token = "0x4001452")]
		public const string LockedGridPivot = "pg_LockedGridPivot";

		[Token(Token = "0x4001453")]
		public const string PGVersion = "pg_Version";

		[Token(Token = "0x4001454")]
		public const string GridAxis = "pg_GridAxis";

		[Token(Token = "0x4001455")]
		public const string PerspGrid = "pg_PerspGrid";

		[Token(Token = "0x4001456")]
		public const string SnapScale = "pg_SnapOnScale";

		[Token(Token = "0x4001457")]
		public const string PredictiveGrid = "pg_PredictiveGrid";

		[Token(Token = "0x4001458")]
		public const string SnapAsGroup = "pg_SnapAsGroup";

		[Token(Token = "0x4001459")]
		public const float METER = 1f;

		[Token(Token = "0x400145A")]
		public const float CENTIMETER = 0.01f;

		[Token(Token = "0x400145B")]
		public const float MILLIMETER = 0.001f;

		[Token(Token = "0x400145C")]
		public const float INCH = 0.025399987f;

		[Token(Token = "0x400145D")]
		public const float FOOT = 0.3048f;

		[Token(Token = "0x400145E")]
		public const float YARD = 1.09361f;

		[Token(Token = "0x400145F")]
		public const float PARSEC = 5f;
	}
	[Token(Token = "0x20004DD")]
	public enum Axis
	{
		[Token(Token = "0x4001461")]
		None = 0,
		[Token(Token = "0x4001462")]
		X = 1,
		[Token(Token = "0x4001463")]
		Y = 2,
		[Token(Token = "0x4001464")]
		Z = 4,
		[Token(Token = "0x4001465")]
		NegX = 8,
		[Token(Token = "0x4001466")]
		NegY = 22,
		[Token(Token = "0x4001467")]
		NegZ = 50
	}
	[Token(Token = "0x20004DE")]
	public enum SnapUnit
	{
		[Token(Token = "0x4001469")]
		Meter,
		[Token(Token = "0x400146A")]
		Centimeter,
		[Token(Token = "0x400146B")]
		Millimeter,
		[Token(Token = "0x400146C")]
		Inch,
		[Token(Token = "0x400146D")]
		Foot,
		[Token(Token = "0x400146E")]
		Yard,
		[Token(Token = "0x400146F")]
		Parsec
	}
	[Token(Token = "0x20004DF")]
	public static class pg_Enum
	{
		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x115291C", Offset = "0x115291C", VA = "0x115291C")]
		public static Vector3 InverseAxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x1152A7C", Offset = "0x1152A7C", VA = "0x1152A7C")]
		public static Vector3 AxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x1152BDC", Offset = "0x1152BDC", VA = "0x1152BDC")]
		public static float SnapUnitValue(SnapUnit su)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20004E0")]
	public static class pg_Util
	{
		[Token(Token = "0x20005C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F6B8", Offset = "0x57F6B8")]
		private sealed class <ColorWithString>c__AnonStorey0
		{
			[Token(Token = "0x400193E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string valid;

			[Token(Token = "0x60024D3")]
			[Address(RVA = "0x1152E64", Offset = "0x1152E64", VA = "0x1152E64")]
			public <ColorWithString>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60024D4")]
			[Address(RVA = "0x1153D9C", Offset = "0x1153D9C", VA = "0x1153D9C")]
			internal bool <>m__0(char c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001470")]
		private const float EPSILON = 0.0001f;

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x1152BFC", Offset = "0x1152BFC", VA = "0x1152BFC")]
		public static Color ColorWithString(string value)
		{
			return default(Color);
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x1152E6C", Offset = "0x1152E6C", VA = "0x1152E6C")]
		private static Vector3 VectorToMask(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x1152F9C", Offset = "0x1152F9C", VA = "0x1152F9C")]
		private static Axis MaskToAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x1153080", Offset = "0x1153080", VA = "0x1153080")]
		private static Axis BestAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x1153130", Offset = "0x1153130", VA = "0x1153130")]
		public static Axis CalcDragAxis(Vector3 movement, Camera cam)
		{
			return default(Axis);
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x11535CC", Offset = "0x11535CC", VA = "0x11535CC")]
		public static float ValueFromMask(Vector3 val, Vector3 mask)
		{
			return default(float);
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x1153694", Offset = "0x1153694", VA = "0x1153694")]
		public static Vector3 SnapValue(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x1153808", Offset = "0x1153808", VA = "0x1153808")]
		public static Vector3 SnapValue(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x115395C", Offset = "0x115395C", VA = "0x115395C")]
		public static Vector3 SnapToCeil(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x1153B28", Offset = "0x1153B28", VA = "0x1153B28")]
		public static Vector3 SnapToFloor(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x1153C24", Offset = "0x1153C24", VA = "0x1153C24")]
		public static Vector3 SnapToFloor(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x1153718", Offset = "0x1153718", VA = "0x1153718")]
		public static float Snap(float val, float round)
		{
			return default(float);
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x1153BAC", Offset = "0x1153BAC", VA = "0x1153BAC")]
		public static float SnapToFloor(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x1153AB0", Offset = "0x1153AB0", VA = "0x1153AB0")]
		public static float SnapToCeil(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x1153D78", Offset = "0x1153D78", VA = "0x1153D78")]
		public static Vector3 CeilFloor(Vector3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20004E1")]
	public static class PGExtensions
	{
		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x1153E00", Offset = "0x1153E00", VA = "0x1153E00")]
		public static bool Contains(this Transform[] t_arr, Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x1153ED8", Offset = "0x1153ED8", VA = "0x1153ED8")]
		public static float Sum(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x1153F3C", Offset = "0x1153F3C", VA = "0x1153F3C")]
		public static bool InFrustum(this Camera cam, Vector3 point)
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x20004E2")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x57F708", Offset = "0x57F708")]
public class LipSync : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004E3")]
	public class PhonemeDictionary : SerializableDictionaryBase<Phoneme, Texture>
	{
		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x681AAC", Offset = "0x681AAC", VA = "0x681AAC")]
		public PhonemeDictionary()
		{
		}
	}

	[Token(Token = "0x4001471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IncompletePhonemeSetup;

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool UpdateEmissiveTexture;

	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material Material;

	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public PhonemeDictionary PhonemeTextures;

	[Token(Token = "0x4001475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LipSyncData Data;

	[Token(Token = "0x4001476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool Looping;

	[Token(Token = "0x4001477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource _audioSource;

	[Token(Token = "0x4001478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int _markerPosition;

	[Token(Token = "0x4001479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _isFinished;

	[Token(Token = "0x60020DA")]
	[Address(RVA = "0x681AA4", Offset = "0x681AA4", VA = "0x681AA4")]
	public LipSync()
	{
	}
}
[Token(Token = "0x20004E4")]
public class LipSyncData : ScriptableObject
{
	[Token(Token = "0x400147A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip Clip;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhonemeMarker[] PhonemeData;

	[Token(Token = "0x400147C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Version;

	[Token(Token = "0x400147D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Length;

	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Transcript;

	[Token(Token = "0x60020DC")]
	[Address(RVA = "0x681AFC", Offset = "0x681AFC", VA = "0x681AFC")]
	public LipSyncData()
	{
	}
}
[Token(Token = "0x20004E5")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x57F79C", Offset = "0x57F79C")]
public class OrderPreservingDictionary<TKey, TValue> : List<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>
{
	[Token(Token = "0x20005C3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F7D4", Offset = "0x57F7D4")]
	private sealed class <>c__AnonStorey0
	{
		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal TKey key;

		[Token(Token = "0x60024D5")]
		public <>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024D6")]
		internal bool <>m__0(KeyValuePair<TKey, TValue> e)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000412")]
	public ICollection<TKey> Keys
	{
		[Token(Token = "0x60020E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000413")]
	public ICollection<TValue> Values
	{
		[Token(Token = "0x60020E3")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000414")]
	public new TValue Item
	{
		[Token(Token = "0x60020E4")]
		get
		{
			return (TValue)null;
		}
		[Token(Token = "0x60020E5")]
		set
		{
		}
	}

	[Token(Token = "0x60020DD")]
	public OrderPreservingDictionary()
	{
	}

	[Token(Token = "0x60020DE")]
	public void Add(TKey key, TValue value)
	{
	}

	[Token(Token = "0x60020DF")]
	public bool ContainsKey(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x60020E1")]
	public bool Remove(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x60020E2")]
	public bool TryGetValue(TKey key, out TValue value)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x20004E6")]
public class PhonemeMarker
{
	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public Phoneme phoneme;

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	public float time;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public float intensity;

	[Token(Token = "0x4001482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public bool sustain;

	[Token(Token = "0x60020E6")]
	[Address(RVA = "0x113CA44", Offset = "0x113CA44", VA = "0x113CA44")]
	public PhonemeMarker(Phoneme phoneme, float time, float intensity, bool sustain)
	{
	}

	[Token(Token = "0x60020E7")]
	[Address(RVA = "0x113CAA0", Offset = "0x113CAA0", VA = "0x113CAA0")]
	public PhonemeMarker(Phoneme phoneme, float time)
	{
	}
}
[Token(Token = "0x20004E7")]
public enum Phoneme
{
	[Token(Token = "0x4001484")]
	AI,
	[Token(Token = "0x4001485")]
	E,
	[Token(Token = "0x4001486")]
	U,
	[Token(Token = "0x4001487")]
	O,
	[Token(Token = "0x4001488")]
	CDGKNRSThYZ,
	[Token(Token = "0x4001489")]
	FV,
	[Token(Token = "0x400148A")]
	L,
	[Token(Token = "0x400148B")]
	MBP,
	[Token(Token = "0x400148C")]
	WQ,
	[Token(Token = "0x400148D")]
	Rest
}
[Token(Token = "0x20004E8")]
public class OculusEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x60020E8")]
	[Address(RVA = "0x7452E8", Offset = "0x7452E8", VA = "0x7452E8")]
	public OculusEntitlementCheck()
	{
	}

	[Token(Token = "0x60020E9")]
	[Address(RVA = "0x7452F0", Offset = "0x7452F0", VA = "0x7452F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60020EA")]
	[Address(RVA = "0x745474", Offset = "0x745474", VA = "0x745474")]
	private void EntitlementCallback(Message msg)
	{
	}
}
[Token(Token = "0x20004E9")]
public class PlatformRelatedComponents : MonoBehaviour
{
	[Token(Token = "0x60020EB")]
	[Address(RVA = "0x113D2F0", Offset = "0x113D2F0", VA = "0x113D2F0")]
	public PlatformRelatedComponents()
	{
	}

	[Token(Token = "0x60020EC")]
	[Address(RVA = "0x113D2F8", Offset = "0x113D2F8", VA = "0x113D2F8")]
	private void Awake()
	{
	}
}
[Token(Token = "0x20004EA")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x57F824", Offset = "0x57F824")]
public class EnableCameraDepthInForward : MonoBehaviour
{
	[Token(Token = "0x60020ED")]
	[Address(RVA = "0x7982D0", Offset = "0x7982D0", VA = "0x7982D0")]
	public EnableCameraDepthInForward()
	{
	}

	[Token(Token = "0x60020EE")]
	[Address(RVA = "0x7982D8", Offset = "0x7982D8", VA = "0x7982D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60020EF")]
	[Address(RVA = "0x7982DC", Offset = "0x7982DC", VA = "0x7982DC")]
	private void Set()
	{
	}
}
[Token(Token = "0x20004EB")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x57F888", Offset = "0x57F888")]
public class SoftNormalsToVertexColor : MonoBehaviour
{
	[Token(Token = "0x20004EC")]
	public enum Method
	{
		[Token(Token = "0x4001492")]
		Simple,
		[Token(Token = "0x4001493")]
		AngularDeviation
	}

	[Token(Token = "0x400148E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Method method;

	[Token(Token = "0x400148F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool generateOnAwake;

	[Token(Token = "0x4001490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool generateNow;

	[Token(Token = "0x60020F0")]
	[Address(RVA = "0x11199D8", Offset = "0x11199D8", VA = "0x11199D8")]
	public SoftNormalsToVertexColor()
	{
	}

	[Token(Token = "0x60020F1")]
	[Address(RVA = "0x11199E8", Offset = "0x11199E8", VA = "0x11199E8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60020F2")]
	[Address(RVA = "0x1119BF4", Offset = "0x1119BF4", VA = "0x1119BF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60020F3")]
	[Address(RVA = "0x11199FC", Offset = "0x11199FC", VA = "0x11199FC")]
	private void TryGenerate()
	{
	}

	[Token(Token = "0x60020F4")]
	[Address(RVA = "0x1119C04", Offset = "0x1119C04", VA = "0x1119C04")]
	private void Generate(Mesh m)
	{
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20004ED")]
	public class Benchmark01 : MonoBehaviour
	{
		[Token(Token = "0x20005C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F8FC", Offset = "0x57F8FC")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <i>__1;

			[Token(Token = "0x4001941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Benchmark01 $this;

			[Token(Token = "0x4001942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x4001944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004FC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024D9")]
				[Address(RVA = "0x112347C", Offset = "0x112347C", VA = "0x112347C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024DA")]
				[Address(RVA = "0x1123484", Offset = "0x1123484", VA = "0x1123484", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024D7")]
			[Address(RVA = "0x1122C84", Offset = "0x1122C84", VA = "0x1122C84")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x60024D8")]
			[Address(RVA = "0x1122C8C", Offset = "0x1122C8C", VA = "0x1122C8C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024DB")]
			[Address(RVA = "0x112348C", Offset = "0x112348C", VA = "0x112348C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60024DC")]
			[Address(RVA = "0x11234A0", Offset = "0x11234A0", VA = "0x11234A0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int BenchmarkType;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font TextMeshFont;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextContainer m_textContainer;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TextMesh m_textMesh;

		[Token(Token = "0x400149A")]
		private const string label01 = "The <#0050FF>count is: </color>{0}";

		[Token(Token = "0x400149B")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_material01;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_material02;

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0x1122C10", Offset = "0x1122C10", VA = "0x1122C10")]
		public Benchmark01()
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x1122C18", Offset = "0x1122C18", VA = "0x1122C18")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20004EE")]
	public class Benchmark01_UGUI : MonoBehaviour
	{
		[Token(Token = "0x20005C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F96C", Offset = "0x57F96C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <i>__1;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Benchmark01_UGUI $this;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x4001949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004FE")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024DF")]
				[Address(RVA = "0x1123C50", Offset = "0x1123C50", VA = "0x1123C50", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024E0")]
				[Address(RVA = "0x1123C58", Offset = "0x1123C58", VA = "0x1123C58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024DD")]
			[Address(RVA = "0x1123578", Offset = "0x1123578", VA = "0x1123578")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x60024DE")]
			[Address(RVA = "0x1123580", Offset = "0x1123580", VA = "0x1123580", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024E1")]
			[Address(RVA = "0x1123C60", Offset = "0x1123C60", VA = "0x1123C60", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60024E2")]
			[Address(RVA = "0x1123C74", Offset = "0x1123C74", VA = "0x1123C74", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int BenchmarkType;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Font TextMeshFont;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextMeshProUGUI m_textMeshPro;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text m_textMesh;

		[Token(Token = "0x40014A4")]
		private const string label01 = "The <#0050FF>count is: </color>";

		[Token(Token = "0x40014A5")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_material01;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_material02;

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0x1123504", Offset = "0x1123504", VA = "0x1123504")]
		public Benchmark01_UGUI()
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x112350C", Offset = "0x112350C", VA = "0x112350C")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20004EF")]
	public class Benchmark02 : MonoBehaviour
	{
		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x1123CD8", Offset = "0x1123CD8", VA = "0x1123CD8")]
		public Benchmark02()
		{
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x1123CE8", Offset = "0x1123CE8", VA = "0x1123CE8")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20004F0")]
	public class Benchmark03 : MonoBehaviour
	{
		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Font TheFont;

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x1124508", Offset = "0x1124508", VA = "0x1124508")]
		public Benchmark03()
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x1124518", Offset = "0x1124518", VA = "0x1124518")]
		private void Awake()
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x112451C", Offset = "0x112451C", VA = "0x112451C")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	public class Benchmark04 : MonoBehaviour
	{
		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int MinPointSize;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int MaxPointSize;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int Steps;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform m_Transform;

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x11248F0", Offset = "0x11248F0", VA = "0x11248F0")]
		public Benchmark04()
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x112490C", Offset = "0x112490C", VA = "0x112490C")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	public class CameraController : MonoBehaviour
	{
		[Token(Token = "0x20004F3")]
		public enum CameraModes
		{
			[Token(Token = "0x40014CD")]
			Follow,
			[Token(Token = "0x40014CE")]
			Isometric,
			[Token(Token = "0x40014CF")]
			Free
		}

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cameraTransform;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform dummyTarget;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform CameraTarget;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FollowDistance;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxFollowDistance;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinFollowDistance;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float ElevationAngle;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxElevationAngle;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MinElevationAngle;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float OrbitalAngle;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public CameraModes CameraMode;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool MovementSmoothing;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RotationSmoothing;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool previousSmoothing;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float MovementSmoothingValue;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float RotationSmoothingValue;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float MoveSensitivity;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentVelocity;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 desiredPosition;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float mouseX;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float mouseY;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 moveVector;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float mouseWheel;

		[Token(Token = "0x40014CA")]
		private const string event_SmoothingValue = "Slider - Smoothing Value";

		[Token(Token = "0x40014CB")]
		private const string event_FollowDistance = "Slider - Camera Zoom";

		[Token(Token = "0x6002100")]
		[Address(RVA = "0x1124DA8", Offset = "0x1124DA8", VA = "0x1124DA8")]
		public CameraController()
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x1124E54", Offset = "0x1124E54", VA = "0x1124E54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x1124F34", Offset = "0x1124F34", VA = "0x1124F34")]
		private void Start()
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x1124FF0", Offset = "0x1124FF0", VA = "0x1124FF0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x1125538", Offset = "0x1125538", VA = "0x1125538")]
		private void GetPlayerInput()
		{
		}
	}
}
[Token(Token = "0x20004F4")]
public class ChatController : MonoBehaviour
{
	[Token(Token = "0x40014D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_InputField TMP_ChatInput;

	[Token(Token = "0x40014D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text TMP_ChatOutput;

	[Token(Token = "0x40014D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Scrollbar ChatScrollbar;

	[Token(Token = "0x6002105")]
	[Address(RVA = "0x6A31FC", Offset = "0x6A31FC", VA = "0x6A31FC")]
	public ChatController()
	{
	}

	[Token(Token = "0x6002106")]
	[Address(RVA = "0x6A3204", Offset = "0x6A3204", VA = "0x6A3204")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002107")]
	[Address(RVA = "0x6A32C0", Offset = "0x6A32C0", VA = "0x6A32C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002108")]
	[Address(RVA = "0x6A337C", Offset = "0x6A337C", VA = "0x6A337C")]
	private void AddToChatOutput(string newText)
	{
	}
}
[Token(Token = "0x20004F5")]
public class EnvMapAnimator : MonoBehaviour
{
	[Token(Token = "0x20005C6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57F9DC", Offset = "0x57F9DC")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Matrix4x4 <matrix>__0;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal EnvMapAnimator $this;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal object $current;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal bool $disposing;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal int $PC;

		[Token(Token = "0x17000500")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024E5")]
			[Address(RVA = "0x7986F8", Offset = "0x7986F8", VA = "0x7986F8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000501")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024E6")]
			[Address(RVA = "0x798700", Offset = "0x798700", VA = "0x798700", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0x798478", Offset = "0x798478", VA = "0x798478")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x798480", Offset = "0x798480", VA = "0x798480", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0x798708", Offset = "0x798708", VA = "0x798708", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0x79871C", Offset = "0x79871C", VA = "0x79871C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40014D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotationSpeeds;

	[Token(Token = "0x40014D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TMP_Text m_textMeshPro;

	[Token(Token = "0x40014D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_material;

	[Token(Token = "0x6002109")]
	[Address(RVA = "0x798388", Offset = "0x798388", VA = "0x798388")]
	public EnvMapAnimator()
	{
	}

	[Token(Token = "0x600210A")]
	[Address(RVA = "0x798390", Offset = "0x798390", VA = "0x798390")]
	private void Awake()
	{
	}

	[Token(Token = "0x600210B")]
	[Address(RVA = "0x79840C", Offset = "0x79840C", VA = "0x79840C")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20004F6")]
	public class ObjectSpin : MonoBehaviour
	{
		[Token(Token = "0x20004F7")]
		public enum MotionType
		{
			[Token(Token = "0x40014E1")]
			Rotation,
			[Token(Token = "0x40014E2")]
			BackAndForth,
			[Token(Token = "0x40014E3")]
			Translation
		}

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SpinSpeed;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int RotationRange;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_transform;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_time;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_prevPOS;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_initial_Rotation;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_initial_Position;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color32 m_lightColor;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int frames;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MotionType Motion;

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x1126084", Offset = "0x1126084", VA = "0x1126084")]
		public ObjectSpin()
		{
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x1126098", Offset = "0x1126098", VA = "0x1126098")]
		private void Awake()
		{
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x11261DC", Offset = "0x11261DC", VA = "0x11261DC")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public class ShaderPropAnimator : MonoBehaviour
	{
		[Token(Token = "0x20005C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FA4C", Offset = "0x57FA4C")]
		private sealed class <AnimateProperties>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400194F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <glowPower>__1;

			[Token(Token = "0x4001950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal ShaderPropAnimator $this;

			[Token(Token = "0x4001951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x4001953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x17000502")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024EB")]
				[Address(RVA = "0x1126774", Offset = "0x1126774", VA = "0x1126774", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000503")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024EC")]
				[Address(RVA = "0x112677C", Offset = "0x112677C", VA = "0x112677C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024E9")]
			[Address(RVA = "0x1126588", Offset = "0x1126588", VA = "0x1126588")]
			[DebuggerHidden]
			public <AnimateProperties>c__Iterator0()
			{
			}

			[Token(Token = "0x60024EA")]
			[Address(RVA = "0x1126590", Offset = "0x1126590", VA = "0x1126590", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024ED")]
			[Address(RVA = "0x1126784", Offset = "0x1126784", VA = "0x1126784", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60024EE")]
			[Address(RVA = "0x1126798", Offset = "0x1126798", VA = "0x1126798", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer m_Renderer;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve GlowCurve;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_frame;

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x1126474", Offset = "0x1126474", VA = "0x1126474")]
		public ShaderPropAnimator()
		{
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x112647C", Offset = "0x112647C", VA = "0x112647C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0x11264F0", Offset = "0x11264F0", VA = "0x11264F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x112651C", Offset = "0x112651C", VA = "0x112651C")]
		[DebuggerHidden]
		private IEnumerator AnimateProperties()
		{
			return null;
		}
	}
	[Token(Token = "0x20004F9")]
	public class SimpleScript : MonoBehaviour
	{
		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x40014E9")]
		private const string label = "The <#0050FF>count is: </color>{0:2}";

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_frame;

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x11267FC", Offset = "0x11267FC", VA = "0x11267FC")]
		public SimpleScript()
		{
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x1126804", Offset = "0x1126804", VA = "0x1126804")]
		private void Start()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x11268EC", Offset = "0x11268EC", VA = "0x11268EC")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	public class SkewTextExample : MonoBehaviour
	{
		[Token(Token = "0x20005C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FABC", Offset = "0x57FABC")]
		private sealed class <WarpText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <old_CurveScale>__0;

			[Token(Token = "0x4001955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <old_ShearValue>__0;

			[Token(Token = "0x4001956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal AnimationCurve <old_curve>__0;

			[Token(Token = "0x4001957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal TMP_TextInfo <textInfo>__1;

			[Token(Token = "0x4001958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <boundsMinX>__1;

			[Token(Token = "0x400195A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal float <boundsMaxX>__1;

			[Token(Token = "0x400195B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3[] <vertices>__2;

			[Token(Token = "0x400195C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x400195D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal SkewTextExample $this;

			[Token(Token = "0x400195E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal object $current;

			[Token(Token = "0x400195F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal bool $disposing;

			[Token(Token = "0x4001960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			internal int $PC;

			[Token(Token = "0x17000504")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024F1")]
				[Address(RVA = "0x1127EAC", Offset = "0x1127EAC", VA = "0x1127EAC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000505")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024F2")]
				[Address(RVA = "0x1127EB4", Offset = "0x1127EB4", VA = "0x1127EB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024EF")]
			[Address(RVA = "0x1126CEC", Offset = "0x1126CEC", VA = "0x1126CEC")]
			[DebuggerHidden]
			public <WarpText>c__Iterator0()
			{
			}

			[Token(Token = "0x60024F0")]
			[Address(RVA = "0x1126CF4", Offset = "0x1126CF4", VA = "0x1126CF4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024F3")]
			[Address(RVA = "0x1127EBC", Offset = "0x1127EBC", VA = "0x1127EBC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60024F4")]
			[Address(RVA = "0x1127ED0", Offset = "0x1127ED0", VA = "0x1127ED0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CurveScale;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ShearAmount;

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x1126990", Offset = "0x1126990", VA = "0x1126990")]
		public SkewTextExample()
		{
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x1126B54", Offset = "0x1126B54", VA = "0x1126B54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x1126BC4", Offset = "0x1126BC4", VA = "0x1126BC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x1126C5C", Offset = "0x1126C5C", VA = "0x1126C5C")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x1126BF0", Offset = "0x1126BF0", VA = "0x1126BF0")]
		[DebuggerHidden]
		private IEnumerator WarpText()
		{
			return null;
		}
	}
	[Token(Token = "0x20004FB")]
	public class TeleType : MonoBehaviour
	{
		[Token(Token = "0x20005C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FB2C", Offset = "0x57FB2C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x4001962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <counter>__0;

			[Token(Token = "0x4001963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <visibleCount>__0;

			[Token(Token = "0x4001964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal TeleType $this;

			[Token(Token = "0x4001965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal bool $disposing;

			[Token(Token = "0x4001967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal int $PC;

			[Token(Token = "0x17000506")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024F7")]
				[Address(RVA = "0x1128394", Offset = "0x1128394", VA = "0x1128394", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000507")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024F8")]
				[Address(RVA = "0x112839C", Offset = "0x112839C", VA = "0x112839C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024F5")]
			[Address(RVA = "0x11280BC", Offset = "0x11280BC", VA = "0x11280BC")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x60024F6")]
			[Address(RVA = "0x11280C4", Offset = "0x11280C4", VA = "0x11280C4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024F9")]
			[Address(RVA = "0x11283A4", Offset = "0x11283A4", VA = "0x11283A4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60024FA")]
			[Address(RVA = "0x11283B8", Offset = "0x11283B8", VA = "0x11283B8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string label01;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string label02;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_textMeshPro;

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x1127F34", Offset = "0x1127F34", VA = "0x1127F34")]
		public TeleType()
		{
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x1127F9C", Offset = "0x1127F9C", VA = "0x1127F9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x1128050", Offset = "0x1128050", VA = "0x1128050")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20004FC")]
	public class TextConsoleSimulator : MonoBehaviour
	{
		[Token(Token = "0x20005CA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FBAC", Offset = "0x57FBAC")]
		private sealed class <RevealCharacters>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_Text textComponent;

			[Token(Token = "0x4001969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x400196A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x400196B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <visibleCount>__0;

			[Token(Token = "0x400196C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal TextConsoleSimulator $this;

			[Token(Token = "0x400196D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal object $current;

			[Token(Token = "0x400196E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x400196F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x17000508")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60024FD")]
				[Address(RVA = "0x1128910", Offset = "0x1128910", VA = "0x1128910", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000509")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60024FE")]
				[Address(RVA = "0x1128918", Offset = "0x1128918", VA = "0x1128918", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024FB")]
			[Address(RVA = "0x11286EC", Offset = "0x11286EC", VA = "0x11286EC")]
			[DebuggerHidden]
			public <RevealCharacters>c__Iterator0()
			{
			}

			[Token(Token = "0x60024FC")]
			[Address(RVA = "0x1128768", Offset = "0x1128768", VA = "0x1128768", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60024FF")]
			[Address(RVA = "0x1128920", Offset = "0x1128920", VA = "0x1128920", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002500")]
			[Address(RVA = "0x1128934", Offset = "0x1128934", VA = "0x1128934", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x20005CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FC0C", Offset = "0x57FC0C")]
		private sealed class <RevealWords>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_Text textComponent;

			[Token(Token = "0x4001971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <totalWordCount>__0;

			[Token(Token = "0x4001972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x4001973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <counter>__0;

			[Token(Token = "0x4001974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <currentWord>__0;

			[Token(Token = "0x4001975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int <visibleCount>__0;

			[Token(Token = "0x4001976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal object $current;

			[Token(Token = "0x4001977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x4001978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x1700050A")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002503")]
				[Address(RVA = "0x1128C14", Offset = "0x1128C14", VA = "0x1128C14", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700050B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002504")]
				[Address(RVA = "0x1128C1C", Offset = "0x1128C1C", VA = "0x1128C1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002501")]
			[Address(RVA = "0x1128760", Offset = "0x1128760", VA = "0x1128760")]
			[DebuggerHidden]
			public <RevealWords>c__Iterator1()
			{
			}

			[Token(Token = "0x6002502")]
			[Address(RVA = "0x1128998", Offset = "0x1128998", VA = "0x1128998", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002505")]
			[Address(RVA = "0x1128C24", Offset = "0x1128C24", VA = "0x1128C24", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002506")]
			[Address(RVA = "0x1128C38", Offset = "0x1128C38", VA = "0x1128C38", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasTextChanged;

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x112841C", Offset = "0x112841C", VA = "0x112841C")]
		public TextConsoleSimulator()
		{
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x1128424", Offset = "0x1128424", VA = "0x1128424")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x1128494", Offset = "0x1128494", VA = "0x1128494")]
		private void Start()
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x1128550", Offset = "0x1128550", VA = "0x1128550")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x1128618", Offset = "0x1128618", VA = "0x1128618")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0x11286E0", Offset = "0x11286E0", VA = "0x11286E0")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x11284C4", Offset = "0x11284C4", VA = "0x11284C4")]
		[DebuggerHidden]
		private IEnumerator RevealCharacters(TMP_Text textComponent)
		{
			return null;
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x11286F4", Offset = "0x11286F4", VA = "0x11286F4")]
		[DebuggerHidden]
		private IEnumerator RevealWords(TMP_Text textComponent)
		{
			return null;
		}
	}
	[Token(Token = "0x20004FD")]
	public class TextMeshProFloatingText : MonoBehaviour
	{
		[Token(Token = "0x20005CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FC8C", Offset = "0x57FC8C")]
		private sealed class <DisplayTextMeshProFloatingText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <CountDuration>__0;

			[Token(Token = "0x400197A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <starting_Count>__0;

			[Token(Token = "0x400197B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <current_Count>__0;

			[Token(Token = "0x400197C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 <start_pos>__0;

			[Token(Token = "0x400197D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color32 <start_color>__0;

			[Token(Token = "0x400197E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <alpha>__0;

			[Token(Token = "0x400197F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int <int_counter>__0;

			[Token(Token = "0x4001980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float <fadeDuration>__0;

			[Token(Token = "0x4001981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal TextMeshProFloatingText $this;

			[Token(Token = "0x4001982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal object $current;

			[Token(Token = "0x4001983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool $disposing;

			[Token(Token = "0x4001984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal int $PC;

			[Token(Token = "0x1700050C")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002509")]
				[Address(RVA = "0x112A2F4", Offset = "0x112A2F4", VA = "0x112A2F4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700050D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600250A")]
				[Address(RVA = "0x112A2FC", Offset = "0x112A2FC", VA = "0x112A2FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002507")]
			[Address(RVA = "0x11294CC", Offset = "0x11294CC", VA = "0x11294CC")]
			[DebuggerHidden]
			public <DisplayTextMeshProFloatingText>c__Iterator0()
			{
			}

			[Token(Token = "0x6002508")]
			[Address(RVA = "0x1129C24", Offset = "0x1129C24", VA = "0x1129C24", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600250B")]
			[Address(RVA = "0x112A304", Offset = "0x112A304", VA = "0x112A304", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600250C")]
			[Address(RVA = "0x112A318", Offset = "0x112A318", VA = "0x112A318", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x20005CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FCEC", Offset = "0x57FCEC")]
		private sealed class <DisplayTextMeshFloatingText>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <CountDuration>__0;

			[Token(Token = "0x4001986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <starting_Count>__0;

			[Token(Token = "0x4001987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <current_Count>__0;

			[Token(Token = "0x4001988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 <start_pos>__0;

			[Token(Token = "0x4001989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color32 <start_color>__0;

			[Token(Token = "0x400198A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <alpha>__0;

			[Token(Token = "0x400198B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int <int_counter>__0;

			[Token(Token = "0x400198C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float <fadeDuration>__0;

			[Token(Token = "0x400198D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal TextMeshProFloatingText $this;

			[Token(Token = "0x400198E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal object $current;

			[Token(Token = "0x400198F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool $disposing;

			[Token(Token = "0x4001990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal int $PC;

			[Token(Token = "0x1700050E")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600250F")]
				[Address(RVA = "0x1129B9C", Offset = "0x1129B9C", VA = "0x1129B9C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700050F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002510")]
				[Address(RVA = "0x1129BA4", Offset = "0x1129BA4", VA = "0x1129BA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600250D")]
			[Address(RVA = "0x11294D4", Offset = "0x11294D4", VA = "0x11294D4")]
			[DebuggerHidden]
			public <DisplayTextMeshFloatingText>c__Iterator1()
			{
			}

			[Token(Token = "0x600250E")]
			[Address(RVA = "0x11294DC", Offset = "0x11294DC", VA = "0x11294DC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002511")]
			[Address(RVA = "0x1129BAC", Offset = "0x1129BAC", VA = "0x1129BAC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002512")]
			[Address(RVA = "0x1129BC0", Offset = "0x1129BC0", VA = "0x1129BC0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Font TheFont;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject m_floatingText;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMesh m_textMesh;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_transform;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_floatingText_Transform;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform m_cameraTransform;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 lastPOS;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion lastRotation;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int SpawnType;

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x1128C9C", Offset = "0x1128C9C", VA = "0x1128C9C")]
		public TextMeshProFloatingText()
		{
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x1128D4C", Offset = "0x1128D4C", VA = "0x1128D4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x1128E48", Offset = "0x1128E48", VA = "0x1128E48")]
		private void Start()
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x11293F4", Offset = "0x11293F4", VA = "0x11293F4")]
		[DebuggerHidden]
		public IEnumerator DisplayTextMeshProFloatingText()
		{
			return null;
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x1129460", Offset = "0x1129460", VA = "0x1129460")]
		[DebuggerHidden]
		public IEnumerator DisplayTextMeshFloatingText()
		{
			return null;
		}
	}
	[Token(Token = "0x20004FE")]
	public class TextMeshSpawner : MonoBehaviour
	{
		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SpawnType;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int NumberOfNPC;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Font TheFont;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x112A37C", Offset = "0x112A37C", VA = "0x112A37C")]
		public TextMeshSpawner()
		{
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x112A38C", Offset = "0x112A38C", VA = "0x112A38C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0x112A390", Offset = "0x112A390", VA = "0x112A390")]
		private void Start()
		{
		}
	}
}
namespace TMPro
{
	[Serializable]
	[Token(Token = "0x20004FF")]
	public class TMP_DigitValidator : TMP_InputValidator
	{
		[Token(Token = "0x600212E")]
		[Address(RVA = "0x75804C", Offset = "0x75804C", VA = "0x75804C")]
		public TMP_DigitValidator()
		{
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x758054", Offset = "0x758054", VA = "0x758054", Slot = "4")]
		public override char Validate(ref string text, ref int pos, char ch)
		{
			return default(char);
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x2000500")]
	public class TMP_ExampleScript_01 : MonoBehaviour
	{
		[Token(Token = "0x2000501")]
		public enum objectType
		{
			[Token(Token = "0x4001508")]
			TextMeshPro,
			[Token(Token = "0x4001509")]
			TextMeshProUGUI
		}

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public objectType ObjectType;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isStatic;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Text m_text;

		[Token(Token = "0x4001505")]
		private const string k_label = "The count is <#0080ff>{0}</color>";

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int count;

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x112A7DC", Offset = "0x112A7DC", VA = "0x112A7DC")]
		public TMP_ExampleScript_01()
		{
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x112A7E4", Offset = "0x112A7E4", VA = "0x112A7E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0x112AA14", Offset = "0x112AA14", VA = "0x112AA14")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000502")]
	public class TMP_FrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x2000503")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x4001515")]
			TopLeft,
			[Token(Token = "0x4001516")]
			BottomLeft,
			[Token(Token = "0x4001517")]
			TopRight,
			[Token(Token = "0x4001518")]
			BottomRight
		}

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UpdateInterval;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_LastInterval;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_Frames;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string htmlColorTag;

		[Token(Token = "0x400150F")]
		private const string fpsLabel = "{0:2}</color> <#8080ff>FPS \n<#FF8000>{1:2} <#8080ff>MS";

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera m_camera;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x112AAC0", Offset = "0x112AAC0", VA = "0x112AAC0")]
		public TMP_FrameRateCounter()
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x112AAD8", Offset = "0x112AAD8", VA = "0x112AAD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x112B080", Offset = "0x112B080", VA = "0x112B080")]
		private void Start()
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x112B0B0", Offset = "0x112B0B0", VA = "0x112B0B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x112AD4C", Offset = "0x112AD4C", VA = "0x112AD4C")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
}
namespace TMPro
{
	[Serializable]
	[Token(Token = "0x2000504")]
	public class TMP_PhoneNumberValidator : TMP_InputValidator
	{
		[Token(Token = "0x6002138")]
		[Address(RVA = "0x758080", Offset = "0x758080", VA = "0x758080")]
		public TMP_PhoneNumberValidator()
		{
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x758088", Offset = "0x758088", VA = "0x758088", Slot = "4")]
		public override char Validate(ref string text, ref int pos, char ch)
		{
			return default(char);
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x2000505")]
	public class TMP_TextEventCheck : MonoBehaviour
	{
		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_TextEventHandler TextEventHandler;

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x112B258", Offset = "0x112B258", VA = "0x112B258")]
		public TMP_TextEventCheck()
		{
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x112B260", Offset = "0x112B260", VA = "0x112B260")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x112B530", Offset = "0x112B530", VA = "0x112B530")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x112B800", Offset = "0x112B800", VA = "0x112B800")]
		private void OnCharacterSelection(char c, int index)
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0x112BA80", Offset = "0x112BA80", VA = "0x112BA80")]
		private void OnSpriteSelection(char c, int index)
		{
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x112BD00", Offset = "0x112BD00", VA = "0x112BD00")]
		private void OnWordSelection(string word, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x112C010", Offset = "0x112C010", VA = "0x112C010")]
		private void OnLineSelection(string lineText, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x112C320", Offset = "0x112C320", VA = "0x112C320")]
		private void OnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}
	}
}
namespace TMPro
{
	[Token(Token = "0x2000506")]
	public class TMP_TextEventHandler : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Serializable]
		[Token(Token = "0x2000507")]
		public class CharacterSelectionEvent : UnityEvent<char, int>
		{
			[Token(Token = "0x6002156")]
			[Address(RVA = "0x7587F4", Offset = "0x7587F4", VA = "0x7587F4")]
			public CharacterSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000508")]
		public class SpriteSelectionEvent : UnityEvent<char, int>
		{
			[Token(Token = "0x6002157")]
			[Address(RVA = "0x758844", Offset = "0x758844", VA = "0x758844")]
			public SpriteSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000509")]
		public class WordSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6002158")]
			[Address(RVA = "0x758894", Offset = "0x758894", VA = "0x758894")]
			public WordSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200050A")]
		public class LineSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6002159")]
			[Address(RVA = "0x7588E4", Offset = "0x7588E4", VA = "0x7588E4")]
			public LineSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200050B")]
		public class LinkSelectionEvent : UnityEvent<string, string, int>
		{
			[Token(Token = "0x600215A")]
			[Address(RVA = "0x758934", Offset = "0x758934", VA = "0x758934")]
			public LinkSelectionEvent()
			{
			}
		}

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CharacterSelectionEvent m_OnCharacterSelection;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SpriteSelectionEvent m_OnSpriteSelection;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private WordSelectionEvent m_OnWordSelection;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LineSelectionEvent m_OnLineSelection;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LinkSelectionEvent m_OnLinkSelection;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_Camera;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Canvas m_Canvas;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_selectedLink;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_lastCharIndex;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_lastWordIndex;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_lastLineIndex;

		[Token(Token = "0x17000415")]
		public CharacterSelectionEvent onCharacterSelection
		{
			[Token(Token = "0x6002143")]
			[Address(RVA = "0x758984", Offset = "0x758984", VA = "0x758984")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002144")]
			[Address(RVA = "0x75898C", Offset = "0x75898C", VA = "0x75898C")]
			set
			{
			}
		}

		[Token(Token = "0x17000416")]
		public SpriteSelectionEvent onSpriteSelection
		{
			[Token(Token = "0x6002145")]
			[Address(RVA = "0x758994", Offset = "0x758994", VA = "0x758994")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002146")]
			[Address(RVA = "0x75899C", Offset = "0x75899C", VA = "0x75899C")]
			set
			{
			}
		}

		[Token(Token = "0x17000417")]
		public WordSelectionEvent onWordSelection
		{
			[Token(Token = "0x6002147")]
			[Address(RVA = "0x7589A4", Offset = "0x7589A4", VA = "0x7589A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002148")]
			[Address(RVA = "0x7589AC", Offset = "0x7589AC", VA = "0x7589AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000418")]
		public LineSelectionEvent onLineSelection
		{
			[Token(Token = "0x6002149")]
			[Address(RVA = "0x7589B4", Offset = "0x7589B4", VA = "0x7589B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600214A")]
			[Address(RVA = "0x7589BC", Offset = "0x7589BC", VA = "0x7589BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000419")]
		public LinkSelectionEvent onLinkSelection
		{
			[Token(Token = "0x600214B")]
			[Address(RVA = "0x7589C4", Offset = "0x7589C4", VA = "0x7589C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600214C")]
			[Address(RVA = "0x7589CC", Offset = "0x7589CC", VA = "0x7589CC")]
			set
			{
			}
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x758718", Offset = "0x758718", VA = "0x758718")]
		public TMP_TextEventHandler()
		{
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x7589D4", Offset = "0x7589D4", VA = "0x7589D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x758B6C", Offset = "0x758B6C", VA = "0x758B6C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x759544", Offset = "0x759544", VA = "0x759544", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x759548", Offset = "0x759548", VA = "0x759548", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x75929C", Offset = "0x75929C", VA = "0x75929C")]
		private void SendOnCharacterSelection(char character, int characterIndex)
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x759318", Offset = "0x759318", VA = "0x759318")]
		private void SendOnSpriteSelection(char character, int characterIndex)
		{
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0x759394", Offset = "0x759394", VA = "0x759394")]
		private void SendOnWordSelection(string word, int charIndex, int length)
		{
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0x759424", Offset = "0x759424", VA = "0x759424")]
		private void SendOnLineSelection(string line, int charIndex, int length)
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x7594B4", Offset = "0x7594B4", VA = "0x7594B4")]
		private void SendOnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x200050C")]
	[ExecuteInEditMode]
	public class TMP_TextInfoDebugTool : MonoBehaviour
	{
		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowCharacters;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool ShowWords;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool ShowLinks;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool ShowLines;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool ShowMeshBounds;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool ShowTextBounds;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x57FDAC", Offset = "0x57FDAC")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x57FDAC", Offset = "0x57FDAC")]
		public string ObjectStats;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform m_Transform;

		[Token(Token = "0x600215B")]
		[Address(RVA = "0x112C61C", Offset = "0x112C61C", VA = "0x112C61C")]
		public TMP_TextInfoDebugTool()
		{
		}
	}
	[Token(Token = "0x200050D")]
	public class TMP_TextSelector_A : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera m_Camera;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_isHoveringObject;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_selectedLink;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_lastCharIndex;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_lastWordIndex;

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x112C624", Offset = "0x112C624", VA = "0x112C624")]
		public TMP_TextSelector_A()
		{
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x112C63C", Offset = "0x112C63C", VA = "0x112C63C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x112C6D8", Offset = "0x112C6D8", VA = "0x112C6D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x112D434", Offset = "0x112D434", VA = "0x112D434", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x112D4B4", Offset = "0x112D4B4", VA = "0x112D4B4", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}
	}
	[Token(Token = "0x200050E")]
	public class TMP_TextSelector_B : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerClickHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform TextPopup_Prefab_01;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform m_TextPopup_RectTransform;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProUGUI m_TextPopup_TMPComponent;

		[Token(Token = "0x4001538")]
		private const string k_LinkText = "You have selected link <#ffff00>";

		[Token(Token = "0x4001539")]
		private const string k_WordText = "Word Index: <#ffff00>";

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Canvas m_Canvas;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera m_Camera;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isHoveringObject;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int m_selectedWord;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_selectedLink;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_lastIndex;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Matrix4x4 m_matrix;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TMP_MeshInfo[] m_cachedMeshInfoVertexData;

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x112D530", Offset = "0x112D530", VA = "0x112D530")]
		public TMP_TextSelector_B()
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x112D548", Offset = "0x112D548", VA = "0x112D548")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x112D700", Offset = "0x112D700", VA = "0x112D700")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x112D7C8", Offset = "0x112D7C8", VA = "0x112D7C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x112D890", Offset = "0x112D890", VA = "0x112D890")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x112D94C", Offset = "0x112D94C", VA = "0x112D94C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x112FFFC", Offset = "0x112FFFC", VA = "0x112FFFC", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x1130008", Offset = "0x1130008", VA = "0x1130008", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x1130010", Offset = "0x1130010", VA = "0x1130010", Slot = "6")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x1130014", Offset = "0x1130014", VA = "0x1130014", Slot = "7")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x112F070", Offset = "0x112F070", VA = "0x112F070")]
		private void RestoreCachedVertexAttributes(int index)
		{
		}
	}
	[Token(Token = "0x200050F")]
	public class TMP_UiFrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x2000510")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x400154D")]
			TopLeft,
			[Token(Token = "0x400154E")]
			BottomLeft,
			[Token(Token = "0x400154F")]
			TopRight,
			[Token(Token = "0x4001550")]
			BottomRight
		}

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UpdateInterval;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_LastInterval;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_Frames;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string htmlColorTag;

		[Token(Token = "0x4001548")]
		private const string fpsLabel = "{0:2}</color> <#8080ff>FPS \n<#FF8000>{1:2} <#8080ff>MS";

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform m_frameCounter_transform;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x7500A0", Offset = "0x7500A0", VA = "0x7500A0")]
		public TMP_UiFrameRateCounter()
		{
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x7500B8", Offset = "0x7500B8", VA = "0x7500B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x750694", Offset = "0x750694", VA = "0x750694")]
		private void Start()
		{
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x7506C4", Offset = "0x7506C4", VA = "0x7506C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x7502AC", Offset = "0x7502AC", VA = "0x7502AC")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
	[Token(Token = "0x2000511")]
	public class TMPro_InstructionOverlay : MonoBehaviour
	{
		[Token(Token = "0x2000512")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x4001558")]
			TopLeft,
			[Token(Token = "0x4001559")]
			BottomLeft,
			[Token(Token = "0x400155A")]
			TopRight,
			[Token(Token = "0x400155B")]
			BottomRight
		}

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x4001552")]
		private const string instructions = "Camera Control - <#ffff00>Shift + RMB\n</color>Zoom - <#ffff00>Mouse wheel.";

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextContainer m_textContainer;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Camera m_camera;

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x75086C", Offset = "0x75086C", VA = "0x75086C")]
		public TMPro_InstructionOverlay()
		{
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x75087C", Offset = "0x75087C", VA = "0x75087C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002173")]
		[Address(RVA = "0x750B14", Offset = "0x750B14", VA = "0x750B14")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
	[Token(Token = "0x2000513")]
	public class VertexColorCycler : MonoBehaviour
	{
		[Token(Token = "0x20005CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FE00", Offset = "0x57FE00")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x4001992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <currentCharacter>__0;

			[Token(Token = "0x4001993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Color32 <c0>__0;

			[Token(Token = "0x4001994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <materialIndex>__1;

			[Token(Token = "0x4001996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color32[] <newVertexColors>__1;

			[Token(Token = "0x4001997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int <vertexIndex>__1;

			[Token(Token = "0x4001998")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal VertexColorCycler $this;

			[Token(Token = "0x4001999")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal object $current;

			[Token(Token = "0x400199A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal bool $disposing;

			[Token(Token = "0x400199B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal int $PC;

			[Token(Token = "0x17000510")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002515")]
				[Address(RVA = "0x7511E8", Offset = "0x7511E8", VA = "0x7511E8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000511")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002516")]
				[Address(RVA = "0x7511F0", Offset = "0x7511F0", VA = "0x7511F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002513")]
			[Address(RVA = "0x750DBC", Offset = "0x750DBC", VA = "0x750DBC")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6002514")]
			[Address(RVA = "0x750DC4", Offset = "0x750DC4", VA = "0x750DC4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002517")]
			[Address(RVA = "0x7511F8", Offset = "0x7511F8", VA = "0x7511F8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002518")]
			[Address(RVA = "0x75120C", Offset = "0x75120C", VA = "0x75120C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x6002174")]
		[Address(RVA = "0x750CC4", Offset = "0x750CC4", VA = "0x750CC4")]
		public VertexColorCycler()
		{
		}

		[Token(Token = "0x6002175")]
		[Address(RVA = "0x750CCC", Offset = "0x750CCC", VA = "0x750CCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0x750D24", Offset = "0x750D24", VA = "0x750D24")]
		private void Start()
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x750D50", Offset = "0x750D50", VA = "0x750D50")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x2000514")]
	public class VertexJitter : MonoBehaviour
	{
		[Token(Token = "0x2000515")]
		private struct VertexAnim
		{
			[Token(Token = "0x4001562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float angleRange;

			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float angle;

			[Token(Token = "0x4001564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;
		}

		[Token(Token = "0x20005CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FE70", Offset = "0x57FE70")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400199C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x400199D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <loopCount>__0;

			[Token(Token = "0x400199E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal VertexAnim[] <vertexAnim>__0;

			[Token(Token = "0x400199F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal TMP_MeshInfo[] <cachedMeshInfo>__0;

			[Token(Token = "0x40019A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int <characterCount>__1;

			[Token(Token = "0x40019A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x40019A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal VertexJitter $this;

			[Token(Token = "0x40019A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal object $current;

			[Token(Token = "0x40019A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal bool $disposing;

			[Token(Token = "0x40019A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			internal int $PC;

			[Token(Token = "0x17000512")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600251B")]
				[Address(RVA = "0x752468", Offset = "0x752468", VA = "0x752468", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000513")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600251C")]
				[Address(RVA = "0x752470", Offset = "0x752470", VA = "0x752470", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002519")]
			[Address(RVA = "0x751598", Offset = "0x751598", VA = "0x751598")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x600251A")]
			[Address(RVA = "0x7515A0", Offset = "0x7515A0", VA = "0x7515A0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600251D")]
			[Address(RVA = "0x752478", Offset = "0x752478", VA = "0x752478", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600251E")]
			[Address(RVA = "0x75248C", Offset = "0x75248C", VA = "0x75248C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x6002178")]
		[Address(RVA = "0x751270", Offset = "0x751270", VA = "0x751270")]
		public VertexJitter()
		{
		}

		[Token(Token = "0x6002179")]
		[Address(RVA = "0x751288", Offset = "0x751288", VA = "0x751288")]
		private void Awake()
		{
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0x7512E0", Offset = "0x7512E0", VA = "0x7512E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x7513A8", Offset = "0x7513A8", VA = "0x7513A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x751470", Offset = "0x751470", VA = "0x751470")]
		private void Start()
		{
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x751508", Offset = "0x751508", VA = "0x751508")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x75149C", Offset = "0x75149C", VA = "0x75149C")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x2000516")]
	public class VertexShakeA : MonoBehaviour
	{
		[Token(Token = "0x20005D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FEE0", Offset = "0x57FEE0")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40019A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x40019A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector3[][] <copyOfVertices>__0;

			[Token(Token = "0x40019A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <characterCount>__1;

			[Token(Token = "0x40019A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <lineCount>__1;

			[Token(Token = "0x40019AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x40019AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal VertexShakeA $this;

			[Token(Token = "0x40019AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal object $current;

			[Token(Token = "0x40019AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal bool $disposing;

			[Token(Token = "0x40019AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal int $PC;

			[Token(Token = "0x17000514")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002521")]
				[Address(RVA = "0x7538F8", Offset = "0x7538F8", VA = "0x7538F8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000515")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002522")]
				[Address(RVA = "0x753900", Offset = "0x753900", VA = "0x753900", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600251F")]
			[Address(RVA = "0x752800", Offset = "0x752800", VA = "0x752800")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6002520")]
			[Address(RVA = "0x752808", Offset = "0x752808", VA = "0x752808", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002523")]
			[Address(RVA = "0x753908", Offset = "0x753908", VA = "0x753908", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002524")]
			[Address(RVA = "0x75391C", Offset = "0x75391C", VA = "0x75391C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ScaleMultiplier;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotationMultiplier;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x7524F0", Offset = "0x7524F0", VA = "0x7524F0")]
		public VertexShakeA()
		{
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x752500", Offset = "0x752500", VA = "0x752500")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x752558", Offset = "0x752558", VA = "0x752558")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x752620", Offset = "0x752620", VA = "0x752620")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0x7526E8", Offset = "0x7526E8", VA = "0x7526E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x752780", Offset = "0x752780", VA = "0x752780")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x752714", Offset = "0x752714", VA = "0x752714")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x2000517")]
	public class VertexShakeB : MonoBehaviour
	{
		[Token(Token = "0x20005D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FF50", Offset = "0x57FF50")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40019AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x40019B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector3[][] <copyOfVertices>__0;

			[Token(Token = "0x40019B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <characterCount>__1;

			[Token(Token = "0x40019B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int <lineCount>__1;

			[Token(Token = "0x40019B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x40019B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal VertexShakeB $this;

			[Token(Token = "0x40019B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal object $current;

			[Token(Token = "0x40019B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal bool $disposing;

			[Token(Token = "0x40019B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal int $PC;

			[Token(Token = "0x17000516")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002527")]
				[Address(RVA = "0x7555E0", Offset = "0x7555E0", VA = "0x7555E0", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000517")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002528")]
				[Address(RVA = "0x7555E8", Offset = "0x7555E8", VA = "0x7555E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002525")]
			[Address(RVA = "0x753C98", Offset = "0x753C98", VA = "0x753C98")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6002526")]
			[Address(RVA = "0x753CA0", Offset = "0x753CA0", VA = "0x753CA0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002529")]
			[Address(RVA = "0x7555F0", Offset = "0x7555F0", VA = "0x7555F0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600252A")]
			[Address(RVA = "0x755604", Offset = "0x755604", VA = "0x755604", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x753980", Offset = "0x753980", VA = "0x753980")]
		public VertexShakeB()
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x753998", Offset = "0x753998", VA = "0x753998")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x7539F0", Offset = "0x7539F0", VA = "0x7539F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0x753AB8", Offset = "0x753AB8", VA = "0x753AB8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600218A")]
		[Address(RVA = "0x753B80", Offset = "0x753B80", VA = "0x753B80")]
		private void Start()
		{
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x753C18", Offset = "0x753C18", VA = "0x753C18")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0x753BAC", Offset = "0x753BAC", VA = "0x753BAC")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x2000518")]
	public class VertexZoom : MonoBehaviour
	{
		[Token(Token = "0x20005D2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x57FFC0", Offset = "0x57FFC0")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x20005D3")]
			private sealed class <AnimateVertexColors>c__AnonStorey1
			{
				[Token(Token = "0x40019C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal List<float> modifiedCharScale;

				[Token(Token = "0x40019C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				internal <AnimateVertexColors>c__Iterator0 <>f__ref$0;

				[Token(Token = "0x6002531")]
				[Address(RVA = "0x756C64", Offset = "0x756C64", VA = "0x756C64")]
				public <AnimateVertexColors>c__AnonStorey1()
				{
				}

				[Token(Token = "0x6002532")]
				[Address(RVA = "0x756CF4", Offset = "0x756CF4", VA = "0x756CF4")]
				internal int <>m__0(int a, int b)
				{
					return default(int);
				}
			}

			[Token(Token = "0x40019B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x40019B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal TMP_MeshInfo[] <cachedMeshInfoVertexData>__0;

			[Token(Token = "0x40019BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<int> <scaleSortingOrder>__0;

			[Token(Token = "0x40019BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int <characterCount>__1;

			[Token(Token = "0x40019BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x40019BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal VertexZoom $this;

			[Token(Token = "0x40019BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal object $current;

			[Token(Token = "0x40019BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal bool $disposing;

			[Token(Token = "0x40019C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			internal int $PC;

			[Token(Token = "0x40019C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private <AnimateVertexColors>c__AnonStorey1 $locvar0;

			[Token(Token = "0x17000518")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x600252D")]
				[Address(RVA = "0x756C6C", Offset = "0x756C6C", VA = "0x756C6C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000519")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600252E")]
				[Address(RVA = "0x756C74", Offset = "0x756C74", VA = "0x756C74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600252B")]
			[Address(RVA = "0x755990", Offset = "0x755990", VA = "0x755990")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x600252C")]
			[Address(RVA = "0x755998", Offset = "0x755998", VA = "0x755998", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600252F")]
			[Address(RVA = "0x756C7C", Offset = "0x756C7C", VA = "0x756C7C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002530")]
			[Address(RVA = "0x756C90", Offset = "0x756C90", VA = "0x756C90", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngleMultiplier;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurveScale;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasTextChanged;

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x755668", Offset = "0x755668", VA = "0x755668")]
		public VertexZoom()
		{
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x755680", Offset = "0x755680", VA = "0x755680")]
		private void Awake()
		{
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x7556D8", Offset = "0x7556D8", VA = "0x7556D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x7557A0", Offset = "0x7557A0", VA = "0x7557A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0x755868", Offset = "0x755868", VA = "0x755868")]
		private void Start()
		{
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x755900", Offset = "0x755900", VA = "0x755900")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x755894", Offset = "0x755894", VA = "0x755894")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x2000519")]
	public class WarpTextExample : MonoBehaviour
	{
		[Token(Token = "0x20005D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580030", Offset = "0x580030")]
		private sealed class <WarpText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40019C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <old_CurveScale>__0;

			[Token(Token = "0x40019C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal AnimationCurve <old_curve>__0;

			[Token(Token = "0x40019C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal TMP_TextInfo <textInfo>__1;

			[Token(Token = "0x40019C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int <characterCount>__1;

			[Token(Token = "0x40019C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <boundsMinX>__1;

			[Token(Token = "0x40019C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal float <boundsMaxX>__1;

			[Token(Token = "0x40019CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3[] <vertices>__2;

			[Token(Token = "0x40019CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x40019CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal WarpTextExample $this;

			[Token(Token = "0x40019CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal object $current;

			[Token(Token = "0x40019CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal bool $disposing;

			[Token(Token = "0x40019CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			internal int $PC;

			[Token(Token = "0x1700051A")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002535")]
				[Address(RVA = "0x757FC4", Offset = "0x757FC4", VA = "0x757FC4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700051B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002536")]
				[Address(RVA = "0x757FCC", Offset = "0x757FCC", VA = "0x757FCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002533")]
			[Address(RVA = "0x75710C", Offset = "0x75710C", VA = "0x75710C")]
			[DebuggerHidden]
			public <WarpText>c__Iterator0()
			{
			}

			[Token(Token = "0x6002534")]
			[Address(RVA = "0x757114", Offset = "0x757114", VA = "0x757114", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002537")]
			[Address(RVA = "0x757FD4", Offset = "0x757FD4", VA = "0x757FD4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002538")]
			[Address(RVA = "0x757FE8", Offset = "0x757FE8", VA = "0x757FE8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AngleMultiplier;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CurveScale;

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x756DA8", Offset = "0x756DA8", VA = "0x756DA8")]
		public WarpTextExample()
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x756F74", Offset = "0x756F74", VA = "0x756F74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x756FE4", Offset = "0x756FE4", VA = "0x756FE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x75707C", Offset = "0x75707C", VA = "0x75707C")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x757010", Offset = "0x757010", VA = "0x757010")]
		[DebuggerHidden]
		private IEnumerator WarpText()
		{
			return null;
		}
	}
}
[Token(Token = "0x200051A")]
public class DieTimer : MonoBehaviour
{
	[Token(Token = "0x400157A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SecondsToDie;

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_fTimer;

	[Token(Token = "0x6002199")]
	[Address(RVA = "0x6AB4A8", Offset = "0x6AB4A8", VA = "0x6AB4A8")]
	public DieTimer()
	{
	}

	[Token(Token = "0x600219A")]
	[Address(RVA = "0x6AB4B8", Offset = "0x6AB4B8", VA = "0x6AB4B8")]
	private void Start()
	{
	}

	[Token(Token = "0x600219B")]
	[Address(RVA = "0x6AB4C0", Offset = "0x6AB4C0", VA = "0x6AB4C0")]
	private void Update()
	{
	}
}
[Token(Token = "0x200051B")]
public class FPSObjectShooter : MonoBehaviour
{
	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Element;

	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float InitialSpeed;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MouseSpeed;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Scale;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Mass;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Life;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_v3MousePosition;

	[Token(Token = "0x600219C")]
	[Address(RVA = "0x79F7CC", Offset = "0x79F7CC", VA = "0x79F7CC")]
	public FPSObjectShooter()
	{
	}

	[Token(Token = "0x600219D")]
	[Address(RVA = "0x79F7E8", Offset = "0x79F7E8", VA = "0x79F7E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600219E")]
	[Address(RVA = "0x79F85C", Offset = "0x79F85C", VA = "0x79F85C")]
	private void Update()
	{
	}
}
[Token(Token = "0x200051C")]
public class LogicBreakableRopes : MonoBehaviour
{
	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UltimateRope Rope1;

	[Token(Token = "0x4001584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UltimateRope Rope2;

	[Token(Token = "0x4001585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool bBroken1;

	[Token(Token = "0x4001586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool bBroken2;

	[Token(Token = "0x600219F")]
	[Address(RVA = "0x683990", Offset = "0x683990", VA = "0x683990")]
	public LogicBreakableRopes()
	{
	}

	[Token(Token = "0x60021A0")]
	[Address(RVA = "0x683998", Offset = "0x683998", VA = "0x683998")]
	private void Start()
	{
	}

	[Token(Token = "0x60021A1")]
	[Address(RVA = "0x6839A0", Offset = "0x6839A0", VA = "0x6839A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60021A2")]
	[Address(RVA = "0x683C74", Offset = "0x683C74", VA = "0x683C74")]
	private void OnRopeBreak(UltimateRope.RopeBreakEventInfo breakInfo)
	{
	}
}
[Token(Token = "0x200051D")]
public class LogicGlobal : MonoBehaviour
{
	[Token(Token = "0x60021A3")]
	[Address(RVA = "0x683D60", Offset = "0x683D60", VA = "0x683D60")]
	public LogicGlobal()
	{
	}

	[Token(Token = "0x60021A4")]
	[Address(RVA = "0x683D68", Offset = "0x683D68", VA = "0x683D68")]
	private void Start()
	{
	}

	[Token(Token = "0x60021A5")]
	[Address(RVA = "0x683BEC", Offset = "0x683BEC", VA = "0x683BEC")]
	public static void GlobalGUI()
	{
	}

	[Token(Token = "0x60021A6")]
	[Address(RVA = "0x683D6C", Offset = "0x683D6C", VA = "0x683D6C")]
	private void Update()
	{
	}
}
[Token(Token = "0x200051E")]
public class LogicLamp : MonoBehaviour
{
	[Token(Token = "0x60021A7")]
	[Address(RVA = "0x683EA8", Offset = "0x683EA8", VA = "0x683EA8")]
	public LogicLamp()
	{
	}

	[Token(Token = "0x60021A8")]
	[Address(RVA = "0x683EB0", Offset = "0x683EB0", VA = "0x683EB0")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x200051F")]
public class LogicRopeWithCoil : MonoBehaviour
{
	[Token(Token = "0x4001587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UltimateRope Rope;

	[Token(Token = "0x4001588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RopeExtensionSpeed;

	[Token(Token = "0x4001589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_fRopeExtension;

	[Token(Token = "0x60021A9")]
	[Address(RVA = "0x683FA4", Offset = "0x683FA4", VA = "0x683FA4")]
	public LogicRopeWithCoil()
	{
	}

	[Token(Token = "0x60021AA")]
	[Address(RVA = "0x683FAC", Offset = "0x683FAC", VA = "0x683FAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60021AB")]
	[Address(RVA = "0x684054", Offset = "0x684054", VA = "0x684054")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60021AC")]
	[Address(RVA = "0x684110", Offset = "0x684110", VA = "0x684110")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000520")]
public class LogicSimpleRopes : MonoBehaviour
{
	[Token(Token = "0x60021AD")]
	[Address(RVA = "0x6842C8", Offset = "0x6842C8", VA = "0x6842C8")]
	public LogicSimpleRopes()
	{
	}

	[Token(Token = "0x60021AE")]
	[Address(RVA = "0x6842D0", Offset = "0x6842D0", VA = "0x6842D0")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x2000521")]
public class RopePersistAttribute : Attribute
{
	[Token(Token = "0x60021AF")]
	[Address(RVA = "0x1155438", Offset = "0x1155438", VA = "0x1155438")]
	public RopePersistAttribute()
	{
	}
}
[Token(Token = "0x2000522")]
public static class RopePersistManager
{
	[Token(Token = "0x2000523")]
	private class RopeData
	{
		[Token(Token = "0x2000524")]
		public class TransformInfo
		{
			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject goObject;

			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string strObjectName;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform tfParent;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 v3LocalPosition;

			[Token(Token = "0x40015A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion qLocalOrientation;

			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 v3LocalScale;

			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool bLinkMarkedKinematic;

			[Token(Token = "0x40015A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
			public bool bExtensibleKinematic;

			[Token(Token = "0x60021B5")]
			[Address(RVA = "0x1107C34", Offset = "0x1107C34", VA = "0x1107C34")]
			public TransformInfo()
			{
			}
		}

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UltimateRope m_rope;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bDeleted;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<string, object> m_hashFieldName2Value;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool m_bSkin;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] m_av3SkinVertices;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2[] m_av2SkinMapping;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector4[] m_av4SkinTangents;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BoneWeight[] m_aSkinBoneWeights;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] m_anSkinTrianglesRope;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int[] m_anSkinTrianglesSections;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Matrix4x4[] m_amtxSkinBindPoses;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TransformInfo m_transformInfoRope;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TransformInfo[] m_aLinkTransformInfo;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TransformInfo m_transformInfoStart;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TransformInfo[] m_transformInfoSegments;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool[][] m_aaJointsProcessed;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool[][] m_aaJointsBroken;

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x1155C20", Offset = "0x1155C20", VA = "0x1155C20")]
		public RopeData(UltimateRope rope)
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x1156174", Offset = "0x1156174", VA = "0x1156174")]
		public static void MakeSkinDeepCopy(Vector3[] av3VerticesSource, Vector2[] av2MappingSource, Vector4[] av4TangentsSource, BoneWeight[] aBoneWeightsSource, int[] anTrianglesRopeSource, int[] anTrianglesSectionsSource, Matrix4x4[] aBindPosesSource, Vector3[] av3VerticesDestiny, Vector2[] av2MappingDestiny, Vector4[] av4TangentsDestiny, BoneWeight[] aBoneWeightsDestiny, int[] anTrianglesRopeDestiny, int[] anTrianglesSectionsDestiny, Matrix4x4[] aBindPosesDestiny)
		{
		}
	}

	[Token(Token = "0x400158A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<int, RopeData> s_hashInstanceID2RopeData;

	[Token(Token = "0x60021B0")]
	[Address(RVA = "0x1155440", Offset = "0x1155440", VA = "0x1155440")]
	static RopePersistManager()
	{
	}

	[Token(Token = "0x60021B1")]
	[Address(RVA = "0x11554B4", Offset = "0x11554B4", VA = "0x11554B4")]
	private static RopeData.TransformInfo ComputeTransformInfo(UltimateRope rope, GameObject node, GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x60021B2")]
	[Address(RVA = "0x1155980", Offset = "0x1155980", VA = "0x1155980")]
	private static void SetTransformInfo(RopeData.TransformInfo transformInfo, GameObject node)
	{
	}
}
[Token(Token = "0x2000525")]
[ExecuteInEditMode]
public class UltimateRope : MonoBehaviour
{
	[Token(Token = "0x2000526")]
	public enum ERopeType
	{
		[Token(Token = "0x40015F1")]
		Procedural,
		[Token(Token = "0x40015F2")]
		LinkedObjects,
		[Token(Token = "0x40015F3")]
		ImportBones
	}

	[Token(Token = "0x2000527")]
	public enum EAxis
	{
		[Token(Token = "0x40015F5")]
		MinusX,
		[Token(Token = "0x40015F6")]
		MinusY,
		[Token(Token = "0x40015F7")]
		MinusZ,
		[Token(Token = "0x40015F8")]
		X,
		[Token(Token = "0x40015F9")]
		Y,
		[Token(Token = "0x40015FA")]
		Z
	}

	[Token(Token = "0x2000528")]
	public enum EColliderType
	{
		[Token(Token = "0x40015FC")]
		None,
		[Token(Token = "0x40015FD")]
		Capsule,
		[Token(Token = "0x40015FE")]
		Box
	}

	[Token(Token = "0x2000529")]
	public enum ERopeExtensionMode
	{
		[Token(Token = "0x4001600")]
		CoilRotationIncrement,
		[Token(Token = "0x4001601")]
		LinearExtensionIncrement
	}

	[Serializable]
	[Token(Token = "0x200052A")]
	public class RopeNode
	{
		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject goNode;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fLength;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fTotalLength;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int nNumLinks;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int nTotalLinks;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EColliderType eColliderType;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int nColliderSkip;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool bFold;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool bIsCoil;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool bInitialOrientationInitialized;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 v3InitialLocalPos;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quaternion qInitialLocalRot;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 v3InitialLocalScale;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool m_bExtensionInitialized;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int m_nExtensionLinkIn;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int m_nExtensionLinkOut;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float m_fExtensionRemainingLength;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float m_fExtensionRemainderIn;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float m_fExtensionRemainderOut;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 m_v3LocalDirectionForward;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 m_v3LocalDirectionUp;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject[] segmentLinks;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ConfigurableJoint[] linkJoints;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool[] linkJointBreaksProcessed;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool bSegmentBroken;

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0x76851C", Offset = "0x76851C", VA = "0x76851C")]
		public RopeNode()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200052B")]
	public class RopeBone
	{
		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject goBone;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform tfParent;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform tfNonBoneParent;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bCreatedCollider;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool bIsStatic;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float fLength;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool bCreatedRigidbody;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int nOriginalLayer;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 v3OriginalLocalScale;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 v3OriginalLocalPos;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Quaternion qOriginalLocalRot;

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0x77354C", Offset = "0x77354C", VA = "0x77354C")]
		public RopeBone()
		{
		}
	}

	[Token(Token = "0x200052C")]
	public class RopeBreakEventInfo
	{
		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UltimateRope rope;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject link1;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject link2;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 worldPos;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 localLink1Pos;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 localLink2Pos;

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x76048C", Offset = "0x76048C", VA = "0x76048C")]
		public RopeBreakEventInfo()
		{
		}
	}

	[Token(Token = "0x40015A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[RopePersist]
	public ERopeType RopeType;

	[Token(Token = "0x40015A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[RopePersist]
	public GameObject RopeStart;

	[Token(Token = "0x40015A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[RopePersist]
	public List<RopeNode> RopeNodes;

	[Token(Token = "0x40015A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[RopePersist]
	public int RopeLayer;

	[Token(Token = "0x40015A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[RopePersist]
	public PhysicMaterial RopePhysicsMaterial;

	[Token(Token = "0x40015A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[RopePersist]
	public float RopeDiameter;

	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[RopePersist]
	public float RopeDiameterScaleX;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[RopePersist]
	public float RopeDiameterScaleY;

	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[RopePersist]
	public int RopeSegmentSides;

	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[RopePersist]
	public Material RopeMaterial;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[RopePersist]
	public float RopeTextureTileMeters;

	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[RopePersist]
	public Material RopeSectionMaterial;

	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[RopePersist]
	public float RopeTextureSectionTileMeters;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[RopePersist]
	public bool IsExtensible;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[RopePersist]
	public float ExtensibleLength;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[RopePersist]
	public bool HasACoil;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[RopePersist]
	public GameObject CoilObject;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[RopePersist]
	public EAxis CoilAxisRight;

	[Token(Token = "0x40015B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[RopePersist]
	public EAxis CoilAxisUp;

	[Token(Token = "0x40015B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[RopePersist]
	public float CoilWidth;

	[Token(Token = "0x40015B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[RopePersist]
	public float CoilDiameter;

	[Token(Token = "0x40015B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[RopePersist]
	public int CoilNumBones;

	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[RopePersist]
	public GameObject LinkObject;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[RopePersist]
	public EAxis LinkAxis;

	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[RopePersist]
	public float LinkOffsetObject;

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[RopePersist]
	public float LinkTwistAngleStart;

	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[RopePersist]
	public float LinkTwistAngleIncrement;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[RopePersist]
	public GameObject BoneFirst;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[RopePersist]
	public GameObject BoneLast;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[RopePersist]
	public string BoneListNamesStatic;

	[Token(Token = "0x40015C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[RopePersist]
	public string BoneListNamesNoColliders;

	[Token(Token = "0x40015C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[RopePersist]
	public EAxis BoneAxis;

	[Token(Token = "0x40015C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[RopePersist]
	public EColliderType BoneColliderType;

	[Token(Token = "0x40015C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[RopePersist]
	public float BoneColliderDiameter;

	[Token(Token = "0x40015C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[RopePersist]
	public int BoneColliderSkip;

	[Token(Token = "0x40015C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[RopePersist]
	public float BoneColliderLength;

	[Token(Token = "0x40015C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[RopePersist]
	public float BoneColliderOffset;

	[Token(Token = "0x40015C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[RopePersist]
	public float LinkMass;

	[Token(Token = "0x40015CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[RopePersist]
	public int LinkSolverIterationCount;

	[Token(Token = "0x40015CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[RopePersist]
	public float LinkJointAngularXLimit;

	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[RopePersist]
	public float LinkJointAngularYLimit;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[RopePersist]
	public float LinkJointAngularZLimit;

	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[RopePersist]
	public float LinkJointSpringValue;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[RopePersist]
	public float LinkJointDamperValue;

	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[RopePersist]
	public float LinkJointMaxForceValue;

	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[RopePersist]
	public float LinkJointBreakForce;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[RopePersist]
	public float LinkJointBreakTorque;

	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[RopePersist]
	public bool LockStartEndInZAxis;

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	[RopePersist]
	public bool SendEvents;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[RopePersist]
	public GameObject EventsObjectReceiver;

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[RopePersist]
	public string OnBreakMethodName;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[RopePersist]
	public bool PersistAfterPlayMode;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	[RopePersist]
	public bool EnablePrefabUsage;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
	[RopePersist]
	public bool AutoRegenerate;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12B")]
	[HideInInspector]
	[RopePersist]
	public bool Deleted;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	[RopePersist]
	public float[] LinkLengths;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[HideInInspector]
	[RopePersist]
	public int TotalLinks;

	[Token(Token = "0x40015DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[HideInInspector]
	[RopePersist]
	public float TotalRopeLength;

	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[HideInInspector]
	[RopePersist]
	public bool m_bRopeStartInitialOrientationInitialized;

	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[HideInInspector]
	[RopePersist]
	public Vector3 m_v3InitialRopeStartLocalPos;

	[Token(Token = "0x40015E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[HideInInspector]
	[RopePersist]
	public Quaternion m_qInitialRopeStartLocalRot;

	[Token(Token = "0x40015E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[HideInInspector]
	[RopePersist]
	public Vector3 m_v3InitialRopeStartLocalScale;

	[Token(Token = "0x40015E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	[HideInInspector]
	[RopePersist]
	public int m_nFirstNonCoilNode;

	[Token(Token = "0x40015E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[HideInInspector]
	[RopePersist]
	public float[] m_afCoilBoneRadiuses;

	[Token(Token = "0x40015E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[HideInInspector]
	[RopePersist]
	public float[] m_afCoilBoneAngles;

	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[HideInInspector]
	[RopePersist]
	public float[] m_afCoilBoneX;

	[Token(Token = "0x40015E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[HideInInspector]
	[RopePersist]
	public float m_fCurrentCoilRopeRadius;

	[Token(Token = "0x40015E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[HideInInspector]
	[RopePersist]
	public float m_fCurrentCoilTurnsLeft;

	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[HideInInspector]
	[RopePersist]
	public float m_fCurrentCoilLength;

	[Token(Token = "0x40015E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[HideInInspector]
	[RopePersist]
	public float m_fCurrentExtension;

	[Token(Token = "0x40015EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[HideInInspector]
	[RopePersist]
	public float m_fCurrentExtensionInput;

	[Token(Token = "0x40015EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[HideInInspector]
	[RopePersist]
	public RopeBone[] ImportedBones;

	[Token(Token = "0x40015EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[HideInInspector]
	[RopePersist]
	public bool m_bBonesAreImported;

	[Token(Token = "0x40015ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[HideInInspector]
	[RopePersist]
	public string m_strStatus;

	[Token(Token = "0x40015EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[HideInInspector]
	[RopePersist]
	public bool m_bLastStatusIsError;

	[Token(Token = "0x40015EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[HideInInspector]
	[RopePersist]
	public string m_strAssetFile;

	[Token(Token = "0x1700041A")]
	[HideInInspector]
	public string Status
	{
		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x75A9D0", Offset = "0x75A9D0", VA = "0x75A9D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x75A9D8", Offset = "0x75A9D8", VA = "0x75A9D8")]
		set
		{
		}
	}

	[Token(Token = "0x60021B6")]
	[Address(RVA = "0x75A8BC", Offset = "0x75A8BC", VA = "0x75A8BC")]
	public UltimateRope()
	{
	}

	[Token(Token = "0x60021B9")]
	[Address(RVA = "0x75A9E0", Offset = "0x75A9E0", VA = "0x75A9E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60021BA")]
	[Address(RVA = "0x75EA04", Offset = "0x75EA04", VA = "0x75EA04")]
	private void Start()
	{
	}

	[Token(Token = "0x60021BB")]
	[Address(RVA = "0x75EA10", Offset = "0x75EA10", VA = "0x75EA10")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60021BC")]
	[Address(RVA = "0x75EA14", Offset = "0x75EA14", VA = "0x75EA14")]
	private void Update()
	{
	}

	[Token(Token = "0x60021BD")]
	[Address(RVA = "0x75EA18", Offset = "0x75EA18", VA = "0x75EA18")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60021BE")]
	[Address(RVA = "0x76059C", Offset = "0x76059C", VA = "0x76059C")]
	public void DeleteRope(bool bResetNodePositions = false, bool bDestroySkin = true)
	{
	}

	[Token(Token = "0x60021BF")]
	[Address(RVA = "0x760F68", Offset = "0x760F68", VA = "0x760F68")]
	public void DeleteRopeLinks()
	{
	}

	[Token(Token = "0x60021C0")]
	[Address(RVA = "0x7616B0", Offset = "0x7616B0", VA = "0x7616B0")]
	public bool Regenerate(bool bResetNodePositions = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60021C1")]
	[Address(RVA = "0x7685D8", Offset = "0x7685D8", VA = "0x7685D8")]
	public bool IsLastStatusError()
	{
		return default(bool);
	}

	[Token(Token = "0x60021C2")]
	[Address(RVA = "0x7685E0", Offset = "0x7685E0", VA = "0x7685E0")]
	public bool ChangeRopeDiameter(float fNewDiameter, float fNewScaleX, float fNewScaleY)
	{
		return default(bool);
	}

	[Token(Token = "0x60021C3")]
	[Address(RVA = "0x769608", Offset = "0x769608", VA = "0x769608")]
	public bool ChangeRopeSegmentSides(int nNewSegmentSides)
	{
		return default(bool);
	}

	[Token(Token = "0x60021C4")]
	[Address(RVA = "0x76AE34", Offset = "0x76AE34", VA = "0x76AE34")]
	public void SetupRopeMaterials()
	{
	}

	[Token(Token = "0x60021C5")]
	[Address(RVA = "0x75DF68", Offset = "0x75DF68", VA = "0x75DF68")]
	public void SetupRopeLinks()
	{
	}

	[Token(Token = "0x60021C6")]
	[Address(RVA = "0x76B70C", Offset = "0x76B70C", VA = "0x76B70C")]
	public void SetupRopeJoints()
	{
	}

	[Token(Token = "0x60021C7")]
	[Address(RVA = "0x76DC6C", Offset = "0x76DC6C", VA = "0x76DC6C")]
	public void CheckNeedsStartExitLockZ()
	{
	}

	[Token(Token = "0x60021C8")]
	[Address(RVA = "0x75FC64", Offset = "0x75FC64", VA = "0x75FC64")]
	public void FillLinkMeshIndicesRope(int nLinearLinkIndex, int nTotalLinks, ref int[] indices, bool bBreakable, bool bBrokenLink = false)
	{
	}

	[Token(Token = "0x60021C9")]
	[Address(RVA = "0x76002C", Offset = "0x76002C", VA = "0x76002C")]
	public void FillLinkMeshIndicesSections(int nLinearLinkIndex, int nTotalLinks, ref int[] indices, bool bBreakable, bool bBrokenLink = false)
	{
	}

	[Token(Token = "0x60021CA")]
	[Address(RVA = "0x76E83C", Offset = "0x76E83C", VA = "0x76E83C")]
	public bool HasDynamicSegmentNodes()
	{
		return default(bool);
	}

	[Token(Token = "0x60021CB")]
	[Address(RVA = "0x76EA60", Offset = "0x76EA60", VA = "0x76EA60")]
	public void BeforeImportedBonesObjectRespawn()
	{
	}

	[Token(Token = "0x60021CC")]
	[Address(RVA = "0x76EB7C", Offset = "0x76EB7C", VA = "0x76EB7C")]
	public void AfterImportedBonesObjectRespawn()
	{
	}

	[Token(Token = "0x60021CD")]
	[Address(RVA = "0x76ECB4", Offset = "0x76ECB4", VA = "0x76ECB4")]
	public void ExtendRope(ERopeExtensionMode eRopeExtensionMode, float fIncrement)
	{
	}

	[Token(Token = "0x60021CE")]
	[Address(RVA = "0x75E9FC", Offset = "0x75E9FC", VA = "0x75E9FC")]
	public void RecomputeCoil()
	{
	}

	[Token(Token = "0x60021CF")]
	[Address(RVA = "0x76FF28", Offset = "0x76FF28", VA = "0x76FF28")]
	public GameObject BuildStaticMeshObject(out string strStatusMessage)
	{
		return null;
	}

	[Token(Token = "0x60021D0")]
	[Address(RVA = "0x7720B0", Offset = "0x7720B0", VA = "0x7720B0")]
	public void MoveNodeUp(int nNode)
	{
	}

	[Token(Token = "0x60021D1")]
	[Address(RVA = "0x7721EC", Offset = "0x7721EC", VA = "0x7721EC")]
	public void MoveNodeDown(int nNode)
	{
	}

	[Token(Token = "0x60021D2")]
	[Address(RVA = "0x772334", Offset = "0x772334", VA = "0x772334")]
	public void CreateNewNode(int nNode)
	{
	}

	[Token(Token = "0x60021D3")]
	[Address(RVA = "0x7723E8", Offset = "0x7723E8", VA = "0x7723E8")]
	public void RemoveNode(int nNode)
	{
	}

	[Token(Token = "0x60021D4")]
	[Address(RVA = "0x75E958", Offset = "0x75E958", VA = "0x75E958")]
	public bool FirstNodeIsCoil()
	{
		return default(bool);
	}

	[Token(Token = "0x60021D5")]
	[Address(RVA = "0x766630", Offset = "0x766630", VA = "0x766630")]
	private void CheckAddCoilNode()
	{
	}

	[Token(Token = "0x60021D6")]
	[Address(RVA = "0x761608", Offset = "0x761608", VA = "0x761608")]
	private void CheckDelCoilNode()
	{
	}

	[Token(Token = "0x60021D7")]
	[Address(RVA = "0x75AA40", Offset = "0x75AA40", VA = "0x75AA40")]
	private void CreateRopeJoints(bool bCheckIfBroken = false)
	{
	}

	[Token(Token = "0x60021D8")]
	[Address(RVA = "0x77245C", Offset = "0x77245C", VA = "0x77245C")]
	private ConfigurableJoint CreateJoint(GameObject goObject, GameObject goConnectedTo, Vector3 v3Pivot)
	{
		return null;
	}

	[Token(Token = "0x60021D9")]
	[Address(RVA = "0x76D82C", Offset = "0x76D82C", VA = "0x76D82C")]
	private void SetupJoint(ConfigurableJoint joint)
	{
	}

	[Token(Token = "0x60021DA")]
	[Address(RVA = "0x76FDB0", Offset = "0x76FDB0", VA = "0x76FDB0")]
	private Vector3 GetAxisVector(EAxis eAxis, float fLength)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60021DB")]
	[Address(RVA = "0x76EF28", Offset = "0x76EF28", VA = "0x76EF28")]
	private float ExtendRopeLinear(float fLinearIncrement)
	{
		return default(float);
	}

	[Token(Token = "0x60021DC")]
	[Address(RVA = "0x772594", Offset = "0x772594", VA = "0x772594")]
	private void SetExtensibleLinkToKinematic(GameObject link, bool bKinematic)
	{
	}

	[Token(Token = "0x60021DD")]
	[Address(RVA = "0x766A70", Offset = "0x766A70", VA = "0x766A70")]
	private void SetupCoilBones(float fCoilLength)
	{
	}

	[Token(Token = "0x60021DE")]
	[Address(RVA = "0x768090", Offset = "0x768090", VA = "0x768090")]
	private Quaternion GetLinkedObjectLocalRotation(float fTwistAngle = 0f)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60021DF")]
	[Address(RVA = "0x767E10", Offset = "0x767E10", VA = "0x767E10")]
	private float GetLinkedObjectScale(float fSegmentLength, int nNumLinks)
	{
		return default(float);
	}

	[Token(Token = "0x60021E0")]
	[Address(RVA = "0x76AFC4", Offset = "0x76AFC4", VA = "0x76AFC4")]
	private float GetLinkDiameter()
	{
		return default(float);
	}

	[Token(Token = "0x60021E1")]
	[Address(RVA = "0x760494", Offset = "0x760494", VA = "0x760494")]
	private Vector3 GetLinkAxisOffset(float fValue)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60021E2")]
	[Address(RVA = "0x76B3EC", Offset = "0x76B3EC", VA = "0x76B3EC")]
	private int GetLinkAxisIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60021E3")]
	[Address(RVA = "0x76B454", Offset = "0x76B454", VA = "0x76B454")]
	private bool GetLinkBoxColliderCenterAndSize(float fLinkLength, float fRopeDiameter, ref Vector3 v3CenterInOut, ref Vector3 v3SizeInOut)
	{
		return default(bool);
	}

	[Token(Token = "0x60021E4")]
	[Address(RVA = "0x765E24", Offset = "0x765E24", VA = "0x765E24")]
	private bool BuildImportedBoneList(GameObject goBoneFirst, GameObject goBoneLast, List<int> ListImportBonesStatic, List<int> ListImportBonesNoCollider, out List<RopeBone> outListImportedBones, out string strErrorMessage)
	{
		return default(bool);
	}

	[Token(Token = "0x60021E5")]
	[Address(RVA = "0x77285C", Offset = "0x77285C", VA = "0x77285C")]
	private bool BuildImportedBoneListTry(GameObject goRoot, string strPrefix, int nIndexFirst, int nIndexLast, int nDigitsFirst, int nDigitsLast, List<int> ListImportBonesStatic, List<int> ListImportBonesNoCollider, out List<RopeBone> outListImportedBones, ref string strErrorMessage)
	{
		return default(bool);
	}

	[Token(Token = "0x60021E6")]
	[Address(RVA = "0x773334", Offset = "0x773334", VA = "0x773334")]
	private bool BuildBoneHashString2GameObject(GameObject goRoot, GameObject goCurrent, ref Dictionary<string, GameObject> outHashString2GameObjects, ref string strErrorMessage)
	{
		return default(bool);
	}

	[Token(Token = "0x60021E7")]
	[Address(RVA = "0x765030", Offset = "0x765030", VA = "0x765030")]
	private bool ParseBoneIndices(string strBoneList, out List<int> outListBoneIndices, out string strErrorMessage)
	{
		return default(bool);
	}
}
[Token(Token = "0x200052D")]
public class UltimateRopeLink : MonoBehaviour
{
	[Token(Token = "0x400162C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ExtensibleKinematic;

	[Token(Token = "0x60021EB")]
	[Address(RVA = "0x773588", Offset = "0x773588", VA = "0x773588")]
	public UltimateRopeLink()
	{
	}
}
[Serializable]
[Token(Token = "0x200052E")]
public class RandomAudio
{
	[Token(Token = "0x400162D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioClip Clip;

	[Token(Token = "0x400162E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5808E0", Offset = "0x5808E0")]
	public float Weighting;

	[Token(Token = "0x60021EC")]
	[Address(RVA = "0x1154530", Offset = "0x1154530", VA = "0x1154530")]
	public RandomAudio()
	{
	}
}
[Token(Token = "0x200052F")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5808F8", Offset = "0x5808F8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5808F8", Offset = "0x5808F8")]
public class RandomSound : MonoBehaviour
{
	[Token(Token = "0x400162F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float _audioActivationTime;

	[Token(Token = "0x4001630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource _source;

	[Token(Token = "0x4001631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] AudioOptions;

	[Token(Token = "0x4001632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580984", Offset = "0x580984")]
	private static Func<AudioClip, bool> <>f__am$cache0;

	[Token(Token = "0x60021ED")]
	[Address(RVA = "0x1154540", Offset = "0x1154540", VA = "0x1154540")]
	public RandomSound()
	{
	}

	[Token(Token = "0x60021EE")]
	[Address(RVA = "0x1154548", Offset = "0x1154548", VA = "0x1154548")]
	private void OnCollisionEnter(Collision inCollision)
	{
	}

	[Token(Token = "0x60021EF")]
	[Address(RVA = "0x1154614", Offset = "0x1154614", VA = "0x1154614")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60021F0")]
	[Address(RVA = "0x115454C", Offset = "0x115454C", VA = "0x115454C")]
	private void PlayRandomAudio()
	{
	}

	[Token(Token = "0x60021F1")]
	[Address(RVA = "0x1154768", Offset = "0x1154768", VA = "0x1154768")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580994", Offset = "0x580994")]
	private static bool <OnValidate>m__0(AudioClip p)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000530")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5809A4", Offset = "0x5809A4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5809A4", Offset = "0x5809A4")]
public class VolumeAnimator : MonoBehaviour
{
	[Token(Token = "0x20005D5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580AB0", Offset = "0x580AB0")]
	private sealed class <CheckVolume>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <tot>__1;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float <rmsVal>__1;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float <dbValue>__1;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal VolumeAnimator $this;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x1700051C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600253B")]
			[Address(RVA = "0x775D5C", Offset = "0x775D5C", VA = "0x775D5C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600253C")]
			[Address(RVA = "0x775D64", Offset = "0x775D64", VA = "0x775D64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0x775A34", Offset = "0x775A34", VA = "0x775A34")]
		[DebuggerHidden]
		public <CheckVolume>c__Iterator0()
		{
		}

		[Token(Token = "0x600253A")]
		[Address(RVA = "0x775A3C", Offset = "0x775A3C", VA = "0x775A3C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600253D")]
		[Address(RVA = "0x775D6C", Offset = "0x775D6C", VA = "0x775D6C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600253E")]
		[Address(RVA = "0x775D80", Offset = "0x775D80", VA = "0x775D80", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float CheckFrequency;

	[Token(Token = "0x4001634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x580A30", Offset = "0x580A30")]
	public AnimationClip LoudAnim;

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float LoudDBThreshold;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x580A68", Offset = "0x580A68")]
	public AnimationClip QuietAnim;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float QuietDBThreshold;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource _source;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Animator _animator;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int sampleRate;

	[Token(Token = "0x400163B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] vals;

	[Token(Token = "0x60021F2")]
	[Address(RVA = "0x775918", Offset = "0x775918", VA = "0x775918")]
	public VolumeAnimator()
	{
	}

	[Token(Token = "0x60021F3")]
	[Address(RVA = "0x775920", Offset = "0x775920", VA = "0x775920")]
	private void Start()
	{
	}

	[Token(Token = "0x60021F4")]
	[Address(RVA = "0x775A30", Offset = "0x775A30", VA = "0x775A30")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60021F5")]
	[Address(RVA = "0x7759C4", Offset = "0x7759C4", VA = "0x7759C4")]
	[DebuggerHidden]
	private IEnumerator CheckVolume()
	{
		return null;
	}
}
[Token(Token = "0x20005A5")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580B20", Offset = "0x580B20")]
internal sealed class <>__AnonType0<<A>__T, <B>__T, <C>__T, <D>__T>
{
	[Token(Token = "0x40018DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580B30", Offset = "0x580B30")]
	private readonly <A>__T <A>;

	[Token(Token = "0x40018DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580B44", Offset = "0x580B44")]
	private readonly <B>__T <B>;

	[Token(Token = "0x40018DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580B58", Offset = "0x580B58")]
	private readonly <C>__T <C>;

	[Token(Token = "0x40018DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580B6C", Offset = "0x580B6C")]
	private readonly <D>__T <D>;

	[Token(Token = "0x170004CB")]
	public <A>__T A
	{
		[Token(Token = "0x6002442")]
		get
		{
			return (<A>__T)null;
		}
	}

	[Token(Token = "0x170004CC")]
	public <B>__T B
	{
		[Token(Token = "0x6002443")]
		get
		{
			return (<B>__T)null;
		}
	}

	[Token(Token = "0x170004CD")]
	public <C>__T C
	{
		[Token(Token = "0x6002444")]
		get
		{
			return (<C>__T)null;
		}
	}

	[Token(Token = "0x170004CE")]
	public <D>__T D
	{
		[Token(Token = "0x6002445")]
		get
		{
			return (<D>__T)null;
		}
	}

	[Token(Token = "0x6002441")]
	[DebuggerHidden]
	public <>__AnonType0(<A>__T A, <B>__T B, <C>__T C, <D>__T D)
	{
	}

	[Token(Token = "0x6002446")]
	[DebuggerHidden]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6002447")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6002448")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x20005A6")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x580BC0", Offset = "0x580BC0")]
internal sealed class <>__AnonType1<<A>__T, <B>__T, <C>__T, <D>__T, <E>__T>
{
	[Token(Token = "0x40018E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580BD0", Offset = "0x580BD0")]
	private readonly <A>__T <A>;

	[Token(Token = "0x40018E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580BE4", Offset = "0x580BE4")]
	private readonly <B>__T <B>;

	[Token(Token = "0x40018E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580BF8", Offset = "0x580BF8")]
	private readonly <C>__T <C>;

	[Token(Token = "0x40018E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580C0C", Offset = "0x580C0C")]
	private readonly <D>__T <D>;

	[Token(Token = "0x40018E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x580C20", Offset = "0x580C20")]
	private readonly <E>__T <E>;

	[Token(Token = "0x170004CF")]
	public <A>__T A
	{
		[Token(Token = "0x600244A")]
		get
		{
			return (<A>__T)null;
		}
	}

	[Token(Token = "0x170004D0")]
	public <B>__T B
	{
		[Token(Token = "0x600244B")]
		get
		{
			return (<B>__T)null;
		}
	}

	[Token(Token = "0x170004D1")]
	public <C>__T C
	{
		[Token(Token = "0x600244C")]
		get
		{
			return (<C>__T)null;
		}
	}

	[Token(Token = "0x170004D2")]
	public <D>__T D
	{
		[Token(Token = "0x600244D")]
		get
		{
			return (<D>__T)null;
		}
	}

	[Token(Token = "0x170004D3")]
	public <E>__T E
	{
		[Token(Token = "0x600244E")]
		get
		{
			return (<E>__T)null;
		}
	}

	[Token(Token = "0x6002449")]
	[DebuggerHidden]
	public <>__AnonType1(<A>__T A, <B>__T B, <C>__T C, <D>__T D, <E>__T E)
	{
	}

	[Token(Token = "0x600244F")]
	[DebuggerHidden]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6002450")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6002451")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
